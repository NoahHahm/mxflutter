/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: __webpack_require__ */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

let { MXJSWidgetHomePage } = __webpack_require__(/*! ./lib/home_page */ "./lib/home_page.js");

const MXFlutter = globalThis.MXFlutter;

MXFlutter.regist({
  name: 'mxflutter-js-demo',
  RootWidget: MXJSWidgetHomePage,
});


/***/ }),

/***/ "./lib/app_demo/animation.js":
/*!***********************************!*\
  !*** ./lib/app_demo/animation.js ***!
  \***********************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 133:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  Scaffold,
  Container,
  Center,
  AppBar,
  Text,
  Icon,
  IconData,
  FloatingActionButton,
  Image,
  Animation,
  Tween,
  AnimationController,
  AnimatedBuilder,
  Duration,
  AnimationStatus

} = __webpack_require__(/*! ../js_flutter.js */ "./lib/js_flutter.js");


//业务代码

class JSAnimationPage extends MXJSStatefulWidget {
  constructor() {
    super('JSAnimationPage');
  }

  createState() {
    return new JSAnimationPageState(this);
  }
}

class JSAnimationPageState extends MXJSWidgetState {
  constructor() {
    super();

    this.tween = new Tween({ begin: 50.0, end: 300.0 });
    this.animationController = new AnimationController({ duration: new Duration({ seconds: 3 }) });
    this.animation = new Animation({ tween: this.tween, controller: this.animationController });

    this.animation.addStatusListener(this.animationLoopFunc.bind(this));

    this.count = 0;
  }

  animationLoopFunc(status) {
    MXJSLog.log('callback from flutter ....  ' + status);
    if (status == AnimationStatus.completed) {
      this.animationController.reverse();
      this.count++;
    } else if (status == AnimationStatus.dismissed) {
      this.animationController.forward();
    }
    if (this.count > 5) {
      this.animation.removeStatusListener(this.animationLoopFunc);
    }
  }

  beginAnimation() {
    this.animationController.forward();
  }

  build(context) {
    var imageRatio = 1.455;

    let w = new Scaffold({
      appBar: new AppBar({
        title: new Text("Animation Demo")
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(new IconData(0xe145, { fontFamily: 'MaterialIcons', semanticLabel: 'Action' })),
        onPressed: function () {
          this.beginAnimation();
        }.bind(this)
      }),
      body: new ScaleAnimation({
        child: Image.network('https://pic2.zhimg.com/50/v2-6416ef6d3181117a0177275286fac8f3_hd.jpg'),
        animation: this.animation
      })
    });

    return w;
  }
}


class ScaleAnimation extends MXJSStatefulWidget {

  constructor({
    child,
    animation
  } = {}) {
    super('ScaleAnimation');
    this.child = child;
    this.animation = animation;
  }

  createState() {
    return new ScaleAnimationState(this);
  }
}

class ScaleAnimationState extends MXJSWidgetState {

  build(context) {
    var imageRatio = 1.455;
    let widget = new Center({
      child: new AnimatedBuilder({
        animation: this.widget.animation,
        widget: new Container({
          // height: this.animation.value() * imageRatio + 2 - 5,
          width: "$value",
          child: this.widget.child
        })
        // child: this.child,
      })
    })
    return widget;
  }
}
module.exports = { JSAnimationPage };


/***/ }),

/***/ "./lib/app_demo/component/section_title.js":
/*!*************************************************!*\
  !*** ./lib/app_demo/component/section_title.js ***!
  \*************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 85:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {




let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  Padding,
  Theme,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

class SectionTitle extends MXJSStatelessWidget {
  constructor(title,{key}={}){
    super("SectionTitle",{key:key});
    this.title = title;
  }

  build(context){
    return new Container({
      padding: EdgeInsets.all(10.0),
      color: Theme.of(context).primaryColor,
      child: new Row({
        children: [
          new Icon(new IconData(0xe80e, { fontFamily: 'MaterialIcons' }), { size: 20, color: new Color(0xFFFFFFFF) }),
          new Padding({ padding: EdgeInsets.fromLTRB(10.0, 0.0, 0.0, 0.0) }),
          new Text(this.title, {
            textAlign: TextAlign.start,
            style:new TextStyle({
              fontSize: 16,
              fontWeight: Theme.of(context).textTheme.title.fontWeight,
              color:Colors.white
            })
          })
        ]
      })
    });
  }
}

module.exports = {
  SectionTitle,
}



/***/ }),

/***/ "./lib/app_demo/contact.js":
/*!*********************************!*\
  !*** ./lib/app_demo/contact.js ***!
  \*********************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 431:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
    MXJSLog,
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    Color,
    Text,
    Icon,
    IconData,
    Theme,
    ThemeData,
    CustomScrollView,
    SliverAppBar,
    SliverChildListDelegate,
    EdgeInsets,
    Expanded,
    Column,
    Image,
    BoxFit,
    Row,
    BorderSide,
    BoxDecoration,
    Border,
    MergeSemantics,
    SizedBox,
    IconButton,
    PopupMenuButton,
    PopupMenuItem,
    FlexibleSpaceBar,
    Stack,
    StackFit,
    AnnotatedRegion,
    DecoratedBox,
    LinearGradient,
    Alignment,
    SliverList,
    SystemUiOverlayStyle,
    Padding,
    DefaultTextStyle,
    MXJSStatelessWidget,
    SafeArea,
    Colors
} = __webpack_require__(/*! ../js_flutter.js */ "./lib/js_flutter.js");


class ContactCategory extends MXJSStatelessWidget {
    constructor({icon, children} = {}) {
      super('ContactCategory');

      this.icon = icon;
      this.children = children;
    }

    build(context) {
        let themeData = Theme.of(context);
        let widget = new Container({
            padding: EdgeInsets.symmetric({
                vertical: 16.0
            }),
            decoration: new BoxDecoration({
                border: new Border({
                    bottom: new BorderSide({
                        color: themeData.dividerColor
                    })
                })
            }),
            child: new DefaultTextStyle({
                style: themeData.textTheme.subhead,
                child: new SafeArea({
                    top: false,
                    bottom: false,
                    child: new Row({
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                            new Container({
                                padding: EdgeInsets.symmetric({
                                    vertical: 24.0
                                }),
                                width: 72.0,
                                child: new Icon(this.icon, {
                                    color: themeData.primaryColor
                                })
                            }),
                            new Expanded({
                                child: new Column({
                                    children: this.children
                                })
                            })
                        ]
                    })
                })
            })
        });

        return widget;
    }
}

class ContactItem extends MXJSStatelessWidget {
    constructor({icon, lines, tooltip, onPressed} = {}) {
        super('ContactItem');

        this.icon = icon;
        this.lines = lines;
        this.tooltip = tooltip;
        this.onPressed = onPressed;
    }
    
    build(context) {
        let themeData = Theme.of(context);
        let columnChildren = [];
        let rowChildren = [];

        let length = this.lines.length;
        for(let i = 0; i < length; i++) {
            if (i != length -1) {
                columnChildren.push(new Text(this.lines[i]));
            }
            else {
                columnChildren.push(new Text(this.lines[i], {style: themeData.textTheme.caption}));
            }
        }
        rowChildren = [
            new Expanded({
                child: new Column({
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: columnChildren,
                }),
            }),
        ];

        if (this.icon != null) {
            rowChildren.push(
                new SizedBox({
                    width: 72.0,
                    child: new IconButton({
                        icon: new Icon(this.icon),
                        color: themeData.primaryColor,
                        onPressed: this.onPressed ,
                    }),
                })
            );
        }

        let widget = new MergeSemantics({
            child: new Padding({
                padding: EdgeInsets.symmetric({
                    vertical: 16.0,
                }),
                child: new Row({
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: rowChildren,
                }),
            }),
        });
    
        return widget;
    }
}

AppBarBehavior = {
    normal: 0, 
    pinned: 1, 
    floating: 2, 
    snapping: 3, 
};


class JSContactPage extends MXJSStatefulWidget {
    constructor() {
        super('JSContactPage');
    }

    createState() {
        return new JSContactPageState(this);
    }
}

class JSContactPageState extends MXJSWidgetState { 
    build(context) {
        let widget = new Theme({
            data: new ThemeData({
                brightness: Brightness.light,
                primarySwatch: Colors.indigo,
                platform: Theme.of(context).platform
            }),
            child: new Scaffold({
                body: new CustomScrollView({
                  slivers: this.buildBody(context)
                })
            })
        });
        return widget;
    }

    buildBody(context) {
        let appBarHeight = 256.0;
        let appBarBehavior = AppBarBehavior.pinned;
        let themeData = Theme.of(context);
        let widget = [
            new SliverAppBar({
                backgroundColor: themeData.primaryColor,
                expandedHeight: appBarHeight,
                pinned: appBarBehavior == AppBarBehavior.pinned,
                floating: appBarBehavior == AppBarBehavior.floating || appBarBehavior == AppBarBehavior.snapping,
                snap: appBarBehavior == AppBarBehavior.snapping,
                actions: [
                    new IconButton({
                        icon: new Icon(new IconData(0xe150, {fontFamily:'MaterialIcons'})),
                        tooltip: 'Edit',
                        onPressed: function () {
                            MXJSLog.log('edit button pressed');
                        }
                    }),
                    new PopupMenuButton({
                        onSelected: function(args) {
                            MXJSLog.log('more button pressed, index ' + args);
                        },
                        itemBuilder: function(context) {
                            let list = [
                                new PopupMenuItem({
                                    value: AppBarBehavior.normal,
                                    child: new Text('App bar scrolls away'),
                                }),
                                new PopupMenuItem({
                                    value: AppBarBehavior.pinned,
                                    child: new Text('App bar stays away'),
                                }),
                                new PopupMenuItem({
                                    value: AppBarBehavior.floating,
                                    child: new Text('App bar floats'),
                                }),
                                new PopupMenuItem({
                                    value: AppBarBehavior.snapping,
                                    child: new Text('App bar snaps'),
                                }),
                            ];
                            return list;
                        }
                    })
                ],
                flexibleSpace: new FlexibleSpaceBar({
                    title: new Text('Ali Connors'),
                    background: new Stack({
                        fit: StackFit.expand,
                        children: [
                            Image.asset('people/ali_landscape.png', {
                                mxPackage: 'flutter_gallery_assets',
                                fit: BoxFit.cover,
                                height: appBarHeight
                            }),
                            new DecoratedBox({
                                decoration: new BoxDecoration({
                                    gradient: new LinearGradient({
                                        begin: new Alignment(0.0, -1.0),
                                        end: new Alignment(0.0, -0.4),
                                        colors: [
                                            new Color(0x60000000), 
                                            new Color(0x00000000),
                                        ]
                                    })
                                })
                            })
                        ]
                    })
                })
            }),
            new SliverList({
                delegate: new SliverChildListDelegate([
                    new AnnotatedRegion({
                        value: new SystemUiOverlayStyle({
                            systemNavigationBarColor: new Color(0xFF000000),
                            systemNavigationBarDividerColor: null,
                            statusBarColor: null,
                            systemNavigationBarIconBrightness: Brightness.light,
                            statusBarIconBrightness: Brightness.light,
                            statusBarBrightness:Brightness.dark
                        }),
                        child: new ContactCategory({
                            icon: new IconData(0xe0b0, {fontFamily:'MaterialIcons'}),
                            children:[
                                new ContactItem({
                                    icon: new IconData(0xe0c9, {fontFamily:'MaterialIcons'}),
                                    tooltip: 'Send message',
                                    onPressed: function() {
                                        MXJSLog.log('Send message');
                                    },
                                    lines: [
                                        '(650) 555-1234',
                                        'Mobile'
                                    ]
                                }),
                                new ContactItem({
                                    icon: new IconData(0xe0c9, {fontFamily:'MaterialIcons'}),
                                    tooltip: 'Send message',
                                    onPressed: function () {
                                        MXJSLog.log('Send message');
                                    },
                                    lines: [
                                        '(323) 555-6789',
                                        'Work'
                                    ]
                                }),
                                new ContactItem({
                                    icon: new IconData(0xe0c9, {fontFamily:'MaterialIcons'}),
                                    tooltip: 'Send message',
                                    onPressed: function () {
                                        MXJSLog.log('Send message');
                                    },
                                    lines: [
                                        '(650) 555-6789',
                                        'Home'
                                    ]
                                })
                            ]
                        })
                    }),
                    new ContactCategory({
                        icon: new IconData(0xe0d0, {fontFamily:'MaterialIcons'}),
                        children:[
                            new ContactItem({
                                icon: new IconData(0xe0be, {fontFamily:'MaterialIcons'}),
                                tooltip: 'Send personal e-mail',
                                onPressed: function () {
                                    MXJSLog.log('Send personal e-mail');
                                },
                                lines: [
                                    'ali_connors@example.com',
                                    'Personal'
                                ]
                            }),
                            new ContactItem({
                                icon: new IconData(0xe0be, {fontFamily:'MaterialIcons'}),
                                tooltip: 'Send personal e-mail',
                                onPressed: function () {
                                    MXJSLog.log('Send personal e-mail');
                                },
                                lines: [
                                    'aliconnors@example.com',
                                    'Work'
                                ]
                            })
                        ]
                    }),
                    new ContactCategory({
                        icon: new IconData(0xe0c8, {fontFamily:'MaterialIcons'}),
                        children:[
                            new ContactItem({
                                icon: new IconData(0xe55b, {fontFamily:'MaterialIcons'}),
                                tooltip: 'Open map',
                                onPressed: function () {
                                    MXJSLog.log('Open map');
                                },
                                lines: [
                                    '2000 Main Street',
                                    'San Francisco, CA',
                                    'Home'
                                ]
                            }),
                            new ContactItem({
                                icon: new IconData(0xe55b, {fontFamily:'MaterialIcons'}),
                                tooltip: 'Open map',
                                onPressed: function () {
                                    MXJSLog.log('Open map');
                                },
                                lines: [
                                    '1600 Amphitheater Parkway',
                                    'Mountain View, CA',
                                    'Work'
                                ]
                            }),
                            new ContactItem({
                                icon: new IconData(0xe55b, {fontFamily:'MaterialIcons'}),
                                tooltip: 'Open map',
                                onPressed: function () {
                                    MXJSLog.log('Open map');
                                },
                                lines: [
                                    '126 Severyns Ave',
                                    'Mountain View, CA',
                                    'Jet Travel'
                                ]
                            })
                        ]
                    }),
                    new ContactCategory({
                        icon: new IconData(0xe8df, {fontFamily:'MaterialIcons'}),
                        children:[
                            new ContactItem({
                                lines: [
                                    'Birthday',
                                    'January 9th, 1989'
                                ]
                            }),
                            new ContactItem({
                                lines: [
                                    'Wedding anniversary',
                                    'June 21st, 2014'
                                ]
                            }),
                            new ContactItem({
                                lines: [
                                    'First day in office',
                                    'January 20th, 2015'
                                ]
                            }),
                            new ContactItem({
                                lines: [
                                    'Last day in office',
                                    'August 9th, 2018'
                                ]
                            })
                        ]
                    })
                ])
            })
        ];
        return widget;
    }
}

module.exports = {JSContactPage};


/***/ }),

/***/ "./lib/app_demo/custom_js_api.js":
/*!***************************************!*\
  !*** ./lib/app_demo/custom_js_api.js ***!
  \***************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 177:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.


let {
    MXJSLog,
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MXJSStatelessWidget,
    MaterialApp,
    Scaffold,
    Container,
    ListTile,
    Center,
    Color,
    AppBar,
    SnackBar,
    Text,
    Icon,
    IconData,
    EdgeInsets,
    Colors,
    IconButton,
    FlatButton,
    RaisedButton,
    FloatingActionButton,
    Column,
    Row,
    DropdownButton,
    DropdownMenuItem,
    MainAxisAlignment,
    TextStyle,
    PopupMenuButton,
    PopupMenuItem,
    ButtonBar,
    MainAxisSize,
    TextDecoration,
    RichText,
    TextSpan,
    Expanded,
    FontWeight,
    TextFormField,
    InputDecoration,
    UnderlineInputBorder,
    TextInputType,
    SizedBox,
    TextField,
    TextEditingController,
    ListView,
    Slider,
    TextDecorationStyle,
    TextOverflow,
    Padding,
    Icons,
    MethodChannel,
    DartClass, 
    MXMirrorObjMethodCall,
    MXLifecycleDartClass
} = __webpack_require__(/*! ../js_flutter.js */ "./lib/js_flutter.js");


class MXMirrorExample extends MXLifecycleDartClass {

    constructor(baseOptions) {
        
        //创建对应FLutter对象
        var newDartMirrorObjArgs = new MXMirrorObjMethodCall({
            className: "MXMirrorExample",
            args: {
                "key": 123
            }
        });
        super(newDartMirrorObjArgs);
        
    }

    //封装getMyAppName
    getMyAppName(platform, { v } = {}) {

        let argument = new MXMirrorObjMethodCall({
            className: "MXMirrorExample",
            funcName: "getMyAppName",
            args: {
                platform: platform,
                v: v,
            }
        });

       return this.invokeMirrorObjMethodAsyc(argument);
    }

    // release dart侧实例
    release(){
        super.release();
    }

}


//使用MXMirrorExample
let g_jsApi = new MXMirrorExample();

const { SectionTitle } = __webpack_require__(/*! ./component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleJSApi extends MXJSStatefulWidget {
    constructor() {
        super("PageExampleJSApi");

    }

    createState() {
        return new PageExampleJSApiState(this);
    }
}

class PageExampleJSApiState extends MXJSWidgetState {
    constructor() {
        super("PageExampleJSApiState");
        this.response = "点击小人Run上面的代码";
    }

    codeText() {
        return "let result = await this.jsApi.getMyAppName('iOS', {v:'1.0'})";
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text("MXMirrorExample Example"),
            }),
            body: new ListView({
                children: [
                    new SectionTitle("Code 调用Dart MXMirrorExample.getMyAppName"),
                    new ListTile({
                        trailing: new Icon(Icons["directions_run"]),
                        title: new Text(this.codeText(), {
                            style: new TextStyle({
                                color: Colors.gray,
                            })
                        }),
                        onTap: async function () {

                            //call js api
                            let result = await g_jsApi.getMyAppName("iOS", { v: "1.0" });

                            this.setState(function () {

                                this.response = result;

                            }.bind(this));

                        }.bind(this)
                    }),
                    new SectionTitle("JSApi Result"),

                    new Padding({
                        padding: EdgeInsets.all(10),
                        child: new Text(this.response, {
                            style: new TextStyle({
                                color: Colors.gray,
                            })
                        }),
                    })

                ],
            })
        });
        return widget;
    }
}

module.exports = {
    PageExampleJSApi,
};

/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_builder.js":
/*!*********************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_builder.js ***!
  \*********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 152:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {




let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  Animation,
  AnimatedBuilder,
  AnimationController,
  Duration,
  Interval,
  CurveTween,
  Curves,
  Tween,
  Image,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedBuilder extends MXJSStatelessWidget {
  constructor() {
    super("PageExampleAnimatedBuilder");
    this.count = 0;
    this.tween = new Tween({ begin: 50.0, end: 300.0 });
    this.animationController = new AnimationController({ duration: new Duration({ seconds: 2 }) });
    this.animation = new Animation({ tween: this.tween, controller: this.animationController });
    this.animation.addStatusListener(this.animationLoopFunc.bind(this));
  }

  animationLoopFunc(status) {
    MXJSLog.log('callback from flutter ....  ' + status);
    if (status === AnimationStatus.completed) {
      this.animationController.reverse();
      this.count++;
    } else if (status === AnimationStatus.dismissed) {
      this.animationController.forward();
    }
    if (this.count > 5) {
      this.animation.removeStatusListener(this.animationLoopFunc);
    }
  }

  beginAnimation() {
    this.animationController.forward();
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedBuilder'),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {
          this.beginAnimation();
        }.bind(this)
      }),
      body: new ScaleAnimation({
        child: Image.network('https://pic2.zhimg.com/50/v2-6416ef6d3181117a0177275286fac8f3_hd.jpg'),
        animation: this.animation
      })
    });
    return widget;
  }
}



class ScaleAnimation extends MXJSStatefulWidget {

  constructor({
    child,
    animation
  } = {}) {
    super('ScaleAnimation');
    this.child = child;
    this.animation = animation;
  }

  createState() {
    return new ScaleAnimationState();
  }
}

class ScaleAnimationState extends MXJSWidgetState {

  build(context) {
    const imageRatio = 1.455;
    const widget = new Center({
      child: new AnimatedBuilder({
        animation: this.widget.animation,
        widget: new Container({
          width: "$value",
          child: this.widget.child
        })
        // child: this.child,
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedBuilder,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_builder_v2.js":
/*!************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_builder_v2.js ***!
  \************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 136:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  Animation,
  AnimatedBuilder,
  AnimationController,
  Duration,
  Interval,
  CurveTween,
  Curves,
  Tween,
  Image,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");


class PageExampleAnimatedBuilderV2 extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedBuilderV2');
  }

  createState() {
    return new PageExampleAnimatedBuilderV2State();
  }
}

class PageExampleAnimatedBuilderV2State extends MXJSWidgetState {

  constructor(){
    super();

    this.count = 0;
    this._controller = new AnimationController({
      duration: new Duration({seconds: 1}),
      // upperBound: 100,
      // vsync: this,
    });

    this._controller.forward();
  }

  beginAnimation(){
    this._controller.repeat();
  }

  build(context){
    const widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedBuilderV2',),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed:function () {
          this.beginAnimation();
        }.bind(this)
      }),
      body: new AnimatedBuilder({
        animation: this._controller,
        widget: new Center({
          child: new Container({
            height:"100+$value*100",   //动态计算$value
            width:"200+$value*200",    //动态计算$value
            color: Colors.orange,
            child: new Center({
              child: new Text("点击 ( + ) 号，重复播放",{
                style:new TextStyle({
                  color:Colors.white
                })
              }),
            }),
          })
        }),
        // builder 由于异步频繁调用JS，会导致JS线程性能问题，没有实现，async在builder中调用也存在技术问题
        // builder: function(context,child){
        //   console.log("call builder in js....aaaa");
        //   MXJSLog.log("call builder in js....bbbb");
        //   return child;
        // },
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedBuilderV2,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_container.js":
/*!***********************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_container.js ***!
  \***********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 116:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedContainer,
  Duration,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");


class PageExampleAnimatedContainer extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedContainer');
  }

  createState() {
    return new PageExampleAnimatedContainerState();
  }
}

class PageExampleAnimatedContainerState extends MXJSWidgetState {

  constructor(){
    super();
    this.selected = false;
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedContainer',),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {

          this.setState(function() {
            this.selected = !this.selected;
          }.bind(this))
        }.bind(this)
      }),
      body: new ListView({
        children:[
          new SectionTitle("PageExampleAnimatedContainer"),
          new AnimatedContainer({
            height:this.selected ? 300.0 : 100,
            color:this.selected ? Colors.blue:Colors.orange,
            duration:new Duration({milliseconds:200}),
            child:new Center({
              child:new Text("动画容器",{
                style:new TextStyle({
                  color:Colors.white,
                  fontSize:20,
                })
              }),
            })
          }),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedContainer,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_cross_fade.js":
/*!************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_cross_fade.js ***!
  \************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 127:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedCrossFade,
  CrossFadeState,
  Duration,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedCrossFade extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedCrossFade');
  }

  createState() {
    return new PageExampleAnimatedCrossFadeState();
  }
}

class PageExampleAnimatedCrossFadeState extends MXJSWidgetState {

  constructor() {
    super();
    this.selected = true;
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedCrossFade'),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {
          this.setState(function () {
            this.selected = !this.selected;
          }.bind(this))
        }.bind(this)
      }),
      body: new AnimatedCrossFade({
        crossFadeState: this.selected ? CrossFadeState.showFirst : CrossFadeState.showSecond,
        duration: new Duration({ milliseconds: 200 }),
        firstChild: new Container({
          width: 500,
          height: 300,
          color: Colors.orange,
          child: new Center({
            child: new Text("第一页", {
              style: new TextStyle({
                color: Colors.white,
                fontSize: 20,
              })
            })
          }),
        }),
        secondChild: new Container({
          width: 500,
          height: 300,
          color: Colors.blue,
          child: new Center({
            child: new Text("第二页", {
              style: new TextStyle({
                color: Colors.white,
                fontSize: 20,
              })
            })
          }),
        }),
      }),
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedCrossFade,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_default_text_style.js":
/*!********************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_default_text_style.js ***!
  \********************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 132:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedDefaultTextStyle,
  Duration,
  Alignment,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedDefaultTextStyle extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedDefaultTextStyle');
  }

  createState() {
    return new PageExampleAnimatedDefaultTextStyleState();
  }
}

class PageExampleAnimatedDefaultTextStyleState extends MXJSWidgetState {

  constructor(){
    super();
    this.fontSize = 20;
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedDefaultTextStyle',),
      }),
      body: new ListView({
        children:[
          new SectionTitle("PageExampleAnimatedDefaultTextStyle"),
          new Container({
            height:600,
            alignment:Alignment.center,
            child:new AnimatedDefaultTextStyle({
              child:new Text("Hello"),
              style:new TextStyle({
                fontWeight: FontWeight.bold,
                fontSize:this.fontSize,
                color:Colors.blue,
              }),
              duration: new Duration({milliseconds:350}),
            }),
          }),
          new Row({
            mainAxisAlignment:MainAxisAlignment.center,
            children: [
              new RaisedButton({
                child:new Text("缩小"),
                onPressed:function(){
                  this.setState(function() {
                    this.fontSize -= 30;
                  }.bind(this));
                }.bind(this)
              }),
              new SizedBox({
                width: 10,
                height: 10,
              }),
              new RaisedButton({
                child:new Text("放大"),
                onPressed:function(){
                  this.setState(function() {
                    this.fontSize += 30;
                  }.bind(this));
                }.bind(this)
              }),
            ]
          }),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedDefaultTextStyle,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_list_state.js":
/*!************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_list_state.js ***!
  \************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 91:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedListState extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedListState');
  }

  createState() {
    return new PageExampleAnimatedListStateState();
  }
}

class PageExampleAnimatedListStateState extends MXJSWidgetState {

  constructor(){
    super();
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedListState',),
      }),
      body: new ListView({
        children:[
          new SectionTitle("PageExampleAnimatedListState"),
          new SectionTitle("Todo...."),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedListState,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_modal_barrier.js":
/*!***************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_modal_barrier.js ***!
  \***************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 91:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");


class PageExampleAnimatedModalBarrier extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedModalBarrier');
  }

  createState() {
    return new PageExampleAnimatedModalBarrierState();
  }
}

class PageExampleAnimatedModalBarrierState extends MXJSWidgetState {

  constructor() {
    super();
  }
  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedModalBarrier'),
      }),
      body: new ListView({
        children: [
          new SectionTitle("PageExampleAnimatedModalBarrier"),
          new SectionTitle("todo..."),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedModalBarrier,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_opacity.js":
/*!*********************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_opacity.js ***!
  \*********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 115:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedOpacity,
  FlutterLogo,
  Duration,
  Curves,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedOpacity extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedOpacity');
  }

  createState() {
    return new PageExampleAnimatedOpacityState();
  }
}

class PageExampleAnimatedOpacityState extends MXJSWidgetState {

  constructor() {
    super();
    this.opacityLevel = 1.0;
  }

  changeOpacity() {
    this.setState(function () {
      this.opacityLevel = this.opacityLevel == 0 ? 1.0 : 0.0;
    });
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedOpacity'),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {
          this.changeOpacity();
        }.bind(this),
      }),
      body: new ListView({
        children: [
          new SectionTitle("PageExampleAnimatedOpacity"),
          new AnimatedOpacity({
            opacity: this.opacityLevel,
            duration: new Duration({ seconds: 1 }),
            child: new Padding({
              padding: EdgeInsets.all(10),
              child: new FlutterLogo({ size: 100 }),
            }),
          })
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedOpacity,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_physical_model.js":
/*!****************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_physical_model.js ***!
  \****************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 113:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedPhysicalModel,
  Duration,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedPhysicalModel extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedPhysicalModel');
  }

  createState() {
    return new PageExampleAnimatedPhysicalModelState();
  }
}

class PageExampleAnimatedPhysicalModelState extends MXJSWidgetState {
  constructor(){
    super();
    this.elevation = 50.0;
  }

  changeOpacity() {
    this.setState(function(){
      this.elevation = this.elevation == 50.0 ? 0.0 : 50.0;
    });
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedPhysicalModel',),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {
          this.changeOpacity();
        }.bind(this),
      }),
      body: new Center({
        child: new AnimatedPhysicalModel({
          child:new Container({
            width: 200,
            height: 200,
            color:Colors.orange,
          }),
          shape:BoxShape.rectangle,
          elevation: this.elevation,
          color:Colors.blue,
          shadowColor: Colors.grey,
          duration:new Duration({milliseconds:500}),
        }),
      }),
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedPhysicalModel,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_positioned.js":
/*!************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_positioned.js ***!
  \************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 115:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedPositioned,
  Duration,
  Stack,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedPositioned extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedPositioned');
  }

  createState() {
    return new PageExampleAnimatedPositionedState();
  }
}

class PageExampleAnimatedPositionedState extends MXJSWidgetState {

  constructor() {
    super();
    this.top = 200.0;
  }

  changeOpacity() {
    this.setState(function () {
      this.top = this.top == 200.0 ? 0.0 : 200.0;
    });
  }


  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedPositioned'),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {
          this.changeOpacity();
        }.bind(this),
      }),
      body: new Stack({
        children: [
          new AnimatedPositioned({
            child: new Container({
              width: 200,
              height: 200,
              color: Colors.orange,
            }),
            top: this.top,
            left: this.top,
            duration: new Duration({ milliseconds: 300 }),
          }),
        ]
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedPositioned,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_size.js":
/*!******************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_size.js ***!
  \******************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 110:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedSize,
  Duration,
  Stack,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedSize extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedSize');
  }

  createState() {
    return new PageExampleAnimatedSizeState();
  }
}

class PageExampleAnimatedSizeState extends MXJSWidgetState {

  constructor() {
    super("PageExampleAnimatedSize");
    this.size = 200.0;
  }

  changeOpacity() {
    this.setState(function () {
      this.size = this.size == 200.0 ? 50.0 : 200.0;
    }.bind(this));
  }


  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedSize'),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {
          this.changeOpacity();
        }.bind(this),
      }),
      body: new AnimatedSize({
        child: new Container({
          width: this.size,
          height: this.size,
          color: Colors.orange,
        }),
        duration: new Duration({ milliseconds: 300 }),
      }),
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedSize,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_widget.js":
/*!********************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_widget.js ***!
  \********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 90:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedWidget extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedWidget');
  }

  createState() {
    return new PageExampleAnimatedWidgetState();
  }
}

class PageExampleAnimatedWidgetState extends MXJSWidgetState {

  constructor() {
    super();
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedWidget'),
      }),
      body: new ListView({
        children: [
          new SectionTitle("PageExampleAnimatedWidget"),
          new SectionTitle("抽象类"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedWidget,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_animated_widget_base_state.js":
/*!*******************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_animated_widget_base_state.js ***!
  \*******************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 91:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleAnimatedWidgetBaseState extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleAnimatedWidgetBaseState');
  }

  createState() {
    return new PageExampleAnimatedWidgetBaseStateState();
  }
}

class PageExampleAnimatedWidgetBaseStateState extends MXJSWidgetState {

  constructor() {
    super();
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedWidgetBaseState'),
      }),
      body: new ListView({
        children: [
          new SectionTitle("PageExampleAnimatedWidgetBaseState"),
          new SectionTitle("todo...泛型类"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAnimatedWidgetBaseState,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_decorated_box_transition.js":
/*!*****************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_decorated_box_transition.js ***!
  \*****************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 120:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  Duration,
  DecoratedBoxTransition,
  Radius,
  BoxDecoration,
  AnimationController,
  DecorationTween,
  FlutterLogo,
  BorderRadius,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleDecoratedBoxTransition extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleDecoratedBoxTransition');
  }

  createState() {
    return new PageExampleDecoratedBoxTransitionState();
  }
}

class PageExampleDecoratedBoxTransitionState extends MXJSWidgetState {

  constructor() {
    super();
    this.controller = new AnimationController();
    this.controller.duration = new Duration({ seconds: 2 });


    let dTween = new DecorationTween({
      begin: new BoxDecoration({
        color: Colors.white,
        borderRadius: BorderRadius.all(Radius.circular(0))
      }),
      end: new BoxDecoration({
        color: Colors.blue,
        borderRadius: BorderRadius.all(Radius.circular(20))
      })
    });

    this.rectAnimation = dTween.animate(this.controller)

  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleDecoratedBoxTransition'),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {
          this.controller.forward();
        }.bind(this),
      }),
      body: new DecoratedBoxTransition({
        child: new FlutterLogo({ size: 300 }),
        decoration: this.rectAnimation,
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleDecoratedBoxTransition,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_fade_transition.js":
/*!********************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_fade_transition.js ***!
  \********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 89:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleFadeTransition extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleFadeTransition');
  }

  createState() {
    return new PageExampleFadeTransitionState();
  }
}

class PageExampleFadeTransitionState extends MXJSWidgetState {
  constructor(){
    super();
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleFadeTransition',),
      }),
      body: new ListView({
        children:[
          new SectionTitle("PageExampleFadeTransition"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleFadeTransition,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_hero.js":
/*!*********************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_hero.js ***!
  \*********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 89:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleHero extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleHero');
  }

  createState() {
    return new PageExampleHeroState();
  }
}

class PageExampleHeroState extends MXJSWidgetState {
  constructor() {
    super();
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleHero'),
      }),
      body: new ListView({
        children: [
          new SectionTitle("PageExampleHero"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleHero,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_positioned_transition.js":
/*!**************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_positioned_transition.js ***!
  \**************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 89:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExamplePositionedTransition extends MXJSStatefulWidget {
  constructor() {
    super('PageExamplePositionedTransition');
  }

  createState() {
    return new PageExamplePositionedTransitionState();
  }
}

class PageExamplePositionedTransitionState extends MXJSWidgetState {
  constructor(){
    super();
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExamplePositionedTransition',),
      }),
      body: new ListView({
        children:[
          new SectionTitle("PageExamplePositionedTransition"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExamplePositionedTransition,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_rotation_transition.js":
/*!************************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_rotation_transition.js ***!
  \************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 90:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleRotationTransition extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleRotationTransition');
  }

  createState() {
    return new PageExampleRotationTransitionState();
  }
}

class PageExampleRotationTransitionState extends MXJSWidgetState {

  constructor() {
    super();
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleRotationTransition'),
      }),
      body: new ListView({
        children: [
          new SectionTitle("PageExampleRotationTransition"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleRotationTransition,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_scale_transition.js":
/*!*********************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_scale_transition.js ***!
  \*********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 90:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleScaleTransition extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleScaleTransition');
  }

  createState() {
    return new PageExampleScaleTransitionState();
  }
}

class PageExampleScaleTransitionState extends MXJSWidgetState {

  constructor() {
    super();
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleScaleTransition'),
      }),
      body: new ListView({
        children: [
          new SectionTitle("PageExampleScaleTransition"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleScaleTransition,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_size_transition.js":
/*!********************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_size_transition.js ***!
  \********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 90:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleSizeTransition extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleSizeTransition');
  }

  createState() {
    return new PageExampleSizeTransitionState();
  }
}

class PageExampleSizeTransitionState extends MXJSWidgetState {

  constructor() {
    super();
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleSizeTransition'),
      }),
      body: new ListView({
        children: [
          new SectionTitle("PageExampleSizeTransition"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleSizeTransition,
};


/***/ }),

/***/ "./lib/app_demo/examples/animation/example_slide_transition.js":
/*!*********************************************************************!*\
  !*** ./lib/app_demo/examples/animation/example_slide_transition.js ***!
  \*********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 89:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleSlideTransition extends MXJSStatefulWidget {
  constructor() {
    super('PageExampleSlideTransition');
  }

  createState() {
    return new PageExampleSlideTransitionState();
  }
}

class PageExampleSlideTransitionState extends MXJSWidgetState {
  constructor(){
    super("PageExampleSlideTransition");
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleSlideTransition',),
      }),
      body: new ListView({
        children:[
          new SectionTitle("PageExampleSlideTransition"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleSlideTransition,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_app_bar.js":
/*!**************************************************!*\
  !*** ./lib/app_demo/examples/example_app_bar.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 135:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");


class PageExampleAppBar extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleAppBar");
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('AppBar',),
      }),
      body: new ListView({
        children:[
          new ListTile({
            title: new Text('最简单的AppBar',),
          }),
          new AppBar({
            title: new Text('NormalAppBar',),
          }),
          new ListTile({
            title: new Text('标题换色',),
          }),
          new AppBar({
            title: new Text('NormalAppBar',{
              style:new TextStyle({
                color:Colors.white,
              }),
            }),
          }),
          new ListTile({
            title: new Text('背景换色',),
          }),
          new AppBar({
            backgroundColor: Colors.blue,
            title: new Text('NormalAppBar',{
              style:new TextStyle({
                color:Colors.white,
              }),
            }),
          }),
          new ListTile({
            title: new Text('设置 leading',),
          }),
          new AppBar({
            leading: new IconButton({
              icon:new Icon(Icons.add),
            }),
            title: new Text('AppBar',),
          }),
          new ListTile({
            title: new Text('设置 action',),
          }),
          new AppBar({
            actions:[
              new IconButton({
                icon:new Icon(Icons.camera),
              })
            ],
            title: new Text('AppBar',),
          }),
          new ListTile({
            title: new Text('设置多个action',),
          }),
          new AppBar({
            actions:[
              new IconButton({
                icon:new Icon(Icons.camera),
              }),
              new IconButton({
                icon:new Icon(Icons.print),
              }),
            ],
            title: new Text('AppBar',),
          }),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleAppBar,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_button.js":
/*!*************************************************!*\
  !*** ./lib/app_demo/examples/example_button.js ***!
  \*************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 103:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");


class PageExampleButton extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleButton");
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Button',),
      }),
      body: new ListView({
        children:[
          new SectionTitle("RaisedButton"),
          new RaisedButton({
            child:new Text("普通按钮"),
            onPressed:function () {
              MXJSLog.log("Click");
            },
          }),
          new SectionTitle("失效Disable"),
          new RaisedButton({
            child:new Text("Disable 按钮"),
          }),
          new SectionTitle("FlatButton"),
          new FlatButton({
            child:new Text("Flat 按钮"),
          }),
          new FlatButton({
            textColor:Colors.black,
            child:new Text("Flat 按钮"),
          }),
          new SectionTitle("Icon Button"),
          new IconButton({
            icon:new Icon(Icons.camera),
          }),
          new SectionTitle("Floating Action Button"),
          new FloatingActionButton({
            child:new Icon(Icons.camera),
          }),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleButton,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_column.js":
/*!*************************************************!*\
  !*** ./lib/app_demo/examples/example_column.js ***!
  \*************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 353:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  CrossAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");


class PageExampleColumn extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleColumn");
  }

  genSevenContainers(){
    return  [
      new Container({
        color:Colors.red,
        height:30,
        width:100,
      }),
      new Container({
        color:Colors.orange,
        height:30,
        width:100,
      }),
      new Container({
        color:Colors.yellow,
        height:30,
        width:100,
      }),
      new Container({
        color:Colors.green,
        height:30,
        width:100,
      }),
      new Container({
        color:Colors.indigo,
        height:30,
        width:100,
      }),
      new Container({
        color:Colors.purple,
        height:30,
        width:100,
      }),
    ];
  }


  genThreeContainers(){
    return  [
      new Container({
        color:Colors.red,
        height:30,
        width:100,
      }),
      new Container({
        color:Colors.orange,
        height:30,
        width:100,
      }),
      new Container({
        color:Colors.yellow,
        height:30,
        width:100,
      }),
    ];
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Column',),
      }),
      body: new ListView({
        children:[
          new ListTile({title:new Text("Column"),}),
          new Column({
            children: [
              new Container({
                color:Colors.red,
                height:30,
              }),
              new Container({
                color:Colors.orange,
                height:30,
              }),
              new Container({
                color:Colors.yellow,
                height:30,
              }),
              new Container({
                color:Colors.green,
                height:30,
              }),
              new Container({
                color:Colors.indigo,
                height:30,
              }),
              new Container({
                color:Colors.purple,
                height:30,
              }),
            ],
          }),

          new ListTile({title:new Text("Column Top-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.start,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column Top-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.start,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column Top-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.start,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),

          new ListTile({title:new Text("Column Center-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.center,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column Center-Center"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.center,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column Center-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.center,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),

          new ListTile({title:new Text("Column Bottom-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.end,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column Bottom-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.end,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column Bottom-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.end,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),



          new ListTile({title:new Text("Column SpaceAround-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceAround,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column SpaceAround-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceAround,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column SpaceAround-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceAround,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),




          new ListTile({title:new Text("Column SpaceBetween-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceBetween,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column SpaceBetween-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceBetween,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column SpaceBetween-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceBetween,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),

          new ListTile({title:new Text("Column SpaceEvenly-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceEvenly,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column SpaceEvenly-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceEvenly,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Column SpaceEvenly-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Column({
              mainAxisAlignment:MainAxisAlignment.spaceEvenly,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),


        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleColumn,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_container.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/examples/example_container.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 177:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  BoxDecoration,
  BorderRadius,
  Radius,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  CrossAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");


class PageExampleContainer extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleContainer");
  }

  genSevenContainers(){
    return  [
      new Container({
        color:Colors.red,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.orange,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.yellow,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.green,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.indigo,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.purple,
        height:100,
        width:30,
      }),
    ];
  }


  genThreeContainers(){
    return  [
      new Container({
        color:Colors.red,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.orange,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.yellow,
        height:100,
        width:30,
      }),
    ];
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Container',),
      }),
      body: new ListView({
        children:[
          new ListTile({title:new Text("Container"),}),
          new Container({
            color:Colors.red,
            height:100,
          }),
          new ListTile({title:new Text("放置内容的Container"),}),
          new Container({
            color:Colors.orange,
            height:100,
            child:new Text("我有内容")
          }),
          new ListTile({title:new Text("Container里的Padding"),}),
          new Container({
            color:Colors.yellow,
            padding:EdgeInsets.all(10),
            child:new Text("我有内容")
          }),
          new ListTile({title:new Text("圆角的Container"),}),
          new Container({
            margin:EdgeInsets.all(10),
            padding:EdgeInsets.all(10),
            decoration:new BoxDecoration({
              borderRadius:BorderRadius.all(Radius.circular(4.0)),
              color:Colors.green,
            }),
            child:new Text("我是圆角Container")
          }),
          new ListTile({title:new Text("固定高宽的Container"),}),
          new Center({
            child:new Container({
              width:100,
              height:100,
              margin:EdgeInsets.all(10),
              padding:EdgeInsets.all(10),
              decoration:new BoxDecoration({
                borderRadius:BorderRadius.all(Radius.circular(4.0)),
                color:Colors.green,
              }),
              child:new Text("100x100",{
                style:new TextStyle({color:Colors.white}),
              })
            }),
          })
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleContainer,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_flutter_color.js":
/*!********************************************************!*\
  !*** ./lib/app_demo/examples/example_flutter_color.js ***!
  \********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 146:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  BoxDecoration,
  BorderRadius,
  Radius,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  CrossAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  FlutterLogo,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

class PageExampleColor extends MXJSStatelessWidget {
  constructor() {
    super("PageExampleColor");
  }

  genColorUI(title, colorPrefix) {
    let uiList = [
      new ListTile({ title: new Text(title) }),
    ];
    const colorKeys = ["50", "100", "150", "200", "250", "300", "350", "400", "450", "500", "550", "600", "650", "700", "750", "800", "850", "900"]
    //查找主色
    colorKeys.forEach(function (colorKey) {
      const colorFnName = colorPrefix + colorKey;
      if (Colors.hasOwnProperty(colorPrefix)) {

        let c = Colors[colorPrefix].swatch[parseInt(colorKey)];

        if (c != null) {
          uiList.push(new Container({
            height: 30,
            color: Colors[colorPrefix].swatch[colorKey],
            child: new Center({
              child: new Text(colorFnName),
            }),
          }));
        }
      }
    });
    //查找辅助色
    let accentUIList = [];
    colorKeys.forEach(function (colorKey) {
      const colorFnName = colorPrefix + "Accent";
      if (Colors.hasOwnProperty(colorFnName)) {

        let c = Colors[colorPrefix].swatch[parseInt(colorKey)];

        if (c != null) {
          accentUIList.push(new Container({
            height: 30,
            color: c,
            child: new Center({
              child: new Text(colorFnName + colorKey),
            }),
          }));
        }
      }
    });
    if (accentUIList.length > 0) {
      uiList.push(new ListTile({ title: new Text(title + "Accent") }));
      uiList = uiList.concat(accentUIList);
    }

    return uiList;
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Color'),
      }),
      body: new ListView({
        children: [
          ...this.genColorUI("Red", "red"),
          ...this.genColorUI("pink", "pink"),
          ...this.genColorUI("purple", "purple"),
          ...this.genColorUI("deepPurple", "deepPurple"),
          ...this.genColorUI("indigo", "indigo"),
          ...this.genColorUI("blue", "blue"),
          ...this.genColorUI("lightBlue", "lightBlue"),
          ...this.genColorUI("cyan", "cyan"),
          ...this.genColorUI("teal", "teal"),
          ...this.genColorUI("green", "green"),
          ...this.genColorUI("lightGreen", "lightGreen"),
          ...this.genColorUI("lime", "lime"),
          ...this.genColorUI("yellow", "yellow"),
          ...this.genColorUI("amber", "amber"),
          ...this.genColorUI("orange", "orange"),
          ...this.genColorUI("deepOrange", "deepOrange"),
          ...this.genColorUI("brown", "brown"),
          ...this.genColorUI("blueGrey", "blueGrey"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleColor,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_flutter_icon.js":
/*!*******************************************************!*\
  !*** ./lib/app_demo/examples/example_flutter_icon.js ***!
  \*******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 1390:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  BoxDecoration,
  BorderRadius,
  Radius,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  CrossAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  FlutterLogo,
  Wrap,
  Scrollbar,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");


class PageExampleIcon extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleIcon");
  }

  genIconUI(iconName){
    const icon = Icons[iconName];
    return new Container({
      padding:EdgeInsets.all(10),
      child:new Row({
        children: [
          new Icon(icon),
          new SizedBox({width:10}),
          new Text(iconName),
        ]
      }),
    })
  }

  build(context){
    const icons = [
      "threesixty",
      "threed_rotation",
      "four_k",
      "ac_unit",
      "access_alarm",
      "access_alarms",
      "access_time",
      "accessibility",
      "accessibility_new",
      "accessible",
      "accessible_forward",
      "account_balance",
      "account_balance_wallet",
      "account_box",
      "account_circle",
      "adb",
      "add",
      "add_a_photo",
      "add_alarm",
      "add_alert",
      "add_box",
      "add_call",
      "add_circle",
      "add_circle_outline",
      "add_comment",
      "add_location",
      "add_photo_alternate",
      "add_shopping_cart",
      "add_to_home_screen",
      "add_to_photos",
      "add_to_queue",
      "adjust",
      "airline_seat_flat",
      "airline_seat_flat_angled",
      "airline_seat_individual_suite",
      "airline_seat_legroom_extra",
      "airline_seat_legroom_normal",
      "airline_seat_legroom_reduced",
      "airline_seat_recline_extra",
      "airline_seat_recline_normal",
      "airplanemode_active",
      "airplanemode_inactive",
      "airplay",
      "airport_shuttle",
      "alarm",
      "alarm_add",
      "alarm_off",
      "alarm_on",
      "album",
      "all_inclusive",
      "all_out",
      "alternate_email",
      "android",
      "announcement",
      "apps",
      "archive",
      "arrow_back",
      "arrow_back_ios",
      "arrow_downward",
      "arrow_drop_down",
      "arrow_drop_down_circle",
      "arrow_drop_up",
      "arrow_forward",
      "arrow_forward_ios",
      "arrow_left",
      "arrow_right",
      "arrow_upward",
      "art_track",
      "aspect_ratio",
      "assessment",
      "assignment",
      "assignment_ind",
      "assignment_late",
      "assignment_return",
      "assignment_returned",
      "assignment_turned_in",
      "assistant",
      "assistant_photo",
      "atm",
      "attach_file",
      "attach_money",
      "attachment",
      "audiotrack",
      "autorenew",
      "av_timer",
      "backspace",
      "backup",
      "battery_alert",
      "battery_charging_full",
      "battery_full",
      "battery_std",
      "battery_unknown",
      "beach_access",
      "beenhere",
      "block",
      "bluetooth",
      "bluetooth_audio",
      "bluetooth_connected",
      "bluetooth_disabled",
      "bluetooth_searching",
      "blur_circular",
      "blur_linear",
      "blur_off",
      "blur_on",
      "book",
      "bookmark",
      "bookmark_border",
      "border_all",
      "border_bottom",
      "border_clear",
      "border_color",
      "border_horizontal",
      "border_inner",
      "border_left",
      "border_outer",
      "border_right",
      "border_style",
      "border_top",
      "border_vertical",
      "branding_watermark",
      "brightness_1",
      "brightness_2",
      "brightness_3",
      "brightness_4",
      "brightness_5",
      "brightness_6",
      "brightness_7",
      "brightness_auto",
      "brightness_high",
      "brightness_low",
      "brightness_medium",
      "broken_image",
      "brush",
      "bubble_chart",
      "bug_report",
      "build",
      "burst_mode",
      "business",
      "business_center",
      "cached",
      "cake",
      "calendar_today",
      "calendar_view_day",
      "call",
      "call_end",
      "call_made",
      "call_merge",
      "call_missed",
      "call_missed_outgoing",
      "call_received",
      "call_split",
      "call_to_action",
      "camera",
      "camera_alt",
      "camera_enhance",
      "camera_front",
      "camera_rear",
      "camera_roll",
      "cancel",
      "card_giftcard",
      "card_membership",
      "card_travel",
      "casino",
      "cast",
      "cast_connected",
      "category",
      "center_focus_strong",
      "center_focus_weak",
      "change_history",
      "chat",
      "chat_bubble",
      "chat_bubble_outline",
      "check",
      "check_box",
      "check_box_outline_blank",
      "check_circle",
      "check_circle_outline",
      "chevron_left",
      "chevron_right",
      "child_care",
      "child_friendly",
      "chrome_reader_mode",
      "class_",
      "clear",
      "clear_all",
      "close",
      "closed_caption",
      "cloud",
      "cloud_circle",
      "cloud_done",
      "cloud_download",
      "cloud_off",
      "cloud_queue",
      "cloud_upload",
      "code",
      "collections",
      "collections_bookmark",
      "color_lens",
      "colorize",
      "comment",
      "compare",
      "compare_arrows",
      "computer",
      "confirmation_number",
      "contact_mail",
      "contact_phone",
      "contacts",
      "content_copy",
      "content_cut",
      "content_paste",
      "control_point",
      "control_point_duplicate",
      "copyright",
      "create",
      "create_new_folder",
      "credit_card",
      "crop",
      "crop_16_9",
      "crop_3_2",
      "crop_5_4",
      "crop_7_5",
      "crop_din",
      "crop_free",
      "crop_landscape",
      "crop_original",
      "crop_portrait",
      "crop_rotate",
      "crop_square",
      "dashboard",
      "data_usage",
      "date_range",
      "dehaze",
      "delete",
      "delete_forever",
      "delete_outline",
      "delete_sweep",
      "departure_board",
      "description",
      "desktop_mac",
      "desktop_windows",
      "details",
      "developer_board",
      "developer_mode",
      "device_hub",
      "device_unknown",
      "devices",
      "devices_other",
      "dialer_sip",
      "dialpad",
      "directions",
      "directions_bike",
      "directions_boat",
      "directions_bus",
      "directions_car",
      "directions_railway",
      "directions_run",
      "directions_subway",
      "directions_transit",
      "directions_walk",
      "disc_full",
      "dns",
      "do_not_disturb",
      "do_not_disturb_alt",
      "do_not_disturb_off",
      "do_not_disturb_on",
      "dock",
      "domain",
      "done",
      "done_all",
      "done_outline",
      "donut_large",
      "donut_small",
      "drafts",
      "drag_handle",
      "drive_eta",
      "dvr",
      "edit",
      "edit_attributes",
      "edit_location",
      "eject",
      "email",
      "enhanced_encryption",
      "equalizer",
      "error",
      "error_outline",
      "euro_symbol",
      "ev_station",
      "event",
      "event_available",
      "event_busy",
      "event_note",
      "event_seat",
      "exit_to_app",
      "expand_less",
      "expand_more",
      "explicit",
      "explore",
      "exposure",
      "exposure_neg_1",
      "exposure_neg_2",
      "exposure_plus_1",
      "exposure_plus_2",
      "exposure_zero",
      "threed_rotation",
      "four_k",
      "ac_unit",
      "access_alarm",
      "access_alarms",
      "access_time",
      "accessibility",
      "accessibility_new",
      "accessible",
      "accessible_forward",
      "account_balance",
      "account_balance_wallet",
      "account_box",
      "account_circle",
      "adb",
      "add",
      "add_a_photo",
      "add_alarm",
      "add_alert",
      "add_box",
      "add_call",
      "add_circle",
      "add_circle_outline",
      "add_comment",
      "add_location",
      "add_photo_alternate",
      "add_shopping_cart",
      "add_to_home_screen",
      "add_to_photos",
      "add_to_queue",
      "adjust",
      "airline_seat_flat",
      "airline_seat_flat_angled",
      "airline_seat_individual_suite",
      "airline_seat_legroom_extra",
      "airline_seat_legroom_normal",
      "airline_seat_legroom_reduced",
      "airline_seat_recline_extra",
      "airline_seat_recline_normal",
      "airplanemode_active",
      "airplanemode_inactive",
      "airplay",
      "airport_shuttle",
      "alarm",
      "alarm_add",
      "alarm_off",
      "alarm_on",
      "album",
      "all_inclusive",
      "all_out",
      "alternate_email",
      "android",
      "announcement",
      "apps",
      "archive",
      "arrow_back",
      "arrow_back_ios",
      "arrow_downward",
      "arrow_drop_down",
      "arrow_drop_down_circle",
      "arrow_drop_up",
      "arrow_forward",
      "arrow_forward_ios",
      "arrow_left",
      "arrow_right",
      "arrow_upward",
      "art_track",
      "aspect_ratio",
      "assessment",
      "assignment",
      "assignment_ind",
      "assignment_late",
      "assignment_return",
      "assignment_returned",
      "assignment_turned_in",
      "assistant",
      "assistant_photo",
      "atm",
      "attach_file",
      "attach_money",
      "attachment",
      "audiotrack",
      "autorenew",
      "av_timer",
      "backspace",
      "backup",
      "battery_alert",
      "battery_charging_full",
      "battery_full",
      "battery_std",
      "battery_unknown",
      "beach_access",
      "beenhere",
      "block",
      "bluetooth",
      "bluetooth_audio",
      "bluetooth_connected",
      "bluetooth_disabled",
      "bluetooth_searching",
      "blur_circular",
      "blur_linear",
      "blur_off",
      "blur_on",
      "book",
      "bookmark",
      "bookmark_border",
      "border_all",
      "border_bottom",
      "border_clear",
      "border_color",
      "border_horizontal",
      "border_inner",
      "border_left",
      "border_outer",
      "border_right",
      "border_style",
      "border_top",
      "border_vertical",
      "branding_watermark",
      "brightness_1",
      "brightness_2",
      "brightness_3",
      "brightness_4",
      "brightness_5",
      "brightness_6",
      "brightness_7",
      "brightness_auto",
      "brightness_high",
      "brightness_low",
      "brightness_medium",
      "broken_image",
      "brush",
      "bubble_chart",
      "bug_report",
      "build",
      "burst_mode",
      "business",
      "business_center",
      "cached",
      "cake",
      "calendar_today",
      "calendar_view_day",
      "call",
      "call_end",
      "call_made",
      "call_merge",
      "call_missed",
      "call_missed_outgoing",
      "call_received",
      "call_split",
      "call_to_action",
      "camera",
      "camera_alt",
      "camera_enhance",
      "camera_front",
      "camera_rear",
      "camera_roll",
      "cancel",
      "card_giftcard",
      "card_membership",
      "card_travel",
      "casino",
      "cast",
      "cast_connected",
      "category",
      "center_focus_strong",
      "center_focus_weak",
      "change_history",
      "chat",
      "chat_bubble",
      "chat_bubble_outline",
      "check",
      "check_box",
      "check_box_outline_blank",
      "check_circle",
      "check_circle_outline",
      "chevron_left",
      "chevron_right",
      "child_care",
      "child_friendly",
      "chrome_reader_mode",
      "class_",
      "clear",
      "clear_all",
      "close",
      "closed_caption",
      "cloud",
      "cloud_circle",
      "cloud_done",
      "cloud_download",
      "cloud_off",
      "cloud_queue",
      "cloud_upload",
      "code",
      "collections",
      "collections_bookmark",
      "color_lens",
      "colorize",
      "comment",
      "compare",
      "compare_arrows",
      "computer",
      "confirmation_number",
      "contact_mail",
      "contact_phone",
      "contacts",
      "content_copy",
      "content_cut",
      "content_paste",
      "control_point",
      "control_point_duplicate",
      "copyright",
      "create",
      "create_new_folder",
      "credit_card",
      "crop",
      "crop_16_9",
      "crop_3_2",
      "crop_5_4",
      "crop_7_5",
      "crop_din",
      "crop_free",
      "crop_landscape",
      "crop_original",
      "crop_portrait",
      "crop_rotate",
      "crop_square",
      "dashboard",
      "data_usage",
      "date_range",
      "dehaze",
      "delete",
      "delete_forever",
      "delete_outline",
      "delete_sweep",
      "departure_board",
      "description",
      "desktop_mac",
      "desktop_windows",
      "details",
      "developer_board",
      "developer_mode",
      "device_hub",
      "device_unknown",
      "devices",
      "devices_other",
      "dialer_sip",
      "dialpad",
      "directions",
      "directions_bike",
      "directions_boat",
      "directions_bus",
      "directions_car",
      "directions_railway",
      "directions_run",
      "directions_subway",
      "directions_transit",
      "directions_walk",
      "disc_full",
      "dns",
      "do_not_disturb",
      "do_not_disturb_alt",
      "do_not_disturb_off",
      "do_not_disturb_on",
      "dock",
      "domain",
      "done",
      "done_all",
      "done_outline",
      "donut_large",
      "donut_small",
      "drafts",
      "drag_handle",
      "drive_eta",
      "dvr",
      "edit",
      "edit_attributes",
      "edit_location",
      "eject",
      "email",
      "enhanced_encryption",
      "equalizer",
      "error",
      "error_outline",
      "euro_symbol",
      "ev_station",
      "event",
      "event_available",
      "event_busy",
      "event_note",
      "event_seat",
      "exit_to_app",
      "expand_less",
      "expand_more",
      "explicit",
      "explore",
      "exposure",
      "exposure_neg_1",
      "exposure_neg_2",
      "exposure_plus_1",
      "exposure_plus_2",
      "exposure_zero",
      "extension",
      "face",
      "fast_forward",
      "fast_rewind",
      "fastfood",
      "favorite",
      "favorite_border",
      "featured_play_list",
      "featured_video",
      "feedback",
      "fiber_dvr",
      "fiber_manual_record",
      "fiber_new",
      "fiber_pin",
      "fiber_smart_record",
      "file_download",
      "file_upload",
      "filter",
      "filter_1",
      "filter_2",
      "filter_3",
      "filter_4",
      "filter_5",
      "filter_6",
      "filter_7",
      "filter_8",
      "filter_9",
      "filter_9_plus",
      "filter_b_and_w",
      "filter_center_focus",
      "filter_drama",
      "filter_frames",
      "filter_hdr",
      "filter_list",
      "filter_none",
      "filter_tilt_shift",
      "filter_vintage",
      "find_in_page",
      "find_replace",
      "fingerprint",
      "first_page",
      "fitness_center",
      "flag",
      "flare",
      "flash_auto",
      "flash_off",
      "flash_on",
      "flight",
      "flight_land",
      "flight_takeoff",
      "flip",
      "flip_to_back",
      "flip_to_front",
      "folder",
      "folder_open",
      "folder_shared",
      "folder_special",
      "font_download",
      "format_align_center",
      "format_align_justify",
      "format_align_left",
      "format_align_right",
      "format_bold",
      "format_clear",
      "format_color_fill",
      "format_color_reset",
      "format_color_text",
      "format_indent_decrease",
      "format_indent_increase",
      "format_italic",
      "format_line_spacing",
      "format_list_bulleted",
      "format_list_numbered",
      "format_list_numbered_rtl",
      "format_paint",
      "format_quote",
      "format_shapes",
      "format_size",
      "format_strikethrough",
      "format_textdirection_l_to_r",
      "format_textdirection_r_to_l",
      "format_underlined",
      "forum",
      "forward",
      "forward_10",
      "forward_30",
      "forward_5",
      "free_breakfast",
      "fullscreen",
      "fullscreen_exit",
      "functions",
      "g_translate",
      "gamepad",
      "games",
      "gavel",
      "gesture",
      "<i",
      "get_app",
      "gif",
      "golf_course",
      "gps_fixed",
      "gps_not_fixed",
      "gps_off",
      "grade",
      "gradient",
      "grain",
      "graphic_eq",
      "grid_off",
      "grid_on",
      "group",
      "group_add",
      "group_work",
      "hd",
      "hdr_off",
      "hdr_on",
      "hdr_strong",
      "hdr_weak",
      "headset",
      "headset_mic",
      "headset_off",
      "healing",
      "hearing",
      "help",
      "help_outline",
      "high_quality",
      "highlight",
      "highlight_off",
      "history",
      "home",
      "hot_tub",
      "hotel",
      "hourglass_empty",
      "hourglass_full",
      "http",
      "https",
      "image",
      "image_aspect_ratio",
      "import_contacts",
      "import_export",
      "important_devices",
      "inbox",
      "indeterminate_check_box",
      "info",
      "info_outline",
      "input",
      "insert_chart",
      "insert_comment",
      "insert_drive_file",
      "insert_emoticon",
      "insert_invitation",
      "insert_link",
      "insert_photo",
      "invert_colors",
      "invert_colors_off",
      "iso",
      "keyboard",
      "keyboard_arrow_down",
      "keyboard_arrow_left",
      "keyboard_arrow_right",
      "keyboard_arrow_up",
      "keyboard_backspace",
      "keyboard_capslock",
      "keyboard_hide",
      "keyboard_return",
      "keyboard_tab",
      "keyboard_voice",
      "kitchen",
      "label",
      "label_important",
      "label_outline",
      "landscape",
      "language",
      "laptop",
      "laptop_chromebook",
      "laptop_mac",
      "laptop_windows",
      "last_page",
      "launch",
      "layers",
      "layers_clear",
      "leak_add",
      "leak_remove",
      "lens",
      "library_add",
      "library_books",
      "library_music",
      "lightbulb_outline",
      "line_style",
      "line_weight",
      "linear_scale",
      "link",
      "link_off",
      "linked_camera",
      "list",
      "live_help",
      "live_tv",
      "local_activity",
      "local_airport",
      "local_atm",
      "local_bar",
      "local_cafe",
      "local_car_wash",
      "local_convenience_store",
      "local_dining",
      "local_drink",
      "local_florist",
      "local_gas_station",
      "local_grocery_store",
      "local_hospital",
      "local_hotel",
      "local_laundry_service",
      "local_library",
      "local_mall",
      "local_movies",
      "local_offer",
      "local_parking",
      "local_pharmacy",
      "local_phone",
      "local_pizza",
      "local_play",
      "local_post_office",
      "local_printshop",
      "local_see",
      "local_shipping",
      "local_taxi",
      "location_city",
      "location_disabled",
      "location_off",
      "location_on",
      "location_searching",
      "lock",
      "lock_open",
      "lock_outline",
      "looks",
      "looks_3",
      "looks_4",
      "looks_5",
      "looks_6",
      "looks_one",
      "looks_two",
      "loop",
      "loupe",
      "low_priority",
      "loyalty",
      "mail",
      "mail_outline",
      "map",
      "markunread",
      "markunread_mailbox",
      "maximize",
      "memory",
      "menu",
      "merge_type",
      "message",
      "mic",
      "mic_none",
      "mic_off",
      "minimize",
      "missed_video_call",
      "mms",
      "mobile_screen_share",
      "mode_comment",
      "mode_edit",
      "monetization_on",
      "money_off",
      "monochrome_photos",
      "mood",
      "mood_bad",
      "more",
      "more_horiz",
      "more_vert",
      "motorcycle",
      "mouse",
      "move_to_inbox",
      "movie",
      "movie_creation",
      "movie_filter",
      "multiline_chart",
      "music_note",
      "music_video",
      "my_location",
      "nature",
      "nature_people",
      "navigate_before",
      "navigate_next",
      "navigation",
      "near_me",
      "network_cell",
      "network_check",
      "network_locked",
      "network_wifi",
      "new_releases",
      "next_week",
      "nfc",
      "no_encryption",
      "no_sim",
      "not_interested",
      "not_listed_location",
      "note",
      "note_add",
      "notification_important",
      "notifications",
      "notifications_active",
      "notifications_none",
      "notifications_off",
      "notifications_paused",
      "offline_bolt",
      "offline_pin",
      "ondemand_video",
      "opacity",
      "open_in_browser",
      "open_in_new",
      "open_with",
      "outlined_flag",
      "pages",
      "pageview",
      "palette",
      "pan_tool",
      "panorama",
      "panorama_fish_eye",
      "panorama_horizontal",
      "panorama_vertical",
      "panorama_wide_angle",
      "party_mode",
      "pause",
      "pause_circle_filled",
      "pause_circle_outline",
      "payment",
      "people",
      "people_outline",
      "perm_camera_mic",
      "perm_contact_calendar",
      "perm_data_setting",
      "perm_device_information",
      "perm_identity",
      "perm_media",
      "perm_phone_msg",
      "perm_scan_wifi",
      "person",
      "person_add",
      "person_outline",
      "person_pin",
      "person_pin_circle",
      "personal_video",
      "pets",
      "phone",
      "phone_android",
      "phone_bluetooth_speaker",
      "phone_forwarded",
      "phone_in_talk",
      "phone_iphone",
      "phone_locked",
      "phone_missed",
      "phone_paused",
      "phonelink",
      "phonelink_erase",
      "phonelink_lock",
      "phonelink_off",
      "phonelink_ring",
      "phonelink_setup",
      "photo",
      "photo_album",
      "photo_camera",
      "photo_filter",
      "photo_library",
      "photo_size_select_actual",
      "photo_size_select_large",
      "photo_size_select_small",
      "picture_as_pdf",
      "picture_in_picture",
      "picture_in_picture_alt",
      "pie_chart",
      "pie_chart_outlined",
      "pin_drop",
      "place",
      "play_arrow",
      "play_circle_filled",
      "play_circle_outline",
      "play_for_work",
      "playlist_add",
      "playlist_add_check",
      "playlist_play",
      "plus_one",
      "poll",
      "polymer",
      "pool",
      "portable_wifi_off",
      "portrait",
      "power",
      "power_input",
      "power_settings_new",
      "pregnant_woman",
      "present_to_all",
      "print",
      "priority_high",
      "public",
      "publish",
      "query_builder",
      "question_answer",
      "queue",
      "queue_music",
      "queue_play_next",
      "radio",
      "radio_button_checked",
      "radio_button_unchecked",
      "rate_review",
      "receipt",
      "recent_actors",
      "record_voice_over",
      "redeem",
      "redo",
      "refresh",
      "remove",
      "remove_circle",
      "remove_circle_outline",
      "remove_from_queue",
      "remove_red_eye",
      "remove_shopping_cart",
      "reorder",
      "repeat",
      "repeat_one",
      "replay",
      "replay_10",
      "replay_30",
      "replay_5",
      "reply",
      "reply_all",
      "report",
      "report_off",
      "report_problem",
      "restaurant",
      "restaurant_menu",
      "restore",
      "restore_from_trash",
      "restore_page",
      "ring_volume",
      "room",
      "room_service",
      "rotate_90_degrees_ccw",
      "rotate_left",
      "rotate_right",
      "rounded_corner",
      "router",
      "rowing",
      "rss_feed",
      "rv_hookup",
      "satellite",
      "save",
      "save_alt",
      "scanner",
      "scatter_plot",
      "schedule",
      "school",
      "score",
      "screen_lock_landscape",
      "screen_lock_portrait",
      "screen_lock_rotation",
      "screen_rotation",
      "screen_share",
      "sd_card",
      "sd_storage",
      "search",
      "security",
      "select_all",
      "send",
      "sentiment_dissatisfied",
      "sentiment_neutral",
      "sentiment_satisfied",
      "sentiment_very_dissatisfied",
      "sentiment_very_satisfied",
      "settings",
      "settings_applications",
      "settings_backup_restore",
      "settings_bluetooth",
      "settings_brightness",
      "settings_cell",
      "settings_ethernet",
      "settings_input_antenna",
      "settings_input_component",
      "settings_input_composite",
      "settings_input_hdmi",
      "settings_input_svideo",
      "settings_overscan",
      "settings_phone",
      "settings_power",
      "settings_remote",
      "settings_system_daydream",
      "settings_voice",
      "share",
      "shop",
      "shop_two",
      "shopping_basket",
      "shopping_cart",
      "short_text",
      "show_chart",
      "shuffle",
      "shutter_speed",
      "signal_cellular_4_bar",
      "signal_cellular_connected_no_internet_4_bar",
      "signal_cellular_no_sim",
      "signal_cellular_null",
      "signal_cellular_off",
      "signal_wifi_4_bar",
      "signal_wifi_4_bar_lock",
      "signal_wifi_off",
      "sim_card",
      "sim_card_alert",
      "skip_next",
      "skip_previous",
      "slideshow",
      "slow_motion_video",
      "smartphone",
      "smoke_free",
      "smoking_rooms",
      "sms",
      "sms_failed",
      "snooze",
      "sort",
      "sort_by_alpha",
      "spa",
      "space_bar",
      "speaker",
      "speaker_group",
      "speaker_notes",
      "speaker_notes_off",
      "speaker_phone",
      "spellcheck",
      "star",
      "star_border",
      "star_half",
      "stars",
      "stay_current_landscape",
      "stay_current_portrait",
      "stay_primary_landscape",
      "stay_primary_portrait",
      "stop",
      "stop_screen_share",
      "storage",
      "store",
      "store_mall_directory",
      "straighten",
      "streetview",
      "strikethrough_s",
      "style",
      "subdirectory_arrow_left",
      "subdirectory_arrow_right",
      "subject",
      "subscriptions",
      "subtitles",
      "subway",
      "supervised_user_circle",
      "supervisor_account",
      "surround_sound",
      "swap_calls",
      "swap_horiz",
      "swap_horizontal_circle",
      "swap_vert",
      "swap_vertical_circle",
      "switch_camera",
      "switch_video",
      "sync",
      "sync_disabled",
      "sync_problem",
      "system_update",
      "system_update_alt",
      "tab",
      "tab_unselected",
      "table_chart",
      "tablet",
      "tablet_android",
      "tablet_mac",
      "tag_faces",
      "tap_and_play",
      "terrain",
      "text_fields",
      "text_format",
      "text_rotate_up",
      "text_rotate_vertical",
      "text_rotation_angledown",
      "text_rotation_angleup",
      "text_rotation_down",
      "text_rotation_none",
      "textsms",
      "texture",
      "theaters",
      "thumb_down",
      "thumb_up",
      "thumbs_up_down",
      "time_to_leave",
      "timelapse",
      "timeline",
      "timer",
      "timer_10",
      "timer_3",
      "timer_off",
      "title",
      "toc",
      "today",
      "toll",
      "tonality",
      "touch_app",
      "toys",
      "track_changes",
      "traffic",
      "train",
      "tram",
      "transfer_within_a_station",
      "transform",
      "transit_enterexit",
      "translate",
      "trending_down",
      "trending_flat",
      "trending_up",
      "trip_origin",
      "tune",
      "turned_in",
      "turned_in_not",
      "tv",
      "unarchive",
      "undo",
      "unfold_less",
      "unfold_more",
      "update",
      "usb",
      "verified_user",
      "vertical_align_bottom",
      "vertical_align_center",
      "vertical_align_top",
      "vibration",
      "video_call",
      "video_label",
      "video_library",
      "videocam",
      "videocam_off",
      "videogame_asset",
      "view_agenda",
      "view_array",
      "view_carousel",
      "view_column",
      "view_comfy",
      "view_compact",
      "view_day",
      "view_headline",
      "view_list",
      "view_module",
      "view_quilt",
      "view_stream",
      "view_week",
      "vignette",
      "visibility",
      "visibility_off",
      "voice_chat",
      "voicemail",
      "volume_down",
      "volume_mute",
      "volume_off",
      "volume_up",
      "vpn_key",
      "vpn_lock",
      "wallpaper",
      "warning",
      "watch",
      "watch_later",
      "wb_auto",
      "wb_cloudy",
      "wb_incandescent",
      "wb_iridescent",
      "wb_sunny",
      "wc",
      "web",
      "web_asset",
      "weekend",
      "whatshot",
      "widgets",
      "wifi",
      "wifi_lock",
      "wifi_tethering",
      "work",
      "wrap_text",
      "youtube_searched_for",
      "zoom_in",
      "zoom_out",
      "zoom_out_map",
    ];
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Icon',),
      }),
      body: new Scrollbar({
        child:new ListView({
          children:[
            ...icons.map( (iconName)=> {
              return this.genIconUI(iconName);
            })
          ],
        })
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleIcon,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_flutter_logo.js":
/*!*******************************************************!*\
  !*** ./lib/app_demo/examples/example_flutter_logo.js ***!
  \*******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 86:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  BoxDecoration,
  BorderRadius,
  Radius,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  CrossAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  FlutterLogo,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");


class PageExampleFlutterLogo extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleFlutterLogo");
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('FlutterLogo',),
      }),
      body: new ListView({
        children:[
          new ListTile({title:new Text("FlutterLogo")}),
          new FlutterLogo(),
          new ListTile({title:new Text("FlutterLogo Size"),}),
          new FlutterLogo({size:60}),
          new ListTile({title:new Text("FlutterLogo Size"),}),
          new FlutterLogo({size:100}),
          //new FlutterLogo({size:100, colors:Colors.orange}),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleFlutterLogo,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_image.js":
/*!************************************************!*\
  !*** ./lib/app_demo/examples/example_image.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 114:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  Image,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

class PageExampleImage extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleImage");
  }

  genImageUI(boxFitName){
    return [
      new ListTile({
        title: new Text('BoxFit.'+boxFitName,),
      }),
      new Container({
        height:150,
        width: 300,
        color:Colors.orange,
        child:Image.asset('people/ali_landscape.png', {
          mxPackage: 'flutter_gallery_assets',
          fit: BoxFit[boxFitName],
          height: 100
        }),
      }),
    ];
  }


  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Image',),
      }),
      body: new ListView({
        children:[
          new ListTile({
            title: new Text('加载网络图片',),
          }),
          Image.network('https://cdn.pixabay.com/photo/2015/10/30/20/13/sunrise-1014712_960_720.jpg',{
            fit: BoxFit.cover,
            height: 250
          }),
          new ListTile({
            title: new Text('加载本地图片',),
          }),
          Image.asset('people/ali_landscape.png', {
            mxPackage: 'flutter_gallery_assets',
            fit: BoxFit.cover,
            height: 250
          }),
          ...this.genImageUI("contain"),
          ...this.genImageUI("fill"),
          ...this.genImageUI("fitHeight"),
          ...this.genImageUI("fitWidth"),
          ...this.genImageUI("scaleDown"),
          ...this.genImageUI("none"),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleImage,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_placeholder.js":
/*!******************************************************!*\
  !*** ./lib/app_demo/examples/example_placeholder.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 103:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  Placeholder,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");


class PageExamplePlaceholder extends MXJSStatelessWidget {
  constructor(){
    super("PageExamplePlaceholder");
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Placeholder',),
      }),
      body: new ListView({
        children:[
          new ListTile({
            title:new Text("默认占位符"),
          }),
          new Placeholder(),
          new ListTile({
            title:new Text("占位符换色"),
          }),
          new Placeholder({
            fallbackHeight:100,
            color:Colors.orange,
          }),
          new ListTile({
            title:new Text("占位符指定高度"),
          }),
          new Placeholder({
            fallbackHeight:100,
            fallbackWidth:100,
            color:Colors.yellow,
          }),
          new ListTile({
            title:new Text("占位符线条粗细"),
          }),
          new Placeholder({
            fallbackHeight:100,
            fallbackWidth:100,
            strokeWidth:4,
            color:Colors.green,
          }),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExamplePlaceholder,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_row.js":
/*!**********************************************!*\
  !*** ./lib/app_demo/examples/example_row.js ***!
  \**********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 359:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  CrossAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");


class PageExampleRow extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleRow");
  }

  genSevenContainers(){
    return  [
      new Container({
        color:Colors.red,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.orange,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.yellow,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.green,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.indigo,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.purple,
        height:100,
        width:30,
      }),
    ];
  }


  genThreeContainers(){
    return  [
      new Container({
        color:Colors.red,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.orange,
        height:100,
        width:30,
      }),
      new Container({
        color:Colors.yellow,
        height:100,
        width:30,
      }),
    ];
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Row',),
      }),
      body: new ListView({
        children:[
          new ListTile({title:new Text("Row"),}),
          new Row({
            children: [
              new Container({
                color:Colors.red,
                height:100,
                width:30,
              }),
              new Container({
                color:Colors.orange,
                height:100,
                width:30,
              }),
              new Container({
                color:Colors.yellow,
                height:100,
                width:30,
              }),
              new Container({
                color:Colors.green,
                height:100,
                width:30,
              }),
              new Container({
                color:Colors.indigo,
                height:100,
                width:30,
              }),
              new Container({
                color:Colors.purple,
                height:100,
                width:30,
              }),
            ],
          }),

          new ListTile({title:new Text("Row Top-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.start,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row Top-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.start,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row Top-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.start,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),

          new ListTile({title:new Text("Row Center-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.center,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row Center-Center"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.center,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row Center-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.center,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),

          new ListTile({title:new Text("Row Bottom-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.end,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row Bottom-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.end,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row Bottom-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.end,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),



          new ListTile({title:new Text("Row SpaceAround-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceAround,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row SpaceAround-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceAround,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row SpaceAround-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceAround,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),




          new ListTile({title:new Text("Row SpaceBetween-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceBetween,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row SpaceBetween-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceBetween,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row SpaceBetween-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceBetween,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),

          new ListTile({title:new Text("Row SpaceEvenly-Left"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceEvenly,
              crossAxisAlignment:CrossAxisAlignment.start,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row SpaceEvenly-Middle"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceEvenly,
              crossAxisAlignment:CrossAxisAlignment.center,
              children: this.genThreeContainers(),
            }),
          }),
          new ListTile({title:new Text("Row SpaceEvenly-Right"),}),
          new Container({
            color:Colors.grey,
            height:200,
            child:new Row({
              mainAxisAlignment:MainAxisAlignment.spaceEvenly,
              crossAxisAlignment:CrossAxisAlignment.end,
              children: this.genThreeContainers(),
            }),
          }),


        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleRow,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_scaffold.js":
/*!***************************************************!*\
  !*** ./lib/app_demo/examples/example_scaffold.js ***!
  \***************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 205:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  BottomNavigationBar,
  BottomNavigationBarType,
  BottomNavigationBarItem,
  AnimationController,
  Duration,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  Placeholder,
  Theme,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

class HomePage extends MXJSStatelessWidget {
  constructor() {
    super("HomePage");
  }
  build(context) {
    return new Center({
      child: new Text("HomePage"),
    })
  }
}


class IdeaPage extends MXJSStatelessWidget {
  constructor() {
    super("IdeaPage");
  }
  build(context) {
    return new Center({
      child: new Text("IdeaPage"),
    })
  }
}


class MessagePage extends MXJSStatelessWidget {
  constructor() {
    super("MessagePage");
  }
  build(context) {
    return new Center({
      child: new Text("MessagePage"),
    })
  }
}


class MyPage extends MXJSStatelessWidget {
  constructor() {
    super("MyPage");
  }
  build(context) {
    return new Center({
      child: new Text("MyPage"),
    })
  }
}

class _NavigationIconView {
  constructor({ icon, title, vsync }) {
    this.item = new BottomNavigationBarItem({
      icon: icon,
      title: title
    });
    this.controller = new AnimationController({
      duration: new Duration({
        milliseconds: 200
      })
    });
  }
}



class PageExampleScaffold extends MXJSStatefulWidget {
  constructor() {
    super("PageExampleScaffold");
  }

  createState() {
    return new PageExampleScaffoldState(this);
  }
}

class PageExampleScaffoldState extends MXJSWidgetState {
  constructor(widget) {
    super(widget);
    this._currentIndex = 0;
    this._navigationViews = [];
    this._pageList = [];
    this._currentPage = null;
  }

  build(context) {
    this._navigationViews = [
      new _NavigationIconView({
        icon: new Icon(Icons.assignment),
        title: new Text("首页")
      }),
      new _NavigationIconView({
        icon: new Icon(Icons.all_inclusive),
        title: new Text("想法")
      }),
      new _NavigationIconView({
        icon: new Icon(Icons.add_alert),
        title: new Text("通知")
      }),
      new _NavigationIconView({
        icon: new Icon(Icons.perm_identity),
        title: new Text("我的")
      }),
    ];

    this._pageList = [
      new HomePage(),
      new IdeaPage(),
      new MessagePage(),
      new MyPage()
    ];

    this._currentPage = this._pageList[this._currentIndex];


    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Scafold'),
      }),
      body: new Center({
        child: this._currentPage
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {

        }
      }),
      bottomNavigationBar: new BottomNavigationBar({
        items: this._navigationViews.map(navigationIconView => navigationIconView.item),
        currentIndex: this._currentIndex,
        fixedColor: Theme.of(context).primaryColor,
        type: BottomNavigationBarType.fixed,
        onTap: function (index) {
          this.setState(function () {
            this._navigationViews[this._currentIndex].controller.reverse();
            this._currentIndex = index;
            this._navigationViews[this._currentIndex].controller.forward();
            this._currentPage = this._pageList[this._currentIndex];
          }.bind(this))
        }.bind(this)
      }),
    });
    return widget;
  }
}

module.exports = {
  PageExampleScaffold,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_snake_bar.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/examples/example_snake_bar.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 102:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");



class PageExampleSnakeBar extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleSnackbar");
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Idea Test',),
      }),
      body: new ListView({
        children:[
          new ListTile({
            leading:new Icon(Icons.ac_unit),
            title:new Text("Scaffold.of(context) 测试"),
          }),
          new MyScaffoldBody(),
        ],
      })
    });
    return widget;
  }
}

class MyScaffoldBody extends MXJSStatelessWidget {
  constructor(){
    super("MyScaffoldBody");
  }

  build(context){
    let widget =  new RaisedButton({
      child:new Text("测试 Scaffold.of(context)"),
      onPressed: function () {
        let context = {
          widgetID: this.widgetID,
        };
        Scaffold.of(context).showSnackBar(
          new SnackBar({content: new Text('我是通过JS脚本构建的,终于动态化了！！')})
        );
      }.bind(this),
    });
    return widget;
  }
}


module.exports = {
  PageExampleSnakeBar,
};


/***/ }),

/***/ "./lib/app_demo/examples/example_text.js":
/*!***********************************************!*\
  !*** ./lib/app_demo/examples/example_text.js ***!
  \***********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 122:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleText extends MXJSStatelessWidget {
  constructor(){
    super("PageExampleText");
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Text',),
      }),
      body: new ListView({
        children:[
          new SectionTitle("普通文本"),
          new ListTile({
            title:new Text("设置文本颜色",{
              style:new TextStyle({
                color:Colors.orange,
              })
            }),
          }),
          new SectionTitle("富文本"),
          new Padding({
            padding:EdgeInsets.all(10),
            child: new RichText({
              text: new TextSpan({
                style: new TextStyle({
                  color: new Color(0xFFFF8C00),
                  fontSize: 18.0,
                  decoration: TextDecoration.underline,
                  decorationColor: Colors.orange,
                  decorationStyle: TextDecorationStyle.dashed,
                }),
                text: '超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text',
                children: [
                  new TextSpan({
                    text: ' style  ',
                    style: new TextStyle({
                      color: Colors.red,
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.none,
                    })
                  }),
                  new TextSpan({
                    text: 'your text',
                    style: new TextStyle({
                      color: Colors.blue,
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.none,
                    })
                  }),
                ],
              }),
              overflow: TextOverflow.ellipsis,
              maxLines: 99
            }),
          })
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleText,
};


/***/ }),

/***/ "./lib/app_demo/examples/index.js":
/*!****************************************!*\
  !*** ./lib/app_demo/examples/index.js ***!
  \****************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 479:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  Image,
  Theme,
  Padding,
  Scrollbar,
  Key,
  Navigator,
  MaterialPageRoute,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title */ "./lib/app_demo/component/section_title.js");

let { PageExampleAppBar } = __webpack_require__(/*! ./example_app_bar.js */ "./lib/app_demo/examples/example_app_bar.js");
let { PageExampleText } = __webpack_require__(/*! ./example_text.js */ "./lib/app_demo/examples/example_text.js");
let { PageExampleButton } = __webpack_require__(/*! ./example_button.js */ "./lib/app_demo/examples/example_button.js");

let { PageExampleSnakeBar } = __webpack_require__(/*! ./example_snake_bar.js */ "./lib/app_demo/examples/example_snake_bar.js");
let { PageExampleColumn } = __webpack_require__(/*! ./example_column.js */ "./lib/app_demo/examples/example_column.js");
let { PageExampleRow } = __webpack_require__(/*! ./example_row.js */ "./lib/app_demo/examples/example_row.js");
let { PageExampleContainer } = __webpack_require__(/*! ./example_container.js */ "./lib/app_demo/examples/example_container.js");
let { PageExampleFlutterLogo } = __webpack_require__(/*! ./example_flutter_logo.js */ "./lib/app_demo/examples/example_flutter_logo.js");
let { PageExampleColor } = __webpack_require__(/*! ./example_flutter_color.js */ "./lib/app_demo/examples/example_flutter_color.js");
let { PageExampleIcon } = __webpack_require__(/*! ./example_flutter_icon.js */ "./lib/app_demo/examples/example_flutter_icon.js");
let { PageExampleImage } = __webpack_require__(/*! ./example_image.js */ "./lib/app_demo/examples/example_image.js");
let { PageExamplePlaceholder } = __webpack_require__(/*! ./example_placeholder.js */ "./lib/app_demo/examples/example_placeholder.js");
let { PageExampleScaffold } = __webpack_require__(/*! ./example_scaffold.js */ "./lib/app_demo/examples/example_scaffold.js");


//Animated
const { PageExampleAnimatedBuilder } = __webpack_require__(/*! ./animation/example_animated_builder.js */ "./lib/app_demo/examples/animation/example_animated_builder.js");
const { PageExampleAnimatedBuilderV2 } = __webpack_require__(/*! ./animation/example_animated_builder_v2.js */ "./lib/app_demo/examples/animation/example_animated_builder_v2.js");
const { PageExampleAnimatedContainer } = __webpack_require__(/*! ./animation/example_animated_container.js */ "./lib/app_demo/examples/animation/example_animated_container.js");
const { PageExampleAnimatedCrossFade } = __webpack_require__(/*! ./animation/example_animated_cross_fade.js */ "./lib/app_demo/examples/animation/example_animated_cross_fade.js");
const { PageExampleAnimatedDefaultTextStyle } = __webpack_require__(/*! ./animation/example_animated_default_text_style.js */ "./lib/app_demo/examples/animation/example_animated_default_text_style.js");
const { PageExampleAnimatedListState } = __webpack_require__(/*! ./animation/example_animated_list_state.js */ "./lib/app_demo/examples/animation/example_animated_list_state.js");
const { PageExampleAnimatedModalBarrier } = __webpack_require__(/*! ./animation/example_animated_modal_barrier.js */ "./lib/app_demo/examples/animation/example_animated_modal_barrier.js");
const { PageExampleAnimatedOpacity } = __webpack_require__(/*! ./animation/example_animated_opacity.js */ "./lib/app_demo/examples/animation/example_animated_opacity.js");
const { PageExampleAnimatedPhysicalModel } = __webpack_require__(/*! ./animation/example_animated_physical_model.js */ "./lib/app_demo/examples/animation/example_animated_physical_model.js");
const { PageExampleAnimatedPositioned } = __webpack_require__(/*! ./animation/example_animated_positioned.js */ "./lib/app_demo/examples/animation/example_animated_positioned.js");
const { PageExampleAnimatedSize } = __webpack_require__(/*! ./animation/example_animated_size.js */ "./lib/app_demo/examples/animation/example_animated_size.js");

const { PageExampleAnimatedWidget } = __webpack_require__(/*! ./animation/example_animated_widget.js */ "./lib/app_demo/examples/animation/example_animated_widget.js");
const { PageExampleAnimatedWidgetBaseState } = __webpack_require__(/*! ./animation/example_animated_widget_base_state.js */ "./lib/app_demo/examples/animation/example_animated_widget_base_state.js");
const { PageExampleDecoratedBoxTransition } = __webpack_require__(/*! ./animation/example_decorated_box_transition.js */ "./lib/app_demo/examples/animation/example_decorated_box_transition.js");
const { PageExampleFadeTransition } = __webpack_require__(/*! ./animation/example_fade_transition.js */ "./lib/app_demo/examples/animation/example_fade_transition.js");
const { PageExampleHero } = __webpack_require__(/*! ./animation/example_hero.js */ "./lib/app_demo/examples/animation/example_hero.js");
const { PageExamplePositionedTransition } = __webpack_require__(/*! ./animation/example_positioned_transition.js */ "./lib/app_demo/examples/animation/example_positioned_transition.js");
const { PageExampleRotationTransition } = __webpack_require__(/*! ./animation/example_rotation_transition.js */ "./lib/app_demo/examples/animation/example_rotation_transition.js");
const { PageExampleScaleTransition } = __webpack_require__(/*! ./animation/example_scale_transition.js */ "./lib/app_demo/examples/animation/example_scale_transition.js");
const { PageExampleSizeTransition } = __webpack_require__(/*! ./animation/example_size_transition.js */ "./lib/app_demo/examples/animation/example_size_transition.js");
const { PageExampleSlideTransition } = __webpack_require__(/*! ./animation/example_slide_transition.js */ "./lib/app_demo/examples/animation/example_slide_transition.js");

class ExamplesPage extends MXJSStatelessWidget {
  constructor() {
    super("ExamplesPage");
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Flutter Examples'),
      }),
      body: new Scrollbar({
        child: new ListView({
          children: [
            new SectionTitle("基础组件", { key: new Key("1") }),

            new ListTile({
              title: new Text("AppBar"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAppBar;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Text"),

              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleText;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Button"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleButton;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Image"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleImage;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Placeholder"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExamplePlaceholder;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Icon"),

              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleIcon;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Color"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleColor;
                  }
                }))
              }
            }),
            new SectionTitle("布局组件", { key: new Key("2") }),
            // this.genSectionTitle(context,"布局组件"),
            new ListTile({
              title: new Text("Column"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleColumn;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Row"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleRow;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Container"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleContainer;
                  }
                }))
              }
            }),
            new SectionTitle("动画组件", { key: new Key("3") }),
            // this.genSectionTitle(context,"动画组件"),
            new ListTile({
              title: new Text("AnimatedBuilder"),

              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedBuilder;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedBuilder v2"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedBuilderV2;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedContainer"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedContainer;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedCrossFade"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedCrossFade;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedDefaultTextStyle"),
 
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedDefaultTextStyle;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedListState"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedListState;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedModalBarrier"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedModalBarrier;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedOpacity"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedOpacity;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedPhysicalModel"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedPhysicalModel;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedPositioned"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedPositioned;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedSize"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedSize;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedWidget"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedWidget;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("AnimatedWidgetBaseState"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleAnimatedWidgetBaseState;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("DecoratedBoxTransition"),

              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleDecoratedBoxTransition;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("FadeTransition"),

              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleFadeTransition;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Hero"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleHero;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("PositionedTransition"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExamplePositionedTransition;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("RotationTransition"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleRotationTransition;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("ScaleTransition"),

              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleScaleTransition;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("SizeTransition"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleSizeTransition;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("SlideTransition"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleSlideTransition;
                  }
                }))
              }
            }),
            new SectionTitle("其他组件", { key: new Key("4") }),
            // this.genSectionTitle(context,"其他组件"),
            new ListTile({
              title: new Text("FlutterLogo"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleFlutterLogo;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("Scaffold"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleScaffold;
                  }
                }))
              }
            }),
            new ListTile({
              title: new Text("SnackBar"),
              onTap: function () {
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleSnakeBar;
                  }
                }))
              }
            }),
          ],
        })
      })
    });
    return widget;
  }
}

module.exports = {
  ExamplesPage,
};


/***/ }),

/***/ "./lib/app_demo/listview_example.js":
/*!******************************************!*\
  !*** ./lib/app_demo/listview_example.js ***!
  \******************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 413:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  BoxDecoration,
  BorderRadius,
  Radius,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  CrossAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  FlutterLogo,
  Wrap,
  Scrollbar,
  Card,
  Theme,
  Navigator,
  MaterialPageRoute,
  MethodChannel,
  ClipRRect,
  BoxFit,
  Duration,
  Key,
  BorderDirectional,
  BorderSide,
  Alignment,
  AspectRatio,
  DecorationImage,
  Rect,
} = __webpack_require__(/*! ../js_flutter.js */ "./lib/js_flutter.js");

let { SmartRefresher, ClassicFooter, RefreshController } = __webpack_require__(/*! @tencent/mxflutter-pull-to-refresh */ "./node_modules/@tencent/mxflutter-pull-to-refresh/index.js");

const { CachedNetworkImage } = __webpack_require__(/*! @tencent/mxflutter-cached-network-image */ "./node_modules/@tencent/mxflutter-cached-network-image/index.js");

const { SectionTitle } = __webpack_require__(/*! ./component/section_title.js */ "./lib/app_demo/component/section_title.js");

const packages__dio = __webpack_require__(/*! @tencent/mxflutter-dio */ "./node_modules/@tencent/mxflutter-dio/index.js");

//用于演示网络请求cgi
//let cgi = "https://c.m.163.com/nc/article/headline/T1348649580692/0-10.html";

//data
let g_newsOrder = 0;
//
class ListViewDemo extends MXJSStatefulWidget {
  constructor() {
    super('ListViewDemo');
  }

  createState() {
    return new ListViewDemoState(this);
  }

  testIDE(var1, var2, list, abc) {
    return [];
  }
}

class ListViewDemoState extends MXJSWidgetState {
  constructor() {
    super();

    this.refreshController = new RefreshController();
    this.methodChannel = new MethodChannel('MXFlutter_MethodChannel_Demo');
    this.dio = packages__dio.Dio();

    this.newsArray = [];

    this.pageCount = 10;
    this.pageIndex = 0;
    this.loading = false;
    this.buildCount = 1;
  }

  initState() {
    super.initState();
    this.refresh(true);
  }

  async refresh(isInit) {
    let newsArray = await this.requestHttpData(true);

    if (!isInit) {
      this.endRefreshOrLoadMore(true, newsArray == null || newsArray.length == 0);
    }

    this.setState(
      function () {
        this.newsArray = newsArray.concat(this.newsArray);
      }.bind(this),
    );

    return newsArray;
  }

  async loadMore() {
    let newsArray = await this.requestHttpData(false);
    this.endRefreshOrLoadMore(false, newsArray == null || newsArray.length == 0);

    this.setState(
      function () {
        this.newsArray = this.newsArray.concat(newsArray);
      }.bind(this),
    );
  }

  async requestHttpData(isRefresh) {
    if (this.loading) {
      return [];
    }

    this.loading = true;
    let result = await this.requestNews();
    this.loading = false;

    if (result) {
      if (typeof result == 'String') {
        result = JSON.parse(result);
      }

      let respArray = result['T1348649580692'];
      return respArray;
    } else {
      return [];
    }
  }

  endRefreshOrLoadMore(isRefresh, isNoData) {
    this.refreshController.loadComplete();
    this.refreshController.refreshCompleted();
    return;
    if (isRefresh) {
      this.refreshController.refreshCompleted();
    } else {
      if (isNoData) {
        this.refreshController.loadNoData();
      } else {
        this.refreshController.loadComplete();
      }
    }
  }

  ///dio 示例
  async requestNews() {
    this.pageIndex = this.pageIndex % 4;
    let startIndex = this.pageIndex * this.pageCount;
    let endIndex = startIndex + this.pageCount;
    this.pageIndex++;

    let url = 'https://c.m.163.com/nc/article/headline/T1348649580692/' + startIndex + '-' + endIndex + '.html';
    try {
      // let response = await fetch(url);
      // MXJSLog.log("requestNews:resp: " + response.text);

      let response = await this.dio.get(url);
      MXJSLog.debug('await Dio.get(urlStr):request() :' + response);
      return response.data;
    } catch (e$) {
      // let e = dart.getThrown(e$);
      // MXJSLog.log('requestNews:resp:  error:' + e);
      return null;
    }
  }

  build(context) {
    g_newsOrder = 0;
    this.buildCount++;
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('网易新闻 ListViewExample'),
      }),
      body: new Scrollbar({
        child: new SmartRefresher({
          controller: this.refreshController,
          enablePullUp: true,
          enablePullDown: true,
          footer: new ClassicFooter({
            failedIcon: null,
            canLoadingIcon: null,
            idleIcon: null,
            noMoreIcon: null,
            loadingIcon: null,
            canLoadingText: '',
            failedText: '网络错误，请重试',
            noDataText: '已经没有了',
            loadingText: '加载中...',
            idleText: '上拉加载更多',
          }),
          // 动态创建Item
          child: ListView.builder({
            itemCount: this.newsArray.length,
            itemBuilder: function (context, index) {
              return new ListViewItem(this.newsArray[index]);
            }.bind(this),
          }),
          onRefresh: function () {
            MXJSLog.log('onRefresh');
            this.refresh();
          }.bind(this),
          onLoading: function () {
            MXJSLog.log('onLoading');
            this.loadMore();
          }.bind(this),
        }),
      }),
    });
    return widget;
  }
}

class ListViewItem extends MXJSStatelessWidget {
  constructor(oneNewsMap) {
    super('ListViewItem');

    this.newsModel = NewsModel.fromJSON(oneNewsMap);

    this.index = Math.ceil(Math.random() * 10000);
  }

  hotCard(context, newsModel) {
    g_newsOrder++;

    return new Container({
      decoration: new BoxDecoration({
        color: Colors.white,
        border: new BorderDirectional({
          bottom: new BorderSide({
            color: Colors.black12,
            width: 1.0,
          }),
        }),
      }),
      child: new FlatButton({
        onPressed: function () {},
        child: new Container({
          padding: EdgeInsets.only({ top: 8.0, bottom: 8.0 }),
          child: new Row({
            children: [
              new Expanded({
                flex: 1,
                child: new Column({
                  children: [
                    new Container({
                      child: new Text(String(g_newsOrder), {
                        style: new TextStyle({
                          color: Colors.red,
                          fontSize: 18.0,
                        }),
                      }),
                      alignment: Alignment.topLeft,
                    }),
                    newsModel.rise != null
                      ? new Row({
                          children: [
                            new Icon(new IconData(0xe5d8, { fontFamily: 'MaterialIcons' }), {
                              color: Colors.red,
                              size: 10.0,
                            }),
                            new Text(newsModel.rise, {
                              style: new TextStyle({
                                color: Colors.red,
                                fontSize: 10.0,
                              }),
                            }),
                          ],
                        })
                      : new Container(),
                  ],
                }),
              }),
              new Expanded({
                flex: 6,
                child: new Column({
                  children: [
                    new Container({
                      child: new Text(newsModel.title, {
                        style: new TextStyle({
                          fontWeight: FontWeight.bold,
                          fontSize: 16.0,
                          height: 1.1,
                          color: Colors.black,
                        }),
                      }),
                      padding: EdgeInsets.only({ bottom: 10.0, right: 4.0 }),
                      alignment: Alignment.topLeft,
                    }),
                    newsModel.mark != null
                      ? new Container({
                          child: new Text(newsModel.mark, {
                            style: new TextStyle({ color: Colors.black54 }),
                          }),
                          alignment: Alignment.topLeft,
                          padding: EdgeInsets.only({ bottom: 8.0, right: 4.0 }),
                        })
                      : new Container(),
                    new Container({
                      child: new Text(newsModel.hotNum, {
                        style: new TextStyle({ color: Colors.black54 }),
                      }),
                      alignment: Alignment.topLeft,
                    }),
                  ],
                }),
              }),
              new Expanded({
                flex: 3,
                child: new AspectRatio({
                  aspectRatio: 3.0 / 2.0,
                  child: new ClipRRect({
                    borderRadius: BorderRadius.circular(4.0),
                    child: new CachedNetworkImage({
                      fadeInDuration: new Duration({ milliseconds: 10 }),
                      fadeOutDuration: new Duration({ milliseconds: 10 }),
                      imageUrl: newsModel.imgUrl,
                      width: 124.0,
                      height: 69.0,
                      fit: BoxFit.fill,
                    }),
                  }),
                }),
              }),
            ],
          }),
        }),
      }),
    });
  }

  build(context) {
    try {
      return this.hotCard(context, this.newsModel);
    } catch (e$) {
      // let e = dart.getThrown(e$);
      // MXJSLog.log('card:build(context):  error:' + e);
      return null;
    }
  }
}

class NewsModel {
  constructor(order, title, hotNum, imgUrl, { mark, rise } = {}) {
    this.order = order;
    this.title = title;
    this.hotNum = hotNum;
    this.imgUrl = imgUrl;
    this.mark = mark;
    this.rise = rise;
  }

  static fromJSON(jsonMap) {
    let news = new NewsModel();

    news.order = String(jsonMap['order']);
    news.title = jsonMap['title'];
    news.hotNum = String(jsonMap['votecount']) + ' 人点赞';
    news.imgUrl = jsonMap['imgsrc'];
    news.mark = jsonMap['source'];
    news.rise = jsonMap['alias'];

    return news;
  }
}

module.exports = {
  ListViewDemo,
};


/***/ }),

/***/ "./lib/app_demo/material.js":
/*!**********************************!*\
  !*** ./lib/app_demo/material.js ***!
  \**********************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 122:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Color,
    AppBar,
    Text,
    ListView,
    ListTile,
    Icon,
    IconData,
    EdgeInsets,
    Padding,
    MaterialPageRoute,
    Navigator
} = __webpack_require__(/*! ../js_flutter.js */ "./lib/js_flutter.js");


let { JSBottomAPPBarDemo } = __webpack_require__(/*! ./material/bottom_app_bar_demo.js */ "./lib/app_demo/material/bottom_app_bar_demo.js");
let { JSBottomNavigationDemo } = __webpack_require__(/*! ./material/bottom_navigation_demo.js */ "./lib/app_demo/material/bottom_navigation_demo.js");
let { JSEasyUIDemo } = __webpack_require__(/*! ./material/easy_ui_demo.js */ "./lib/app_demo/material/easy_ui_demo.js");
let { JSTabsDemo } = __webpack_require__(/*! ./material/tabs_demo.js */ "./lib/app_demo/material/tabs_demo.js");

class JSMaterialPage extends MXJSStatefulWidget {
    constructor() {
        super('JSMaterialPage');
    }

    createState() {
        return new JSMaterialPageState(this);
    }
}

class JSMaterialPageState extends MXJSWidgetState {
    build(context) {
        let w = new Scaffold({
            appBar: new AppBar({
                title: new Text("Material Demo")
            }),
            body: new ListView({
                children: [
                    new Padding({ padding: EdgeInsets.all(1.0) }),

                    new ListTile({
                        leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: new Color(0xFFFF9800) }),
                        trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                        title: new Text('Bottom app bar'),
                        subtitle: new Text('Optional floating action button notch'),
                        onTap: function () {

                            Navigator.push(context, new MaterialPageRoute({
                                builder: function (context) {
                                    return new JSBottomAPPBarDemo;
                                }
                            }))
                        }
                    }),

                    // new ListTile({
                    //     leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: new Color(0xFFFF9800) }),
                    //     trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    //     title: new Text('Bottom navigation——动画需完善才能出现'),
                    //     subtitle: new Text('Bottom navigation with cross-fading views'),
                    //     onTap: function () {

                    //         Navigator.push(context, new MaterialPageRoute({
                    //             builder: function (context) {
                    //                 return new JSBottomNavigationDemo;
                    //             }
                    //         }))

                    //     }
                    // }),

                    new ListTile({
                        leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: new Color(0xFFFF9800) }),
                        trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                        title: new Text('Easy UI'),
                        subtitle: new Text('Easy UI usage'),
                        onTap: function () {

                            Navigator.push(context, new MaterialPageRoute({
                                builder: function (context) {
                                    return new JSEasyUIDemo;
                                }
                            }))
                        }
                    }),

                    new ListTile({
                        leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: new Color(0xFFFF9800) }),
                        trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                        title: new Text('Tabs'),
                        subtitle: new Text('Tabs with independently scrollable views'),
                        onTap: function () {

                            Navigator.push(context, new MaterialPageRoute({
                                builder: function (context) {
                                    return new JSTabsDemo;
                                }
                            }))
                        }
                    })
                ]
            })
        });

        return w;
    }

    navigatorPush(jsWidget) {

    }
}

module.exports = { JSMaterialPage };


/***/ }),

/***/ "./lib/app_demo/material/bottom_app_bar_demo.js":
/*!******************************************************!*\
  !*** ./lib/app_demo/material/bottom_app_bar_demo.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 373:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  Container,
  Color,
  AppBar,
  Text,
  ListView,
  Icon,
  IconData,
  FloatingActionButton,
  GestureDetector,
  Expanded,
  Row,
  AlignmentDirectional,
  BottomAppBar,
  IconButton,
  FloatingActionButtonLocation,
  Colors,
  CircularNotchedRectangle,
  EdgeInsetsDirectional,
  TextStyle,
  Radio,
  Semantics,
  MergeSemantics,
  RawMaterialButton,
  BoxConstraints,
  HitTestBehavior,
  MXJSStatelessWidget,
  CircleBorder,
  BorderSide,
  MainAxisAlignment,
  SizedBox

} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

class JSChoiceValue{
    constructor({
        value,
        title,
        label
    } = {}) {
        this.value = value;
        this.title = title;
        this.label = label;
    }
}

class JSNamedColor{
    constructor({
        color,
        name
    } = {}) {
        this.color = color;
        this.name = name;
    }
}

// Notch
kShowNotchTrue = new JSChoiceValue({
    title: 'On',
    label: 'show bottom appbar notch',
    value: true
});

kShowNotchFalse = new JSChoiceValue({
    title: 'Off',
    label: 'do not show bottom appbar notch',
    value: false
});

// FAB Position
kFabEndDocked = new JSChoiceValue({
    title: 'Attached - End',
    label: 'floating action button is docked at the end of the bottom app bar',
    value: FloatingActionButtonLocation.endDocked
});

kFabCenterDocked = new JSChoiceValue({
    title: 'Attached - Center',
    label: 'floating action button is docked at the center of the bottom app bar',
    value: FloatingActionButtonLocation.centerDocked
});

kFabEndFloat = new JSChoiceValue({
    title: 'Free - End',
    label: 'floating action button floats above the end of the bottom app bar',
    value: FloatingActionButtonLocation.endFloat
});

kFabCenterFloat = new JSChoiceValue({
    title: 'Free - Center',
    label: 'floating action button is floats above the center of the bottom app bar',
    value: FloatingActionButtonLocation.centerFloat
});        
    

kFabColors = [
    new JSNamedColor({color: new Color(0xFFFFFFFF), name: 'Clear'}),
    new JSNamedColor({color: new Color(0xFFFFC100), name: 'Orange'}),
    new JSNamedColor({color: new Color(0xFF91FAFF), name: 'Light Blue'}),
    new JSNamedColor({color: new Color(0xFF00D1FF), name: 'Cyan'}),
    new JSNamedColor({color: new Color(0xFF00BCFF), name: 'Cerulean'}),
    new JSNamedColor({color: new Color(0xFF009BEE), name: 'Blue'})
];


class _JSHeading extends MXJSStatelessWidget {
    constructor ({
        text
    } = {}) {
        super();
        this.text = text;
    }

    build(context){
        return new Container({
            height: 56.0,
            padding: EdgeInsetsDirectional.only({start: 26.0}),
            alignment: new AlignmentDirectional({start: -1.0, y:0.0}),
            child: new Text(
                this.text,
                {style: new TextStyle({
                    inherit: false,
                    fontSize: 18.0,
                    decorationColor: new Color(0xFF123456),
                    decorationStyle: TextDecorationStyle.wavy,
                    color: new Color(0xFF123456)
                })}
            )
        });
    }
}

class _JSRadioItem extends MXJSStatelessWidget{
    constructor ({
        value,
        groupValue,
        onChanged
    } = {}) {
        super();
        this.value = value;
        this.groupValue = groupValue;
        this.onChanged = onChanged;

        console.log("[JS]-MXJSFlutter:: require..........", value , groupValue);

    }

    build(context){
        return new Container({
            height: 56.0,
            padding: EdgeInsetsDirectional.only({start: 36.0}),
            alignment: new AlignmentDirectional({start: -1.0, y:0.0}),
            child: new MergeSemantics({
                child: new Row({
                    children: [
                        new Radio({
                            value: this.value,
                            groupValue: this.groupValue,
                            onChanged: function () {
                                this.onChanged(this.value);
                            }.bind(this)
                        }),
                        new Expanded({
                            child: new Semantics({
                                container: true,
                                button: true,
                                label: this.value.label,
                                child: new GestureDetector({
                                    behavior: HitTestBehavior.opaque,
                                    onTap: function () {
                                        this.onChanged(this.value);
                                    }.bind(this),
                                    child: new Text(this.value.title)
                                })
                            })
                        })
                    ]
                })
            })
        });
    }
}

class _JSColorsItem extends MXJSStatelessWidget{
    constructor ({
        colors,
        selectedColor,
        onChanged
    } = {}) {
        super();
        this.colors = colors;
        this.selectedColor = selectedColor;
        this.onChanged = onChanged;
    }
    
    build(context){
        let rowContents = [];
        this.colors.forEach(function(namedColor) {
            let widget = new RawMaterialButton({
                onPressed: function () {
                    this.onChanged(namedColor.color);
                }.bind(this),
                constraints: new BoxConstraints({
                    minWidth: 32,
                    maxWidth: 32,
                    minHeight: 32,
                    maxHeight: 32
                }),
                fillColor: namedColor.color,
                shape: new CircleBorder({
                    side: new BorderSide({
                        color: namedColor.color == this.selectedColor ? Colors.black : new Color(0xFFD5D7DA),
                        width: 2.0
                    })
                }),
                child: new Semantics({
                    value: namedColor.name,
                    selected: namedColor.color == this.selectedColor
                })
            });
            rowContents.push(widget);
        }.bind(this))
        return new Row({
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: rowContents
        });
    }
}

class JSBottomAPPBarDemo extends MXJSStatefulWidget {
    constructor() {
        super('JSBottomAPPBarDemo');
    }
  
    createState() {
        return new JSBottomAPPBarDemoState(this);
    }
}

class JSBottomAPPBarDemoState extends MXJSWidgetState {
    // _scaffoldKey;//new GlobalKey();
    constructor (widget) {
        super(widget);

        this._showNotch = kShowNotchTrue;
        this._fabLocation = kFabCenterDocked;
        this._babColor = kFabColors[1].color;
    }

    showSnackBar() {
        text =
        "When the Scaffold's floating action button location changes, "
        'the floating action button animates to its new position.'
        'The BottomAppBar adapts its shape appropriately.';

        _scaffoldKey.currentState.showSnackBar(
            new SnackBar({content: Text(text)})
        );
    }

    onShowNotchChanged(value) {
        console.log("[JS]-MXJSFlutter:: require..........");
        this.setState(function() {
            this._showNotch = value;
        }.bind(this));
    }
    
    onFabLocationChanged(value) {
        this.setState(function() {
            this._fabLocation = value;
        }.bind(this));
    }
    
    onBabColorChange(value) {
        this.setState(function() {
            this._babColor = value;
        }.bind(this));
    }

    build(context){
        let floatingButtonLocation = this._fabLocation.value;

        let rowContents = [
            new IconButton({
                icon: new Icon(new IconData(0xe5d2,{fontFamily:'MaterialIcons', semanticLabel: 'Show bottom sheet'})),
                tooltip: 'Show bottom sheet',
                onPressed: function () {
                    Scaffold.of(context).showSnackBar(
                        new SnackBar({content: new Text('This is a dummy sheet action.')})
                    );
                }.bind(this)
            })
        ];

        if (floatingButtonLocation == FloatingActionButtonLocation.centerDocked || floatingButtonLocation == FloatingActionButtonLocation.centerFloat)
        {
            rowContents.push(
                new Expanded({child:new SizedBox()})
            );
        }

        rowContents.push(
            new IconButton({
                icon: new Icon(new IconData(0xe8b6,{fontFamily:'MaterialIcons', semanticLabel: 'show search action'})),
                tooltip: 'show search action',
                onPressed: function () {
                    Scaffold.of(context).showSnackBar(
                    new SnackBar({content: new Text('This is a dummy search action.')})
                    );
                }.bind(this)
            })
        );

        rowContents.push(
            new IconButton({
                icon: new Icon(new IconData(0xe5d3,{fontFamily:'MaterialIcons', semanticLabel: 'Show menu actions'})),
                tooltip: 'Show menu actions',
                onPressed: function () {
                    Scaffold.of(context).showSnackBar(
                        new SnackBar({content: new Text('This is a dummy menu action.')})
                    );
                }.bind(this)
            })
        );

        let widget = new Scaffold({
            // key: _scaffoldKey,
            appBar: new AppBar({
                title: new Text('Bottom app bar')
            }),
            body: new ListView({
                children : [
                    new _JSHeading({text: "Notch"}),
                    new _JSRadioItem({value: kShowNotchTrue, groupValue: this._showNotch, onChanged: this.onShowNotchChanged.bind(this)}),
                    new _JSRadioItem({value: kShowNotchFalse, groupValue: this._showNotch, onChanged: this.onShowNotchChanged.bind(this)}),

                    new _JSHeading({text: "FAB Position"}),
                    new _JSRadioItem({value: kFabEndDocked, groupValue: this._fabLocation, onChanged: this.onFabLocationChanged.bind(this)}),
                    new _JSRadioItem({value: kFabCenterDocked, groupValue: this._fabLocation, onChanged: this.onFabLocationChanged.bind(this)}),
                    new _JSRadioItem({value: kFabEndFloat, groupValue: this._fabLocation, onChanged: this.onFabLocationChanged.bind(this)}),
                    new _JSRadioItem({value: kFabCenterFloat, groupValue: this._fabLocation, onChanged: this.onFabLocationChanged.bind(this)}),

                    new _JSHeading({text: "App bar color"}),
                    new _JSColorsItem({colors: kFabColors, selectedColor: this._babColor, onChanged:this.onBabColorChange.bind(this)})

                ]
            }),
            bottomNavigationBar: new BottomAppBar({
                // color: Colors.red,
                child: new Row({children: rowContents}),
                color: this._babColor,
                shape: this._showNotch.value == true ? new CircularNotchedRectangle() : null
            }),
            floatingActionButton: new FloatingActionButton({
                child: new Icon(new IconData(0xe145,{fontFamily:'MaterialIcons',semanticLabel: 'Action'})),
                onPressed: function () {
        
                },
                backgroundColor: Colors.orange
            }),
            floatingActionButtonLocation: floatingButtonLocation
        });
        return widget;
    }
}

module.exports = { JSBottomAPPBarDemo };



/***/ }),

/***/ "./lib/app_demo/material/bottom_navigation_demo.js":
/*!*********************************************************!*\
  !*** ./lib/app_demo/material/bottom_navigation_demo.js ***!
  \*********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 278:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  Scaffold,
  Container,
  Center,
  AppBar,
  Stack,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  BottomNavigationBar,
  BottomNavigationBarItem,
  BottomNavigationBarType,
  Colors,
  Semantics,
  AnimationController,
  Duration,
  CurveTween,
  Interval,
  Curves,
  FadeTransition,
  SlideTransition,
  Tween,
  IconTheme,
  IconThemeData,
  Offset,
  BoxDecoration,
  Border
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

class NavigationIconView {
    constructor({
        icon,
        activeIcon,
        title,
        color,
        vsync
    } = {}) {
        this._icon = icon;
        this._title = title;
        this._color = color;
        this.item = new BottomNavigationBarItem({
            icon: icon,
            activeIcon: activeIcon,
            title: new Text(title),
            backgroundColor: color
        });
        this.controller = new AnimationController({
            duration: new Duration({milliseconds: 200})
            // vsync: vsync,
        });
        this._animation = this.controller.drive(new CurveTween({
            curve: new Interval(0.5, 1.0, {
                curve: Curves.fastOutSlowIn
            })
        }));
    }
    
    transition(type, context) {
        var iconColor;
        if (type == BottomNavigationBarType.shifting) {
            iconColor = this._color;
        } else {
            let themeData = Theme.of(context);
            iconColor = themeData.brightness == Brightness.light ? themeData.primaryColor : themeData.accentColor;
        }
        
        return new FadeTransition({
            opacity: this._animation,
            child: new SlideTransition({
                position: this._animation.drive(new Tween({
                    begin: new Offset(0.0, 0.2),
                    end: new Offset(0.0, 0.0)
                })),
                child: new IconTheme({
                    data: new IconThemeData({
                        color: iconColor,
                        size: 120.0
                    }),
                    child: new Semantics({
                        label: 'Placeholder for $this._title tab',
                        child: this._icon
                    })
                })
            }) 
        })
    }
}

class CustomIcon extends MXJSStatelessWidget {
    build(context) {
        /// TODO:
        let iconThemeData = IconTheme.of(context);
        return new Container({
            margin: EdgeInsets.all(4.0),
            width: iconThemeData.size - 8.0,
            height: iconThemeData.size - 8.0,
            color: iconThemeData.color
        }); 
    }
}

class CustomInactiveIcon extends MXJSStatelessWidget {
    build(context) {
        /// TODO:
        let iconThemeData = IconTheme.of(context);
        return new Container({
            margin: EdgeInsets.all(4.0),
            width: iconThemeData.size - 8.0,
            height: iconThemeData.size - 8.0,
            decoration: new BoxDecoration({
                border: Border.all({
                    color: iconThemeData.color,
                    width: 2.0
                })
            })
        }); 
    }
}

class JSBottomNavigationDemo extends MXJSStatefulWidget {
    constructor() {
        super('JSBottomNavigationDemo');
    }
  
    createState() {
        return new JSBottomNavigationDemoState(this);
    }
}

class JSBottomNavigationDemoState extends MXJSWidgetState {
    constructor (widget) {
        super(widget);
        this._currentIndex = 0;
        this._type = BottomNavigationBarType.shifting;
        this._navigationViews = [];
    }

    initState() {
        // this._navigationViews = [
        //     new NavigationIconView({
        //         icon: new Icon(new IconData(0xe190, {fontFamily: 'MaterialIcons'})),
        //         title: 'Alarm',
        //         color: Colors.deepPurple,
        //         vsync: this,
        //     }),
        //     new NavigationIconView({
        //         activeIcon: new CustomIcon(),
        //         icon: new CustomInactiveIcon(),
        //         title: 'Box',
        //         color: Colors.deepOrange,
        //         vsync: this,
        //     }),
        //     new NavigationIconView({
        //         activeIcon: new Icon(new IconData(0xe2bd, {fontFamily: 'MaterialIcons'})),
        //         icon: new Icon(new IconData(0xe2c2, {fontFamily: 'MaterialIcons'})),
        //         title: 'Cloud',
        //         color: Colors.teal,
        //         vsync: this,
        //     }),
        //     new NavigationIconView({
        //         activeIcon: new Icon(new IconData(0xe87d, {fontFamily: 'MaterialIcons'})),
        //         icon: new Icon(new IconData(0xe87e, {fontFamily: 'MaterialIcons'})),
        //         title: 'Favorites',
        //         color: Colors.indigo,
        //         vsync: this,
        //     }),
        //     new NavigationIconView({
        //         icon: new Icon(new IconData(0xe614, {fontFamily: 'MaterialIcons'})),
        //         title: 'Event',
        //         color: Colors.pink,
        //         vsync: this,
        //     }),
        // ];
        
        // this._navigationViews[this._currentIndex].controller.value = 1.0;
    }

    dispose(){
        this._navigationViews.map(function(view) {
            view.controller.dispose();
        })
    }

    _buildTransitionsStack(context) {
        var transitions = [];
        for(var i = 0; i < this._navigationViews.length; i++){
            transitions.push(this._navigationViews[i].transition(this._type, context));
        }

        transitions.sort(function (a, b) {
            let aAnimation = a.opacity;
            let bAnimation = b.opacity;
            let aValue = aAnimation.value;
            let bValue = bAnimation.value;
            return aValue < bValue;
        });

        return new Stack({
            children: transitions
        });
    }
    
    build(context){
        this._navigationViews = [
            new NavigationIconView({
                icon: new Icon(new IconData(0xe190, {fontFamily: 'MaterialIcons'})),
                title: 'Alarm',
                color: Colors.deepPurple
                // vsync: this,
            }),
            new NavigationIconView({
                activeIcon: new CustomIcon(),
                icon: new CustomInactiveIcon(),
                title: 'Box',
                color: Colors.deepOrange
                // vsync: this,
            }),
            new NavigationIconView({
                activeIcon: new Icon(new IconData(0xe2bd, {fontFamily: 'MaterialIcons'})),
                icon: new Icon(new IconData(0xe2c2, {fontFamily: 'MaterialIcons'})),
                title: 'Cloud',
                color: Colors.teal
                // vsync: this,
            }),
            new NavigationIconView({
                activeIcon: new Icon(new IconData(0xe87d, {fontFamily: 'MaterialIcons'})),
                icon: new Icon(new IconData(0xe87e, {fontFamily: 'MaterialIcons'})),
                title: 'Favorites',
                color: Colors.indigo
                // vsync: this,
            }),
            new NavigationIconView({
                icon: new Icon(new IconData(0xe614, {fontFamily: 'MaterialIcons'})),
                title: 'Event',
                color: Colors.pink
                // vsync: this,
            })
        ];
        
        this._navigationViews[this._currentIndex].controller.value = 1.0;

        let botNavBar = new BottomNavigationBar({
            items:this._navigationViews.map(function(navigationView) {
                return navigationView.item;
            }),
            currentIndex: this._currentIndex,
            type: this._type,
            onTap: function(args) {
                this.setState(function() {
                    var index = args;
                    this._navigationViews[this._currentIndex].controller.reverse();
                    this._currentIndex = index;
                    this._navigationViews[this._currentIndex].controller.forward();
                });
            }
        });

        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('Bottom Navigation'),
            }),
            body: new Center({
                child : this._buildTransitionsStack(context),
            }),
            bottomNavigationBar: botNavBar
        });
        return widget;
    }
}

module.exports = { JSBottomNavigationDemo };


/***/ }),

/***/ "./lib/app_demo/material/easy_ui_demo.js":
/*!***********************************************!*\
  !*** ./lib/app_demo/material/easy_ui_demo.js ***!
  \***********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 568:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  Container,
  Color,
  AppBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");


class JSEasyUIDemo extends MXJSStatefulWidget {
    constructor() {
        super('JSEasyUIDemo');
    }
  
    createState() {
        return new JSEasyUIDemoState(this);
    }
}

class JSEasyUIDemoState extends MXJSWidgetState {

    constructor(){
        super();
        this.dropdownValue = 'three';
        this.iconColorIndex = 10;
        this.sliderValue = 25.0;
        this.sliderDiscreteValue = 20.0;
    }

    // Buttons
    _buildButtons() {
        let widget = new Column({
            children:[
                new Row({
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                        new FlatButton({
                            child: new Text(
                                "Flat Button",{
                                    style: new TextStyle({color: new Color(0xFF000000)})
                                }),
                            onPressed: function() {
                                MXJSLog.log('Flat Button Pressed');
                            },
                            onHighlightChanged: function(args) {
                                MXJSLog.log('Flat Button onHighlightChanged');
                            }
                            // color: new Color(0x60000000),
                        }),
                        new RaisedButton({
                            child: new Text("Raised Button"),
                            onPressed: function() {
                                MXJSLog.log('Raised Button Pressed');
                            }
                            // color: new Color(0x60000000),
                        }),
                        new FloatingActionButton({
                            child: new Icon(new IconData(0xe145, {fontFamily: 'MaterialIcons'})),
                            tooltip: 'Floating Action Button',
                            onPressed: function() {
                                MXJSLog.log('Floating Action Button Pressed');
                            }
                        }),
                        new IconButton({
                            icon: new Icon(new IconData(0xe815, {fontFamily: 'MaterialIcons'})),
                            onPressed: function() {
                                MXJSLog.log('Icon Button Pressed');
                            }
                        }),
                    ],
                }),
                new Row({
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                        new DropdownButton({
                            value: this.dropdownValue,
                            items: ['one', 'two', 'three', 'four'].map(function(value) {
                                return new DropdownMenuItem({
                                    value: value,
                                    child: new Text(value)
                                });
                            }),
                            onChanged: function(newValue) {
                                MXJSLog.log('Icon Button Pressed');
                                this.setState(function (){
                                    this.dropdownValue = newValue;
                                })
                            }
                        }),
                        new PopupMenuButton({
                            onSelected: function(args) {
                                MXJSLog.log('more button pressed, index ' + args);
                            },
                            itemBuilder: function(context) {
                                let list = [
                                    new PopupMenuItem({
                                        value: 1,
                                        child: new Text('App bar scrolls away')
                                    }),
                                    new PopupMenuItem({
                                        value: 2,
                                        child: new Text('App bar stays away')
                                    }),
                                    new PopupMenuItem({
                                        value: 3,
                                        child: new Text('App bar floats')
                                    }),
                                    new PopupMenuItem({
                                        value: 4,
                                        child: new Text('App bar snaps')
                                    })
                                ];
                                return list;
                            },
                        }),
                        new ButtonBar({
                            mainAxisSize: MainAxisSize.min,
                            children:[
                                new RaisedButton({
                                    child: new Text('Button Bar 1'),
                                    onPressed: function() {
                                        MXJSLog.log('Button Bar 1 pressed');
                                    }
                                }),
                                new RaisedButton({
                                    child: new Text('Button Bar 2'),
                                    onPressed: function() {
                                        MXJSLog.log('Button Bar 2 pressed');
                                    }
                                })
                            ]
                        })
                    ]
                })
            ]
        });

        return widget;
    }

    // Texts
    _buildTexts() {
        let widget = new Container({
            padding: EdgeInsets.only({top: 10.0}),
            child: new Column({
                children:[
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                            new Container({
                                padding: EdgeInsets.only({right: 15.0}),
                                child: new Text(
                                    '这是一个text', {
                                    style: new TextStyle({
                                      fontWeight: FontWeight.w700,
                                      fontStyle: FontStyle.italic,
                                      color: new Color(0xFFFF00FF),
                                      fontSize: 20.0,
                                      decoration: TextDecoration.underline,
                                      decorationColor: Color.fromRGBO(0, 0, 0, 1),
                                      decorationStyle: TextDecorationStyle.double
                                    }),
                                    overflow: TextOverflow.ellipsis
                                })
                            }),
                            
                            new Expanded({
                                child: new RichText({
                                    text: new TextSpan({
                                        style: new TextStyle({
                                            color: new Color(0xFFFF8C00),
                                            fontSize: 18.0,
                                            decoration: TextDecoration.underline,
                                            decorationColor: Colors.orange,
                                            decorationStyle: TextDecorationStyle.dashed,
                                        }),
                                        text: '超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text'
                                    }),
                                    overflow: TextOverflow.ellipsis,
                                    maxLines: 1
                                })
                            })
                        ]
                    })
                ]
            })
        });

        return widget;
    }

    // Icons
    _buildIcons() {
        let iconColors = [
            Colors.red,
            Colors.pink,
            Colors.purple,
            Colors.deepPurple,
            Colors.indigo,
            Colors.blue,
            Colors.lightBlue,
            Colors.cyan,
            Colors.teal,
            Colors.green,
            Colors.lightGreen,
            Colors.lime,
            Colors.yellow,
            Colors.amber,
            Colors.orange,
            Colors.deepOrange,
            Colors.brown,
            Colors.grey,
            Colors.blueGrey
        ];
        
        let widget = new Container({
            padding: EdgeInsets.only({top: 10.0}),
            child: new Column({
                children:[
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                            new IconButton({
                                color: iconColors[this.iconColorIndex],
                                icon: new Icon(new IconData(0xe87c, {fontFamily: 'MaterialIcons'})),
                                onPressed: function() {
                                    this.iconColorIndex = (this.iconColorIndex + 1) % iconColors.length;
                                    this.setState(function() {
                                        
                                    })
                                },
                                iconSize: 24.0
                            }),
                            new IconButton({
                                color: iconColors[this.iconColorIndex],
                                icon: new Icon(new IconData(0xe87c, {fontFamily: 'MaterialIcons'})),
                                onPressed: function() {
                                    this.iconColorIndex = (this.iconColorIndex + 1) % iconColors.length;
                                    this.setState(function() {

                                    })
                                },
                                iconSize: 36.0
                            }),
                            new IconButton({
                                color: iconColors[this.iconColorIndex],
                                icon: new Icon(new IconData(0xe87c, {fontFamily: 'MaterialIcons'})),
                                onPressed: function() {
                                    this.iconColorIndex = (this.iconColorIndex + 1) % iconColors.length;
                                    this.setState(function() {
                                        
                                    })
                                },
                                iconSize: 48.0
                            })
                        ]
                    }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                            new IconButton({
                                color: iconColors[this.iconColorIndex],
                                icon: new Icon(new IconData(0xe001, {fontFamily: 'MaterialIcons'})),
                                onPressed: function() {
                                    this.iconColorIndex = (this.iconColorIndex + 1) % iconColors.length;
                                    this.setState(function() {
                                        
                                    })
                                },
                                iconSize: 24.0
                            }),
                            new IconButton({
                                color: iconColors[this.iconColorIndex],
                                icon: new Icon(new IconData(0xe001, {fontFamily: 'MaterialIcons'})),
                                onPressed: function() {
                                    this.iconColorIndex = (this.iconColorIndex + 1) % iconColors.length;
                                    this.setState(function() {
                                        
                                    })
                                },
                                iconSize: 36.0
                            }),
                            new IconButton({
                                color: iconColors[this.iconColorIndex],
                                icon: new Icon(new IconData(0xe001, {fontFamily: 'MaterialIcons'})),
                                onPressed: function() {
                                    this.iconColorIndex = (this.iconColorIndex + 1) % iconColors.length;
                                    this.setState(function() {
                                        
                                    })
                                },
                                iconSize: 48.0
                            })
                        ]
                    })
                ]
            })
        });

        return widget;
    }

    // TextFields
    _buildTextFields() {
        let widget = new Container({
            padding: EdgeInsets.only({top: 10.0}),
            child: new Column({
                children:[
                    new Container({
                        padding: EdgeInsets.only({right: 15.0}),
                        child: new TextField({
                            keyboardType: TextInputType.number(),
                            onSubmitted: function (args) {
                                MXJSLog.log('number onSubmitted');
                            },
                            decoration: new InputDecoration({
                                labelText: 'placeholder'
                            }),
                            onChanged: function(args) {
                                MXJSLog.log('number onChanged');
                            }
                        })
                    }),
                    new SizedBox({
                        height: 24.0
                    }),
                    new TextField({
                        controller: new TextEditingController({
                            text: 'initial text'
                        }),
                        keyboardType: TextInputType.emailAddress(),
                        onSubmitted: function (args) {
                            MXJSLog.log('email onSubmitted');
                        },
                        onChanged: function(args) {
                            MXJSLog.log('email onChanged');
                        }
                    })
                ]
            })
        });

        return widget;
    }

    // TextFormFields
    _buildTextFormFields() {
        let widget = new Container({
            padding: EdgeInsets.only({top: 10.0}),
            child: new Column({
                children:[
                    new Container({
                        padding: EdgeInsets.only({right: 15.0}),
                        child: new TextFormField({
                            decoration: new InputDecoration({
                                border: new UnderlineInputBorder(),
                                filled: true,
                                icon: new Icon(new IconData(0xe0be, {fontFamily: 'MaterialIcons'})),
                                hintText: 'Your email address',
                                labelText: 'E-mail'
                            }),
                            keyboardType: TextInputType.emailAddress(),
                            onFieldSubmitted: function (args) {
                                MXJSLog.log('email onFieldSubmitted');
                            }
                        })
                    }),
                    new SizedBox({
                        height: 24.0
                    }),
                    new Container({
                        padding: EdgeInsets.only({right: 15.0}),
                        child: new TextFormField({
                            decoration: new InputDecoration({
                                border: new UnderlineInputBorder(),
                                filled: true,
                                icon: new Icon(new IconData(0xe0cd, {fontFamily: 'MaterialIcons'})),
                                hintText: 'Where can we reach you?',
                                labelText: 'Phone Number *',
                                prefixText: '+1'
                            }),
                            keyboardType: TextInputType.phone(),
                            onFieldSubmitted: function (args) {
                                MXJSLog.log('phone onFieldSubmitted');
                            }
                        })
                    })
                ]
            })
        });

        return widget;
    }

    // TextFormFields
    _buildSlider() {
        let widget = new Container({
            padding: EdgeInsets.only({top: 10.0}),
            child: new Column({
                children:[
                    new Container({
                        padding: EdgeInsets.only({right: 15.0}),
                        child: new Slider({
                            value: this.sliderValue,
                            min: 0.0,
                            max: 100.0,
                            onChanged:function (args) {
                                let value = args;
                                this.setState(function(){
                                    this.sliderValue = value;
                                });
                            },
                            semanticFormatterCallback: function(args) {
                                return 'dollars';
                            },
                        }),
                    }),
                    new SizedBox({
                        height: 24.0,
                    }),
                    new Container({
                        padding: EdgeInsets.only({right: 15.0}),
                        child: new Slider({
                            value: this.sliderDiscreteValue,
                            min: 0.0,
                            max: 100.0,
                            divisions: 5,
                            label: this.sliderDiscreteValue.toString(),
                            onChanged:function (args) {
                                let value = args;
                                this.setState(function(){
                                    this.sliderDiscreteValue = value;
                                });
                            }
                        })
                    })
                ]
            })
        });

        return widget;
    }

    build(context){
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('Easy UI'),
            }),
            body: new ListView({
                children: [
                    new Container({
                        padding: EdgeInsets.all(10.0),
                        child: new Column({
                            children: [
                                new Text('Button', {
                                    style: new TextStyle({
                                        fontSize: 20.0,
                                        color: Colors.indigo,
                                        fontWeight: FontWeight.bold
                                    })
                                }),
                                this._buildButtons(),
            
                                new Text('Text', {
                                    style: new TextStyle({
                                        fontSize: 20.0,
                                        color: Colors.indigo,
                                        fontWeight: FontWeight.bold
                                    })
                                }),
                                this._buildTexts(),

                                new Container({
                                    padding: EdgeInsets.only({top:15.0}),
                                    child: new Text('Icons', {
                                        style: new TextStyle({
                                            fontSize: 20.0,
                                            color: Colors.indigo,
                                            fontWeight: FontWeight.bold
                                        })
                                    })
                                }),
                                this._buildIcons(),
        
                                new Container({
                                    padding: EdgeInsets.only({top:15.0}),
                                    child: new Text('TextField', {
                                        style: new TextStyle({
                                            fontSize: 20.0,
                                            color: Colors.indigo,
                                            fontWeight: FontWeight.bold
                                        })
                                    })
                                }),
                                this._buildTextFields(),
        
                                new Container({
                                    padding: EdgeInsets.only({top:15.0}),
                                    child: new Text('TextFormField', {
                                        style: new TextStyle({
                                            fontSize: 20.0,
                                            color: Colors.indigo,
                                            fontWeight: FontWeight.bold
                                        })
                                    })
                                }),
                                this._buildTextFormFields(),

                                new Container({
                                    padding: EdgeInsets.only({top:15.0}),
                                    child: new Text('Slider', {
                                        style: new TextStyle({
                                            fontSize: 20.0,
                                            color: Colors.indigo,
                                            fontWeight: FontWeight.bold
                                        })
                                    })
                                }),
                                this._buildSlider()
                            ]
                        })
                    })
                ]
            })
        });
        return widget;
    }
}

module.exports = { JSEasyUIDemo };


/***/ }),

/***/ "./lib/app_demo/material/tabs_demo.js":
/*!********************************************!*\
  !*** ./lib/app_demo/material/tabs_demo.js ***!
  \********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 266:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//tabs_demo.js 正式开始，😝

let {
  runApp,
  MXJSFlutterApp,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MXJSWidgetState,
  Scaffold,
  Text,
  Theme,
  EdgeInsets,
  Column,
  SizedBox,
  Card,
  CrossAxisAlignment,
  MainAxisAlignment,
  Align,
  Center,
  Image,
  Alignment,
  CircleAvatar,
  DefaultTabController,
  NestedScrollView,
  SliverOverlapAbsorber,
  SliverAppBar,
  TabBar,
  Tab,
  TabBarView,
  SafeArea,
  Builder,
  CustomScrollView,
  SliverChildBuilderDelegate,
  SliverOverlapInjector,
  SliverPadding,
  SliverFixedExtentList,
  Padding
  
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

let _kGalleryAssetsPackage = 'flutter_gallery_assets';

class _Page {
    constructor({label}) {
        this.label = label;
    }

    get id() {
        return this.label[0];
    }

    toString() {
        return '$runtimeType("$this.label")';
    }
}

class _CardData {
    constructor({title, imageAsset, imageAssetPackage}) {
        this.title = title,
        this.imageAsset = imageAsset,
        this.imageAssetPackage = imageAssetPackage;
    }
}

// ES6的map写法比较奇怪
var _allPages = new Map();
_allPages.set(new _Page({label: 'HOME'}) , [
    new _CardData({
        title: 'Flatwear',
        imageAsset: 'products/flatwear.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
    new _CardData({
        title: 'Pine Table',
        imageAsset: 'products/table.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
    new _CardData({
        title: 'Blue Cup',
        imageAsset: 'products/cup.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
      new _CardData({
        title: 'Tea Set',
        imageAsset: 'products/teaset.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
      new _CardData({
        title: 'Desk Set',
        imageAsset: 'products/deskset.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
      new _CardData({
        title: 'Blue Linen Napkins',
        imageAsset: 'products/napkins.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
      new _CardData({
        title: 'Planters',
        imageAsset: 'products/planters.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
    new _CardData({
        title: 'Kitchen Quattro',
        imageAsset: 'products/kitchen_quattro.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
    new _CardData({
        title: 'Platter',
        imageAsset: 'products/platter.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
]).set(new _Page({label: 'APPAREL'}) , [
    new _CardData({
        title: 'Cloud-White Dress',
        imageAsset: 'products/dress.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
    new _CardData({
        title: 'Ginger Scarf',
        imageAsset: 'products/scarf.png',
        imageAssetPackage: _kGalleryAssetsPackage
    }),
    new _CardData({
        title: 'Blush Sweats',
        imageAsset: 'products/sweats.png',
        imageAssetPackage: _kGalleryAssetsPackage
    })
]);

class _CardDataItem extends MXJSStatelessWidget {
    constructor({page, data}) {
        super('_CardDataItem');
        this.page = page;
        this.data = data;
    }

    static get height() {
        return 272.0;
    }

    build(context) {
        let widget = new Card({
            child: new Padding({
                padding: EdgeInsets.all(16.0),
                child: new Column({
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                        new Align({
                            alignment: this.page.id == 'H' ? Alignment.centerLeft : Alignment.centerRight,
                            child: new CircleAvatar({
                                child: new Text(this.page.id),
                            })
                        }),
                        new SizedBox({
                            width: 144.0,
                            height: 144.0,
                            child: Image.asset(
                                this.data.imageAsset, {
                                    fit: BoxFit.contain,
                                    mxPackage: this.data.imageAssetPackage
                                }
                            )
                        }),
                        new Center({
                            child: new Text(
                                this.data.title, {
                                    style: Theme.of(context).textTheme.title,
                            })
                        })
                    ]
                })
            })
        });
        return widget;
    }
}

class JSTabsDemo extends MXJSStatefulWidget {
    constructor() {
        super('JSTabsDemo');
    }
  
    createState() {
        return new JSTabsDemoState(this);
    }
}

class JSTabsDemoState extends MXJSWidgetState {
    build(context){
        let widget = new DefaultTabController({
            length: _allPages.size,
            child: new Scaffold({
                body: new NestedScrollView({
                    headerSliverBuilder: function(context) {
                        return [
                            new SliverOverlapAbsorber({
                                handle: NestedScrollView.sliverOverlapAbsorberHandleFor(context),
                                child: new SliverAppBar({
                                    title: new Text('Tabs and scrolling'),
                                    pinned: true,
                                    expandedHeight: 150.0,
                                    forceElevated: false,
                                    bottom: new TabBar({
                                        tabs: [...(_allPages.keys())].map(page => new Tab({text: page.label}))
                                    })
                                })
                            })
                        ];
                    },
                    body: new TabBarView({
                        children: [...(_allPages.keys())].map(function(page) {
                            return new SafeArea({
                                top: false,
                                bottom: false,
                                child: new Builder({
                                    builder: function(context) {
                                        return new CustomScrollView({
                                            slivers: [
                                                new SliverOverlapInjector({
                                                    handle: NestedScrollView.sliverOverlapAbsorberHandleFor(context)
                                                }),
                                                new SliverPadding({
                                                    padding: EdgeInsets.symmetric({
                                                        vertical: 8.0,
                                                        horizontal: 16.0
                                                    }),
                                                    sliver: new SliverFixedExtentList({
                                                        itemExtent: _CardDataItem.height,
                                                        delegate: new SliverChildBuilderDelegate(
                                                            function(context, index) {
                                                                var data = (_allPages.get(page))[index];
                                                                return new Padding({
                                                                    padding: EdgeInsets.symmetric({
                                                                        vertical: 8.0
                                                                    }),
                                                                    child: new _CardDataItem({
                                                                        page: page,
                                                                        data: data
                                                                    })
                                                                });
                                                            },
                                                            {
                                                                childCount: (_allPages.get(page)).length
                                                            }
                                                        )
                                                    })
                                                })
                                            ]
                                        });
                                    }
                                })
                            });
                        })
                    })
                })
            })
        });
        return widget;
    }
}

module.exports = { JSTabsDemo };


/***/ }),

/***/ "./lib/app_demo/pesto.js":
/*!*******************************!*\
  !*** ./lib/app_demo/pesto.js ***!
  \*******************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 445:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  Center,
  AppBar,
  Text,
  Icon,
  IconData,
  MediaQuery,
  FloatingActionButton,
  CustomScrollView,
  SliverAppBar,
  SliverPadding,
  SliverGrid,
  SliverGridDelegateWithMaxCrossAxisExtent,
  SliverChildBuilderDelegate,
  EdgeInsets,
  GestureDetector,
  Card,
  Expanded,
  Column,
  Hero,
  AspectRatio,
  Image,
  BoxFit,
  Row,
  Padding,
  MXJSStatelessWidget
  
} = __webpack_require__(/*! ../js_flutter.js */ "./lib/js_flutter.js");


//业务代码

let _kGalleryAssetsPackage = 'flutter_gallery_assets';
let _kAppBarHeight = 128.0;
let _kFabHalfSize = 28.0; // TODO(mpcomplete): needs to adapt to screen size
let _kRecipePageMaxWidth = 500.0;

class JSPestoPage extends MXJSStatefulWidget {
  constructor() {
      super('JSPestoPage');
  }

  createState() {
    return new JSPestoPageState(this);
  }
}

class JSPestoPageState extends MXJSWidgetState {

  build(context) {

    let statusBarHeight = 24;

    let mq = MediaQuery.of(context);
    if (mq) {
      statusBarHeight = mq.padding.top
    }

    let w = new Scaffold({
      appBar: new AppBar({
        title: new Text("Pesto Demo")
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(new IconData(0xe3c9)),
        onPressed: function () {

        }
      }),
      body: new CustomScrollView({
        semanticChildCount: _recipeList.length,
        slivers: [
          //this.buildAppBar(context, statusBarHeight),
          this.buildBody(context, statusBarHeight)
        ]
      })
      //body:this.buildItems()[0]
    });

    return w;
  }

  buildAppBar(context, statusBarHeight) {
    return SliverAppBar({
      pinned: true,
      expandedHeight: _kAppBarHeight,
      actions: [
        IconButton({
          icon: new Icon(new IconData(1)),
          tooltip: 'Search',
          onPressed: function () {

          }
        })
      ],
      flexibleSpace: LayoutBuilder({
        builder: function (context, constraints) {
          size = constraints.biggest;
          appBarHeight = size.height - statusBarHeight;
          t = (appBarHeight - kToolbarHeight) / (_kAppBarHeight - kToolbarHeight);
          extraPadding = new Tween({ begin: 10.0, end: 24.0 }).transform(t);
          logoHeight = appBarHeight - 1.5 * extraPadding;
          return Padding({
            padding: EdgeInsets.only({
              top: statusBarHeight + 0.5 * extraPadding,
              bottom: extraPadding,
            }),
            child: Center({
              child: new Icon(new IconData(1))
            })
          });
        }
      })
    });
  }

  buildBody(context, statusBarHeight) {

    let mediaPadding = EdgeInsets.all(0);
    let mq = MediaQuery.of(context);
    if (mq) {
      mediaPadding = MediaQuery.of(context).padding;
    }
    let padding = EdgeInsets.only({
      top: 8.0,
      left: 8.0 + mediaPadding.left,
      right: 8.0 + mediaPadding.right,
      bottom: 8.0
    });

    return new SliverPadding({
      padding: padding,
      sliver: new SliverGrid({
        gridDelegate: new SliverGridDelegateWithMaxCrossAxisExtent({
          maxCrossAxisExtent: _kRecipePageMaxWidth,
          crossAxisSpacing: 8.0,
          mainAxisSpacing: 8.0,
        }),
        delegate: new SliverChildBuilderDelegate(
          function (context, index) {
            let recipe = _recipeList[index];
            let w = new RecipeCard({
              recipe: recipe,
              onTap: function () { showRecipePage(context, recipe); }
            });

            return w;
          },
          {
            childCount: _recipeList.length
          })
      })
    });
  }

  // buildItems() {
  //   let recipeWidgetList = [];

  //   this.recipes.forEach(element => {
  //     let w = new RecipeCard({
  //       recipe: element,
  //       onTap: function () { showRecipePage(context, element); },
  //     });
  //     recipeWidgetList.push(w);
  //   });

  //   return recipeWidgetList;
  // }
}

// A card with the recipe's image, author, and title.
class RecipeCard extends MXJSStatelessWidget {

  constructor({ recipe, onTap }) {
    super("RecipeCard");
    this.recipe = recipe;
    this.onTap = onTap;

  }

  build(context) {

    //return new Text(this.recipe.name);
    return new GestureDetector({
      onTap: this.onTap,
      child: new Card({
        child: new Column({
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            new Hero({
              tag: 'packages/' + this.recipe.imagePackage + '/' + this.recipe.imagePath,
              child:
                new AspectRatio({
                  aspectRatio: 4.0 / 3.0,
                  child: Image.asset(
                    this.recipe.imagePath,
                    {
                      mxPackage: this.recipe.imagePackage,
                      fit: BoxFit.cover,
                      semanticLabel: this.recipe.name
                    })
                })
            }),
            new Expanded({
              child: new Row({
                children: [
                  new Padding({
                    padding: EdgeInsets.all(16.0),
                    child: Image.asset(
                      this.recipe.ingredientsImagePath,
                      {
                        mxPackage: this.recipe.ingredientsImagePackage,
                        width: 48.0,
                        height: 48.0
                      })
                  }),
                  new Expanded({
                    child: new Column({
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        new Text(this.recipe.name),
                        new Text(this.recipe.author),
                      ]
                    })
                  })
                ]
              })
            })
          ]
        })
      })
    });
  }
}



//ui数据
class Recipe {
  constructor({
    name,
    author,
    description,
    imagePath,
    imagePackage,
    ingredientsImagePath,
    ingredientsImagePackage,
    ingredients,
    steps
  } = {}) {

    this.name = name;
    this.author = author;
    this.description = description;
    this.imagePath = imagePath;
    this.imagePackage = imagePackage;
    this.ingredientsImagePath = ingredientsImagePath;
    this.ingredientsImagePackage = ingredientsImagePackage;
    this.ingredients = ingredients;
    this.steps = steps;
  }
}

class RecipeIngredient {
  constructor({
    amount,
    description
  } = {}) {

    this.amount = amount;
    this.description = description;
  }
}


class RecipeStep {
  constructor({
    duration,
    description
  } = {}) {

    this.duration = duration;
    this.description = description;
  }
}

//const List<Recipe> kPestoRecipes = <Recipe>[

let _recipeList = [
  new Recipe({
    name: 'Roasted Chicken',
    author: 'Peter Carlsson',
    ingredientsImagePath: 'food/icons/main.png',
    ingredientsImagePackage: _kGalleryAssetsPackage,
    description: 'The perfect dish to welcome your family and friends with on a crisp autumn night. Pair with roasted veggies to truly impress them.',
    imagePath: 'food/roasted_chicken.png',
    imagePackage: _kGalleryAssetsPackage,
    ingredients: [
      new RecipeIngredient({ amount: '1 whole', description: 'Chicken' }),
      new RecipeIngredient({ amount: '1/2 cup', description: 'Butter' }),
      new RecipeIngredient({ amount: '1 tbsp', description: 'Onion powder' }),
      new RecipeIngredient({ amount: '1 tbsp', description: 'Freshly ground pepper' }),
      new RecipeIngredient({ amount: '1 tsp', description: 'Salt' })
    ],
    steps: [
      new RecipeStep({ duration: '1 min', description: 'Put in oven' }),
      new RecipeStep({ duration: '1hr 45 min', description: 'Cook' })
    ],
  }),
  new Recipe({
    name: 'Chopped Beet Leaves',
    author: 'Trevor Hansen',
    ingredientsImagePath: 'food/icons/veggie.png',
    ingredientsImagePackage: _kGalleryAssetsPackage,
    description: 'This vegetable has more to offer than just its root. Beet greens can be tossed into a salad to add some variety or sauteed on its own with some oil and garlic.',
    imagePath: 'food/chopped_beet_leaves.png',
    imagePackage: _kGalleryAssetsPackage,
    ingredients: [
      new RecipeIngredient({ amount: '3 cups', description: 'Beet greens' })
    ],
    steps: [
      new RecipeStep({ duration: '5 min', description: 'Chop' })
    ]
  }),
  new Recipe({
    name: 'Pesto Pasta',
    author: 'Ali Connors',
    ingredientsImagePath: 'food/icons/main.png',
    ingredientsImagePackage: _kGalleryAssetsPackage,
    description: 'With this pesto recipe, you can quickly whip up a meal to satisfy your savory needs. And if you\'re feeling festive, you can add bacon to taste.',
    imagePath: 'food/pesto_pasta.png',
    imagePackage: _kGalleryAssetsPackage,
    ingredients: [
      new RecipeIngredient({ amount: '1/4 cup ', description: 'Pasta' }),
      new RecipeIngredient({ amount: '2 cups', description: 'Fresh basil leaves' }),
      new RecipeIngredient({ amount: '1/2 cup', description: 'Parmesan cheese' }),
      new RecipeIngredient({ amount: '1/2 cup', description: 'Extra virgin olive oil' }),
      new RecipeIngredient({ amount: '1/3 cup', description: 'Pine nuts' }),
      new RecipeIngredient({ amount: '1/4 cup', description: 'Lemon juice' }),
      new RecipeIngredient({ amount: '3 cloves', description: 'Garlic' }),
      new RecipeIngredient({ amount: '1/4 tsp', description: 'Salt' }),
      new RecipeIngredient({ amount: '1/8 tsp', description: 'Pepper' }),
      new RecipeIngredient({ amount: '3 lbs', description: 'Bacon' })
    ],
    steps: [
      new RecipeStep({ duration: '15 min', description: 'Blend' })
    ]
  }),
  new Recipe({
    name: 'Cherry Pie',
    author: 'Sandra Adams',
    ingredientsImagePath: 'food/icons/main.png',
    ingredientsImagePackage: _kGalleryAssetsPackage,
    description: 'Sometimes when you\'re craving some cheer in your life you can jumpstart your day with some cherry pie. Dessert for breakfast is perfectly acceptable.',
    imagePath: 'food/cherry_pie.png',
    imagePackage: _kGalleryAssetsPackage,
    ingredients: [
      new RecipeIngredient({ amount: '1', description: 'Pie crust' }),
      new RecipeIngredient({ amount: '4 cups', description: 'Fresh or frozen cherries' }),
      new RecipeIngredient({ amount: '1 cup', description: 'Granulated sugar' }),
      new RecipeIngredient({ amount: '4 tbsp', description: 'Cornstarch' }),
      new RecipeIngredient({ amount: '1½ tbsp', description: 'Butter' })
    ],
    steps: [
      new RecipeStep({ duration: '15 min', description: 'Mix' }),
      new RecipeStep({ duration: '1hr 30 min', description: 'Bake' })
    ]
  }),
  new Recipe({
    name: 'Spinach Salad',
    author: 'Peter Carlsson',
    ingredientsImagePath: 'food/icons/spicy.png',
    ingredientsImagePackage: _kGalleryAssetsPackage,
    description: 'Everyone\'s favorite leafy green is back. Paired with fresh sliced onion, it\'s ready to tackle any dish, whether it be a salad or an egg scramble.',
    imagePath: 'food/spinach_onion_salad.png',
    imagePackage: _kGalleryAssetsPackage,
    ingredients: [
      new RecipeIngredient({ amount: '4 cups', description: 'Spinach' }),
      new RecipeIngredient({ amount: '1 cup', description: 'Sliced onion' })
    ],
    steps: [
      new RecipeStep({ duration: '5 min', description: 'Mix' })
    ]
  }),
  new Recipe({
    name: 'Butternut Squash Soup',
    author: 'Ali Connors',
    ingredientsImagePath: 'food/icons/healthy.png',
    ingredientsImagePackage: _kGalleryAssetsPackage,
    description: 'This creamy butternut squash soup will warm you on the chilliest of winter nights and bring a delightful pop of orange to the dinner table.',
    imagePath: 'food/butternut_squash_soup.png',
    imagePackage: _kGalleryAssetsPackage,
    ingredients: [
      new RecipeIngredient({ amount: '1', description: 'Butternut squash' }),
      new RecipeIngredient({ amount: '4 cups', description: 'Chicken stock' }),
      new RecipeIngredient({ amount: '2', description: 'Potatoes' }),
      new RecipeIngredient({ amount: '1', description: 'Onion' }),
      new RecipeIngredient({ amount: '1', description: 'Carrot' }),
      new RecipeIngredient({ amount: '1', description: 'Celery' }),
      new RecipeIngredient({ amount: '1 tsp', description: 'Salt' }),
      new RecipeIngredient({ amount: '1 tsp', description: 'Pepper' })
    ],
    steps: [
      new RecipeStep({ duration: '10 min', description: 'Prep vegetables' }),
      new RecipeStep({ duration: '5 min', description: 'Stir' }),
      new RecipeStep({ duration: '1 hr 10 min', description: 'Cook' })
    ]
  }),
  new Recipe({
    name: 'Spanakopita',
    author: 'Trevor Hansen',
    ingredientsImagePath: 'food/icons/quick.png',
    ingredientsImagePackage: _kGalleryAssetsPackage,
    description: 'You \'feta\' believe this is a crowd-pleaser! Flaky phyllo pastry surrounds a delicious mixture of spinach and cheeses to create the perfect appetizer.',
    imagePath: 'food/spanakopita.png',
    imagePackage: _kGalleryAssetsPackage,
    ingredients: [
      new RecipeIngredient({ amount: '1 lb', description: 'Spinach' }),
      new RecipeIngredient({ amount: '½ cup', description: 'Feta cheese' }),
      new RecipeIngredient({ amount: '½ cup', description: 'Cottage cheese' }),
      new RecipeIngredient({ amount: '2', description: 'Eggs' }),
      new RecipeIngredient({ amount: '1', description: 'Onion' }),
      new RecipeIngredient({ amount: '½ lb', description: 'Phyllo dough' })
    ],
    steps: [
      new RecipeStep({ duration: '5 min', description: 'Sauté vegetables' }),
      new RecipeStep({ duration: '3 min', description: 'Stir vegetables and other filling ingredients' }),
      new RecipeStep({ duration: '10 min', description: 'Fill phyllo squares half-full with filling and fold.' }),
      new RecipeStep({ duration: '40 min', description: 'Bake' })
    ]
  })
];

module.exports = { JSPestoPage };


/***/ }),

/***/ "./lib/app_demo/platform/example_dio.js":
/*!**********************************************!*\
  !*** ./lib/app_demo/platform/example_dio.js ***!
  \**********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 186:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  Icons,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");
const packages__dio = __webpack_require__(/*! @tencent/mxflutter-dio */ "./node_modules/@tencent/mxflutter-dio/index.js");


let cgiDataUrl = "https://c.m.163.com/nc/article/headline/T1348649580692/0-10.html";
let cgiJsonUrl = "https://reactnative.dev/movies.json"

class PageExampleDio extends MXJSStatefulWidget {
  constructor() {
    super("PageExampleDio");

    this.data = "biz data";
    this.count = 0;
  }

  createState() {
    return new PageExampleDioState(this);
  }
}

class PageExampleDioState extends MXJSWidgetState {
  constructor() {
    super("PageExampleNetworkState");
    this.response = "点击小人Run上面的代码";
    this.dio = packages__dio.Dio();
  }

  dioCodeText() {
    return "let resp = await Dio().get(cgi);";
  }
  
  //例子1，最简单的用法 
  async testDio1(url) {
    
    try {
      let response = await this.dio.get(url);
      MXJSLog.log("await Dio.get(urlStr):request() :" + response);
      return response.data;

    } catch (e$) {
      // let e = dart.getThrown(e$);
      // MXJSLog.log("testDio() error:" + e);
      return e;

    }
  }

  //例子2，接口还未完全支持
  async testDio2(url) {
    
    try {
      let response =  await this.dio.get(url, { onReceiveProgress:function (progress,total){
        MXJSLog.log("testDio(): progress: " + progress/total);
      }});

      MXJSLog.log("await Dio.get(urlStr):request() :" + response);
      return response.data;

    } catch (e$) {
      // let e = dart.getThrown(e$);
      // MXJSLog.log("testDio() error:" + e);
      rethrow;
    }
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text("Dio Example"),
      }),
      body: new ListView({
        children: [
          new SectionTitle("Code 获取网易新闻text"),
          new ListTile({
            trailing: new Icon(Icons["directions_run"]),
            title: new Text(this.dioCodeText(), {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
            onTap: async function () {
              let response = await this.testDio2(cgiDataUrl);

              this.setState(function () {

                this.response = JSON.stringify(response);

              }.bind(this));

            }.bind(this)
          }),
          new SectionTitle("Code 获取Json Map"),
          new ListTile({
            trailing: new Icon(Icons["directions_run"]),
            title: new Text(this.dioCodeText(), {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
            onTap: async function () {
              let response = await this.testDio1(cgiJsonUrl);

              this.setState(function () {

                //response.data 为json map obj
                this.response = "json title:" + response["title"]  + " \r\n\r\n\r\njson text:" +  JSON.stringify(response);

              }.bind(this));

            }.bind(this)
          }),
          new SectionTitle("Response"),

          new Padding({
            padding: EdgeInsets.all(10),
            child: new Text(this.response, {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
          })

        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleDio,
};


/***/ }),

/***/ "./lib/app_demo/platform/example_message_channel.js":
/*!**********************************************************!*\
  !*** ./lib/app_demo/platform/example_message_channel.js ***!
  \**********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 161:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  Icons,
  MethodChannel
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class PageExampleMessageChannel extends MXJSStatefulWidget {
  constructor() {
    super("PageExampleMessageChannel");

  }

  createState() {
    return new PageExampleMessageChannelState(this);
  }
}

class PageExampleMessageChannelState extends MXJSWidgetState {
  constructor() {
    super("PageExampleMessageChannelState");
    this.response = "点击小人Run上面的代码";

    this.methodChannel = new MethodChannel("MXFlutter_MethodChannel_Demo");
  }

  dioCodeText() {
    return "let result = await this.methodChannel.invokeMethod('callNativeIconListRefresh', {});";
  }
  dioCodeText2() {
    return "let result = await this.methodChannel.invokeMethod('callNativeIconListLoadMore', {});";
  }

  async callMethodChannel(method) {

    //MessageChannel 用法示例
    let result = await this.methodChannel.invokeMethod(method, {});

    MXJSLog.log("callNativeIconListRefresh result: " + result);
    return result;

  }



  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text("MessageChannel Example"),
      }),
      body: new ListView({
        children: [
          new SectionTitle("Code 调用MessageChannel ListRefresh"),
          new ListTile({
            trailing: new Icon(Icons["directions_run"]),
            title: new Text(this.dioCodeText(), {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
            onTap: async function () {
              let response = await this.callMethodChannel("callNativeIconListRefresh");

              this.setState(function () {

                this.response = JSON.stringify(response ? response : "messagechannel return empty");

              }.bind(this));

            }.bind(this)
          }),
          new SectionTitle("Code 调用MessageChannel ListLoadMore"),
          new ListTile({
            trailing: new Icon(Icons["directions_run"]),
            title: new Text(this.dioCodeText2(), {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
            onTap: async function () {
              let response = await this.callMethodChannel("callNativeIconListLoadMore");

              this.setState(function () {

                this.response = JSON.stringify(response ? response : "messagechannel return empty");

              }.bind(this));

            }.bind(this)
          }),
          new SectionTitle("MessageChannel Result"),

          new Padding({
            padding: EdgeInsets.all(10),
            child: new Text(this.response, {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
          })

        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleMessageChannel,
};


/***/ }),

/***/ "./lib/app_demo/platform/example_shared_preferences.js":
/*!*************************************************************!*\
  !*** ./lib/app_demo/platform/example_shared_preferences.js ***!
  \*************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 190:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  Icons,
  MethodChannel
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");
//let packages__sp = require("packages/shared_preferences/shared_preferences.js");


async function testPreference() {
  //let packages__sp = require("packages/shared_preferences/shared_preferences.js");

  try {

    let _prefs = (await packages__sp.SharedPreferences.getInstance());
    _prefs.setString("mxflutter", "MXFlutter SharedPreferences: Count : " + this.count++);



    let v = _prefs.getString("soap");
    MXJSLog.log("_prefs.getString('soap'):" + v);

    _prefs.setStringList("soaplist", ["soap", "mxflutter uuuuu"]);

    let vList = _prefs.getStringList("soaplist");
    MXJSLog.log("_prefs.getStringList('soaplist'):" + vList);

  } catch (e$) {
    let e = dart.getThrown(e$);
    MXJSLog.log("testPreference error:" + e);
    return e;

  }


}


class PageExampleSharedPreferences extends MXJSStatefulWidget {
  constructor() {
    super("PageExampleSharedPreferences");

  }

  createState() {
    return new PageExampleSharedPreferencesState(this);
  }
}

class PageExampleSharedPreferencesState extends MXJSWidgetState {
  constructor() {
    super("PageExampleSharedPreferencesState");
    this.response = "点击小人Run上面的代码";
    this.count = 0;

    this.prefs = null;
    this.setup();
  }

  async setup() {
    this.prefs = (await packages__sp.SharedPreferences.getInstance());
  }


  dioCodeText() {
    return "prefs.setString(‘mxflutter’, str)";
  }
  dioCodeText2() {
    return "this.prefs.getString('mxflutter')";
  }


  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text("MessageChannel Example"),
      }),
      body: new ListView({
        children: [
          new SectionTitle("Code 调用prefs.setString"),
          new ListTile({
            trailing: new Icon(Icons["directions_run"]),
            title: new Text(this.dioCodeText(), {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
            onTap: async function () {


              this.setState(function () {

                let str = "MXFlutter SharedPreferences: Count : " + this.count++;

                let v = this.prefs.setString("mxflutter", str);
                this.response = " prefs.setString('mxflutter'," + str + ")";

              }.bind(this));

            }.bind(this)
          }),
          new SectionTitle("Code 调用 prefs.getString"),
          new ListTile({
            trailing: new Icon(Icons["directions_run"]),
            title: new Text(this.dioCodeText2(), {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
            onTap: async function () {

              this.setState(function () {
                let v = this.prefs.getString("mxflutter");
                this.response = v;

              }.bind(this));

            }.bind(this)
          }),
          new SectionTitle("prefs Result"),

          new Padding({
            padding: EdgeInsets.all(10),
            child: new Text(this.response, {
              style: new TextStyle({
                color: Colors.gray,
              })
            }),
          })

        ],
      })
    });
    return widget;
  }
}

module.exports = {
  PageExampleSharedPreferences,
};


/***/ }),

/***/ "./lib/app_demo/platform/index.js":
/*!****************************************!*\
  !*** ./lib/app_demo/platform/index.js ***!
  \****************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 129:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  Image,
  Theme,
  Padding,
  Scrollbar,
  Key,
  Navigator,
  MaterialPageRoute,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");


class PlatformExamplesPage extends MXJSStatelessWidget {
  constructor() {
    super("PlatformExamplesPage");
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Platform Examples'),
      }),
      body: new Scrollbar({
        child: new ListView({
          children: [
            new SectionTitle("MessageChannel"),

            new ListTile({
              title: new Text("MessageChannel"),
              subtitle: new Text("iOS/Android"),
              onTap: function () {
                let { PageExampleMessageChannel } = __webpack_require__(/*! ./example_message_channel.js */ "./lib/app_demo/platform/example_message_channel.js");
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleMessageChannel();
                  }
                }))
              }
            }),
            new SectionTitle("网络组件", { key: new Key("1") }),

            new ListTile({
              title: new Text("Dio Examples"),
              subtitle: new Text("iOS/Android"),
              onTap: function () {
                let { PageExampleDio } = __webpack_require__(/*! ./example_dio.js */ "./lib/app_demo/platform/example_dio.js");
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleDio;
                  }
                }))
              }
            }),

            new SectionTitle("存储"),

            new ListTile({
              title: new Text("shared_preferences"),
              subtitle: new Text("iOS/Android"),
              onTap: function () {
                let { PageExampleSharedPreferences } = __webpack_require__(/*! ./example_shared_preferences.js */ "./lib/app_demo/platform/example_shared_preferences.js");
                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new PageExampleSharedPreferences;
                  }
                }))
              }
            }),

          ],
        })
      })
    });
    return widget;
  }
}

module.exports = {
  PlatformExamplesPage,
};


/***/ }),

/***/ "./lib/app_demo/profile/column_profile.js":
/*!************************************************!*\
  !*** ./lib/app_demo/profile/column_profile.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 436:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  BoxDecoration,
  BorderRadius,
  Radius,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  CrossAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  FlutterLogo,
  Wrap,
  Scrollbar,
  Card,
  Theme,
  Navigator,
  MaterialPageRoute,
  MethodChannel,
  ClipRRect,
  BoxFit,
  Duration,
  Key,
  BorderDirectional,
  BorderSide,
  Alignment,
  AspectRatio,
  DecorationImage,
  Rect,
  SingleChildScrollView,
  Stack,
  Padding,
  MediaQuery,
  UniqueKey,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");
const { CachedNetworkImage } = __webpack_require__(/*! @tencent/mxflutter-cached-network-image */ "./node_modules/@tencent/mxflutter-cached-network-image/index.js");

//
const g_max_count = 200;

//data
let g_newsOrder = 0;

//实现一个简单的event_bus
let g_event_bus_map = {}; //type Map<key:String,function:handelFun>

class PerformanceProfilingWidget extends MXJSStatefulWidget {
  constructor({ title, profileText, rebuildCallback } = {}) {
    super('PerformanceProfilingWidget');
    this.title = title ? title : '性能分析';
    this.profileText = profileText;
    this.rebuildCallback = rebuildCallback;
  }

  createState() {
    return new PerformanceProfilingWidgetState(this);
  }
}

PerformanceProfilingWidget.Event_Refresh_ProfileInfo = 'demo_pref_info_refresh';

class PerformanceProfilingWidgetState extends MXJSWidgetState {
  constructor(widget) {
    super();
    this.buildCount = 0;
  }

  //Override
  initState() {
    //注册局部刷新事件
    g_event_bus_map[PerformanceProfilingWidget.Event_Refresh_ProfileInfo] = function (profileText) {
      this.refreshProfileText(profileText);
    }.bind(this);
  }

  //Override
  dispose() {
    delete g_event_bus_map[PerformanceProfilingWidget.Event_Refresh_ProfileInfo];
  }

  build(context) {
    let widget = new Padding({
      padding: EdgeInsets.only({ top: 0.0, bottom: 0.0, left: 10.0, right: 10 }),
      child: new Column({
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          new Row({
            children: [
              new Text(this.widget.title + '(' + ++this.buildCount + ')', {
                style: new TextStyle({
                  fontWeight: FontWeight.bold,
                  fontSize: 16.0,
                  color: Colors.black,
                }),
              }),
              new FlatButton({
                onPressed: function () {
                  if (this.widget.rebuildCallback) {
                    this.widget.rebuildCallback();
                    return;
                  }

                  //性能分析模式
                  //打开性能分析模式，widget.enableProfile = true
                  //可以State类重载onBuildEnd，使用args.profileText获得这次Rebuild的各个阶段耗时
                  //如果onBuildEnd又触发setState 记得一定this.enableProfile = false; 否则会Rebuild死循环
                  this.widget.enableProfile = true;

                  this.setState();
                  MXJSLog.log('数据量少时，点击...');
                }.bind(this),
                child: new Text('点击查看耗时', {
                  style: new TextStyle({
                    fontWeight: FontWeight.bold,
                    fontSize: 14.0,
                    color: Colors.red,
                  }),
                }),
              }),
            ],
          }),
          new Padding({
            padding: EdgeInsets.only({ top: 0.0, bottom: 10.0, left: 0.0, right: 0 }),
            child: new Text(this.profileText == null ? "耗时信息" : this.profileText),
          }),
        ],
      }),
    });
    return new Card({ child: widget, color: new Color(0xffe1f5fe), margin: EdgeInsets.fromLTRB(8.0, 8.0, 10.0, 0.0) });
  }

  onBuildEnd(args) {
    if (!this.widget.enableProfile) {
      return;
    }

    this.refreshProfileText(args.profileText);
  }

  refreshProfileText(profileText) {
    //如果onBuildEnd又触发setState 记得一定this.enableProfile = false; 否则会Rebuild死循环

    if(!profileText){
      return;
    }

    this.widget.enableProfile = false;
    this.setState(
      function () {
        this.profileText = profileText;
      }.bind(this),
    );
  }
}

class ListViewProfileDemo1 extends MXJSStatefulWidget {
  constructor() {
    super('ListViewDemo');
    this.enableProfile = true;
  }

  createState() {
    return new ListViewProfileDemo1State(this);
  }
}

class ListViewProfileDemo1State extends MXJSWidgetState {
  constructor(widget) {
    super();

    this.newsArray = [];
    this.buildCount = 0;
  }

  initState() {
    super.initState();
    this.newsArray = g_newsList;
  }

  build(context) {
    g_newsOrder = 0;
    ++this.buildCount;

    let items = [];

    items.push(new Container({ child: new PerformanceProfilingWidget({ title: '局部刷新小数据量测试' }) }));
    items.push(
      new Container({
        child: new PerformanceProfilingWidget({
          title: '整个页面刷新大数据量测试',
          profileText: this.profileText,
          rebuildCallback: function () {
            //性能分析模式
            //打开性能分析模式，widget.enableProfile = true
            //可以State类重载onBuildEnd，使用getProfileText获得这次Rebuild的各个阶段耗时
            //如果onBuildEnd又触发setState 记得一定this.enableProfile = false; 否则会Rebuild死循环
            this.widget.enableProfile = true;
            this.setState(function () {}.bind(this));
          }.bind(this),
        }),
      }),
    );

    for (let i = 0; i < g_max_count; ++i) {
      let item = new Container({ child: this.hotCard(this.newsArray[i % this.newsArray.length], this.buildCount) });
      items.push(item);
    }

    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('网易新闻 Column Widget '),
      }),
      body: new SingleChildScrollView({
        child: new Column({
          children: items,
        }),
      }),
    });

    return widget;
  }

  //
  onBuildEnd(args) {
    if (!this.widget.enableProfile || !args.profileText) {
      return;
    }

    //如果onBuildEnd又触发setState 记得一定this.enableProfile = false; 否则会Rebuild死循环
    this.widget.enableProfile = false;

    //1. 给性能Cell 发个通知，局部刷新,把ProfileText显示出来
    let handelFun = g_event_bus_map[PerformanceProfilingWidget.Event_Refresh_ProfileInfo];
    if (handelFun) {
      handelFun(args.profileText);
    }
  }

  hotCard(newsModel, buildCount) {
    g_newsOrder++;

    return new Container({
      decoration: new BoxDecoration({
        color: Colors.white,
        border: new BorderDirectional({
          bottom: new BorderSide({
            color: Colors.black12,
            width: 1.0,
          }),
        }),
      }),
      child: new FlatButton({
        onPressed: function () {},
        child: new Container({
          padding: EdgeInsets.only({ top: 8.0, bottom: 8.0 }),
          child: new Row({
            children: [
              new Expanded({
                flex: 1,
                child: new Column({
                  children: [
                    new Container({
                      child: new Text(String(g_newsOrder), {
                        style: new TextStyle({
                          color: Colors.red,
                          fontSize: 18.0,
                        }),
                      }),
                      alignment: Alignment.topLeft,
                    }),
                    newsModel.rise != null
                      ? new Row({
                          children: [
                            new Icon(new IconData(0xe5d8, { fontFamily: 'MaterialIcons' }), {
                              color: Colors.red,
                              size: 10.0,
                            }),
                            new Text(newsModel.rise, {
                              style: new TextStyle({
                                color: Colors.red,
                                fontSize: 10.0,
                              }),
                            }),
                          ],
                        })
                      : new Container(),
                  ],
                }),
              }),
              new Expanded({
                flex: 6,
                child: new Column({
                  children: [
                    new Container({
                      child: new Text('buildCount: ' + buildCount + ' ' + newsModel.title, {
                        style: new TextStyle({
                          fontWeight: FontWeight.bold,
                          fontSize: 16.0,
                          height: 1.1,
                          color: Colors.black,
                        }),
                      }),
                      padding: EdgeInsets.only({ bottom: 10.0, right: 4.0 }),
                      alignment: Alignment.topLeft,
                    }),
                    newsModel.mark != null
                      ? new Container({
                          child: new Text(newsModel.mark, {
                            style: new TextStyle({ color: Colors.black54 }),
                          }),
                          alignment: Alignment.topLeft,
                          padding: EdgeInsets.only({ bottom: 8.0, right: 4.0 }),
                        })
                      : new Container(),
                    new Container({
                      child: new Text(newsModel.hotNum, {
                        style: new TextStyle({ color: Colors.black54 }),
                      }),
                      alignment: Alignment.topLeft,
                    }),
                  ],
                }),
              }),
              new Expanded({
                flex: 3,
                child: new AspectRatio({
                  aspectRatio: 3.0 / 2.0,
                  child: new ClipRRect({
                    borderRadius: BorderRadius.circular(4.0),
                    child: new CachedNetworkImage({
                      fadeInDuration: new Duration({ milliseconds: 10 }),
                      fadeOutDuration: new Duration({ milliseconds: 10 }),
                      imageUrl: newsModel.imgUrl,
                      width: 124.0,
                      height: 69.0,
                      fit: BoxFit.fill,
                    }),
                  }),
                }),
              }),
            ],
          }),
        }),
      }),
    });
  }
}

class NewsModel {
  constructor(order, title, hotNum, imgUrl, { mark, rise } = {}) {
    this.order = order;
    this.title = title;
    this.hotNum = hotNum;
    this.imgUrl = imgUrl;
    this.mark = mark;
    this.rise = rise;
  }

  static fromJSON(jsonMap) {
    let news = new NewsModel();

    news.order = String(jsonMap['order']);
    news.title = jsonMap['title'];
    news.hotNum = String(jsonMap['votecount']) + ' 人点赞';
    news.imgUrl = jsonMap['imgsrc'];
    news.mark = jsonMap['source'];
    news.rise = jsonMap['alias'];

    return news;
  }
}

let g_newsList = [
  new NewsModel('01', '了不起的新时代，世界竞争中的中国制造', '4427 万热度', 'https://pic2.zhimg.com/50/v2-710b7a6fea12a7203945b666790b7181_hd.jpg'),
  new NewsModel('02', '一个女生怎样才算见过世面？', '4157 万热度', 'https://pic3.zhimg.com/50/v2-56dca99cd8718f9303d43b3015342ba7_hd.jpg', {
    rise: '3',
    mark: '所谓世面，就是世界的每一面',
  }),
  new NewsModel('03', '如果朱标没死，削藩的话，朱棣会造反吗？', '4009 万热度', 'https://pic4.zhimg.com/v2-095d2b48970889b108247e6d2dd0fa6b_b.jpg'),
  new NewsModel('04', '如何编译 Linux 内核？', '3110 万热度', 'https://pic3.zhimg.com/80/v2-1ea1b0cf80c85b88893b2b97a94d7e71_hd.jpg', { mark: '内核？呵呵' }),
  new NewsModel('05', '如何看待将神话故事拍成电影这件事？', '2119 万热度', 'https://pic4.zhimg.com/50/v2-267b1dda62f770bd2bd13cb545117b78_hd.jpg', {
    rise: '3',
  }),
];

module.exports = {
  ListViewProfileDemo1,
};


/***/ }),

/***/ "./lib/app_demo/profile/column_submxwidget_profile.js":
/*!************************************************************!*\
  !*** ./lib/app_demo/profile/column_submxwidget_profile.js ***!
  \************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 333:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
    MXJSLog,
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MXJSStatelessWidget,
    MaterialApp,
    Scaffold,
    Container,
    BoxDecoration,
    BorderRadius,
    Radius,
    ListTile,
    Center,
    Color,
    AppBar,
    SnackBar,
    Text,
    Icon,
    IconData,
    EdgeInsets,
    Colors,
    IconButton,
    FlatButton,
    RaisedButton,
    FloatingActionButton,
    Column,
    Row,
    DropdownButton,
    DropdownMenuItem,
    MainAxisAlignment,
    CrossAxisAlignment,
    TextStyle,
    PopupMenuButton,
    PopupMenuItem,
    ButtonBar,
    MainAxisSize,
    TextDecoration,
    RichText,
    TextSpan,
    Expanded,
    FontWeight,
    TextFormField,
    InputDecoration,
    UnderlineInputBorder,
    TextInputType,
    SizedBox,
    TextField,
    TextEditingController,
    ListView,
    Slider,
    Icons,
    FlutterLogo,
    Wrap,
    Scrollbar,
    Card,
    Theme,
    Navigator,
    MaterialPageRoute,
    MethodChannel,
    ClipRRect,
    BoxFit,
    Duration,
    Key,
    BorderDirectional,
    BorderSide,
    Alignment,
    AspectRatio,
    DecorationImage,
    Rect,
    SingleChildScrollView
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");



const { CachedNetworkImage } = __webpack_require__(/*! @tencent/mxflutter-cached-network-image */ "./node_modules/@tencent/mxflutter-cached-network-image/index.js");
const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");



//
const g_max_count = 100;

//data
let g_newsOrder = 0;
//
class ListViewProfileDemo1 extends MXJSStatefulWidget {
    constructor() {
        super('ListViewDemo');
    }

    createState() {
        return new ListViewProfileDemo1State(this);
    }

}

class ListViewProfileDemo1State extends MXJSWidgetState {
    constructor() {
        super();

        this.newsArray = [];
        this.buildCount = 1;
    }

    initState() {
        super.initState();
        this.newsArray = g_newsList;
    }



    build(context) {

        g_newsOrder = 0;
        this.buildCount++;


        let items = [];

        for (let i = 0; i < g_max_count; ++i) {

            let item = new Container({ child: new ListViewItem(this.newsArray[i % this.newsArray.length]) });

            items.push(item);
        }

        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('网易新闻 Column Widget '),
            }),
            body: new SingleChildScrollView({
                child: new Column({
                    children: items
                })
            })
        });

        return widget;
    }
}

class ListViewItem extends MXJSStatelessWidget {
    constructor(oneNewsMap) {
        super('ListViewItem');

        this.newsModel = oneNewsMap;

        this.index = Math.ceil(Math.random() * 10000);


    }


    hotCard(context, newsModel) {

        g_newsOrder++;

        return new Container({
            decoration: new BoxDecoration({
                color: Colors.white,
                border: new BorderDirectional({
                    bottom: new BorderSide({
                        color: Colors.black12,
                        width: 1.0
                    })
                })
            }),
            child: new FlatButton({
                onPressed: function () {


                },
                child: new Container({
                    padding: EdgeInsets.only({ top: 8.0, bottom: 8.0 }),
                    child: new Row({
                        children: [
                            new Expanded({
                                flex: 1,
                                child: new Column({
                                    children: [
                                        new Container({
                                            child: new Text(
                                                String(g_newsOrder), {
                                                style: new TextStyle({
                                                    color: Colors.red,
                                                    fontSize: 18.0
                                                })
                                            }),
                                            alignment: Alignment.topLeft
                                        }),
                                        newsModel.rise != null ?
                                            new Row({
                                                children: [
                                                    new Icon(new IconData(0xe5d8, { fontFamily: 'MaterialIcons' }), {
                                                        color: Colors.red,
                                                        size: 10.0
                                                    }),
                                                    new Text(newsModel.rise, {
                                                        style: new TextStyle({
                                                            color: Colors.red,
                                                            fontSize: 10.0
                                                        })
                                                    })
                                                ]
                                            })
                                            : new Container()
                                    ]
                                })
                            }),
                            new Expanded({
                                flex: 6,
                                child: new Column({
                                    children: [
                                        new Container({
                                            child: new Text(newsModel.title, {
                                                style: new TextStyle({
                                                    fontWeight: FontWeight.bold,
                                                    fontSize: 16.0,
                                                    height: 1.1,
                                                    color: Colors.black
                                                })
                                            }),
                                            padding: EdgeInsets.only({ bottom: 10.0, right: 4.0 }),
                                            alignment: Alignment.topLeft
                                        }),
                                        newsModel.mark != null ?
                                            new Container({
                                                child: new Text(newsModel.mark, {
                                                    style: new TextStyle({ color: Colors.black54 })
                                                }),
                                                alignment: Alignment.topLeft,
                                                padding: EdgeInsets.only({ bottom: 8.0, right: 4.0 })
                                            }) :
                                            new Container(),
                                        new Container({
                                            child: new Text(newsModel.hotNum, {
                                                style: new TextStyle({ color: Colors.black54 })
                                            }),
                                            alignment: Alignment.topLeft
                                        })
                                    ]
                                })
                            }),
                            new Expanded({
                                flex: 3,
                                child: new AspectRatio({
                                    aspectRatio: 3.0 / 2.0,
                                    child: new ClipRRect({
                                        borderRadius: BorderRadius.circular(4.0),
                                        child: new CachedNetworkImage({
                                            fadeInDuration: new Duration({ milliseconds: 10 }),
                                            fadeOutDuration: new Duration({ milliseconds: 10 }),
                                            imageUrl: newsModel.imgUrl,
                                            width: 124.0,
                                            height: 69.0,
                                            fit: BoxFit.fill
                                        })
                                    }),
                                })
                            })

                        ]
                    })
                })
            })
        })
    }


    build(context) {

        try {
            return this.hotCard(context, this.newsModel);
        } catch (e$) {
            // let e = dart.getThrown(e$);
            // MXJSLog.log("card:build(context):  error:" + e);
            return null;

        }
    }
}


class NewsModel {
    constructor(
        order,
        title,
        hotNum,
        imgUrl,
        { mark,
            rise } = {}
    ) {
        this.order = order;
        this.title = title;
        this.hotNum = hotNum;
        this.imgUrl = imgUrl;
        this.mark = mark;
        this.rise = rise;
    }

    static fromJSON(jsonMap) {
        let news = new NewsModel;

        news.order = String(jsonMap["order"]);
        news.title = jsonMap["title"];
        news.hotNum = String(jsonMap["votecount"]) + " 人点赞";
        news.imgUrl = jsonMap["imgsrc"];
        news.mark = jsonMap["source"];
        news.rise = jsonMap["alias"];

        return news;

    }
}

let g_newsList = [
    new NewsModel("01", "了不起的新时代，世界竞争中的中国制造", "4427 万热度", "https://pic2.zhimg.com/50/v2-710b7a6fea12a7203945b666790b7181_hd.jpg"),
    new NewsModel("02", "一个女生怎样才算见过世面？", "4157 万热度", "https://pic3.zhimg.com/50/v2-56dca99cd8718f9303d43b3015342ba7_hd.jpg", { rise: "3", mark: "所谓世面，就是世界的每一面" }),
    new NewsModel("03", "如果朱标没死，削藩的话，朱棣会造反吗？", "4009 万热度", "https://pic4.zhimg.com/v2-095d2b48970889b108247e6d2dd0fa6b_b.jpg"),
    new NewsModel("04", "如何编译 Linux 内核？", "3110 万热度", "https://pic3.zhimg.com/80/v2-1ea1b0cf80c85b88893b2b97a94d7e71_hd.jpg", { mark: "内核？呵呵" }),
    new NewsModel("05", "如何看待将神话故事拍成电影这件事？", "2119 万热度", "https://pic4.zhimg.com/50/v2-267b1dda62f770bd2bd13cb545117b78_hd.jpg", { rise: "3" })
];


module.exports = {
    ListViewProfileDemo1,
};


/***/ }),

/***/ "./lib/app_demo/profile/index.js":
/*!***************************************!*\
  !*** ./lib/app_demo/profile/index.js ***!
  \***************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 144:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  Image,
  Theme,
  Padding,
  Scrollbar,
  Key,
  Navigator,
  MaterialPageRoute,
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");

// let { PageExampleDio } = require("platform/example_dio.js");
// let { PageExampleFetch } = require("platform/example_fetch.js");
// let { PageExampleNetworkAPI } = require("platform/example_network_native_api.js");
// let { PageExampleMessageChannel } = require("platform/example_message_channel.js");
// let { PageExampleSharedPreferences } = require("platform/example_shared_preferences.js");




class ProfileExamplesPage extends MXJSStatelessWidget {
  constructor() {
    super("ProfileExamplesPage");
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Performance Profiling'),
      }),
      body: new Scrollbar({
        child: new ListView({
          children: [
            new SectionTitle("大页面 column模拟"),

            new ListTile({
              title: new Text("Column"),
              subtitle: new Text('200条Feeds同时渲染，模拟大页面刷新'),
              onTap: function () {

                let list_view = __webpack_require__(/*! ./column_profile.js */ "./lib/app_demo/profile/column_profile.js");

                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new list_view.ListViewProfileDemo1;
                  }
                }));
              }
            }),
            new SectionTitle("MXWidget子元素 column模拟"),

            new ListTile({
              title: new Text("Column"),
              subtitle: new Text('100条FeedsMXWidget子元素渲染'),
              onTap: function () {

                let list_view = __webpack_require__(/*! ./column_submxwidget_profile.js */ "./lib/app_demo/profile/column_submxwidget_profile.js");

                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new list_view.ListViewProfileDemo1;
                  }
                }));
              }
            }),
            new SectionTitle("ListView"),

            new ListTile({
              title: new Text("ListView"),
              subtitle: new Text('1000条新闻Feeds按需渲染，测试Listview启动和滑动性能'),
              onTap: function () {

                let list_view = __webpack_require__(/*! ./listview_profile.js */ "./lib/app_demo/profile/listview_profile.js");

                Navigator.push(context, new MaterialPageRoute({
                  builder: function (context) {
                    return new list_view.ListViewProfileDemo1;
                  }
                }));
              }
            }),

            

          ],
        })
      })
    });
    return widget;
  }
}

module.exports = {
  ProfileExamplesPage,
};


/***/ }),

/***/ "./lib/app_demo/profile/listview_profile.js":
/*!**************************************************!*\
  !*** ./lib/app_demo/profile/listview_profile.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 324:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
    MXJSLog,
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MXJSStatelessWidget,
    MaterialApp,
    Scaffold,
    Container,
    BoxDecoration,
    BorderRadius,
    Radius,
    ListTile,
    Center,
    Color,
    AppBar,
    SnackBar,
    Text,
    Icon,
    IconData,
    EdgeInsets,
    Colors,
    IconButton,
    FlatButton,
    RaisedButton,
    FloatingActionButton,
    Column,
    Row,
    DropdownButton,
    DropdownMenuItem,
    MainAxisAlignment,
    CrossAxisAlignment,
    TextStyle,
    PopupMenuButton,
    PopupMenuItem,
    ButtonBar,
    MainAxisSize,
    TextDecoration,
    RichText,
    TextSpan,
    Expanded,
    FontWeight,
    TextFormField,
    InputDecoration,
    UnderlineInputBorder,
    TextInputType,
    SizedBox,
    TextField,
    TextEditingController,
    ListView,
    Slider,
    Icons,
    FlutterLogo,
    Wrap,
    Scrollbar,
    Card,
    Theme,
    Navigator,
    MaterialPageRoute,
    MethodChannel,
    ClipRRect,
    BoxFit,
    Duration,
    Key,
    BorderDirectional,
    BorderSide,
    Alignment,
    AspectRatio,
    DecorationImage,
    Rect
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");



const { CachedNetworkImage } = __webpack_require__(/*! @tencent/mxflutter-cached-network-image */ "./node_modules/@tencent/mxflutter-cached-network-image/index.js");
const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");



//
const g_max_count = 1000;

//data
let g_newsOrder = 0;
//
class ListViewProfileDemo1 extends MXJSStatefulWidget {
    constructor() {
        super('ListViewDemo');
    }

    createState() {
        return new ListViewProfileDemo1State(this);
    }

}

class ListViewProfileDemo1State extends MXJSWidgetState {
    constructor() {
        super();

        this.newsArray = [];
        this.buildCount = 1;
    }

    initState() {
        super.initState();
        this.newsArray = g_newsList;
    }



    build(context) {

        g_newsOrder = 0;
        this.buildCount++;
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('网易新闻 ListViewExample'),
            }),
            body: new Scrollbar({
                child: ListView.builder({
                    itemCount: g_max_count,
                    itemBuilder: function (context, index) {
                        return new ListViewItem(this.newsArray[index % this.newsArray.length]);
                    }.bind(this),
                })
            })
        });

        return widget;
    }
}

class ListViewItem extends MXJSStatelessWidget {
    constructor(oneNewsMap) {
        super('ListViewItem');

        this.newsModel = oneNewsMap;

        this.index = Math.ceil(Math.random() * 10000);


    }


    hotCard(context, newsModel) {

        g_newsOrder++;

        return new Container({
            decoration: new BoxDecoration({
                color: Colors.white,
                border: new BorderDirectional({
                    bottom: new BorderSide({
                        color: Colors.black12,
                        width: 1.0
                    })
                })
            }),
            child: new FlatButton({
                onPressed: function () {


                },
                child: new Container({
                    padding: EdgeInsets.only({ top: 8.0, bottom: 8.0 }),
                    child: new Row({
                        children: [
                            new Expanded({
                                flex: 1,
                                child: new Column({
                                    children: [
                                        new Container({
                                            child: new Text(
                                                String(g_newsOrder), {
                                                style: new TextStyle({
                                                    color: Colors.red,
                                                    fontSize: 18.0
                                                })
                                            }),
                                            alignment: Alignment.topLeft
                                        }),
                                        newsModel.rise != null ?
                                            new Row({
                                                children: [
                                                    new Icon(new IconData(0xe5d8, { fontFamily: 'MaterialIcons' }), {
                                                        color: Colors.red,
                                                        size: 10.0
                                                    }),
                                                    new Text(newsModel.rise, {
                                                        style: new TextStyle({
                                                            color: Colors.red,
                                                            fontSize: 10.0
                                                        })
                                                    })
                                                ]
                                            })
                                            : new Container()
                                    ]
                                })
                            }),
                            new Expanded({
                                flex: 6,
                                child: new Column({
                                    children: [
                                        new Container({
                                            child: new Text(newsModel.title, {
                                                style: new TextStyle({
                                                    fontWeight: FontWeight.bold,
                                                    fontSize: 16.0,
                                                    height: 1.1,
                                                    color: Colors.black
                                                })
                                            }),
                                            padding: EdgeInsets.only({ bottom: 10.0, right: 4.0 }),
                                            alignment: Alignment.topLeft
                                        }),
                                        newsModel.mark != null ?
                                            new Container({
                                                child: new Text(newsModel.mark, {
                                                    style: new TextStyle({ color: Colors.black54 })
                                                }),
                                                alignment: Alignment.topLeft,
                                                padding: EdgeInsets.only({ bottom: 8.0, right: 4.0 })
                                            }) :
                                            new Container(),
                                        new Container({
                                            child: new Text(newsModel.hotNum, {
                                                style: new TextStyle({ color: Colors.black54 })
                                            }),
                                            alignment: Alignment.topLeft
                                        })
                                    ]
                                })
                            }),
                            new Expanded({
                                flex: 3,
                                child: new AspectRatio({
                                    aspectRatio: 3.0 / 2.0,
                                    child: new ClipRRect({
                                        borderRadius: BorderRadius.circular(4.0),
                                        child: new CachedNetworkImage({
                                            fadeInDuration: new Duration({ milliseconds: 10 }),
                                            fadeOutDuration: new Duration({ milliseconds: 10 }),
                                            imageUrl: newsModel.imgUrl,
                                            width: 124.0,
                                            height: 69.0,
                                            fit: BoxFit.fill
                                        })
                                    }),
                                })
                            })

                        ]
                    })
                })
            })
        })
    }


    build(context) {

        try {
            return this.hotCard(context, this.newsModel);
        } catch (e$) {
            // let e = dart.getThrown(e$);
            // MXJSLog.log("card:build(context):  error:" + e);
            return null;

        }
    }
}


class NewsModel {
    constructor(
        order,
        title,
        hotNum,
        imgUrl,
        { mark,
            rise } = {}
    ) {
        this.order = order;
        this.title = title;
        this.hotNum = hotNum;
        this.imgUrl = imgUrl;
        this.mark = mark;
        this.rise = rise;
    }

    static fromJSON(jsonMap) {
        let news = new NewsModel;

        news.order = String(jsonMap["order"]);
        news.title = jsonMap["title"];
        news.hotNum = String(jsonMap["votecount"]) + " 人点赞";
        news.imgUrl = jsonMap["imgsrc"];
        news.mark = jsonMap["source"];
        news.rise = jsonMap["alias"];

        return news;

    }
}

let g_newsList = [
    new NewsModel("01", "了不起的新时代，世界竞争中的中国制造", "4427 万热度", "https://pic2.zhimg.com/50/v2-710b7a6fea12a7203945b666790b7181_hd.jpg"),
    new NewsModel("02", "一个女生怎样才算见过世面？", "4157 万热度", "https://pic3.zhimg.com/50/v2-56dca99cd8718f9303d43b3015342ba7_hd.jpg", { rise: "3", mark: "所谓世面，就是世界的每一面" }),
    new NewsModel("03", "如果朱标没死，削藩的话，朱棣会造反吗？", "4009 万热度", "https://pic4.zhimg.com/v2-095d2b48970889b108247e6d2dd0fa6b_b.jpg"),
    new NewsModel("04", "如何编译 Linux 内核？", "3110 万热度", "https://pic3.zhimg.com/80/v2-1ea1b0cf80c85b88893b2b97a94d7e71_hd.jpg", { mark: "内核？呵呵" }),
    new NewsModel("05", "如何看待将神话故事拍成电影这件事？", "2119 万热度", "https://pic4.zhimg.com/50/v2-267b1dda62f770bd2bd13cb545117b78_hd.jpg", { rise: "3" })
];


module.exports = {
    ListViewProfileDemo1,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/A/Align.js":
/*!*************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/Align.js ***!
  \*************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 203:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    ListTile,
    Color,
    Colors,
    AppBar,
    Text,
    EdgeInsets,
    ListView,
    TabBar,
    TabBarView,
    DefaultTabController,
    Tab,
    Align,
    BoxDecoration,
    Border,
    Alignment,
    Column,
    Slider,
    Expanded,
    Center,
    Row,
    SizedBox,
    MainAxisAlignment,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() {
        return new PageExampleAlign();
    }
}

class PageExampleAlign extends MXJSWidgetState {
    constructor() {
        super();
        this._widthFactor = 12.0;
        this._heightFactor = 12.0;
        this._xOffset = 0.0;
        this._yOffset = 0.0;
    }

    _changeWidthFactor(value) {
        this.setState(function () {
            this._widthFactor = value;
        }.bind(this));
    }

    _changeHeightFactor(value) {
        this.setState(function () {
            this._heightFactor = value;
        }.bind(this));
    }

    _changeXOffset(value) {
        this.setState(function () {
            this._xOffset = value;
        }.bind(this));
    }

    _changeYOffset(value) {
        this.setState(function () {
            this._yOffset = value;
        }.bind(this));
    }

    _oneAlignInBoard({ costumAlign = false, alignment } = {}) {
        return new Container({
            height: costumAlign ? null : 135.0,
            margin: costumAlign ? null : EdgeInsets.symmetric({ horizontal: 120.0, }),
            decoration: new BoxDecoration({
                border: Border.all({ color: new Color(0xFF000000) }),
            }),
            child: new Align({
                alignment: costumAlign ? new Alignment(this._xOffset, this._yOffset) : alignment,
                widthFactor: this._widthFactor,
                heightFactor: this._heightFactor,
                child: new Container({
                    width: 12.0,
                    height: 12.0,
                    color: Colors.blue,
                }),
            }),
        });
    }

    _alignAlignment() {
        return new ListView({
            children: [
                new ListTile({ title: new Text("Alignment: topLeft") }),
                this._oneAlignInBoard({ alignment: Alignment.topLeft }),
                new ListTile({ title: new Text("Alignment: topCenter") }),
                this._oneAlignInBoard({ alignment: Alignment.topCenter }),
                new ListTile({ title: new Text("Alignment: topRight") }),
                this._oneAlignInBoard({ alignment: Alignment.topRight }),
                new ListTile({ title: new Text("Alignment: centerLeft") }),
                this._oneAlignInBoard({ alignment: Alignment.centerLeft }),
                new ListTile({ title: new Text("Alignment: center") }),
                this._oneAlignInBoard({ alignment: Alignment.center }),
                new ListTile({ title: new Text("Alignment: centerRight") }),
                this._oneAlignInBoard({ alignment: Alignment.centerRight }),
                new ListTile({ title: new Text("Alignment: bottomLeft") }),
                this._oneAlignInBoard({ alignment: Alignment.bottomLeft }),
                new ListTile({ title: new Text("Alignment: bottomCenter") }),
                this._oneAlignInBoard({ alignment: Alignment.bottomCenter }),
                new ListTile({ title: new Text("Alignment: bottomRight") }),
                this._oneAlignInBoard({ alignment: Alignment.bottomRight }),
            ],
        });
    }

    _sizedSlider({ width, min, max, value, onChanged }) {
        return new SizedBox({
            width: width,
            child: new Slider({ min: min, max: max, value: value, onChanged: onChanged }),
        });
    }

    _alignFactor() {
        return new Column({
            children: [
                new ListTile({ title: new Text("Align") }),
                new Expanded({
                    child: new Center({
                        child: this._oneAlignInBoard({ costumAlign: true }),
                    })
                }),
                new Row({
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                        new Text('Width Factor'),
                        new Text('Height Factor'),
                    ]
                }),
                new Row({
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                        this._sizedSlider({
                            width: 180.0, min: 4.0, max: 20.0,
                            value: this._widthFactor, onChanged: this._changeWidthFactor.bind(this),
                        }),
                        this._sizedSlider({
                            width: 180.0, min: 4.0, max: 20.0,
                            value: this._heightFactor, onChanged: this._changeHeightFactor.bind(this),
                        }),
                    ]
                }),
                new Row({
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                        new Text('X Offset'),
                        new Text('Y Offset'),
                    ]
                }),
                new Row({
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                        this._sizedSlider({
                            width: 180.0, min: -1.0, max: 1.0,
                            value: this._xOffset, onChanged: this._changeXOffset.bind(this),
                        }),
                        this._sizedSlider({
                            width: 180.0, min: -1.0, max: 1.0,
                            value: this._yOffset, onChanged: this._changeYOffset.bind(this),
                        }),
                    ]
                })
            ],
        });
    }

    build(context) {
        return new DefaultTabController({
            length: 2,
            child: new Scaffold({
                appBar: new AppBar({
                    title: new Text('PageExampleAlign'),
                    bottom: new TabBar({
                        tabs: [
                            new Tab({ text: '9 Alignments' }),
                            new Tab({ text: 'Custom Factor & offset' }),
                        ]
                    }),
                }),
                body: new TabBarView({
                    children: [
                        this._alignAlignment(),
                        this._alignFactor(),
                    ],
                }),
            }),
        });
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AnimatedBuilder.js":
/*!***********************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AnimatedBuilder.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 136:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  Animation,
  AnimatedBuilder,
  AnimationController,
  Duration,
  Interval,
  CurveTween,
  Curves,
  Tween,
  Image,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");


class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super('ExampleWidget');
  }

  createState() {
    return new PageExampleAnimatedBuilderV2State();
  }
}

class PageExampleAnimatedBuilderV2State extends MXJSWidgetState {

  constructor(){
    super();

    this.count = 0;
    this._controller = new AnimationController({
      duration: new Duration({seconds: 1}),
      // upperBound: 100,
      // vsync: this,
    });

    this._controller.forward();
  }

  beginAnimation(){
    this._controller.repeat();
  }

  build(context){
    const widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedBuilderV2',),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed:function () {
          this.beginAnimation();
        }.bind(this)
      }),
      body: new AnimatedBuilder({
        animation: this._controller,
        widget: new Center({
          child: new Container({
            height:"100+$value*100",   //动态计算$value
            width:"200+$value*200",    //动态计算$value
            color: Colors.orange,
            child: new Center({
              child: new Text("点击 ( + ) 号，重复播放",{
                style:new TextStyle({
                  color:Colors.white
                })
              }),
            }),
          })
        }),
        // builder 由于异步频繁调用JS，会导致JS线程性能问题，没有实现，async在builder中调用也存在技术问题
        // builder: function(context,child){
        //   console.log("call builder in js....aaaa");
        //   MXJSLog.log("call builder in js....bbbb");
        //   return child;
        // },
      })
    });
    return widget;
  }
}

module.exports = {
  ExampleWidget,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AnimatedContainer.js":
/*!*************************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AnimatedContainer.js ***!
  \*************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 116:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedContainer,
  Duration,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");


class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super('ExampleWidget');
  }

  createState() {
    return new PageExampleAnimatedContainerState();
  }
}

class PageExampleAnimatedContainerState extends MXJSWidgetState {

  constructor(){
    super();
    this.selected = false;
  }

  build(context){
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedContainer',),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {

          this.setState(function() {
            this.selected = !this.selected;
          }.bind(this))
        }.bind(this)
      }),
      body: new ListView({
        children:[
          new SectionTitle("PageExampleAnimatedContainer"),
          new AnimatedContainer({
            height:this.selected ? 300.0 : 100,
            color:this.selected ? Colors.blue:Colors.orange,
            duration:new Duration({milliseconds:200}),
            child:new Center({
              child:new Text("动画容器",{
                style:new TextStyle({
                  color:Colors.white,
                  fontSize:20,
                })
              }),
            })
          }),
        ],
      })
    });
    return widget;
  }
}

module.exports = {
  ExampleWidget,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AnimatedCrossFade.js":
/*!*************************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AnimatedCrossFade.js ***!
  \*************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 127:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
  AnimatedCrossFade,
  CrossFadeState,
  Duration,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super('ExampleWidget');
  }

  createState() {
    return new PageExampleAnimatedCrossFadeState();
  }
}

class PageExampleAnimatedCrossFadeState extends MXJSWidgetState {

  constructor() {
    super();
    this.selected = true;
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('PageExampleAnimatedCrossFade'),
      }),
      floatingActionButton: new FloatingActionButton({
        child: new Icon(Icons.add),
        onPressed: function () {
          this.setState(function () {
            this.selected = !this.selected;
          }.bind(this))
        }.bind(this)
      }),
      body: new AnimatedCrossFade({
        crossFadeState: this.selected ? CrossFadeState.showFirst : CrossFadeState.showSecond,
        duration: new Duration({ milliseconds: 200 }),
        firstChild: new Container({
          width: 500,
          height: 300,
          color: Colors.orange,
          child: new Center({
            child: new Text("第一页", {
              style: new TextStyle({
                color: Colors.white,
                fontSize: 20,
              })
            })
          }),
        }),
        secondChild: new Container({
          width: 500,
          height: 300,
          color: Colors.blue,
          child: new Center({
            child: new Text("第二页", {
              style: new TextStyle({
                color: Colors.white,
                fontSize: 20,
              })
            })
          }),
        }),
      }),
    });
    return widget;
  }
}

module.exports = {
  ExampleWidget,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AnimatedDefaultTextStyle.js":
/*!********************************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AnimatedDefaultTextStyle.js ***!
  \********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 80:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    AppBar,
    Text,
    Icon,
    IconData,
    FloatingActionButton,
    Colors,
    TextStyle,
    Alignment,
    AnimatedDefaultTextStyle,
    Column,
    Duration,
    FontWeight,
    Expanded,
    Icons,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 动画-字体动画
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() {
        return new PageAnimatedDefaultTextStyleState();
    }
}

class PageAnimatedDefaultTextStyleState extends MXJSWidgetState {
    constructor() {
        super();
        this.textSize = 10;
        this.color = Colors.orange;
    }

    build() {
        let widgets = new Scaffold({
            appBar: new AppBar({
                title: new Text('AnimatedDefaultTextStyle'),
            }),
            body: new Column({
                children: [
                    new Expanded({
                        child: new Container({
                            alignment: Alignment.center,
                            child: new AnimatedDefaultTextStyle({
                                child: new Text('AnimatedDefaultTextStyle'),
                                style: new TextStyle({
                                    color: this.color,
                                    fontSize: this.textSize,
                                    fontWeight: FontWeight.bold,
                                }),
                                duration: new Duration({
                                    seconds: 1,
                                }),
                            }),
                        }),
                    }),

                ],
            }),
            floatingActionButton: new FloatingActionButton({
                child: new Icon(Icons.add),
                onPressed: function () {
                    this.setState(function () {
                        this.textSize = (this.textSize == 10) ? 30 : 10;
                        this.color = (this.color == Colors.orange) ? Colors.black : Colors.orange;
                    }.bind(this));
                }.bind(this)
            })
        });
        return widgets;
    }
}

module.exports = {
    ExampleWidget
};

/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AnimatedOpacity.js":
/*!***********************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AnimatedOpacity.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 118:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    AppBar,
    Text,
    AnimatedOpacity,
    Curves,
    Duration,
    Colors,
    Center,
    Row,
    Column,
    MainAxisAlignment,
    CupertinoSwitch,
    EdgeInsets,
    FlatButton,
    Expanded,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() {
        return new PageExampleAnimatedOpacity();
    }
}
class PageExampleAnimatedOpacity extends MXJSWidgetState {
    constructor() {
        super();
        this.settingTable = {
            "isQuick": true,
            "isLinear": true,
            "isRepeat": false,
        };
        this._selected = false;
        this._repeatAnimationRunning = false;
    }

    _singleOption(selectedText, unselectedText, varName) {
        return new Container({
            padding: EdgeInsets.all(12.0),
            child: new Row({
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                    new Text(this.settingTable[varName] ? selectedText : unselectedText),
                    new CupertinoSwitch({
                        value: this.settingTable[varName],
                        activeColor: Colors.orange,
                        onChanged: function (value) {
                            this.setState(function () {
                                this.settingTable[varName] = value;
                            }.bind(this))
                        }.bind(this),
                    }),
                ],
            }),
        });
    }

    _changeSelected() {
        this.setState(function () {
            this._selected = !this._selected;
        }.bind(this));
    }

    _playOrEnd() {
        if (this.settingTable["isRepeat"] == true) {
            this._repeatAnimationRunning = !this._repeatAnimationRunning;
            if (this._repeatAnimationRunning == false) {
                this.settingTable["isRepeat"] = false;
            }
        }
        this.setState(function () {
            this._selected = !this._selected;
        }.bind(this));
    }

    build(context) {
        return new Scaffold({
            appBar: new AppBar({ title: new Text("AnimatedOpacity"), }),
            body: new Column({
                children: [
                    new AnimatedOpacity({
                        opacity: this._selected ? 0.2 : 1.0,
                        curve: this.settingTable["isLinear"] ? Curves.linear : Curves.easeInOutCirc,
                        duration: new Duration({ milliseconds: this.settingTable["isQuick"] ? 300 : 1000 }),
                        onEnd: this.settingTable["isRepeat"] ? this._changeSelected.bind(this) : null,
                        child: new Container({
                            color: Colors.orange,
                            height: 300,
                            child: new Center({ child: new Text("动画容器") }),
                        }),
                    }),
                    this._singleOption("动画速度：快", "动画速度：慢", "isQuick"),
                    this._singleOption("线性动画：是", "线性动画：否", "isLinear"),
                    this._singleOption("循环播放：是", "循环播放：否", "isRepeat"),
                    new Expanded({ child: new Container() }),
                    new Center({
                        child: new FlatButton({
                            child: new Text(
                                this.settingTable["isRepeat"] ? this._repeatAnimationRunning
                                ? "停止循环" : "循环播放" : "播放一次"),
                            onPressed: this._playOrEnd.bind(this),
                        })
                    }),
                    new Expanded({ child: new Container() }),
                ],
            }),
        });
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AnimatedPhysicalModel.js":
/*!*****************************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AnimatedPhysicalModel.js ***!
  \*****************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 93:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    AppBar,
    Text,
    AnimatedPhysicalModel,
    Duration,
    Colors,
    Center,
    Row,
    Column,
    MainAxisAlignment,
    CupertinoSwitch,
    EdgeInsets,
    BorderRadius,
    BoxShape,
    SizedBox,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() {
        return new PageExampleAnimatedPhysicalModel();
    }
}

class PageExampleAnimatedPhysicalModel extends MXJSWidgetState {
    constructor() {
        super();
        this.settingTable = {
            "hasBorderRadius": false,
            "ColorPink": false,
            "Elevation": false,
            "ShadowColor": false,
        };
    }

    _singleOption(selectedText, unselectedText, varName) {
        return new Container({
            padding: EdgeInsets.all(12.0),
            child: new Row({
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                    new Text(this.settingTable[varName] ? selectedText : unselectedText),
                    new CupertinoSwitch({
                        value: this.settingTable[varName],
                        activeColor: Colors.orange,
                        onChanged: function (value) {
                            this.setState(function () {
                                this.settingTable[varName] = value;
                            }.bind(this))
                        }.bind(this),
                    }),
                ],
            }),
        });
    }

    build(context) {
        return new Scaffold({
            appBar: new AppBar({ title: new Text("AnimatedPhysicalModel"), }),
            body: new Column({
                children: [
                    new SizedBox({ height: 20.0 }),
                    new Center({
                        child: new AnimatedPhysicalModel({
                            borderRadius: this.settingTable["hasBorderRadius"] ? new BorderRadius.circular(20.0) : null,
                            shape: BoxShape.rectangle,
                            color: this.settingTable["ColorPink"] ? Colors.pink/*[300]*/ : Colors.cyan/*[300]*/,
                            elevation: this.settingTable["Elevation"] ? 18 : 8,
                            shadowColor: this.settingTable["ShadowColor"] ?  Colors.yellow : Colors.black,
                            child: new Container({ height: 120, width: 120 }),
                            duration: new Duration({ milliseconds: 500 }),
                        }),
                    }),
                    new SizedBox({ height: 20.0 }),
                    this._singleOption("矩形圆角：有", "矩形圆角：无", "hasBorderRadius"),
                    this._singleOption("矩形颜色：粉色", "矩形颜色：蓝色", "ColorPink"),
                    this._singleOption("矩形高度：高", "矩形高度：低", "Elevation"),
                    this._singleOption("阴影颜色：黄色", "阴影颜色：黑色", "ShadowColor"),
                ],
            }),
        });
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AnimatedPositioned.js":
/*!**************************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AnimatedPositioned.js ***!
  \**************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 126:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    ListTile,
    AppBar,
    Text,
    Colors,
    RaisedButton,
    Column,
    Stack,
    AnimatedPositioned,
    Duration,
    CupertinoSwitch,
    Alignment,
    Curves,
    Expanded,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() {
        return new PageExampleAnimatedPositionedState();
    }
}

/// 让子组件进行定位动画，可指定时长和曲线，只能用于Stack中
class PageExampleAnimatedPositionedState extends MXJSWidgetState {
    constructor() {
        super();
        this._selected = false;
        this._left = 100;
        this._top = 100;
        this._onShow = false;
        this._curve = false;
    }

    _changeSwitch() {
        this.setState(function () {
            this._selected = !this._selected;
        }.bind(this));
    };

    _changeButton() {
        this.setState(function () {
            this._left = (this._left == 100) ? this._left + 200 : 100;
            this._top = (this._top == 100) ? this._top + 200 : 100;
        }.bind(this));
    };

    _changeCurve() {
        this.setState(function () {
            this._curve = !this._curve;
        }.bind(this));
    }

    build() {
        let widgets = new Scaffold({
            appBar: new AppBar({
                title: new Text('AnimatedPositioned'),
            }),
            body: new Column({
                children: [
                    new SectionTitle('AnimatedPositioned事例'),
                    new Expanded({
                        child: new Container({
                            height: 500,
                            alignment: Alignment.center,
                            child: new Stack({
                                children: [
                                    new AnimatedPositioned({
                                        top: this._top,
                                        left: this._left,
                                        child: new Container({
                                            color: Colors.green,
                                            width: 50,
                                            height: 50,
                                        }),
                                        curve: this._curve ? Curves.elasticIn : null,
                                        duration: new Duration({ seconds: 1 }),
                                        onEnd: this._selected ? this._changeButton.bind(this) : null,
                                    }),
                                ],
                            }),
                        }),
                    }),


                    new ListTile({
                        title: new Text('循环播放'),
                        trailing: new CupertinoSwitch({
                            value: this._selected,
                            onChanged: this._changeSwitch.bind(this),
                        }),
                    }),

                    new ListTile({
                        title: new Text('开启动画'),
                        trailing: new CupertinoSwitch({
                            value: this._curve,
                            onChanged: this._changeCurve.bind(this),
                        }),
                    }),

                    new RaisedButton({
                        child: new Text('播放'),
                        onPressed: this._changeButton.bind(this),
                    })
                ]
            }),

        });

        return widgets;
    }
}

module.exports = {
    ExampleWidget
};

/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AnimatedSize.js":
/*!********************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AnimatedSize.js ***!
  \********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 96:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    ListTile,
    AppBar,
    Text,
    Colors,
    RaisedButton,
    Column,
    AnimatedSize,
    Duration,
    CupertinoSwitch,
    Alignment,
    Curves,
    Expanded,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleAnimatedSizeState(); }
}

/// 子组件大小发生变化时进行动画渐变，可指定时长、对齐方式、曲线、vsync等属性
class PageExampleAnimatedSizeState extends MXJSWidgetState {
    constructor() {
        super();
        this._left = 100;
        this._top = 100;
        this._curve = false;
    }

    _changeCurve() {
        this.setState(function () {
            this._curve = !this._curve;
        }.bind(this));
    }

    _changeButton() {
        this.setState(function () {
            this._left = (this._left == 100) ? this._left + 200 : 100;
            this._top = (this._top == 100) ? this._top + 200 : 100;
        }.bind(this));
    };

    build() {
        let widgets = new Scaffold({
            appBar: new AppBar({
                title: new Text('AnimatedSize'),
            }),
            body: new Column({
                children: [
                    new SectionTitle('AnimatedSize事例'),
                    new Expanded({
                        child: new Container({
                            alignment: Alignment.center,
                            child: new AnimatedSize({
                                curve: this._curve ? Curves.bounceOut : null,
                                duration: new Duration({ seconds: 1 }),
                                child: new Container({
                                    height: this._top,
                                    width: this._left,
                                    alignment: Alignment.center,
                                    color: Colors.blue,
                                    child: new Text('AnimatedSize'),
                                })
                            }),
                        }),
                    }),


                    new ListTile({
                        title: new Text('开启动画'),
                        trailing: new CupertinoSwitch({
                            value: this._curve,
                            onChanged: this._changeCurve.bind(this),
                        }),
                    }),

                    new RaisedButton({
                        child: new Text('播放'),
                        onPressed: this._changeButton.bind(this),
                    })
                ]
            }),
        });

        return widgets;
    }
}

module.exports = {
    ExampleWidget,
};

/***/ }),

/***/ "./lib/app_demo/widget_examples/A/Appbar.js":
/*!**************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/Appbar.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 114:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    ListTile,
    AppBar,
    Text,
    Icon,
    Colors,
    IconButton,
    TextStyle,
    ListView,
    Icons,
    Size,
    PreferredSize,
    Container,
    Center,
    RoundedRectangleBorder,
    BorderRadius,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleAppBar(); }
}

class PageExampleAppBar extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('带有底部栏的AppBar',),
                bottom: new PreferredSize({
                    preferredSize: new Size(0.0, 24.0),
                    child: new Container({
                        color: Colors.orange/*[300]*/,
                        child: new Center({ child: new Text("底部栏") }),
                    }),
                }),
            }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text('最简单的AppBar') }),
                    new AppBar({ title: new Text('NormalAppBar') }),

                    new ListTile({ title: new Text('标题换色') }),
                    new AppBar({
                        title: new Text('NormalAppBar', {
                            style: new TextStyle({ color: Colors.white }),
                        }),
                    }),

                    new ListTile({ title: new Text('背景换色') }),
                    new AppBar({
                        backgroundColor: Colors.blue,
                        title: new Text('NormalAppBar', {
                            style: new TextStyle({ color: Colors.white }),
                        }),
                    }),

                    new ListTile({ title: new Text('设置leading') }),
                    new AppBar({
                        leading: new IconButton({ icon: new Icon(Icons.add) }),
                        title: new Text('AppBar'),
                    }),

                    new ListTile({ title: new Text('隐藏leading') }),
                    new AppBar({
                        automaticallyImplyLeading: false,
                        title: new Text('AppBar'),
                    }),

                    new ListTile({ title: new Text('设置action') }),
                    new AppBar({
                        actions: [new IconButton({ icon: new Icon(Icons.camera) })],
                        title: new Text('AppBar'),
                    }),

                    new ListTile({ title: new Text('设置多个action') }),
                    new AppBar({
                        actions: [
                            new IconButton({ icon: new Icon(Icons.camera) }),
                            new IconButton({ icon: new Icon(Icons.print) }),
                        ],
                        title: new Text('AppBar'),
                    }),

                    new ListTile({ title: new Text('更改AppBar内容的透明度') }),
                    new AppBar({
                        title: new Text('AppBar'),
                        toolbarOpacity: 0.5,
                    }),

                    new ListTile({ title: new Text('个性化AppBar形状') }),
                    new AppBar({
                        title: new Text('AppBar'),
                        shape: new RoundedRectangleBorder({ borderRadius: BorderRadius.circular(20.0) }),
                    })
                ],
            })
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/A/AspectRatio.js":
/*!*******************************************************!*\
  !*** ./lib/app_demo/widget_examples/A/AspectRatio.js ***!
  \*******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 110:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    ListTile,
    AppBar,
    Text,
    Colors,
    RaisedButton,
    Column,
    AnimatedSize,
    Duration,
    CupertinoSwitch,
    Alignment,
    Curves,
    AspectRatio,
    Row,
    Expanded,
    Slider,
    Padding,
    EdgeInsets,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() {
        return new PageExampleAspectRatioState();
    }
}

/// 比例盒 容纳一个子组件 通过指定宽高比限定子组件的大小
class PageExampleAspectRatioState extends MXJSWidgetState {
    constructor() {
        super();
        this._ratio = 1 / 2;
    }

    _changeRatio(value) {
        this.setState(function () {
            this._ratio = value;
        }.bind(this));
    }

    build() {
        let widgets = new Scaffold({
            appBar: new AppBar({
                title: new Text('AspectRatio'),
            }),
            body: new Column({
                children: [
                    new SectionTitle('比例盒组件'),
                    new Padding({
                        padding: EdgeInsets.all(10),
                    }),
                    new Container({
                        height: 100,
                        width: 300,
                        color: Colors.blueGrey50,
                        alignment: Alignment.center,
                        child: new Row({
                            children: [
                                new Container({
                                    alignment: Alignment.center,
                                    color: Colors.blue,
                                    width: 50,
                                    height: 50,
                                    child: new Text('static'),
                                }),
                                new AspectRatio({
                                    aspectRatio: this._ratio,
                                    child: new Container({
                                        alignment: Alignment.center,
                                        color: Colors.green,
                                    }),
                                }),
                                new Container({
                                    alignment: Alignment.center,
                                    color: Colors.blue,
                                    width: 50,
                                    height: 50,
                                    child: new Text('static'),
                                }),
                            ]
                        }),
                    }),
                    new Padding({
                        padding: EdgeInsets.all(10),
                    }),
                    new Slider({
                        value: this._ratio,
                        onChanged: this._changeRatio.bind(this),
                        min: 0.1,
                        max: 2,
                    }),
                ]
            }),

        });

        return widgets;
    }
}

module.exports = {
    ExampleWidget,
};

/***/ }),

/***/ "./lib/app_demo/widget_examples/B/Baseline.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/widget_examples/B/Baseline.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 80:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Column,
    Row,
    Baseline,
    TextBaseline,
    TextStyle,
    Center,
    Container,
    Colors,
    MainAxisAlignment,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleBaseLine(); }
}

class PageExampleBaseLine extends MXJSWidgetState {
    constructor() {
        super();
    }

    _text(text, size) {
        return new Center({
            child: new Text(text, {
                style: new TextStyle({ fontSize: size })
            })
        });
    }

    _baselineWithText(text, size) {
        return new Baseline({
            baseline: 50.0,
            baselineType: TextBaseline.alphabetic,
            child: this._text(text, size),
        });
    }

    _divider() { return new Container({ height: 1.0, color: Colors.grey }); }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('Baseline') }),
            body: new Column({
                children: [
                    this._baselineWithText('AaBbCcDdEeFfGgHhIiJjKkLlMmNn', 20.0),
                    this._divider(),
                    this._baselineWithText('OoPpQqRrSsTtUuVvWwXxYyZz', 24.0),
                    this._divider(),
                    this._baselineWithText('1234567890!@#$%^&*()', 28.0),
                    this._divider(),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            this._baselineWithText('15,0', 15.0),
                            this._baselineWithText('20,0', 20.0),
                            this._baselineWithText('25,0', 25.0),
                            this._baselineWithText('30,0', 30.0),
                            this._baselineWithText('35,0', 35.0),
                        ]
                    }),
                    this._divider(),
                ]
            })
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/B/BottomNavigationBar.js":
/*!***************************************************************!*\
  !*** ./lib/app_demo/widget_examples/B/BottomNavigationBar.js ***!
  \***************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 117:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    ListTile,
    AppBar,
    Text,
    Colors,
    Column,
    CupertinoSwitch,
    Padding,
    EdgeInsets,
    BottomNavigationBar,
    Icon,
    Icons,
    BottomNavigationBarItem,
    BottomNavigationBarType,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() {
        return new PageExampleBottomNavigationBarState();
    }
}

class PageExampleBottomNavigationBarState extends MXJSWidgetState {
    constructor() {
        super();
        this._position = 1;
        this._type = false;
        this._colors = [
            Colors.red,
            Colors.green,
            Colors.blue,
        ]
    }



    _changeBottomBar(value) {
        this.setState(function () {
            this._position = value;
        }.bind(this));
    }

    _changeType() {
        this.setState(function () {
            this._type = !this._type;
        }.bind(this));
    }

    build() {
        let widgets = new Scaffold({
            appBar: new AppBar({
                title: new Text('BottomNavigationBar'),
            }),
            body: new Column({
                children: [
                    new SectionTitle('底部导航栏组件'),
                    new ListTile({
                        title: new Text('更改显示类别'),
                        trailing: new CupertinoSwitch({
                            value: this._type,
                            onChanged: this._changeType.bind(this),
                        }),
                    }),
                    new Padding({
                        padding: EdgeInsets.all(10),
                    }),
                    new BottomNavigationBar({
                        backgroundColor: Colors.grey,
                        onTap: this._changeBottomBar.bind(this),
                        currentIndex: this._position,
                        fixedColor: this._type ? Colors.white : Colors.pink,
                        iconSize: 25,
                        showUnselectedLabels: false,
                        showSelectedLabels: true,
                        type: (this._type)
                            ? BottomNavigationBarType.shifting
                            : BottomNavigationBarType.fixed,
                        items: [
                            new BottomNavigationBarItem({
                                icon: new Icon(Icons.home),
                                title: new Text('Home'),
                                backgroundColor: this._colors[this._position],
                            }),
                            new BottomNavigationBarItem({
                                icon: new Icon(Icons.business),
                                title: new Text('Business'),
                                backgroundColor: this._colors[this._position],
                            }),
                            new BottomNavigationBarItem({
                                icon: new Icon(Icons.school),
                                title: new Text('School'),
                                backgroundColor: this._colors[this._position],
                            }),
                        ]
                    }),
                    new Padding({
                        padding: EdgeInsets.all(10),
                    }),
                ]
            }),

        });

        return widgets;
    }
}

module.exports = {
    ExampleWidget,
};

/***/ }),

/***/ "./lib/app_demo/widget_examples/B/ButtonBar.js":
/*!*****************************************************!*\
  !*** ./lib/app_demo/widget_examples/B/ButtonBar.js ***!
  \*****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 131:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    ButtonBar,
    MainAxisAlignment,
    MainAxisSize,
    RaisedButton,
    EdgeInsets,
    VerticalDirection,
    ButtonTextTheme,
    ButtonBarLayoutBehavior,
    TextStyle,
    Colors,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleButtonBar(); }
}

class PageExampleButtonBar extends MXJSWidgetState {
    constructor() {
        super();
    }

    _buttonList() {
        return [
            new RaisedButton({
                child: new Text("Button1"),
                onPressed: function() {},
            }),
            new RaisedButton({
                child: new Text("Button2"),
                onPressed: function() {},
            }),
            new RaisedButton({
                child: new Text("Button3"),
                onPressed: function() {},
            }),
        ]
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('ButtonBar') }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text('ButtonBar.alignment') }),
                    new ButtonBar({
                        alignment: MainAxisAlignment.spaceAround,
                        children: this._buttonList(),
                    }),

                    // 这个不知道怎么演示= =
                    // new ListTile({ title: new Text('ButtonBar.mainAxisSize') }),
                    // new ButtonBar({
                    //     mainAxisSize: MainAxisSize.min,
                    //     children: this._buttonList()
                    // }),

                    new ListTile({ title: new Text('ButtonBar.bottonHeight') }),
                    new ButtonBar({
                        alignment: MainAxisAlignment.center,
                        buttonHeight: 20.0,
                        children: this._buttonList(),
                    }),

                    new ListTile({ title: new Text('ButtonBar.bottonMinWidth') }),
                    new ButtonBar({
                        alignment: MainAxisAlignment.center,
                        buttonMinWidth: 100.0,
                        children: this._buttonList(),
                    }),

                    new ListTile({ title: new Text('ButtonBar.buttonPadding') }),
                    new ButtonBar({
                        alignment: MainAxisAlignment.center,
                        buttonPadding: EdgeInsets.symmetric({ horizontal: 2.0 }),
                        children: this._buttonList(),
                    }),

                    // 这个也不知道怎么演示=。=
                    // new ListTile({ title: new Text('ButtonBar.layoutBehavior') }),
                    // new ButtonBar({
                    //     alignment: MainAxisAlignment.center,
                    //     layoutBehavior: ButtonBarLayoutBehavior.constrained,
                    //     children: this._buttonList(),
                    // }),

                    new ListTile({ title: new Text('ButtonBar.buttonTextTheme') }),
                    new ButtonBar({
                        alignment: MainAxisAlignment.center,
                        buttonTextTheme: ButtonTextTheme.accent,
                        children: this._buttonList(),
                    }),

                    new ListTile({ title: new Text('ButtonBar.overflowButtonSpacing') }),
                    new ButtonBar({
                        alignment: MainAxisAlignment.center,
                        buttonHeight: 20.0,
                        buttonMinWidth: 180.0,
                        overflowButtonSpacing: 20.0,
                        children: this._buttonList(),
                    }),

                    new ListTile({ title: new Text('ButtonBar.overflowButtonDirection') }),
                    new ButtonBar({
                        alignment: MainAxisAlignment.center,
                        buttonHeight: 20.0,
                        buttonMinWidth: 180.0,
                        overflowDirection: VerticalDirection.up,
                        children: this._buttonList(),
                    }),
                ]
            })
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/Card.js":
/*!************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/Card.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 116:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    Card,
    Column,
    Icon,
    Icons,
    ButtonBar,
    FlatButton,
    MainAxisSize,
    EdgeInsets,
    InkWell,
    Container,
    Center,
    Image,
    Colors,
    RoundedRectangleBorder,
    BorderRadius,
    Clip,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCard(); }
}

class PageExampleCard extends MXJSWidgetState {
    constructor() {
        super();
    }

    _cardContent(title, description, showButtonBar = true) {
        return new Column({
            mainAxisSize: MainAxisSize.min,
            children: [
                new ListTile({
                    leading: new Icon(Icons.album),
                    title: new Text(title),
                    subtitle: new Text(description),
                }),
                showButtonBar ? new ButtonBar({
                    children: [
                        new FlatButton({
                            child: new Text('分享'),
                            onPressed: function() {},
                        }),
                        new FlatButton({ 
                            child: new Text('关闭'),
                            onPressed: function() {},
                        }),
                    ],
                }) : new Container(),
            ],
        });
    }

    _cardTappable() {
        return new Card({
            child: new InkWell({
                onTap: function() {},
                child: new Container({
                    height: 120.0,
                    widget: 350.0,
                    child: new Center({ child: new Text('可点击的卡片') }),
                }),
            }),
        });
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('Card') }),
            body: new ListView({
                padding: EdgeInsets.all(12.5),
                children: [
                    new ListTile({ title: new Text('使用ListTile制作的、带有按钮的卡片') }),
                    new Card({ child: this._cardContent('卡片', '这里是描述') }),
                    new ListTile({ title: new Text('使用InkWell制作的、可点击的卡片') }),
                    this._cardTappable(),
                    new ListTile({ title: new Text('带有颜色、不同高度、不同阴影的卡片') }),
                    new Card({
                        child: this._cardContent('彩色卡片和彩色阴影', 'evevation设为12.0 阴影面积变大了'),
                        color: Colors.blue/*[100]*/,
                        shadowColor: Colors.purple/*[800]*/,
                        elevation: 15.0,
                    }),
                    new ListTile({ title: new Text('改变margin') }),
                    new Card({
                        margin: EdgeInsets.all(40.0),
                        child: this._cardContent('margin:40.0', '让卡片和其他元素保持距离', false),
                    }),
                    new ListTile({ title: new Text('个性化Card形状并剪切子元素') }),
                    new Card({
                        shape: new RoundedRectangleBorder({ borderRadius: BorderRadius.circular(25.0) }),
                        child: Image.asset( 'people/ali_landscape.png', {
                            mxPackage: 'flutter_gallery_assets',
                            fit: BoxFit.cover,
                        }),
                        clipBehavior: Clip.antiAlias,
                    })
                ],
            }),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/Chip.js":
/*!************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/Chip.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 87:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    Chip,
    Icon,
    Icons,
    EdgeInsets,
    Colors,
    RoundedRectangleBorder,
    BorderRadius,
    Row,
    CircleAvatar,
    TextStyle,
    MainAxisAlignment,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleChip(); }
}

class PageExampleChip extends MXJSWidgetState {
    constructor() {
        super();
        this.selected = false;
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('Chip') }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text('Chip, 带有图标的Chip和自定义label样式的Chip') }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                            new Chip({ label: new Text('Chip') }),
                            new Chip({
                                avatar: new CircleAvatar({ child: new Text('C') }),
                                label: new Text('Chip'),
                            }),
                            new Chip({
                                label: new Text('Chip'),
                                labelStyle: new TextStyle({ color: Colors.blue }),
                                labelPadding: EdgeInsets.symmetric({ horizontal: 30.0 }),
                            }),
                        ]
                    }),
                    new ListTile({ title: new Text('带有删除按钮的Chip, 自定义多种样式的Chip') }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                            new Chip({
                                label: new Text('Chip'),
                                deleteIcon: new Icon(Icons.delete),
                                deleteIconColor: Colors.red/*[400]*/,
                                onDeleted: function () { },
                                deleteButtonTooltipMessage: '删除',
                            }),
                            new Chip({
                                label: new Text('Chip'),
                                shape: new RoundedRectangleBorder({
                                    borderRadius: BorderRadius.circular(5.0),
                                }),
                                backgroundColor: Colors.blue/*[200]*/,
                            }),
                            new Chip({
                                label: new Text('Chip'),
                                elevation: 5.0,
                                shadowColor: Colors.red,
                            })
                        ]
                    }),
                ],
            })
        })
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/Column.js":
/*!**************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/Column.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 265:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    DefaultTabController,
    Tab,
    TabBar,
    TabBarView,
    Scaffold,
    AppBar,
    Text,
    ListView,
    Column,
    Container,
    Colors,
    ListTile,
    Center,
    MainAxisAlignment,
    MainAxisSize,
    CrossAxisAlignment,
    VerticalDirection,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleColumn(); }
}

class PageExampleColumn extends MXJSWidgetState {
    constructor() {
        super();
        this.selected = false;
    }

    _equalContainersList() {
        return [
            new Container({
                height: 30,
                width: 100,
                color: Colors.red/*[300]*/,
                child: new Center({ child: new Text("1") }),
            }),
            new Container({
                height: 30,
                width: 100,
                color: Colors.blue/*[300]*/,
                child: new Center({ child: new Text("2") }),
            }),
            new Container({
                height: 30,
                width: 100,
                color: Colors.green/*[300]*/,
                child: new Center({ child: new Text("3") }),
            }),
        ];
    }

    _unequalContainersList() {
        return [
            new Container({
                height: 30,
                width: 100,
                color: Colors.red/*[300]*/,
                child: new Center({ child: new Text("1") }),
            }),
            new Container({
                height: 30,
                width: 90,
                color: Colors.blue/*[300]*/,
                child: new Center({ child: new Text("2") }),
            }),
            new Container({
                height: 30,
                width: 80,
                color: Colors.green/*[300]*/,
                child: new Center({ child: new Text("3") }),
            }),
        ];
    }

    _mainAxisAlignmentView() {
        return new ListView({
            children: [
                new ListTile({ title: new Text("MainAxisAlignment.start") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: this._equalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("MainAxisAlignment.end") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: this._equalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("MainAxisAlignment.center") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: this._equalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("MainAxisAlignment.spaceAround") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: this._equalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("MainAxisAlignment.spaceBetween") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: this._equalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("MainAxisAlignment.spaceEvenly") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: this._equalContainersList(),
                    }),
                }),
            ],
        });
    }

    _crossAxisAlignmentView() {
        return new ListView({
            children: [
                new ListTile({ title: new Text("CrossAxisAlignment.start") }),
                new Container({
                    height: 90.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: this._unequalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("CrossAxisAlignment.end") }),
                new Container({
                    height: 90.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: this._unequalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("CrossAxisAlignment.center") }),
                new Container({
                    height: 90.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: this._unequalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("CrossAxisAlignment.stretch") }),
                new Container({
                    height: 90.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: this._unequalContainersList(),
                    }),
                }),
            ],
        });
    }

    _mainAxisSizeView() {
        return new ListView({
            children: [
                new ListTile({ title: new Text("MainAxisSize.min") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        mainAxisSize: MainAxisSize.min,
                        children: this._equalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("MainAxisSize.max") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        mainAxisSize: MainAxisSize.max,
                        children: this._equalContainersList(),
                    }),
                }),
            ]
        });
    }

    _verticalDirectionView() {
        return new ListView({
            children: [
                new ListTile({ title: new Text("VerticalDirection.down") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        verticalDirection: VerticalDirection.down,
                        children: this._equalContainersList(),
                    }),
                }),
                new ListTile({ title: new Text("VerticalDirection.up") }),
                new Container({
                    height: 240.0,
                    color: Colors.grey/*[300]*/,
                    child: new Column({
                        verticalDirection: VerticalDirection.up,
                        children: this._equalContainersList(),
                    }),
                }),
            ]
        });
    }

    build(context) {
        let widget = new DefaultTabController({
            length: 4,
            child: new Scaffold({
                appBar: new AppBar({
                    title: new Text('Column'),
                    bottom: new TabBar({
                        isScrollable: true,
                        tabs: [
                            new Tab({ text: 'MainAxisAlignment' }),
                            new Tab({ text: 'CrossAxisAlignment' }),
                            new Tab({ text: 'MainAxisSize' }),
                            new Tab({ text: 'VerticalDirection' }),
                        ]
                    }),
                }),
                body: new TabBarView({
                    children: [
                        this._mainAxisAlignmentView(),
                        this._crossAxisAlignmentView(),
                        this._mainAxisSizeView(),
                        this._verticalDirectionView(),
                    ],
                }),
            }),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/Container.js":
/*!*****************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/Container.js ***!
  \*****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 229:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    DefaultTabController,
    Tab,
    TabBar,
    TabBarView,
    Scaffold,
    AppBar,
    Text,
    ListView,
    Alignment,
    Container,
    Colors,
    ListTile,
    EdgeInsets,
    BoxDecoration,
    BoxShape,
    BorderRadius,
    Radius,
    Border,
    BoxShadow,
    Offset,
    Matrix4,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleContainer(); }
}

class PageExampleContainer extends MXJSWidgetState {
    constructor() {
        super();
        this.selected = false;
    }

    _alignmentView() {
        return new ListView({
            children: [
                new ListTile({ title: new Text('Alignment.center') }),
                new Container({
                    height: 240.0,
                    color: Colors.blue/*[200]*/,
                    alignment: Alignment.center,
                    child: new Text('Container'),
                }),
                new ListTile({ title: new Text('Alignment.topLeft') }),
                new Container({
                    height: 240.0,
                    color: Colors.blue/*[200]*/,
                    alignment: Alignment.topLeft,
                    child: new Text('Container'),
                }),
                new ListTile({ title: new Text('Alignment(0.2, -0.7)') }),
                new Container({
                    height: 240.0,
                    color: Colors.blue/*[200]*/,
                    alignment: new Alignment(0.2, -0.7),
                    child: new Text('Container'),
                }),
            ],
        });
    }

    _paddingAndMargin() {
        return new ListView({
            children: [
                new ListTile({ title: new Text('Red Container: (padding: 50.0, margin: 20.0)') }),
                new Container({
                    height: 240.0,
                    color: Colors.blue/*[200]*/,
                    child: new Container({
                        color: Colors.red/*[200]*/,
                        padding: EdgeInsets.all(50.0),
                        margin: EdgeInsets.all(20.0),
                        child: new Container({ color: Colors.yellow/*[200]*/ }),
                    }),
                }),
                new ListTile({ title: new Text('margin: EdgeInsets.fromLTRB(10, 20, 30, 40)') }),
                new Container({
                    height: 240.0,
                    color: Colors.blue/*[200]*/,
                    child: new Container({
                        color: Colors.green/*[200]*/,
                        margin: EdgeInsets.fromLTRB(10.0, 20.0, 30.0, 40.0),
                    }),
                }),
                new ListTile({ title: new Text('margin: EdgeInsets.symmetric({vertical: 10, horizontal: 40})') }),
                new Container({
                    height: 240.0,
                    color: Colors.blue/*[200]*/,
                    child: new Container({
                        color: Colors.orange/*[200]*/,
                        margin: EdgeInsets.symmetric({ vertical: 10.0, horizontal: 40.0 }),
                    }),
                }),
                new ListTile({ title: new Text('margin: EdgeInsets.only({bottom: 20})') }),
                new Container({
                    height: 240.0,
                    color: Colors.blue/*[200]*/,
                    child: new Container({
                        color: Colors.purple/*[200]*/,
                        margin: EdgeInsets.only({ bottom: 20.0 }),
                    }),
                }),
            ],
        });
    }

    _decorationView() {
        return new ListView({
            children: [
                new ListTile({ title: new Text('decoration.shape') }),
                new Container({
                    child: new Text('Container'),
                    decoration: new BoxDecoration({
                        shape: BoxShape.circle,
                        color: Colors.red/*[200]*/,
                    }),
                    alignment: Alignment.center,
                    margin: EdgeInsets.all(10.0),
                    height: 80.0,
                }),
                new ListTile({ title: new Text('decoration.borderRadius') }),
                new Container({
                    child: new Text('Container'),
                    decoration: new BoxDecoration({
                        borderRadius: BorderRadius.all(Radius.circular(16.0)),
                        color: Colors.green/*[200]*/,
                    }),
                    alignment: Alignment.center,
                    margin: EdgeInsets.symmetric({ vertical: 10.0, horizontal: 80.0 }),
                    height: 80.0,
                }),
                new ListTile({ title: new Text('decoration.border') }),
                new Container({
                    child: new Text('Container'),
                    decoration: new BoxDecoration({
                        borderRadius: BorderRadius.all(Radius.circular(16.0)),
                        border: Border.all({
                            color: Colors.orange/*[600]*/,
                            width: 2.0,
                        }),
                    }),
                    alignment: Alignment.center,
                    margin: EdgeInsets.symmetric({ vertical: 10.0, horizontal: 120.0 }),
                    height: 40.0,
                }),
                new ListTile({ title: new Text('decoration.boxShadow') }),
                new Container({
                    child: new Text('Container'),
                    decoration: new BoxDecoration({
                        shape: BoxShape.circle,
                        color: Colors.blue/*[300]*/,
                        boxShadow: [
                            new BoxShadow({
                                color: Colors.black54,
                                offset: new Offset(5.0, 5.0),
                                blurRadius: 5.0,
                            }),
                        ],
                    }),
                    alignment: Alignment.center,
                    margin: EdgeInsets.all(10.0),
                    height: 80.0,
                }),
            ],
        });
    }

    _transformView() {
        return new ListView({
            children: [
                new ListTile({ title: new Text('Matrix4.rotationX(0.25)') }),
                new Container({
                    color: Colors.blue/*[200]*/,
                    child: new Text('Container'),
                    alignment: Alignment.center,
                    margin: EdgeInsets.symmetric({ horizontal: 120.0 }),
                    height: 60.0,
                    transform: Matrix4.rotationZ(0.25),
                }),
                new Container({ height: 120 }),
                new ListTile({ title: new Text('Matrix4.skewY(0.25)') }),
                new Container({
                    color: Colors.blue/*[200]*/,
                    child: new Text('Container'),
                    alignment: Alignment.center,
                    margin: EdgeInsets.symmetric({ horizontal: 120.0 }),
                    height: 60.0,
                    transform: Matrix4.skewY(0.25),
                }),
            ]
        });
    }

    build(context) {
        let widgets = new DefaultTabController({
            length: 3,
            child: new Scaffold({
                appBar: new AppBar({
                    title: new Text("Container"),
                    bottom: new TabBar({
                        scrollable: true,
                        tabs: [
                            new Tab({ text: "alignment" }),
                            new Tab({ text: "padding & margin" }),
                            new Tab({ text: "Decoration" }),
                            // new Tab({ text: "transform" }),
                        ],
                    }),
                }),
                body: new TabBarView({
                    children: [
                        this._alignmentView(),
                        this._paddingAndMargin(),
                        this._decorationView(),
                        // this._transformView(),
                    ],
                }),
            }),
        });
        return widgets;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoActivityIndicator.js":
/*!**********************************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoActivityIndicator.js ***!
  \**********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 91:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Column,
    Row,
    Alignment,
    Container,
    CupertinoActivityIndicator,
    CupertinoSwitch,
    Expanded,
    EdgeInsets,
    Colors,
    BoxDecoration,
    Border,
    BorderRadius,
    Radius,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCupertinoActivityIndicator(); }
}

class PageExampleCupertinoActivityIndicator extends MXJSWidgetState {
    constructor() {
        super();
        this.settingTable = {
            "showAnimation": true,
            "bigIcon": false,
        };
    }

    _singleOption(selectedText, unselectedText, varName) {
        return new Container({
            padding: EdgeInsets.all(12.0),
            child: new Row({
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                    new Text(this.settingTable[varName] ? selectedText : unselectedText),
                    new CupertinoSwitch({
                        value: this.settingTable[varName],
                        activeColor: Colors.orange,
                        onChanged: function (value) {
                            this.setState(function () {
                                this.settingTable[varName] = value;
                            }.bind(this))
                        }.bind(this),
                    }),
                ],
            }),
        });
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('CupertinoActivityIndicator') }),
            body: new Column({
                children: [
                    new Container({
                        margin: EdgeInsets.all(12.0),
                        decoration: new BoxDecoration({
                            borderRadius: BorderRadius.all(Radius.circular(4.0)),
                            border: Border.all({
                                color: Colors.black,
                                width: 2.0,
                            }),
                        }),
                        height: 240,
                        alignment: Alignment.center,
                        child: new CupertinoActivityIndicator({
                            animating: this.settingTable["showAnimation"],
                            radius: this.settingTable["bigIcon"] ? 32.0 : 16.0,
                        })
                    }),
                    new Expanded({ child: new Container() }),
                    this._singleOption("显示动画：是", "显示动画：否", "showAnimation"),
                    this._singleOption("大图标：是", "大图标：否", "bigIcon"),
                ]
            }),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoAlertDialog.js":
/*!****************************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoAlertDialog.js ***!
  \****************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 41:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    CupertinoButton,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCupertinoAlertDialog(); }
}

class PageExampleCupertinoAlertDialog extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('CupertinoAlertDialog') }),
            // body: new ListView({
            //     children: [
            //         new CupertinoButton({
            //             child: new Text('Dialog'),
            //             // Harold: 似乎没有showDialog的方法
            //             // onPressed: ,
            //         })
            //     ]
            // }) ,
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoButton.js":
/*!***********************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoButton.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 96:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    CupertinoButton,
    Row,
    MainAxisAlignment,
    Colors,
    BorderRadius,
    Radius,
    EdgeInsets,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCupertinoButton(); }
}

class PageExampleCupertinoButton extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('CupertinoButton') }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text("CupertinoTappableButton") }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            new CupertinoButton({
                                padding: EdgeInsets.symmetric({ horizontal: 10.0 }),
                                color: Colors.orange/*[300]*/,
                                disabledColor: Colors.grey/*[300]*/,
                                child: new Text('Untappable Button'),
                            }),
                            new CupertinoButton({
                                padding: EdgeInsets.symmetric({ horizontal: 10.0 }),
                                color: Colors.orange/*[300]*/,
                                child: new Text('Tappable Button'),
                                onPressed: function() {},
                            }),
                        ],
                    }),
                    new ListTile({ title: new Text("CupertinoButton.borderRadius") }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            new CupertinoButton({
                                color: Colors.orange/*[300]*/,
                                child: new Text('Button'),
                                onPressed: function() {},
                            }),
                            new CupertinoButton({
                                color: Colors.orange/*[300]*/,
                                borderRadius: BorderRadius.all(Radius.circular(24.0)),
                                child: new Text('Button'),
                                onPressed: function() {},
                            }),
                        ],
                    }),
                    new ListTile({ title: new Text("padding and opactiry") }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            new CupertinoButton({
                                color: Colors.orange/*[300]*/,
                                padding: EdgeInsets.symmetric({ horizontal: 10.0 }),
                                child: new Text('Button'),
                                onPressed: function() {},
                            }),
                            new CupertinoButton({
                                color: Colors.orange/*[300]*/,
                                pressedOpacity: 0.75,
                                child: new Text('Button'),
                                onPressed: function() {},
                            }),
                        ],
                    }),
                ],
            }),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoNavigationBar.js":
/*!******************************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoNavigationBar.js ***!
  \******************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 143:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    ListView,
    ListTile,
    Text,
    CupertinoPageScaffold,
    CupertinoNavigationBar,
    CupertinoButton,
    EdgeInsets,
    Border,
    Colors,
    EdgeInsetsDirectional,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCupertinoNavigationBar(); }
}

class PageExampleCupertinoNavigationBar extends MXJSWidgetState {
    constructor() {
        super();
    }

    _normalCupertinoNavigationBar() {
        return new CupertinoNavigationBar({
            middle: new Text("CupertinoNavigationBar"),
            transitionBetweenRoutes: false,
        });
    }

    _changeLeadingCupertinoNavigationBar() {
        return new CupertinoNavigationBar({
            previousPageTitle: "返回",
            middle: new Text("CupertinoNavigationBar"),
            transitionBetweenRoutes: false,
        });
    }

    _trailingCupertinoNavigationBar() {
        return new CupertinoNavigationBar({
            middle: new Text("CupertinoNavigationBar"),
            trailing: new CupertinoButton({
                padding: EdgeInsets.all(0.0),
                child: new Text('设置'),
                onPressed: function () { },
            }),
            transitionBetweenRoutes: false,
        });
    }

    _borderCupertinoNavigationBar() {
        return new CupertinoNavigationBar({
            middle: new Text("CupertinoNavigationBar"),
            border: Border.all({
                color: Colors.orange/*[600]*/,
                width: 2.0,
            }),
            transitionBetweenRoutes: false,
        });
    }

    _backgroundCupertinoNavigationBar() {
        return new CupertinoNavigationBar({
            middle: new Text("CupertinoNavigationBar"),
            color: Colors.yellow/*[200]*/,
            transitionBetweenRoutes: false,
        });
    }

    _paddingCupertinoNavigationBar() {
        return new CupertinoNavigationBar({
            middle: new Text("CupertinoNavigationBar"),
            padding: EdgeInsetsDirectional.only({ bottom: 20.0 }),
            transitionBetweenRoutes: false,
        });
    }

    _actionsColorCupertinoNavigationBar() {
        return new CupertinoNavigationBar({
            previousPageTitle: "返回",
            middle: new Text("CupertinoNavigationBar"),
            trailing: new CupertinoButton({
                padding: EdgeInsets.all(0.0),
                child: new Text('设置'),
                onPressed: function () { },
            }),
            actionsForegroundColor: Colors.blue,
            transitionBetweenRoutes: false,
        });
    }

    build(context) {
        let widget = new CupertinoPageScaffold({
            navigationBar: new CupertinoNavigationBar({
                middle: new Text("CupertinoNavigationBar"),
            }),
            child: new Scaffold({
                backgroundColor: Colors.green/*[100]*/,
                body: new ListView({
                    children: [
                        new ListTile({
                            title: new Text("最简单的CupertinoNavigationBar"),
                        }),
                        this._normalCupertinoNavigationBar(),
                        new ListTile({
                            title: new Text("leading带有说明的CupertinoNavigationBar"),
                        }),
                        this._changeLeadingCupertinoNavigationBar(),
                        new ListTile({
                            title: new Text("带有右侧按钮的CupertinoNavigationBar"),
                        }),
                        this._trailingCupertinoNavigationBar(),
                        new ListTile({
                            title: new Text("带有边框的CupertinoNavigationBar"),
                        }),
                        this._borderCupertinoNavigationBar(),
                        new ListTile({
                            title: new Text("带有背景色的CupertinoNavigationBar"),
                        }),
                        this._backgroundCupertinoNavigationBar(),
                        new ListTile({
                            title: new Text("带有padding的CupertinoNavigationBar"),
                        }),
                        this._paddingCupertinoNavigationBar(),
                        new ListTile({
                            title: new Text("修改按钮颜色的的CupertinoNavigationBar"),
                        }),
                        this._actionsColorCupertinoNavigationBar(),
                    ],
                }),
            }),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoPageScaffold.js":
/*!*****************************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoPageScaffold.js ***!
  \*****************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 62:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    CupertinoPageScaffold,
    CupertinoNavigationBar,
    Scaffold,
    Text,
    ListView,
    ListTile,
    Color,
    Colors,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCupertinoPageScaffole(); }
}

class PageExampleCupertinoPageScaffole extends MXJSWidgetState {
    constructor() {
        super();
        this._backgroundColor = Colors.white;
    }

    _changeColorListTile(text, color) {
        return new ListTile({
            title: new Text(text),
            onTap: function () {
                this.setState(function () {
                    this._backgroundColor = color;
                }.bind(this))
            }.bind(this),
        });
    }

    build(context) {
        let widget = new CupertinoPageScaffold({
            navigationBar: new CupertinoNavigationBar({
                middle: new Text("CupertinoPageScaffold"),
            }),
            child: new Scaffold({
                backgroundColor: new Color(0x00000000),
                body: new ListView({
                    children: [
                        this._changeColorListTile("背景颜色：白", Colors.white),
                        this._changeColorListTile("背景颜色：黄", Colors.yellow/*[200]*/),
                        this._changeColorListTile("背景颜色：绿", Colors.green/*[200]*/),
                        this._changeColorListTile("背景颜色：蓝", Colors.blue/*[200]*/),
                        this._changeColorListTile("背景颜色：粉", Colors.pink/*[200]*/),
                    ]
                })
            }),
            backgroundColor: this._backgroundColor,
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoSlider.js":
/*!***********************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoSlider.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 94:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    CupertinoSlider,
    TextStyle,
    Colors,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCupertinoSlider(); }
}

class PageExampleCupertinoSlider extends MXJSWidgetState {
    constructor() {
        super();
        this.currentValue = 50.0;
        this.fontSize = 16.0;
        this.coloredValue = 50.0
        this.fontSizeMap = {
            12: "小",
            16: "中",
            20: "大",
            24: "特大",
        }
    }

    build(context) {
        let currentStyle = new TextStyle({ fontSize: this.fontSize });
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('CupertinoSlider') }),
            body: new ListView({
                children: [
                    new ListTile({
                        title: new Text("连续滑块, 当前值为: " + this.currentValue.toFixed(1), {
                            style: currentStyle
                        }),
                    }),
                    new CupertinoSlider({
                        min: 0.0,
                        max: 100.0,
                        value: this.currentValue,
                        onChanged: function (value) {
                            this.setState(function () {
                                this.currentValue = value;
                            }.bind(this))
                        }.bind(this),
                    }),
                    new ListTile({
                        title: new Text(
                            "离散滑块, 字体大小: " + this.fontSizeMap[this.fontSize], {
                            style: currentStyle
                        }),
                    }),
                    new CupertinoSlider({
                        min: 12.0,
                        max: 24.0,
                        divisions: 3,
                        value: this.fontSize,
                        onChanged: function (value) {
                            this.setState(function () {
                                this.fontSize = value;
                            }.bind(this))
                        }.bind(this),
                    }),
                    new ListTile({ title: new Text("带颜色滑块", { style: currentStyle }) }),
                    new CupertinoSlider({
                        min: 0.0,
                        max: 100.0,
                        value: this.coloredValue,
                        activeColor: Colors.blue/*[300]*/,
                        thumbColor: Colors.blue/*[800]*/,
                        onChanged: function (value) {
                            this.setState(function () {
                                this.coloredValue = value;
                            }.bind(this))
                        }.bind(this),
                    }),
                ],
            }),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoSwitch.js":
/*!***********************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoSwitch.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 121:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    Row,
    MainAxisAlignment,
    CupertinoSwitch,
    Colors,
    DragStartBehavior,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCupertinoSwitch(); }
}

class PageExampleCupertinoSwitch extends MXJSWidgetState {
    constructor() {
        super();
        this.choose = [false, false, false];
    }

    _onChanged(index) {
        return function (value) {
            this.setState(function () {
                this.choose[index] = value;
            }.bind(this))
        }.bind(this);
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('CupertinoSwitch') }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text("CupertionSwitch基本使用") }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            new CupertinoSwitch({
                                activeColor: Colors.green,
                                value: this.choose[0],
                                onChanged: this._onChanged(0),
                            }),
                            new CupertinoSwitch({
                                activeColor: Colors.blue,
                                value: this.choose[0],
                                onChanged: this._onChanged(0),
                            }),
                            new CupertinoSwitch({
                                activeColor: Colors.red,
                                value: this.choose[0],
                                onChanged: this._onChanged(0),
                            }),
                            new CupertinoSwitch({
                                activeColor: Colors.yellow,
                                value: this.choose[0],
                                onChanged: this._onChanged(0),
                            }),
                        ],
                    }),
                    new ListTile({ title: new Text("CupertionSwitch自定义未选中颜色") }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            new CupertinoSwitch({
                                activeColor: Colors.green,
                                trackColor: Colors.green/*[100]*/,
                                value: this.choose[1],
                                onChanged: this._onChanged(1),
                            }),
                            new CupertinoSwitch({
                                activeColor: Colors.blue,
                                trackColor: Colors.blue/*[100]*/,
                                value: this.choose[1],
                                onChanged: this._onChanged(1),
                            }),
                            new CupertinoSwitch({
                                activeColor: Colors.red,
                                trackColor: Colors.red/*[100]*/,
                                value: this.choose[1],
                                onChanged: this._onChanged(1),
                            }),
                            new CupertinoSwitch({
                                activeColor: Colors.yellow,
                                trackColor: Colors.yellow/*[100]*/,
                                value: this.choose[1],
                                onChanged: this._onChanged(1),
                            }),
                        ],
                    }),
                    new ListTile({ title: new Text("CupertionSwitch拖动方式") }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            new CupertinoSwitch({
                                value: this.choose[2],
                                onChanged: this._onChanged(2),
                            }),
                            new CupertinoSwitch({
                                value: this.choose[2],
                                onChanged: this._onChanged(2),
                                dragStartBehavior: DragStartBehavior.start,
                            }),
                        ],
                    }),
                ],
            }),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoTabBar.js":
/*!***********************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoTabBar.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 133:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSStatelessWidget,
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Colors,
    CupertinoTabBar,
    BottomNavigationBarItem,
    Icon,
    Icons,
    Center,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class HomePage extends MXJSStatelessWidget {
    constructor() {
        super("HomePage");
    }
    build(context) {
        return new Center({
            child: new Text("HomePage"),
        })
    }
}


class IdeaPage extends MXJSStatelessWidget {
    constructor() {
        super("IdeaPage");
    }
    build(context) {
        return new Center({
            child: new Text("IdeaPage"),
        })
    }
}


class MessagePage extends MXJSStatelessWidget {
    constructor() {
        super("MessagePage");
    }
    build(context) {
        return new Center({
            child: new Text("MessagePage"),
        })
    }
}


class MyPage extends MXJSStatelessWidget {
    constructor() {
        super("MyPage");
    }
    build(context) {
        return new Center({
            child: new Text("MyPage"),
        })
    }
}
// IOS风格的TabBar
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super("ExampleWidget");
    }
    createState() {
        return new PageExampleCupertinoTabBar();
    }
}

class PageExampleCupertinoTabBar extends MXJSWidgetState {
    constructor() {
        super();
        this._position = 1;
        this._pageList = [];
        this._currentPage = null;
    }

    _changeIndex(value) {
        this.setState(function () {
            this._position = value;
        }.bind(this));
    }

    build() {
        this._pageList = [
            new HomePage(),
            new IdeaPage(),
            new MessagePage(),
            new MyPage()
        ]

        this._currentPage = this._pageList[this._position];

        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('CupertinoTabBar'),
            }),
            body: new Center({
                child: this._currentPage,
            }),
            bottomNavigationBar: new CupertinoTabBar({
                items: [
                    new BottomNavigationBarItem({
                        icon: new Icon(Icons.assignment),
                        title: new Text("首页")
                    }),
                    new BottomNavigationBarItem({
                        icon: new Icon(Icons.all_inclusive),
                        title: new Text("想法")
                    }),
                    new BottomNavigationBarItem({
                        icon: new Icon(Icons.add_alert),
                        title: new Text("通知")
                    }),
                    new BottomNavigationBarItem({
                        icon: new Icon(Icons.perm_identity),
                        title: new Text("我的")
                    }),
                ],
                onTap: this._changeIndex.bind(this),
                currentIndex: this._position,
                backgroundColor: Colors.orange,
                activeColor: Colors.red,
                inactiveColor: Colors.white,
            }),
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
};

/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CupertinoTabScaffold.js":
/*!****************************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CupertinoTabScaffold.js ***!
  \****************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 77:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    CupertinoTabScaffold,
    BottomNavigationBarItem,
    CupertinoTabBar,
    CupertinoPageScaffold,
    CupertinoNavigationBar,
    Text,
    Icon,
    Icons,
    Scaffold,
    Colors,
    Center,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() { super('ExampleWidget'); }

    createState() { return new PageExampleCupertinoTabScaffold(); }
}

class PageExampleCupertinoTabScaffold extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new CupertinoTabScaffold({
            tabCount: 3,
            tabBar: new CupertinoTabBar({
                items: [
                    new BottomNavigationBarItem({
                        icon: new Icon(Icons.home),
                        title: new Text("主页"),
                    }),
                    new BottomNavigationBarItem({
                        icon: new Icon(Icons.favorite),
                        title: new Text("关注"),
                    }),
                    new BottomNavigationBarItem({
                        icon: new Icon(Icons.book),
                        title: new Text("我的"),
                    }),
                ]
            }),
            tabBuilder: function (context, index) {
                if (index == 0) return new CupertinoPageScaffold({
                    navigationBar: new CupertinoNavigationBar({ middle: new Text("主页") }),
                    child: new Scaffold({
                        backgroundColor: Colors.blue/*[200]*/,
                        body: new Center({ child: new Text("主页") }),
                    }),
                });
                else if (index == 1) return new CupertinoPageScaffold({
                    navigationBar: new CupertinoNavigationBar({ middle: new Text("关注") }),
                    child: new Scaffold({
                        backgroundColor: Colors.red/*[200]*/,
                        body: new Center({ child: new Text("关注") }),
                    }),
                });
                else if (index == 2) return new CupertinoPageScaffold({
                    navigationBar: new CupertinoNavigationBar({ middle: new Text("我的") }),
                    child: new Scaffold({
                        backgroundColor: Colors.green/*[200]*/,
                        body: new Center({ child: new Text("我的") }),
                    }),
                });
            }.bind(this),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CustomMultiChildLayout.js":
/*!******************************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CustomMultiChildLayout.js ***!
  \******************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 36:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Center,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleCustomMultiChildLayout();
    }
}
class PageExampleCustomMultiChildLayout extends MXJSWidgetState {
    constructor() {
        super();
    }

    build() {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('CustomMultiChildLayout')
            }),
            body: new Center({
                child: new Text("MXFlutter中delegate未实现！")
            })
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/C/CustomScrollView.js":
/*!************************************************************!*\
  !*** ./lib/app_demo/widget_examples/C/CustomScrollView.js ***!
  \************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 77:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    CustomScrollView,
    Container,
    SliverList,
    SliverGrid,
    SliverGridDelegateWithMaxCrossAxisExtent,
    Alignment,
    SliverChildBuilderDelegate,
    Color,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 通用的滑动结构
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleCustomScrollView();
    }
}

class PageExampleCustomScrollView extends MXJSWidgetState {
    constructor() {
        super();
    }

    build() {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('CustomScrollView'),
            }),
            body: new CustomScrollView({
                slivers: [
                    new SliverGrid({
                        gridDelegate: new SliverGridDelegateWithMaxCrossAxisExtent({
                            maxCrossAxisExtent: 120.0,
                            childAspectRatio: 2.0,
                        }),
                        delegate: new SliverChildBuilderDelegate(
                            function (context, index) {
                                return new Container({
                                    color: Color.fromRGBO(index * 8, 63, 255 - index * 8, 1.0),
                                    alignment: Alignment.center,
                                    child: new Text(index.toString()),
                                })
                            },
                            {
                                childCount: 8,
                            }
                        )
                    }),
                    new SliverList({
                        delegate: new SliverChildBuilderDelegate(
                            function (context, index) {
                                index += 9;
                                return new Container({
                                    height: 80,
                                    color: Color.fromRGBO(index * 8, 63, 255 - index * 8, 1.0),
                                    alignment: Alignment.center,
                                    child: new Text(index.toString()),
                                });
                            },
                            { childCount: 20 }
                        ),
                    })
                ]
            }),
        });
        return widget;
    }
}
module.exports = {
    ExampleWidget
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/D/DecoratedBox.js":
/*!********************************************************!*\
  !*** ./lib/app_demo/widget_examples/D/DecoratedBox.js ***!
  \********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 124:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Container,
    Alignment,
    Colors,
    ListView,
    DecoratedBox,
    BoxDecoration,
    BoxShape,
    BoxShadow,
    Radius,
    BorderRadius,
    ListTile,
    EdgeInsets,
    Offset,
    Border,
    TextStyle,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 装饰类组件
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleDecoratedBox();
    }
}

class PageExampleDecoratedBox extends MXJSWidgetState {
    constructor() {
        super();
    }
    build() {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('DecoratedBox'),
            }),
            body: new ListView({
                children: [
                    new ListTile({
                        title: new Text('基本类型DecoratedBox'),
                    }),
                    new Container({
                        child: new DecoratedBox({
                            decoration: new BoxDecoration({
                                shape: BoxShape.circle,
                                color: Colors.blue,
                            }),
                            child: new Container({
                                width: 100,
                                height: 100,
                            }),
                        }),
                        alignment: Alignment.center,
                        margin: EdgeInsets.all(10),
                    }),
                    new ListTile({
                        title: new Text('圆角矩形DecoratedBox'),
                    }),
                    new Container({
                        child: new DecoratedBox({
                            decoration: new BoxDecoration({
                                borderRadius: BorderRadius.all(Radius.circular(16.0)),
                                color: Colors.green,
                            }),
                            child: new Text('DecoratedBox',{style: new TextStyle({fontSize: 30})}),
                        }),
                        alignment: Alignment.center,
                        margin: EdgeInsets.all(10),
                    }),
                    new ListTile({
                        title: new Text('带有边框的DecoratedBox'),
                    }),
                    new Container({
                        child: new DecoratedBox({
                            decoration: new BoxDecoration({
                                color: Colors.green,
                                border: Border.all({
                                    color: Colors.red,
                                    width: 2.0,
                                }),
                            }),
                            child: new Text('DecoratedBox',{style: new TextStyle({fontSize: 30})}),
                        }),
                        alignment: Alignment.center,
                        margin: EdgeInsets.all(10),
                    }),
                    new ListTile({
                        title: new Text('带有阴影的DecoratedBox'),
                    }),
                    new Container({
                        child: new DecoratedBox({
                            decoration: new BoxDecoration({
                                shape: BoxShape.circle,
                                color: Colors.blue,
                                boxShadow: [
                                    new BoxShadow({
                                        color: Colors.black54,
                                        offset: new Offset(5.0, 5.0),
                                        blurRadius: 5.0,
                                    }),
                                ],
                            }),
                            child: new Container({
                                width: 100,
                                height: 100,
                            }),
                        }),
                        alignment: Alignment.center,
                        margin: EdgeInsets.all(10),
                    }),
                ]
            }),
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/D/DecoratedBoxTransition.js":
/*!******************************************************************!*\
  !*** ./lib/app_demo/widget_examples/D/DecoratedBoxTransition.js ***!
  \******************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 101:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Container,
    Alignment,
    Colors,
    BoxDecoration,
    Radius,
    BorderRadius,
    Expanded,
    Column,
    AnimationController,
    DecoratedBoxTransition,
    DecorationTween,
    Duration,
    BoxShadow,
    RaisedButton,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleDecoratedBoxTransition();
    }
}

class PageExampleDecoratedBoxTransition extends MXJSWidgetState {
    constructor() {
        super();
        this._controller = new AnimationController({
            duration: new Duration({ seconds: 1 }),
        });
        this._shadow = true;
        this._animation = new DecorationTween({
            begin: new BoxDecoration({
                color: Colors.grey,
                borderRadius: BorderRadius.all(Radius.circular(0)),
                boxShadow:
                    [
                        new BoxShadow({
                            color: Colors.black,
                            blurRadius: 3,
                            spreadRadius: 3,
                        })
                    ],
            }),
            end: new BoxDecoration({
                color: Colors.orange,
                borderRadius: BorderRadius.all(Radius.circular(30)),
                boxShadow:
                    [
                        new BoxShadow({
                            color: Colors.yellow,
                            blurRadius: 3,
                            spreadRadius: 1,
                        })
                    ],

            })
        }).animate(this._controller);
    }

    build() {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('DecoratedBoxTransition'),
            }),
            body: new Column({
                children: [
                    new Expanded({
                        child: new Container({
                            alignment: Alignment.center,
                            child: new DecoratedBoxTransition({
                                decoration: this._animation,
                                child: new Container({
                                    height: 200,
                                    width: 200,
                                }),
                            }),
                        }),
                    }),
                    new RaisedButton({
                        child: new Text('播放'),
                        onPressed: function () {
                            this._controller.forward();
                        }.bind(this),
                    }),
                ]
            }),
        });
        return widget;
    }

}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/D/DefaultTextStyle.js":
/*!************************************************************!*\
  !*** ./lib/app_demo/widget_examples/D/DefaultTextStyle.js ***!
  \************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 97:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    TextStyle,
    Container,
    Alignment,
    Colors,
    ListView,
    ListTile,
    DefaultTextStyle,
    TextDecoration,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleDefaultTextStyle();
    }
}

class PageExampleDefaultTextStyle extends MXJSWidgetState {
    constructor() {
        super();
    }

    build() {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('DefaultTextStyle'),
            }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text('默认文本'), }),
                    new Container({
                        alignment: Alignment.center,
                        child: new DefaultTextStyle({
                            style: new TextStyle({
                                color: Colors.black,
                            }),
                            child: new Text('Text'),
                        }),
                    }),

                    new ListTile({ title: new Text('自定义style文本'), }),
                    new Container({
                        alignment: Alignment.center,
                        child: new DefaultTextStyle({
                            style: new TextStyle({
                                color: Colors.red,
                                fontSize: 20,
                                decoration: TextDecoration.underline,
                            }),
                            child: new Text('Text'),
                        }),
                    }),

                    new ListTile({ title: new Text('softWrap: false'), }),
                    new Container({
                        width: 20,
                        alignment: Alignment.center,
                        child: new DefaultTextStyle({
                            style: new TextStyle({
                                fontSize: 18,
                                color: Colors.orange,
                            }),
                            softWrap: false,
                            child: new Text('Very Very Very Very Very Very Very Very Long Text'),
                        }),
                    }),

                    new ListTile({ title: new Text('softWrap: true'), }),
                    new Container({
                        width: 80,
                        alignment: Alignment.center,
                        child: new DefaultTextStyle({
                            style: new TextStyle({
                                fontSize: 18,
                                color: Colors.orange,
                            }),
                            softWrap: true,
                            child: new Text('Very Very Very Very Very Very Very Very Long Text'),
                        }),
                    }),
                ]
            })
        });
        return widget;
    }

}

module.exports = {
    ExampleWidget
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/D/DropdownButton.js":
/*!**********************************************************!*\
  !*** ./lib/app_demo/widget_examples/D/DropdownButton.js ***!
  \**********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 144:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    TextStyle,
    Container,
    Alignment,
    Colors,
    ListView,
    ListTile,
    DefaultTextStyle,
    TextDecoration,
    DropdownMenuItem,
    DropdownButton,
    Icon,
    Icons,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleDropdownButton();
    }
}

class PageExampleDropdownButton extends MXJSWidgetState {
    constructor() {
        super();
        this._dropValue = 'Math';
        this._dropSelectValue = 'Math';
        this._dropHintValue = null;
        this._dropIconValue = 'Math';
    }

    _buildItem() {
        return [
            new DropdownMenuItem({ child: new Text('Math'), value: 'Math' }),
            new DropdownMenuItem({ child: new Text('English'), value: 'English' }),
            new DropdownMenuItem({ child: new Text('Chinese'), value: 'Chinese' }),
        ]
    }

    _buildCommonButton() {
        return new Container({
            alignment: Alignment.center,
            child: new DropdownButton({
                value: this._dropValue,
                items: this._buildItem(),
                onChanged: function (value) {
                    this.setState(function () {
                        this._dropValue = value;
                        console.log(value);
                    }.bind(this));
                }.bind(this),
            }),
        });
    }

    _buildSelectItemButton() {
        return new Container({
            alignment: Alignment.center,
            child: new DropdownButton({
                value: this._dropSelectValue,
                items: this._buildItem(),
                selectedItemBuilder: (context) => {
                    return [
                        new Text('Math', { style: new TextStyle({ color: Colors.red }) }),
                        new Text('English', { style: new TextStyle({ color: Colors.red }) }),
                        new Text('Chinese', { style: new TextStyle({ color: Colors.red }) }),
                    ]
                },
                onChanged: function (value) {
                    this.setState(function () {
                        this._dropSelectValue = value;
                        console.log(value);
                    }.bind(this));
                }.bind(this),
            }),
        });
    }

    _buildHintButton() {
        return new Container({
            alignment: Alignment.center,
            child: new DropdownButton({
                hint: new Text('请选择'),
                value: this._dropHintValue,
                items: this._buildItem(),
                onChanged: function (value) {
                    this.setState(function () {
                        this._dropHintValue = value;
                        console.log(value);
                    }.bind(this));
                }.bind(this),
            }),
        });
    }
    _buildIconButton() {
        return new Container({
            alignment: Alignment.center,
            child: new DropdownButton({
                icon: new Icon(Icons.add),
                iconSize: 24,
                iconDisabledColor: Colors.grey,
                iconEnabledColor: Colors.red,
                value: this._dropIconValue,
                items: this._buildItem(),
                onChanged: function (value) {
                    this.setState(function () {
                        this._dropIconValue = value;
                        console.log(value);
                    }.bind(this));
                }.bind(this),
            }),
        });
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('DropdownButton'),
            }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text('DropDownButton') }),
                    this._buildCommonButton(),
                    new ListTile({ title: new Text('DropdownButton.selectedItemBuilder(MXFlutter中暂不支持)') }),
                    this._buildSelectItemButton(),
                    new ListTile({ title: new Text('DropdownButton.hint') }),
                    this._buildHintButton(),
                    new ListTile({ title: new Text('DropdownButton.icon') }),
                    this._buildIconButton(),
                ]
            }),
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/E/Expanded.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/widget_examples/E/Expanded.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 85:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Container,
    Alignment,
    Color,
    Column,
    Row,
    Expanded,
    ListTile,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleExpanded();
    }
}

class PageExampleExpanded extends MXJSWidgetState {
    constructor() {
        super();
        this._flex = 0;
    }

    _randomValue() {
        return Math.ceil(Math.random() * 128) + 128;
    }

    _buildFlexContainer(flexNum) {
        return new Expanded({
            flex: flexNum,
            child: new Container({
                alignment: Alignment.center,
                width: 50,
                height: 50,
                color: Color.fromRGBO(
                    this._randomValue(),
                    this._randomValue(),
                    this._randomValue(),
                    1.0
                ),
                child: new Text('flex=' + flexNum),
            }),
        });
    }

    _buildContent(num1,num2,num3) {
        return new Row({
            children: [
                this._buildFlexContainer(num1),
                this._buildFlexContainer(num2),
                this._buildFlexContainer(num3),
            ]
        });
    }

    build() {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('Expanded'),
            }),
            body: new Column({
                children: [
                    new ListTile({title: new Text('Expanded.flex[0,0,0]'),}),
                    this._buildContent(0,0,0),
                    new ListTile({title: new Text('Expanded.flex[0,0,1]'),}),
                    this._buildContent(0,0,1),
                    new ListTile({title: new Text('Expanded.flex[1,1,1]'),}),
                    this._buildContent(1,1,1),
                    new ListTile({title: new Text('Expanded.flex[2,3,3]'),}),
                    this._buildContent(2,3,3),
                ]
            })
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/F/FittedBox.js":
/*!*****************************************************!*\
  !*** ./lib/app_demo/widget_examples/F/FittedBox.js ***!
  \*****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 98:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    FittedBox,
    Container,
    BoxFit,
    Image,
    Colors,
    Alignment,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleFittedBox(); }
}

class PageExampleFittedBox extends MXJSWidgetState {
    constructor() {
        super();
    }

    _picture() {
        return Image.asset('people/ali_landscape.png', {
            mxPackage: 'flutter_gallery_assets',
        });
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('FittedBox'),
            }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text("fit: BoxFit.contain") }),
                    new Container({
                        color: Colors.blue/*[200]*/,
                        height: 200,
                        child: new FittedBox({
                            fit: BoxFit.contain,
                            child: this._picture(),
                        })
                    }),
                    new ListTile({ title: new Text("fit: BoxFit.cover") }),
                    new Container({
                        color: Colors.blue/*[200]*/,
                        height: 200,
                        child: new FittedBox({
                            fit: BoxFit.cover,
                            child: this._picture(),
                        })
                    }),
                    new ListTile({ title: new Text("fit: BoxFit.fill") }),
                    new Container({
                        color: Colors.blue/*[200]*/,
                        height: 200,
                        child: new FittedBox({
                            fit: BoxFit.fill,
                            child: this._picture(),
                        })
                    }),
                    new ListTile({ title: new Text("fit: BoxFit.none") }),
                    new Container({
                        color: Colors.blue/*[200]*/,
                        height: 200,
                        child: new FittedBox({
                            fit: BoxFit.none,
                            child: this._picture(),
                        })
                    }),
                    new ListTile({ title: new Text("alignment: Alignment.centerLeft") }),
                    new Container({
                        color: Colors.blue/*[200]*/,
                        height: 200,
                        child: new FittedBox({
                            fit: BoxFit.contain,
                            alignment: Alignment.centerLeft,
                            child: this._picture(),
                        })
                    }),
                ],
            })
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/F/FlatButton.js":
/*!******************************************************!*\
  !*** ./lib/app_demo/widget_examples/F/FlatButton.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 94:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    ButtonBar,
    FlatButton,
    EdgeInsets,
    Colors,
    CircleBorder,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleFlatButton(); }
}

class PageExampleFlatButton extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('FlatButton'),
            }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text("FlatButton的样式") }),
                    new ButtonBar({ 
                        alignment: MainAxisAlignment.spaceAround,
                        children: [
                            new FlatButton({
                                child: new Text("build"),
                                onPressed: function() {},
                            }),
                            new FlatButton({
                                child: new Text("build"),
                                color: Colors.yellow/*[100]*/,
                                onPressed: function() {},
                            }),
                            new FlatButton({ 
                                child: new Text("build"),
                                color: Colors.red/*[100]*/,
                                onPressed: function() {},
                            }),
                            new FlatButton({
                                child: new Text("build"),
                                disabledColor: Colors.grey/*[300]*/,
                                disabledTextColor: Colors.white,
                            }),
                        ]
                    }),
                    new ButtonBar({ 
                        alignment: MainAxisAlignment.spaceAround,
                        children: [
                            new FlatButton({
                                child: new Text("build"),
                                onPressed: function() {},
                                color: Colors.white,
                                textColor: Colors.blue,
                                splashColor: Colors.blue,
                            }),
                            new FlatButton({
                                child: new Text("build"),
                                color: Colors.yellow/*[100]*/,
                                padding: EdgeInsets.symmetric({ horizontal: 40.0 }),
                                onPressed: function() {},
                            }),
                            new FlatButton({
                                child: new Text("build"),
                                color: Colors.yellow/*[100]*/,
                                shape: new CircleBorder(),
                                onPressed: function() {},
                            }),
                        ]
                    }),
                ],
            })
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/F/FloatingActionButton.js":
/*!****************************************************************!*\
  !*** ./lib/app_demo/widget_examples/F/FloatingActionButton.js ***!
  \****************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 101:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    ButtonBar,
    FloatingActionButton,
    Icon,
    Icons,
    Colors,
    RoundedRectangleBorder,
    BorderRadius,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleFloatingActionButton(); }
}

class PageExampleFloatingActionButton extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('FloatingActionButton'),
            }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text("基本的FloatingActionButton样式") }),
                    new ButtonBar({ 
                        alignment: MainAxisAlignment.spaceAround,
                        children: [
                            new FloatingActionButton({
                                child: new Icon(Icons.add),
                                heroTag: 1,
                            }),
                            new FloatingActionButton({
                                child: new Icon(Icons.add),
                                foregroundColor: Colors.white,
                                backgroundColor: Colors.blue,
                                heroTag: 2,
                            }),
                            new FloatingActionButton({
                                child: new Icon(Icons.add),
                                foregroundColor: Colors.white,
                                backgroundColor: Colors.green,
                                splashColor: Colors.white,
                                heroTag: 3,
                            }),
                            new FloatingActionButton({
                                child: new Icon(Icons.add),
                                foregroundColor: Colors.white,
                                backgroundColor: Colors.pink/*[300]*/,
                                elevation: 2.0,
                                highlightElevation: 6.0,
                                heroTag: 4,
                            }),
                        ]
                    }),
                    new ListTile({ title: new Text("mini, 长按提示和其他形状的FloatingActionButton") }),
                    new ButtonBar({ 
                        alignment: MainAxisAlignment.spaceAround,
                        children: [
                            new FloatingActionButton({
                                child: new Icon(Icons.add),
                                mini: true,
                                heroTag: 5,
                            }),
                            new FloatingActionButton({
                                child: new Icon(Icons.add),
                                tooltip: "FloatingActionButton",
                                heroTag: 6,
                            }),
                            new FloatingActionButton({
                                child: new Icon(Icons.add),
                                shape: new RoundedRectangleBorder({
                                    borderRadius: BorderRadius.circular(12.0)
                                }),
                                heroTag: 7,
                            }),
                        ]
                    }),
                ],
            })
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/F/FlutterLogo.js":
/*!*******************************************************!*\
  !*** ./lib/app_demo/widget_examples/F/FlutterLogo.js ***!
  \*******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 62:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    ListTile,
    MainAxisAlignment,
    FlutterLogo,
    Row,
    Colors,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleFlutterLogo(); }
}

class PageExampleFlutterLogo extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('FlutterLogo'),
            }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text("FlutterLogo.size") }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            new FlutterLogo(),
                            new FlutterLogo({ size: 48 }),
                            new FlutterLogo({ size: 72 }),
                        ]
                    }),
                    new ListTile({ title: new Text("FlutterLogo.colors") }),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                            new FlutterLogo({ size: 48, colors: Colors.amber }),
                            new FlutterLogo({ size: 48, colors: Colors.pink }),
                            new FlutterLogo({ size: 48, colors: Colors.green }),
                        ]
                    }),
                ],
            })
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/F/FractionallySizedBox.js":
/*!****************************************************************!*\
  !*** ./lib/app_demo/widget_examples/F/FractionallySizedBox.js ***!
  \****************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 83:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Expanded,
    Container,
    EdgeInsets,
    Colors,
    Column,
    FractionallySizedBox,
    Alignment,
    ListTile,
    Slider,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleFlutterLogo(); }
}

class PageExampleFlutterLogo extends MXJSWidgetState {
    constructor() {
        super();
        this._widthFactor = 0.5;
        this._heightFactor = 0.2;
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('FlutterLogo'),
            }),
            body: new Column({
                children: [
                    new Expanded({
                        child: new FractionallySizedBox({
                            alignment: Alignment.center,
                            widthFactor: this._widthFactor,
                            heightFactor: this._heightFactor,
                            child: new Container({ color: Colors.blue }),
                        }),
                    }),
                    new ListTile({
                        title: new Text(
                            "水平方向占比: " + (this._widthFactor * 100).toFixed(1) + "%"
                        )
                    }),
                    new Slider({
                        min: 0.0, max: 1.0, value: this._widthFactor,
                        onChanged: function (value) {
                            this.setState(function () {
                                this._widthFactor = value;
                            }.bind(this));
                        }.bind(this),
                    }),
                    new ListTile({
                        title: new Text(
                            "垂直方向占比: " + (this._heightFactor * 100).toFixed(1) + "%"
                        )
                    }),
                    new Slider({
                        min: 0.0, max: 1.0, value: this._heightFactor,
                        onChanged: function (value) {
                            this.setState(function () {
                                this._heightFactor = value;
                            }.bind(this))
                        }.bind(this),
                    }),
                ],
            }),
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/G/GestureDetector.js":
/*!***********************************************************!*\
  !*** ./lib/app_demo/widget_examples/G/GestureDetector.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 109:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Container,
    Alignment,
    Colors,
    Column,
    Row,
    Expanded,
    ListTile,
    GestureDetector,
    Center,
    ListView,
    TextStyle,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 手势识别组件
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleGestureDetector();
    }
}

class PageExampleGestureDetector extends MXJSWidgetState {
    constructor() {
        super();
        this._infoCommon = 'idle';
        this._infoOffset = 'idle';
    }

    _buildCommon() {
        return new GestureDetector({
            onTap: function () {
                this.setState(function () {
                    this._infoCommon = 'onTap';
                }.bind(this));
                console.log(this._infoCommon);
            }.bind(this),
            onLongPress: function () {
                this.setState(function () {
                    this._infoCommon = 'onLongPress';
                }.bind(this));
                console.log(this._infoCommon);
            }.bind(this),
            child: new Container({
                alignment: Alignment.center,
                height: 200,
                color: Colors.orange,
                child: new Text(this._infoCommon, {
                    style: new TextStyle({ fontSize: 20, color: Colors.white }),
                }),
            })
        });
    }

    _onTapUp(details) {
        console.log(details);
        console.log(details.localPosition);
        console.log(details.globalPosition);
        this.setState(function() {
            this._infoOffset = 'onTapUp\n'+details.localPosition+'\n'+details.globalPosition;
        }.bind(this));
    }

    _buildOffset() {
        return new GestureDetector({
            onTapUp: this._onTapUp.bind(this),
            // onTapDown: function(details) {
            //     this.setState(function() {
            //         this._infoOffset = 'onTapDown\n'+details.localPosition+'\n'+details.globalPosition;
            //     })
            //     console.log(details.localPosition);
            // }.bind(this),
            child: new Container({
                alignment: Alignment.center,
                height: 200,
                color: Colors.orange,
                child: new Text(this._infoOffset, {
                    style: new TextStyle({fontSize: 20, color: Colors.white}),
                }),
            }),
        });
    }

    build() {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('GestureDetector'),
            }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text('点击长按试试？') }),
                    this._buildCommon(),
                    new ListTile({ title: new Text('换个位置试试？') }),
                    this._buildOffset(),
                ]
            }),
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
};

/***/ }),

/***/ "./lib/app_demo/widget_examples/G/GridView.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/widget_examples/G/GridView.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 39:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    Center,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 可滚动的2D数组组件
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleGridView();
    }
}

class PageExampleGridView extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('GridView'),
            }),
            body: new Center({
                child: new Text('写到半路发现MXFlutter中暂未实现该组件～'),
            })
        });
        return widget;
    }

}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/H/Hero.js":
/*!************************************************!*\
  !*** ./lib/app_demo/widget_examples/H/Hero.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 88:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    MXJSStatelessWidget,
    Scaffold,
    AppBar,
    Text,
    Container,
    Alignment,
    ListTile,
    GestureDetector,
    ListView,
    Hero,
    Image,
    Navigator,
    MaterialPageRoute,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 动画页面切换组件
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleHero();
    }
}

class PageExampleHero extends MXJSWidgetState {
    constructor() {
        super();
    }
    build(context) {
        var hero = new Hero({
            tag: 'hero',
            child: new Container({
                child: Image.asset('people/ali_landscape.png', {
                    mxPackage: 'flutter_gallery_assets',
                    fit: BoxFit.cover,
                    height: 250
                }),
            })
        })
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('Hero'),
            }),
            body: new ListView({
                children: [
                    new ListTile({title: new Text('点击下方图片试试～')}),
                    new GestureDetector({
                        onTap: function() {
                            Navigator.push(context, new MaterialPageRoute({
                                builder: function () {
                                    return new _HeroDemo();
                                }
                            }))
                        }.bind(this),
                        child: hero,
                    })
                ]
            }),
        });
        return widget;
    }
}

class _HeroDemo extends MXJSStatelessWidget {
    build() {
        return new Scaffold({
            appBar: new AppBar({ title: new Text('Hero New Page') }),
            body: new Container({
                alignment: Alignment.center,
                child: new Hero({
                    tag: 'hero',
                    child: Image.asset('people/ali_landscape.png', {
                        mxPackage: 'flutter_gallery_assets',
                        fit: BoxFit.cover,
                        height: 250
                    }),
                }),
            }),
        });

    }
}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/I/IconButton.js":
/*!******************************************************!*\
  !*** ./lib/app_demo/widget_examples/I/IconButton.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 68:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    MXJSStatelessWidget,
    Scaffold,
    AppBar,
    Text,
    Container,
    Alignment,
    ListTile,
    GestureDetector,
    ListView,
    Hero,
    Image,
    Navigator,
    MaterialPageRoute,
    IconButton,
    Icon,
    Icons,
    Colors,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 按钮组件
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleIconButton();
    }
}

class PageExampleIconButton extends MXJSWidgetState {
    constructor() {
        super();
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('IconButton') }),
            body: new ListView({
                children: [
                    new ListTile({ title: new Text('普通图标按钮') }),
                    new IconButton({
                        icon: new Icon(Icons.person),
                        iconSize: 30,
                        color: Colors.red,
                        onPressed: function() {},
                    }),
                    new ListTile({ title: new Text('长按显示提示 且有颜色变化') }),
                    new IconButton({
                        tooltip: '这是一个图标按钮',
                        icon: new Icon(Icons.person),
                        iconSize: 30,
                        color: Colors.green,
                        highlightColor: Colors.red,
                        splashColor: Colors.orange,
                        disableColor: Colors.grey,
                        onPressed: function() {},
                    }),
                ]
            }),
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/I/Image.js":
/*!*************************************************!*\
  !*** ./lib/app_demo/widget_examples/I/Image.js ***!
  \*************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 81:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    ListTile,
    AppBar,
    Text,
    Colors,
    ListView,
    Image,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleImage();
    }
}
class PageExampleImage extends MXJSWidgetState {
    constructor() {
        super("PageExampleImage");
    }

    genImageUI(boxFitName) {
        return [
            new ListTile({
                title: new Text('BoxFit.' + boxFitName,),
            }),
            new Container({
                height: 150,
                width: 300,
                color: Colors.orange,
                child: Image.asset('people/ali_landscape.png', {
                    mxPackage: 'flutter_gallery_assets',
                    fit: BoxFit[boxFitName],
                    height: 100
                }),
            }),
        ];
    }


    build() {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('Image'),
            }),
            body: new ListView({
                children: [
                    new ListTile({
                        title: new Text('加载网络图片',),
                    }),
                    Image.network('https://cdn.pixabay.com/photo/2015/10/30/20/13/sunrise-1014712_960_720.jpg', {
                        fit: BoxFit.cover,
                        height: 250
                    }),
                    new ListTile({
                        title: new Text('加载本地图片',),
                    }),
                    Image.asset('people/ali_landscape.png', {
                        mxPackage: 'flutter_gallery_assets',
                        fit: BoxFit.cover,
                        height: 250
                    }),
                    ...this.genImageUI("contain"),
                    ...this.genImageUI("fill"),
                    ...this.genImageUI("fitHeight"),
                    ...this.genImageUI("fitWidth"),
                    ...this.genImageUI("scaleDown"),
                    ...this.genImageUI("none"),
                ],
            })
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/I/IndexedStack.js":
/*!********************************************************!*\
  !*** ./lib/app_demo/widget_examples/I/IndexedStack.js ***!
  \********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 94:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    AppBar,
    Text,
    Colors,
    IndexedStack,
    Center,
    Icon,
    Icons,
    Alignment,
    Row,
    IconButton,
    MainAxisAlignment,
    Column,
    Wrap,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleIndexedStack();
    }
}

class PageExampleIndexedStack extends MXJSWidgetState {
    constructor() {
        super('IndexedStack');
        this._index = 1;
    }

    genIndexedStack(containerColor, iconName, index) {
        return new Center({
            child: new Container({
                height: 300,
                width: 300,
                color: Colors[containerColor],
                alignment: Alignment.center,
                child: new Wrap({
                    children: [
                        new Text('NO.' + index),
                        new Icon(Icons[iconName]),
                    ]
                })

            })
        });
    }

    genIndexedIcon(iconName, index) {
        return new IconButton({
            icon: new Icon(Icons[iconName]),
            onPressed: function () {
                this.setState(function () {
                    this._index = index;
                }.bind(this));
            }.bind(this),
        })
    }

    build() {
        let widget = new Scaffold({
            appBar: new AppBar({ title: new Text('IndexedStack') }),
            body: new Column({
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                        new IndexedStack({
                            index: this._index,
                            children: [
                                this.genIndexedStack("red", "school", 0),
                                this.genIndexedStack("green", "person", 1),
                                this.genIndexedStack("yellow", "home", 2),
                            ]
                        }),
                        new Row({
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                                this.genIndexedIcon("school", 0),
                                this.genIndexedIcon("person", 1),
                                this.genIndexedIcon("home", 2),
                            ]
                        })
                    ]
                }),
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/I/IntrinsicHeight.js":
/*!***********************************************************!*\
  !*** ./lib/app_demo/widget_examples/I/IntrinsicHeight.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 91:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    Container,
    AppBar,
    Text,
    Colors,
    Row,
    IntrinsicHeight,
    ListView,
    ListTile,
    MainAxisAlignment,
    TabBar,
    Tab,
    TabBarView,
    DefaultTabController,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 根据内部子控件高度调整高度
// 性能损耗较大 不推荐使用
class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }
    createState() {
        return new PageExampleIntrinsicHeight();
    }
}

class PageExampleIntrinsicHeight extends MXJSWidgetState {
    constructor() {
        super('IntrinsicHeight');
    }

    _withoutIntrinsicHeight() {
        return new Row({
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
                new Container({ color: Colors.blue, width: 100 }),
                new Container({ color: Colors.red, width: 50, height: 100 }),
                new Container({ color: Colors.green, width: 100 }),
            ],
        });
    }

    _withIntrinsicHeight() {
        return new ListView({
            children: [
                new ListTile({ title: new Text('只有中间的Container设置了Height属性~') }),
                new IntrinsicHeight({
                    child: new Row({
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                            new Container({ color: Colors.blue, width: 100 }),
                            new Container({ color: Colors.red, width: 50, height: 100 }),
                            new Container({ color: Colors.green, width: 100 }),
                        ],
                    }),
                }),
            ]
        });
    }

    build() {
        let widget = new DefaultTabController({
            length: 2,
            child: new Scaffold({
                appBar: new AppBar({
                    title: new Text('IntrinsicHeight'),
                    bottom: new TabBar({
                        scrollable: true,
                        tabs: [
                            new Tab({ text: "未使用IntrinsicHeight" }),
                            new Tab({ text: "使用IntrinsicHeight" }),
                        ],
                    }),
                }),
                body: new TabBarView({
                    children: [
                        this._withoutIntrinsicHeight(),
                        this._withIntrinsicHeight(),
                    ]
                }),
            })
        });
        return widget;
    }
}

module.exports = {
    ExampleWidget,
}

/***/ }),

/***/ "./lib/app_demo/widget_examples/I/IntrinsicWidth.js":
/*!**********************************************************!*\
  !*** ./lib/app_demo/widget_examples/I/IntrinsicWidth.js ***!
  \**********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 83:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  Container,
  AppBar,
  Text,
  Colors,
  Row,
  IntrinsicHeight,
  ListView,
  ListTile,
  MainAxisAlignment,
  TabBar,
  Tab,
  TabBarView,
  DefaultTabController,
  IntrinsicWidth,
  Column,
  Center,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 相比IntrinsicHeight多了两参数stepHeight、stepWidth
class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }
  createState() {
    return new PageExampleIntrinsicWidth();
  }
}

class PageExampleIntrinsicWidth extends MXJSWidgetState {
  constructor() {
    super("IntrinsicWidth");
  }

  _withWidthHeight(_stepHeight,_stepWidth) {
      return new Column({
        children: [
          new Center({ child: new Text("stepWidth:"+_stepWidth+"\nstepHeight:"+_stepHeight) }),
          new IntrinsicWidth({
            stepHeight: _stepHeight,
            stepWidth: _stepWidth,
            child: new Column({
              children: [
                new Container({ color: Colors.blue, height: 100 }),
                new Container({ color: Colors.red, height: 100, width: 150 }),
                new Container({ color: Colors.yellow, height: 250 }),
              ],
            }),
          }),
        ],
      });
  }

  build(context) {
    let widget = new DefaultTabController({
        length: 2,
        child: new Scaffold({
            appBar: new AppBar({
                title: new Text("Container"),
                bottom: new TabBar({
                    scrollable: true,
                    tabs: [
                        new Tab({ text: "NotNull" }),
                        new Tab({ text: "Null" }),
                    ],
                }),
            }),
            body: new TabBarView({
                children: [
                    this._withWidthHeight(450,300),
                    this._withWidthHeight(null,null),
                ],
            }),
        }),
    });
    return widget;
}
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/L/LimitedBox.js":
/*!******************************************************!*\
  !*** ./lib/app_demo/widget_examples/L/LimitedBox.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 69:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Text,
    ListView,
    LimitedBox,
    Container,
    Colors,
    Center,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() { return new PageExampleFloatingActionButton(); }
}

class PageExampleFloatingActionButton extends MXJSWidgetState {
    constructor() {
        super();
    }

    _colorfulContainers() {
        let colors = [
            Colors.blue/*[300]*/,
            Colors.pink/*[300]*/,
            Colors.orange/*[300]*/,
            Colors.green/*[300]*/,
            Colors.purple/*[300]*/,
            Colors.grey/*[300]*/,
        ];
        let list = [];
        for(var i = 0; i < 11; i ++) {
            var maxHeight = 100 + i * 10;
            list.push(
                new LimitedBox({
                    maxHeight: maxHeight,
                    child: new Container({
                        color: colors[i % 6],
                        child: new Center({
                            child: new Text("maxHeight: " + maxHeight.toString()),
                        }),
                    }),
                }),
            );
        }
        return list;
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('FloatingActionButton'),
            }),
            body: new ListView({
                children: this._colorfulContainers(),
            })
        });
        return widget;
    }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/L/ListBody.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/widget_examples/L/ListBody.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 98:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  ListBody,
  Container,
  Center,
  Axis,
  Colors,
  SingleChildScrollView,
  DefaultTabController,
  TabBar,
  Tab,
  TabBarView,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }

  createState() {
    return new PageExampleListBody();
  }
}

class PageExampleListBody extends MXJSWidgetState {
  constructor() {
    super();
  }

  _theContainer(color, text) {
    return new Container({
      height: 60.0,
      width: 60.0,
      color: color,
      child: new Center({
        child: new Text(text),
      }),
    });
  }

  _containerList() {
    let colors = [
        Colors.blue/*[300]*/,
        Colors.pink/*[300]*/,
        Colors.orange/*[300]*/,
        Colors.green/*[300]*/,
        Colors.purple/*[300]*/,
        Colors.grey/*[300]*/,
    ];
    let lists = [];
    for (let i = 1; i <= 30; i++) {
      lists.push(this._theContainer(colors[i % 6], i.toString()));
    }
    return lists;
  }

  build(context) {
    let widget = new DefaultTabController({
      length: 2,
      child: new Scaffold({
        appBar: new AppBar({
          title: new Text("ListBody"),
          bottom: new TabBar({
            tabs: [
              new Tab({ text: "Axis.vertical" }),
              new Tab({ text: "Axis.horizontal" }),
            ],
          }),
        }),
        body: new TabBarView({
          children: [
            new SingleChildScrollView({
              scrollDirection: Axis.vertical,
              child: new ListBody({
                mainAxis: Axis.vertical,
                children: this._containerList(),
              }),
            }),
            new SingleChildScrollView({
              scrollDirection: Axis.horizontal,
              child: new ListBody({
                mainAxis: Axis.horizontal,
                children: this._containerList(),
              }),
            }),
          ],
        }),
      }),
    });
    return widget;
  }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/L/ListTile.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/widget_examples/L/ListTile.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 127:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  ListView,
  ListTile,
  Container,
  Colors,
  CircleAvatar,
  Icon,
  Icons,
  IconButton,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }

  createState() {
    return new PageExampleListTile();
  }
}

class PageExampleListTile extends MXJSWidgetState {
  constructor() {
    super();
    this._selected = false;
  }

  _divider() {
    return new Container({
      height: 1.0,
      color: Colors.grey/*[400]*/,
    });
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text("ListTile"),
      }),
      body: new ListView({
        children: [
          new ListTile({
            title: new Text("基本的ListTile"),
          }),
          this._divider(),
          new ListTile({
            title: new Text("带有描述的ListTile"),
            subtitle: new Text("这个一条短描述"),
          }),
          this._divider(),
          new ListTile({
            title: new Text("三行带有描述的ListTile"),
            subtitle: new Text(
              "这个一条长长长长长长长长长长长长长长长长长长长长长长长长长长长长长长长长描述"
            ),
            isThreeLine: true,
          }),
          this._divider(),
          new ListTile({
            title: new Text("三行紧凑的的ListTile"),
            subtitle: new Text(
              "这个一条长长长长长长长长长长长长长长长长长长长长长长长长长长长长长长长长描述"
            ),
            isThreeLine: true,
            dense: true,
          }),
          this._divider(),
          new ListTile({
            title: new Text("带有图标的ListTile"),
            subtitle: new Text("000-0000-0000"),
            leading: new CircleAvatar({
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
              child: new Text("头"),
            }),
            trailing: new IconButton({
                icon: new Icon(Icons.call),
            }),
          }),
          this._divider(),
          new ListTile({
            title: new Text("可点击的ListTile"),
            onTap: function () {
              console.log("ListTile was Tapped.");
            },
          }),
          this._divider(),
          new ListTile({
            title: new Text(this._selected
              ? "点击左侧按钮取消选中"
              : "可长按选中的ListTile"),
            onLongPress: function () {
              if (this._selected == false)
                this.setState(
                  function () {
                    this._selected = !this._selected;
                  }.bind(this)
                );
            }.bind(this),
            selected: this._selected,
            leading: this._selected
              ? new IconButton({
                  icon: new Icon(Icons.check_box),
                  onPressed: function () {
                    this.setState(
                      function () {
                        this._selected = !this._selected;
                      }.bind(this)
                    );
                  }.bind(this),
                })
              : null,
          }),
          this._divider(),
        ],
      }),
    });
    return widget;
  }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/L/ListView.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/widget_examples/L/ListView.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 125:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  ListView,
  Container,
  Center,
  Axis,
  Colors,
  DefaultTabController,
  TabBar,
  Tab,
  TabBarView,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");


let colors = [
  Colors.blue/*[300]*/,
  Colors.pink/*[300]*/,
  Colors.orange/*[300]*/,
  Colors.green/*[300]*/,
  Colors.purple/*[300]*/,
  Colors.grey/*[300]*/,
  Colors.yellow/*[300]*/,
  Colors.red/*[300]*/,
  Colors.cyan/*[300]*/,
];

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }

  createState() {
    return new PageExampleListBody();
  }
}

class PageExampleListBody extends MXJSWidgetState {
  constructor() {
    super();
  }

  _theContainer(color, text) {
    return new Container({
      height: 60.0,
      width: 60.0,
      color: color,
      child: new Center({
        child: new Text(text),
      }),
    });
  }

  _containerBuilder(context, index) {
    return new Container({
      height: 60.0,
      width: 60.0,
      color: colors[index % 9],
      child: new Center({
        child: new Text(index.toString()),
      }),
    });
  }

  _sparatedBuilder(context, index) {
    return new Container({
      widget: 2.0,
      height: 2.0,
      color: index % 2 == 0 ? Colors.black54 : Colors.black,
    });
  }

  _containerList() {
    let lists = [];
    for (let i = 0; i < 31; i++) {
      lists.push(this._theContainer(colors[i % 9], i.toString()));
    }
    return lists;
  }

  build(context) {
    let widget = new DefaultTabController({
      length: 3,
      child: new Scaffold({
        appBar: new AppBar({
          title: new Text("ListBody"),
          bottom: new TabBar({
            tabs: [
              new Tab({ text: "垂直方向" }),
              new Tab({ text: "水平方向" }),
              new Tab({ text: "builder" }),
              // new Tab({ text: "separated" }),
            ],
          }),
        }),
        body: new TabBarView({
          children: [
            new ListView({
              children: this._containerList(),
            }),
            new ListView({
              scrollDirection: Axis.horizontal,
              children: this._containerList(),
            }),
            ListView.builder({
              itemCount: 31,
              itemBuilder: this._containerBuilder,
            }),
            // ListView.separated({
            //   itemCount: 31,
            //   itemBuilder: this._containerBuilder,
            //   separatorBuilder: this._sparatedBuilder,
            // }),
          ],
        }),
      }),
    });
    return widget;
  }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/M/MaterialApp.js":
/*!*******************************************************!*\
  !*** ./lib/app_demo/widget_examples/M/MaterialApp.js ***!
  \*******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 65:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  Colors,
  Center,
  MaterialApp,
  ThemeData,
  ListTile,
  ListView,
  Container,
  Column,
  CrossAxisAlignment,
  Color,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// Material应用的顶级组件 包含路由生成器、主题语言主页等属性
class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super('ExampleWidget');
  }
  createState() {
    return new PageExampleMaterialApp();
  }
}

class PageExampleMaterialApp extends MXJSWidgetState {
  constructor() {
    super('MaterialApp');
  }
  build() {
    let widget = new Scaffold({
        appBar: new AppBar({ title: new Text('MaterialApp') }),
        body: new Column({
          children: [
            new Container({
              height: 100,
              color: new Color(0xFFC5CAE9),
            }),
            new Container({
              height: 100,
              color: new Color(0xFF7986CB),
            }),
            new Container({
              height: 100,
              color: new Color(0xFF3949AB),
            }),
            new Container({
              height: 100,
              color: new Color(0xFF1A237E),
            }),
          ],
        }),
      // 主题相关
      // theme: new ThemeData({
      //   primaryColor: Colors.orange,
      // }),
    });
    return widget;
  }
}

module.exports = {
  ExampleWidget,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/M/MediaQuery.js":
/*!******************************************************!*\
  !*** ./lib/app_demo/widget_examples/M/MediaQuery.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 67:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  Colors,
  Row,
  ListView,
  MediaQuery,
  MainAxisAlignment,
  TextStyle,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// MediaQuery获取屏幕尺寸 设备密度 文字缩放比例 边距等信息
class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }
  createState() {
    return new PageExampleMediaQuery();
  }
}

class PageExampleMediaQuery extends MXJSWidgetState {
  constructor() {
    super("MediaQuery");
  }

  _buildQueryData(name, value) {
    return new Row({
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        new Text(name, {
          style: new TextStyle({ fontSize: 20, color: Colors.black }),
        }),
        new Text(value.toString(), {
          style: new TextStyle({ fontSize: 20, color: Colors.orange }),
        }),
      ],
    });
  }
  
  build(context) {
    let queryData = MediaQuery.of(context);
    let widget = new Scaffold({
      appBar: new AppBar({ title: new Text("MediaQuery") }),
      body: new ListView({
        itemExtent: 60,
        children: [
          this._buildQueryData("size", queryData.size),
          this._buildQueryData("padding.top", queryData.padding.top),
          this._buildQueryData("padding.left", queryData.padding.left),
          this._buildQueryData("padding.right", queryData.padding.right),
          this._buildQueryData("padding.bottom", queryData.padding.bottom),
          this._buildQueryData("viewInsets", queryData.viewInsets),
          new Text("还有很多其他属性不便展示 可以继续探索～", {
            style: new TextStyle({ fontSize: 15, color: Colors.black }),
          }),
        ],
      }),
    });
    return widget;
  }
}

module.exports = {
  ExampleWidget,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/N/Navigator.js":
/*!*****************************************************!*\
  !*** ./lib/app_demo/widget_examples/N/Navigator.js ***!
  \*****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 123:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  Scaffold,
  AppBar,
  Text,
  Colors,
  Row,
  ListView,
  MediaQuery,
  MainAxisAlignment,
  TextStyle,
  Center,
  Container,
  Navigator,
  ListTile,
  MaterialPageRoute,
  RaisedButton,
  BoxDecoration,
  BorderRadius,
  Radius,
  FlatButton,
  Expanded,
  IconButton,
  Icon,
  Icons,
  TextField,
  InputDecoration
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

// 路由管理控件: 通常使用于局部页面跳转的情况
class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }
  createState() {
    return new PageExampleNavigator();
  }
}

class PageExampleNavigator extends MXJSWidgetState {
  constructor() {
    super("Navigator");
  }

  _buildSearchBar(context) {
    return new Container({
      child: new Row({
        children: [
          new Expanded({
            child: new FlatButton({
              onPressed: function () {
                Navigator.push(
                  context,
                  new MaterialPageRoute({
                    builder: function (context) {
                      return new SearchPage();
                    },
                  })
                );
              },
              child: new Text("搜索框"),
            }),
          }),
        ],
      }),
      decoration: new BoxDecoration({
        borderRadius: BorderRadius.all(Radius.circular(4.0)),
        color: Colors.blue,
      }),
    });
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({ title: this._buildSearchBar(context)}),
      body: new Center({
        child: new Text("点击上方搜索框\n调用Navigator.push()"),
      }),
    });
    return widget;
  }
}
class SearchPage extends MXJSStatefulWidget {
    constructor() {
        super('SearchPage');
    }
    createState() {
        return new SearchPageState();
    }
}

class SearchPageState extends MXJSWidgetState {

    _buildSearch(context) {
        return new Container({
            child: new Row({
                children: [
                    new Expanded({
                        child: new TextField({
                            autofocus: true,
                            decoration: new InputDecoration({
                                hintText: "输入框",
                                prefixIcon: new Icon(Icons.person)
                            }),
                        })
                    }),
                ]
            })
        })
    }
    build(context) {
        return new Scaffold({
            appBar: new AppBar({title: this._buildSearch()}),
            body: new Center({
                child: new Text('SearchDetails'),
            }),
        });
    }
}

module.exports = {
  ExampleWidget,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/S/Switch.js":
/*!**************************************************!*\
  !*** ./lib/app_demo/widget_examples/S/Switch.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 158:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
    MXJSLog,
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MXJSStatelessWidget,
    MaterialApp,
    Scaffold,
    Container,
    ListTile,
    Center,
    Color,
    AppBar,
    SnackBar,
    Text,
    Icon,
    IconData,
    EdgeInsets,
    Colors,
    IconButton,
    FlatButton,
    RaisedButton,
    FloatingActionButton,
    Column,
    Row,
    DropdownButton,
    DropdownMenuItem,
    MainAxisAlignment,
    TextStyle,
    PopupMenuButton,
    PopupMenuItem,
    ButtonBar,
    MainAxisSize,
    TextDecoration,
    RichText,
    TextSpan,
    Expanded,
    FontWeight,
    TextFormField,
    InputDecoration,
    UnderlineInputBorder,
    TextInputType,
    SizedBox,
    TextField,
    TextEditingController,
    ListView,
    Slider,
    Icons,
    TextDecorationStyle,
    TextOverflow,
    Padding,
    AnimatedContainer,
    Duration,
    Switch,
    Image,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class ExampleWidget extends MXJSStatefulWidget {
    constructor() {
        super('ExampleWidget');
    }

    createState() {
        return new PageExampleSwitchState();
    }
}

class PageExampleSwitchState extends MXJSWidgetState {

    constructor() {
        super();
        this._selected1 = false;
        this._selected2 = false;
    }

    _changeState1() {
        this.setState(function () {
            this._selected1 = !this._selected1;
        }.bind(this));
    }

    _changeState2() {
        this.setState(function() {
            this._selected2 = !this._selected2;
        }.bind(this));
    }

    _getTextStyle() {
        return new TextStyle({
            color: Colors.blue,
            fontSize: 18,
            height: 1.2,
        });
    }

    build(context) {
        let widget = new Scaffold({
            appBar: new AppBar({
                title: new Text('PageExampleAbsorbPointer'),
            }),
            body: new Column({
                children: [
                    new SectionTitle('Switch基础用法'),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                            new Switch({
                                value: this._selected1,
                                onChanged: this._changeState1.bind(this),
                            }),
                            new Switch({
                                value: this._selected1,
                                onChanged: this._changeState1.bind(this),
                            }),
                            new Switch({
                                value: this._selected1,
                                onChanged: this._changeState1.bind(this),
                            }),
                            new Switch({
                                value: this._selected1,
                                onChanged: this._changeState1.bind(this),
                            }),
                            this._selected1 
                                ? new Text('true')
                                : new Text('false'),
                        ]
                    }),
                    new SectionTitle('Switch图片用法'),
                    new Row({
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                            new Text('TODO : ImageProvider'),
                            new Switch({
                                value: this._selected2,
                                onChanged: this._changeState2.bind(this),
                                activeColor: Colors.red,
                                // inactiveThumbImage: Colors.green,
                                // activeThumbImage: Image.network('https://picsum.photos/200'),
                            }),
                            this._selected2 
                                ? new Text('true') 
                                : new Text('false'),
                        ]
                    })
                ]
            })
        });
        return widget;
    }

}

module.exports = {
    ExampleWidget,
};

/***/ }),

/***/ "./lib/app_demo/widget_examples/W/Wrap.js":
/*!************************************************!*\
  !*** ./lib/app_demo/widget_examples/W/Wrap.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 104:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  Chip,
  CircleAvatar,
  Card,
  Wrap,
  ListView,
  ListTile,
  EdgeInsets,
  Container,
  Axis,
  WrapAlignment,
  Colors,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }

  createState() {
    return new PageExampleWrap();
  }
}

class PageExampleWrap extends MXJSWidgetState {
  constructor() {
    super();
  }

  _chipList() {
    let colorList = [
      Colors.orange/*[400]*/,
      Colors.blue/*[400]*/,
      Colors.green/*[400]*/,
      Colors.pink/*[400]*/,
      Colors.purple/*[400]*/,
    ];
    let firstAlpha = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"];
    let chipText = ["Alpha", "Beta", "Chip", "Default", "Element", "Format", "Great", "Hero", "Index", "Javascript"];
    let list = [];
    for (var i = 0; i < 10; i++) {
      let w = new Chip({
        avatar: new CircleAvatar({
          backgroundColor: colorList[i % 5],
          foregroundColor: Colors.white,
          child: new Text(firstAlpha[i]),
        }),
        label: new Text(chipText[i]),
      });
      list.push(w);
    }
    return list;
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({ title: new Text("Wrap") }),
      body: new ListView({
        padding: EdgeInsets.all(12.0),
        children: [
          new ListTile({ title: new Text("普通的Wrap") }),
          new Card({
            child: new Wrap({
              children: this._chipList(),
            })
          }),
          new ListTile({ title: new Text("增加了项边距的Wrap") }),
          new Card({
            child: new Wrap({
              spacing: 4.0,
              children: this._chipList(),
            })
          }),
          new ListTile({ title: new Text("垂直方向排列的Wrap") }),
          new Container({
            height: 220.0,
            child: new Card({
              child: new Wrap({
                direction: Axis.vertical,
                children: this._chipList(),
              })
            }),
          }),
          new ListTile({ title: new Text("每行都居中显示的Wrap") }),
          new Card({
            child: new Wrap({
              alignment: WrapAlignment.spaceAround,
              spacing: 4.0,
              children: this._chipList(),
            })
          }),
        ],
      }),
    });
    return widget;
  }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/index.js":
/*!***********************************************!*\
  !*** ./lib/app_demo/widget_examples/index.js ***!
  \***********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: __webpack_require__, module */
/*! CommonJS bailout: module.exports is used directly at 199:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  IconButton,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  Image,
  Theme,
  Padding,
  Scrollbar,
  Key,
  Navigator,
  MaterialPageRoute,
  Align,
  Stack,
  Alignment,
  GestureDetector,
  ScrollController
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../component/section_title.js */ "./lib/app_demo/component/section_title.js");

let widgetExamples = [
  "Text",
]

class WidgetExamplesPage extends MXJSStatelessWidget {
  constructor() {
    super("WidgetExamplesPage");
    this.widgetsArray = widgetsName.split(',');
    this.indexArray = this.calcIndexArray(this.widgetsArray);

    this.scrollController = new ScrollController();

  }

  calcIndexArray(widgetsArray) {

    let tempSet = new Set();
    for (let i = 1; i < widgetsArray.length; ++i) {
      let wName = widgetsArray[i];
      tempSet.add(wName.substring(0, 1));
    }

    return Array.from(tempSet);
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text('Widget Examples'),
      }),
      body: new Stack({
        children: [new Scrollbar({
          child: ListView.builder({
            controller: this.scrollController,
            itemCount: this.widgetsArray.length,
            itemBuilder: function (context, index) {
              return new ListViewItem(this.widgetsArray[index]);
            }.bind(this)
          })
        }),
        new Align({
          alignment: Alignment.centerRight,//new FractionalOffset(1.0, 0.5),
          child: new SizedBox({
            width: 25,
            child: new Padding({
              padding: EdgeInsets.only({ top: 20 }),
              child: ListView.builder({
                itemCount: this.indexArray.length,
                itemBuilder: function (context, index) {
                  let t = this.indexArray[index];
                  return new GestureDetector({
                    onTap: function () {
                      this.onIndexTap(index)
                    }.bind(this),
                    child: new Text(t)
                  });
                }.bind(this)
              })
            })
          })
        })
        ]
      })
    });
    return widget;
  }

  onIndexTap(index) {

    let prefix = this.indexArray[index];
    let count = 0;
    for (; count < this.widgetsArray.length; ++count) {

      if (this.widgetsArray[count].substring(0, 1) == prefix) {
        break;
      }
    }

    let h = count * 45;
    this.scrollController.jumpTo(h);
  }
}

class ListViewItem extends MXJSStatelessWidget {
  constructor(title) {
    super('ListViewItem');
    this.title = title;
    this.subtitle = "";

  }

  build(context) {

    let title = this.title;
    let prefix = title.substring(0, 1);
    let example = null;
    
    try {
      example = __webpack_require__("./lib/app_demo/widget_examples sync recursive ^\\.\\/.*\\.js$")("./" + prefix + "/" + title + ".js");
    } catch (error) {
      
    }
   
    let c = Theme.of(context).primaryColor;

    if(!example){
      c = Colors.gray;
      title = this.title + " (未完成示例)"; 
    }

    return new Container({
      height: 45,
      child: new ListTile({
        title: new Text(title),
        //subtitle: new Text(this.subtitle),
        leading: new Icon(new IconData(0xe06d, { fontFamily: 'MaterialIcons' }), { color: c}),
        //trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
        onTap: function () {
          Navigator.push(context, new MaterialPageRoute({
            builder: function (context) {
              return new example.ExampleWidget ;
            }
          }))
        }.bind(this)
      })
    });
  }
}

let widgetsName = "AbsorbPointer,AlertDialog,Align,AnimatedBuilder,AnimatedContainer,AnimatedCrossFade,AnimatedDefaultTextStyle,AnimatedListState,AnimatedModalBarrier,AnimatedOpacity,AnimatedPhysicalModel,AnimatedPositioned,AnimatedSize,AnimatedWidget,AnimatedWidgetBaseState,Appbar,AspectRatio,AssetBundle,BackdropFilter,Baseline,BottomNavigationBar,BottomSheet,ButtonBar,Card,Center,Checkbox,Chip,CircularProgressIndicator,ClipOval,ClipPath,ClipRect,Column,ConstrainedBox,Container,CupertinoActionSheet,CupertinoActivityIndicator,CupertinoAlertDialog,CupertinoButton,CupertinoContextMenu,CupertinoDatePicker,CupertinoDialog,CupertinoDialogAction,CupertinoFullscreenDialogTransition,CupertinoNavigationBar,CupertinoPageScaffold,CupertinoPageTransition,CupertinoPicker,CupertinoPopupSurface,CupertinoScrollbar,CupertinoSegmentedControl,CupertinoSlider,CupertinoSlidingSegmentedControl,CupertinoSwitch,CupertinoTabBar,CupertinoTabScaffold,CupertinoTabView,CupertinoTextField,CupertinoTimerPicker,CustomMultiChildLayout,CustomPaint,CustomScrollView,CustomSingleChildLayout,DataTable,Date & Time Pickers,DecoratedBox,DecoratedBoxTransition,DefaultTextStyle,Dismissible,Divider,DragTarget,Draggable,Drawer,DropdownButton,ExcludeSemantics,Expanded,ExpansionPanel,FadeTransition,FittedBox,FlatButton,FloatingActionButton,Flow,FlutterLogo,Form,FormField,FractionalTranslation,FractionallySizedBox,FutureBuilder,GestureDetector,GridView,Hero,Icon,IconButton,IgnorePointer,Image,IndexedStack,IntrinsicHeight,IntrinsicWidth,LayoutBuilder,LimitedBox,LinearProgressIndicator,ListBody,ListTile,ListView,LongPressDraggable,MaterialApp,MediaQuery,MergeSemantics,Navigator,NestedScrollView,NotificationListener,Offstage,Opacity,OutlineButton,OverflowBox,Padding,PageView,Placeholder,PopupMenuButton,PositionedTransition,Radio,RaisedButton,RawImage,RawKeyboardListener,RefreshIndicator,RichText,RotatedBox,RotationTransition,Row,Scaffold,ScaleTransition,ScrollConfiguration,Scrollable,Scrollbar,Semantics,SimpleDialog,SingleChildScrollView,SizeTransition,SizedBox,SizedOverflowBox,SlideTransition,Slider,SliverAppBar,SnackBar,Stack,Stepper,StreamBuilder,Switch,TabBar,TabBarView,Table,Text,TextField,Theme,Tooltip,Transform,WidgetsApp,Wrap";

module.exports = {
  WidgetExamplesPage,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples/t/Table.js":
/*!*************************************************!*\
  !*** ./lib/app_demo/widget_examples/t/Table.js ***!
  \*************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 122:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  Table,
  TableRow,
  TableCell,
  TableBorder,
  BorderSide,
  Colors,
  BoxDecoration,
  ListView,
  EdgeInsets,
  Center,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }

  createState() {
    return new PageExampleTable();
  }
}

class PageExampleTable extends MXJSWidgetState {
  constructor() {
    super();
  }

  _randomName() {
    let name = String.fromCharCode(65 + Math.floor(Math.random() * 26));
    let length = Math.floor(Math.random() * 5) + 2;
    for (var i = 0; i < length; i++)
      name += String.fromCharCode(97 + Math.floor(Math.random() * 26));
    return name;
  }

  _randomPerson(index) {
    let numYear = (Math.floor(Math.random() * 10) + 2010).toString();
    let numRand = ("0000" + Math.floor(Math.random() * 1000)).slice(-4);
    let num = numYear + numRand;
    let name = this._randomName();
    let age = Math.floor(Math.random() * 30) + 21;
    let sex = Math.floor(Math.random() * 2) == 0 ? "男" : "女";
    let tableRow = new TableRow({
      decoration: new BoxDecoration({
        color: index % 2 == 0 ? Colors.white : Colors.grey/*[200]*/,
      }),
      children: [
        new TableCell({
          child: new Center({ child: new Text(num.toString()) }),
        }),
        new TableCell({
          child: new Center({ child: new Text(name.toString()) }),
        }),
        new TableCell({
          child: new Center({ child: new Text(sex.toString()) }),
        }),
        new TableCell({
          child: new Center({ child: new Text(age.toString()) }),
        }),
      ],
    });
    return tableRow;
  }

  _createTable() {
    let list = [];
    let tableTitle = new TableRow({
      decoration: new BoxDecoration({
        color: Colors.blue/*[600]*/,
      }),
      children: [
        new TableCell({ child: new Center({ child: new Text("工号") }) }),
        new TableCell({ child: new Center({ child: new Text("姓名") }) }),
        new TableCell({ child: new Center({ child: new Text("性别") }) }),
        new TableCell({ child: new Center({ child: new Text("年龄") }) }),
      ],
    });
    list.push(tableTitle);
    for (let i = 0; i < 70; i++) {
      list.push(this._randomPerson(i));
    }
    console.log(list);
    return list;
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({ title: new Text("Table") }),
      body: new ListView({
        padding: EdgeInsets.all(12.0),
        children: [
          new Table({
            border: new TableBorder({
              top: new BorderSide({ width: 2.0, color: Colors.black }),
              bottom: new BorderSide({ width: 2.0, color: Colors.black }),
              left: new BorderSide({ width: 2.0, color: Colors.black }),
              right: new BorderSide({ width: 2.0, color: Colors.black }),
              horizontalInside: new BorderSide({
                width: 1.0,
                color: Colors.black54,
              }),
              verticalInside: new BorderSide({
                width: 1.0,
                color: Colors.black54,
              }),
            }),
            children: this._createTable(),
          }),
        ],
      }),
    });
    return widget;
  }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/t/TextField.js":
/*!*****************************************************!*\
  !*** ./lib/app_demo/widget_examples/t/TextField.js ***!
  \*****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 125:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  ListView,
  ListTile,
  EdgeInsets,
  TextField,
  InputDecoration,
  Icon,
  Icons,
  OutlineInputBorder,
  BorderSide,
  BorderRadius,
  Radius,
  Color,
  Colors,
  Container,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }

  createState() {
    return new PageExampleTextField();
  }
}

class PageExampleTextField extends MXJSWidgetState {
  constructor() {
    super();
    this._textFieldValue = "";
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({ title: new Text("TextField") }),
      body: new ListView({
        padding: EdgeInsets.symmetric({ horizontal: 25.0 }),
        children: [
          new ListTile({ title: new Text("基础的文本输入组件") }),
          new TextField(),
          new ListTile({ title: new Text("带有简单装饰的文本输入组件") }),
          new TextField({
            decoration: new InputDecoration({
              labelText: "用户名",
              icon: new Icon(Icons.person),
            }),
          }),
          new ListTile({ title: new Text("带有提示的文本输入组件") }),
          new TextField({
            decoration: new InputDecoration({
              hintText: "请输入用户名",
              helperText: "用户名长度为6-14个字母",
              icon: new Icon(Icons.person),
            }),
          }),
          new ListTile({ title: new Text("文本输入组件的错误提示") }),
          new TextField({
            decoration: new InputDecoration({
              errorText: "用户名输入错误",
              errorBorder: new OutlineInputBorder({
                borderSide: new BorderSide({ color: Colors.red }),
              }),
            }),
          }),
          new ListTile({ title: new Text("文本输入组件的字数统计") }),
          new TextField({
            maxLength: 20,
            onChanged: function (value) {
              this.setState(
                function () {
                  this._textFieldValue = value;
                }.bind(this)
              );
            }.bind(this),
            decoration: new InputDecoration({
              counterText: this._textFieldValue.length + "/20",
            }),
          }),
          new ListTile({ title: new Text("自定义形状与选中的文本输入组件") }),
          new TextField({
            decoration: new InputDecoration({
              fillColor: new Color(0x40404040),
              filled: true,
              enabledBorder: new OutlineInputBorder({
                borderSide: new BorderSide({ color: Colors.grey }),
                borderRadius: BorderRadius.all(Radius.circular(100.0)),
              }),
              focusedBorder: new OutlineInputBorder({
                borderSide: new BorderSide({ color: Colors.blue }),
                borderRadius: BorderRadius.all(Radius.circular(12.0)),
              }),
            }),
          }),
          new ListTile({ title: new Text("密码输入组件") }),
          new TextField({
            obscureText: true,
            obscuringCharacter: "*",
            decoration: new InputDecoration({
              hintText: "请输入密码",
              icon: new Icon(Icons.lock),
            }),
          }),
          new ListTile({ title: new Text("自定义光标的文本输入组件") }),
          new TextField({
            cursorColor: Colors.green,
            cursorWidth: 1.0,
            decoration: new InputDecoration({
              hintText: "自定义光标",
            }),
          }),
          new Container({ height: 240.0 }),
        ],
      }),
    });
    return widget;
  }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/t/Theme.js":
/*!*************************************************!*\
  !*** ./lib/app_demo/widget_examples/t/Theme.js ***!
  \*************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 166:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  ListView,
  Card,
  EdgeInsets,
  ListTile,
  DefaultTabController,
  Tab,
  TabBar,
  TabBarView,
  Column,
  Icon,
  Icons,
  ButtonBar,
  FlatButton,
  FloatingActionButton,
  Theme,
  ThemeData,
  BottomNavigationBar,
  BottomNavigationBarItem,
  Colors,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }

  createState() {
    return new PageExampleTheme();
  }
}

class PageExampleTheme extends MXJSWidgetState {
  constructor() {
    super();
    this._index = 0;
    this._themeList = [
      ThemeData.light(),
      ThemeData.dark(),
      new ThemeData({ primarySwatch: Colors.green }),
      new ThemeData({ primarySwatch: Colors.pink }),
      new ThemeData({ primarySwatch: Colors.orange }),
      new ThemeData({ primarySwatch: Colors.deepPurple }),
      new ThemeData({ primarySwatch: Colors.cyan }),
    ];
    this._themeNameList = [
      "蓝色",
      "夜晚",
      "绿色",
      "粉色",
      "橙色",
      "紫色",
      "天蓝",
    ];
    this._themeData = this._themeList[4];
  }

  _cardView() {
    return new ListView({
      padding: EdgeInsets.all(12.0),
      children: [
        new Card({
          child: new Column({
            mainAxisSize: MainAxisSize.min,
            children: [
              new ListTile({
                leading: new Icon(Icons.album),
                title: new Text("标题"),
                subtitle: new Text("描述描述描述描述"),
              }),
              new ButtonBar({
                children: [
                  new FlatButton({ child: new Text("分享") }),
                  new FlatButton({
                    child: new Text("关闭"),
                    onPressed: function () {},
                  }),
                ],
              }),
            ],
          }),
        }),
      ],
    });
  }

  _themeChangeTile(index) {
    return new ListTile({
      onTap: function () {
        this.setState(
          function () {
            this._themeData = this._themeList[index];
          }.bind(this)
        );
      }.bind(this),
      title: new Text(this._themeNameList[index]),
      leading:
        this._themeData == this._themeList[index]
          ? new Icon(Icons.check_box)
          : null,
    });
  }

  _themeChange() {
    let tiles = [];
    for (var i = 0; i < 7; i++) tiles.push(this._themeChangeTile(i));
    return new ListView({
      children: tiles,
    });
  }

  build(context) {
    let widget = new Theme({
      data: this._themeData,
      child: new DefaultTabController({
        length: 2,
        child: new Scaffold({
          appBar: new AppBar({
            title: new Text("Theme"),
            bottom: new TabBar({
              tabs: [new Tab({ text: "示例" }), new Tab({ text: "主题" })],
            }),
          }),
          body: new TabBarView({
            children: [this._cardView(), this._themeChange()],
          }),
          floatingActionButton: new FloatingActionButton({
            child: new Icon(Icons.add),
          }),
          bottomNavigationBar: new BottomNavigationBar({
            currentIndex: this._index,
            onTap: function (value) {
              this.setState(
                function () {
                  this._index = value;
                }.bind(this)
              );
            }.bind(this),
            items: [
              new BottomNavigationBarItem({
                title: new Text("首页"),
                icon: new Icon(Icons.home),
              }),
              new BottomNavigationBarItem({
                title: new Text("书籍"),
                icon: new Icon(Icons.book),
              }),
              new BottomNavigationBarItem({
                title: new Text("我的"),
                icon: new Icon(Icons.perm_identity),
              }),
            ],
          }),
        }),
      }),
    });
    return widget;
  }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/t/Transform.js":
/*!*****************************************************!*\
  !*** ./lib/app_demo/widget_examples/t/Transform.js ***!
  \*****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 79:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSWidgetState,
  MXJSStatefulWidget,
  Scaffold,
  AppBar,
  Text,
  ListView,
  EdgeInsets,
  Container,
  Colors,
  Transform,
  Matrix4,
  Center,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class ExampleWidget extends MXJSStatefulWidget {
  constructor() {
    super("ExampleWidget");
  }

  createState() {
    return new PageExampleTransform();
  }
}

class PageExampleTransform extends MXJSWidgetState {
  constructor() {
    super();
  }

  _dividerContainer(value = 120.0) {
    return new Container({ height: value });
  }

  _defaultContainer(text) {
    return new Container({
      child: new Container({
        height: 120.0,
        margin: EdgeInsets.symmetric({ horizontal: 80.0 }),
        color: Colors.blue,
        child: new Center({ child: new Text(text) }),
      }),
    });
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({ title: new Text("Transform") }),
      body: new ListView({
        padding: EdgeInsets.all(12.0),
        children: [
          new Transform({
            transform: Matrix4.rotationX(0.8),
            child: this._defaultContainer("Matrix4.rotationX(0.8)"),
          }),
          this._dividerContainer(40.0),
          new Transform({
            transform: Matrix4.rotationY(0.8),
            child: this._defaultContainer("Matrix4.rotationY(0.8)"),
          }),
          this._dividerContainer(40.0),
          new Transform({
            transform: Matrix4.rotationZ(0.2),
            child: this._defaultContainer("Matrix4.rotationZ(0.2)"),
          }),
          this._dividerContainer(80.0),
          new Transform({
            transform: Matrix4.skew(0.2, 0.1),
            child: this._defaultContainer("Matrix4.skew(0.2, 0.1)"),
          }),
          this._dividerContainer(40.0),
        ],
      }),
    });
    return widget;
  }
}

module.exports = { ExampleWidget };


/***/ }),

/***/ "./lib/app_demo/widget_examples/t/text.js":
/*!************************************************!*\
  !*** ./lib/app_demo/widget_examples/t/text.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 121:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {
  MXJSLog,
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MXJSStatelessWidget,
  MaterialApp,
  Scaffold,
  Container,
  ListTile,
  Center,
  Color,
  AppBar,
  SnackBar,
  Text,
  Icon,
  IconData,
  EdgeInsets,
  Colors,
  IconButton,
  FlatButton,
  RaisedButton,
  FloatingActionButton,
  Column,
  Row,
  DropdownButton,
  DropdownMenuItem,
  MainAxisAlignment,
  TextStyle,
  PopupMenuButton,
  PopupMenuItem,
  ButtonBar,
  MainAxisSize,
  TextDecoration,
  RichText,
  TextSpan,
  Expanded,
  FontWeight,
  TextFormField,
  InputDecoration,
  UnderlineInputBorder,
  TextInputType,
  SizedBox,
  TextField,
  TextEditingController,
  ListView,
  Slider,
  Icons,
  TextDecorationStyle,
  TextOverflow,
  Padding,
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

const { SectionTitle } = __webpack_require__(/*! ../../component/section_title.js */ "./lib/app_demo/component/section_title.js");

class ExampleWidget extends MXJSStatelessWidget {
  constructor() {
    super("ExampleWidget");
  }

  build(context) {
    let widget = new Scaffold({
      appBar: new AppBar({
        title: new Text("Text"),
      }),
      body: new ListView({
        children: [
          new SectionTitle("普通文本"),
          new ListTile({
            title: new Text("设置文本颜色", {
              style: new TextStyle({
                color: Colors.orange,
              }),
            }),
          }),
          new SectionTitle("富文本"),
          new Padding({
            padding: EdgeInsets.all(10),
            child: new RichText({
              text: new TextSpan({
                style: new TextStyle({
                  color: new Color(0xffff8c00),
                  fontSize: 18.0,
                  decoration: TextDecoration.underline,
                  decorationColor: Colors.orange,
                  decorationStyle: TextDecorationStyle.dashed,
                }),
                text:
                  "超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text，超长文案rich text",
                children: [
                  new TextSpan({
                    text: " style  ",
                    style: new TextStyle({
                      color: Colors.red,
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.none,
                    }),
                  }),
                  new TextSpan({
                    text: "your text",
                    style: new TextStyle({
                      color: Colors.blue,
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.none,
                    }),
                  }),
                ],
              }),
              overflow: TextOverflow.ellipsis,
              maxLines: 99,
            }),
          }),
        ],
      }),
    });
    return widget;
  }
}

module.exports = {
  ExampleWidget,
};


/***/ }),

/***/ "./lib/app_demo/widget_examples sync recursive ^\\.\\/.*\\.js$":
/*!********************************************************!*\
  !*** ./lib/app_demo/widget_examples sync ^\.\/.*\.js$ ***!
  \********************************************************/
/*! default exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: module, __webpack_require__.o, __webpack_require__ */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./A/Align.js": "./lib/app_demo/widget_examples/A/Align.js",
	"./A/AnimatedBuilder.js": "./lib/app_demo/widget_examples/A/AnimatedBuilder.js",
	"./A/AnimatedContainer.js": "./lib/app_demo/widget_examples/A/AnimatedContainer.js",
	"./A/AnimatedCrossFade.js": "./lib/app_demo/widget_examples/A/AnimatedCrossFade.js",
	"./A/AnimatedDefaultTextStyle.js": "./lib/app_demo/widget_examples/A/AnimatedDefaultTextStyle.js",
	"./A/AnimatedOpacity.js": "./lib/app_demo/widget_examples/A/AnimatedOpacity.js",
	"./A/AnimatedPhysicalModel.js": "./lib/app_demo/widget_examples/A/AnimatedPhysicalModel.js",
	"./A/AnimatedPositioned.js": "./lib/app_demo/widget_examples/A/AnimatedPositioned.js",
	"./A/AnimatedSize.js": "./lib/app_demo/widget_examples/A/AnimatedSize.js",
	"./A/Appbar.js": "./lib/app_demo/widget_examples/A/Appbar.js",
	"./A/AspectRatio.js": "./lib/app_demo/widget_examples/A/AspectRatio.js",
	"./B/Baseline.js": "./lib/app_demo/widget_examples/B/Baseline.js",
	"./B/BottomNavigationBar.js": "./lib/app_demo/widget_examples/B/BottomNavigationBar.js",
	"./B/ButtonBar.js": "./lib/app_demo/widget_examples/B/ButtonBar.js",
	"./C/Card.js": "./lib/app_demo/widget_examples/C/Card.js",
	"./C/Chip.js": "./lib/app_demo/widget_examples/C/Chip.js",
	"./C/Column.js": "./lib/app_demo/widget_examples/C/Column.js",
	"./C/Container.js": "./lib/app_demo/widget_examples/C/Container.js",
	"./C/CupertinoActivityIndicator.js": "./lib/app_demo/widget_examples/C/CupertinoActivityIndicator.js",
	"./C/CupertinoAlertDialog.js": "./lib/app_demo/widget_examples/C/CupertinoAlertDialog.js",
	"./C/CupertinoButton.js": "./lib/app_demo/widget_examples/C/CupertinoButton.js",
	"./C/CupertinoNavigationBar.js": "./lib/app_demo/widget_examples/C/CupertinoNavigationBar.js",
	"./C/CupertinoPageScaffold.js": "./lib/app_demo/widget_examples/C/CupertinoPageScaffold.js",
	"./C/CupertinoSlider.js": "./lib/app_demo/widget_examples/C/CupertinoSlider.js",
	"./C/CupertinoSwitch.js": "./lib/app_demo/widget_examples/C/CupertinoSwitch.js",
	"./C/CupertinoTabBar.js": "./lib/app_demo/widget_examples/C/CupertinoTabBar.js",
	"./C/CupertinoTabScaffold.js": "./lib/app_demo/widget_examples/C/CupertinoTabScaffold.js",
	"./C/CustomMultiChildLayout.js": "./lib/app_demo/widget_examples/C/CustomMultiChildLayout.js",
	"./C/CustomScrollView.js": "./lib/app_demo/widget_examples/C/CustomScrollView.js",
	"./D/DecoratedBox.js": "./lib/app_demo/widget_examples/D/DecoratedBox.js",
	"./D/DecoratedBoxTransition.js": "./lib/app_demo/widget_examples/D/DecoratedBoxTransition.js",
	"./D/DefaultTextStyle.js": "./lib/app_demo/widget_examples/D/DefaultTextStyle.js",
	"./D/DropdownButton.js": "./lib/app_demo/widget_examples/D/DropdownButton.js",
	"./E/Expanded.js": "./lib/app_demo/widget_examples/E/Expanded.js",
	"./F/FittedBox.js": "./lib/app_demo/widget_examples/F/FittedBox.js",
	"./F/FlatButton.js": "./lib/app_demo/widget_examples/F/FlatButton.js",
	"./F/FloatingActionButton.js": "./lib/app_demo/widget_examples/F/FloatingActionButton.js",
	"./F/FlutterLogo.js": "./lib/app_demo/widget_examples/F/FlutterLogo.js",
	"./F/FractionallySizedBox.js": "./lib/app_demo/widget_examples/F/FractionallySizedBox.js",
	"./G/GestureDetector.js": "./lib/app_demo/widget_examples/G/GestureDetector.js",
	"./G/GridView.js": "./lib/app_demo/widget_examples/G/GridView.js",
	"./H/Hero.js": "./lib/app_demo/widget_examples/H/Hero.js",
	"./I/IconButton.js": "./lib/app_demo/widget_examples/I/IconButton.js",
	"./I/Image.js": "./lib/app_demo/widget_examples/I/Image.js",
	"./I/IndexedStack.js": "./lib/app_demo/widget_examples/I/IndexedStack.js",
	"./I/IntrinsicHeight.js": "./lib/app_demo/widget_examples/I/IntrinsicHeight.js",
	"./I/IntrinsicWidth.js": "./lib/app_demo/widget_examples/I/IntrinsicWidth.js",
	"./L/LimitedBox.js": "./lib/app_demo/widget_examples/L/LimitedBox.js",
	"./L/ListBody.js": "./lib/app_demo/widget_examples/L/ListBody.js",
	"./L/ListTile.js": "./lib/app_demo/widget_examples/L/ListTile.js",
	"./L/ListView.js": "./lib/app_demo/widget_examples/L/ListView.js",
	"./M/MaterialApp.js": "./lib/app_demo/widget_examples/M/MaterialApp.js",
	"./M/MediaQuery.js": "./lib/app_demo/widget_examples/M/MediaQuery.js",
	"./N/Navigator.js": "./lib/app_demo/widget_examples/N/Navigator.js",
	"./S/Switch.js": "./lib/app_demo/widget_examples/S/Switch.js",
	"./W/Wrap.js": "./lib/app_demo/widget_examples/W/Wrap.js",
	"./index.js": "./lib/app_demo/widget_examples/index.js",
	"./t/Table.js": "./lib/app_demo/widget_examples/t/Table.js",
	"./t/TextField.js": "./lib/app_demo/widget_examples/t/TextField.js",
	"./t/Theme.js": "./lib/app_demo/widget_examples/t/Theme.js",
	"./t/Transform.js": "./lib/app_demo/widget_examples/t/Transform.js",
	"./t/text.js": "./lib/app_demo/widget_examples/t/text.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./lib/app_demo/widget_examples sync recursive ^\\.\\/.*\\.js$";

/***/ }),

/***/ "./lib/app_demo/zhihu/global_config.js":
/*!*********************************************!*\
  !*** ./lib/app_demo/zhihu/global_config.js ***!
  \*********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 31:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//global_config.js 正式开始，😝

let {
  runApp,
  MXJSFlutterApp,
  ThemeData,
  Color,
  Colors
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

class GlobalConfig {
    static get themeData() {
      return new ThemeData({brightness: Brightness.light});
    } 

    static get searchBackgroundColor() {
      return new Color(0xFFEEEEEE);
    }
    
    static get cardBackgroundColor() {
      return Colors.white;
    }

    static get fontColor() {
      return new Color(0xFF444444);
    }
}

module.exports = { GlobalConfig };


/***/ }),

/***/ "./lib/app_demo/zhihu/home/article.js":
/*!********************************************!*\
  !*** ./lib/app_demo/zhihu/home/article.js ***!
  \********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 81:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//article.js 正式开始，😝

let {
  runApp,
  MXJSFlutterApp
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class Article {
    constructor(
        headUrl,
        user,
        action,
        time,
        title,
        mark,
        agreeNum,
        commentNum, 
        {
        imgUrl
        } = {}) {
        this.headUrl = headUrl;
        this.user = user;
        this.action = action;
        this.time = time;
        this.title = title;
        this.mark = mark;
        this.agreeNum = agreeNum;
        this.commentNum = commentNum;
        this.imgUrl = imgUrl;
    }
}

let articleList = [
    new Article(
        "https://pic3.zhimg.com/50/2b8be8010409012e7cdd764e1befc4d1_s.jpg",
        "learner",
        "赞同了回答",
        "2小时前",
        "在三体中，罗辑为什么会把控制权交给程心，难道他没有推测过后果吗？",
        "因为罗辑遵守了人类伦理。这个伦理大概就叫民主。 大刘其实是个典型的精英主义者，在他笔下...",
        32, 
        10,
        {imgUrl: "https://pic2.zhimg.com/50/v2-710b7a6fea12a7203945b666790b7181_hd.jpg"}
    ),
    new Article(
      "https://pic4.zhimg.com/50/v2-9a3cb5d5ee4339b8cf4470ece18d404f_s.jpg",
      "learner",
      "回答了问题",
      "5小时前",
      "我的手机系统是安卓。无意间发现自己的屏幕被人监控，请问怎样才能彻底摆脱被监控的处境呢？",
      "检查一下你手机里是不是被人装了什么软件，把你不认识的非系统软件删掉。不会删就去找手机店里的小哥，为什么这么多人...",
      38, 
      13
    ),
    new Article(
        "https://pic3.zhimg.com/50/v2-8943c20cecab028e19644cccf0f3a38b_s.jpg",
        "learner",
        "回答了问题",
        "7小时前",
        "如何评价2018年安徽省程序设计竞赛？",
        "带着政治任务和压力去打了比赛，所幸最后被高中生抬了一手。榜可以见另外某回答。大概经历就是前...",
        38, 
        13,
        {imgUrl: "https://pic4.zhimg.com/v2-a7493d69f0d8f849c6345f8f693454f3_200x112.jpg"}
    ),
    new Article(
        "https://pic3.zhimg.com/50/v2-8943c20cecab028e19644cccf0f3a38b_s.jpg",
        "learner",
        "回答了问题",
        "7小时前",
        "极致的文明是什么样的？会真的像黑暗森林法则一样对其他低等生物进行屠杀吗？",
        "最喜欢的人物是章北海和维德但最喜欢的情节却是这一段，地球上的人承诺给他们鲜花和荣誉...",
        38,
        13,
        {imgUrl: "https://pic3.zhimg.com/v2-b67be50be51e2e6d6112a64528683b09_b.jpg"}
    )
  ];

module.exports = { Article, articleList };



/***/ }),

/***/ "./lib/app_demo/zhihu/home/ask_page.js":
/*!*********************************************!*\
  !*** ./lib/app_demo/zhihu/home/ask_page.js ***!
  \*********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 101:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//ask_page.js 正式开始，😝

let {
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MaterialApp,
  Scaffold,
  AppBar,
  Container,
  Row,
  FlatButton,
  Text,
  Expanded,
  TextStyle,
  Colors,
  TextField,
  Icon,
  IconData,
  EdgeInsets,
  Column,
  SingleChildScrollView,
  InputDecoration,
  Navigator
  
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../../zhihu/global_config.js */ "./lib/app_demo/zhihu/global_config.js");


class AskPage extends MXJSStatefulWidget {
    constructor() {
        super('AskPage');
    }
  
    createState() {
        return new AskPageState(this);
    }
}

class AskPageState extends MXJSWidgetState {

    build(context){
        let widget = new MaterialApp({
            // theme: GlobalConfig.themeData,
            home: new Scaffold({
                appBar: new AppBar({
                    title: new Container({
                        child: new Row({
                            children: [
                                FlatButton.icon({
                                    onPressed:function(){
                                        Navigator.pop(context);
                                    },
                                    icon: new Icon(new IconData(0xe14c, {fontFamily: 'MaterialIcons'})),
                                    label: new Text("")
                                }),
                                new Expanded({
                                    child: new Container({
                                        child: new Text("提问")
                                    }),
                                }),
                                new FlatButton({
                                    onPressed:function(){

                                    },
                                    child: new Text("下一步", {style: new TextStyle({
                                        color: Colors.black
                                    })})
                                })
                            ]
                        })
                    })
                }),
                body: new SingleChildScrollView({
                    child: new Column({
                        children: [
                            new Container({
                                child: new TextField({
                                    decoration: new InputDecoration({
                                        hintText: "请输入标题",
                                        hintStyle: new TextStyle({
                                            color: Colors.black,
                                        })
                                    })
                                }),
                                margin: EdgeInsets.all(16.0)
                            })
                        ]
                    })
                })
            })
        })
        return widget;
    }
}

module.exports = { AskPage };



/***/ }),

/***/ "./lib/app_demo/zhihu/home/follow.js":
/*!*******************************************!*\
  !*** ./lib/app_demo/zhihu/home/follow.js ***!
  \*******************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 317:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//follow.js 正式开始，😝

let {
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  Container,
  Row,
  FlatButton,
  Text,
  Expanded,
  TextStyle,
  Colors,
  AspectRatio,
  BoxDecoration,
  DecorationImage,
  NetworkImage,
  Rect,
  Border,
  BorderRadius,
  Radius,
  Color,
  Icon,
  IconData,
  EdgeInsets,
  Column,
  FontWeight,
  PopupMenuButton,
  PopupMenuItem,
  SingleChildScrollView,
  Alignment,
  CircleAvatar,
  MaterialPageRoute,
  Navigator
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");
let {articleList} = __webpack_require__(/*! ./article.js */ "./lib/app_demo/zhihu/home/article.js");
let {ReplyPage} = __webpack_require__(/*! ./reply_page.js */ "./lib/app_demo/zhihu/home/reply_page.js");

class Follow extends MXJSStatefulWidget {
    constructor(){
        super("Follow");
    }
  
    createState() {
        return new FollowState(this);
    }
}

class FollowState extends MXJSWidgetState {

    wordsCard(context,article){
        let markWidget;
        if (article.imgUrl == null) {
            markWidget = new Text(article.mark, {
                style: new TextStyle({
                    height: 1.3,
                    color: GlobalConfig.fontColor
                })
            });
        } else {
            markWidget = new Row({
                children: [
                    new Expanded({
                        flex: 2,
                        child: new Container({
                            child: new Text(article.mark, {
                                style: new TextStyle({
                                    height: 1.3,
                                    color: GlobalConfig.fontColor
                                })
                            })
                        })
                    }),
                    new Expanded({
                        flex: 1,
                        child: new AspectRatio({
                            aspectRatio: 3.0 / 2.0,
                            child: new Container({
                                foregroundDecoration: new BoxDecoration({
                                    image: new DecorationImage({
                                        image: new NetworkImage(article.imgUrl),
                                        centerSlice: Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0)
                                    }),
                                    borderRadius: BorderRadius.all(Radius.circular(6.0))
                                })
                            })
                        })
                    })
                ]
            });
        }
        return new Container({
            color: new Color(0xFFFFFFFF),
            margin: EdgeInsets.only({
                top: 5.0,
                bottom: 5.0
            }),
            child: new FlatButton({
                onPressed:function(){
             
                    Navigator.push(context, new MaterialPageRoute({
                        builder: function (context) {
                            return new ReplyPage;
                        }
                    }))
                    
                },
                child: new Column({
                    children: [
                        new Container({
                            child: new Row({
                                children: [
                                    new Container({
                                        child: new CircleAvatar({
                                            backgroundImage: new NetworkImage(article.headUrl),
                                            radius: 11.0
                                        })
                                    }),
                                    new Text(" " + article.user + " " + article.action + " . " + article.time, {
                                        style: new TextStyle({
                                            color: GlobalConfig.fontColor
                                        })
                                    })
                                ]
                            }),
                            padding: EdgeInsets.only({top: 10.0})
                        }),
                        new Container({
                            child: new Text(article.title, {
                                style: new TextStyle({
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16.0, 
                                    height: 1.3,
                                    color: Colors.black
                                })
                            }),
                            margin: EdgeInsets.only({top: 6.0, bottom: 2.0}),
                            alignment: Alignment.topLeft
                        }),
                        new Container({
                            child: markWidget,
                            margin: EdgeInsets.only({top: 6.}),
                            alignment: Alignment.topLeft
                        }),
                        new Container({
                            child: new Row({
                                children: [
                                    new Expanded({
                                        child: new Text(article.agreeNum.toString() + " 赞同 · " + article.commentNum.toString() + "评论", {
                                            style: new TextStyle({
                                                color: GlobalConfig.fontColor
                                            })
                                        })
                                    }),
                                    new PopupMenuButton({
                                        icon: new Icon(new IconData(0xe260, {fontFamily: 'MaterialIcons'}), {
                                            color: GlobalConfig.fontColor
                                        }),
                                        itemBuilder: function(context){
                                            let list = [
                                                new PopupMenuItem({
                                                    value: '选项一的值',
                                                    child: new Text('屏蔽这个问题')
                                                }),
                                                new PopupMenuItem({
                                                    value: '选项二的值',
                                                    child: new Text('取消关注 learner')
                                                }),
                                                new PopupMenuItem({
                                                    value: '选项三的值',
                                                    child: new Text("举报")
                                                })
                                            ];
                                            return list;
                                        }
                                    })
                                ]
                            }),
                            padding: EdgeInsets.only()
                        })
                    ]
                })
            })
        });
    }

    billboard(context){
        return new Container({
            margin: EdgeInsets.only({
                top: 5.0, 
                bottom: 5.0
            }),
            color: GlobalConfig.cardBackgroundColor,
            child: new FlatButton({
                onPressed: function(){

                },
                child: new Column({
                    children:[
                        new Container({
                            child: new Row({
                                children: [
                                    new Container({
                                        child: new CircleAvatar({
                                            backgroundImage: new NetworkImage("https://pic1.zhimg.com/50/v2-0c9de2012cc4c5e8b01657d96da35534_s.jpg"),
                                            radius: 11.0
                                        })
                                    }),
                                    new Text("  对啊网", {
                                        style: new TextStyle({
                                            color: GlobalConfig.fontColor
                                        })
                                    })
                                ]
                            }),
                            padding: EdgeInsets.only({top: 10.0})
                        }),
                        new Container({
                            child: new Text("考过CPA，非名牌大学也能进名企", {
                                style: new TextStyle({
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16.0, 
                                    height: 1.3,
                                    color: GlobalConfig.fontColor
                                })
                            }),
                            margin: EdgeInsets.only({top: 6.0, bottom: 2.0}),
                            alignment: Alignment.topLeft
                        }),
                        new Container({
                            child: new AspectRatio({
                                aspectRatio: 3.0 / 1.0,
                                child: new Container({
                                    foregroundDecoration: new BoxDecoration({
                                        image: new DecorationImage({
                                            image: new NetworkImage("https://pic2.zhimg.com/50/v2-6416ef6d3181117a0177275286fac8f3_hd.jpg"),
                                            centerSlice: Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0),
                                        }),
                                        borderRadius: BorderRadius.all(Radius.circular(6.0))
                                    })
                                })
                            }),
                            margin: EdgeInsets.only({top: 6.0, bottom: 14.0}),
                            alignment: Alignment.topLeft
                        }),
                        new Container({
                            child: new Text("还在羡慕别人的好工作？免费领取价值1980元的注册会计师课程，为自己充电！", {
                                style: new TextStyle({
                                    height: 1.3,
                                    color: GlobalConfig.fontColor
                                })
                            }),
                            padding: EdgeInsets.only({bottom: 8.0})
                        }),
                        new Container({
                            child: new Row({
                                children: [
                                    new Container({
                                        child: new Text("广告", {
                                            style: new TextStyle({
                                                fontSize: 10.0,
                                                color: GlobalConfig.fontColor
                                            })
                                        }),
                                        decoration: new BoxDecoration({
                                            border: Border.all({
                                                color: GlobalConfig.fontColor
                                            }),
                                            borderRadius: BorderRadius.all(Radius.circular(2.0))
                                        }),
                                        padding: EdgeInsets.only({top: 2.0, bottom: 2.0, left: 3.0, right: 3.0})
                                    }),
                                    new Expanded({
                                        child: new Text("  查看详情", {
                                            style: new TextStyle({
                                                color: GlobalConfig.fontColor
                                            })
                                        })
                                    }),
                                    new Icon(new IconData(0xe14c, {fontFamily: 'MaterialIcons'}), {
                                        color: GlobalConfig.fontColor
                                    })
                                ]
                            }),
                            padding: EdgeInsets.only({bottom: 10.0}),
                        })
                    ]
                })
            })
        });
    }

    build(context){
        let widget = new SingleChildScrollView({
            child: new Container({
                margin: EdgeInsets.only({top: 5.0}),
                child: new Column({
                    children: [
                        this.wordsCard(context,articleList[0]),
                        this.wordsCard(context,articleList[1]),
                        this.wordsCard(context,articleList[2]),
                        this.billboard(context),
                        this.wordsCard(context,articleList[3])
                    ]
                })
            })
        });
        return widget;
    }
}

module.exports = { Follow };



/***/ }),

/***/ "./lib/app_demo/zhihu/home/home_page.js":
/*!**********************************************!*\
  !*** ./lib/app_demo/zhihu/home/home_page.js ***!
  \**********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 152:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//HomePage.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    Scaffold,
    AppBar,
    Container,
    Row,
    FlatButton,
    Text,
    Expanded,
    TextStyle,
    Colors,
    BoxDecoration,
    BorderSide,
    BorderRadius,
    Radius,
    Icon,
    IconData,
    BorderDirectional,
    DefaultTabController,
    TabBar,
    Tab,
    TabBarView,
    Key,
    MaterialPageRoute,
    Navigator
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let { GlobalConfig } = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");
let { Follow } = __webpack_require__(/*! ./follow.js */ "./lib/app_demo/zhihu/home/follow.js");
let { Recommend } = __webpack_require__(/*! ./recommend.js */ "./lib/app_demo/zhihu/home/recommend.js");
let { Hot } = __webpack_require__(/*! ./hot.js */ "./lib/app_demo/zhihu/home/hot.js");
let { SearchPage } = __webpack_require__(/*! ./search_page.js */ "./lib/app_demo/zhihu/home/search_page.js");
let { AskPage } = __webpack_require__(/*! ./ask_page.js */ "./lib/app_demo/zhihu/home/ask_page.js");

class HomePage extends MXJSStatefulWidget {
    constructor() {
        super("HomePage", { key: new Key("HomePage") });
    }

    createState() {
        return new HomePageState(this);
    }
}

class HomePageState extends MXJSWidgetState {

    barSearch(context) {
        return new Container({
            child: new Row({
                children: [
                    new Expanded({
                        child: FlatButton.icon({
                            onPressed: function () {
                       
                                Navigator.push(context, new MaterialPageRoute({
                                    builder: function (context) {
                                        return new SearchPage;
                                    }
                                }))
                            },
                            icon: new Icon(new IconData(0xe8b6, { fontFamily: 'MaterialIcons' }), {
                                color: GlobalConfig.fontColor,
                                size: 16.0
                            }),
                            label: new Text("坚果R1摄像头损坏", {
                                style: new TextStyle({
                                    color: GlobalConfig.fontColor
                                })
                            })
                        })
                    }),
                    new Container({
                        decoration: new BoxDecoration({
                            border: new BorderDirectional({
                                start: new BorderSide({
                                    color: GlobalConfig.fontColor,
                                    width: 1.0
                                })
                            })
                        }),
                        height: 14.0,
                        width: 1.0
                    }),
                    new Container({
                        child: FlatButton.icon({
                            onPressed: function () {
         
                                Navigator.push(context, new MaterialPageRoute({
                                    builder: function (context) {
                                        return new AskPage;
                                    }
                                }))
                            },
                            icon: new Icon(new IconData(0xe22b, { fontFamily: 'MaterialIcons' }), {
                                color: GlobalConfig.fontColor,
                                size: 16.0
                            }),
                            label: new Text("提问", {
                                style: new TextStyle({
                                    color: GlobalConfig.fontColor
                                })
                            })
                        })
                    })
                ]
            }),
            decoration: new BoxDecoration({
                borderRadius: BorderRadius.all(Radius.circular(4.0)),
                color: GlobalConfig.searchBackgroundColor
            })
        })
    }

    build(context) {
        let widget = new DefaultTabController({
            length: 3,
            child: new Scaffold({
                appBar: new AppBar({
                    title: this.barSearch(context),
                    bottom: new TabBar({
                        labelColor: Colors.blue,
                        indicatorColor: Colors.blue,
                        unselectedLabelColor: Colors.black,
                        tabs: [
                            new Tab({ text: "关注" }),
                            new Tab({ text: "推荐" }),
                            new Tab({ text: "热榜" })
                        ]
                    }),
                    backgroundColor: Colors.white
                }),
                body: new TabBarView({
                    children: [
                        new Follow(),
                        new Recommend(),
                        new Hot()
                    ]
                })
            })
        });
        return widget;
    }
}

module.exports = { HomePage };



/***/ }),

/***/ "./lib/app_demo/zhihu/home/hot.js":
/*!****************************************!*\
  !*** ./lib/app_demo/zhihu/home/hot.js ***!
  \****************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 185:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//hot.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    Container,
    Row,
    FlatButton,
    Text,
    Expanded,
    TextStyle,
    Colors,
    AspectRatio,
    BoxDecoration,
    BorderSide,
    DecorationImage,
    NetworkImage,
    Rect,
    BorderRadius,
    Radius,
    Icon,
    IconData,
    BorderDirectional,
    EdgeInsets,
    Column,
    FontWeight,
    SingleChildScrollView,
    Alignment,
    MaterialPageRoute,
    Navigator
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");
let {questionList} = __webpack_require__(/*! ./question.js */ "./lib/app_demo/zhihu/home/question.js");
let {QuestionPage} = __webpack_require__(/*! ./question_page.js */ "./lib/app_demo/zhihu/home/question_page.js");

class Hot extends MXJSStatefulWidget {
    constructor(){
        super("Hot");
    }
  
    createState() {
        return new HotState(this);
    }
}

class HotState extends MXJSWidgetState {
    
    hotCard(context,question){
        return new Container({
            decoration: new BoxDecoration({
                color: GlobalConfig.cardBackgroundColor,
                border: new BorderDirectional({
                    bottom: new BorderSide({
                        color: Colors.black12,
                        width: 1.0
                    })
                })
            }),
            child: new FlatButton({
                onPressed:function(){
     
                    Navigator.push(context, new MaterialPageRoute({
                        builder: function (context) {
                            return new QuestionPage;
                        }
                    }))
                },
                child: new Container({
                    padding: EdgeInsets.only({top: 8.0, bottom: 8.0}),
                    child: new Row({
                        children: [
                            new Expanded({
                                flex: 1,
                                child: new Column({
                                    children: [
                                        new Container({
                                            child: new Text(
                                                question.order,{
                                                style: new TextStyle({
                                                    color: question.order <= "03" ? Colors.red : Colors.yellow,
                                                    fontSize: 18.0
                                                })
                                            }),
                                            alignment: Alignment.topLeft
                                        }),
                                        question.rise != null ? 
                                        new Row({
                                            children: [
                                                new Icon(new IconData(0xe5d8, {fontFamily: 'MaterialIcons'}),{
                                                    color: Colors.red, 
                                                    size: 10.0
                                                }),
                                                new Text(question.rise, {
                                                    style: new TextStyle({
                                                        color: Colors.red, 
                                                        fontSize: 10.0
                                                    })
                                                })
                                            ]
                                        })
                                        : new Container() 
                                    ]
                                })
                            }),
                            new Expanded({
                                flex: 6,
                                child: new Column({
                                    children: [
                                        new Container({
                                            child: new Text(question.title,{
                                                style: new TextStyle({
                                                    fontWeight: FontWeight.bold, 
                                                    fontSize: 16.0, 
                                                    height: 1.1, 
                                                    color: Colors.black
                                                })
                                            }),
                                            padding: EdgeInsets.only({bottom: 10.0,right: 4.0}),
                                            alignment: Alignment.topLeft
                                        }),
                                        question.mark != null ?
                                        new Container({
                                            child: new Text(question.mark, {
                                                style: new TextStyle({color: GlobalConfig.fontColor})
                                            }),
                                            alignment: Alignment.topLeft,
                                            padding: EdgeInsets.only({bottom: 8.0,right: 4.0})
                                        }) : 
                                        new Container(),
                                        new Container({
                                            child: new Text(question.hotNum, {
                                                style: new TextStyle({color: GlobalConfig.fontColor})
                                            }),
                                            alignment: Alignment.topLeft
                                        })
                                    ]
                                })
                            }),
                            new Expanded({
                                flex: 3,
                                child: new AspectRatio({
                                    aspectRatio: 3.0 / 2.0,
                                    child: new Container({
                                        foregroundDecoration:new BoxDecoration({
                                            image: new DecorationImage({
                                                image: new NetworkImage(question.imgUrl),
                                                centerSlice: Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0)
                                            }),
                                            borderRadius: BorderRadius.all(Radius.circular(6.0))
                                        })
                                    })
                                })
                            })
                        ]
                    })
                })
            })
        })
    }

    build(context){
        let widget = new SingleChildScrollView({
            child: new Container({
                margin: EdgeInsets.only({top: 5.0}),
                child: new Column({
                    children: [
                        this.hotCard(context,questionList[0]),
                        this.hotCard(context,questionList[1]),
                        this.hotCard(context,questionList[2]),
                        this.hotCard(context,questionList[3]),
                        this.hotCard(context,questionList[4])
                    ]
                })
            })
        });
        return widget;
    }
}

module.exports = { Hot };



/***/ }),

/***/ "./lib/app_demo/zhihu/home/question.js":
/*!*********************************************!*\
  !*** ./lib/app_demo/zhihu/home/question.js ***!
  \*********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 36:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//question.js 正式开始，😝

let {
  runApp,
  MXJSFlutterApp
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

class Question {
    constructor(
        order,
        title,
        hotNum,
        imgUrl,
        {mark,
        rise}= {}
    ) {
        this.order = order;
        this.title = title;
        this.hotNum = hotNum;
        this.imgUrl = imgUrl;
        this.mark = mark;
        this.rise = rise;
    }
}

let questionList = [
    new Question("01", "了不起的新时代，世界竞争中的中国制造", "4427 万热度", "https://pic2.zhimg.com/50/v2-710b7a6fea12a7203945b666790b7181_hd.jpg"),
    new Question("02", "一个女生怎样才算见过世面？", "4157 万热度", "https://pic3.zhimg.com/50/v2-56dca99cd8718f9303d43b3015342ba7_hd.jpg", {rise: "3", mark: "所谓世面，就是世界的每一面"}),
    new Question("03", "如果朱标没死，削藩的话，朱棣会造反吗？", "4009 万热度", "https://pic4.zhimg.com/v2-095d2b48970889b108247e6d2dd0fa6b_b.jpg"),
    new Question("04", "如何编译 Linux 内核？", "3110 万热度", "https://pic3.zhimg.com/80/v2-1ea1b0cf80c85b88893b2b97a94d7e71_hd.jpg", {mark: "内核？呵呵"}),
    new Question("05", "如何看待将神话故事拍成电影这件事？", "2119 万热度", "https://pic4.zhimg.com/50/v2-267b1dda62f770bd2bd13cb545117b78_hd.jpg", {rise: "3"})
];

module.exports = { Question, questionList };


/***/ }),

/***/ "./lib/app_demo/zhihu/home/question_page.js":
/*!**************************************************!*\
  !*** ./lib/app_demo/zhihu/home/question_page.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 258:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//question_page.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MaterialApp,
    Scaffold,
    AppBar,
    Container,
    Row,
    FlatButton,
    Text,
    Expanded,
    TextStyle,
    Colors,
    BoxDecoration,
    BorderSide,
    NetworkImage,
    Icon,
    IconData,
    BorderDirectional,
    EdgeInsets,
    Column,
    FontWeight,
    PopupMenuButton,
    PopupMenuItem,
    SingleChildScrollView,
    MainAxisAlignment,
    Alignment,
    CircleAvatar,
    ButtonTextTheme,
    MaterialPageRoute,
    Navigator

} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");
let {ReplyPage, Common} = __webpack_require__(/*! ./reply_page.js */ "./lib/app_demo/zhihu/home/reply_page.js");

class QuestionPage extends MXJSStatefulWidget {
    constructor(){
        super("QuestionPage");
    }
  
    createState() {
        return new QuestionPageState(this);
    }
}

class QuestionPageState extends MXJSWidgetState {
    
    build(context){
        let widget = new MaterialApp({
            // theme: GlobalConfig.themeData,
            home: new Scaffold({
                appBar: new AppBar({
                    title: Common.searchInput(context)
                }),
                body: new SingleChildScrollView({
                    child: new Column({
                        children: [
                            new Container({
                                child: new Row({
                                    children: [
                                        new Container({
                                            child: new FlatButton({onPressed: function(){}, child: new Text("物理学"), color: GlobalConfig.searchBackgroundColor}),
                                            height: 30.0,
                                            margin: EdgeInsets.only({right: 8.0})
                                        }),
                                        new Container({
                                            child: new FlatButton({onPressed: function(){}, child: new Text("三体(书籍)"), color: GlobalConfig.searchBackgroundColor}),
                                            height: 30.0,
                                            margin: EdgeInsets.only({right: 8.0})
                                        }),
                                        new Container({
                                            child: new FlatButton({onPressed: function(){}, child: new Text("脑洞(网络用语)"), color: GlobalConfig.searchBackgroundColor}),
                                            height: 30.0
                                        })
                                    ]
                                }),
                                padding: EdgeInsets.only({left: 16.0, top: 8.0, bottom: 8.0, right: 16.0}),
                                color: GlobalConfig.cardBackgroundColor
                            }),
                            new Container({
                                child: new Text("《三体》里的水滴有可能被制造出来吗?", {
                                    style: new TextStyle({fontWeight: FontWeight.bold, fontSize: 18.0, height: 1.3, color: Colors.black})
                                }),
                                padding: EdgeInsets.only({left: 16.0, bottom: 8.0, right: 16.0}),
                                alignment: Alignment.topLeft,
                                color: GlobalConfig.cardBackgroundColor
                            }),
                            new Container({
                                child: new Text(
                                    "如果，仅考虑其延长强相互作用力的特性，而不考虑其直角转弯的特性，那么水滴能被制造出来吗？换句话说，强相互作用力能够以影响微观物理量的方式延长吗？",{
                                    style: new TextStyle({height: 1.4, fontSize: 16.0, color: GlobalConfig.fontColor}), 
                                    textAlign: TextAlign.start
                                }),
                                padding: EdgeInsets.only({left: 16.0, right: 16.0, bottom: 8.0}),
                                decoration: new BoxDecoration({
                                    border: new BorderDirectional({
                                        bottom: new BorderSide({
                                            color:  Colors.black
                                        })
                                    }),
                                    color: GlobalConfig.cardBackgroundColor
                                })
                            }),
                            new Container({
                                child: new Row({
                                    children: [
                                        new Expanded({
                                            flex: 1,
                                            child: new Container({
                                                child: FlatButton.icon({
                                                    onPressed: function(){},
                                                    icon: new Icon(new IconData(0xe7f0, {fontFamily: 'MaterialIcons'})),
                                                    label: new Text("邀请回答"),
                                                    textTheme: ButtonTextTheme.accent
                                                }),
                                                decoration: new BoxDecoration({
                                                    border: new BorderDirectional({end: new BorderSide({color: Colors.black})})
                                                })
                                            })
                                        }),
                                        new Expanded({
                                            flex: 1,
                                            child: new Container({
                                                child: FlatButton.icon({
                                                    onPressed: function(){},
                                                    icon: new Icon(new IconData(0xe3ae, {fontFamily: 'MaterialIcons'})),
                                                    label: new Text("写回答"),
                                                    textTheme: ButtonTextTheme.accent
                                                }),
                                                decoration: new BoxDecoration({
                                                    border: new BorderDirectional({end: new BorderSide({color: Colors.black})})
                                                })
                                            })
                                        })
                                    ]
                                }),
                                decoration: new BoxDecoration({
                                  color: GlobalConfig.cardBackgroundColor
                                })
                            }),
                            new Container({
                                margin: EdgeInsets.only({top: 4.0, bottom: 4.0}),
                                child: new Row({
                                    children: [
                                        new Expanded({
                                        child: new Container({
                                            child: new Text("173个回答", {style: new TextStyle({color: GlobalConfig.fontColor})}),
                                            margin: EdgeInsets.only({left: 16.0})
                                        })
                                        }),
                                        new Expanded({
                                            child: new Container({
                                                child: new PopupMenuButton({
                                                    itemBuilder: function(context) {
                                                        let list = [
                                                            new PopupMenuItem({
                                                                value: '质量',
                                                                child: new Container({
                                                                    child: new Row({
                                                                        children: [
                                                                            new Text('按质量排序'),
                                                                            new Icon(new IconData(0xe5ca, {fontFamily: 'MaterialIcons'}), {color: Colors.blue})
                                                                        ]
                                                                    })
                                                                })
                                                            }),
                                                            new PopupMenuItem({
                                                                value: '时间',
                                                                child: new Text('按时间排序')
                                                            })
                                                        ];
                                                        return list;
                                                    }, 
                                                    child: new Container({
                                                        child: new Row({
                                                            mainAxisAlignment: MainAxisAlignment.end,
                                                            children: [
                                                                new Text("按质量排序", {
                                                                    style: new TextStyle({color: GlobalConfig.fontColor})}),
                                                                new Icon(new IconData(0xe313, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor})
                                                            ]
                                                        })
                                                    })
                                                }),
                                                alignment: Alignment.centerRight
                                            })
                                        })
                                    ]
                                })
                            }),
                            new Container({
                                color: GlobalConfig.cardBackgroundColor,
                                margin: EdgeInsets.only({bottom: 5.0}),
                                child: new FlatButton({
                                    onPressed: function(){
                         
                                        Navigator.push(context, new MaterialPageRoute({
                                            builder: function (context) {
                                                return new ReplyPage;
                                            }
                                        }))
                                    },
                                    child: new Column({
                                        children: [
                                            new Container({
                                                child: new Row({
                                                    children: [
                                                        new Container({
                                                            child: new CircleAvatar({
                                                                backgroundImage: new NetworkImage("https://pic3.zhimg.com/fc4c1cb34c2901a1a8c05488bbd76fa2_xs.jpg"),
                                                                radius: 11.0
                                                            })
                                                        }),
                                                        new Text(" 游牧由", {style: new TextStyle({color: GlobalConfig.fontColor})})
                                                    ]
                                                }),
                                                padding: EdgeInsets.only({top: 10.0})
                                            }),
                                            new Container({
                                                child: new Text(
                                                    "第一，几年前我跟一个985211级别大学的物理类学科教授聊过这个问题。他很严肃的表示，使用强互作用力为工具在原子角度加工出这种水平的材料，对人类目前的物理...",{
                                                    style: new TextStyle({height: 1.3, color: GlobalConfig.fontColor})
                                                    }),
                                                margin: EdgeInsets.only({top: 6.0, bottom: 14.0}),
                                                alignment: Alignment.topLeft
                                            }),
                                            new Container({
                                                child: new Row({
                                                    children: [
                                                        new Expanded({
                                                            child: new Text("1K 赞同 · 262 评论 · 10 天前", {style: new TextStyle({color: GlobalConfig.fontColor})})
                                                        })
                                                    ]
                                                }),
                                                padding: EdgeInsets.only({bottom: 10.0})
                                            })
                                        ]
                                    })
                                })
                            })
                        ]
                    })
                })
            }),
        });
        return widget;
    }
}

module.exports = { QuestionPage };


/***/ }),

/***/ "./lib/app_demo/zhihu/home/recommend.js":
/*!**********************************************!*\
  !*** ./lib/app_demo/zhihu/home/recommend.js ***!
  \**********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 153:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//recommend.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    Container,
    Row,
    FlatButton,
    Text,
    Expanded,
    TextStyle,
    Colors,
    AspectRatio,
    BoxDecoration,
    DecorationImage,
    NetworkImage,
    Rect,
    BorderRadius,
    Radius,
    Icon,
    IconData,
    EdgeInsets,
    Column,
    FontWeight,
    SingleChildScrollView,
    Alignment,
    MaterialPageRoute,
    Navigator
  
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");
let {articleList} = __webpack_require__(/*! ./article.js */ "./lib/app_demo/zhihu/home/article.js");
let {ReplyPage} = __webpack_require__(/*! ./reply_page.js */ "./lib/app_demo/zhihu/home/reply_page.js");

class Recommend extends MXJSStatefulWidget {
    constructor(){
        super("Recommend");
    }
  
    createState() {
        return new RecommendState(this);
    }
}

class RecommendState extends MXJSWidgetState {
    
    commonCard(context,article){
        let markWidget;
        if (article.imgUrl == null) {
            markWidget = new Text(
                article.user + " :  " + article.mark,{
                style: new TextStyle({
                    height: 1.3, 
                    color: GlobalConfig.fontColor
                })
            });
        } else {
            markWidget = new Row({
                children: [
                    new Expanded({
                        flex: 2,
                        child: new Container({
                            child: new Text(
                                article.user + " :  " + article.mark,{
                                style: new TextStyle({height: 1.3, color: GlobalConfig.fontColor})
                            })
                        })
                    }),
                    new Expanded({
                        flex: 1,
                        child: new AspectRatio({
                            aspectRatio: 3.0 / 2.0,
                            child:new Container({
                                foregroundDecoration:new BoxDecoration({
                                    image: new DecorationImage({
                                        image: new NetworkImage(article.imgUrl),
                                        centerSlice: Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0)
                                    }),
                                    borderRadius: BorderRadius.all(Radius.circular(6.0))
                                })
                            })
                        })
                    })
                ]
            });
        }
        return new Container({
            color: GlobalConfig.cardBackgroundColor,
            margin: EdgeInsets.only({top: 5.0, bottom: 5.0}),
            child: new FlatButton({
                onPressed:function(){
                    Navigator.push(context, new MaterialPageRoute({
                        builder: function (context) {
                            return new ReplyPage;
                        }
                    }))
                },
                child: new Column({
                    children: [
                        new Container({
                            child: new Text(
                                article.title,{
                                style: new TextStyle({fontWeight: FontWeight.bold, fontSize: 16.0, height: 1.3, color: Colors.black})
                            }),
                            margin: EdgeInsets.only({top: 6.0, bottom: 2.0}),
                            alignment: Alignment.topLeft
                        }),
                        new Container({
                            child: markWidget,
                            margin: EdgeInsets.only({top: 6.0, bottom: 14.0}),
                            alignment: Alignment.topLeft
                        }),
                        new Container({
                            child: new Row({
                                children: [
                                    new Expanded({
                                            child: new Text(article.agreeNum.toString() + " 赞同 · " + article.commentNum.toString() + "评论",{
                                            style: new TextStyle({color: GlobalConfig.fontColor})
                                            })
                                    }),
                                    new Icon(new IconData(0xe260, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor})
                                ]
                            }),
                            padding: EdgeInsets.only({bottom: 10.0})
                        })
                    ]
                })
            })
        });
    }

    build(context){
        let widget = new SingleChildScrollView({
            child: new Container({
                margin: EdgeInsets.only({top: 5.0}),
                child: new Column({
                    children: [
                        this.commonCard(context,articleList[0]),
                        this.commonCard(context,articleList[1])
                    ]
                })
            })
        });
        return widget;
    }
}

module.exports = { Recommend };



/***/ }),

/***/ "./lib/app_demo/zhihu/home/reply_page.js":
/*!***********************************************!*\
  !*** ./lib/app_demo/zhihu/home/reply_page.js ***!
  \***********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 334:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//replay_page.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MaterialApp,
    Scaffold,
    AppBar,
    Container,
    Row,
    FlatButton,
    Text,
    Expanded,
    TextStyle,
    Colors,
    BoxDecoration,
    BorderSide,
    NetworkImage,
    BorderRadius,
    Radius,
    TextField,
    Icon,
    IconData,
    BorderDirectional,
    EdgeInsets,
    Column,
    FontWeight,
    SingleChildScrollView,
    InputDecoration,
    MainAxisAlignment,
    Alignment,
    CircleAvatar,
    ButtonTextTheme,
    ListTile,
    IconButton,
    RaisedButton,
    BottomAppBar,
    InputBorder,
    MaterialPageRoute,
    Navigator
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");
// let {QuestionPage} = require("./zhihu/home/question_page.js");

class Common {
    static searchInput(context) {
        return new Container({
            child: new Row({
                children: [
                    new Container({
                        child: FlatButton.icon({
                            onPressed: function(){
                    
                                Navigator.pop(context);
                            },
                            icon: new Icon(new IconData(0xe5c4, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor}),
                            label: new Text("")
                        }),
                        width: 60.0
                    }),
                    new Expanded({
                        child: new TextField({
                            decoration: InputDecoration.collapsed({
                                hintText: "搜索比乎内容",
                                border: InputBorder.none,
                                hintStyle: new TextStyle({color: GlobalConfig.fontColor})
                            })
                        })
                    }),
                    new Container({
                        child: new IconButton({icon: new Icon(new IconData(0xe80d, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor}), 
                            onPressed: function(){}, 
                            padding: EdgeInsets.all(0.0),
                            iconSize: 18.0
                        })
                    }),
                    new Container({
                        child: new IconButton({icon: new Icon(new IconData(0xe896, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor}), 
                            onPressed: function(){}, 
                            padding: EdgeInsets.all(0.0), 
                            iconSize: 18.0
                        })
                    })
                ]
            }),
            decoration: new BoxDecoration({
                borderRadius: BorderRadius.all(Radius.circular(4.0)),
                color: GlobalConfig.searchBackgroundColor
            }),
            height: 36.0
        });
    }
}

class ReplyPage extends MXJSStatefulWidget {
    constructor(){
        super("ReplyPage");
    }

    createState() {
        return new ReplyPageState(this);
    }
}

class ReplyPageState extends MXJSWidgetState {
    
    build(context){
        let widget = new MaterialApp({
            // theme: GlobalConfig.themeData,
            home: new Scaffold({
                appBar: new AppBar({
                    title: Common.searchInput(context)
                }),
                body: new SingleChildScrollView({
                    child: new Column({
                        children: [
                            new Container({
                                child: new FlatButton({
                                    onPressed: function(){
                             
                                      Navigator.push(context, new MaterialPageRoute({
                                        builder: function (context) {
                                            return new QuestionPage;
                                        }
                                    }))
                                    },
                                    child: new Container({
                                        child: new Text("你认为《三体》中最牛的文明是？", {
                                            style: new TextStyle({
                                                fontWeight: FontWeight.bold, 
                                                fontSize: 18.0, 
                                                height: 1.3, 
                                                color: Colors.black
                                            })
                                        }),
                                        padding: EdgeInsets.all(16.0),
                                        alignment: Alignment.topLeft
                                    }),
                                    color: GlobalConfig.cardBackgroundColor
                                }),
                                decoration: new BoxDecoration({
                                    border: new BorderDirectional({bottom: new BorderSide({color: Colors.white10})})
                                })
                            }),
                            new Container({
                                child: new Row({
                                    children: [
                                        new Expanded({
                                            flex: 1,
                                            child: new Container({
                                                child: FlatButton.icon({
                                                    onPressed: function(){},
                                                    icon: new Icon(new IconData(0xe3ae, {fontFamily: 'MaterialIcons'})),
                                                    label: new Text("写回答"),
                                                    textTheme: ButtonTextTheme.accent
                                                }),
                                                decoration: new BoxDecoration({
                                                    border: new BorderDirectional({end: new BorderSide({color: Colors.white10})})
                                                })
                                            })
                                        }),
                                        new Expanded({
                                            flex: 1,
                                            child: new Container({
                                                child: new FlatButton({
                                                    onPressed: function(){
                                      
                                                        Navigator.push(context, new MaterialPageRoute({
                                                            builder: function (context) {
                                                                return new QuestionPage;
                                                            }
                                                        }))
                                                    },
                                                    child: new Text("查看全部10000个回答 > ")
                                                })
                                            })
                                        })
                                    ],
                                }),
                                decoration: new BoxDecoration({
                                  color: GlobalConfig.cardBackgroundColor
                                }),
                                margin: EdgeInsets.only({bottom: 10.0})
                            }),
                            new Container({
                                child: new ListTile({
                                    leading: new CircleAvatar({
                                        backgroundImage: new NetworkImage("https://pic3.zhimg.com/v2-cd467bb9bb31d0384f065cf0bd677930_xl.jpg"),
                                        radius: 20.0
                                    }),
                                    title: new Text("Flutter"),
                                    subtitle: new Text("人生如逆旅，我亦是行人"),
                                    trailing: RaisedButton.icon({
                                        onPressed: function(){}, 
                                        icon: new Icon(new IconData(0xe145, {fontFamily: 'MaterialIcons'}), {color: Colors.black}), 
                                        label: new Text("关注", {style: new TextStyle({color: Colors.black})}), 
                                        color: Colors.blue
                                    })
                                }),
                                decoration: new BoxDecoration({
                                    color: GlobalConfig.cardBackgroundColor,
                                    border: new BorderDirectional({bottom: new BorderSide({color: Colors.black})})
                                })
                            }),
                            new Container({
                                child: new Text(
                                    "回归运动\n\n三体定义的黑暗森林的宇宙格局，就是文明相互攻击和毁灭，越高级的，越明白藏好自己做好清理，绝不做探测对方文明的愚蠢行为。\n\n然而归还运动跳出了这个黑暗森林法则，不玩黑暗森林打击，不但探测别的宇宙文明，而且还深入了解对方文明，而且是全宇宙的所有文明。\n\n这是一种多么自信的科技实力呀，才能跳出黑暗森林的生存法则呀",{
                                    style: new TextStyle({
                                        height: 1.4, 
                                        fontSize: 16.0,
                                        color: GlobalConfig.fontColor
                                    }), 
                                    textAlign: TextAlign.start
                                }),
                                margin: EdgeInsets.all(16.0)
                            })
                        ]
                    })
                }),
                bottomNavigationBar: new BottomAppBar({
                    child: new Container({
                        height: 50.0,
                        child: new Row({
                            children: [
                                new Container({
                                    child: FlatButton.icon({
                                        onPressed: function(){},
                                        label: new Text("赞同 10 K"), 
                                        color: GlobalConfig.searchBackgroundColor, 
                                        icon: new Icon(new IconData(0xe5c7, {fontFamily: 'MaterialIcons'}))
                                    }),
                                    margin: EdgeInsets.only({left: 16.0}),
                                    height: 30.0
                                }),
                                new Container({
                                    child: new IconButton({
                                        onPressed: function(){}, 
                                        icon: new Icon(new IconData(0xe5c5, {fontFamily: 'MaterialIcons'})),
                                        padding: EdgeInsets.all(0.0)
                                    }),
                                    margin: EdgeInsets.only({left: 8.0}),
                                    height: 30.0,
                                    decoration: new BoxDecoration({
                                      borderRadius: BorderRadius.all(Radius.circular(2.0)),
                                      color: GlobalConfig.searchBackgroundColor
                                    })
                                }),
                                new Expanded({
                                    child: new Row({
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        children: [
                                            new IconButton({
                                                onPressed: function(){},
                                                icon: new Container({
                                                    child: new Column({
                                                        children: [
                                                        new Icon(new IconData(0xe87d, {fontFamily: 'MaterialIcons'}), {
                                                            size: 18.0,
                                                            color: GlobalConfig.fontColor
                                                        }),
                                                        new Text("感谢", {
                                                            style: new TextStyle({
                                                                fontSize: 10.0, 
                                                                color: GlobalConfig.fontColor
                                                            })
                                                        })
                                                        ]
                                                    }),
                                                    margin: EdgeInsets.only(),
                                                    height: 30.0
                                                })
                                            }),
                                            new IconButton({
                                                onPressed: function(){},
                                                icon: new Container({
                                                    child: new Column({
                                                        children: [
                                                            new Icon(new IconData(0xe838, {fontFamily: 'MaterialIcons'}), {
                                                                size: 18.0, 
                                                                color: GlobalConfig.fontColor
                                                            }),
                                                            new Text("收藏", {
                                                                style: new TextStyle({
                                                                    fontSize: 10.0,
                                                                    color: GlobalConfig.fontColor
                                                                })
                                                            })
                                                        ]
                                                    }),
                                                    margin: EdgeInsets.only(),
                                                    height: 30.0
                                                })
                                            }),
                                            new IconButton({
                                                onPressed: function(){},
                                                icon: new Container({
                                                    child: new Column({
                                                        children: [
                                                            new Icon(new IconData(0xe253, {fontFamily: 'MaterialIcons'}), {
                                                                size: 18.0, 
                                                                color: GlobalConfig.fontColor
                                                            }),
                                                            new Text("345", {
                                                                style: new TextStyle({
                                                                    fontSize: 10.0,
                                                                    color: GlobalConfig.fontColor
                                                                })
                                                            })
                                                        ]
                                                    }),
                                                    margin: EdgeInsets.only(),
                                                    height: 30.0
                                                })
                                            })
                                        ]
                                    })
                                })
                            ]
                        }),
                        color: GlobalConfig.cardBackgroundColor
                    })
                })
            })
        })
        return widget;
    }
}

module.exports = { ReplyPage, Common };



/***/ }),

/***/ "./lib/app_demo/zhihu/home/search_page.js":
/*!************************************************!*\
  !*** ./lib/app_demo/zhihu/home/search_page.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 261:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//search_page.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MaterialApp,
    Scaffold,
    AppBar,
    Container,
    Row,
    FlatButton,
    Text,
    Expanded,
    TextStyle,
    Colors,
    BoxDecoration,
    BorderSide,
    BorderRadius,
    Radius,
    TextField,
    Icon,
    IconData,
    BorderDirectional,
    EdgeInsets,
    Column,
    FontWeight,
    SingleChildScrollView,
    InputDecoration,
    Alignment,
    Chip,
    InputBorder,
    Navigator
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");

class SearchPage extends MXJSStatefulWidget {
    constructor(){
        super("SearchPage");
    }

    createState() {
        return new SearchPageState(this);
    }
}

class SearchPageState extends MXJSWidgetState {

    searchInput(context) {
        return new Container({
            child: new Row({
                children: [
                    new Container({
                            child: FlatButton.icon({
                                onPressed: function(){
                                    Navigator.pop(context);
                                    
                                },
                                icon: new Icon(new IconData(0xe5c4, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor}),
                                label: new Text("")
                            }),
                            width: 60.0
                    }),
                    new Expanded({
                        child: new TextField({
                            autofocus: true,
                            decoration: InputDecoration.collapsed({
                                hintText: "搜索比乎内容",
                                border: InputBorder.none,
                                hintStyle: new TextStyle({color: GlobalConfig.fontColor})
                            })
                        })
                    })
                ]
            }),
            decoration: new BoxDecoration({
                borderRadius: BorderRadius.all(Radius.circular(4.0)),
                color: GlobalConfig.searchBackgroundColor
            })
        });
    }

    build(context){
        let widget = new MaterialApp({
            // theme: GlobalConfig.themeData,
            home: new Scaffold({
                appBar: new AppBar({
                    title: this.searchInput(context)
                }),
                body: new SingleChildScrollView({
                    child: new Column({
                        children: [
                            new Container({
                                child: new Text("比乎热搜", {
                                    style: new TextStyle({
                                        fontWeight: FontWeight.bold, 
                                        fontSize: 16.0
                                    })
                                }),
                                margin: EdgeInsets.only({
                                    top: 16.0,
                                    left: 16.0, 
                                    bottom: 16.0
                                }),
                                alignment: Alignment.topLeft
                            }),
                            new Row({
                                children: [
                                    new Container({
                                        child: new Chip({
                                            label: new FlatButton({
                                                onPressed: function(){}, 
                                                child: new Text("汽车关税下调", {
                                                    style: new TextStyle({color: GlobalConfig.fontColor})
                                                })
                                            }),
                                            backgroundColor: Colors.black12,
                                        }),
                                        margin: EdgeInsets.only({left: 16.0, bottom: 16.0}),
                                        alignment: Alignment.topLeft
                                    }),
                                    new Container({
                                        child: new Chip({
                                            label: new FlatButton({
                                                onPressed: function(){}, 
                                                child: new Text("李彦宏传闻辟谣", {
                                                    style: new TextStyle({color: GlobalConfig.fontColor})
                                                })
                                            }),
                                            backgroundColor: Colors.black12
                                        }),
                                        margin: EdgeInsets.only({left: 16.0, bottom: 16.0}),
                                        alignment: Alignment.topLeft
                                    })
                                ]
                            }),
                            new Row({
                                children: [
                                    new Container({
                                        child: new Chip({
                                            label: new FlatButton({
                                                onPressed: function(){}, 
                                                child: new Text("小米8", {
                                                    style: new TextStyle({color: GlobalConfig.fontColor})
                                                })
                                            }),
                                            backgroundColor: Colors.black12
                                        }),
                                        margin: EdgeInsets.only({left: 16.0, bottom: 16.0}),
                                        alignment: Alignment.topLeft
                                    }),
                                    new Container({
                                        child: new Chip({
                                            label: new FlatButton({
                                                onPressed: function(){}, 
                                                child: new Text("超时空同居", {
                                                    style: new TextStyle({color: GlobalConfig.fontColor})
                                                })
                                            }),
                                            backgroundColor: Colors.black12
                                        }),
                                        margin: EdgeInsets.only({left: 16.0, bottom: 16.0}),
                                        alignment: Alignment.topLeft
                                    })
                                ]
                            }),
                            new Container({
                                child: new Text("搜索历史", {
                                    style: new TextStyle({
                                        fontWeight: FontWeight.bold, 
                                        fontSize: 16.0
                                    })
                                }),
                                margin: EdgeInsets.only({left: 16.0, bottom: 16.0}),
                                alignment: Alignment.topLeft
                            }),
                            new Container({
                                child: new Row({
                                    children: [
                                        new Container({
                                        child: new Icon(new IconData(0xe192, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor, size: 16.0}),
                                        margin: EdgeInsets.only({right: 12.0})
                                        }),
                                        new Expanded({
                                        child: new Container({
                                                child: new Text("业余兴趣", {
                                                    style: new TextStyle({color: GlobalConfig.fontColor, fontSize: 14.0})
                                                })
                                            })
                                        }),
                                        new Container({
                                            child: new Icon(new IconData(0xe14c, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor, size: 16.0})
                                        })
                                    ]
                                }),
                                margin: EdgeInsets.only({left: 16.0, right: 16.0, bottom: 10.0}),
                                padding: EdgeInsets.only({bottom: 10.0}),
                                decoration: new BoxDecoration({
                                    border: new BorderDirectional({bottom: new BorderSide({color: Colors.black12})})
                                })
                            }),
                            new Container({
                                child: new Row({
                                  children: [
                                        new Container({
                                            child: new Icon(new IconData(0xe192, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor, size: 16.0}),
                                            margin: EdgeInsets.only({right: 12.0})
                                        }),
                                        new Expanded({
                                            child: new Container({
                                                child: new Text("三体", {style: new TextStyle({color: GlobalConfig.fontColor, fontSize: 14.0})})
                                            })
                                        }),
                                        new Container({
                                            child: new Icon(new IconData(0xe14c, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor, size: 16.0})
                                        })
                                    ]
                                }),
                                margin: EdgeInsets.only({left: 16.0, right: 16.0, bottom: 10.0}),
                                padding: EdgeInsets.only({bottom: 10.0}),
                                decoration: new BoxDecoration({
                                    border: new BorderDirectional({bottom: new BorderSide({color: Colors.black12})})
                                })
                            }),
                            new Container({
                                child: new Row({
                                    children: [
                                        new Container({
                                            child: new Icon(new IconData(0xe192, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor, size: 16.0}),
                                            margin: EdgeInsets.only({right: 12.0})
                                        }),
                                        new Expanded({
                                            child: new Container({
                                                child: new Text("人类未来", {style: new TextStyle({color: GlobalConfig.fontColor, fontSize: 14.0})})
                                            })
                                        }),
                                        new Container({
                                            child: new Icon(new IconData(0xe14c, {fontFamily: 'MaterialIcons'}), {color: GlobalConfig.fontColor, size: 16.0})
                                        })
                                     ],
                                }),
                                margin: EdgeInsets.only({left: 16.0, right: 16.0, bottom: 10.0}),
                                padding: EdgeInsets.only({bottom: 10.0}),
                                decoration: new BoxDecoration({
                                    border: new BorderDirectional({bottom: new BorderSide({color: Colors.black12})})
                                })
                            })
                        ]
                    })
                })
            })
        });
        return widget;
    }
}

module.exports = { SearchPage };


/***/ }),

/***/ "./lib/app_demo/zhihu/idea/idea_page.js":
/*!**********************************************!*\
  !*** ./lib/app_demo/zhihu/idea/idea_page.js ***!
  \**********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 51:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//idea_page.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MaterialApp,
    Scaffold,
    AppBar,
    Text,
    Center,
    Key
  
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");

class IdeaPage extends MXJSStatefulWidget {
    constructor(){
        super("IdeaPage", {key: new Key("IdeaPage")});
    }

    createState() {
        return new IdeaPageState(this);
    }
}

class IdeaPageState extends MXJSWidgetState {
    
    build(context){
        let widget = new MaterialApp({
            home: new Scaffold({
                appBar: new AppBar({
                    title: new Center({
                        child: new Text('想法')
                    })
                }),
                body: new Center({
                    child: new Text("努力开发中~")
                })
            })
            // theme: GlobalConfig.themeData
        });
        return widget;
    }
}

module.exports = { IdeaPage };



/***/ }),

/***/ "./lib/app_demo/zhihu/index.js":
/*!*************************************!*\
  !*** ./lib/app_demo/zhihu/index.js ***!
  \*************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 118:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  runApp,
  MXJSFlutterApp,
  MXJSStatefulWidget,
  MXJSWidgetState,
  MaterialApp,
  Scaffold,
  Text,
  Icon,
  IconData,
  Center,
  BottomNavigationBarItem,
  AnimationController,
  Duration,
  BottomNavigationBar,
  BottomNavigationBarType,
  Colors
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ./global_config.js */ "./lib/app_demo/zhihu/global_config.js");
let {HomePage} = __webpack_require__(/*! ./home/home_page.js */ "./lib/app_demo/zhihu/home/home_page.js");
let {MyPage} = __webpack_require__(/*! ./my/my_page.js */ "./lib/app_demo/zhihu/my/my_page.js");
let {IdeaPage} = __webpack_require__(/*! ./idea/idea_page.js */ "./lib/app_demo/zhihu/idea/idea_page.js");
let {MessagePage} = __webpack_require__(/*! ./message/message_page.js */ "./lib/app_demo/zhihu/message/message_page.js");

class _NavigationIconView {
    constructor({
        icon, title, vsync
    }) {
        this.item = new BottomNavigationBarItem({
            icon: icon,
            title: title
        });
        this.controller = new AnimationController({
            duration: new Duration({
                milliseconds: 200
            })
        });
    }
}

class Index extends MXJSStatefulWidget {
    constructor() {
        super('Index');
    }
  
    createState() {
        return new IndexState(this);
    }
}

class IndexState extends MXJSWidgetState {
    constructor(){
        super();

        this._currentIndex = 0;
        this._navigationViews = [];
        this._pageList = [];
        this._currentPage = null;
    }

    build(context){
        this._navigationViews = [
            new _NavigationIconView({
              icon: new Icon(new IconData(0xe85d, {fontFamily: 'MaterialIcons'})),
              title: new Text("首页")
            }),
            new _NavigationIconView({
              icon: new Icon(new IconData(0xeb3d, {fontFamily: 'MaterialIcons'})),
              title: new Text("想法")
            }),
            new _NavigationIconView({
              icon: new Icon(new IconData(0xe003, {fontFamily: 'MaterialIcons'})),
              title: new Text("通知")
            }),
            new _NavigationIconView({
              icon: new Icon(new IconData(0xe8a6, {fontFamily: 'MaterialIcons'})),
              title: new Text("我的")
            }),
        ];

        this._pageList = [
            new HomePage(),
            new IdeaPage(),
            new MessagePage(),
            new MyPage()
        ];

        this._currentPage = this._pageList[this._currentIndex];

        let widget = new MaterialApp({
            home: new Scaffold({
                body: new Center({
                    child: this._currentPage
                }),
                bottomNavigationBar: new BottomNavigationBar({
                    items: this._navigationViews.map(navigationIconView => navigationIconView.item),
                    currentIndex: this._currentIndex,
                    fixedColor: Colors.blue,
                    type: BottomNavigationBarType.fixed,
                    onTap: function(index) {
                        this.setState(function() {
                            this._navigationViews[this._currentIndex].controller.reverse();
                            this._currentIndex = index;
                            this._navigationViews[this._currentIndex].controller.forward();
                            this._currentPage = this._pageList[this._currentIndex];
                        }.bind(this))
                    }.bind(this)
                })
                // theme: GlobalConfig.themeData,
            })
        });
        return widget;
    }
}

module.exports = {Index};



/***/ }),

/***/ "./lib/app_demo/zhihu/message/message_page.js":
/*!****************************************************!*\
  !*** ./lib/app_demo/zhihu/message/message_page.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 50:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//message_page.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MaterialApp,
    Scaffold,
    AppBar,
    Text,
    Center,
    Key
  
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js")
class MessagePage extends MXJSStatefulWidget {
    constructor(){
        super("MessagePage", {key: new Key("MessagePage")});
    }

    createState() {
        return new MessagePageState(this);
    }
}

class MessagePageState extends MXJSWidgetState {
 
    build(context){
        let widget = new MaterialApp({
            home: new Scaffold({
                appBar: new AppBar({
                    title: new Center({
                        child: new Text('消息')
                    })
                }),
                body: new Center({
                    child: new Text("努力开发中~")
                })
            })
            // theme: GlobalConfig.themeData
        });
        return widget;
    }
}

module.exports = { MessagePage };


/***/ }),

/***/ "./lib/app_demo/zhihu/my/my_page.js":
/*!******************************************!*\
  !*** ./lib/app_demo/zhihu/my/my_page.js ***!
  \******************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 452:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



//my_page.js 正式开始，😝

let {
    runApp,
    MXJSFlutterApp,
    MXJSWidgetState,
    MXJSStatefulWidget,
    MaterialApp,
    Scaffold,
    AppBar,
    Container,
    Row,
    FlatButton,
    Text,
    Expanded,
    TextStyle,
    Colors,
    AspectRatio,
    BoxDecoration,
    BorderSide,
    DecorationImage,
    NetworkImage,
    Rect,
    BorderRadius,
    Radius,
    Color,
    Icon,
    IconData,
    BorderDirectional,
    EdgeInsets,
    Column,
    SingleChildScrollView,
    MainAxisAlignment,
    Align,
    Alignment,
    CircleAvatar,
    ListTile,
    MediaQuery,
    Axis,
    Key,
    MaterialPageRoute,
    Navigator
  
} = __webpack_require__(/*! ../../../js_flutter.js */ "./lib/js_flutter.js");

let {GlobalConfig} = __webpack_require__(/*! ../global_config.js */ "./lib/app_demo/zhihu/global_config.js");
let {SearchPage} = __webpack_require__(/*! ../home/search_page.js */ "./lib/app_demo/zhihu/home/search_page.js");

class MyPage extends MXJSStatefulWidget {
    constructor(){
        super("MyPage", {key: new Key("MyPage")});
    }
    createState() {
        return new MyPageState(this);
    }
}

class MyPageState extends MXJSWidgetState {
    
    barSearch(){
        return new Container({
            child: new FlatButton({
                onPressed: function(){
      
                    Navigator.push(context, new MaterialPageRoute({
                        builder: function (context) {
                            return new SearchPage;
                        }
                    }))
                },
                child: new Row({
                    children: [
                        new Container({
                            child: new Icon(new IconData(0xe8b6, {fontFamily: 'MaterialIcons'}), {
                                size: 18.0,
                                color: GlobalConfig.fontColor
                            }),
                            margin: EdgeInsets.only({right: 26.0})
                        }),
                        new Expanded({
                            child: new Container({
                                child: new Text("搜索知乎内容", {
                                    style: new TextStyle({
                                        color: GlobalConfig.fontColor
                                    })
                                })
                            })
                        }),
                        new Container({
                            child: new FlatButton({
                                onPressed: function(){},
                                child: new Icon(new IconData(0xe8c4, {fontFamily: 'MaterialIcons'}),{
                                    color: GlobalConfig.fontColor,
                                    size: 18.0
                                })
                            }),
                            width: 40.0
                        })
                    ]
                })
            }),
            decoration: new BoxDecoration({
                borderRadius: BorderRadius.all(Radius.circular(4.0)),
                color: GlobalConfig.searchBackgroundColor
            })
        });
    }

    infoCardDescItem(context, count, desc, showSeparator){
        return new Row({
            children: [
                new Container({
                    width: (MediaQuery.of(context).size.width - 6.0) / 4,
                    child: new FlatButton ({
                        onPressed: function(){},
                        child: new Container({
                          height: 50.0,
                          child: new Column({
                                children: [
                                    new Container({
                                        child: new Text(count, {style:new TextStyle({fontSize: 16.0, color: GlobalConfig.fontColor})})
                                    }),
                                    new Container({
                                        child: new Text(desc, {style: new TextStyle({fontSize: 12.0, color: GlobalConfig.fontColor})})
                                    })
                                ]
                            })
                        })
                    })
                }),
                showSeparator ? new Container({
                    height: 14.0,
                    width: 1.0,
                    decoration: new BoxDecoration({
                        border: new BorderDirectional({
                            start: new BorderSide({color: Colors.black12, width: 1.0})
                        })
                    })
                })  : new Container(),
            ] 
        })
    }

    infoCard(context){
        return new Container({
            color: GlobalConfig.cardBackgroundColor,
            margin: EdgeInsets.only({top: 10.0, bottom: 6.0}),
            padding: EdgeInsets.only({top: 12.0, bottom: 8.0}),
            child: new Column({
                children: [
                    new Container({
                        margin: EdgeInsets.only({left: 16.0, right: 16.0, bottom: 16.0}),
                        decoration: new BoxDecoration({
                            color: new Color(0xFFF5F5F5),
                            borderRadius: BorderRadius.all(Radius.circular(6.0))
                        }),
                        child: new FlatButton({
                            onPressed: function(){},
                            child: new Container({
                                child: new ListTile({
                                    leading: new Container({
                                        child: new CircleAvatar({
                                            backgroundImage: new NetworkImage("https://pic1.zhimg.com/v2-ec7ed574da66e1b495fcad2cc3d71cb9_xl.jpg"),
                                            radius: 20.0
                                        })
                                    }),
                                    title: new Container({
                                        margin: EdgeInsets.only({bottom: 2.0}),
                                        child: new Text("learner")
                                    }),
                                    subtitle: new Container({
                                        margin: EdgeInsets.only({top: 2.0}),
                                        child: new Text("查看或编辑个人主页")
                                    })
                                })
                            })
                        })
                    }),
                    new Container({
                        child: new Row({
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                                this.infoCardDescItem(context, "57", "我的创作", true),
                                this.infoCardDescItem(context, "210", "关注", true),
                                this.infoCardDescItem(context, "18", "我的收藏", true),
                                this.infoCardDescItem(context, "33", "最近浏览", false)
                            ]
                        })
                    })
                ]
            })
        })
    }

    serviceCardDescItem(context, iconDataValue, desc, bgColor){
        return new Container({
            width: MediaQuery.of(context).size.width / 4,
            child: new FlatButton({
                onPressed: function(){},
                child: new Container({
                    child: new Column({
                        children: [
                            new Container({
                                margin: EdgeInsets.only({bottom: 6.0}),
                                child: new CircleAvatar({
                                    radius: 20.0,
                                    child: new Icon(new IconData(iconDataValue, {fontFamily: 'MaterialIcons'}), {color: Colors.white}),
                                    backgroundColor: bgColor
                                })
                            }),
                            new Container({
                                child: new Text(desc, {style: new TextStyle({color: GlobalConfig.fontColor, fontSize: 14.0})})
                            })
                        ]
                    })
                })
            })
        });
    }

    serviceCard(context){
        return new Container({
            color: GlobalConfig.cardBackgroundColor,
            margin: EdgeInsets.only({top: 6.0, bottom: 6.0}),
            padding: EdgeInsets.only({top: 12.0, bottom: 8.0}),
            child: new Column({
                children: [
                    new Container({
                        child: new Row({
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                                this.serviceCardDescItem(context, 0xe865, "我的书架", Colors.green),
                                this.serviceCardDescItem(context, 0xe3e7, "我的Live", Colors.blue),
                                this.serviceCardDescItem(context, 0xeb44, "私家课", new Color(0xFFA68F52)),
                                this.serviceCardDescItem(context, 0xe227, "付费咨询", new Color(0xFF355A9B))
                            ]
                        })
                    }),
                    new Container({
                        margin: EdgeInsets.only({top: 16.0}),
                        child: new Row({
                            mainAxisAlignment: MainAxisAlignment.start,
                            children: [
                                this.serviceCardDescItem(context, 0xe8c9, "已购", new Color(0xFF088DB4)),
                                this.serviceCardDescItem(context, 0xe03e, "余额礼卷", Colors.blue),
                                this.serviceCardDescItem(context, 0xe1e2, "服务", new Color(0xFF029A3F))
                            ]
                        })
                    })
                ]
            })
        })
    }

    settingCard(context){
        return new Container({
            color: GlobalConfig.cardBackgroundColor,
            margin: EdgeInsets.only({top: 6.0, bottom: 6.0}),
            padding: EdgeInsets.only({top: 12.0, bottom: 8.0}),
            child: new Row({
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                    this.serviceCardDescItem(context, 0xe891, "社区建设", new Color(0xFFB88800)),
                    this.serviceCardDescItem(context, 0xeb45, "反馈", new Color(0xFF63616D)),
                    this.serviceCardDescItem(context, 0xe3a7, "夜间模式", new Color(0xFFB86A0D)),
                    this.serviceCardDescItem(context, 0xe8a4, "设置", new Color(0xFF636269))
                ]
            })
        })
    }

    videoCardHeader(context, title, iconDataValue, colorValue, nextActionTitle){
        return new Container({
            margin: EdgeInsets.only({left: 16.0, bottom: 20.0}),
            child: new Row({
                children: [
                    new Container({
                        child: new CircleAvatar({
                            radius: 20.0,
                            child: new Icon(new IconData(iconDataValue, {fontFamily: 'MaterialIcons'}), {color: Colors.white}),
                            backgroundColor: new Color(colorValue)
                        })
                    }),
                    new Expanded({
                        child: new Container({
                            margin: EdgeInsets.only({left: 8.0}),
                            child: new Text(title, {style: new TextStyle({fontSize: 18.0})})
                        })
                    }),
                    new Container({
                        child: new FlatButton({
                            onPressed: function(){},
                            child: new Text(nextActionTitle, {style: new TextStyle({color: Colors.blue})})
                        })
                    })
                ]
            })
        });
    }

    videoCardItem(context, imgUrl){
        return new Container({
            width: MediaQuery.of(context).size.width / 2.5,
            margin: EdgeInsets.only({right: 6.0}),
            child: new AspectRatio({
                aspectRatio: 4.0 / 2.0,
                child: new Container({
                    foregroundDecoration:new BoxDecoration({
                        image: new DecorationImage({
                            image: new NetworkImage(imgUrl),
                            centerSlice: Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0)
                        }),
                        borderRadius: BorderRadius.all(Radius.circular(6.0))
                    })
                })
            })
        });
    }

    videoCard(context){
        return new Container({
            color: GlobalConfig.cardBackgroundColor,
            margin: EdgeInsets.only({top: 6.0, bottom: 6.0}),
            padding: EdgeInsets.only({top: 12.0, bottom: 8.0}),
            child: new Column({
                children: [
                    this.videoCardHeader(context, "视频创作", 0xe04b, 0xFFB36905, "拍一个"),
                    new Container({
                        margin: EdgeInsets.only({left: 16.0}),
                        child: new SingleChildScrollView({
                            scrollDirection: Axis.horizontal,
                            child: new Row({
                                children: [
                                    this.videoCardItem(context, "https://pic2.zhimg.com/50/v2-5942a51e6b834f10074f8d50be5bbd4d_400x224.jpg"),
                                    this.videoCardItem(context, "https://pic1.zhimg.com/50/v2-0008057d1ad2bd813aea4fc247959e63_400x224.jpg"),
                                    this.videoCardItem(context, "https://pic2.zhimg.com/50/v2-5942a51e6b834f10074f8d50be5bbd4d_400x224.jpg"),
                                    this.videoCardItem(context, "https://pic1.zhimg.com/50/v2-0008057d1ad2bd813aea4fc247959e63_400x224.jpg")
                                ]
                            })
                        })
                    })
                ]
            })
        });
    }

    ideaCardItem(context, title, subTitle, imgUrl){
        return new Container({
            margin: EdgeInsets.only({right: 6.0}),
            decoration: new BoxDecoration({
                color: GlobalConfig.searchBackgroundColor,
                borderRadius: BorderRadius.all(Radius.circular(6.0))
            }),
            child: new Row({
              children: [
                    new Container({
                        padding: EdgeInsets.only({left: 10.0}),
                        child: new Column({
                            children: [
                                new Align({
                                    alignment: Alignment.centerLeft,
                                    child: new Container({
                                        child: new Text(title, {style: new TextStyle({color: Colors.black, fontSize: 16.0})})
                                    })
                                }),
                                new Align({
                                    alignment: Alignment.centerLeft,
                                    child: new Container({
                                        margin: EdgeInsets.only({top: 6.0}),
                                        child: new Text(subTitle, {style: new TextStyle({color: GlobalConfig.fontColor})})
                                    })
                                })
                            ]
                        })
                    }),
                    new Container({
                        margin: EdgeInsets.all(10.0),
                        width: MediaQuery.of(context).size.width / 5,
                        child: new AspectRatio({
                            aspectRatio: 1.0 / 1.0,
                            child: new Container({
                                foregroundDecoration:new BoxDecoration({
                                    image: new DecorationImage({
                                        image: new NetworkImage(imgUrl),
                                        centerSlice: Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0)
                                    }),
                                    borderRadius: BorderRadius.all(Radius.circular(6.0))
                                })
                            })
                        })
                    })
                ]
            })
        });
    }

    ideaCard(context){
        return new Container({
            color: GlobalConfig.cardBackgroundColor,
            margin: EdgeInsets.only({top: 6.0, bottom: 6.0}),
            padding: EdgeInsets.only({top: 12.0, bottom: 8.0}),
            child: new Column({
                children: [
                    this.videoCardHeader(context, "想法", 0xeb3d, 0xFFB36905, "去往想法首页"),
                    new Container({
                        margin: EdgeInsets.only({left: 16.0}),
                        child: new SingleChildScrollView({
                            scrollDirection: Axis.horizontal,
                            child: new Row({
                                children: [
                                    this.ideaCardItem(context, "苹果 WWDC 2018 正在举行", "软件更新意料之中，硬件之谜...", "https://pic2.zhimg.com/50/v2-55039fa535f3fe06365c0fcdaa9e3847_400x224.jpg"),
                                    this.ideaCardItem(context, "此刻你的桌子是什么样子？", "晒一晒你的书桌/办公桌", "https://pic2.zhimg.com/50/v2-ce2e01a047e4aba9bfabf8469cfd3e75_400x224.jpg"),
                                    this.ideaCardItem(context, "关于高考你印象最深的是...", "聊聊你的高三生活", "https://pic2.zhimg.com/50/v2-55039fa535f3fe06365c0fcdaa9e3847_400x224.jpg"),
                                    this.ideaCardItem(context, "夏天一定要吃的食物有哪些", "最适合夏天吃的那种", "https://pic2.zhimg.com/50/v2-ce2e01a047e4aba9bfabf8469cfd3e75_400x224.jpg")
                                ]
                            })
                        })
                    })
                ]
            })
        });
    }

    build(context){
        let widget = new MaterialApp({
            // theme: GlobalConfig.themeData,
            home: new Scaffold({
                appBar: new AppBar({
                    title: this.barSearch()
                }),
                body: new SingleChildScrollView({
                    child: new Container({
                        child: new Column({
                            children: [
                                this.infoCard(context),
                                this.serviceCard(context),
                                this.settingCard(context),
                                this.videoCard(context),
                                this.ideaCard(context)
                            ]
                        })
                    })
                })
            })
        });
        return widget;
    }
}

module.exports = { MyPage };



/***/ }),

/***/ "./lib/app_demo/zhihu/zhihu.js":
/*!*************************************!*\
  !*** ./lib/app_demo/zhihu/zhihu.js ***!
  \*************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 33:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


let {
  runApp,
  MXJSFlutterApp,
  MXJSWidgetState,
  MXJSStatefulWidget,
  MaterialApp
} = __webpack_require__(/*! ../../js_flutter.js */ "./lib/js_flutter.js");

let {Index} = __webpack_require__(/*! ./index.js */ "./lib/app_demo/zhihu/index.js");

class JSZhiHuPage extends MXJSStatefulWidget {
    constructor() {
        super('JSZhiHuPage');
    }
  
    createState() {
        return new JSZhiHuPageState(this);
    }
}

  
class JSZhiHuPageState extends MXJSWidgetState {
    build(context){
        let widget = new MaterialApp({
            title: "知乎-高仿版",
            home: new Index()
        });
        return widget;
    }
}

module.exports = { JSZhiHuPage };



/***/ }),

/***/ "./lib/home_page.js":
/*!**************************!*\
  !*** ./lib/home_page.js ***!
  \**************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 357:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

let {
    runApp,
    MXJSFlutterApp,
    MXJSStatelessWidget,
    MXJSStatefulWidget,
    MXJSWidgetState,
    Scaffold,
    Container,
    Color,
    Colors,
    AppBar,
    Text,
    ListView,
    ListTile,
    Icon,
    IconData,
    EdgeInsets,
    TextAlign,
    TextStyle,
    Row,
    Padding,
    Theme,
    Navigator,
    MaterialPageRoute,
    Scrollbar,
    MXJSLog,
} = __webpack_require__(/*! ./js_flutter.js */ "./lib/js_flutter.js");

//业务代码
class MXJSWidgetHomePage extends MXJSStatefulWidget {
    constructor() {
        super("MXJSWidgetHomePage");

        this.data = "biz data";
        this.count = 0;
    }

    createState() {
        return new MXJSWidgetHomePageState(this);
    }
}

class MXJSWidgetHomePageState extends MXJSWidgetState {

    build(context) {

        let demoList = new ListView({

            children: [

                this.sectionTitle(context, "App Demo"),
                new ListTile({
                    leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('Examples'),
                    subtitle: new Text('Common Examples'),
                    onTap: function () {

                        //点击时懒加载页面
                        let { ExamplesPage } = __webpack_require__(/*! ./app_demo/examples/index.js */ "./lib/app_demo/examples/index.js");

                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new ExamplesPage;
                            }
                        }))


                    }
                }),
                new ListTile({
                    leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('Widget Examples'),
                    subtitle: new Text('All Widget Examples'),
                    onTap: function () {

                        //点击时懒加载页面
                        let { WidgetExamplesPage } = __webpack_require__(/*! ./app_demo/widget_examples/index.js */ "./lib/app_demo/widget_examples/index.js");

                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new WidgetExamplesPage;
                            }
                        }))
                    }
                }),
                new ListTile({
                    leading: new Icon(new IconData(0xe06d, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('Material'),
                    subtitle: new Text('Material UI Demo'),
                    onTap: function () {
                        let { JSMaterialPage } = __webpack_require__(/*! ./app_demo/material.js */ "./lib/app_demo/material.js");
                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new JSMaterialPage;
                            }
                        }))
                    }
                }),
                new ListTile({
                    leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('ZhiHu'),
                    subtitle: new Text('ZhiHu high copy'),
                    onTap: function () {

                        let { JSZhiHuPage } = __webpack_require__(/*! ./app_demo/zhihu/zhihu.js */ "./lib/app_demo/zhihu/zhihu.js");

                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new JSZhiHuPage;
                            }
                        }))
                    }
                }),

                new ListTile({
                    leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('网易新闻 ListViewDemo'),
                    subtitle: new Text('ListView ,Message Channel, Pull to refresh'),

                    onTap: function () {

                        let list_view = __webpack_require__(/*! ./app_demo/listview_example.js */ "./lib/app_demo/listview_example.js");

                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new list_view.ListViewDemo;
                            }
                        }))
                    }
                }),

                new ListTile({
                    leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('PlatformAPIExamples'),
                    subtitle: new Text('Network/Dio/MessageChannel'),

                    onTap: function () {

                        let { PlatformExamplesPage } = __webpack_require__(/*! ./app_demo/platform/index.js */ "./lib/app_demo/platform/index.js");

                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new PlatformExamplesPage;
                            }
                        }))
                    }
                }),

                new ListTile({
                    leading: new Icon(new IconData(0xe06d, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('Pesto'),
                    subtitle: new Text('Simple recipe browser'),

                    onTap: function () {

                        let pesto = __webpack_require__(/*! ./app_demo/pesto.js */ "./lib/app_demo/pesto.js");

                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new pesto.JSPestoPage;
                            }
                        }))
                    }
                }),
                new ListTile({
                    leading: new Icon(new IconData(0xe0d0, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('Contact profile'),
                    subtitle: new Text('Address book entry with a flexible appbar'),

                    onTap: function () {
                        let { JSContactPage } = __webpack_require__(/*! ./app_demo/contact.js */ "./lib/app_demo/contact.js");
                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new JSContactPage;
                            }
                        }))
                    }
                }),
                new ListTile({
                    leading: new Icon(new IconData(0xe06d, { fontFamily: 'MaterialIcons' }), { color: Theme.of(context).primaryColor }),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('Animation'),
                    subtitle: new Text('Section organizer'),
                    onTap: function () {
                        let { JSAnimationPage } = __webpack_require__(/*! ./app_demo/animation.js */ "./lib/app_demo/animation.js");
                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new JSAnimationPage;
                            }
                        }))
                    }
                }),
                this.sectionTitle(context, "性能测试"),
                new ListTile({
                    leading: new Icon(new IconData(0xe06d, { fontFamily: 'MaterialIcons' })),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('Profile'),
                    subtitle: new Text('性能测试 performance profiling'),
                    onTap: function () {


                        let { ProfileExamplesPage } = __webpack_require__(/*! ./app_demo/profile/index.js */ "./lib/app_demo/profile/index.js");

                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new ProfileExamplesPage;
                            }
                        }))
                    }
                }),

                // this.sectionTitle(context, "mxjsbuilder build app"),
                // new ListTile({
                //     leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' })),
                //     trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                //     title: new Text('FlutterDemo'),
                //     subtitle: new Text('简单样例'),
                //     onTap: function () {

                //         let flutter_demo_ddc = require("./mxjsbuilder_demo/flutter_demo.dart.lib.js");

                //         Navigator.push(context, new MaterialPageRoute({
                //             builder: function (context) {
                //                 return new flutter_demo_ddc.main.MyHomePage.new({ title: "Flutter Demo Home Page" });
                //             }
                //         }))
                //     }
                // }),
                // new ListTile({
                //     leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' })),
                //     trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                //     title: new Text('ContactDemo'),
                //     subtitle: new Text('联系人'),

                //     onTap: function () {

                //         let contact_demo_ddc = require("./mxjsbuilder_demo/contacts_demo.dart.lib.js");

                //         Navigator.push(context, new MaterialPageRoute({
                //             builder: function (context) {
                //                 return new contact_demo_ddc.contacts_demo.ContactsDemo.new;
                //             }
                //         }))
                //     }
                // }),
                // new ListTile({
                //     leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' })),
                //     trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                //     title: new Text('PestoDemo'),
                //     subtitle: new Text('菜谱'),
                //     onTap: function () {

                //         let pesto_demo_ddc = require("./mxjsbuilder_demo/pesto_demo.dart.lib.js");

                //         Navigator.push(context, new MaterialPageRoute({
                //             builder: function (context) {
                //                 return new pesto_demo_ddc.pesto_demo.PestoDemo.new;
                //             }
                //         }))
                //     }
                // }),
                // new ListTile({
                //     leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' })),
                //     trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                //     title: new Text('ZhiHu'),
                //     subtitle: new Text('知乎-高仿版'),

                //     onTap: function () {

                //         const packages__zhihu__index = require('./mxjsbuilder_demo/packages/zhihu/index/index.dart.lib.js');
                //         const index_page = packages__zhihu__index.index__index;

                //         Navigator.push(context, new MaterialPageRoute({
                //             builder: function (context) {
                //                 return new index_page.Index.new;
                //             }
                //         }))
                //     }
                // }),
                this.sectionTitle(context, "Dart JS Api"),
                new ListTile({
                    leading: new Icon(new IconData(0xe39d, { fontFamily: 'MaterialIcons' })),
                    trailing: new Icon(new IconData(0xe5df, { fontFamily: 'MaterialIcons', matchTextDirection: true })),
                    title: new Text('Dart JS Api'),
                    subtitle: new Text('JS Call Dart Function'),
                    onTap: function () {

                        let { PageExampleJSApi } = __webpack_require__(/*! ./app_demo/custom_js_api.js */ "./lib/app_demo/custom_js_api.js");
                        Navigator.push(context, new MaterialPageRoute({
                            builder: function (context) {
                                return new PageExampleJSApi;
                            }
                        }))
                    }
                })
            ]
        });

        let w = new Scaffold({
            appBar: new AppBar({
                title: new Text("MXFlutter Examples")
            }),
            body: demoList
        });


        return w;
    }

    sectionTitle(context, title) {
        return new HomeSectionTitle(title);
    }
}

class HomeSectionTitle extends MXJSStatelessWidget {
    constructor(title, { key } = {}) {
        super("HomeSectionTitle", { key: key });
        this.title = title;
    }

    build(context) {
        return new Container({
            padding: EdgeInsets.all(10.0),
            color: Theme.of(context).primaryColor,
            child: new Row({
                children: [
                    new Icon(new IconData(0xe80e, { fontFamily: 'MaterialIcons' }), { size: 20, color: new Color(0xFFFFFFFF) }),
                    new Padding({ padding: EdgeInsets.fromLTRB(10.0, 0.0, 0.0, 0.0) }),
                    new Text(this.title, {
                        textAlign: TextAlign.start,
                        style: new TextStyle({
                            fontSize: 16,
                            fontWeight: Theme.of(context).textTheme.title.fontWeight,
                            color: Colors.white
                        })
                    })
                ]
            })
        });
    }
}

module.exports = { MXJSWidgetHomePage };



/***/ }),

/***/ "./lib/js_flutter.js":
/*!***************************!*\
  !*** ./lib/js_flutter.js ***!
  \***************************/
/*! namespace exports */
/*! export MXBaseKey [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXBaseKey */
/*! export MXDartClass [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXDartClass */
/*! export MXJSBaseWidget [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXJSBaseWidget */
/*! export MXJSBuildContext [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXJSBuildContext */
/*! export MXJSFlutterApp [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXJSFlutterApp */
/*! export MXJSLog [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXJSLog */
/*! export MXJSStatefulWidget [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXJSStatefulWidget */
/*! export MXJSStatelessWidget [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXJSStatelessWidget */
/*! export MXJSWidgetState [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXJSWidgetState */
/*! export MXLifecycleDartClass [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXLifecycleDartClass */
/*! export MXLifecycleWidgetControllerBase [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXLifecycleWidgetControllerBase */
/*! export MXMirror [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXMirror */
/*! export MXMirrorObjMethodCall [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXMirrorObjMethodCall */
/*! export MXMirrorWidget [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MXMirrorWidget */
/*! export MethodCall [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MethodCall */
/*! export MethodChannel [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .MethodChannel */
/*! export __esModule [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .__esModule */
/*! export bridgeMXNativeJSFlutterApp [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .bridgeMXNativeJSFlutterApp */
/*! export createMirrorObj [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .createMirrorObj */
/*! export default [not provided] [no usage info] [missing usage info prevents renaming] */
/*! export invokeFlutterCommonChannel [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .invokeFlutterCommonChannel */
/*! export invokeMirrorObjMethod [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .invokeMirrorObjMethod */
/*! export runApp [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@tencent/mxflutter/lib/index.js .runApp */
/*! other exports [maybe provided (runtime-defined)] [no usage info] -> ./node_modules/@tencent/mxflutter-widgets/index.js */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.n, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MXBaseKey": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXBaseKey,
/* harmony export */   "MXDartClass": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXDartClass,
/* harmony export */   "MXJSBaseWidget": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXJSBaseWidget,
/* harmony export */   "MXJSBuildContext": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXJSBuildContext,
/* harmony export */   "MXJSFlutterApp": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXJSFlutterApp,
/* harmony export */   "MXJSLog": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXJSLog,
/* harmony export */   "MXJSStatefulWidget": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXJSStatefulWidget,
/* harmony export */   "MXJSStatelessWidget": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXJSStatelessWidget,
/* harmony export */   "MXJSWidgetState": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXJSWidgetState,
/* harmony export */   "MXLifecycleDartClass": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXLifecycleDartClass,
/* harmony export */   "MXLifecycleWidgetControllerBase": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXLifecycleWidgetControllerBase,
/* harmony export */   "MXMirror": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXMirror,
/* harmony export */   "MXMirrorObjMethodCall": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXMirrorObjMethodCall,
/* harmony export */   "MXMirrorWidget": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MXMirrorWidget,
/* harmony export */   "MethodCall": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MethodCall,
/* harmony export */   "MethodChannel": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.MethodChannel,
/* harmony export */   "__esModule": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.__esModule,
/* harmony export */   "bridgeMXNativeJSFlutterApp": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.bridgeMXNativeJSFlutterApp,
/* harmony export */   "createMirrorObj": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.createMirrorObj,
/* harmony export */   "invokeFlutterCommonChannel": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.invokeFlutterCommonChannel,
/* harmony export */   "invokeMirrorObjMethod": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.invokeMirrorObjMethod,
/* harmony export */   "runApp": () => /* reexport safe */ _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__.runApp
/* harmony export */ });
/* harmony import */ var _tencent_mxflutter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tencent/mxflutter */ "./node_modules/@tencent/mxflutter/lib/index.js");
/* harmony import */ var _tencent_mxflutter_widgets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tencent/mxflutter-widgets */ "./node_modules/@tencent/mxflutter-widgets/index.js");
/* harmony import */ var _tencent_mxflutter_widgets__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tencent_mxflutter_widgets__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _tencent_mxflutter_widgets__WEBPACK_IMPORTED_MODULE_1__) if(["default","MXBaseKey","MXDartClass","MXJSBaseWidget","MXJSBuildContext","MXJSFlutterApp","MXJSLog","MXJSStatefulWidget","MXJSStatelessWidget","MXJSWidgetState","MXLifecycleDartClass","MXLifecycleWidgetControllerBase","MXMirror","MXMirrorObjMethodCall","MXMirrorWidget","MethodCall","MethodChannel","__esModule","bridgeMXNativeJSFlutterApp","createMirrorObj","invokeFlutterCommonChannel","invokeMirrorObjMethod","runApp"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _tencent_mxflutter_widgets__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);





/***/ }),

/***/ "./node_modules/@tencent/mxflutter-cached-network-image/cached_network_image.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tencent/mxflutter-cached-network-image/cached_network_image.js ***!
  \**************************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 78:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

const { MXMirrorWidget } = __webpack_require__(/*! @tencent/mxflutter */ "./node_modules/@tencent/mxflutter/lib/index.js");

class CachedNetworkImage extends MXMirrorWidget {
  constructor({
    key,
    imageUrl,
    imageBuilder,
    placeholder,
    errorWidget,
    fadeOutDuration,
    fadeOutCurve,
    fadeInDuration,
    fadeInCurve,
    width,
    height,
    fit,
    alignment,
    repeat,
    matchTextDirection,
    httpHeaders,
    cacheManager,
    useOldImageOnUrlChange,
    color,
    filterQuality,
    colorBlendMode,
    placeholderFadeInDuration,
  } = {}) {
    super();

    this.key = key;
    this.imageUrl = imageUrl;
    this.imageBuilder = imageBuilder;
    this.placeholder = placeholder;
    this.errorWidget = errorWidget;
    this.fadeOutDuration = fadeOutDuration;
    this.fadeOutCurve = fadeOutCurve;
    this.fadeInDuration = fadeInDuration;
    this.fadeInCurve = fadeInCurve;
    this.width = width;
    this.height = height;
    this.fit = fit;
    this.alignment = alignment;
    this.repeat = repeat;
    this.matchTextDirection = matchTextDirection;
    this.httpHeaders = httpHeaders;
    this.cacheManager = cacheManager;
    this.useOldImageOnUrlChange = useOldImageOnUrlChange;
    this.color = color;
    this.filterQuality = filterQuality;
    this.colorBlendMode = colorBlendMode;
    this.placeholderFadeInDuration = placeholderFadeInDuration;
  }

  preBuild(jsWidgetHelper, buildContext) {
    // 暂时只处理placeholder
    if (this.placeholder) {
      this.placeholderChild = this.placeholder(buildContext, this.imageUrl);
      delete this.placeholder;
    }
  }
}

CachedNetworkImage.new = function (arg) {
  return new CachedNetworkImage(arg);
};

// src__cached_image_widget = Object.create(null);
// src__cached_image_widget.CachedNetworkImage = CachedNetworkImage;
// exports.src__cached_image_widget = src__cached_image_widget;

//for js dev
module.exports = {
  CachedNetworkImage,
};


/***/ }),

/***/ "./node_modules/@tencent/mxflutter-cached-network-image/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tencent/mxflutter-cached-network-image/index.js ***!
  \***********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 2:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let widgetExports = __webpack_require__(/*! ./cached_network_image */ "./node_modules/@tencent/mxflutter-cached-network-image/cached_network_image.js");
module.exports = widgetExports;


/***/ }),

/***/ "./node_modules/@tencent/mxflutter-dio/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tencent/mxflutter-dio/index.js ***!
  \******************************************************/
/*! default exports */
/*! export BaseOptions [provided] [no usage info] [missing usage info prevents renaming] */
/*! export Dio [provided] [no usage info] [missing usage info prevents renaming] */
/*! export Headers [provided] [no usage info] [missing usage info prevents renaming] */
/*! export Options [provided] [no usage info] [missing usage info prevents renaming] */
/*! export RequestOptions [provided] [no usage info] [missing usage info prevents renaming] */
/*! export Response [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ResponseType [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__ */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


const packages__mxdio = __webpack_require__(/*! ./mxdio */ "./node_modules/@tencent/mxflutter-dio/mxdio.js");
exports.Dio = packages__mxdio.MXDio;
exports.BaseOptions = packages__mxdio.MXBaseOptions
exports.Options = packages__mxdio.MXOptions;
exports.Headers = packages__mxdio.MXHeaders;
exports.Response = packages__mxdio.MXResponse;
exports.RequestOptions = packages__mxdio.MXRequestOptions
exports.ResponseType = packages__mxdio.MXResponseType;


/***/ }),

/***/ "./node_modules/@tencent/mxflutter-dio/mxdio.js":
/*!******************************************************!*\
  !*** ./node_modules/@tencent/mxflutter-dio/mxdio.js ***!
  \******************************************************/
/*! default exports */
/*! export MXBaseOptions [provided] [no usage info] [missing usage info prevents renaming] */
/*! export MXDio [provided] [no usage info] [missing usage info prevents renaming] */
/*! export MXHeaders [provided] [no usage info] [missing usage info prevents renaming] */
/*! export MXOptions [provided] [no usage info] [missing usage info prevents renaming] */
/*! export MXRequestOptions [provided] [no usage info] [missing usage info prevents renaming] */
/*! export MXResponse [provided] [no usage info] [missing usage info prevents renaming] */
/*! export MXResponseType [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__ */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

const { MXDartClass, MXLifecycleDartClass, MXMirrorObjMethodCall, MXJSLog } = __webpack_require__(/*! @tencent/mxflutter */ "./node_modules/@tencent/mxflutter/lib/index.js");

MXResponseType = {
  json: { _name: 'ResponseType.json', index: 0 },
  stream: { _name: 'ResponseType.stream', index: 1 },
  plain: { _name: 'ResponseType.plain', index: 2 },
  bytes: { _name: 'ResponseType.bytes', index: 3 },
};

class MXBaseOptions extends MXDartClass {
  constructor({
    method,
    connectTimeout,
    receiveTimeout,
    sendTimeout,
    baseUrl,
    queryParameters,
    extra,
    headers,
    responseType,
    contentType,
    validateStatus,
    receiveDataWhenStatusError,
    followRedirects,
    maxRedirects,
  } = {}) {
    super();
    this.className = 'BaseOptions';

    this.method = method;
    this.connectTimeout = connectTimeout;
    this.receiveTimeout = receiveTimeout;
    this.sendTimeout = sendTimeout;
    this.baseUrl = baseUrl;
    this.queryParameters = queryParameters;
    this.extra = extra;
    this.headers = headers;
    this.responseType = responseType;
    this.contentType = contentType;
    this.validateStatus = validateStatus;
    this.receiveDataWhenStatusError = receiveDataWhenStatusError;
    this.followRedirects = followRedirects;
    this.maxRedirects = maxRedirects;
  }
}

class MXOptions extends MXDartClass {
  constructor({
    method,
    sendTimeout,
    receiveTimeout,
    extra,
    headers,
    responseType,
    contentType,
    validateStatus,
    receiveDataWhenStatusError,
    followRedirects,
    maxRedirects,
    // requestEncoder,
    // responseDecoder,
  } = {}) {
    super();
    this.className = 'Options';
    this.method = method;
    this.sendTimeout = sendTimeout;
    this.receiveTimeout = receiveTimeout;
    this.extra = extra;
    this.headers = headers;
    this.responseType = responseType;
    this.contentType = contentType;
    this.validateStatus = validateStatus;
    this.receiveDataWhenStatusError = receiveDataWhenStatusError;
    this.followRedirects = followRedirects;
    this.maxRedirects = maxRedirects;
    // this.requestEncoder = requestEncoder;
    // this.responseDecoder = responseDecoder;
  }
}

class MXRequestOptions extends MXDartClass {
  constructor({
    method,
    sendTimeout,
    receiveTimeout,
    connectTimeout,
    data,
    path,
    queryParameters,
    baseUrl,
    extra,
    headers,
    responseType,
    contentType,
    validateStatus,
    receiveDataWhenStatusError,
    followRedirects,
    maxRedirects,
  } = {}) {
    super();
    this.className = 'RequestOptions';
    this.method = method;
    this.sendTimeout = sendTimeout;
    this.receiveTimeout = receiveTimeout;
    this.connectTimeout = connectTimeout;
    this.data = data;
    this.path = path;
    this.queryParameters = queryParameters;
    this.baseUrl = baseUrl;
    this.extra = extra;
    this.headers = headers;
    this.responseType = responseType;
    this.contentType = contentType;
    this.validateStatus = validateStatus;
    this.receiveDataWhenStatusError = receiveDataWhenStatusError;
    this.followRedirects = followRedirects;
    this.maxRedirects = maxRedirects;
  }
}

class MXHeaders {
  constructor({ map } = {}) {
    this.map = map;
  }
  /// Convenience method for the value for a single valued header. If
  /// there is no header with the provided name, [:null:] will be
  /// returned. If the header has more than one value an exception is
  /// thrown.
  value(name) {
    let arr = this.map[name];
    if (arr == null) return null;
    if (arr.length == 1) return arr[0];
    throw Exception('"$name" header has more than one value, please use Headers[name]');
  }
}

MXHeaders.acceptHeader = 'accept';
MXHeaders.contentEncodingHeader = 'content-encoding';
MXHeaders.contentLengthHeader = 'content-length';
MXHeaders.contentTypeHeader = 'content-type';
MXHeaders.wwwAuthenticateHeader = 'www-authenticate';
// Header field value
MXHeaders.jsonContentType = 'application/json; charset=utf-8';
MXHeaders.formUrlEncodedContentType = 'application/x-www-form-urlencoded';

class MXResponse extends MXDartClass {
  constructor({ data, headers, request, isRedirect, statusCode, statusMessage, redirects, extra } = {}) {
    super();
    this.className = 'Response';

    this.data = data;
    this.headers = headers;
    this.request = request;
    this.isRedirect = isRedirect;
    this.statusCode = statusCode;
    this.statusMessage = statusMessage;
    this.redirects = redirects;
    this.extra = extra;
  }

  static fromJSON(jsonMap) {
    let resp = new MXResponse();
    resp.data = jsonMap['data'];
    resp.headers = new MXHeaders(jsonMap['headers']);
    resp.request = jsonMap['request'];
    resp.isRedirect = jsonMap['isRedirect'];
    resp.statusCode = jsonMap['statusCode'];
    resp.statusMessage = jsonMap['statusMessage'];
    resp.redirects = jsonMap['redirects'];
    resp.extra = jsonMap['extra'];

    return resp;
  }
}

///为了iOS / Android 双平台同时支持，用Flutter层能力来实现网络
class MXDio extends MXLifecycleDartClass {
  constructor(baseOptions) {
    //创建对应FLutter对象
    var argument = new MXMirrorObjMethodCall({
      className: 'Dio',
      args: {
        baseOptions: baseOptions,
      },
    });

    super(argument);
  }

  get(
    path,
    {
      queryParameters,
      options,
      //cancelToken,
      onReceiveProgress,
    } = {},
  ) {
    return this.request(path, {
      options: this.checkOptions('get', options),
      queryParameters: queryParameters,
      //cancelToken: cancelToken,
      onReceiveProgress: onReceiveProgress,
    });
  }

  post(
    path,
    {
      data,
      queryParameters, // Map<String, dynamic>
      options, //Options
      //cancelToken,
      onSendProgress, //ProgressCallback
      onReceiveProgress, //ProgressCallback
    } = {},
  ) {
    return this.request(path, {
      data: data,
      options: this.checkOptions('post', options),
      queryParameters: queryParameters,

      //cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    });
  }

  request(
    path,
    {
      data,
      queryParameters, // Map<String, dynamic>
      options, //Options
      onSendProgress, //ProgressCallback
      onReceiveProgress, //ProgressCallback
    } = {},
  ) {
    let onSendProgressCallbackID = this.addCallback(onSendProgress);
    let onReceiveProgressCallbackID = this.addCallback(onReceiveProgress);

    let argument = new MXMirrorObjMethodCall({
      className: 'Dio',
      funcName: 'request',
      args: {
        path: path,
        data: data,
        options: options,
        queryParameters: queryParameters,
        onSendProgress: onSendProgressCallbackID,
        onReceiveProgress: onReceiveProgressCallbackID,
      },
    });

    let that = this;
    let promiseResult = new Promise(function (resolve, reject) {
      that.invokeMirrorObjMethod(argument, function (value) {
        if (value != null) {
          let jsonMap = JSON.parse(value);
          let response = MXResponse.fromJSON(jsonMap);

          if (response) {
            response.options = options;
          }

          if (options.responseType == MXResponseType.bytes) {
            response.data = convert.base64Encode(response.data);
          }

          resolve(response);
        } else {
          resolve(null);
        }

        setTimeout(function () {
          that.removeCallback(onSendProgressCallbackID);
          that.removeCallback(onReceiveProgressCallbackID);
        }, 1000);
      });
    });

    return promiseResult;
  }

  checkOptions(method, options) {
    options = options ? options : new MXOptions();
    options.method = method;
    return options;
  }
}

function MXFDio(baseOptions) {
  return new MXDio(baseOptions);
}

//手写JS使用的导出
exports.MXDio = MXFDio;
exports.MXBaseOptions = MXBaseOptions;
exports.MXOptions = MXOptions;
exports.MXHeaders = MXHeaders;
exports.MXResponse = MXResponse;
exports.MXRequestOptions = MXRequestOptions;
exports.MXResponseType = MXResponseType;


/***/ }),

/***/ "./node_modules/@tencent/mxflutter-pull-to-refresh/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tencent/mxflutter-pull-to-refresh/index.js ***!
  \******************************************************************/
/*! default exports */
/*! export ClassicFooter [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ClassicHeader [provided] [no usage info] [missing usage info prevents renaming] */
/*! export IconPosition [provided] [no usage info] [missing usage info prevents renaming] */
/*! export LoadStatus [provided] [no usage info] [missing usage info prevents renaming] */
/*! export LoadStyle [provided] [no usage info] [missing usage info prevents renaming] */
/*! export RefreshConfiguration [provided] [no usage info] [missing usage info prevents renaming] */
/*! export RefreshController [provided] [no usage info] [missing usage info prevents renaming] */
/*! export RefreshStatus [provided] [no usage info] [missing usage info prevents renaming] */
/*! export SmartRefresher [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__ */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


let smartRefresherExports = __webpack_require__(/*! ./src/smart_refresher.js */ "./node_modules/@tencent/mxflutter-pull-to-refresh/src/smart_refresher.js");
let classIndicatorExports = __webpack_require__(/*! ./src/indicator/class_indicator.js */ "./node_modules/@tencent/mxflutter-pull-to-refresh/src/indicator/class_indicator.js");

exports.SmartRefresher = smartRefresherExports.SmartRefresher;
exports.RefreshController = smartRefresherExports.RefreshController;
exports.RefreshConfiguration = smartRefresherExports.RefreshConfiguration;
exports.LoadStatus = smartRefresherExports.LoadStatus;
exports.LoadStyle = smartRefresherExports.LoadStyle;
exports.IconPosition = smartRefresherExports.IconPosition;
exports.RefreshStatus = smartRefresherExports.RefreshStatus;

exports.ClassicHeader = classIndicatorExports.ClassicHeader;
exports.ClassicFooter = classIndicatorExports.ClassicFooter;


/***/ }),

/***/ "./node_modules/@tencent/mxflutter-pull-to-refresh/src/indicator/class_indicator.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tencent/mxflutter-pull-to-refresh/src/indicator/class_indicator.js ***!
  \******************************************************************************************/
/*! default exports */
/*! export ClassicFooter [provided] [no usage info] [missing usage info prevents renaming] */
/*! export ClassicHeader [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__ */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.

const { MXMirrorWidget ,MXLifecycleWidgetControllerBase,MXMirrorObjMethodCall} = __webpack_require__(/*! @tencent/mxflutter */ "./node_modules/@tencent/mxflutter/lib/index.js");

class ClassicHeader extends MXMirrorWidget {
    constructor({
        key,
        refreshStyle,
        height,
        completeDuration,
        outerBuilder,
        textStyle,
        releaseText,
        refreshingText,
        canTwoLevelIcon,
        twoLevelView,
        canTwoLevelText,
        completeText,
        failedText,
        idleText,
        iconPos,
        spacing,
        refreshingIcon,
        failedIcon,
        completeIcon,
        idleIcon,
        releaseIcon,
    } = {}) {
        super();

        this.key = key;
        this.refreshStyle = refreshStyle;
        this.height = height;
        this.completeDuration = completeDuration;
        this.outerBuilder = outerBuilder;
        this.textStyle = textStyle;
        this.releaseText = releaseText;
        this.refreshingText = refreshingText;
        this.canTwoLevelIcon = canTwoLevelIcon;
        this.twoLevelView = twoLevelView;
        this.canTwoLevelText = canTwoLevelText;
        this.completeText = completeText;
        this.failedText = failedText;
        this.idleText = idleText;
        this.iconPos = iconPos;
        this.spacing = spacing;
        this.refreshingIcon = refreshingIcon;
        this.failedIcon = failedIcon;
        this.completeIcon = completeIcon;
        this.idleIcon = idleIcon;
        this.releaseIcon = releaseIcon;
    }
}

ClassicHeader.new = function (arg) {
    return new ClassicHeader(arg);
};

class ClassicFooter extends MXMirrorWidget {
    constructor({
        key,
        onClick,
        loadStyle,
        height,
        outerBuilder,
        textStyle,
        loadingText,
        noDataText,
        noMoreIcon,
        idleText,
        failedText,
        canLoadingText,
        failedIcon,
        iconPos,
        spacing,
        completeDuration,
        loadingIcon,
        canLoadingIcon,
        idleIcon,
    } = {}) {
        super();

        this.key = key;
        this.onClick = onClick;
        this.loadStyle = loadStyle;
        this.height = height;
        this.outerBuilder = outerBuilder;
        this.textStyle = textStyle;
        this.loadingText = loadingText;
        this.noDataText = noDataText;
        this.noMoreIcon = noMoreIcon;
        this.idleText = idleText;
        this.failedText = failedText;
        this.canLoadingText = canLoadingText;
        this.failedIcon = failedIcon;
        this.iconPos = iconPos;
        this.spacing = spacing;
        this.completeDuration = completeDuration;
        this.loadingIcon = loadingIcon;
        this.canLoadingIcon = canLoadingIcon;
        this.idleIcon = idleIcon;
    }
}

ClassicFooter.new = function (arg) {
    return new ClassicFooter(arg);
};

// src__indicator__classic_indicator = Object.create(null);
// src__indicator__classic_indicator.ClassicHeader = ClassicHeader;
// src__indicator__classic_indicator.ClassicFooter = ClassicFooter;

// exports.src__indicator__classic_indicator = src__indicator__classic_indicator;

exports.ClassicHeader = ClassicHeader;
exports.ClassicFooter = ClassicFooter;

/***/ }),

/***/ "./node_modules/@tencent/mxflutter-pull-to-refresh/src/smart_refresher.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tencent/mxflutter-pull-to-refresh/src/smart_refresher.js ***!
  \********************************************************************************/
/*! default exports */
/*! export IconPosition [provided] [no usage info] [missing usage info prevents renaming] */
/*! export LoadStatus [provided] [no usage info] [missing usage info prevents renaming] */
/*! export LoadStyle [provided] [no usage info] [missing usage info prevents renaming] */
/*! export RefreshConfiguration [provided] [no usage info] [missing usage info prevents renaming] */
/*! export RefreshController [provided] [no usage info] [missing usage info prevents renaming] */
/*! export RefreshStatus [provided] [no usage info] [missing usage info prevents renaming] */
/*! export SmartRefresher [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__ */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

//  MXFlutterFramework
//  Copyright 2019 The MXFlutter Authors. All rights reserved.
//
//  Use of this source code is governed by a MIT-style license that can be
//  found in the LICENSE file.


const { MXMirrorWidget ,MXLifecycleWidgetControllerBase,MXMirrorObjMethodCall} = __webpack_require__(/*! @tencent/mxflutter */ "./node_modules/@tencent/mxflutter/lib/index.js");

LoadStatus = {
    start: {
        _name: "CrossAxisAlignment.idle",
        index: 0
    },
    end: {
        _name: "CrossAxisAlignment.canLoading",
        index: 1
    },
    center: {
        _name: "CrossAxisAlignment.loading",
        index: 2
    },
    stretch: {
        _name: "CrossAxisAlignment.noMore",
        index: 3
    },
    baseline: {
        _name: "CrossAxisAlignment.failed",
        index: 4
    }
};

class RefreshConfiguration extends MXMirrorWidget {
    constructor({
        child,
        headerBuilder,
        footerBuilder,
        dragSpeedRatio,
        shouldFooterFollowWhenNotFull,
        enableScrollWhenTwoLevel,
        enableLoadingWhenNoData,
        enableBallisticRefresh,
        springDescription,
        enableScrollWhenRefreshCompleted,
        enableLoadingWhenFailed,
        twiceTriggerDistance,
        closeTwoLevelDistance,
        skipCanRefresh,
        autoLoad,
        maxOverScrollExtent,
        enableBallisticLoad,
        maxUnderScrollExtent,
        headerTriggerDistance,
        footerTriggerDistance,
        hideFooterWhenNotFull,
        topHitBoundary,
        bottomHitBoundary,
    } = {}) {
        super();

        this.child = child;
        this.headerBuilder = headerBuilder;
        this.footerBuilder = footerBuilder;
        this.dragSpeedRatio = dragSpeedRatio;
        this.shouldFooterFollowWhenNotFull = shouldFooterFollowWhenNotFull;
        this.enableScrollWhenTwoLevel = enableScrollWhenTwoLevel;
        this.enableLoadingWhenNoData = enableLoadingWhenNoData;
        this.enableBallisticRefresh = enableBallisticRefresh;
        this.springDescription = springDescription;
        this.enableScrollWhenRefreshCompleted = enableScrollWhenRefreshCompleted;
        this.enableLoadingWhenFailed = enableLoadingWhenFailed;
        this.twiceTriggerDistance = twiceTriggerDistance;
        this.closeTwoLevelDistance = closeTwoLevelDistance;
        this.skipCanRefresh = skipCanRefresh;
        this.autoLoad = autoLoad;
        this.maxOverScrollExtent = maxOverScrollExtent;
        this.enableBallisticLoad = enableBallisticLoad;
        this.maxUnderScrollExtent = maxUnderScrollExtent;
        this.headerTriggerDistance = headerTriggerDistance;
        this.footerTriggerDistance = footerTriggerDistance;
        this.hideFooterWhenNotFull = hideFooterWhenNotFull;
        this.topHitBoundary = topHitBoundary;
        this.bottomHitBoundary = bottomHitBoundary;
    }

    preBuild(jsWidgetHelper, buildContext) {
        if (this.headerBuilder) {
          this.headerBuilderChild = this.headerBuilder();
          delete this.headerBuilder;
        }

        if (this.footerBuilder) {
            this.footerBuilderChild = this.footerBuilder();
            delete this.footerBuilder;
        }

    }
}

RefreshConfiguration.new = function (arg) {
    return new RefreshConfiguration(arg);
};

class SmartRefresher extends MXMirrorWidget {
    constructor({
        key,
        controller,
        child,
        header,
        footer,
        enablePullDown,
        enablePullUp,
        enableTwoLevel,
        onRefresh,
        onLoading,
        onTwoLevel,
        onOffsetChange,
        dragStartBehavior,
        primary,
        cacheExtent,
        semanticChildCount,
        reverse,
        physics,
        scrollDirection,
        scrollController,
    } = {}) {
        super();

        this.key = key;
        this.controller = controller;
        this.child = child;
        this.header = header;
        this.footer = footer;
        this.enablePullDown = enablePullDown;
        this.enablePullUp = enablePullUp;
        this.enableTwoLevel = enableTwoLevel;
        this.onRefresh = onRefresh;
        this.onLoading = onLoading;
        this.onTwoLevel = onTwoLevel;
        this.onOffsetChange = onOffsetChange;
        this.dragStartBehavior = dragStartBehavior;
        this.primary = primary;
        this.cacheExtent = cacheExtent;
        this.semanticChildCount = semanticChildCount;
        this.reverse = reverse;
        this.physics = physics;
        this.scrollDirection = scrollDirection;
        this.scrollController = scrollController;
    }
}

SmartRefresher.new = function (arg) {
    return new SmartRefresher(arg);
};

LoadStyle = {
    ShowAlways: {
        _name: "LoadStyle.ShowAlways",
        index: 0
    },
    HideAlways: {
        _name: "LoadStyle.HideAlways",
        index: 1
    },
    ShowWhenLoading: {
        _name: "LoadStyle.ShowWhenLoading",
        index: 2
    },
};

IconPosition = {
    left: {
        _name: "IconPosition.left",
        index: 0
    },
    right: {
        _name: "IconPosition.right",
        index: 1
    },
    top: {
        _name: "IconPosition.top",
        index: 2
    },
    bottom: {
        _name: "IconPosition.bottom",
        index: 3
    },
};

class RefreshController extends MXLifecycleWidgetControllerBase {
    constructor({
        initialRefresh,
        initialRefreshStatus,
        initialLoadStatus,
    } = {}) {
        super();

        this.initialRefresh = initialRefresh;
        this.initialRefreshStatus = initialRefreshStatus;
        this.initialLoadStatus = initialLoadStatus;

    }

    /// request complete,the header will enter complete state,
    ///
    /// resetFooterState : it will set the footer state from noData to idle
    refreshCompleted({ resetFooterState = false } = {}) {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "refreshCompleted",
            args: arguments
        });
        this.invokeMirrorObjMethod(argument);
    }

    /// end twoLeveling,will return back first floor
    twoLevelComplete(
        { duration = new Duration({ milliseconds: 500 }), curve } = {}) {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "twoLevelComplete",
            args: arguments
        });
        this.invokeMirrorObjMethod(argument);
    }

    /// request failed,the header display failed state
    refreshFailed() {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "refreshFailed",
            args: arguments
        });
        this.invokeMirrorObjMethod(argument);
    }

    /// not show success or failed, it will set header state to idle and spring back at once
    refreshToIdle() {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "refreshToIdle",
            args: arguments
        });
        this.invokeMirrorObjMethod(argument);
    }


    loadComplete() {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "loadComplete",
            args: {}
        });
        this.invokeMirrorObjMethod(argument);
    }

    loadFailed() {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "loadFailed",
            args: {}
        });
        this.invokeMirrorObjMethod(argument);
    }

    loadNoData() {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "loadNoData",
            args: {}
        });
        this.invokeMirrorObjMethod(argument);
    }

    resetNoData() {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "resetNoData",
            args: {}
        });
        this.invokeMirrorObjMethod(argument);
    }

    dispose() {
        var argument = new MXMirrorObjMethodCall({
            mirrorID: this.mirrorID,
            className: "RefreshController",
            funcName: "dispose",
            args: {}
        });
        this.invokeMirrorObjMethod(argument);
    }
}

RefreshController.new = function (arg) {
    return new RefreshController(arg);
};

RefreshStatus = {
    idle: { _name: "RefreshStatus.idle", index: 0 },
    canRefresh: { _name: "RefreshStatus.canRefresh", index: 1 },
    refreshing: { _name: "RefreshStatus.refreshing", index: 2 },
    completed: { _name: "RefreshStatus.completed", index: 3 },
    failed: { _name: "RefreshStatus.failed", index: 4 },
    canTwoLevel: { _name: "RefreshStatus.canTwoLevel", index: 5 },
    twoLevelOpening: { _name: "RefreshStatus.twoLevelOpening", index: 6 },
    twoLeveling: { _name: "RefreshStatus.twoLeveling", index: 7 },
    twoLevelClosing: { _name: "RefreshStatus.twoLevelClosing", index: 8 },
};

// src__smart_refresher = Object.create(null);
// src__smart_refresher.SmartRefresher = SmartRefresher;
// src__smart_refresher.RefreshConfiguration = RefreshConfiguration;
// src__smart_refresher.RefreshController = RefreshController;
// src__smart_refresher.LoadStatus = LoadStatus;
// src__smart_refresher.LoadStyle = LoadStyle;
// src__smart_refresher.IconPosition = IconPosition;
// src__smart_refresher.RefreshStatus = RefreshStatus;

// exports.src__smart_refresher = src__smart_refresher;

exports.SmartRefresher = SmartRefresher;
exports.RefreshController = RefreshController;
exports.RefreshConfiguration = RefreshConfiguration;
exports.LoadStatus = LoadStatus;
exports.LoadStyle = LoadStyle;
exports.IconPosition = IconPosition;
exports.RefreshStatus = RefreshStatus;

/***/ }),

/***/ "console":
/*!**************************!*\
  !*** external "console" ***!
  \**************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
module.exports = require("console");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module
/******/ 		__webpack_require__("./index.js");
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			__webpack_require__.e("mxflutter-sdk");
/******/ 			return next();
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			"bundle-mxflutter-js-demo": 1
/******/ 		};
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__webpack_require__.f.require = function(chunkId, promises) {
/******/ 		
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("./" + __webpack_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// run startup
/******/ 	return __webpack_require__.x();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2luZGV4LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2FuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9jb250YWN0LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2N1c3RvbV9qc19hcGkuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvYW5pbWF0aW9uL2V4YW1wbGVfYW5pbWF0ZWRfYnVpbGRlci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9idWlsZGVyX3YyLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX2NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9jcm9zc19mYWRlLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX2RlZmF1bHRfdGV4dF9zdHlsZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9saXN0X3N0YXRlLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX21vZGFsX2JhcnJpZXIuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvYW5pbWF0aW9uL2V4YW1wbGVfYW5pbWF0ZWRfb3BhY2l0eS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9waHlzaWNhbF9tb2RlbC5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9wb3NpdGlvbmVkLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX3NpemUuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvYW5pbWF0aW9uL2V4YW1wbGVfYW5pbWF0ZWRfd2lkZ2V0LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX3dpZGdldF9iYXNlX3N0YXRlLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2FuaW1hdGlvbi9leGFtcGxlX2RlY29yYXRlZF9ib3hfdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9mYWRlX3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvYW5pbWF0aW9uL2V4YW1wbGVfaGVyby5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9wb3NpdGlvbmVkX3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvYW5pbWF0aW9uL2V4YW1wbGVfcm90YXRpb25fdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9zY2FsZV90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2FuaW1hdGlvbi9leGFtcGxlX3NpemVfdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9hbmltYXRpb24vZXhhbXBsZV9zbGlkZV90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2V4YW1wbGVfYXBwX2Jhci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9leGFtcGxlX2J1dHRvbi5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9leGFtcGxlX2NvbHVtbi5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9leGFtcGxlX2NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9leGFtcGxlX2ZsdXR0ZXJfY29sb3IuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvZXhhbXBsZV9mbHV0dGVyX2ljb24uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvZXhhbXBsZV9mbHV0dGVyX2xvZ28uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvZXhhbXBsZV9pbWFnZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9leGFtcGxlcy9leGFtcGxlX3BsYWNlaG9sZGVyLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2V4YW1wbGVfcm93LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2V4YW1wbGVfc2NhZmZvbGQuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvZXhhbXBsZV9zbmFrZV9iYXIuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vZXhhbXBsZXMvZXhhbXBsZV90ZXh0LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2V4YW1wbGVzL2luZGV4LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL2xpc3R2aWV3X2V4YW1wbGUuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vbWF0ZXJpYWwuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vbWF0ZXJpYWwvYm90dG9tX2FwcF9iYXJfZGVtby5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9tYXRlcmlhbC9ib3R0b21fbmF2aWdhdGlvbl9kZW1vLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL21hdGVyaWFsL2Vhc3lfdWlfZGVtby5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9tYXRlcmlhbC90YWJzX2RlbW8uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vcGVzdG8uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vcGxhdGZvcm0vZXhhbXBsZV9kaW8uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vcGxhdGZvcm0vZXhhbXBsZV9tZXNzYWdlX2NoYW5uZWwuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vcGxhdGZvcm0vZXhhbXBsZV9zaGFyZWRfcHJlZmVyZW5jZXMuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vcGxhdGZvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vcHJvZmlsZS9jb2x1bW5fcHJvZmlsZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby9wcm9maWxlL2NvbHVtbl9zdWJteHdpZGdldF9wcm9maWxlLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3Byb2ZpbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vcHJvZmlsZS9saXN0dmlld19wcm9maWxlLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9BL0FsaWduLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9BL0FuaW1hdGVkQnVpbGRlci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbmltYXRlZENvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbmltYXRlZENyb3NzRmFkZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbmltYXRlZERlZmF1bHRUZXh0U3R5bGUuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0EvQW5pbWF0ZWRPcGFjaXR5LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9BL0FuaW1hdGVkUGh5c2ljYWxNb2RlbC5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbmltYXRlZFBvc2l0aW9uZWQuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0EvQW5pbWF0ZWRTaXplLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9BL0FwcGJhci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9Bc3BlY3RSYXRpby5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQi9CYXNlbGluZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQi9Cb3R0b21OYXZpZ2F0aW9uQmFyLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9CL0J1dHRvbkJhci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DYXJkLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0NoaXAuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ29sdW1uLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXBlcnRpbm9BY3Rpdml0eUluZGljYXRvci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXBlcnRpbm9BbGVydERpYWxvZy5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXBlcnRpbm9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXBlcnRpbm9QYWdlU2NhZmZvbGQuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ3VwZXJ0aW5vU2xpZGVyLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0N1cGVydGlub1N3aXRjaC5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXBlcnRpbm9UYWJCYXIuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ3VwZXJ0aW5vVGFiU2NhZmZvbGQuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ3VzdG9tTXVsdGlDaGlsZExheW91dC5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXN0b21TY3JvbGxWaWV3LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9EL0RlY29yYXRlZEJveC5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvRC9EZWNvcmF0ZWRCb3hUcmFuc2l0aW9uLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9EL0RlZmF1bHRUZXh0U3R5bGUuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0QvRHJvcGRvd25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0UvRXhwYW5kZWQuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0YvRml0dGVkQm94LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9GL0ZsYXRCdXR0b24uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0YvRmxvYXRpbmdBY3Rpb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0YvRmx1dHRlckxvZ28uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0YvRnJhY3Rpb25hbGx5U2l6ZWRCb3guanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0cvR2VzdHVyZURldGVjdG9yLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9HL0dyaWRWaWV3LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9IL0hlcm8uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0kvSWNvbkJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvSS9JbWFnZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvSS9JbmRleGVkU3RhY2suanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0kvSW50cmluc2ljSGVpZ2h0LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9JL0ludHJpbnNpY1dpZHRoLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9ML0xpbWl0ZWRCb3guanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0wvTGlzdEJvZHkuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0wvTGlzdFRpbGUuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0wvTGlzdFZpZXcuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL00vTWF0ZXJpYWxBcHAuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL00vTWVkaWFRdWVyeS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvTi9OYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL1MvU3dpdGNoLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9XL1dyYXAuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL2luZGV4LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy90L1RhYmxlLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy90L1RleHRGaWVsZC5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvdC9UaGVtZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvdC9UcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL3QvdGV4dC5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8vVm9sdW1lcy9EYXRhL1dvcmsvUkZsdXR0ZXIvbXhmbHV0dGVyLWpzL3BhY2thZ2VzL19fbXhmbHV0dGVyLWpzLWRlbW8vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlc3xzeW5jfC9eXFwuXFwvLipcXC5qcyQvIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3poaWh1L2dsb2JhbF9jb25maWcuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaG9tZS9hcnRpY2xlLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3poaWh1L2hvbWUvYXNrX3BhZ2UuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaG9tZS9mb2xsb3cuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaG9tZS9ob21lX3BhZ2UuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaG9tZS9ob3QuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaG9tZS9xdWVzdGlvbi5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby96aGlodS9ob21lL3F1ZXN0aW9uX3BhZ2UuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaG9tZS9yZWNvbW1lbmQuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaG9tZS9yZXBseV9wYWdlLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbGliL2FwcF9kZW1vL3poaWh1L2hvbWUvc2VhcmNoX3BhZ2UuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaWRlYS9pZGVhX3BhZ2UuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvbWVzc2FnZS9tZXNzYWdlX3BhZ2UuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvYXBwX2RlbW8vemhpaHUvbXkvbXlfcGFnZS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9hcHBfZGVtby96aGlodS96aGlodS5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL2xpYi9ob21lX3BhZ2UuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9saWIvanNfZmx1dHRlci5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL25vZGVfbW9kdWxlcy9AdGVuY2VudC9teGZsdXR0ZXItY2FjaGVkLW5ldHdvcmstaW1hZ2UvY2FjaGVkX25ldHdvcmtfaW1hZ2UuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9ub2RlX21vZHVsZXMvQHRlbmNlbnQvbXhmbHV0dGVyLWNhY2hlZC1uZXR3b3JrLWltYWdlL2luZGV4LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbm9kZV9tb2R1bGVzL0B0ZW5jZW50L214Zmx1dHRlci1kaW8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9ub2RlX21vZHVsZXMvQHRlbmNlbnQvbXhmbHV0dGVyLWRpby9teGRpby5qcyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby8uL25vZGVfbW9kdWxlcy9AdGVuY2VudC9teGZsdXR0ZXItcHVsbC10by1yZWZyZXNoL2luZGV4LmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vLy4vbm9kZV9tb2R1bGVzL0B0ZW5jZW50L214Zmx1dHRlci1wdWxsLXRvLXJlZnJlc2gvc3JjL2luZGljYXRvci9jbGFzc19pbmRpY2F0b3IuanMiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vLi9ub2RlX21vZHVsZXMvQHRlbmNlbnQvbXhmbHV0dGVyLXB1bGwtdG8tcmVmcmVzaC9zcmMvc21hcnRfcmVmcmVzaGVyLmpzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vL2V4dGVybmFsIFwiY29uc29sZVwiIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9AdGVzdC9teGZsdXR0ZXItanMtZGVtby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vd2VicGFjay9ydW50aW1lL3N0YXJ0dXAgY2h1bmsgZGVwZW5kZW5jaWVzIiwid2VicGFjazovL0B0ZXN0L214Zmx1dHRlci1qcy1kZW1vL3dlYnBhY2svcnVudGltZS9yZXF1aXJlIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vQHRlc3QvbXhmbHV0dGVyLWpzLWRlbW8vd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsS0FBSyxxQkFBcUIsR0FBRyxtQkFBTyxDQUFDLDJDQUFpQjs7QUFFdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUNQRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMsR0FBRyxtQkFBTyxDQUFDLDZDQUFrQjs7O0FBRzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsMEJBQTBCO0FBQ3RELHdEQUF3RCx5QkFBeUIsYUFBYSxHQUFHO0FBQ2pHLG9DQUFvQywwREFBMEQ7O0FBRTlGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsOENBQThDLHVEQUF1RDtBQUNy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QUFFbkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJBQU8sQ0FBQyxtREFBd0I7O0FBRXBDLE9BQU8sZUFBZSxHQUFHLG1CQUFPLENBQUMsbUZBQWtDOzs7QUFHbkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxHQUFHLG1CQUFPLENBQUMsbURBQXdCOztBQUVwQyxPQUFPLGVBQWUsR0FBRyxtQkFBTyxDQUFDLG1GQUFrQzs7QUFFbkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDekZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxHQUFHLG1CQUFPLENBQUMsbURBQXdCOztBQUVwQyxPQUFPLGVBQWUsR0FBRyxtQkFBTyxDQUFDLG1GQUFrQzs7QUFFbkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDekZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxHQUFHLG1CQUFPLENBQUMsbURBQXdCOztBQUVwQyxPQUFPLGVBQWUsR0FBRyxtQkFBTyxDQUFDLG1GQUFrQzs7QUFFbkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJBQU8sQ0FBQyxnREFBcUI7OztBQUdqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixTQUFTO0FBQ2pDO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDNzJDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJBQU8sQ0FBQyxnREFBcUI7OztBQUdqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0Esd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBLHdCQUF3QixvQ0FBb0M7QUFDNUQsMkJBQTJCLFFBQVE7QUFDbkMsd0JBQXdCLG9DQUFvQztBQUM1RCwyQkFBMkIsU0FBUztBQUNwQyw2QkFBNkIsK0JBQStCO0FBQzVEO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJBQU8sQ0FBQyxnREFBcUI7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDakhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJBQU8sQ0FBQyxnREFBcUI7OztBQUdqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDdEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJBQU8sQ0FBQyxnREFBcUI7Ozs7QUFJakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0Es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Q2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsS0FBSztBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLE1BQU0sS0FBSztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7O0FBRUE7QUFDQSxlQUFlLGtGQUFrRixLQUFLO0FBQ3RHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssS0FBSztBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLEtBQUs7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxLQUFLO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLGtCQUFrQjtBQUNsQix3QkFBd0I7QUFDeEIsc0JBQXNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuVHRCLDRCQUE0QixtQkFBTyxDQUFDLDBHQUEwQjtBQUM5RCw0QkFBNEIsbUJBQU8sQ0FBQyw4SEFBb0M7O0FBRXhFLHNCQUFzQjtBQUN0Qix5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLGtCQUFrQjtBQUNsQixpQkFBaUI7QUFDakIsb0JBQW9CO0FBQ3BCLHFCQUFxQjs7QUFFckIscUJBQXFCO0FBQ3JCLHFCQUFxQjs7Ozs7Ozs7Ozs7Ozs7OztBQ2JyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sdUVBQXVFLEdBQUcsbUJBQU8sQ0FBQywwRUFBb0I7O0FBRTdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLEtBQUs7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLEtBQUs7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxQkFBcUI7QUFDckIscUJBQXFCLGlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3ZIckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTyx1RUFBdUUsR0FBRyxtQkFBTyxDQUFDLDBFQUFvQjs7QUFFN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssS0FBSztBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxLQUFLO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssS0FBSztBQUNWOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkJBQTJCLEtBQUs7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTLDBCQUEwQixvQkFBb0IsVUFBVSxLQUFLO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyx3Q0FBd0M7QUFDbkQsaUJBQWlCLDhDQUE4QztBQUMvRCxpQkFBaUIsOENBQThDO0FBQy9ELGdCQUFnQiw2Q0FBNkM7QUFDN0QsYUFBYSwwQ0FBMEM7QUFDdkQsa0JBQWtCLCtDQUErQztBQUNqRSxzQkFBc0IsbURBQW1EO0FBQ3pFLGtCQUFrQiwrQ0FBK0M7QUFDakUsc0JBQXNCLG1EQUFtRDtBQUN6RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHNCQUFzQjtBQUN0Qix5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLGtCQUFrQjtBQUNsQixpQkFBaUI7QUFDakIsb0JBQW9CO0FBQ3BCLHFCQUFxQixpQjs7Ozs7Ozs7Ozs7OztBQy9VckIsb0M7Ozs7OztVQ0FBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7Ozs7V0M5QkE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLGdDQUFnQyxZQUFZO1dBQzVDO1dBQ0EsRTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHdDQUF3Qyx5Q0FBeUM7V0FDakY7V0FDQTtXQUNBLEU7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxFQUFFO1dBQ0YsRTs7Ozs7V0NSQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLEU7Ozs7O1dDSkEsc0Y7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0Esc0RBQXNELGtCQUFrQjtXQUN4RTtXQUNBLCtDQUErQyxjQUFjO1dBQzdELEU7Ozs7O1dDTkE7V0FDQTtXQUNBO1dBQ0E7V0FDQSxFOzs7OztXQ0pBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7O1dBRUE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLGVBQWUscUJBQXFCO1dBQ3BDO1dBQ0E7O1dBRUE7V0FDQTs7V0FFQTtXQUNBO1dBQ0EsWUFBWTtXQUNaO1dBQ0EsR0FBRztXQUNIO1dBQ0E7O1dBRUE7O1dBRUE7O1dBRUEsa0I7Ozs7VUNqQ0E7VUFDQSIsImZpbGUiOiJidW5kbGUtbXhmbHV0dGVyLWpzLWRlbW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgeyBNWEpTV2lkZ2V0SG9tZVBhZ2UgfSA9IHJlcXVpcmUoJy4vbGliL2hvbWVfcGFnZScpO1xuXG5jb25zdCBNWEZsdXR0ZXIgPSBnbG9iYWxUaGlzLk1YRmx1dHRlcjtcblxuTVhGbHV0dGVyLnJlZ2lzdCh7XG4gIG5hbWU6ICdteGZsdXR0ZXItanMtZGVtbycsXG4gIFJvb3RXaWRnZXQ6IE1YSlNXaWRnZXRIb21lUGFnZSxcbn0pO1xuIiwiLy8gIE1YRmx1dHRlckZyYW1ld29ya1xuLy8gIENvcHlyaWdodCAyMDE5IFRoZSBNWEZsdXR0ZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBDZW50ZXIsXG4gIEFwcEJhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBJbWFnZSxcbiAgQW5pbWF0aW9uLFxuICBUd2VlbixcbiAgQW5pbWF0aW9uQ29udHJvbGxlcixcbiAgQW5pbWF0ZWRCdWlsZGVyLFxuICBEdXJhdGlvbixcbiAgQW5pbWF0aW9uU3RhdHVzXG5cbn0gPSByZXF1aXJlKFwiLi4vanNfZmx1dHRlci5qc1wiKTtcblxuXG4vL+S4muWKoeS7o+eggVxuXG5jbGFzcyBKU0FuaW1hdGlvblBhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignSlNBbmltYXRpb25QYWdlJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IEpTQW5pbWF0aW9uUGFnZVN0YXRlKHRoaXMpO1xuICB9XG59XG5cbmNsYXNzIEpTQW5pbWF0aW9uUGFnZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMudHdlZW4gPSBuZXcgVHdlZW4oeyBiZWdpbjogNTAuMCwgZW5kOiAzMDAuMCB9KTtcbiAgICB0aGlzLmFuaW1hdGlvbkNvbnRyb2xsZXIgPSBuZXcgQW5pbWF0aW9uQ29udHJvbGxlcih7IGR1cmF0aW9uOiBuZXcgRHVyYXRpb24oeyBzZWNvbmRzOiAzIH0pIH0pO1xuICAgIHRoaXMuYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbih7IHR3ZWVuOiB0aGlzLnR3ZWVuLCBjb250cm9sbGVyOiB0aGlzLmFuaW1hdGlvbkNvbnRyb2xsZXIgfSk7XG5cbiAgICB0aGlzLmFuaW1hdGlvbi5hZGRTdGF0dXNMaXN0ZW5lcih0aGlzLmFuaW1hdGlvbkxvb3BGdW5jLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5jb3VudCA9IDA7XG4gIH1cblxuICBhbmltYXRpb25Mb29wRnVuYyhzdGF0dXMpIHtcbiAgICBNWEpTTG9nLmxvZygnY2FsbGJhY2sgZnJvbSBmbHV0dGVyIC4uLi4gICcgKyBzdGF0dXMpO1xuICAgIGlmIChzdGF0dXMgPT0gQW5pbWF0aW9uU3RhdHVzLmNvbXBsZXRlZCkge1xuICAgICAgdGhpcy5hbmltYXRpb25Db250cm9sbGVyLnJldmVyc2UoKTtcbiAgICAgIHRoaXMuY291bnQrKztcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBBbmltYXRpb25TdGF0dXMuZGlzbWlzc2VkKSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkNvbnRyb2xsZXIuZm9yd2FyZCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb3VudCA+IDUpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uLnJlbW92ZVN0YXR1c0xpc3RlbmVyKHRoaXMuYW5pbWF0aW9uTG9vcEZ1bmMpO1xuICAgIH1cbiAgfVxuXG4gIGJlZ2luQW5pbWF0aW9uKCkge1xuICAgIHRoaXMuYW5pbWF0aW9uQ29udHJvbGxlci5mb3J3YXJkKCk7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgdmFyIGltYWdlUmF0aW8gPSAxLjQ1NTtcblxuICAgIGxldCB3ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkFuaW1hdGlvbiBEZW1vXCIpXG4gICAgICB9KSxcbiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICBjaGlsZDogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTE0NSwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycsIHNlbWFudGljTGFiZWw6ICdBY3Rpb24nIH0pKSxcbiAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5iZWdpbkFuaW1hdGlvbigpO1xuICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IFNjYWxlQW5pbWF0aW9uKHtcbiAgICAgICAgY2hpbGQ6IEltYWdlLm5ldHdvcmsoJ2h0dHBzOi8vcGljMi56aGltZy5jb20vNTAvdjItNjQxNmVmNmQzMTgxMTE3YTAxNzcyNzUyODZmYWM4ZjNfaGQuanBnJyksXG4gICAgICAgIGFuaW1hdGlvbjogdGhpcy5hbmltYXRpb25cbiAgICAgIH0pXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdztcbiAgfVxufVxuXG5cbmNsYXNzIFNjYWxlQW5pbWF0aW9uIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgY2hpbGQsXG4gICAgYW5pbWF0aW9uXG4gIH0gPSB7fSkge1xuICAgIHN1cGVyKCdTY2FsZUFuaW1hdGlvbicpO1xuICAgIHRoaXMuY2hpbGQgPSBjaGlsZDtcbiAgICB0aGlzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgU2NhbGVBbmltYXRpb25TdGF0ZSh0aGlzKTtcbiAgfVxufVxuXG5jbGFzcyBTY2FsZUFuaW1hdGlvblN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgdmFyIGltYWdlUmF0aW8gPSAxLjQ1NTtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IENlbnRlcih7XG4gICAgICBjaGlsZDogbmV3IEFuaW1hdGVkQnVpbGRlcih7XG4gICAgICAgIGFuaW1hdGlvbjogdGhpcy53aWRnZXQuYW5pbWF0aW9uLFxuICAgICAgICB3aWRnZXQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIC8vIGhlaWdodDogdGhpcy5hbmltYXRpb24udmFsdWUoKSAqIGltYWdlUmF0aW8gKyAyIC0gNSxcbiAgICAgICAgICB3aWR0aDogXCIkdmFsdWVcIixcbiAgICAgICAgICBjaGlsZDogdGhpcy53aWRnZXQuY2hpbGRcbiAgICAgICAgfSlcbiAgICAgICAgLy8gY2hpbGQ6IHRoaXMuY2hpbGQsXG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7IEpTQW5pbWF0aW9uUGFnZSB9O1xuIiwiXG5cblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIEljb25CdXR0b24sXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgUGFkZGluZyxcbiAgVGhlbWUsXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIFNlY3Rpb25UaXRsZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3Rvcih0aXRsZSx7a2V5fT17fSl7XG4gICAgc3VwZXIoXCJTZWN0aW9uVGl0bGVcIix7a2V5OmtleX0pO1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuYWxsKDEwLjApLFxuICAgICAgY29sb3I6IFRoZW1lLm9mKGNvbnRleHQpLnByaW1hcnlDb2xvcixcbiAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlODBlLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwgeyBzaXplOiAyMCwgY29sb3I6IG5ldyBDb2xvcigweEZGRkZGRkZGKSB9KSxcbiAgICAgICAgICBuZXcgUGFkZGluZyh7IHBhZGRpbmc6IEVkZ2VJbnNldHMuZnJvbUxUUkIoMTAuMCwgMC4wLCAwLjAsIDAuMCkgfSksXG4gICAgICAgICAgbmV3IFRleHQodGhpcy50aXRsZSwge1xuICAgICAgICAgICAgdGV4dEFsaWduOiBUZXh0QWxpZ24uc3RhcnQsXG4gICAgICAgICAgICBzdHlsZTpuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiBUaGVtZS5vZihjb250ZXh0KS50ZXh0VGhlbWUudGl0bGUuZm9udFdlaWdodCxcbiAgICAgICAgICAgICAgY29sb3I6Q29sb3JzLndoaXRlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIF1cbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFNlY3Rpb25UaXRsZSxcbn1cblxuIiwiLy8gIE1YRmx1dHRlckZyYW1ld29ya1xuLy8gIENvcHlyaWdodCAyMDE5IFRoZSBNWEZsdXR0ZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxldCB7XG4gICAgTVhKU0xvZyxcbiAgICBydW5BcHAsXG4gICAgTVhKU0ZsdXR0ZXJBcHAsXG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBDb250YWluZXIsXG4gICAgQ29sb3IsXG4gICAgVGV4dCxcbiAgICBJY29uLFxuICAgIEljb25EYXRhLFxuICAgIFRoZW1lLFxuICAgIFRoZW1lRGF0YSxcbiAgICBDdXN0b21TY3JvbGxWaWV3LFxuICAgIFNsaXZlckFwcEJhcixcbiAgICBTbGl2ZXJDaGlsZExpc3REZWxlZ2F0ZSxcbiAgICBFZGdlSW5zZXRzLFxuICAgIEV4cGFuZGVkLFxuICAgIENvbHVtbixcbiAgICBJbWFnZSxcbiAgICBCb3hGaXQsXG4gICAgUm93LFxuICAgIEJvcmRlclNpZGUsXG4gICAgQm94RGVjb3JhdGlvbixcbiAgICBCb3JkZXIsXG4gICAgTWVyZ2VTZW1hbnRpY3MsXG4gICAgU2l6ZWRCb3gsXG4gICAgSWNvbkJ1dHRvbixcbiAgICBQb3B1cE1lbnVCdXR0b24sXG4gICAgUG9wdXBNZW51SXRlbSxcbiAgICBGbGV4aWJsZVNwYWNlQmFyLFxuICAgIFN0YWNrLFxuICAgIFN0YWNrRml0LFxuICAgIEFubm90YXRlZFJlZ2lvbixcbiAgICBEZWNvcmF0ZWRCb3gsXG4gICAgTGluZWFyR3JhZGllbnQsXG4gICAgQWxpZ25tZW50LFxuICAgIFNsaXZlckxpc3QsXG4gICAgU3lzdGVtVWlPdmVybGF5U3R5bGUsXG4gICAgUGFkZGluZyxcbiAgICBEZWZhdWx0VGV4dFN0eWxlLFxuICAgIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gICAgU2FmZUFyZWEsXG4gICAgQ29sb3JzXG59ID0gcmVxdWlyZShcIi4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cblxuY2xhc3MgQ29udGFjdENhdGVnb3J5IGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gICAgY29uc3RydWN0b3Ioe2ljb24sIGNoaWxkcmVufSA9IHt9KSB7XG4gICAgICBzdXBlcignQ29udGFjdENhdGVnb3J5Jyk7XG5cbiAgICAgIHRoaXMuaWNvbiA9IGljb247XG4gICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgdGhlbWVEYXRhID0gVGhlbWUub2YoY29udGV4dCk7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuc3ltbWV0cmljKHtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogMTYuMFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiBuZXcgQm9yZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBuZXcgQm9yZGVyU2lkZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWVEYXRhLmRpdmlkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgRGVmYXVsdFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHRoZW1lRGF0YS50ZXh0VGhlbWUuc3ViaGVhZCxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFNhZmVBcmVhKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OiBDcm9zc0F4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogMjQuMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDcyLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbih0aGlzLmljb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGVtZURhdGEucHJpbWFyeUNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxuY2xhc3MgQ29udGFjdEl0ZW0gZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3Rvcih7aWNvbiwgbGluZXMsIHRvb2x0aXAsIG9uUHJlc3NlZH0gPSB7fSkge1xuICAgICAgICBzdXBlcignQ29udGFjdEl0ZW0nKTtcblxuICAgICAgICB0aGlzLmljb24gPSBpY29uO1xuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgICAgIHRoaXMub25QcmVzc2VkID0gb25QcmVzc2VkO1xuICAgIH1cbiAgICBcbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIGxldCB0aGVtZURhdGEgPSBUaGVtZS5vZihjb250ZXh0KTtcbiAgICAgICAgbGV0IGNvbHVtbkNoaWxkcmVuID0gW107XG4gICAgICAgIGxldCByb3dDaGlsZHJlbiA9IFtdO1xuXG4gICAgICAgIGxldCBsZW5ndGggPSB0aGlzLmxpbmVzLmxlbmd0aDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSAhPSBsZW5ndGggLTEpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5DaGlsZHJlbi5wdXNoKG5ldyBUZXh0KHRoaXMubGluZXNbaV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbHVtbkNoaWxkcmVuLnB1c2gobmV3IFRleHQodGhpcy5saW5lc1tpXSwge3N0eWxlOiB0aGVtZURhdGEudGV4dFRoZW1lLmNhcHRpb259KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcm93Q2hpbGRyZW4gPSBbXG4gICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OiBDcm9zc0F4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBjb2x1bW5DaGlsZHJlbixcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuXG4gICAgICAgIGlmICh0aGlzLmljb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgcm93Q2hpbGRyZW4ucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgU2l6ZWRCb3goe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogNzIuMCxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKHRoaXMuaWNvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWVEYXRhLnByaW1hcnlDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogdGhpcy5vblByZXNzZWQgLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgTWVyZ2VTZW1hbnRpY3Moe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBQYWRkaW5nKHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsOiAxNi4wLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQmV0d2VlbixcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHJvd0NoaWxkcmVuLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxuQXBwQmFyQmVoYXZpb3IgPSB7XG4gICAgbm9ybWFsOiAwLCBcbiAgICBwaW5uZWQ6IDEsIFxuICAgIGZsb2F0aW5nOiAyLCBcbiAgICBzbmFwcGluZzogMywgXG59O1xuXG5cbmNsYXNzIEpTQ29udGFjdFBhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignSlNDb250YWN0UGFnZScpO1xuICAgIH1cblxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEpTQ29udGFjdFBhZ2VTdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIEpTQ29udGFjdFBhZ2VTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7IFxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBUaGVtZSh7XG4gICAgICAgICAgICBkYXRhOiBuZXcgVGhlbWVEYXRhKHtcbiAgICAgICAgICAgICAgICBicmlnaHRuZXNzOiBCcmlnaHRuZXNzLmxpZ2h0LFxuICAgICAgICAgICAgICAgIHByaW1hcnlTd2F0Y2g6IENvbG9ycy5pbmRpZ28sXG4gICAgICAgICAgICAgICAgcGxhdGZvcm06IFRoZW1lLm9mKGNvbnRleHQpLnBsYXRmb3JtXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBDdXN0b21TY3JvbGxWaWV3KHtcbiAgICAgICAgICAgICAgICAgIHNsaXZlcnM6IHRoaXMuYnVpbGRCb2R5KGNvbnRleHQpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cblxuICAgIGJ1aWxkQm9keShjb250ZXh0KSB7XG4gICAgICAgIGxldCBhcHBCYXJIZWlnaHQgPSAyNTYuMDtcbiAgICAgICAgbGV0IGFwcEJhckJlaGF2aW9yID0gQXBwQmFyQmVoYXZpb3IucGlubmVkO1xuICAgICAgICBsZXQgdGhlbWVEYXRhID0gVGhlbWUub2YoY29udGV4dCk7XG4gICAgICAgIGxldCB3aWRnZXQgPSBbXG4gICAgICAgICAgICBuZXcgU2xpdmVyQXBwQmFyKHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lRGF0YS5wcmltYXJ5Q29sb3IsXG4gICAgICAgICAgICAgICAgZXhwYW5kZWRIZWlnaHQ6IGFwcEJhckhlaWdodCxcbiAgICAgICAgICAgICAgICBwaW5uZWQ6IGFwcEJhckJlaGF2aW9yID09IEFwcEJhckJlaGF2aW9yLnBpbm5lZCxcbiAgICAgICAgICAgICAgICBmbG9hdGluZzogYXBwQmFyQmVoYXZpb3IgPT0gQXBwQmFyQmVoYXZpb3IuZmxvYXRpbmcgfHwgYXBwQmFyQmVoYXZpb3IgPT0gQXBwQmFyQmVoYXZpb3Iuc25hcHBpbmcsXG4gICAgICAgICAgICAgICAgc25hcDogYXBwQmFyQmVoYXZpb3IgPT0gQXBwQmFyQmVoYXZpb3Iuc25hcHBpbmcsXG4gICAgICAgICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMTUwLCB7Zm9udEZhbWlseTonTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAnRWRpdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnZWRpdCBidXR0b24gcHJlc3NlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvcHVwTWVudUJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGVkOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ21vcmUgYnV0dG9uIHByZXNzZWQsIGluZGV4ICcgKyBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtQnVpbGRlcjogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9wdXBNZW51SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogQXBwQmFyQmVoYXZpb3Iubm9ybWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdBcHAgYmFyIHNjcm9sbHMgYXdheScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvcHVwTWVudUl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IEFwcEJhckJlaGF2aW9yLnBpbm5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnQXBwIGJhciBzdGF5cyBhd2F5JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9wdXBNZW51SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogQXBwQmFyQmVoYXZpb3IuZmxvYXRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0FwcCBiYXIgZmxvYXRzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9wdXBNZW51SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogQXBwQmFyQmVoYXZpb3Iuc25hcHBpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0FwcCBiYXIgc25hcHMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGZsZXhpYmxlU3BhY2U6IG5ldyBGbGV4aWJsZVNwYWNlQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdBbGkgQ29ubm9ycycpLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBuZXcgU3RhY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgZml0OiBTdGFja0ZpdC5leHBhbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEltYWdlLmFzc2V0KCdwZW9wbGUvYWxpX2xhbmRzY2FwZS5wbmcnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG14UGFja2FnZTogJ2ZsdXR0ZXJfZ2FsbGVyeV9hc3NldHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXQ6IEJveEZpdC5jb3ZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBhcHBCYXJIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGVjb3JhdGVkQm94KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnQ6IG5ldyBMaW5lYXJHcmFkaWVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IG5ldyBBbGlnbm1lbnQoMC4wLCAtMS4wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IG5ldyBBbGlnbm1lbnQoMC4wLCAtMC40KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbG9yKDB4NjAwMDAwMDApLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbG9yKDB4MDAwMDAwMDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgU2xpdmVyTGlzdCh7XG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IG5ldyBTbGl2ZXJDaGlsZExpc3REZWxlZ2F0ZShbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBBbm5vdGF0ZWRSZWdpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBTeXN0ZW1VaU92ZXJsYXlTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtTmF2aWdhdGlvbkJhckNvbG9yOiBuZXcgQ29sb3IoMHhGRjAwMDAwMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtTmF2aWdhdGlvbkJhckRpdmlkZXJDb2xvcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNCYXJDb2xvcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1OYXZpZ2F0aW9uQmFySWNvbkJyaWdodG5lc3M6IEJyaWdodG5lc3MubGlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQmFySWNvbkJyaWdodG5lc3M6IEJyaWdodG5lc3MubGlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQmFyQnJpZ2h0bmVzczpCcmlnaHRuZXNzLmRhcmtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWN0Q2F0ZWdvcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uRGF0YSgweGUwYjAsIHtmb250RmFtaWx5OidNYXRlcmlhbEljb25zJ30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhY3RJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uRGF0YSgweGUwYzksIHtmb250RmFtaWx5OidNYXRlcmlhbEljb25zJ30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ1NlbmQgbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1YSlNMb2cubG9nKCdTZW5kIG1lc3NhZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcoNjUwKSA1NTUtMTIzNCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01vYmlsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWN0SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbkRhdGEoMHhlMGM5LCB7Zm9udEZhbWlseTonTWF0ZXJpYWxJY29ucyd9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdTZW5kIG1lc3NhZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ1NlbmQgbWVzc2FnZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJygzMjMpIDU1NS02Nzg5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV29yaydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWN0SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbkRhdGEoMHhlMGM5LCB7Zm9udEZhbWlseTonTWF0ZXJpYWxJY29ucyd9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdTZW5kIG1lc3NhZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ1NlbmQgbWVzc2FnZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyg2NTApIDU1NS02Nzg5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSG9tZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhY3RDYXRlZ29yeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbkRhdGEoMHhlMGQwLCB7Zm9udEZhbWlseTonTWF0ZXJpYWxJY29ucyd9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFjdEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbkRhdGEoMHhlMGJlLCB7Zm9udEZhbWlseTonTWF0ZXJpYWxJY29ucyd9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ1NlbmQgcGVyc29uYWwgZS1tYWlsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnU2VuZCBwZXJzb25hbCBlLW1haWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhbGlfY29ubm9yc0BleGFtcGxlLmNvbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGVyc29uYWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFjdEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbkRhdGEoMHhlMGJlLCB7Zm9udEZhbWlseTonTWF0ZXJpYWxJY29ucyd9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ1NlbmQgcGVyc29uYWwgZS1tYWlsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnU2VuZCBwZXJzb25hbCBlLW1haWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhbGljb25ub3JzQGV4YW1wbGUuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXb3JrJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWN0Q2F0ZWdvcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb25EYXRhKDB4ZTBjOCwge2ZvbnRGYW1pbHk6J01hdGVyaWFsSWNvbnMnfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhY3RJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb25EYXRhKDB4ZTU1Yiwge2ZvbnRGYW1pbHk6J01hdGVyaWFsSWNvbnMnfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdPcGVuIG1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ09wZW4gbWFwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMjAwMCBNYWluIFN0cmVldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU2FuIEZyYW5jaXNjbywgQ0EnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0hvbWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFjdEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbkRhdGEoMHhlNTViLCB7Zm9udEZhbWlseTonTWF0ZXJpYWxJY29ucyd9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ09wZW4gbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnT3BlbiBtYXAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxNjAwIEFtcGhpdGhlYXRlciBQYXJrd2F5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNb3VudGFpbiBWaWV3LCBDQScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV29yaydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWN0SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uRGF0YSgweGU1NWIsIHtmb250RmFtaWx5OidNYXRlcmlhbEljb25zJ30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAnT3BlbiBtYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1YSlNMb2cubG9nKCdPcGVuIG1hcCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEyNiBTZXZlcnlucyBBdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01vdW50YWluIFZpZXcsIENBJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdKZXQgVHJhdmVsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWN0Q2F0ZWdvcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb25EYXRhKDB4ZThkZiwge2ZvbnRGYW1pbHk6J01hdGVyaWFsSWNvbnMnfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhY3RJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdCaXJ0aGRheScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSmFudWFyeSA5dGgsIDE5ODknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFjdEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dlZGRpbmcgYW5uaXZlcnNhcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0p1bmUgMjFzdCwgMjAxNCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWN0SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmlyc3QgZGF5IGluIG9mZmljZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSmFudWFyeSAyMHRoLCAyMDE1J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhY3RJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdMYXN0IGRheSBpbiBvZmZpY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0F1Z3VzdCA5dGgsIDIwMTgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICB9KVxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7SlNDb250YWN0UGFnZX07XG4iLCIvLyAgTVhGbHV0dGVyRnJhbWV3b3JrXG4vLyAgQ29weXJpZ2h0IDIwMTkgVGhlIE1YRmx1dHRlciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy9cbi8vICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyAgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuXG5sZXQge1xuICAgIE1YSlNMb2csXG4gICAgcnVuQXBwLFxuICAgIE1YSlNGbHV0dGVyQXBwLFxuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgICBNYXRlcmlhbEFwcCxcbiAgICBTY2FmZm9sZCxcbiAgICBDb250YWluZXIsXG4gICAgTGlzdFRpbGUsXG4gICAgQ2VudGVyLFxuICAgIENvbG9yLFxuICAgIEFwcEJhcixcbiAgICBTbmFja0JhcixcbiAgICBUZXh0LFxuICAgIEljb24sXG4gICAgSWNvbkRhdGEsXG4gICAgRWRnZUluc2V0cyxcbiAgICBDb2xvcnMsXG4gICAgSWNvbkJ1dHRvbixcbiAgICBGbGF0QnV0dG9uLFxuICAgIFJhaXNlZEJ1dHRvbixcbiAgICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgICBDb2x1bW4sXG4gICAgUm93LFxuICAgIERyb3Bkb3duQnV0dG9uLFxuICAgIERyb3Bkb3duTWVudUl0ZW0sXG4gICAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gICAgVGV4dFN0eWxlLFxuICAgIFBvcHVwTWVudUJ1dHRvbixcbiAgICBQb3B1cE1lbnVJdGVtLFxuICAgIEJ1dHRvbkJhcixcbiAgICBNYWluQXhpc1NpemUsXG4gICAgVGV4dERlY29yYXRpb24sXG4gICAgUmljaFRleHQsXG4gICAgVGV4dFNwYW4sXG4gICAgRXhwYW5kZWQsXG4gICAgRm9udFdlaWdodCxcbiAgICBUZXh0Rm9ybUZpZWxkLFxuICAgIElucHV0RGVjb3JhdGlvbixcbiAgICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgICBUZXh0SW5wdXRUeXBlLFxuICAgIFNpemVkQm94LFxuICAgIFRleHRGaWVsZCxcbiAgICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gICAgTGlzdFZpZXcsXG4gICAgU2xpZGVyLFxuICAgIFRleHREZWNvcmF0aW9uU3R5bGUsXG4gICAgVGV4dE92ZXJmbG93LFxuICAgIFBhZGRpbmcsXG4gICAgSWNvbnMsXG4gICAgTWV0aG9kQ2hhbm5lbCxcbiAgICBEYXJ0Q2xhc3MsIFxuICAgIE1YTWlycm9yT2JqTWV0aG9kQ2FsbCxcbiAgICBNWExpZmVjeWNsZURhcnRDbGFzc1xufSA9IHJlcXVpcmUoXCIuLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5cbmNsYXNzIE1YTWlycm9yRXhhbXBsZSBleHRlbmRzIE1YTGlmZWN5Y2xlRGFydENsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKGJhc2VPcHRpb25zKSB7XG4gICAgICAgIFxuICAgICAgICAvL+WIm+W7uuWvueW6lEZMdXR0ZXLlr7nosaFcbiAgICAgICAgdmFyIG5ld0RhcnRNaXJyb3JPYmpBcmdzID0gbmV3IE1YTWlycm9yT2JqTWV0aG9kQ2FsbCh7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiTVhNaXJyb3JFeGFtcGxlXCIsXG4gICAgICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgICAgICAgXCJrZXlcIjogMTIzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzdXBlcihuZXdEYXJ0TWlycm9yT2JqQXJncyk7XG4gICAgICAgIFxuICAgIH1cblxuICAgIC8v5bCB6KOFZ2V0TXlBcHBOYW1lXG4gICAgZ2V0TXlBcHBOYW1lKHBsYXRmb3JtLCB7IHYgfSA9IHt9KSB7XG5cbiAgICAgICAgbGV0IGFyZ3VtZW50ID0gbmV3IE1YTWlycm9yT2JqTWV0aG9kQ2FsbCh7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiTVhNaXJyb3JFeGFtcGxlXCIsXG4gICAgICAgICAgICBmdW5jTmFtZTogXCJnZXRNeUFwcE5hbWVcIixcbiAgICAgICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICAgICAgICBwbGF0Zm9ybTogcGxhdGZvcm0sXG4gICAgICAgICAgICAgICAgdjogdixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICByZXR1cm4gdGhpcy5pbnZva2VNaXJyb3JPYmpNZXRob2RBc3ljKGFyZ3VtZW50KTtcbiAgICB9XG5cbiAgICAvLyByZWxlYXNlIGRhcnTkvqflrp7kvotcbiAgICByZWxlYXNlKCl7XG4gICAgICAgIHN1cGVyLnJlbGVhc2UoKTtcbiAgICB9XG5cbn1cblxuXG4vL+S9v+eUqE1YTWlycm9yRXhhbXBsZVxubGV0IGdfanNBcGkgPSBuZXcgTVhNaXJyb3JFeGFtcGxlKCk7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qc1wiKTtcblxuY2xhc3MgUGFnZUV4YW1wbGVKU0FwaSBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiUGFnZUV4YW1wbGVKU0FwaVwiKTtcblxuICAgIH1cblxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlSlNBcGlTdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlSlNBcGlTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiUGFnZUV4YW1wbGVKU0FwaVN0YXRlXCIpO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gXCLngrnlh7vlsI/kurpSdW7kuIrpnaLnmoTku6PnoIFcIjtcbiAgICB9XG5cbiAgICBjb2RlVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIFwibGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuanNBcGkuZ2V0TXlBcHBOYW1lKCdpT1MnLCB7djonMS4wJ30pXCI7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiTVhNaXJyb3JFeGFtcGxlIEV4YW1wbGVcIiksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIkNvZGUg6LCD55SoRGFydCBNWE1pcnJvckV4YW1wbGUuZ2V0TXlBcHBOYW1lXCIpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKEljb25zW1wiZGlyZWN0aW9uc19ydW5cIl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KHRoaXMuY29kZVRleHQoKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uVGFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NhbGwganMgYXBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGdfanNBcGkuZ2V0TXlBcHBOYW1lKFwiaU9TXCIsIHsgdjogXCIxLjBcIiB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJKU0FwaSBSZXN1bHRcIiksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRoaXMucmVzcG9uc2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBQYWdlRXhhbXBsZUpTQXBpLFxufTsiLCJcblxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG4gIEFuaW1hdGlvbixcbiAgQW5pbWF0ZWRCdWlsZGVyLFxuICBBbmltYXRpb25Db250cm9sbGVyLFxuICBEdXJhdGlvbixcbiAgSW50ZXJ2YWwsXG4gIEN1cnZlVHdlZW4sXG4gIEN1cnZlcyxcbiAgVHdlZW4sXG4gIEltYWdlLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkQnVpbGRlciBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlBhZ2VFeGFtcGxlQW5pbWF0ZWRCdWlsZGVyXCIpO1xuICAgIHRoaXMuY291bnQgPSAwO1xuICAgIHRoaXMudHdlZW4gPSBuZXcgVHdlZW4oeyBiZWdpbjogNTAuMCwgZW5kOiAzMDAuMCB9KTtcbiAgICB0aGlzLmFuaW1hdGlvbkNvbnRyb2xsZXIgPSBuZXcgQW5pbWF0aW9uQ29udHJvbGxlcih7IGR1cmF0aW9uOiBuZXcgRHVyYXRpb24oeyBzZWNvbmRzOiAyIH0pIH0pO1xuICAgIHRoaXMuYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbih7IHR3ZWVuOiB0aGlzLnR3ZWVuLCBjb250cm9sbGVyOiB0aGlzLmFuaW1hdGlvbkNvbnRyb2xsZXIgfSk7XG4gICAgdGhpcy5hbmltYXRpb24uYWRkU3RhdHVzTGlzdGVuZXIodGhpcy5hbmltYXRpb25Mb29wRnVuYy5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGFuaW1hdGlvbkxvb3BGdW5jKHN0YXR1cykge1xuICAgIE1YSlNMb2cubG9nKCdjYWxsYmFjayBmcm9tIGZsdXR0ZXIgLi4uLiAgJyArIHN0YXR1cyk7XG4gICAgaWYgKHN0YXR1cyA9PT0gQW5pbWF0aW9uU3RhdHVzLmNvbXBsZXRlZCkge1xuICAgICAgdGhpcy5hbmltYXRpb25Db250cm9sbGVyLnJldmVyc2UoKTtcbiAgICAgIHRoaXMuY291bnQrKztcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gQW5pbWF0aW9uU3RhdHVzLmRpc21pc3NlZCkge1xuICAgICAgdGhpcy5hbmltYXRpb25Db250cm9sbGVyLmZvcndhcmQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY291bnQgPiA1KSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbi5yZW1vdmVTdGF0dXNMaXN0ZW5lcih0aGlzLmFuaW1hdGlvbkxvb3BGdW5jKTtcbiAgICB9XG4gIH1cblxuICBiZWdpbkFuaW1hdGlvbigpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkNvbnRyb2xsZXIuZm9yd2FyZCgpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkQnVpbGRlcicpLFxuICAgICAgfSksXG4gICAgICBmbG9hdGluZ0FjdGlvbkJ1dHRvbjogbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuYmVnaW5BbmltYXRpb24oKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBTY2FsZUFuaW1hdGlvbih7XG4gICAgICAgIGNoaWxkOiBJbWFnZS5uZXR3b3JrKCdodHRwczovL3BpYzIuemhpbWcuY29tLzUwL3YyLTY0MTZlZjZkMzE4MTExN2EwMTc3Mjc1Mjg2ZmFjOGYzX2hkLmpwZycpLFxuICAgICAgICBhbmltYXRpb246IHRoaXMuYW5pbWF0aW9uXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxuXG5cbmNsYXNzIFNjYWxlQW5pbWF0aW9uIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgY2hpbGQsXG4gICAgYW5pbWF0aW9uXG4gIH0gPSB7fSkge1xuICAgIHN1cGVyKCdTY2FsZUFuaW1hdGlvbicpO1xuICAgIHRoaXMuY2hpbGQgPSBjaGlsZDtcbiAgICB0aGlzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgU2NhbGVBbmltYXRpb25TdGF0ZSgpO1xuICB9XG59XG5cbmNsYXNzIFNjYWxlQW5pbWF0aW9uU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBjb25zdCBpbWFnZVJhdGlvID0gMS40NTU7XG4gICAgY29uc3Qgd2lkZ2V0ID0gbmV3IENlbnRlcih7XG4gICAgICBjaGlsZDogbmV3IEFuaW1hdGVkQnVpbGRlcih7XG4gICAgICAgIGFuaW1hdGlvbjogdGhpcy53aWRnZXQuYW5pbWF0aW9uLFxuICAgICAgICB3aWRnZXQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIHdpZHRoOiBcIiR2YWx1ZVwiLFxuICAgICAgICAgIGNoaWxkOiB0aGlzLndpZGdldC5jaGlsZFxuICAgICAgICB9KVxuICAgICAgICAvLyBjaGlsZDogdGhpcy5jaGlsZCxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVBbmltYXRlZEJ1aWxkZXIsXG59O1xuIiwiXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG4gIEFuaW1hdGlvbixcbiAgQW5pbWF0ZWRCdWlsZGVyLFxuICBBbmltYXRpb25Db250cm9sbGVyLFxuICBEdXJhdGlvbixcbiAgSW50ZXJ2YWwsXG4gIEN1cnZlVHdlZW4sXG4gIEN1cnZlcyxcbiAgVHdlZW4sXG4gIEltYWdlLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRCdWlsZGVyVjIgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignUGFnZUV4YW1wbGVBbmltYXRlZEJ1aWxkZXJWMicpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkQnVpbGRlclYyU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkQnVpbGRlclYyU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuY291bnQgPSAwO1xuICAgIHRoaXMuX2NvbnRyb2xsZXIgPSBuZXcgQW5pbWF0aW9uQ29udHJvbGxlcih7XG4gICAgICBkdXJhdGlvbjogbmV3IER1cmF0aW9uKHtzZWNvbmRzOiAxfSksXG4gICAgICAvLyB1cHBlckJvdW5kOiAxMDAsXG4gICAgICAvLyB2c3luYzogdGhpcyxcbiAgICB9KTtcblxuICAgIHRoaXMuX2NvbnRyb2xsZXIuZm9yd2FyZCgpO1xuICB9XG5cbiAgYmVnaW5BbmltYXRpb24oKXtcbiAgICB0aGlzLl9jb250cm9sbGVyLnJlcGVhdCgpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCl7XG4gICAgY29uc3Qgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGFnZUV4YW1wbGVBbmltYXRlZEJ1aWxkZXJWMicsKSxcbiAgICAgIH0pLFxuICAgICAgZmxvYXRpbmdBY3Rpb25CdXR0b246IG5ldyBGbG9hdGluZ0FjdGlvbkJ1dHRvbih7XG4gICAgICAgIGNoaWxkOiBuZXcgSWNvbihJY29ucy5hZGQpLFxuICAgICAgICBvblByZXNzZWQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuYmVnaW5BbmltYXRpb24oKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBBbmltYXRlZEJ1aWxkZXIoe1xuICAgICAgICBhbmltYXRpb246IHRoaXMuX2NvbnRyb2xsZXIsXG4gICAgICAgIHdpZGdldDogbmV3IENlbnRlcih7XG4gICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgaGVpZ2h0OlwiMTAwKyR2YWx1ZSoxMDBcIiwgICAvL+WKqOaAgeiuoeeulyR2YWx1ZVxuICAgICAgICAgICAgd2lkdGg6XCIyMDArJHZhbHVlKjIwMFwiLCAgICAvL+WKqOaAgeiuoeeulyR2YWx1ZVxuICAgICAgICAgICAgY29sb3I6IENvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICBjaGlsZDogbmV3IENlbnRlcih7XG4gICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIueCueWHuyAoICsgKSDlj7fvvIzph43lpI3mkq3mlL5cIix7XG4gICAgICAgICAgICAgICAgc3R5bGU6bmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICBjb2xvcjpDb2xvcnMud2hpdGVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBidWlsZGVyIOeUseS6juW8guatpemikee5geiwg+eUqEpT77yM5Lya5a+86Ie0SlPnur/nqIvmgKfog73pl67popjvvIzmsqHmnInlrp7njrDvvIxhc3luY+WcqGJ1aWxkZXLkuK3osIPnlKjkuZ/lrZjlnKjmioDmnK/pl67pophcbiAgICAgICAgLy8gYnVpbGRlcjogZnVuY3Rpb24oY29udGV4dCxjaGlsZCl7XG4gICAgICAgIC8vICAgY29uc29sZS5sb2coXCJjYWxsIGJ1aWxkZXIgaW4ganMuLi4uYWFhYVwiKTtcbiAgICAgICAgLy8gICBNWEpTTG9nLmxvZyhcImNhbGwgYnVpbGRlciBpbiBqcy4uLi5iYmJiXCIpO1xuICAgICAgICAvLyAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgLy8gfSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVBbmltYXRlZEJ1aWxkZXJWMixcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxuICBBbmltYXRlZENvbnRhaW5lcixcbiAgRHVyYXRpb24sXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZENvbnRhaW5lciBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdQYWdlRXhhbXBsZUFuaW1hdGVkQ29udGFpbmVyJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQW5pbWF0ZWRDb250YWluZXJTdGF0ZSgpO1xuICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRDb250YWluZXJTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG5cbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkQ29udGFpbmVyJywpLFxuICAgICAgfSksXG4gICAgICBmbG9hdGluZ0FjdGlvbkJ1dHRvbjogbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSAhdGhpcy5zZWxlY3RlZDtcbiAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIlBhZ2VFeGFtcGxlQW5pbWF0ZWRDb250YWluZXJcIiksXG4gICAgICAgICAgbmV3IEFuaW1hdGVkQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGhlaWdodDp0aGlzLnNlbGVjdGVkID8gMzAwLjAgOiAxMDAsXG4gICAgICAgICAgICBjb2xvcjp0aGlzLnNlbGVjdGVkID8gQ29sb3JzLmJsdWU6Q29sb3JzLm9yYW5nZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOm5ldyBEdXJhdGlvbih7bWlsbGlzZWNvbmRzOjIwMH0pLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IENlbnRlcih7XG4gICAgICAgICAgICAgIGNoaWxkOm5ldyBUZXh0KFwi5Yqo55S75a655ZmoXCIse1xuICAgICAgICAgICAgICAgIHN0eWxlOm5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgY29sb3I6Q29sb3JzLndoaXRlLFxuICAgICAgICAgICAgICAgICAgZm9udFNpemU6MjAsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZUFuaW1hdGVkQ29udGFpbmVyLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG4gIEFuaW1hdGVkQ3Jvc3NGYWRlLFxuICBDcm9zc0ZhZGVTdGF0ZSxcbiAgRHVyYXRpb24sXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRDcm9zc0ZhZGUgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignUGFnZUV4YW1wbGVBbmltYXRlZENyb3NzRmFkZScpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkQ3Jvc3NGYWRlU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkQ3Jvc3NGYWRlU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zZWxlY3RlZCA9IHRydWU7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1BhZ2VFeGFtcGxlQW5pbWF0ZWRDcm9zc0ZhZGUnKSxcbiAgICAgIH0pLFxuICAgICAgZmxvYXRpbmdBY3Rpb25CdXR0b246IG5ldyBGbG9hdGluZ0FjdGlvbkJ1dHRvbih7XG4gICAgICAgIGNoaWxkOiBuZXcgSWNvbihJY29ucy5hZGQpLFxuICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSAhdGhpcy5zZWxlY3RlZDtcbiAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgQW5pbWF0ZWRDcm9zc0ZhZGUoe1xuICAgICAgICBjcm9zc0ZhZGVTdGF0ZTogdGhpcy5zZWxlY3RlZCA/IENyb3NzRmFkZVN0YXRlLnNob3dGaXJzdCA6IENyb3NzRmFkZVN0YXRlLnNob3dTZWNvbmQsXG4gICAgICAgIGR1cmF0aW9uOiBuZXcgRHVyYXRpb24oeyBtaWxsaXNlY29uZHM6IDIwMCB9KSxcbiAgICAgICAgZmlyc3RDaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgd2lkdGg6IDUwMCxcbiAgICAgICAgICBoZWlnaHQ6IDMwMCxcbiAgICAgICAgICBjb2xvcjogQ29sb3JzLm9yYW5nZSxcbiAgICAgICAgICBjaGlsZDogbmV3IENlbnRlcih7XG4gICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLnrKzkuIDpobVcIiwge1xuICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgICAgc2Vjb25kQ2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIHdpZHRoOiA1MDAsXG4gICAgICAgICAgaGVpZ2h0OiAzMDAsXG4gICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuesrOS6jOmhtVwiLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVBbmltYXRlZENyb3NzRmFkZSxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxuICBBbmltYXRlZERlZmF1bHRUZXh0U3R5bGUsXG4gIER1cmF0aW9uLFxuICBBbGlnbm1lbnQsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1BhZ2VFeGFtcGxlQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkRGVmYXVsdFRleHRTdHlsZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5mb250U2l6ZSA9IDIwO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCl7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1BhZ2VFeGFtcGxlQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlJywpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIlBhZ2VFeGFtcGxlQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlXCIpLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgaGVpZ2h0OjYwMCxcbiAgICAgICAgICAgIGFsaWdubWVudDpBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IEFuaW1hdGVkRGVmYXVsdFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgIGNoaWxkOm5ldyBUZXh0KFwiSGVsbG9cIiksXG4gICAgICAgICAgICAgIHN0eWxlOm5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTp0aGlzLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ibHVlLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgZHVyYXRpb246IG5ldyBEdXJhdGlvbih7bWlsbGlzZWNvbmRzOjM1MH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICBuZXcgUmFpc2VkQnV0dG9uKHtcbiAgICAgICAgICAgICAgICBjaGlsZDpuZXcgVGV4dChcIue8qeWwj1wiKSxcbiAgICAgICAgICAgICAgICBvblByZXNzZWQ6ZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9udFNpemUgLT0gMzA7XG4gICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IFNpemVkQm94KHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMCxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG5ldyBSYWlzZWRCdXR0b24oe1xuICAgICAgICAgICAgICAgIGNoaWxkOm5ldyBUZXh0KFwi5pS+5aSnXCIpLFxuICAgICAgICAgICAgICAgIG9uUHJlc3NlZDpmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250U2l6ZSArPSAzMDtcbiAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZUFuaW1hdGVkRGVmYXVsdFRleHRTdHlsZSxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkTGlzdFN0YXRlIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1BhZ2VFeGFtcGxlQW5pbWF0ZWRMaXN0U3RhdGUnKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZExpc3RTdGF0ZVN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZExpc3RTdGF0ZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBidWlsZChjb250ZXh0KXtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGFnZUV4YW1wbGVBbmltYXRlZExpc3RTdGF0ZScsKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJQYWdlRXhhbXBsZUFuaW1hdGVkTGlzdFN0YXRlXCIpLFxuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJUb2RvLi4uLlwiKSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVBbmltYXRlZExpc3RTdGF0ZSxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRNb2RhbEJhcnJpZXIgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignUGFnZUV4YW1wbGVBbmltYXRlZE1vZGFsQmFycmllcicpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkTW9kYWxCYXJyaWVyU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkTW9kYWxCYXJyaWVyU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkTW9kYWxCYXJyaWVyJyksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIlBhZ2VFeGFtcGxlQW5pbWF0ZWRNb2RhbEJhcnJpZXJcIiksXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcInRvZG8uLi5cIiksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlQW5pbWF0ZWRNb2RhbEJhcnJpZXIsXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG4gIFRleHREZWNvcmF0aW9uU3R5bGUsXG4gIFRleHRPdmVyZmxvdyxcbiAgUGFkZGluZyxcbiAgQW5pbWF0ZWRPcGFjaXR5LFxuICBGbHV0dGVyTG9nbyxcbiAgRHVyYXRpb24sXG4gIEN1cnZlcyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qc1wiKTtcblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZE9wYWNpdHkgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignUGFnZUV4YW1wbGVBbmltYXRlZE9wYWNpdHknKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZE9wYWNpdHlTdGF0ZSgpO1xuICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRPcGFjaXR5U3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcGFjaXR5TGV2ZWwgPSAxLjA7XG4gIH1cblxuICBjaGFuZ2VPcGFjaXR5KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5vcGFjaXR5TGV2ZWwgPSB0aGlzLm9wYWNpdHlMZXZlbCA9PSAwID8gMS4wIDogMC4wO1xuICAgIH0pO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkT3BhY2l0eScpLFxuICAgICAgfSksXG4gICAgICBmbG9hdGluZ0FjdGlvbkJ1dHRvbjogbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlT3BhY2l0eSgpO1xuICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIlBhZ2VFeGFtcGxlQW5pbWF0ZWRPcGFjaXR5XCIpLFxuICAgICAgICAgIG5ldyBBbmltYXRlZE9wYWNpdHkoe1xuICAgICAgICAgICAgb3BhY2l0eTogdGhpcy5vcGFjaXR5TGV2ZWwsXG4gICAgICAgICAgICBkdXJhdGlvbjogbmV3IER1cmF0aW9uKHsgc2Vjb25kczogMSB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgUGFkZGluZyh7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuYWxsKDEwKSxcbiAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBGbHV0dGVyTG9nbyh7IHNpemU6IDEwMCB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlQW5pbWF0ZWRPcGFjaXR5LFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG4gIEFuaW1hdGVkUGh5c2ljYWxNb2RlbCxcbiAgRHVyYXRpb24sXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRQaHlzaWNhbE1vZGVsIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1BhZ2VFeGFtcGxlQW5pbWF0ZWRQaHlzaWNhbE1vZGVsJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQW5pbWF0ZWRQaHlzaWNhbE1vZGVsU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkUGh5c2ljYWxNb2RlbFN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZWxldmF0aW9uID0gNTAuMDtcbiAgfVxuXG4gIGNoYW5nZU9wYWNpdHkoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpe1xuICAgICAgdGhpcy5lbGV2YXRpb24gPSB0aGlzLmVsZXZhdGlvbiA9PSA1MC4wID8gMC4wIDogNTAuMDtcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkUGh5c2ljYWxNb2RlbCcsKSxcbiAgICAgIH0pLFxuICAgICAgZmxvYXRpbmdBY3Rpb25CdXR0b246IG5ldyBGbG9hdGluZ0FjdGlvbkJ1dHRvbih7XG4gICAgICAgIGNoaWxkOiBuZXcgSWNvbihJY29ucy5hZGQpLFxuICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLmNoYW5nZU9wYWNpdHkoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgQ2VudGVyKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBBbmltYXRlZFBoeXNpY2FsTW9kZWwoe1xuICAgICAgICAgIGNoaWxkOm5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgY29sb3I6Q29sb3JzLm9yYW5nZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzaGFwZTpCb3hTaGFwZS5yZWN0YW5nbGUsXG4gICAgICAgICAgZWxldmF0aW9uOiB0aGlzLmVsZXZhdGlvbixcbiAgICAgICAgICBjb2xvcjpDb2xvcnMuYmx1ZSxcbiAgICAgICAgICBzaGFkb3dDb2xvcjogQ29sb3JzLmdyZXksXG4gICAgICAgICAgZHVyYXRpb246bmV3IER1cmF0aW9uKHttaWxsaXNlY29uZHM6NTAwfSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVBbmltYXRlZFBoeXNpY2FsTW9kZWwsXG59O1xuIiwiXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG4gIEFuaW1hdGVkUG9zaXRpb25lZCxcbiAgRHVyYXRpb24sXG4gIFN0YWNrLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkUG9zaXRpb25lZCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdQYWdlRXhhbXBsZUFuaW1hdGVkUG9zaXRpb25lZCcpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkUG9zaXRpb25lZFN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZFBvc2l0aW9uZWRTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRvcCA9IDIwMC4wO1xuICB9XG5cbiAgY2hhbmdlT3BhY2l0eSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudG9wID0gdGhpcy50b3AgPT0gMjAwLjAgPyAwLjAgOiAyMDAuMDtcbiAgICB9KTtcbiAgfVxuXG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkUG9zaXRpb25lZCcpLFxuICAgICAgfSksXG4gICAgICBmbG9hdGluZ0FjdGlvbkJ1dHRvbjogbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlT3BhY2l0eSgpO1xuICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBTdGFjayh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IEFuaW1hdGVkUG9zaXRpb25lZCh7XG4gICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLm9yYW5nZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdG9wOiB0aGlzLnRvcCxcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMudG9wLFxuICAgICAgICAgICAgZHVyYXRpb246IG5ldyBEdXJhdGlvbih7IG1pbGxpc2Vjb25kczogMzAwIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlQW5pbWF0ZWRQb3NpdGlvbmVkLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG4gIEFuaW1hdGVkU2l6ZSxcbiAgRHVyYXRpb24sXG4gIFN0YWNrLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkU2l6ZSBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdQYWdlRXhhbXBsZUFuaW1hdGVkU2l6ZScpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkU2l6ZVN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZFNpemVTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZUFuaW1hdGVkU2l6ZVwiKTtcbiAgICB0aGlzLnNpemUgPSAyMDAuMDtcbiAgfVxuXG4gIGNoYW5nZU9wYWNpdHkoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNpemUgPSB0aGlzLnNpemUgPT0gMjAwLjAgPyA1MC4wIDogMjAwLjA7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkU2l6ZScpLFxuICAgICAgfSksXG4gICAgICBmbG9hdGluZ0FjdGlvbkJ1dHRvbjogbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlT3BhY2l0eSgpO1xuICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBBbmltYXRlZFNpemUoe1xuICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgd2lkdGg6IHRoaXMuc2l6ZSxcbiAgICAgICAgICBoZWlnaHQ6IHRoaXMuc2l6ZSxcbiAgICAgICAgICBjb2xvcjogQ29sb3JzLm9yYW5nZSxcbiAgICAgICAgfSksXG4gICAgICAgIGR1cmF0aW9uOiBuZXcgRHVyYXRpb24oeyBtaWxsaXNlY29uZHM6IDMwMCB9KSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlQW5pbWF0ZWRTaXplLFxufTtcbiIsIlxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1BhZ2VFeGFtcGxlQW5pbWF0ZWRXaWRnZXQnKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZFdpZGdldFN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZFdpZGdldFN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkV2lkZ2V0JyksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIlBhZ2VFeGFtcGxlQW5pbWF0ZWRXaWRnZXRcIiksXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIuaKveixoeexu1wiKSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVBbmltYXRlZFdpZGdldCxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkV2lkZ2V0QmFzZVN0YXRlIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1BhZ2VFeGFtcGxlQW5pbWF0ZWRXaWRnZXRCYXNlU3RhdGUnKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZFdpZGdldEJhc2VTdGF0ZVN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZFdpZGdldEJhc2VTdGF0ZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkV2lkZ2V0QmFzZVN0YXRlJyksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIlBhZ2VFeGFtcGxlQW5pbWF0ZWRXaWRnZXRCYXNlU3RhdGVcIiksXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcInRvZG8uLi7ms5vlnovnsbtcIiksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlQW5pbWF0ZWRXaWRnZXRCYXNlU3RhdGUsXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG4gIFRleHREZWNvcmF0aW9uU3R5bGUsXG4gIFRleHRPdmVyZmxvdyxcbiAgUGFkZGluZyxcbiAgRHVyYXRpb24sXG4gIERlY29yYXRlZEJveFRyYW5zaXRpb24sXG4gIFJhZGl1cyxcbiAgQm94RGVjb3JhdGlvbixcbiAgQW5pbWF0aW9uQ29udHJvbGxlcixcbiAgRGVjb3JhdGlvblR3ZWVuLFxuICBGbHV0dGVyTG9nbyxcbiAgQm9yZGVyUmFkaXVzLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZURlY29yYXRlZEJveFRyYW5zaXRpb24gZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignUGFnZUV4YW1wbGVEZWNvcmF0ZWRCb3hUcmFuc2l0aW9uJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlRGVjb3JhdGVkQm94VHJhbnNpdGlvblN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVEZWNvcmF0ZWRCb3hUcmFuc2l0aW9uU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFuaW1hdGlvbkNvbnRyb2xsZXIoKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuZHVyYXRpb24gPSBuZXcgRHVyYXRpb24oeyBzZWNvbmRzOiAyIH0pO1xuXG5cbiAgICBsZXQgZFR3ZWVuID0gbmV3IERlY29yYXRpb25Ud2Vlbih7XG4gICAgICBiZWdpbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDApKVxuICAgICAgfSksXG4gICAgICBlbmQ6IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDIwKSlcbiAgICAgIH0pXG4gICAgfSk7XG5cbiAgICB0aGlzLnJlY3RBbmltYXRpb24gPSBkVHdlZW4uYW5pbWF0ZSh0aGlzLmNvbnRyb2xsZXIpXG5cbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGFnZUV4YW1wbGVEZWNvcmF0ZWRCb3hUcmFuc2l0aW9uJyksXG4gICAgICB9KSxcbiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICBjaGlsZDogbmV3IEljb24oSWNvbnMuYWRkKSxcbiAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5jb250cm9sbGVyLmZvcndhcmQoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgRGVjb3JhdGVkQm94VHJhbnNpdGlvbih7XG4gICAgICAgIGNoaWxkOiBuZXcgRmx1dHRlckxvZ28oeyBzaXplOiAzMDAgfSksXG4gICAgICAgIGRlY29yYXRpb246IHRoaXMucmVjdEFuaW1hdGlvbixcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVEZWNvcmF0ZWRCb3hUcmFuc2l0aW9uLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIFBhZ2VFeGFtcGxlRmFkZVRyYW5zaXRpb24gZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignUGFnZUV4YW1wbGVGYWRlVHJhbnNpdGlvbicpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUZhZGVUcmFuc2l0aW9uU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUZhZGVUcmFuc2l0aW9uU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBidWlsZChjb250ZXh0KXtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGFnZUV4YW1wbGVGYWRlVHJhbnNpdGlvbicsKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJQYWdlRXhhbXBsZUZhZGVUcmFuc2l0aW9uXCIpLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZUZhZGVUcmFuc2l0aW9uLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIFBhZ2VFeGFtcGxlSGVybyBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdQYWdlRXhhbXBsZUhlcm8nKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVIZXJvU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUhlcm9TdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1BhZ2VFeGFtcGxlSGVybycpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJQYWdlRXhhbXBsZUhlcm9cIiksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlSGVybyxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZVBvc2l0aW9uZWRUcmFuc2l0aW9uIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1BhZ2VFeGFtcGxlUG9zaXRpb25lZFRyYW5zaXRpb24nKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVQb3NpdGlvbmVkVHJhbnNpdGlvblN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVQb3NpdGlvbmVkVHJhbnNpdGlvblN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCl7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1BhZ2VFeGFtcGxlUG9zaXRpb25lZFRyYW5zaXRpb24nLCksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOltcbiAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwiUGFnZUV4YW1wbGVQb3NpdGlvbmVkVHJhbnNpdGlvblwiKSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVQb3NpdGlvbmVkVHJhbnNpdGlvbixcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZVJvdGF0aW9uVHJhbnNpdGlvbiBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdQYWdlRXhhbXBsZVJvdGF0aW9uVHJhbnNpdGlvbicpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVJvdGF0aW9uVHJhbnNpdGlvblN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVSb3RhdGlvblRyYW5zaXRpb25TdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGFnZUV4YW1wbGVSb3RhdGlvblRyYW5zaXRpb24nKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwiUGFnZUV4YW1wbGVSb3RhdGlvblRyYW5zaXRpb25cIiksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlUm90YXRpb25UcmFuc2l0aW9uLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIFBhZ2VFeGFtcGxlU2NhbGVUcmFuc2l0aW9uIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1BhZ2VFeGFtcGxlU2NhbGVUcmFuc2l0aW9uJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlU2NhbGVUcmFuc2l0aW9uU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZVNjYWxlVHJhbnNpdGlvblN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZVNjYWxlVHJhbnNpdGlvbicpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJQYWdlRXhhbXBsZVNjYWxlVHJhbnNpdGlvblwiKSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVTY2FsZVRyYW5zaXRpb24sXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG4gIFRleHREZWNvcmF0aW9uU3R5bGUsXG4gIFRleHRPdmVyZmxvdyxcbiAgUGFkZGluZyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qc1wiKTtcblxuY2xhc3MgUGFnZUV4YW1wbGVTaXplVHJhbnNpdGlvbiBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdQYWdlRXhhbXBsZVNpemVUcmFuc2l0aW9uJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlU2l6ZVRyYW5zaXRpb25TdGF0ZSgpO1xuICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlU2l6ZVRyYW5zaXRpb25TdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGFnZUV4YW1wbGVTaXplVHJhbnNpdGlvbicpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJQYWdlRXhhbXBsZVNpemVUcmFuc2l0aW9uXCIpLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZVNpemVUcmFuc2l0aW9uLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIFBhZ2VFeGFtcGxlU2xpZGVUcmFuc2l0aW9uIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1BhZ2VFeGFtcGxlU2xpZGVUcmFuc2l0aW9uJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlU2xpZGVUcmFuc2l0aW9uU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZVNsaWRlVHJhbnNpdGlvblN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcihcIlBhZ2VFeGFtcGxlU2xpZGVUcmFuc2l0aW9uXCIpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCl7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1BhZ2VFeGFtcGxlU2xpZGVUcmFuc2l0aW9uJywpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIlBhZ2VFeGFtcGxlU2xpZGVUcmFuc2l0aW9uXCIpLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZVNsaWRlVHJhbnNpdGlvbixcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIEljb25CdXR0b24sXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuXG5jbGFzcyBQYWdlRXhhbXBsZUFwcEJhciBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKFwiUGFnZUV4YW1wbGVBcHBCYXJcIik7XG4gIH1cblxuICBidWlsZChjb250ZXh0KXtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQXBwQmFyJywpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgn5pyA566A5Y2V55qEQXBwQmFyJywpLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdOb3JtYWxBcHBCYXInLCksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgn5qCH6aKY5o2i6ImyJywpLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdOb3JtYWxBcHBCYXInLHtcbiAgICAgICAgICAgICAgc3R5bGU6bmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgY29sb3I6Q29sb3JzLndoaXRlLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+iDjOaZr+aNouiJsicsKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLmJsdWUsXG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ05vcm1hbEFwcEJhcicse1xuICAgICAgICAgICAgICBzdHlsZTpuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICBjb2xvcjpDb2xvcnMud2hpdGUsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgn6K6+572uIGxlYWRpbmcnLCksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IEFwcEJhcih7XG4gICAgICAgICAgICBsZWFkaW5nOiBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgIGljb246bmV3IEljb24oSWNvbnMuYWRkKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdBcHBCYXInLCksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgn6K6+572uIGFjdGlvbicsKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgIGFjdGlvbnM6W1xuICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgaWNvbjpuZXcgSWNvbihJY29ucy5jYW1lcmEpLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQXBwQmFyJywpLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+iuvue9ruWkmuS4qmFjdGlvbicsKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgIGFjdGlvbnM6W1xuICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgaWNvbjpuZXcgSWNvbihJY29ucy5jYW1lcmEpLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IEljb25CdXR0b24oe1xuICAgICAgICAgICAgICAgIGljb246bmV3IEljb24oSWNvbnMucHJpbnQpLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0FwcEJhcicsKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVBcHBCYXIsXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cblxuY2xhc3MgUGFnZUV4YW1wbGVCdXR0b24gZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcihcIlBhZ2VFeGFtcGxlQnV0dG9uXCIpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCl7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0J1dHRvbicsKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJSYWlzZWRCdXR0b25cIiksXG4gICAgICAgICAgbmV3IFJhaXNlZEJ1dHRvbih7XG4gICAgICAgICAgICBjaGlsZDpuZXcgVGV4dChcIuaZrumAmuaMiemSrlwiKSxcbiAgICAgICAgICAgIG9uUHJlc3NlZDpmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIE1YSlNMb2cubG9nKFwiQ2xpY2tcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCLlpLHmlYhEaXNhYmxlXCIpLFxuICAgICAgICAgIG5ldyBSYWlzZWRCdXR0b24oe1xuICAgICAgICAgICAgY2hpbGQ6bmV3IFRleHQoXCJEaXNhYmxlIOaMiemSrlwiKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwiRmxhdEJ1dHRvblwiKSxcbiAgICAgICAgICBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICBjaGlsZDpuZXcgVGV4dChcIkZsYXQg5oyJ6ZKuXCIpLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgIHRleHRDb2xvcjpDb2xvcnMuYmxhY2ssXG4gICAgICAgICAgICBjaGlsZDpuZXcgVGV4dChcIkZsYXQg5oyJ6ZKuXCIpLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJJY29uIEJ1dHRvblwiKSxcbiAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICBpY29uOm5ldyBJY29uKEljb25zLmNhbWVyYSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIkZsb2F0aW5nIEFjdGlvbiBCdXR0b25cIiksXG4gICAgICAgICAgbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgICAgIGNoaWxkOm5ldyBJY29uKEljb25zLmNhbWVyYSksXG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlQnV0dG9uLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBDcm9zc0F4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cblxuY2xhc3MgUGFnZUV4YW1wbGVDb2x1bW4gZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcihcIlBhZ2VFeGFtcGxlQ29sdW1uXCIpO1xuICB9XG5cbiAgZ2VuU2V2ZW5Db250YWluZXJzKCl7XG4gICAgcmV0dXJuICBbXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLnJlZCxcbiAgICAgICAgaGVpZ2h0OjMwLFxuICAgICAgICB3aWR0aDoxMDAsXG4gICAgICB9KSxcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMub3JhbmdlLFxuICAgICAgICBoZWlnaHQ6MzAsXG4gICAgICAgIHdpZHRoOjEwMCxcbiAgICAgIH0pLFxuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy55ZWxsb3csXG4gICAgICAgIGhlaWdodDozMCxcbiAgICAgICAgd2lkdGg6MTAwLFxuICAgICAgfSksXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLmdyZWVuLFxuICAgICAgICBoZWlnaHQ6MzAsXG4gICAgICAgIHdpZHRoOjEwMCxcbiAgICAgIH0pLFxuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy5pbmRpZ28sXG4gICAgICAgIGhlaWdodDozMCxcbiAgICAgICAgd2lkdGg6MTAwLFxuICAgICAgfSksXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLnB1cnBsZSxcbiAgICAgICAgaGVpZ2h0OjMwLFxuICAgICAgICB3aWR0aDoxMDAsXG4gICAgICB9KSxcbiAgICBdO1xuICB9XG5cblxuICBnZW5UaHJlZUNvbnRhaW5lcnMoKXtcbiAgICByZXR1cm4gIFtcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMucmVkLFxuICAgICAgICBoZWlnaHQ6MzAsXG4gICAgICAgIHdpZHRoOjEwMCxcbiAgICAgIH0pLFxuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy5vcmFuZ2UsXG4gICAgICAgIGhlaWdodDozMCxcbiAgICAgICAgd2lkdGg6MTAwLFxuICAgICAgfSksXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLnllbGxvdyxcbiAgICAgICAgaGVpZ2h0OjMwLFxuICAgICAgICB3aWR0aDoxMDAsXG4gICAgICB9KSxcbiAgICBdO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCl7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0NvbHVtbicsKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJDb2x1bW5cIiksfSksXG4gICAgICAgICAgbmV3IENvbHVtbih7XG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBjb2xvcjpDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgIGhlaWdodDozMCxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OjMwLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgY29sb3I6Q29sb3JzLnllbGxvdyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MzAsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICAgICAgaGVpZ2h0OjMwLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgY29sb3I6Q29sb3JzLmluZGlnbyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MzAsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBjb2xvcjpDb2xvcnMucHVycGxlLFxuICAgICAgICAgICAgICAgIGhlaWdodDozMCxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIkNvbHVtbiBUb3AtTGVmdFwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIFRvcC1NaWRkbGVcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJDb2x1bW4gVG9wLVJpZ2h0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IENvbHVtbih7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LmVuZCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcblxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJDb2x1bW4gQ2VudGVyLUxlZnRcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJDb2x1bW4gQ2VudGVyLUNlbnRlclwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJDb2x1bW4gQ2VudGVyLVJpZ2h0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IENvbHVtbih7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5lbmQsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG5cbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIEJvdHRvbS1MZWZ0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IENvbHVtbih7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LmVuZCxcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIEJvdHRvbS1NaWRkbGVcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuZW5kLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIEJvdHRvbS1SaWdodFwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5lbmQsXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuZW5kLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuXG5cblxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJDb2x1bW4gU3BhY2VBcm91bmQtTGVmdFwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIFNwYWNlQXJvdW5kLU1pZGRsZVwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIkNvbHVtbiBTcGFjZUFyb3VuZC1SaWdodFwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5lbmQsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG5cblxuXG5cbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIFNwYWNlQmV0d2Vlbi1MZWZ0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IENvbHVtbih7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnNwYWNlQmV0d2VlbixcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIFNwYWNlQmV0d2Vlbi1NaWRkbGVcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VCZXR3ZWVuLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIFNwYWNlQmV0d2Vlbi1SaWdodFwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5zcGFjZUJldHdlZW4sXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuZW5kLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIkNvbHVtbiBTcGFjZUV2ZW5seS1MZWZ0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IENvbHVtbih7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnNwYWNlRXZlbmx5LFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJDb2x1bW4gU3BhY2VFdmVubHktTWlkZGxlXCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IENvbHVtbih7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnNwYWNlRXZlbmx5LFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29sdW1uIFNwYWNlRXZlbmx5LVJpZ2h0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IENvbHVtbih7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnNwYWNlRXZlbmx5LFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LmVuZCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcblxuXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlQ29sdW1uLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIEJveERlY29yYXRpb24sXG4gIEJvcmRlclJhZGl1cyxcbiAgUmFkaXVzLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgQ3Jvc3NBeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxufSA9IHJlcXVpcmUoXCIuLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5cbmNsYXNzIFBhZ2VFeGFtcGxlQ29udGFpbmVyIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZUNvbnRhaW5lclwiKTtcbiAgfVxuXG4gIGdlblNldmVuQ29udGFpbmVycygpe1xuICAgIHJldHVybiAgW1xuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy5yZWQsXG4gICAgICAgIGhlaWdodDoxMDAsXG4gICAgICAgIHdpZHRoOjMwLFxuICAgICAgfSksXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLm9yYW5nZSxcbiAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgd2lkdGg6MzAsXG4gICAgICB9KSxcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMueWVsbG93LFxuICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICB3aWR0aDozMCxcbiAgICAgIH0pLFxuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy5ncmVlbixcbiAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgd2lkdGg6MzAsXG4gICAgICB9KSxcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMuaW5kaWdvLFxuICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICB3aWR0aDozMCxcbiAgICAgIH0pLFxuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy5wdXJwbGUsXG4gICAgICAgIGhlaWdodDoxMDAsXG4gICAgICAgIHdpZHRoOjMwLFxuICAgICAgfSksXG4gICAgXTtcbiAgfVxuXG5cbiAgZ2VuVGhyZWVDb250YWluZXJzKCl7XG4gICAgcmV0dXJuICBbXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLnJlZCxcbiAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgd2lkdGg6MzAsXG4gICAgICB9KSxcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMub3JhbmdlLFxuICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICB3aWR0aDozMCxcbiAgICAgIH0pLFxuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy55ZWxsb3csXG4gICAgICAgIGhlaWdodDoxMDAsXG4gICAgICAgIHdpZHRoOjMwLFxuICAgICAgfSksXG4gICAgXTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdDb250YWluZXInLCksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOltcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29udGFpbmVyXCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLnJlZCxcbiAgICAgICAgICAgIGhlaWdodDoxMDAsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIuaUvue9ruWGheWuueeahENvbnRhaW5lclwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFRleHQoXCLmiJHmnInlhoXlrrlcIilcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiQ29udGFpbmVy6YeM55qEUGFkZGluZ1wiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy55ZWxsb3csXG4gICAgICAgICAgICBwYWRkaW5nOkVkZ2VJbnNldHMuYWxsKDEwKSxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBUZXh0KFwi5oiR5pyJ5YaF5a65XCIpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIuWchuinkueahENvbnRhaW5lclwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIG1hcmdpbjpFZGdlSW5zZXRzLmFsbCgxMCksXG4gICAgICAgICAgICBwYWRkaW5nOkVkZ2VJbnNldHMuYWxsKDEwKSxcbiAgICAgICAgICAgIGRlY29yYXRpb246bmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6Qm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoNC4wKSksXG4gICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmVlbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFRleHQoXCLmiJHmmK/lnIbop5JDb250YWluZXJcIilcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwi5Zu65a6a6auY5a6955qEQ29udGFpbmVyXCIpLH0pLFxuICAgICAgICAgIG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgY2hpbGQ6bmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgIHdpZHRoOjEwMCxcbiAgICAgICAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgICAgICAgbWFyZ2luOkVkZ2VJbnNldHMuYWxsKDEwKSxcbiAgICAgICAgICAgICAgcGFkZGluZzpFZGdlSW5zZXRzLmFsbCgxMCksXG4gICAgICAgICAgICAgIGRlY29yYXRpb246bmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czpCb3JkZXJSYWRpdXMuYWxsKFJhZGl1cy5jaXJjdWxhcig0LjApKSxcbiAgICAgICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBjaGlsZDpuZXcgVGV4dChcIjEwMHgxMDBcIix7XG4gICAgICAgICAgICAgICAgc3R5bGU6bmV3IFRleHRTdHlsZSh7Y29sb3I6Q29sb3JzLndoaXRlfSksXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KVxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZUNvbnRhaW5lcixcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBCb3hEZWNvcmF0aW9uLFxuICBCb3JkZXJSYWRpdXMsXG4gIFJhZGl1cyxcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIENyb3NzQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgRmx1dHRlckxvZ28sXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQ29sb3IgZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZUNvbG9yXCIpO1xuICB9XG5cbiAgZ2VuQ29sb3JVSSh0aXRsZSwgY29sb3JQcmVmaXgpIHtcbiAgICBsZXQgdWlMaXN0ID0gW1xuICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KHRpdGxlKSB9KSxcbiAgICBdO1xuICAgIGNvbnN0IGNvbG9yS2V5cyA9IFtcIjUwXCIsIFwiMTAwXCIsIFwiMTUwXCIsIFwiMjAwXCIsIFwiMjUwXCIsIFwiMzAwXCIsIFwiMzUwXCIsIFwiNDAwXCIsIFwiNDUwXCIsIFwiNTAwXCIsIFwiNTUwXCIsIFwiNjAwXCIsIFwiNjUwXCIsIFwiNzAwXCIsIFwiNzUwXCIsIFwiODAwXCIsIFwiODUwXCIsIFwiOTAwXCJdXG4gICAgLy/mn6Xmib7kuLvoibJcbiAgICBjb2xvcktleXMuZm9yRWFjaChmdW5jdGlvbiAoY29sb3JLZXkpIHtcbiAgICAgIGNvbnN0IGNvbG9yRm5OYW1lID0gY29sb3JQcmVmaXggKyBjb2xvcktleTtcbiAgICAgIGlmIChDb2xvcnMuaGFzT3duUHJvcGVydHkoY29sb3JQcmVmaXgpKSB7XG5cbiAgICAgICAgbGV0IGMgPSBDb2xvcnNbY29sb3JQcmVmaXhdLnN3YXRjaFtwYXJzZUludChjb2xvcktleSldO1xuXG4gICAgICAgIGlmIChjICE9IG51bGwpIHtcbiAgICAgICAgICB1aUxpc3QucHVzaChuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGhlaWdodDogMzAsXG4gICAgICAgICAgICBjb2xvcjogQ29sb3JzW2NvbG9yUHJlZml4XS5zd2F0Y2hbY29sb3JLZXldLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoY29sb3JGbk5hbWUpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy/mn6Xmib7ovoXliqnoibJcbiAgICBsZXQgYWNjZW50VUlMaXN0ID0gW107XG4gICAgY29sb3JLZXlzLmZvckVhY2goZnVuY3Rpb24gKGNvbG9yS2V5KSB7XG4gICAgICBjb25zdCBjb2xvckZuTmFtZSA9IGNvbG9yUHJlZml4ICsgXCJBY2NlbnRcIjtcbiAgICAgIGlmIChDb2xvcnMuaGFzT3duUHJvcGVydHkoY29sb3JGbk5hbWUpKSB7XG5cbiAgICAgICAgbGV0IGMgPSBDb2xvcnNbY29sb3JQcmVmaXhdLnN3YXRjaFtwYXJzZUludChjb2xvcktleSldO1xuXG4gICAgICAgIGlmIChjICE9IG51bGwpIHtcbiAgICAgICAgICBhY2NlbnRVSUxpc3QucHVzaChuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGhlaWdodDogMzAsXG4gICAgICAgICAgICBjb2xvcjogYyxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KGNvbG9yRm5OYW1lICsgY29sb3JLZXkpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGFjY2VudFVJTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICB1aUxpc3QucHVzaChuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQodGl0bGUgKyBcIkFjY2VudFwiKSB9KSk7XG4gICAgICB1aUxpc3QgPSB1aUxpc3QuY29uY2F0KGFjY2VudFVJTGlzdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVpTGlzdDtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQ29sb3InKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAuLi50aGlzLmdlbkNvbG9yVUkoXCJSZWRcIiwgXCJyZWRcIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5Db2xvclVJKFwicGlua1wiLCBcInBpbmtcIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5Db2xvclVJKFwicHVycGxlXCIsIFwicHVycGxlXCIpLFxuICAgICAgICAgIC4uLnRoaXMuZ2VuQ29sb3JVSShcImRlZXBQdXJwbGVcIiwgXCJkZWVwUHVycGxlXCIpLFxuICAgICAgICAgIC4uLnRoaXMuZ2VuQ29sb3JVSShcImluZGlnb1wiLCBcImluZGlnb1wiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkNvbG9yVUkoXCJibHVlXCIsIFwiYmx1ZVwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkNvbG9yVUkoXCJsaWdodEJsdWVcIiwgXCJsaWdodEJsdWVcIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5Db2xvclVJKFwiY3lhblwiLCBcImN5YW5cIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5Db2xvclVJKFwidGVhbFwiLCBcInRlYWxcIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5Db2xvclVJKFwiZ3JlZW5cIiwgXCJncmVlblwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkNvbG9yVUkoXCJsaWdodEdyZWVuXCIsIFwibGlnaHRHcmVlblwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkNvbG9yVUkoXCJsaW1lXCIsIFwibGltZVwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkNvbG9yVUkoXCJ5ZWxsb3dcIiwgXCJ5ZWxsb3dcIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5Db2xvclVJKFwiYW1iZXJcIiwgXCJhbWJlclwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkNvbG9yVUkoXCJvcmFuZ2VcIiwgXCJvcmFuZ2VcIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5Db2xvclVJKFwiZGVlcE9yYW5nZVwiLCBcImRlZXBPcmFuZ2VcIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5Db2xvclVJKFwiYnJvd25cIiwgXCJicm93blwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkNvbG9yVUkoXCJibHVlR3JleVwiLCBcImJsdWVHcmV5XCIpLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZUNvbG9yLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIEJveERlY29yYXRpb24sXG4gIEJvcmRlclJhZGl1cyxcbiAgUmFkaXVzLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgQ3Jvc3NBeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBGbHV0dGVyTG9nbyxcbiAgV3JhcCxcbiAgU2Nyb2xsYmFyLFxufSA9IHJlcXVpcmUoXCIuLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5cbmNsYXNzIFBhZ2VFeGFtcGxlSWNvbiBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKFwiUGFnZUV4YW1wbGVJY29uXCIpO1xuICB9XG5cbiAgZ2VuSWNvblVJKGljb25OYW1lKXtcbiAgICBjb25zdCBpY29uID0gSWNvbnNbaWNvbk5hbWVdO1xuICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgIHBhZGRpbmc6RWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgY2hpbGQ6bmV3IFJvdyh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IEljb24oaWNvbiksXG4gICAgICAgICAgbmV3IFNpemVkQm94KHt3aWR0aDoxMH0pLFxuICAgICAgICAgIG5ldyBUZXh0KGljb25OYW1lKSxcbiAgICAgICAgXVxuICAgICAgfSksXG4gICAgfSlcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIGNvbnN0IGljb25zID0gW1xuICAgICAgXCJ0aHJlZXNpeHR5XCIsXG4gICAgICBcInRocmVlZF9yb3RhdGlvblwiLFxuICAgICAgXCJmb3VyX2tcIixcbiAgICAgIFwiYWNfdW5pdFwiLFxuICAgICAgXCJhY2Nlc3NfYWxhcm1cIixcbiAgICAgIFwiYWNjZXNzX2FsYXJtc1wiLFxuICAgICAgXCJhY2Nlc3NfdGltZVwiLFxuICAgICAgXCJhY2Nlc3NpYmlsaXR5XCIsXG4gICAgICBcImFjY2Vzc2liaWxpdHlfbmV3XCIsXG4gICAgICBcImFjY2Vzc2libGVcIixcbiAgICAgIFwiYWNjZXNzaWJsZV9mb3J3YXJkXCIsXG4gICAgICBcImFjY291bnRfYmFsYW5jZVwiLFxuICAgICAgXCJhY2NvdW50X2JhbGFuY2Vfd2FsbGV0XCIsXG4gICAgICBcImFjY291bnRfYm94XCIsXG4gICAgICBcImFjY291bnRfY2lyY2xlXCIsXG4gICAgICBcImFkYlwiLFxuICAgICAgXCJhZGRcIixcbiAgICAgIFwiYWRkX2FfcGhvdG9cIixcbiAgICAgIFwiYWRkX2FsYXJtXCIsXG4gICAgICBcImFkZF9hbGVydFwiLFxuICAgICAgXCJhZGRfYm94XCIsXG4gICAgICBcImFkZF9jYWxsXCIsXG4gICAgICBcImFkZF9jaXJjbGVcIixcbiAgICAgIFwiYWRkX2NpcmNsZV9vdXRsaW5lXCIsXG4gICAgICBcImFkZF9jb21tZW50XCIsXG4gICAgICBcImFkZF9sb2NhdGlvblwiLFxuICAgICAgXCJhZGRfcGhvdG9fYWx0ZXJuYXRlXCIsXG4gICAgICBcImFkZF9zaG9wcGluZ19jYXJ0XCIsXG4gICAgICBcImFkZF90b19ob21lX3NjcmVlblwiLFxuICAgICAgXCJhZGRfdG9fcGhvdG9zXCIsXG4gICAgICBcImFkZF90b19xdWV1ZVwiLFxuICAgICAgXCJhZGp1c3RcIixcbiAgICAgIFwiYWlybGluZV9zZWF0X2ZsYXRcIixcbiAgICAgIFwiYWlybGluZV9zZWF0X2ZsYXRfYW5nbGVkXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9pbmRpdmlkdWFsX3N1aXRlXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9sZWdyb29tX2V4dHJhXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9sZWdyb29tX25vcm1hbFwiLFxuICAgICAgXCJhaXJsaW5lX3NlYXRfbGVncm9vbV9yZWR1Y2VkXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9yZWNsaW5lX2V4dHJhXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9yZWNsaW5lX25vcm1hbFwiLFxuICAgICAgXCJhaXJwbGFuZW1vZGVfYWN0aXZlXCIsXG4gICAgICBcImFpcnBsYW5lbW9kZV9pbmFjdGl2ZVwiLFxuICAgICAgXCJhaXJwbGF5XCIsXG4gICAgICBcImFpcnBvcnRfc2h1dHRsZVwiLFxuICAgICAgXCJhbGFybVwiLFxuICAgICAgXCJhbGFybV9hZGRcIixcbiAgICAgIFwiYWxhcm1fb2ZmXCIsXG4gICAgICBcImFsYXJtX29uXCIsXG4gICAgICBcImFsYnVtXCIsXG4gICAgICBcImFsbF9pbmNsdXNpdmVcIixcbiAgICAgIFwiYWxsX291dFwiLFxuICAgICAgXCJhbHRlcm5hdGVfZW1haWxcIixcbiAgICAgIFwiYW5kcm9pZFwiLFxuICAgICAgXCJhbm5vdW5jZW1lbnRcIixcbiAgICAgIFwiYXBwc1wiLFxuICAgICAgXCJhcmNoaXZlXCIsXG4gICAgICBcImFycm93X2JhY2tcIixcbiAgICAgIFwiYXJyb3dfYmFja19pb3NcIixcbiAgICAgIFwiYXJyb3dfZG93bndhcmRcIixcbiAgICAgIFwiYXJyb3dfZHJvcF9kb3duXCIsXG4gICAgICBcImFycm93X2Ryb3BfZG93bl9jaXJjbGVcIixcbiAgICAgIFwiYXJyb3dfZHJvcF91cFwiLFxuICAgICAgXCJhcnJvd19mb3J3YXJkXCIsXG4gICAgICBcImFycm93X2ZvcndhcmRfaW9zXCIsXG4gICAgICBcImFycm93X2xlZnRcIixcbiAgICAgIFwiYXJyb3dfcmlnaHRcIixcbiAgICAgIFwiYXJyb3dfdXB3YXJkXCIsXG4gICAgICBcImFydF90cmFja1wiLFxuICAgICAgXCJhc3BlY3RfcmF0aW9cIixcbiAgICAgIFwiYXNzZXNzbWVudFwiLFxuICAgICAgXCJhc3NpZ25tZW50XCIsXG4gICAgICBcImFzc2lnbm1lbnRfaW5kXCIsXG4gICAgICBcImFzc2lnbm1lbnRfbGF0ZVwiLFxuICAgICAgXCJhc3NpZ25tZW50X3JldHVyblwiLFxuICAgICAgXCJhc3NpZ25tZW50X3JldHVybmVkXCIsXG4gICAgICBcImFzc2lnbm1lbnRfdHVybmVkX2luXCIsXG4gICAgICBcImFzc2lzdGFudFwiLFxuICAgICAgXCJhc3Npc3RhbnRfcGhvdG9cIixcbiAgICAgIFwiYXRtXCIsXG4gICAgICBcImF0dGFjaF9maWxlXCIsXG4gICAgICBcImF0dGFjaF9tb25leVwiLFxuICAgICAgXCJhdHRhY2htZW50XCIsXG4gICAgICBcImF1ZGlvdHJhY2tcIixcbiAgICAgIFwiYXV0b3JlbmV3XCIsXG4gICAgICBcImF2X3RpbWVyXCIsXG4gICAgICBcImJhY2tzcGFjZVwiLFxuICAgICAgXCJiYWNrdXBcIixcbiAgICAgIFwiYmF0dGVyeV9hbGVydFwiLFxuICAgICAgXCJiYXR0ZXJ5X2NoYXJnaW5nX2Z1bGxcIixcbiAgICAgIFwiYmF0dGVyeV9mdWxsXCIsXG4gICAgICBcImJhdHRlcnlfc3RkXCIsXG4gICAgICBcImJhdHRlcnlfdW5rbm93blwiLFxuICAgICAgXCJiZWFjaF9hY2Nlc3NcIixcbiAgICAgIFwiYmVlbmhlcmVcIixcbiAgICAgIFwiYmxvY2tcIixcbiAgICAgIFwiYmx1ZXRvb3RoXCIsXG4gICAgICBcImJsdWV0b290aF9hdWRpb1wiLFxuICAgICAgXCJibHVldG9vdGhfY29ubmVjdGVkXCIsXG4gICAgICBcImJsdWV0b290aF9kaXNhYmxlZFwiLFxuICAgICAgXCJibHVldG9vdGhfc2VhcmNoaW5nXCIsXG4gICAgICBcImJsdXJfY2lyY3VsYXJcIixcbiAgICAgIFwiYmx1cl9saW5lYXJcIixcbiAgICAgIFwiYmx1cl9vZmZcIixcbiAgICAgIFwiYmx1cl9vblwiLFxuICAgICAgXCJib29rXCIsXG4gICAgICBcImJvb2ttYXJrXCIsXG4gICAgICBcImJvb2ttYXJrX2JvcmRlclwiLFxuICAgICAgXCJib3JkZXJfYWxsXCIsXG4gICAgICBcImJvcmRlcl9ib3R0b21cIixcbiAgICAgIFwiYm9yZGVyX2NsZWFyXCIsXG4gICAgICBcImJvcmRlcl9jb2xvclwiLFxuICAgICAgXCJib3JkZXJfaG9yaXpvbnRhbFwiLFxuICAgICAgXCJib3JkZXJfaW5uZXJcIixcbiAgICAgIFwiYm9yZGVyX2xlZnRcIixcbiAgICAgIFwiYm9yZGVyX291dGVyXCIsXG4gICAgICBcImJvcmRlcl9yaWdodFwiLFxuICAgICAgXCJib3JkZXJfc3R5bGVcIixcbiAgICAgIFwiYm9yZGVyX3RvcFwiLFxuICAgICAgXCJib3JkZXJfdmVydGljYWxcIixcbiAgICAgIFwiYnJhbmRpbmdfd2F0ZXJtYXJrXCIsXG4gICAgICBcImJyaWdodG5lc3NfMVwiLFxuICAgICAgXCJicmlnaHRuZXNzXzJcIixcbiAgICAgIFwiYnJpZ2h0bmVzc18zXCIsXG4gICAgICBcImJyaWdodG5lc3NfNFwiLFxuICAgICAgXCJicmlnaHRuZXNzXzVcIixcbiAgICAgIFwiYnJpZ2h0bmVzc182XCIsXG4gICAgICBcImJyaWdodG5lc3NfN1wiLFxuICAgICAgXCJicmlnaHRuZXNzX2F1dG9cIixcbiAgICAgIFwiYnJpZ2h0bmVzc19oaWdoXCIsXG4gICAgICBcImJyaWdodG5lc3NfbG93XCIsXG4gICAgICBcImJyaWdodG5lc3NfbWVkaXVtXCIsXG4gICAgICBcImJyb2tlbl9pbWFnZVwiLFxuICAgICAgXCJicnVzaFwiLFxuICAgICAgXCJidWJibGVfY2hhcnRcIixcbiAgICAgIFwiYnVnX3JlcG9ydFwiLFxuICAgICAgXCJidWlsZFwiLFxuICAgICAgXCJidXJzdF9tb2RlXCIsXG4gICAgICBcImJ1c2luZXNzXCIsXG4gICAgICBcImJ1c2luZXNzX2NlbnRlclwiLFxuICAgICAgXCJjYWNoZWRcIixcbiAgICAgIFwiY2FrZVwiLFxuICAgICAgXCJjYWxlbmRhcl90b2RheVwiLFxuICAgICAgXCJjYWxlbmRhcl92aWV3X2RheVwiLFxuICAgICAgXCJjYWxsXCIsXG4gICAgICBcImNhbGxfZW5kXCIsXG4gICAgICBcImNhbGxfbWFkZVwiLFxuICAgICAgXCJjYWxsX21lcmdlXCIsXG4gICAgICBcImNhbGxfbWlzc2VkXCIsXG4gICAgICBcImNhbGxfbWlzc2VkX291dGdvaW5nXCIsXG4gICAgICBcImNhbGxfcmVjZWl2ZWRcIixcbiAgICAgIFwiY2FsbF9zcGxpdFwiLFxuICAgICAgXCJjYWxsX3RvX2FjdGlvblwiLFxuICAgICAgXCJjYW1lcmFcIixcbiAgICAgIFwiY2FtZXJhX2FsdFwiLFxuICAgICAgXCJjYW1lcmFfZW5oYW5jZVwiLFxuICAgICAgXCJjYW1lcmFfZnJvbnRcIixcbiAgICAgIFwiY2FtZXJhX3JlYXJcIixcbiAgICAgIFwiY2FtZXJhX3JvbGxcIixcbiAgICAgIFwiY2FuY2VsXCIsXG4gICAgICBcImNhcmRfZ2lmdGNhcmRcIixcbiAgICAgIFwiY2FyZF9tZW1iZXJzaGlwXCIsXG4gICAgICBcImNhcmRfdHJhdmVsXCIsXG4gICAgICBcImNhc2lub1wiLFxuICAgICAgXCJjYXN0XCIsXG4gICAgICBcImNhc3RfY29ubmVjdGVkXCIsXG4gICAgICBcImNhdGVnb3J5XCIsXG4gICAgICBcImNlbnRlcl9mb2N1c19zdHJvbmdcIixcbiAgICAgIFwiY2VudGVyX2ZvY3VzX3dlYWtcIixcbiAgICAgIFwiY2hhbmdlX2hpc3RvcnlcIixcbiAgICAgIFwiY2hhdFwiLFxuICAgICAgXCJjaGF0X2J1YmJsZVwiLFxuICAgICAgXCJjaGF0X2J1YmJsZV9vdXRsaW5lXCIsXG4gICAgICBcImNoZWNrXCIsXG4gICAgICBcImNoZWNrX2JveFwiLFxuICAgICAgXCJjaGVja19ib3hfb3V0bGluZV9ibGFua1wiLFxuICAgICAgXCJjaGVja19jaXJjbGVcIixcbiAgICAgIFwiY2hlY2tfY2lyY2xlX291dGxpbmVcIixcbiAgICAgIFwiY2hldnJvbl9sZWZ0XCIsXG4gICAgICBcImNoZXZyb25fcmlnaHRcIixcbiAgICAgIFwiY2hpbGRfY2FyZVwiLFxuICAgICAgXCJjaGlsZF9mcmllbmRseVwiLFxuICAgICAgXCJjaHJvbWVfcmVhZGVyX21vZGVcIixcbiAgICAgIFwiY2xhc3NfXCIsXG4gICAgICBcImNsZWFyXCIsXG4gICAgICBcImNsZWFyX2FsbFwiLFxuICAgICAgXCJjbG9zZVwiLFxuICAgICAgXCJjbG9zZWRfY2FwdGlvblwiLFxuICAgICAgXCJjbG91ZFwiLFxuICAgICAgXCJjbG91ZF9jaXJjbGVcIixcbiAgICAgIFwiY2xvdWRfZG9uZVwiLFxuICAgICAgXCJjbG91ZF9kb3dubG9hZFwiLFxuICAgICAgXCJjbG91ZF9vZmZcIixcbiAgICAgIFwiY2xvdWRfcXVldWVcIixcbiAgICAgIFwiY2xvdWRfdXBsb2FkXCIsXG4gICAgICBcImNvZGVcIixcbiAgICAgIFwiY29sbGVjdGlvbnNcIixcbiAgICAgIFwiY29sbGVjdGlvbnNfYm9va21hcmtcIixcbiAgICAgIFwiY29sb3JfbGVuc1wiLFxuICAgICAgXCJjb2xvcml6ZVwiLFxuICAgICAgXCJjb21tZW50XCIsXG4gICAgICBcImNvbXBhcmVcIixcbiAgICAgIFwiY29tcGFyZV9hcnJvd3NcIixcbiAgICAgIFwiY29tcHV0ZXJcIixcbiAgICAgIFwiY29uZmlybWF0aW9uX251bWJlclwiLFxuICAgICAgXCJjb250YWN0X21haWxcIixcbiAgICAgIFwiY29udGFjdF9waG9uZVwiLFxuICAgICAgXCJjb250YWN0c1wiLFxuICAgICAgXCJjb250ZW50X2NvcHlcIixcbiAgICAgIFwiY29udGVudF9jdXRcIixcbiAgICAgIFwiY29udGVudF9wYXN0ZVwiLFxuICAgICAgXCJjb250cm9sX3BvaW50XCIsXG4gICAgICBcImNvbnRyb2xfcG9pbnRfZHVwbGljYXRlXCIsXG4gICAgICBcImNvcHlyaWdodFwiLFxuICAgICAgXCJjcmVhdGVcIixcbiAgICAgIFwiY3JlYXRlX25ld19mb2xkZXJcIixcbiAgICAgIFwiY3JlZGl0X2NhcmRcIixcbiAgICAgIFwiY3JvcFwiLFxuICAgICAgXCJjcm9wXzE2XzlcIixcbiAgICAgIFwiY3JvcF8zXzJcIixcbiAgICAgIFwiY3JvcF81XzRcIixcbiAgICAgIFwiY3JvcF83XzVcIixcbiAgICAgIFwiY3JvcF9kaW5cIixcbiAgICAgIFwiY3JvcF9mcmVlXCIsXG4gICAgICBcImNyb3BfbGFuZHNjYXBlXCIsXG4gICAgICBcImNyb3Bfb3JpZ2luYWxcIixcbiAgICAgIFwiY3JvcF9wb3J0cmFpdFwiLFxuICAgICAgXCJjcm9wX3JvdGF0ZVwiLFxuICAgICAgXCJjcm9wX3NxdWFyZVwiLFxuICAgICAgXCJkYXNoYm9hcmRcIixcbiAgICAgIFwiZGF0YV91c2FnZVwiLFxuICAgICAgXCJkYXRlX3JhbmdlXCIsXG4gICAgICBcImRlaGF6ZVwiLFxuICAgICAgXCJkZWxldGVcIixcbiAgICAgIFwiZGVsZXRlX2ZvcmV2ZXJcIixcbiAgICAgIFwiZGVsZXRlX291dGxpbmVcIixcbiAgICAgIFwiZGVsZXRlX3N3ZWVwXCIsXG4gICAgICBcImRlcGFydHVyZV9ib2FyZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiLFxuICAgICAgXCJkZXNrdG9wX21hY1wiLFxuICAgICAgXCJkZXNrdG9wX3dpbmRvd3NcIixcbiAgICAgIFwiZGV0YWlsc1wiLFxuICAgICAgXCJkZXZlbG9wZXJfYm9hcmRcIixcbiAgICAgIFwiZGV2ZWxvcGVyX21vZGVcIixcbiAgICAgIFwiZGV2aWNlX2h1YlwiLFxuICAgICAgXCJkZXZpY2VfdW5rbm93blwiLFxuICAgICAgXCJkZXZpY2VzXCIsXG4gICAgICBcImRldmljZXNfb3RoZXJcIixcbiAgICAgIFwiZGlhbGVyX3NpcFwiLFxuICAgICAgXCJkaWFscGFkXCIsXG4gICAgICBcImRpcmVjdGlvbnNcIixcbiAgICAgIFwiZGlyZWN0aW9uc19iaWtlXCIsXG4gICAgICBcImRpcmVjdGlvbnNfYm9hdFwiLFxuICAgICAgXCJkaXJlY3Rpb25zX2J1c1wiLFxuICAgICAgXCJkaXJlY3Rpb25zX2NhclwiLFxuICAgICAgXCJkaXJlY3Rpb25zX3JhaWx3YXlcIixcbiAgICAgIFwiZGlyZWN0aW9uc19ydW5cIixcbiAgICAgIFwiZGlyZWN0aW9uc19zdWJ3YXlcIixcbiAgICAgIFwiZGlyZWN0aW9uc190cmFuc2l0XCIsXG4gICAgICBcImRpcmVjdGlvbnNfd2Fsa1wiLFxuICAgICAgXCJkaXNjX2Z1bGxcIixcbiAgICAgIFwiZG5zXCIsXG4gICAgICBcImRvX25vdF9kaXN0dXJiXCIsXG4gICAgICBcImRvX25vdF9kaXN0dXJiX2FsdFwiLFxuICAgICAgXCJkb19ub3RfZGlzdHVyYl9vZmZcIixcbiAgICAgIFwiZG9fbm90X2Rpc3R1cmJfb25cIixcbiAgICAgIFwiZG9ja1wiLFxuICAgICAgXCJkb21haW5cIixcbiAgICAgIFwiZG9uZVwiLFxuICAgICAgXCJkb25lX2FsbFwiLFxuICAgICAgXCJkb25lX291dGxpbmVcIixcbiAgICAgIFwiZG9udXRfbGFyZ2VcIixcbiAgICAgIFwiZG9udXRfc21hbGxcIixcbiAgICAgIFwiZHJhZnRzXCIsXG4gICAgICBcImRyYWdfaGFuZGxlXCIsXG4gICAgICBcImRyaXZlX2V0YVwiLFxuICAgICAgXCJkdnJcIixcbiAgICAgIFwiZWRpdFwiLFxuICAgICAgXCJlZGl0X2F0dHJpYnV0ZXNcIixcbiAgICAgIFwiZWRpdF9sb2NhdGlvblwiLFxuICAgICAgXCJlamVjdFwiLFxuICAgICAgXCJlbWFpbFwiLFxuICAgICAgXCJlbmhhbmNlZF9lbmNyeXB0aW9uXCIsXG4gICAgICBcImVxdWFsaXplclwiLFxuICAgICAgXCJlcnJvclwiLFxuICAgICAgXCJlcnJvcl9vdXRsaW5lXCIsXG4gICAgICBcImV1cm9fc3ltYm9sXCIsXG4gICAgICBcImV2X3N0YXRpb25cIixcbiAgICAgIFwiZXZlbnRcIixcbiAgICAgIFwiZXZlbnRfYXZhaWxhYmxlXCIsXG4gICAgICBcImV2ZW50X2J1c3lcIixcbiAgICAgIFwiZXZlbnRfbm90ZVwiLFxuICAgICAgXCJldmVudF9zZWF0XCIsXG4gICAgICBcImV4aXRfdG9fYXBwXCIsXG4gICAgICBcImV4cGFuZF9sZXNzXCIsXG4gICAgICBcImV4cGFuZF9tb3JlXCIsXG4gICAgICBcImV4cGxpY2l0XCIsXG4gICAgICBcImV4cGxvcmVcIixcbiAgICAgIFwiZXhwb3N1cmVcIixcbiAgICAgIFwiZXhwb3N1cmVfbmVnXzFcIixcbiAgICAgIFwiZXhwb3N1cmVfbmVnXzJcIixcbiAgICAgIFwiZXhwb3N1cmVfcGx1c18xXCIsXG4gICAgICBcImV4cG9zdXJlX3BsdXNfMlwiLFxuICAgICAgXCJleHBvc3VyZV96ZXJvXCIsXG4gICAgICBcInRocmVlZF9yb3RhdGlvblwiLFxuICAgICAgXCJmb3VyX2tcIixcbiAgICAgIFwiYWNfdW5pdFwiLFxuICAgICAgXCJhY2Nlc3NfYWxhcm1cIixcbiAgICAgIFwiYWNjZXNzX2FsYXJtc1wiLFxuICAgICAgXCJhY2Nlc3NfdGltZVwiLFxuICAgICAgXCJhY2Nlc3NpYmlsaXR5XCIsXG4gICAgICBcImFjY2Vzc2liaWxpdHlfbmV3XCIsXG4gICAgICBcImFjY2Vzc2libGVcIixcbiAgICAgIFwiYWNjZXNzaWJsZV9mb3J3YXJkXCIsXG4gICAgICBcImFjY291bnRfYmFsYW5jZVwiLFxuICAgICAgXCJhY2NvdW50X2JhbGFuY2Vfd2FsbGV0XCIsXG4gICAgICBcImFjY291bnRfYm94XCIsXG4gICAgICBcImFjY291bnRfY2lyY2xlXCIsXG4gICAgICBcImFkYlwiLFxuICAgICAgXCJhZGRcIixcbiAgICAgIFwiYWRkX2FfcGhvdG9cIixcbiAgICAgIFwiYWRkX2FsYXJtXCIsXG4gICAgICBcImFkZF9hbGVydFwiLFxuICAgICAgXCJhZGRfYm94XCIsXG4gICAgICBcImFkZF9jYWxsXCIsXG4gICAgICBcImFkZF9jaXJjbGVcIixcbiAgICAgIFwiYWRkX2NpcmNsZV9vdXRsaW5lXCIsXG4gICAgICBcImFkZF9jb21tZW50XCIsXG4gICAgICBcImFkZF9sb2NhdGlvblwiLFxuICAgICAgXCJhZGRfcGhvdG9fYWx0ZXJuYXRlXCIsXG4gICAgICBcImFkZF9zaG9wcGluZ19jYXJ0XCIsXG4gICAgICBcImFkZF90b19ob21lX3NjcmVlblwiLFxuICAgICAgXCJhZGRfdG9fcGhvdG9zXCIsXG4gICAgICBcImFkZF90b19xdWV1ZVwiLFxuICAgICAgXCJhZGp1c3RcIixcbiAgICAgIFwiYWlybGluZV9zZWF0X2ZsYXRcIixcbiAgICAgIFwiYWlybGluZV9zZWF0X2ZsYXRfYW5nbGVkXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9pbmRpdmlkdWFsX3N1aXRlXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9sZWdyb29tX2V4dHJhXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9sZWdyb29tX25vcm1hbFwiLFxuICAgICAgXCJhaXJsaW5lX3NlYXRfbGVncm9vbV9yZWR1Y2VkXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9yZWNsaW5lX2V4dHJhXCIsXG4gICAgICBcImFpcmxpbmVfc2VhdF9yZWNsaW5lX25vcm1hbFwiLFxuICAgICAgXCJhaXJwbGFuZW1vZGVfYWN0aXZlXCIsXG4gICAgICBcImFpcnBsYW5lbW9kZV9pbmFjdGl2ZVwiLFxuICAgICAgXCJhaXJwbGF5XCIsXG4gICAgICBcImFpcnBvcnRfc2h1dHRsZVwiLFxuICAgICAgXCJhbGFybVwiLFxuICAgICAgXCJhbGFybV9hZGRcIixcbiAgICAgIFwiYWxhcm1fb2ZmXCIsXG4gICAgICBcImFsYXJtX29uXCIsXG4gICAgICBcImFsYnVtXCIsXG4gICAgICBcImFsbF9pbmNsdXNpdmVcIixcbiAgICAgIFwiYWxsX291dFwiLFxuICAgICAgXCJhbHRlcm5hdGVfZW1haWxcIixcbiAgICAgIFwiYW5kcm9pZFwiLFxuICAgICAgXCJhbm5vdW5jZW1lbnRcIixcbiAgICAgIFwiYXBwc1wiLFxuICAgICAgXCJhcmNoaXZlXCIsXG4gICAgICBcImFycm93X2JhY2tcIixcbiAgICAgIFwiYXJyb3dfYmFja19pb3NcIixcbiAgICAgIFwiYXJyb3dfZG93bndhcmRcIixcbiAgICAgIFwiYXJyb3dfZHJvcF9kb3duXCIsXG4gICAgICBcImFycm93X2Ryb3BfZG93bl9jaXJjbGVcIixcbiAgICAgIFwiYXJyb3dfZHJvcF91cFwiLFxuICAgICAgXCJhcnJvd19mb3J3YXJkXCIsXG4gICAgICBcImFycm93X2ZvcndhcmRfaW9zXCIsXG4gICAgICBcImFycm93X2xlZnRcIixcbiAgICAgIFwiYXJyb3dfcmlnaHRcIixcbiAgICAgIFwiYXJyb3dfdXB3YXJkXCIsXG4gICAgICBcImFydF90cmFja1wiLFxuICAgICAgXCJhc3BlY3RfcmF0aW9cIixcbiAgICAgIFwiYXNzZXNzbWVudFwiLFxuICAgICAgXCJhc3NpZ25tZW50XCIsXG4gICAgICBcImFzc2lnbm1lbnRfaW5kXCIsXG4gICAgICBcImFzc2lnbm1lbnRfbGF0ZVwiLFxuICAgICAgXCJhc3NpZ25tZW50X3JldHVyblwiLFxuICAgICAgXCJhc3NpZ25tZW50X3JldHVybmVkXCIsXG4gICAgICBcImFzc2lnbm1lbnRfdHVybmVkX2luXCIsXG4gICAgICBcImFzc2lzdGFudFwiLFxuICAgICAgXCJhc3Npc3RhbnRfcGhvdG9cIixcbiAgICAgIFwiYXRtXCIsXG4gICAgICBcImF0dGFjaF9maWxlXCIsXG4gICAgICBcImF0dGFjaF9tb25leVwiLFxuICAgICAgXCJhdHRhY2htZW50XCIsXG4gICAgICBcImF1ZGlvdHJhY2tcIixcbiAgICAgIFwiYXV0b3JlbmV3XCIsXG4gICAgICBcImF2X3RpbWVyXCIsXG4gICAgICBcImJhY2tzcGFjZVwiLFxuICAgICAgXCJiYWNrdXBcIixcbiAgICAgIFwiYmF0dGVyeV9hbGVydFwiLFxuICAgICAgXCJiYXR0ZXJ5X2NoYXJnaW5nX2Z1bGxcIixcbiAgICAgIFwiYmF0dGVyeV9mdWxsXCIsXG4gICAgICBcImJhdHRlcnlfc3RkXCIsXG4gICAgICBcImJhdHRlcnlfdW5rbm93blwiLFxuICAgICAgXCJiZWFjaF9hY2Nlc3NcIixcbiAgICAgIFwiYmVlbmhlcmVcIixcbiAgICAgIFwiYmxvY2tcIixcbiAgICAgIFwiYmx1ZXRvb3RoXCIsXG4gICAgICBcImJsdWV0b290aF9hdWRpb1wiLFxuICAgICAgXCJibHVldG9vdGhfY29ubmVjdGVkXCIsXG4gICAgICBcImJsdWV0b290aF9kaXNhYmxlZFwiLFxuICAgICAgXCJibHVldG9vdGhfc2VhcmNoaW5nXCIsXG4gICAgICBcImJsdXJfY2lyY3VsYXJcIixcbiAgICAgIFwiYmx1cl9saW5lYXJcIixcbiAgICAgIFwiYmx1cl9vZmZcIixcbiAgICAgIFwiYmx1cl9vblwiLFxuICAgICAgXCJib29rXCIsXG4gICAgICBcImJvb2ttYXJrXCIsXG4gICAgICBcImJvb2ttYXJrX2JvcmRlclwiLFxuICAgICAgXCJib3JkZXJfYWxsXCIsXG4gICAgICBcImJvcmRlcl9ib3R0b21cIixcbiAgICAgIFwiYm9yZGVyX2NsZWFyXCIsXG4gICAgICBcImJvcmRlcl9jb2xvclwiLFxuICAgICAgXCJib3JkZXJfaG9yaXpvbnRhbFwiLFxuICAgICAgXCJib3JkZXJfaW5uZXJcIixcbiAgICAgIFwiYm9yZGVyX2xlZnRcIixcbiAgICAgIFwiYm9yZGVyX291dGVyXCIsXG4gICAgICBcImJvcmRlcl9yaWdodFwiLFxuICAgICAgXCJib3JkZXJfc3R5bGVcIixcbiAgICAgIFwiYm9yZGVyX3RvcFwiLFxuICAgICAgXCJib3JkZXJfdmVydGljYWxcIixcbiAgICAgIFwiYnJhbmRpbmdfd2F0ZXJtYXJrXCIsXG4gICAgICBcImJyaWdodG5lc3NfMVwiLFxuICAgICAgXCJicmlnaHRuZXNzXzJcIixcbiAgICAgIFwiYnJpZ2h0bmVzc18zXCIsXG4gICAgICBcImJyaWdodG5lc3NfNFwiLFxuICAgICAgXCJicmlnaHRuZXNzXzVcIixcbiAgICAgIFwiYnJpZ2h0bmVzc182XCIsXG4gICAgICBcImJyaWdodG5lc3NfN1wiLFxuICAgICAgXCJicmlnaHRuZXNzX2F1dG9cIixcbiAgICAgIFwiYnJpZ2h0bmVzc19oaWdoXCIsXG4gICAgICBcImJyaWdodG5lc3NfbG93XCIsXG4gICAgICBcImJyaWdodG5lc3NfbWVkaXVtXCIsXG4gICAgICBcImJyb2tlbl9pbWFnZVwiLFxuICAgICAgXCJicnVzaFwiLFxuICAgICAgXCJidWJibGVfY2hhcnRcIixcbiAgICAgIFwiYnVnX3JlcG9ydFwiLFxuICAgICAgXCJidWlsZFwiLFxuICAgICAgXCJidXJzdF9tb2RlXCIsXG4gICAgICBcImJ1c2luZXNzXCIsXG4gICAgICBcImJ1c2luZXNzX2NlbnRlclwiLFxuICAgICAgXCJjYWNoZWRcIixcbiAgICAgIFwiY2FrZVwiLFxuICAgICAgXCJjYWxlbmRhcl90b2RheVwiLFxuICAgICAgXCJjYWxlbmRhcl92aWV3X2RheVwiLFxuICAgICAgXCJjYWxsXCIsXG4gICAgICBcImNhbGxfZW5kXCIsXG4gICAgICBcImNhbGxfbWFkZVwiLFxuICAgICAgXCJjYWxsX21lcmdlXCIsXG4gICAgICBcImNhbGxfbWlzc2VkXCIsXG4gICAgICBcImNhbGxfbWlzc2VkX291dGdvaW5nXCIsXG4gICAgICBcImNhbGxfcmVjZWl2ZWRcIixcbiAgICAgIFwiY2FsbF9zcGxpdFwiLFxuICAgICAgXCJjYWxsX3RvX2FjdGlvblwiLFxuICAgICAgXCJjYW1lcmFcIixcbiAgICAgIFwiY2FtZXJhX2FsdFwiLFxuICAgICAgXCJjYW1lcmFfZW5oYW5jZVwiLFxuICAgICAgXCJjYW1lcmFfZnJvbnRcIixcbiAgICAgIFwiY2FtZXJhX3JlYXJcIixcbiAgICAgIFwiY2FtZXJhX3JvbGxcIixcbiAgICAgIFwiY2FuY2VsXCIsXG4gICAgICBcImNhcmRfZ2lmdGNhcmRcIixcbiAgICAgIFwiY2FyZF9tZW1iZXJzaGlwXCIsXG4gICAgICBcImNhcmRfdHJhdmVsXCIsXG4gICAgICBcImNhc2lub1wiLFxuICAgICAgXCJjYXN0XCIsXG4gICAgICBcImNhc3RfY29ubmVjdGVkXCIsXG4gICAgICBcImNhdGVnb3J5XCIsXG4gICAgICBcImNlbnRlcl9mb2N1c19zdHJvbmdcIixcbiAgICAgIFwiY2VudGVyX2ZvY3VzX3dlYWtcIixcbiAgICAgIFwiY2hhbmdlX2hpc3RvcnlcIixcbiAgICAgIFwiY2hhdFwiLFxuICAgICAgXCJjaGF0X2J1YmJsZVwiLFxuICAgICAgXCJjaGF0X2J1YmJsZV9vdXRsaW5lXCIsXG4gICAgICBcImNoZWNrXCIsXG4gICAgICBcImNoZWNrX2JveFwiLFxuICAgICAgXCJjaGVja19ib3hfb3V0bGluZV9ibGFua1wiLFxuICAgICAgXCJjaGVja19jaXJjbGVcIixcbiAgICAgIFwiY2hlY2tfY2lyY2xlX291dGxpbmVcIixcbiAgICAgIFwiY2hldnJvbl9sZWZ0XCIsXG4gICAgICBcImNoZXZyb25fcmlnaHRcIixcbiAgICAgIFwiY2hpbGRfY2FyZVwiLFxuICAgICAgXCJjaGlsZF9mcmllbmRseVwiLFxuICAgICAgXCJjaHJvbWVfcmVhZGVyX21vZGVcIixcbiAgICAgIFwiY2xhc3NfXCIsXG4gICAgICBcImNsZWFyXCIsXG4gICAgICBcImNsZWFyX2FsbFwiLFxuICAgICAgXCJjbG9zZVwiLFxuICAgICAgXCJjbG9zZWRfY2FwdGlvblwiLFxuICAgICAgXCJjbG91ZFwiLFxuICAgICAgXCJjbG91ZF9jaXJjbGVcIixcbiAgICAgIFwiY2xvdWRfZG9uZVwiLFxuICAgICAgXCJjbG91ZF9kb3dubG9hZFwiLFxuICAgICAgXCJjbG91ZF9vZmZcIixcbiAgICAgIFwiY2xvdWRfcXVldWVcIixcbiAgICAgIFwiY2xvdWRfdXBsb2FkXCIsXG4gICAgICBcImNvZGVcIixcbiAgICAgIFwiY29sbGVjdGlvbnNcIixcbiAgICAgIFwiY29sbGVjdGlvbnNfYm9va21hcmtcIixcbiAgICAgIFwiY29sb3JfbGVuc1wiLFxuICAgICAgXCJjb2xvcml6ZVwiLFxuICAgICAgXCJjb21tZW50XCIsXG4gICAgICBcImNvbXBhcmVcIixcbiAgICAgIFwiY29tcGFyZV9hcnJvd3NcIixcbiAgICAgIFwiY29tcHV0ZXJcIixcbiAgICAgIFwiY29uZmlybWF0aW9uX251bWJlclwiLFxuICAgICAgXCJjb250YWN0X21haWxcIixcbiAgICAgIFwiY29udGFjdF9waG9uZVwiLFxuICAgICAgXCJjb250YWN0c1wiLFxuICAgICAgXCJjb250ZW50X2NvcHlcIixcbiAgICAgIFwiY29udGVudF9jdXRcIixcbiAgICAgIFwiY29udGVudF9wYXN0ZVwiLFxuICAgICAgXCJjb250cm9sX3BvaW50XCIsXG4gICAgICBcImNvbnRyb2xfcG9pbnRfZHVwbGljYXRlXCIsXG4gICAgICBcImNvcHlyaWdodFwiLFxuICAgICAgXCJjcmVhdGVcIixcbiAgICAgIFwiY3JlYXRlX25ld19mb2xkZXJcIixcbiAgICAgIFwiY3JlZGl0X2NhcmRcIixcbiAgICAgIFwiY3JvcFwiLFxuICAgICAgXCJjcm9wXzE2XzlcIixcbiAgICAgIFwiY3JvcF8zXzJcIixcbiAgICAgIFwiY3JvcF81XzRcIixcbiAgICAgIFwiY3JvcF83XzVcIixcbiAgICAgIFwiY3JvcF9kaW5cIixcbiAgICAgIFwiY3JvcF9mcmVlXCIsXG4gICAgICBcImNyb3BfbGFuZHNjYXBlXCIsXG4gICAgICBcImNyb3Bfb3JpZ2luYWxcIixcbiAgICAgIFwiY3JvcF9wb3J0cmFpdFwiLFxuICAgICAgXCJjcm9wX3JvdGF0ZVwiLFxuICAgICAgXCJjcm9wX3NxdWFyZVwiLFxuICAgICAgXCJkYXNoYm9hcmRcIixcbiAgICAgIFwiZGF0YV91c2FnZVwiLFxuICAgICAgXCJkYXRlX3JhbmdlXCIsXG4gICAgICBcImRlaGF6ZVwiLFxuICAgICAgXCJkZWxldGVcIixcbiAgICAgIFwiZGVsZXRlX2ZvcmV2ZXJcIixcbiAgICAgIFwiZGVsZXRlX291dGxpbmVcIixcbiAgICAgIFwiZGVsZXRlX3N3ZWVwXCIsXG4gICAgICBcImRlcGFydHVyZV9ib2FyZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiLFxuICAgICAgXCJkZXNrdG9wX21hY1wiLFxuICAgICAgXCJkZXNrdG9wX3dpbmRvd3NcIixcbiAgICAgIFwiZGV0YWlsc1wiLFxuICAgICAgXCJkZXZlbG9wZXJfYm9hcmRcIixcbiAgICAgIFwiZGV2ZWxvcGVyX21vZGVcIixcbiAgICAgIFwiZGV2aWNlX2h1YlwiLFxuICAgICAgXCJkZXZpY2VfdW5rbm93blwiLFxuICAgICAgXCJkZXZpY2VzXCIsXG4gICAgICBcImRldmljZXNfb3RoZXJcIixcbiAgICAgIFwiZGlhbGVyX3NpcFwiLFxuICAgICAgXCJkaWFscGFkXCIsXG4gICAgICBcImRpcmVjdGlvbnNcIixcbiAgICAgIFwiZGlyZWN0aW9uc19iaWtlXCIsXG4gICAgICBcImRpcmVjdGlvbnNfYm9hdFwiLFxuICAgICAgXCJkaXJlY3Rpb25zX2J1c1wiLFxuICAgICAgXCJkaXJlY3Rpb25zX2NhclwiLFxuICAgICAgXCJkaXJlY3Rpb25zX3JhaWx3YXlcIixcbiAgICAgIFwiZGlyZWN0aW9uc19ydW5cIixcbiAgICAgIFwiZGlyZWN0aW9uc19zdWJ3YXlcIixcbiAgICAgIFwiZGlyZWN0aW9uc190cmFuc2l0XCIsXG4gICAgICBcImRpcmVjdGlvbnNfd2Fsa1wiLFxuICAgICAgXCJkaXNjX2Z1bGxcIixcbiAgICAgIFwiZG5zXCIsXG4gICAgICBcImRvX25vdF9kaXN0dXJiXCIsXG4gICAgICBcImRvX25vdF9kaXN0dXJiX2FsdFwiLFxuICAgICAgXCJkb19ub3RfZGlzdHVyYl9vZmZcIixcbiAgICAgIFwiZG9fbm90X2Rpc3R1cmJfb25cIixcbiAgICAgIFwiZG9ja1wiLFxuICAgICAgXCJkb21haW5cIixcbiAgICAgIFwiZG9uZVwiLFxuICAgICAgXCJkb25lX2FsbFwiLFxuICAgICAgXCJkb25lX291dGxpbmVcIixcbiAgICAgIFwiZG9udXRfbGFyZ2VcIixcbiAgICAgIFwiZG9udXRfc21hbGxcIixcbiAgICAgIFwiZHJhZnRzXCIsXG4gICAgICBcImRyYWdfaGFuZGxlXCIsXG4gICAgICBcImRyaXZlX2V0YVwiLFxuICAgICAgXCJkdnJcIixcbiAgICAgIFwiZWRpdFwiLFxuICAgICAgXCJlZGl0X2F0dHJpYnV0ZXNcIixcbiAgICAgIFwiZWRpdF9sb2NhdGlvblwiLFxuICAgICAgXCJlamVjdFwiLFxuICAgICAgXCJlbWFpbFwiLFxuICAgICAgXCJlbmhhbmNlZF9lbmNyeXB0aW9uXCIsXG4gICAgICBcImVxdWFsaXplclwiLFxuICAgICAgXCJlcnJvclwiLFxuICAgICAgXCJlcnJvcl9vdXRsaW5lXCIsXG4gICAgICBcImV1cm9fc3ltYm9sXCIsXG4gICAgICBcImV2X3N0YXRpb25cIixcbiAgICAgIFwiZXZlbnRcIixcbiAgICAgIFwiZXZlbnRfYXZhaWxhYmxlXCIsXG4gICAgICBcImV2ZW50X2J1c3lcIixcbiAgICAgIFwiZXZlbnRfbm90ZVwiLFxuICAgICAgXCJldmVudF9zZWF0XCIsXG4gICAgICBcImV4aXRfdG9fYXBwXCIsXG4gICAgICBcImV4cGFuZF9sZXNzXCIsXG4gICAgICBcImV4cGFuZF9tb3JlXCIsXG4gICAgICBcImV4cGxpY2l0XCIsXG4gICAgICBcImV4cGxvcmVcIixcbiAgICAgIFwiZXhwb3N1cmVcIixcbiAgICAgIFwiZXhwb3N1cmVfbmVnXzFcIixcbiAgICAgIFwiZXhwb3N1cmVfbmVnXzJcIixcbiAgICAgIFwiZXhwb3N1cmVfcGx1c18xXCIsXG4gICAgICBcImV4cG9zdXJlX3BsdXNfMlwiLFxuICAgICAgXCJleHBvc3VyZV96ZXJvXCIsXG4gICAgICBcImV4dGVuc2lvblwiLFxuICAgICAgXCJmYWNlXCIsXG4gICAgICBcImZhc3RfZm9yd2FyZFwiLFxuICAgICAgXCJmYXN0X3Jld2luZFwiLFxuICAgICAgXCJmYXN0Zm9vZFwiLFxuICAgICAgXCJmYXZvcml0ZVwiLFxuICAgICAgXCJmYXZvcml0ZV9ib3JkZXJcIixcbiAgICAgIFwiZmVhdHVyZWRfcGxheV9saXN0XCIsXG4gICAgICBcImZlYXR1cmVkX3ZpZGVvXCIsXG4gICAgICBcImZlZWRiYWNrXCIsXG4gICAgICBcImZpYmVyX2R2clwiLFxuICAgICAgXCJmaWJlcl9tYW51YWxfcmVjb3JkXCIsXG4gICAgICBcImZpYmVyX25ld1wiLFxuICAgICAgXCJmaWJlcl9waW5cIixcbiAgICAgIFwiZmliZXJfc21hcnRfcmVjb3JkXCIsXG4gICAgICBcImZpbGVfZG93bmxvYWRcIixcbiAgICAgIFwiZmlsZV91cGxvYWRcIixcbiAgICAgIFwiZmlsdGVyXCIsXG4gICAgICBcImZpbHRlcl8xXCIsXG4gICAgICBcImZpbHRlcl8yXCIsXG4gICAgICBcImZpbHRlcl8zXCIsXG4gICAgICBcImZpbHRlcl80XCIsXG4gICAgICBcImZpbHRlcl81XCIsXG4gICAgICBcImZpbHRlcl82XCIsXG4gICAgICBcImZpbHRlcl83XCIsXG4gICAgICBcImZpbHRlcl84XCIsXG4gICAgICBcImZpbHRlcl85XCIsXG4gICAgICBcImZpbHRlcl85X3BsdXNcIixcbiAgICAgIFwiZmlsdGVyX2JfYW5kX3dcIixcbiAgICAgIFwiZmlsdGVyX2NlbnRlcl9mb2N1c1wiLFxuICAgICAgXCJmaWx0ZXJfZHJhbWFcIixcbiAgICAgIFwiZmlsdGVyX2ZyYW1lc1wiLFxuICAgICAgXCJmaWx0ZXJfaGRyXCIsXG4gICAgICBcImZpbHRlcl9saXN0XCIsXG4gICAgICBcImZpbHRlcl9ub25lXCIsXG4gICAgICBcImZpbHRlcl90aWx0X3NoaWZ0XCIsXG4gICAgICBcImZpbHRlcl92aW50YWdlXCIsXG4gICAgICBcImZpbmRfaW5fcGFnZVwiLFxuICAgICAgXCJmaW5kX3JlcGxhY2VcIixcbiAgICAgIFwiZmluZ2VycHJpbnRcIixcbiAgICAgIFwiZmlyc3RfcGFnZVwiLFxuICAgICAgXCJmaXRuZXNzX2NlbnRlclwiLFxuICAgICAgXCJmbGFnXCIsXG4gICAgICBcImZsYXJlXCIsXG4gICAgICBcImZsYXNoX2F1dG9cIixcbiAgICAgIFwiZmxhc2hfb2ZmXCIsXG4gICAgICBcImZsYXNoX29uXCIsXG4gICAgICBcImZsaWdodFwiLFxuICAgICAgXCJmbGlnaHRfbGFuZFwiLFxuICAgICAgXCJmbGlnaHRfdGFrZW9mZlwiLFxuICAgICAgXCJmbGlwXCIsXG4gICAgICBcImZsaXBfdG9fYmFja1wiLFxuICAgICAgXCJmbGlwX3RvX2Zyb250XCIsXG4gICAgICBcImZvbGRlclwiLFxuICAgICAgXCJmb2xkZXJfb3BlblwiLFxuICAgICAgXCJmb2xkZXJfc2hhcmVkXCIsXG4gICAgICBcImZvbGRlcl9zcGVjaWFsXCIsXG4gICAgICBcImZvbnRfZG93bmxvYWRcIixcbiAgICAgIFwiZm9ybWF0X2FsaWduX2NlbnRlclwiLFxuICAgICAgXCJmb3JtYXRfYWxpZ25fanVzdGlmeVwiLFxuICAgICAgXCJmb3JtYXRfYWxpZ25fbGVmdFwiLFxuICAgICAgXCJmb3JtYXRfYWxpZ25fcmlnaHRcIixcbiAgICAgIFwiZm9ybWF0X2JvbGRcIixcbiAgICAgIFwiZm9ybWF0X2NsZWFyXCIsXG4gICAgICBcImZvcm1hdF9jb2xvcl9maWxsXCIsXG4gICAgICBcImZvcm1hdF9jb2xvcl9yZXNldFwiLFxuICAgICAgXCJmb3JtYXRfY29sb3JfdGV4dFwiLFxuICAgICAgXCJmb3JtYXRfaW5kZW50X2RlY3JlYXNlXCIsXG4gICAgICBcImZvcm1hdF9pbmRlbnRfaW5jcmVhc2VcIixcbiAgICAgIFwiZm9ybWF0X2l0YWxpY1wiLFxuICAgICAgXCJmb3JtYXRfbGluZV9zcGFjaW5nXCIsXG4gICAgICBcImZvcm1hdF9saXN0X2J1bGxldGVkXCIsXG4gICAgICBcImZvcm1hdF9saXN0X251bWJlcmVkXCIsXG4gICAgICBcImZvcm1hdF9saXN0X251bWJlcmVkX3J0bFwiLFxuICAgICAgXCJmb3JtYXRfcGFpbnRcIixcbiAgICAgIFwiZm9ybWF0X3F1b3RlXCIsXG4gICAgICBcImZvcm1hdF9zaGFwZXNcIixcbiAgICAgIFwiZm9ybWF0X3NpemVcIixcbiAgICAgIFwiZm9ybWF0X3N0cmlrZXRocm91Z2hcIixcbiAgICAgIFwiZm9ybWF0X3RleHRkaXJlY3Rpb25fbF90b19yXCIsXG4gICAgICBcImZvcm1hdF90ZXh0ZGlyZWN0aW9uX3JfdG9fbFwiLFxuICAgICAgXCJmb3JtYXRfdW5kZXJsaW5lZFwiLFxuICAgICAgXCJmb3J1bVwiLFxuICAgICAgXCJmb3J3YXJkXCIsXG4gICAgICBcImZvcndhcmRfMTBcIixcbiAgICAgIFwiZm9yd2FyZF8zMFwiLFxuICAgICAgXCJmb3J3YXJkXzVcIixcbiAgICAgIFwiZnJlZV9icmVha2Zhc3RcIixcbiAgICAgIFwiZnVsbHNjcmVlblwiLFxuICAgICAgXCJmdWxsc2NyZWVuX2V4aXRcIixcbiAgICAgIFwiZnVuY3Rpb25zXCIsXG4gICAgICBcImdfdHJhbnNsYXRlXCIsXG4gICAgICBcImdhbWVwYWRcIixcbiAgICAgIFwiZ2FtZXNcIixcbiAgICAgIFwiZ2F2ZWxcIixcbiAgICAgIFwiZ2VzdHVyZVwiLFxuICAgICAgXCI8aVwiLFxuICAgICAgXCJnZXRfYXBwXCIsXG4gICAgICBcImdpZlwiLFxuICAgICAgXCJnb2xmX2NvdXJzZVwiLFxuICAgICAgXCJncHNfZml4ZWRcIixcbiAgICAgIFwiZ3BzX25vdF9maXhlZFwiLFxuICAgICAgXCJncHNfb2ZmXCIsXG4gICAgICBcImdyYWRlXCIsXG4gICAgICBcImdyYWRpZW50XCIsXG4gICAgICBcImdyYWluXCIsXG4gICAgICBcImdyYXBoaWNfZXFcIixcbiAgICAgIFwiZ3JpZF9vZmZcIixcbiAgICAgIFwiZ3JpZF9vblwiLFxuICAgICAgXCJncm91cFwiLFxuICAgICAgXCJncm91cF9hZGRcIixcbiAgICAgIFwiZ3JvdXBfd29ya1wiLFxuICAgICAgXCJoZFwiLFxuICAgICAgXCJoZHJfb2ZmXCIsXG4gICAgICBcImhkcl9vblwiLFxuICAgICAgXCJoZHJfc3Ryb25nXCIsXG4gICAgICBcImhkcl93ZWFrXCIsXG4gICAgICBcImhlYWRzZXRcIixcbiAgICAgIFwiaGVhZHNldF9taWNcIixcbiAgICAgIFwiaGVhZHNldF9vZmZcIixcbiAgICAgIFwiaGVhbGluZ1wiLFxuICAgICAgXCJoZWFyaW5nXCIsXG4gICAgICBcImhlbHBcIixcbiAgICAgIFwiaGVscF9vdXRsaW5lXCIsXG4gICAgICBcImhpZ2hfcXVhbGl0eVwiLFxuICAgICAgXCJoaWdobGlnaHRcIixcbiAgICAgIFwiaGlnaGxpZ2h0X29mZlwiLFxuICAgICAgXCJoaXN0b3J5XCIsXG4gICAgICBcImhvbWVcIixcbiAgICAgIFwiaG90X3R1YlwiLFxuICAgICAgXCJob3RlbFwiLFxuICAgICAgXCJob3VyZ2xhc3NfZW1wdHlcIixcbiAgICAgIFwiaG91cmdsYXNzX2Z1bGxcIixcbiAgICAgIFwiaHR0cFwiLFxuICAgICAgXCJodHRwc1wiLFxuICAgICAgXCJpbWFnZVwiLFxuICAgICAgXCJpbWFnZV9hc3BlY3RfcmF0aW9cIixcbiAgICAgIFwiaW1wb3J0X2NvbnRhY3RzXCIsXG4gICAgICBcImltcG9ydF9leHBvcnRcIixcbiAgICAgIFwiaW1wb3J0YW50X2RldmljZXNcIixcbiAgICAgIFwiaW5ib3hcIixcbiAgICAgIFwiaW5kZXRlcm1pbmF0ZV9jaGVja19ib3hcIixcbiAgICAgIFwiaW5mb1wiLFxuICAgICAgXCJpbmZvX291dGxpbmVcIixcbiAgICAgIFwiaW5wdXRcIixcbiAgICAgIFwiaW5zZXJ0X2NoYXJ0XCIsXG4gICAgICBcImluc2VydF9jb21tZW50XCIsXG4gICAgICBcImluc2VydF9kcml2ZV9maWxlXCIsXG4gICAgICBcImluc2VydF9lbW90aWNvblwiLFxuICAgICAgXCJpbnNlcnRfaW52aXRhdGlvblwiLFxuICAgICAgXCJpbnNlcnRfbGlua1wiLFxuICAgICAgXCJpbnNlcnRfcGhvdG9cIixcbiAgICAgIFwiaW52ZXJ0X2NvbG9yc1wiLFxuICAgICAgXCJpbnZlcnRfY29sb3JzX29mZlwiLFxuICAgICAgXCJpc29cIixcbiAgICAgIFwia2V5Ym9hcmRcIixcbiAgICAgIFwia2V5Ym9hcmRfYXJyb3dfZG93blwiLFxuICAgICAgXCJrZXlib2FyZF9hcnJvd19sZWZ0XCIsXG4gICAgICBcImtleWJvYXJkX2Fycm93X3JpZ2h0XCIsXG4gICAgICBcImtleWJvYXJkX2Fycm93X3VwXCIsXG4gICAgICBcImtleWJvYXJkX2JhY2tzcGFjZVwiLFxuICAgICAgXCJrZXlib2FyZF9jYXBzbG9ja1wiLFxuICAgICAgXCJrZXlib2FyZF9oaWRlXCIsXG4gICAgICBcImtleWJvYXJkX3JldHVyblwiLFxuICAgICAgXCJrZXlib2FyZF90YWJcIixcbiAgICAgIFwia2V5Ym9hcmRfdm9pY2VcIixcbiAgICAgIFwia2l0Y2hlblwiLFxuICAgICAgXCJsYWJlbFwiLFxuICAgICAgXCJsYWJlbF9pbXBvcnRhbnRcIixcbiAgICAgIFwibGFiZWxfb3V0bGluZVwiLFxuICAgICAgXCJsYW5kc2NhcGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIixcbiAgICAgIFwibGFwdG9wXCIsXG4gICAgICBcImxhcHRvcF9jaHJvbWVib29rXCIsXG4gICAgICBcImxhcHRvcF9tYWNcIixcbiAgICAgIFwibGFwdG9wX3dpbmRvd3NcIixcbiAgICAgIFwibGFzdF9wYWdlXCIsXG4gICAgICBcImxhdW5jaFwiLFxuICAgICAgXCJsYXllcnNcIixcbiAgICAgIFwibGF5ZXJzX2NsZWFyXCIsXG4gICAgICBcImxlYWtfYWRkXCIsXG4gICAgICBcImxlYWtfcmVtb3ZlXCIsXG4gICAgICBcImxlbnNcIixcbiAgICAgIFwibGlicmFyeV9hZGRcIixcbiAgICAgIFwibGlicmFyeV9ib29rc1wiLFxuICAgICAgXCJsaWJyYXJ5X211c2ljXCIsXG4gICAgICBcImxpZ2h0YnVsYl9vdXRsaW5lXCIsXG4gICAgICBcImxpbmVfc3R5bGVcIixcbiAgICAgIFwibGluZV93ZWlnaHRcIixcbiAgICAgIFwibGluZWFyX3NjYWxlXCIsXG4gICAgICBcImxpbmtcIixcbiAgICAgIFwibGlua19vZmZcIixcbiAgICAgIFwibGlua2VkX2NhbWVyYVwiLFxuICAgICAgXCJsaXN0XCIsXG4gICAgICBcImxpdmVfaGVscFwiLFxuICAgICAgXCJsaXZlX3R2XCIsXG4gICAgICBcImxvY2FsX2FjdGl2aXR5XCIsXG4gICAgICBcImxvY2FsX2FpcnBvcnRcIixcbiAgICAgIFwibG9jYWxfYXRtXCIsXG4gICAgICBcImxvY2FsX2JhclwiLFxuICAgICAgXCJsb2NhbF9jYWZlXCIsXG4gICAgICBcImxvY2FsX2Nhcl93YXNoXCIsXG4gICAgICBcImxvY2FsX2NvbnZlbmllbmNlX3N0b3JlXCIsXG4gICAgICBcImxvY2FsX2RpbmluZ1wiLFxuICAgICAgXCJsb2NhbF9kcmlua1wiLFxuICAgICAgXCJsb2NhbF9mbG9yaXN0XCIsXG4gICAgICBcImxvY2FsX2dhc19zdGF0aW9uXCIsXG4gICAgICBcImxvY2FsX2dyb2Nlcnlfc3RvcmVcIixcbiAgICAgIFwibG9jYWxfaG9zcGl0YWxcIixcbiAgICAgIFwibG9jYWxfaG90ZWxcIixcbiAgICAgIFwibG9jYWxfbGF1bmRyeV9zZXJ2aWNlXCIsXG4gICAgICBcImxvY2FsX2xpYnJhcnlcIixcbiAgICAgIFwibG9jYWxfbWFsbFwiLFxuICAgICAgXCJsb2NhbF9tb3ZpZXNcIixcbiAgICAgIFwibG9jYWxfb2ZmZXJcIixcbiAgICAgIFwibG9jYWxfcGFya2luZ1wiLFxuICAgICAgXCJsb2NhbF9waGFybWFjeVwiLFxuICAgICAgXCJsb2NhbF9waG9uZVwiLFxuICAgICAgXCJsb2NhbF9waXp6YVwiLFxuICAgICAgXCJsb2NhbF9wbGF5XCIsXG4gICAgICBcImxvY2FsX3Bvc3Rfb2ZmaWNlXCIsXG4gICAgICBcImxvY2FsX3ByaW50c2hvcFwiLFxuICAgICAgXCJsb2NhbF9zZWVcIixcbiAgICAgIFwibG9jYWxfc2hpcHBpbmdcIixcbiAgICAgIFwibG9jYWxfdGF4aVwiLFxuICAgICAgXCJsb2NhdGlvbl9jaXR5XCIsXG4gICAgICBcImxvY2F0aW9uX2Rpc2FibGVkXCIsXG4gICAgICBcImxvY2F0aW9uX29mZlwiLFxuICAgICAgXCJsb2NhdGlvbl9vblwiLFxuICAgICAgXCJsb2NhdGlvbl9zZWFyY2hpbmdcIixcbiAgICAgIFwibG9ja1wiLFxuICAgICAgXCJsb2NrX29wZW5cIixcbiAgICAgIFwibG9ja19vdXRsaW5lXCIsXG4gICAgICBcImxvb2tzXCIsXG4gICAgICBcImxvb2tzXzNcIixcbiAgICAgIFwibG9va3NfNFwiLFxuICAgICAgXCJsb29rc181XCIsXG4gICAgICBcImxvb2tzXzZcIixcbiAgICAgIFwibG9va3Nfb25lXCIsXG4gICAgICBcImxvb2tzX3R3b1wiLFxuICAgICAgXCJsb29wXCIsXG4gICAgICBcImxvdXBlXCIsXG4gICAgICBcImxvd19wcmlvcml0eVwiLFxuICAgICAgXCJsb3lhbHR5XCIsXG4gICAgICBcIm1haWxcIixcbiAgICAgIFwibWFpbF9vdXRsaW5lXCIsXG4gICAgICBcIm1hcFwiLFxuICAgICAgXCJtYXJrdW5yZWFkXCIsXG4gICAgICBcIm1hcmt1bnJlYWRfbWFpbGJveFwiLFxuICAgICAgXCJtYXhpbWl6ZVwiLFxuICAgICAgXCJtZW1vcnlcIixcbiAgICAgIFwibWVudVwiLFxuICAgICAgXCJtZXJnZV90eXBlXCIsXG4gICAgICBcIm1lc3NhZ2VcIixcbiAgICAgIFwibWljXCIsXG4gICAgICBcIm1pY19ub25lXCIsXG4gICAgICBcIm1pY19vZmZcIixcbiAgICAgIFwibWluaW1pemVcIixcbiAgICAgIFwibWlzc2VkX3ZpZGVvX2NhbGxcIixcbiAgICAgIFwibW1zXCIsXG4gICAgICBcIm1vYmlsZV9zY3JlZW5fc2hhcmVcIixcbiAgICAgIFwibW9kZV9jb21tZW50XCIsXG4gICAgICBcIm1vZGVfZWRpdFwiLFxuICAgICAgXCJtb25ldGl6YXRpb25fb25cIixcbiAgICAgIFwibW9uZXlfb2ZmXCIsXG4gICAgICBcIm1vbm9jaHJvbWVfcGhvdG9zXCIsXG4gICAgICBcIm1vb2RcIixcbiAgICAgIFwibW9vZF9iYWRcIixcbiAgICAgIFwibW9yZVwiLFxuICAgICAgXCJtb3JlX2hvcml6XCIsXG4gICAgICBcIm1vcmVfdmVydFwiLFxuICAgICAgXCJtb3RvcmN5Y2xlXCIsXG4gICAgICBcIm1vdXNlXCIsXG4gICAgICBcIm1vdmVfdG9faW5ib3hcIixcbiAgICAgIFwibW92aWVcIixcbiAgICAgIFwibW92aWVfY3JlYXRpb25cIixcbiAgICAgIFwibW92aWVfZmlsdGVyXCIsXG4gICAgICBcIm11bHRpbGluZV9jaGFydFwiLFxuICAgICAgXCJtdXNpY19ub3RlXCIsXG4gICAgICBcIm11c2ljX3ZpZGVvXCIsXG4gICAgICBcIm15X2xvY2F0aW9uXCIsXG4gICAgICBcIm5hdHVyZVwiLFxuICAgICAgXCJuYXR1cmVfcGVvcGxlXCIsXG4gICAgICBcIm5hdmlnYXRlX2JlZm9yZVwiLFxuICAgICAgXCJuYXZpZ2F0ZV9uZXh0XCIsXG4gICAgICBcIm5hdmlnYXRpb25cIixcbiAgICAgIFwibmVhcl9tZVwiLFxuICAgICAgXCJuZXR3b3JrX2NlbGxcIixcbiAgICAgIFwibmV0d29ya19jaGVja1wiLFxuICAgICAgXCJuZXR3b3JrX2xvY2tlZFwiLFxuICAgICAgXCJuZXR3b3JrX3dpZmlcIixcbiAgICAgIFwibmV3X3JlbGVhc2VzXCIsXG4gICAgICBcIm5leHRfd2Vla1wiLFxuICAgICAgXCJuZmNcIixcbiAgICAgIFwibm9fZW5jcnlwdGlvblwiLFxuICAgICAgXCJub19zaW1cIixcbiAgICAgIFwibm90X2ludGVyZXN0ZWRcIixcbiAgICAgIFwibm90X2xpc3RlZF9sb2NhdGlvblwiLFxuICAgICAgXCJub3RlXCIsXG4gICAgICBcIm5vdGVfYWRkXCIsXG4gICAgICBcIm5vdGlmaWNhdGlvbl9pbXBvcnRhbnRcIixcbiAgICAgIFwibm90aWZpY2F0aW9uc1wiLFxuICAgICAgXCJub3RpZmljYXRpb25zX2FjdGl2ZVwiLFxuICAgICAgXCJub3RpZmljYXRpb25zX25vbmVcIixcbiAgICAgIFwibm90aWZpY2F0aW9uc19vZmZcIixcbiAgICAgIFwibm90aWZpY2F0aW9uc19wYXVzZWRcIixcbiAgICAgIFwib2ZmbGluZV9ib2x0XCIsXG4gICAgICBcIm9mZmxpbmVfcGluXCIsXG4gICAgICBcIm9uZGVtYW5kX3ZpZGVvXCIsXG4gICAgICBcIm9wYWNpdHlcIixcbiAgICAgIFwib3Blbl9pbl9icm93c2VyXCIsXG4gICAgICBcIm9wZW5faW5fbmV3XCIsXG4gICAgICBcIm9wZW5fd2l0aFwiLFxuICAgICAgXCJvdXRsaW5lZF9mbGFnXCIsXG4gICAgICBcInBhZ2VzXCIsXG4gICAgICBcInBhZ2V2aWV3XCIsXG4gICAgICBcInBhbGV0dGVcIixcbiAgICAgIFwicGFuX3Rvb2xcIixcbiAgICAgIFwicGFub3JhbWFcIixcbiAgICAgIFwicGFub3JhbWFfZmlzaF9leWVcIixcbiAgICAgIFwicGFub3JhbWFfaG9yaXpvbnRhbFwiLFxuICAgICAgXCJwYW5vcmFtYV92ZXJ0aWNhbFwiLFxuICAgICAgXCJwYW5vcmFtYV93aWRlX2FuZ2xlXCIsXG4gICAgICBcInBhcnR5X21vZGVcIixcbiAgICAgIFwicGF1c2VcIixcbiAgICAgIFwicGF1c2VfY2lyY2xlX2ZpbGxlZFwiLFxuICAgICAgXCJwYXVzZV9jaXJjbGVfb3V0bGluZVwiLFxuICAgICAgXCJwYXltZW50XCIsXG4gICAgICBcInBlb3BsZVwiLFxuICAgICAgXCJwZW9wbGVfb3V0bGluZVwiLFxuICAgICAgXCJwZXJtX2NhbWVyYV9taWNcIixcbiAgICAgIFwicGVybV9jb250YWN0X2NhbGVuZGFyXCIsXG4gICAgICBcInBlcm1fZGF0YV9zZXR0aW5nXCIsXG4gICAgICBcInBlcm1fZGV2aWNlX2luZm9ybWF0aW9uXCIsXG4gICAgICBcInBlcm1faWRlbnRpdHlcIixcbiAgICAgIFwicGVybV9tZWRpYVwiLFxuICAgICAgXCJwZXJtX3Bob25lX21zZ1wiLFxuICAgICAgXCJwZXJtX3NjYW5fd2lmaVwiLFxuICAgICAgXCJwZXJzb25cIixcbiAgICAgIFwicGVyc29uX2FkZFwiLFxuICAgICAgXCJwZXJzb25fb3V0bGluZVwiLFxuICAgICAgXCJwZXJzb25fcGluXCIsXG4gICAgICBcInBlcnNvbl9waW5fY2lyY2xlXCIsXG4gICAgICBcInBlcnNvbmFsX3ZpZGVvXCIsXG4gICAgICBcInBldHNcIixcbiAgICAgIFwicGhvbmVcIixcbiAgICAgIFwicGhvbmVfYW5kcm9pZFwiLFxuICAgICAgXCJwaG9uZV9ibHVldG9vdGhfc3BlYWtlclwiLFxuICAgICAgXCJwaG9uZV9mb3J3YXJkZWRcIixcbiAgICAgIFwicGhvbmVfaW5fdGFsa1wiLFxuICAgICAgXCJwaG9uZV9pcGhvbmVcIixcbiAgICAgIFwicGhvbmVfbG9ja2VkXCIsXG4gICAgICBcInBob25lX21pc3NlZFwiLFxuICAgICAgXCJwaG9uZV9wYXVzZWRcIixcbiAgICAgIFwicGhvbmVsaW5rXCIsXG4gICAgICBcInBob25lbGlua19lcmFzZVwiLFxuICAgICAgXCJwaG9uZWxpbmtfbG9ja1wiLFxuICAgICAgXCJwaG9uZWxpbmtfb2ZmXCIsXG4gICAgICBcInBob25lbGlua19yaW5nXCIsXG4gICAgICBcInBob25lbGlua19zZXR1cFwiLFxuICAgICAgXCJwaG90b1wiLFxuICAgICAgXCJwaG90b19hbGJ1bVwiLFxuICAgICAgXCJwaG90b19jYW1lcmFcIixcbiAgICAgIFwicGhvdG9fZmlsdGVyXCIsXG4gICAgICBcInBob3RvX2xpYnJhcnlcIixcbiAgICAgIFwicGhvdG9fc2l6ZV9zZWxlY3RfYWN0dWFsXCIsXG4gICAgICBcInBob3RvX3NpemVfc2VsZWN0X2xhcmdlXCIsXG4gICAgICBcInBob3RvX3NpemVfc2VsZWN0X3NtYWxsXCIsXG4gICAgICBcInBpY3R1cmVfYXNfcGRmXCIsXG4gICAgICBcInBpY3R1cmVfaW5fcGljdHVyZVwiLFxuICAgICAgXCJwaWN0dXJlX2luX3BpY3R1cmVfYWx0XCIsXG4gICAgICBcInBpZV9jaGFydFwiLFxuICAgICAgXCJwaWVfY2hhcnRfb3V0bGluZWRcIixcbiAgICAgIFwicGluX2Ryb3BcIixcbiAgICAgIFwicGxhY2VcIixcbiAgICAgIFwicGxheV9hcnJvd1wiLFxuICAgICAgXCJwbGF5X2NpcmNsZV9maWxsZWRcIixcbiAgICAgIFwicGxheV9jaXJjbGVfb3V0bGluZVwiLFxuICAgICAgXCJwbGF5X2Zvcl93b3JrXCIsXG4gICAgICBcInBsYXlsaXN0X2FkZFwiLFxuICAgICAgXCJwbGF5bGlzdF9hZGRfY2hlY2tcIixcbiAgICAgIFwicGxheWxpc3RfcGxheVwiLFxuICAgICAgXCJwbHVzX29uZVwiLFxuICAgICAgXCJwb2xsXCIsXG4gICAgICBcInBvbHltZXJcIixcbiAgICAgIFwicG9vbFwiLFxuICAgICAgXCJwb3J0YWJsZV93aWZpX29mZlwiLFxuICAgICAgXCJwb3J0cmFpdFwiLFxuICAgICAgXCJwb3dlclwiLFxuICAgICAgXCJwb3dlcl9pbnB1dFwiLFxuICAgICAgXCJwb3dlcl9zZXR0aW5nc19uZXdcIixcbiAgICAgIFwicHJlZ25hbnRfd29tYW5cIixcbiAgICAgIFwicHJlc2VudF90b19hbGxcIixcbiAgICAgIFwicHJpbnRcIixcbiAgICAgIFwicHJpb3JpdHlfaGlnaFwiLFxuICAgICAgXCJwdWJsaWNcIixcbiAgICAgIFwicHVibGlzaFwiLFxuICAgICAgXCJxdWVyeV9idWlsZGVyXCIsXG4gICAgICBcInF1ZXN0aW9uX2Fuc3dlclwiLFxuICAgICAgXCJxdWV1ZVwiLFxuICAgICAgXCJxdWV1ZV9tdXNpY1wiLFxuICAgICAgXCJxdWV1ZV9wbGF5X25leHRcIixcbiAgICAgIFwicmFkaW9cIixcbiAgICAgIFwicmFkaW9fYnV0dG9uX2NoZWNrZWRcIixcbiAgICAgIFwicmFkaW9fYnV0dG9uX3VuY2hlY2tlZFwiLFxuICAgICAgXCJyYXRlX3Jldmlld1wiLFxuICAgICAgXCJyZWNlaXB0XCIsXG4gICAgICBcInJlY2VudF9hY3RvcnNcIixcbiAgICAgIFwicmVjb3JkX3ZvaWNlX292ZXJcIixcbiAgICAgIFwicmVkZWVtXCIsXG4gICAgICBcInJlZG9cIixcbiAgICAgIFwicmVmcmVzaFwiLFxuICAgICAgXCJyZW1vdmVcIixcbiAgICAgIFwicmVtb3ZlX2NpcmNsZVwiLFxuICAgICAgXCJyZW1vdmVfY2lyY2xlX291dGxpbmVcIixcbiAgICAgIFwicmVtb3ZlX2Zyb21fcXVldWVcIixcbiAgICAgIFwicmVtb3ZlX3JlZF9leWVcIixcbiAgICAgIFwicmVtb3ZlX3Nob3BwaW5nX2NhcnRcIixcbiAgICAgIFwicmVvcmRlclwiLFxuICAgICAgXCJyZXBlYXRcIixcbiAgICAgIFwicmVwZWF0X29uZVwiLFxuICAgICAgXCJyZXBsYXlcIixcbiAgICAgIFwicmVwbGF5XzEwXCIsXG4gICAgICBcInJlcGxheV8zMFwiLFxuICAgICAgXCJyZXBsYXlfNVwiLFxuICAgICAgXCJyZXBseVwiLFxuICAgICAgXCJyZXBseV9hbGxcIixcbiAgICAgIFwicmVwb3J0XCIsXG4gICAgICBcInJlcG9ydF9vZmZcIixcbiAgICAgIFwicmVwb3J0X3Byb2JsZW1cIixcbiAgICAgIFwicmVzdGF1cmFudFwiLFxuICAgICAgXCJyZXN0YXVyYW50X21lbnVcIixcbiAgICAgIFwicmVzdG9yZVwiLFxuICAgICAgXCJyZXN0b3JlX2Zyb21fdHJhc2hcIixcbiAgICAgIFwicmVzdG9yZV9wYWdlXCIsXG4gICAgICBcInJpbmdfdm9sdW1lXCIsXG4gICAgICBcInJvb21cIixcbiAgICAgIFwicm9vbV9zZXJ2aWNlXCIsXG4gICAgICBcInJvdGF0ZV85MF9kZWdyZWVzX2Njd1wiLFxuICAgICAgXCJyb3RhdGVfbGVmdFwiLFxuICAgICAgXCJyb3RhdGVfcmlnaHRcIixcbiAgICAgIFwicm91bmRlZF9jb3JuZXJcIixcbiAgICAgIFwicm91dGVyXCIsXG4gICAgICBcInJvd2luZ1wiLFxuICAgICAgXCJyc3NfZmVlZFwiLFxuICAgICAgXCJydl9ob29rdXBcIixcbiAgICAgIFwic2F0ZWxsaXRlXCIsXG4gICAgICBcInNhdmVcIixcbiAgICAgIFwic2F2ZV9hbHRcIixcbiAgICAgIFwic2Nhbm5lclwiLFxuICAgICAgXCJzY2F0dGVyX3Bsb3RcIixcbiAgICAgIFwic2NoZWR1bGVcIixcbiAgICAgIFwic2Nob29sXCIsXG4gICAgICBcInNjb3JlXCIsXG4gICAgICBcInNjcmVlbl9sb2NrX2xhbmRzY2FwZVwiLFxuICAgICAgXCJzY3JlZW5fbG9ja19wb3J0cmFpdFwiLFxuICAgICAgXCJzY3JlZW5fbG9ja19yb3RhdGlvblwiLFxuICAgICAgXCJzY3JlZW5fcm90YXRpb25cIixcbiAgICAgIFwic2NyZWVuX3NoYXJlXCIsXG4gICAgICBcInNkX2NhcmRcIixcbiAgICAgIFwic2Rfc3RvcmFnZVwiLFxuICAgICAgXCJzZWFyY2hcIixcbiAgICAgIFwic2VjdXJpdHlcIixcbiAgICAgIFwic2VsZWN0X2FsbFwiLFxuICAgICAgXCJzZW5kXCIsXG4gICAgICBcInNlbnRpbWVudF9kaXNzYXRpc2ZpZWRcIixcbiAgICAgIFwic2VudGltZW50X25ldXRyYWxcIixcbiAgICAgIFwic2VudGltZW50X3NhdGlzZmllZFwiLFxuICAgICAgXCJzZW50aW1lbnRfdmVyeV9kaXNzYXRpc2ZpZWRcIixcbiAgICAgIFwic2VudGltZW50X3Zlcnlfc2F0aXNmaWVkXCIsXG4gICAgICBcInNldHRpbmdzXCIsXG4gICAgICBcInNldHRpbmdzX2FwcGxpY2F0aW9uc1wiLFxuICAgICAgXCJzZXR0aW5nc19iYWNrdXBfcmVzdG9yZVwiLFxuICAgICAgXCJzZXR0aW5nc19ibHVldG9vdGhcIixcbiAgICAgIFwic2V0dGluZ3NfYnJpZ2h0bmVzc1wiLFxuICAgICAgXCJzZXR0aW5nc19jZWxsXCIsXG4gICAgICBcInNldHRpbmdzX2V0aGVybmV0XCIsXG4gICAgICBcInNldHRpbmdzX2lucHV0X2FudGVubmFcIixcbiAgICAgIFwic2V0dGluZ3NfaW5wdXRfY29tcG9uZW50XCIsXG4gICAgICBcInNldHRpbmdzX2lucHV0X2NvbXBvc2l0ZVwiLFxuICAgICAgXCJzZXR0aW5nc19pbnB1dF9oZG1pXCIsXG4gICAgICBcInNldHRpbmdzX2lucHV0X3N2aWRlb1wiLFxuICAgICAgXCJzZXR0aW5nc19vdmVyc2NhblwiLFxuICAgICAgXCJzZXR0aW5nc19waG9uZVwiLFxuICAgICAgXCJzZXR0aW5nc19wb3dlclwiLFxuICAgICAgXCJzZXR0aW5nc19yZW1vdGVcIixcbiAgICAgIFwic2V0dGluZ3Nfc3lzdGVtX2RheWRyZWFtXCIsXG4gICAgICBcInNldHRpbmdzX3ZvaWNlXCIsXG4gICAgICBcInNoYXJlXCIsXG4gICAgICBcInNob3BcIixcbiAgICAgIFwic2hvcF90d29cIixcbiAgICAgIFwic2hvcHBpbmdfYmFza2V0XCIsXG4gICAgICBcInNob3BwaW5nX2NhcnRcIixcbiAgICAgIFwic2hvcnRfdGV4dFwiLFxuICAgICAgXCJzaG93X2NoYXJ0XCIsXG4gICAgICBcInNodWZmbGVcIixcbiAgICAgIFwic2h1dHRlcl9zcGVlZFwiLFxuICAgICAgXCJzaWduYWxfY2VsbHVsYXJfNF9iYXJcIixcbiAgICAgIFwic2lnbmFsX2NlbGx1bGFyX2Nvbm5lY3RlZF9ub19pbnRlcm5ldF80X2JhclwiLFxuICAgICAgXCJzaWduYWxfY2VsbHVsYXJfbm9fc2ltXCIsXG4gICAgICBcInNpZ25hbF9jZWxsdWxhcl9udWxsXCIsXG4gICAgICBcInNpZ25hbF9jZWxsdWxhcl9vZmZcIixcbiAgICAgIFwic2lnbmFsX3dpZmlfNF9iYXJcIixcbiAgICAgIFwic2lnbmFsX3dpZmlfNF9iYXJfbG9ja1wiLFxuICAgICAgXCJzaWduYWxfd2lmaV9vZmZcIixcbiAgICAgIFwic2ltX2NhcmRcIixcbiAgICAgIFwic2ltX2NhcmRfYWxlcnRcIixcbiAgICAgIFwic2tpcF9uZXh0XCIsXG4gICAgICBcInNraXBfcHJldmlvdXNcIixcbiAgICAgIFwic2xpZGVzaG93XCIsXG4gICAgICBcInNsb3dfbW90aW9uX3ZpZGVvXCIsXG4gICAgICBcInNtYXJ0cGhvbmVcIixcbiAgICAgIFwic21va2VfZnJlZVwiLFxuICAgICAgXCJzbW9raW5nX3Jvb21zXCIsXG4gICAgICBcInNtc1wiLFxuICAgICAgXCJzbXNfZmFpbGVkXCIsXG4gICAgICBcInNub296ZVwiLFxuICAgICAgXCJzb3J0XCIsXG4gICAgICBcInNvcnRfYnlfYWxwaGFcIixcbiAgICAgIFwic3BhXCIsXG4gICAgICBcInNwYWNlX2JhclwiLFxuICAgICAgXCJzcGVha2VyXCIsXG4gICAgICBcInNwZWFrZXJfZ3JvdXBcIixcbiAgICAgIFwic3BlYWtlcl9ub3Rlc1wiLFxuICAgICAgXCJzcGVha2VyX25vdGVzX29mZlwiLFxuICAgICAgXCJzcGVha2VyX3Bob25lXCIsXG4gICAgICBcInNwZWxsY2hlY2tcIixcbiAgICAgIFwic3RhclwiLFxuICAgICAgXCJzdGFyX2JvcmRlclwiLFxuICAgICAgXCJzdGFyX2hhbGZcIixcbiAgICAgIFwic3RhcnNcIixcbiAgICAgIFwic3RheV9jdXJyZW50X2xhbmRzY2FwZVwiLFxuICAgICAgXCJzdGF5X2N1cnJlbnRfcG9ydHJhaXRcIixcbiAgICAgIFwic3RheV9wcmltYXJ5X2xhbmRzY2FwZVwiLFxuICAgICAgXCJzdGF5X3ByaW1hcnlfcG9ydHJhaXRcIixcbiAgICAgIFwic3RvcFwiLFxuICAgICAgXCJzdG9wX3NjcmVlbl9zaGFyZVwiLFxuICAgICAgXCJzdG9yYWdlXCIsXG4gICAgICBcInN0b3JlXCIsXG4gICAgICBcInN0b3JlX21hbGxfZGlyZWN0b3J5XCIsXG4gICAgICBcInN0cmFpZ2h0ZW5cIixcbiAgICAgIFwic3RyZWV0dmlld1wiLFxuICAgICAgXCJzdHJpa2V0aHJvdWdoX3NcIixcbiAgICAgIFwic3R5bGVcIixcbiAgICAgIFwic3ViZGlyZWN0b3J5X2Fycm93X2xlZnRcIixcbiAgICAgIFwic3ViZGlyZWN0b3J5X2Fycm93X3JpZ2h0XCIsXG4gICAgICBcInN1YmplY3RcIixcbiAgICAgIFwic3Vic2NyaXB0aW9uc1wiLFxuICAgICAgXCJzdWJ0aXRsZXNcIixcbiAgICAgIFwic3Vid2F5XCIsXG4gICAgICBcInN1cGVydmlzZWRfdXNlcl9jaXJjbGVcIixcbiAgICAgIFwic3VwZXJ2aXNvcl9hY2NvdW50XCIsXG4gICAgICBcInN1cnJvdW5kX3NvdW5kXCIsXG4gICAgICBcInN3YXBfY2FsbHNcIixcbiAgICAgIFwic3dhcF9ob3JpelwiLFxuICAgICAgXCJzd2FwX2hvcml6b250YWxfY2lyY2xlXCIsXG4gICAgICBcInN3YXBfdmVydFwiLFxuICAgICAgXCJzd2FwX3ZlcnRpY2FsX2NpcmNsZVwiLFxuICAgICAgXCJzd2l0Y2hfY2FtZXJhXCIsXG4gICAgICBcInN3aXRjaF92aWRlb1wiLFxuICAgICAgXCJzeW5jXCIsXG4gICAgICBcInN5bmNfZGlzYWJsZWRcIixcbiAgICAgIFwic3luY19wcm9ibGVtXCIsXG4gICAgICBcInN5c3RlbV91cGRhdGVcIixcbiAgICAgIFwic3lzdGVtX3VwZGF0ZV9hbHRcIixcbiAgICAgIFwidGFiXCIsXG4gICAgICBcInRhYl91bnNlbGVjdGVkXCIsXG4gICAgICBcInRhYmxlX2NoYXJ0XCIsXG4gICAgICBcInRhYmxldFwiLFxuICAgICAgXCJ0YWJsZXRfYW5kcm9pZFwiLFxuICAgICAgXCJ0YWJsZXRfbWFjXCIsXG4gICAgICBcInRhZ19mYWNlc1wiLFxuICAgICAgXCJ0YXBfYW5kX3BsYXlcIixcbiAgICAgIFwidGVycmFpblwiLFxuICAgICAgXCJ0ZXh0X2ZpZWxkc1wiLFxuICAgICAgXCJ0ZXh0X2Zvcm1hdFwiLFxuICAgICAgXCJ0ZXh0X3JvdGF0ZV91cFwiLFxuICAgICAgXCJ0ZXh0X3JvdGF0ZV92ZXJ0aWNhbFwiLFxuICAgICAgXCJ0ZXh0X3JvdGF0aW9uX2FuZ2xlZG93blwiLFxuICAgICAgXCJ0ZXh0X3JvdGF0aW9uX2FuZ2xldXBcIixcbiAgICAgIFwidGV4dF9yb3RhdGlvbl9kb3duXCIsXG4gICAgICBcInRleHRfcm90YXRpb25fbm9uZVwiLFxuICAgICAgXCJ0ZXh0c21zXCIsXG4gICAgICBcInRleHR1cmVcIixcbiAgICAgIFwidGhlYXRlcnNcIixcbiAgICAgIFwidGh1bWJfZG93blwiLFxuICAgICAgXCJ0aHVtYl91cFwiLFxuICAgICAgXCJ0aHVtYnNfdXBfZG93blwiLFxuICAgICAgXCJ0aW1lX3RvX2xlYXZlXCIsXG4gICAgICBcInRpbWVsYXBzZVwiLFxuICAgICAgXCJ0aW1lbGluZVwiLFxuICAgICAgXCJ0aW1lclwiLFxuICAgICAgXCJ0aW1lcl8xMFwiLFxuICAgICAgXCJ0aW1lcl8zXCIsXG4gICAgICBcInRpbWVyX29mZlwiLFxuICAgICAgXCJ0aXRsZVwiLFxuICAgICAgXCJ0b2NcIixcbiAgICAgIFwidG9kYXlcIixcbiAgICAgIFwidG9sbFwiLFxuICAgICAgXCJ0b25hbGl0eVwiLFxuICAgICAgXCJ0b3VjaF9hcHBcIixcbiAgICAgIFwidG95c1wiLFxuICAgICAgXCJ0cmFja19jaGFuZ2VzXCIsXG4gICAgICBcInRyYWZmaWNcIixcbiAgICAgIFwidHJhaW5cIixcbiAgICAgIFwidHJhbVwiLFxuICAgICAgXCJ0cmFuc2Zlcl93aXRoaW5fYV9zdGF0aW9uXCIsXG4gICAgICBcInRyYW5zZm9ybVwiLFxuICAgICAgXCJ0cmFuc2l0X2VudGVyZXhpdFwiLFxuICAgICAgXCJ0cmFuc2xhdGVcIixcbiAgICAgIFwidHJlbmRpbmdfZG93blwiLFxuICAgICAgXCJ0cmVuZGluZ19mbGF0XCIsXG4gICAgICBcInRyZW5kaW5nX3VwXCIsXG4gICAgICBcInRyaXBfb3JpZ2luXCIsXG4gICAgICBcInR1bmVcIixcbiAgICAgIFwidHVybmVkX2luXCIsXG4gICAgICBcInR1cm5lZF9pbl9ub3RcIixcbiAgICAgIFwidHZcIixcbiAgICAgIFwidW5hcmNoaXZlXCIsXG4gICAgICBcInVuZG9cIixcbiAgICAgIFwidW5mb2xkX2xlc3NcIixcbiAgICAgIFwidW5mb2xkX21vcmVcIixcbiAgICAgIFwidXBkYXRlXCIsXG4gICAgICBcInVzYlwiLFxuICAgICAgXCJ2ZXJpZmllZF91c2VyXCIsXG4gICAgICBcInZlcnRpY2FsX2FsaWduX2JvdHRvbVwiLFxuICAgICAgXCJ2ZXJ0aWNhbF9hbGlnbl9jZW50ZXJcIixcbiAgICAgIFwidmVydGljYWxfYWxpZ25fdG9wXCIsXG4gICAgICBcInZpYnJhdGlvblwiLFxuICAgICAgXCJ2aWRlb19jYWxsXCIsXG4gICAgICBcInZpZGVvX2xhYmVsXCIsXG4gICAgICBcInZpZGVvX2xpYnJhcnlcIixcbiAgICAgIFwidmlkZW9jYW1cIixcbiAgICAgIFwidmlkZW9jYW1fb2ZmXCIsXG4gICAgICBcInZpZGVvZ2FtZV9hc3NldFwiLFxuICAgICAgXCJ2aWV3X2FnZW5kYVwiLFxuICAgICAgXCJ2aWV3X2FycmF5XCIsXG4gICAgICBcInZpZXdfY2Fyb3VzZWxcIixcbiAgICAgIFwidmlld19jb2x1bW5cIixcbiAgICAgIFwidmlld19jb21meVwiLFxuICAgICAgXCJ2aWV3X2NvbXBhY3RcIixcbiAgICAgIFwidmlld19kYXlcIixcbiAgICAgIFwidmlld19oZWFkbGluZVwiLFxuICAgICAgXCJ2aWV3X2xpc3RcIixcbiAgICAgIFwidmlld19tb2R1bGVcIixcbiAgICAgIFwidmlld19xdWlsdFwiLFxuICAgICAgXCJ2aWV3X3N0cmVhbVwiLFxuICAgICAgXCJ2aWV3X3dlZWtcIixcbiAgICAgIFwidmlnbmV0dGVcIixcbiAgICAgIFwidmlzaWJpbGl0eVwiLFxuICAgICAgXCJ2aXNpYmlsaXR5X29mZlwiLFxuICAgICAgXCJ2b2ljZV9jaGF0XCIsXG4gICAgICBcInZvaWNlbWFpbFwiLFxuICAgICAgXCJ2b2x1bWVfZG93blwiLFxuICAgICAgXCJ2b2x1bWVfbXV0ZVwiLFxuICAgICAgXCJ2b2x1bWVfb2ZmXCIsXG4gICAgICBcInZvbHVtZV91cFwiLFxuICAgICAgXCJ2cG5fa2V5XCIsXG4gICAgICBcInZwbl9sb2NrXCIsXG4gICAgICBcIndhbGxwYXBlclwiLFxuICAgICAgXCJ3YXJuaW5nXCIsXG4gICAgICBcIndhdGNoXCIsXG4gICAgICBcIndhdGNoX2xhdGVyXCIsXG4gICAgICBcIndiX2F1dG9cIixcbiAgICAgIFwid2JfY2xvdWR5XCIsXG4gICAgICBcIndiX2luY2FuZGVzY2VudFwiLFxuICAgICAgXCJ3Yl9pcmlkZXNjZW50XCIsXG4gICAgICBcIndiX3N1bm55XCIsXG4gICAgICBcIndjXCIsXG4gICAgICBcIndlYlwiLFxuICAgICAgXCJ3ZWJfYXNzZXRcIixcbiAgICAgIFwid2Vla2VuZFwiLFxuICAgICAgXCJ3aGF0c2hvdFwiLFxuICAgICAgXCJ3aWRnZXRzXCIsXG4gICAgICBcIndpZmlcIixcbiAgICAgIFwid2lmaV9sb2NrXCIsXG4gICAgICBcIndpZmlfdGV0aGVyaW5nXCIsXG4gICAgICBcIndvcmtcIixcbiAgICAgIFwid3JhcF90ZXh0XCIsXG4gICAgICBcInlvdXR1YmVfc2VhcmNoZWRfZm9yXCIsXG4gICAgICBcInpvb21faW5cIixcbiAgICAgIFwiem9vbV9vdXRcIixcbiAgICAgIFwiem9vbV9vdXRfbWFwXCIsXG4gICAgXTtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnSWNvbicsKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IFNjcm9sbGJhcih7XG4gICAgICAgIGNoaWxkOm5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgICAgLi4uaWNvbnMubWFwKCAoaWNvbk5hbWUpPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZW5JY29uVUkoaWNvbk5hbWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdLFxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZUljb24sXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgQm94RGVjb3JhdGlvbixcbiAgQm9yZGVyUmFkaXVzLFxuICBSYWRpdXMsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBDcm9zc0F4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG4gIEZsdXR0ZXJMb2dvLFxufSA9IHJlcXVpcmUoXCIuLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5cbmNsYXNzIFBhZ2VFeGFtcGxlRmx1dHRlckxvZ28gZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcihcIlBhZ2VFeGFtcGxlRmx1dHRlckxvZ29cIik7XG4gIH1cblxuICBidWlsZChjb250ZXh0KXtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRmx1dHRlckxvZ28nLCksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOltcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiRmx1dHRlckxvZ29cIil9KSxcbiAgICAgICAgICBuZXcgRmx1dHRlckxvZ28oKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiRmx1dHRlckxvZ28gU2l6ZVwiKSx9KSxcbiAgICAgICAgICBuZXcgRmx1dHRlckxvZ28oe3NpemU6NjB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiRmx1dHRlckxvZ28gU2l6ZVwiKSx9KSxcbiAgICAgICAgICBuZXcgRmx1dHRlckxvZ28oe3NpemU6MTAwfSksXG4gICAgICAgICAgLy9uZXcgRmx1dHRlckxvZ28oe3NpemU6MTAwLCBjb2xvcnM6Q29sb3JzLm9yYW5nZX0pLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQYWdlRXhhbXBsZUZsdXR0ZXJMb2dvLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgSWNvbkJ1dHRvbixcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBJbWFnZSxcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgUGFnZUV4YW1wbGVJbWFnZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKFwiUGFnZUV4YW1wbGVJbWFnZVwiKTtcbiAgfVxuXG4gIGdlbkltYWdlVUkoYm94Rml0TmFtZSl7XG4gICAgcmV0dXJuIFtcbiAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQm94Rml0LicrYm94Rml0TmFtZSwpLFxuICAgICAgfSksXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgaGVpZ2h0OjE1MCxcbiAgICAgICAgd2lkdGg6IDMwMCxcbiAgICAgICAgY29sb3I6Q29sb3JzLm9yYW5nZSxcbiAgICAgICAgY2hpbGQ6SW1hZ2UuYXNzZXQoJ3Blb3BsZS9hbGlfbGFuZHNjYXBlLnBuZycsIHtcbiAgICAgICAgICBteFBhY2thZ2U6ICdmbHV0dGVyX2dhbGxlcnlfYXNzZXRzJyxcbiAgICAgICAgICBmaXQ6IEJveEZpdFtib3hGaXROYW1lXSxcbiAgICAgICAgICBoZWlnaHQ6IDEwMFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIF07XG4gIH1cblxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdJbWFnZScsKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+WKoOi9vee9kee7nOWbvueJhycsKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBJbWFnZS5uZXR3b3JrKCdodHRwczovL2Nkbi5waXhhYmF5LmNvbS9waG90by8yMDE1LzEwLzMwLzIwLzEzL3N1bnJpc2UtMTAxNDcxMl85NjBfNzIwLmpwZycse1xuICAgICAgICAgICAgZml0OiBCb3hGaXQuY292ZXIsXG4gICAgICAgICAgICBoZWlnaHQ6IDI1MFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+WKoOi9veacrOWcsOWbvueJhycsKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBJbWFnZS5hc3NldCgncGVvcGxlL2FsaV9sYW5kc2NhcGUucG5nJywge1xuICAgICAgICAgICAgbXhQYWNrYWdlOiAnZmx1dHRlcl9nYWxsZXJ5X2Fzc2V0cycsXG4gICAgICAgICAgICBmaXQ6IEJveEZpdC5jb3ZlcixcbiAgICAgICAgICAgIGhlaWdodDogMjUwXG4gICAgICAgICAgfSksXG4gICAgICAgICAgLi4udGhpcy5nZW5JbWFnZVVJKFwiY29udGFpblwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkltYWdlVUkoXCJmaWxsXCIpLFxuICAgICAgICAgIC4uLnRoaXMuZ2VuSW1hZ2VVSShcImZpdEhlaWdodFwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkltYWdlVUkoXCJmaXRXaWR0aFwiKSxcbiAgICAgICAgICAuLi50aGlzLmdlbkltYWdlVUkoXCJzY2FsZURvd25cIiksXG4gICAgICAgICAgLi4udGhpcy5nZW5JbWFnZVVJKFwibm9uZVwiKSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVJbWFnZSxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgUGxhY2Vob2xkZXIsXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cblxuY2xhc3MgUGFnZUV4YW1wbGVQbGFjZWhvbGRlciBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKFwiUGFnZUV4YW1wbGVQbGFjZWhvbGRlclwiKTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQbGFjZWhvbGRlcicsKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICB0aXRsZTpuZXcgVGV4dChcIum7mOiupOWNoOS9jeesplwiKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgUGxhY2Vob2xkZXIoKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdGl0bGU6bmV3IFRleHQoXCLljaDkvY3nrKbmjaLoibJcIiksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IFBsYWNlaG9sZGVyKHtcbiAgICAgICAgICAgIGZhbGxiYWNrSGVpZ2h0OjEwMCxcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOm5ldyBUZXh0KFwi5Y2g5L2N56ym5oyH5a6a6auY5bqmXCIpLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBQbGFjZWhvbGRlcih7XG4gICAgICAgICAgICBmYWxsYmFja0hlaWdodDoxMDAsXG4gICAgICAgICAgICBmYWxsYmFja1dpZHRoOjEwMCxcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy55ZWxsb3csXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOm5ldyBUZXh0KFwi5Y2g5L2N56ym57q/5p2h57KX57uGXCIpLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBQbGFjZWhvbGRlcih7XG4gICAgICAgICAgICBmYWxsYmFja0hlaWdodDoxMDAsXG4gICAgICAgICAgICBmYWxsYmFja1dpZHRoOjEwMCxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOjQsXG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlUGxhY2Vob2xkZXIsXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIENyb3NzQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuXG5jbGFzcyBQYWdlRXhhbXBsZVJvdyBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKFwiUGFnZUV4YW1wbGVSb3dcIik7XG4gIH1cblxuICBnZW5TZXZlbkNvbnRhaW5lcnMoKXtcbiAgICByZXR1cm4gIFtcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMucmVkLFxuICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICB3aWR0aDozMCxcbiAgICAgIH0pLFxuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy5vcmFuZ2UsXG4gICAgICAgIGhlaWdodDoxMDAsXG4gICAgICAgIHdpZHRoOjMwLFxuICAgICAgfSksXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLnllbGxvdyxcbiAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgd2lkdGg6MzAsXG4gICAgICB9KSxcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMuZ3JlZW4sXG4gICAgICAgIGhlaWdodDoxMDAsXG4gICAgICAgIHdpZHRoOjMwLFxuICAgICAgfSksXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLmluZGlnbyxcbiAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgd2lkdGg6MzAsXG4gICAgICB9KSxcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMucHVycGxlLFxuICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICB3aWR0aDozMCxcbiAgICAgIH0pLFxuICAgIF07XG4gIH1cblxuXG4gIGdlblRocmVlQ29udGFpbmVycygpe1xuICAgIHJldHVybiAgW1xuICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGNvbG9yOkNvbG9ycy5yZWQsXG4gICAgICAgIGhlaWdodDoxMDAsXG4gICAgICAgIHdpZHRoOjMwLFxuICAgICAgfSksXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY29sb3I6Q29sb3JzLm9yYW5nZSxcbiAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgd2lkdGg6MzAsXG4gICAgICB9KSxcbiAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICBjb2xvcjpDb2xvcnMueWVsbG93LFxuICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICB3aWR0aDozMCxcbiAgICAgIH0pLFxuICAgIF07XG4gIH1cblxuICBidWlsZChjb250ZXh0KXtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUm93JywpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIlJvd1wiKSx9KSxcbiAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgICAgICAgICB3aWR0aDozMCxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgICAgICAgICB3aWR0aDozMCxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy55ZWxsb3csXG4gICAgICAgICAgICAgICAgaGVpZ2h0OjEwMCxcbiAgICAgICAgICAgICAgICB3aWR0aDozMCxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmVlbixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOjMwLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgY29sb3I6Q29sb3JzLmluZGlnbyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOjMwLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgY29sb3I6Q29sb3JzLnB1cnBsZSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MTAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOjMwLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG5cbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiUm93IFRvcC1MZWZ0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFJvdyh7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgVG9wLU1pZGRsZVwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBSb3coe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIlJvdyBUb3AtUmlnaHRcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgUm93KHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuZW5kLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIlJvdyBDZW50ZXItTGVmdFwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBSb3coe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIlJvdyBDZW50ZXItQ2VudGVyXCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFJvdyh7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIlJvdyBDZW50ZXItUmlnaHRcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgUm93KHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LmVuZCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcblxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgQm90dG9tLUxlZnRcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgUm93KHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuZW5kLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgQm90dG9tLU1pZGRsZVwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBSb3coe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5lbmQsXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgQm90dG9tLVJpZ2h0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFJvdyh7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LmVuZCxcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5lbmQsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG5cblxuXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIlJvdyBTcGFjZUFyb3VuZC1MZWZ0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFJvdyh7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgU3BhY2VBcm91bmQtTWlkZGxlXCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFJvdyh7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiUm93IFNwYWNlQXJvdW5kLVJpZ2h0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFJvdyh7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LmVuZCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2VuVGhyZWVDb250YWluZXJzKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcblxuXG5cblxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgU3BhY2VCZXR3ZWVuLUxlZnRcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgUm93KHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VCZXR3ZWVuLFxuICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6Q3Jvc3NBeGlzQWxpZ25tZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgU3BhY2VCZXR3ZWVuLU1pZGRsZVwiKSx9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5ncmV5LFxuICAgICAgICAgICAgaGVpZ2h0OjIwMCxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBSb3coe1xuICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDpNYWluQXhpc0FsaWdubWVudC5zcGFjZUJldHdlZW4sXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgU3BhY2VCZXR3ZWVuLVJpZ2h0XCIpLH0pLFxuICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6Q29sb3JzLmdyZXksXG4gICAgICAgICAgICBoZWlnaHQ6MjAwLFxuICAgICAgICAgICAgY2hpbGQ6bmV3IFJvdyh7XG4gICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50Ok1haW5BeGlzQWxpZ25tZW50LnNwYWNlQmV0d2VlbixcbiAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OkNyb3NzQXhpc0FsaWdubWVudC5lbmQsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG5cbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOm5ldyBUZXh0KFwiUm93IFNwYWNlRXZlbmx5LUxlZnRcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgUm93KHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VFdmVubHksXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdlblRocmVlQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTpuZXcgVGV4dChcIlJvdyBTcGFjZUV2ZW5seS1NaWRkbGVcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgUm93KHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VFdmVubHksXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6bmV3IFRleHQoXCJSb3cgU3BhY2VFdmVubHktUmlnaHRcIiksfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjpDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgIGhlaWdodDoyMDAsXG4gICAgICAgICAgICBjaGlsZDpuZXcgUm93KHtcbiAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6TWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VFdmVubHksXG4gICAgICAgICAgICAgIGNyb3NzQXhpc0FsaWdubWVudDpDcm9zc0F4aXNBbGlnbm1lbnQuZW5kLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5nZW5UaHJlZUNvbnRhaW5lcnMoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuXG5cbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVSb3csXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIEJvdHRvbU5hdmlnYXRpb25CYXIsXG4gIEJvdHRvbU5hdmlnYXRpb25CYXJUeXBlLFxuICBCb3R0b21OYXZpZ2F0aW9uQmFySXRlbSxcbiAgQW5pbWF0aW9uQ29udHJvbGxlcixcbiAgRHVyYXRpb24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG4gIFBsYWNlaG9sZGVyLFxuICBUaGVtZSxcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgSG9tZVBhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJIb21lUGFnZVwiKTtcbiAgfVxuICBidWlsZChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDZW50ZXIoe1xuICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwiSG9tZVBhZ2VcIiksXG4gICAgfSlcbiAgfVxufVxuXG5cbmNsYXNzIElkZWFQYWdlIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiSWRlYVBhZ2VcIik7XG4gIH1cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2VudGVyKHtcbiAgICAgIGNoaWxkOiBuZXcgVGV4dChcIklkZWFQYWdlXCIpLFxuICAgIH0pXG4gIH1cbn1cblxuXG5jbGFzcyBNZXNzYWdlUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIk1lc3NhZ2VQYWdlXCIpO1xuICB9XG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENlbnRlcih7XG4gICAgICBjaGlsZDogbmV3IFRleHQoXCJNZXNzYWdlUGFnZVwiKSxcbiAgICB9KVxuICB9XG59XG5cblxuY2xhc3MgTXlQYWdlIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiTXlQYWdlXCIpO1xuICB9XG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENlbnRlcih7XG4gICAgICBjaGlsZDogbmV3IFRleHQoXCJNeVBhZ2VcIiksXG4gICAgfSlcbiAgfVxufVxuXG5jbGFzcyBfTmF2aWdhdGlvbkljb25WaWV3IHtcbiAgY29uc3RydWN0b3IoeyBpY29uLCB0aXRsZSwgdnN5bmMgfSkge1xuICAgIHRoaXMuaXRlbSA9IG5ldyBCb3R0b21OYXZpZ2F0aW9uQmFySXRlbSh7XG4gICAgICBpY29uOiBpY29uLFxuICAgICAgdGl0bGU6IHRpdGxlXG4gICAgfSk7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFuaW1hdGlvbkNvbnRyb2xsZXIoe1xuICAgICAgZHVyYXRpb246IG5ldyBEdXJhdGlvbih7XG4gICAgICAgIG1pbGxpc2Vjb25kczogMjAwXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG59XG5cblxuXG5jbGFzcyBQYWdlRXhhbXBsZVNjYWZmb2xkIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZVNjYWZmb2xkXCIpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVNjYWZmb2xkU3RhdGUodGhpcyk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVTY2FmZm9sZFN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3Iod2lkZ2V0KSB7XG4gICAgc3VwZXIod2lkZ2V0KTtcbiAgICB0aGlzLl9jdXJyZW50SW5kZXggPSAwO1xuICAgIHRoaXMuX25hdmlnYXRpb25WaWV3cyA9IFtdO1xuICAgIHRoaXMuX3BhZ2VMaXN0ID0gW107XG4gICAgdGhpcy5fY3VycmVudFBhZ2UgPSBudWxsO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIHRoaXMuX25hdmlnYXRpb25WaWV3cyA9IFtcbiAgICAgIG5ldyBfTmF2aWdhdGlvbkljb25WaWV3KHtcbiAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMuYXNzaWdubWVudCksXG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIummlumhtVwiKVxuICAgICAgfSksXG4gICAgICBuZXcgX05hdmlnYXRpb25JY29uVmlldyh7XG4gICAgICAgIGljb246IG5ldyBJY29uKEljb25zLmFsbF9pbmNsdXNpdmUpLFxuICAgICAgICB0aXRsZTogbmV3IFRleHQoXCLmg7Pms5VcIilcbiAgICAgIH0pLFxuICAgICAgbmV3IF9OYXZpZ2F0aW9uSWNvblZpZXcoe1xuICAgICAgICBpY29uOiBuZXcgSWNvbihJY29ucy5hZGRfYWxlcnQpLFxuICAgICAgICB0aXRsZTogbmV3IFRleHQoXCLpgJrnn6VcIilcbiAgICAgIH0pLFxuICAgICAgbmV3IF9OYXZpZ2F0aW9uSWNvblZpZXcoe1xuICAgICAgICBpY29uOiBuZXcgSWNvbihJY29ucy5wZXJtX2lkZW50aXR5KSxcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5oiR55qEXCIpXG4gICAgICB9KSxcbiAgICBdO1xuXG4gICAgdGhpcy5fcGFnZUxpc3QgPSBbXG4gICAgICBuZXcgSG9tZVBhZ2UoKSxcbiAgICAgIG5ldyBJZGVhUGFnZSgpLFxuICAgICAgbmV3IE1lc3NhZ2VQYWdlKCksXG4gICAgICBuZXcgTXlQYWdlKClcbiAgICBdO1xuXG4gICAgdGhpcy5fY3VycmVudFBhZ2UgPSB0aGlzLl9wYWdlTGlzdFt0aGlzLl9jdXJyZW50SW5kZXhdO1xuXG5cbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnU2NhZm9sZCcpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgQ2VudGVyKHtcbiAgICAgICAgY2hpbGQ6IHRoaXMuX2N1cnJlbnRQYWdlXG4gICAgICB9KSxcbiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICBjaGlsZDogbmV3IEljb24oSWNvbnMuYWRkKSxcbiAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBib3R0b21OYXZpZ2F0aW9uQmFyOiBuZXcgQm90dG9tTmF2aWdhdGlvbkJhcih7XG4gICAgICAgIGl0ZW1zOiB0aGlzLl9uYXZpZ2F0aW9uVmlld3MubWFwKG5hdmlnYXRpb25JY29uVmlldyA9PiBuYXZpZ2F0aW9uSWNvblZpZXcuaXRlbSksXG4gICAgICAgIGN1cnJlbnRJbmRleDogdGhpcy5fY3VycmVudEluZGV4LFxuICAgICAgICBmaXhlZENvbG9yOiBUaGVtZS5vZihjb250ZXh0KS5wcmltYXJ5Q29sb3IsXG4gICAgICAgIHR5cGU6IEJvdHRvbU5hdmlnYXRpb25CYXJUeXBlLmZpeGVkLFxuICAgICAgICBvblRhcDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9uYXZpZ2F0aW9uVmlld3NbdGhpcy5fY3VycmVudEluZGV4XS5jb250cm9sbGVyLnJldmVyc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy5fbmF2aWdhdGlvblZpZXdzW3RoaXMuX2N1cnJlbnRJbmRleF0uY29udHJvbGxlci5mb3J3YXJkKCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50UGFnZSA9IHRoaXMuX3BhZ2VMaXN0W3RoaXMuX2N1cnJlbnRJbmRleF07XG4gICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlU2NhZmZvbGQsXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBJY29uQnV0dG9uLFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cblxuXG5jbGFzcyBQYWdlRXhhbXBsZVNuYWtlQmFyIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZVNuYWNrYmFyXCIpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCl7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0lkZWEgVGVzdCcsKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICBsZWFkaW5nOm5ldyBJY29uKEljb25zLmFjX3VuaXQpLFxuICAgICAgICAgICAgdGl0bGU6bmV3IFRleHQoXCJTY2FmZm9sZC5vZihjb250ZXh0KSDmtYvor5VcIiksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IE15U2NhZmZvbGRCb2R5KCksXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxuY2xhc3MgTXlTY2FmZm9sZEJvZHkgZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcihcIk15U2NhZmZvbGRCb2R5XCIpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCl7XG4gICAgbGV0IHdpZGdldCA9ICBuZXcgUmFpc2VkQnV0dG9uKHtcbiAgICAgIGNoaWxkOm5ldyBUZXh0KFwi5rWL6K+VIFNjYWZmb2xkLm9mKGNvbnRleHQpXCIpLFxuICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBjb250ZXh0ID0ge1xuICAgICAgICAgIHdpZGdldElEOiB0aGlzLndpZGdldElELFxuICAgICAgICB9O1xuICAgICAgICBTY2FmZm9sZC5vZihjb250ZXh0KS5zaG93U25hY2tCYXIoXG4gICAgICAgICAgbmV3IFNuYWNrQmFyKHtjb250ZW50OiBuZXcgVGV4dCgn5oiR5piv6YCa6L+HSlPohJrmnKzmnoTlu7rnmoQs57uI5LqO5Yqo5oCB5YyW5LqG77yB77yBJyl9KVxuICAgICAgICApO1xuICAgICAgfS5iaW5kKHRoaXMpLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVTbmFrZUJhcixcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxufSA9IHJlcXVpcmUoXCIuLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZVRleHQgZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcihcIlBhZ2VFeGFtcGxlVGV4dFwiKTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdUZXh0JywpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIuaZrumAmuaWh+acrFwiKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdGl0bGU6bmV3IFRleHQoXCLorr7nva7mlofmnKzpopzoibJcIix7XG4gICAgICAgICAgICAgIHN0eWxlOm5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwi5a+M5paH5pysXCIpLFxuICAgICAgICAgIG5ldyBQYWRkaW5nKHtcbiAgICAgICAgICAgIHBhZGRpbmc6RWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBSaWNoVGV4dCh7XG4gICAgICAgICAgICAgIHRleHQ6IG5ldyBUZXh0U3Bhbih7XG4gICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgY29sb3I6IG5ldyBDb2xvcigweEZGRkY4QzAwKSxcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxOC4wLFxuICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogVGV4dERlY29yYXRpb24udW5kZXJsaW5lLFxuICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbkNvbG9yOiBDb2xvcnMub3JhbmdlLFxuICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvblN0eWxlOiBUZXh0RGVjb3JhdGlvblN0eWxlLmRhc2hlZCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0ZXh0OiAn6LaF6ZW/5paH5qGIcmljaCB0ZXh077yM6LaF6ZW/5paH5qGIcmljaCB0ZXh077yM6LaF6ZW/5paH5qGIcmljaCB0ZXh077yM6LaF6ZW/5paH5qGIcmljaCB0ZXh077yM6LaF6ZW/5paH5qGIcmljaCB0ZXh077yM6LaF6ZW/5paH5qGIcmljaCB0ZXh0JyxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgbmV3IFRleHRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJyBzdHlsZSAgJyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCxcbiAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBUZXh0RGVjb3JhdGlvbi5ub25lLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBuZXcgVGV4dFNwYW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAneW91ciB0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogVGV4dERlY29yYXRpb24ubm9uZSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBvdmVyZmxvdzogVGV4dE92ZXJmbG93LmVsbGlwc2lzLFxuICAgICAgICAgICAgICBtYXhMaW5lczogOTlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBhZ2VFeGFtcGxlVGV4dCxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIEljb25CdXR0b24sXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgSW1hZ2UsXG4gIFRoZW1lLFxuICBQYWRkaW5nLFxuICBTY3JvbGxiYXIsXG4gIEtleSxcbiAgTmF2aWdhdG9yLFxuICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZVwiKTtcblxubGV0IHsgUGFnZUV4YW1wbGVBcHBCYXIgfSA9IHJlcXVpcmUoXCIuL2V4YW1wbGVfYXBwX2Jhci5qc1wiKTtcbmxldCB7IFBhZ2VFeGFtcGxlVGV4dCB9ID0gcmVxdWlyZShcIi4vZXhhbXBsZV90ZXh0LmpzXCIpO1xubGV0IHsgUGFnZUV4YW1wbGVCdXR0b24gfSA9IHJlcXVpcmUoXCIuL2V4YW1wbGVfYnV0dG9uLmpzXCIpO1xuXG5sZXQgeyBQYWdlRXhhbXBsZVNuYWtlQmFyIH0gPSByZXF1aXJlKFwiLi9leGFtcGxlX3NuYWtlX2Jhci5qc1wiKTtcbmxldCB7IFBhZ2VFeGFtcGxlQ29sdW1uIH0gPSByZXF1aXJlKFwiLi9leGFtcGxlX2NvbHVtbi5qc1wiKTtcbmxldCB7IFBhZ2VFeGFtcGxlUm93IH0gPSByZXF1aXJlKFwiLi9leGFtcGxlX3Jvdy5qc1wiKTtcbmxldCB7IFBhZ2VFeGFtcGxlQ29udGFpbmVyIH0gPSByZXF1aXJlKFwiLi9leGFtcGxlX2NvbnRhaW5lci5qc1wiKTtcbmxldCB7IFBhZ2VFeGFtcGxlRmx1dHRlckxvZ28gfSA9IHJlcXVpcmUoXCIuL2V4YW1wbGVfZmx1dHRlcl9sb2dvLmpzXCIpO1xubGV0IHsgUGFnZUV4YW1wbGVDb2xvciB9ID0gcmVxdWlyZShcIi4vZXhhbXBsZV9mbHV0dGVyX2NvbG9yLmpzXCIpO1xubGV0IHsgUGFnZUV4YW1wbGVJY29uIH0gPSByZXF1aXJlKFwiLi9leGFtcGxlX2ZsdXR0ZXJfaWNvbi5qc1wiKTtcbmxldCB7IFBhZ2VFeGFtcGxlSW1hZ2UgfSA9IHJlcXVpcmUoXCIuL2V4YW1wbGVfaW1hZ2UuanNcIik7XG5sZXQgeyBQYWdlRXhhbXBsZVBsYWNlaG9sZGVyIH0gPSByZXF1aXJlKFwiLi9leGFtcGxlX3BsYWNlaG9sZGVyLmpzXCIpO1xubGV0IHsgUGFnZUV4YW1wbGVTY2FmZm9sZCB9ID0gcmVxdWlyZShcIi4vZXhhbXBsZV9zY2FmZm9sZC5qc1wiKTtcblxuXG4vL0FuaW1hdGVkXG5jb25zdCB7IFBhZ2VFeGFtcGxlQW5pbWF0ZWRCdWlsZGVyIH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9idWlsZGVyLmpzXCIpO1xuY29uc3QgeyBQYWdlRXhhbXBsZUFuaW1hdGVkQnVpbGRlclYyIH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9idWlsZGVyX3YyLmpzXCIpO1xuY29uc3QgeyBQYWdlRXhhbXBsZUFuaW1hdGVkQ29udGFpbmVyIH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9jb250YWluZXIuanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlQW5pbWF0ZWRDcm9zc0ZhZGUgfSA9IHJlcXVpcmUoXCIuL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX2Nyb3NzX2ZhZGUuanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlIH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9kZWZhdWx0X3RleHRfc3R5bGUuanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlQW5pbWF0ZWRMaXN0U3RhdGUgfSA9IHJlcXVpcmUoXCIuL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX2xpc3Rfc3RhdGUuanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlQW5pbWF0ZWRNb2RhbEJhcnJpZXIgfSA9IHJlcXVpcmUoXCIuL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX21vZGFsX2JhcnJpZXIuanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlQW5pbWF0ZWRPcGFjaXR5IH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9vcGFjaXR5LmpzXCIpO1xuY29uc3QgeyBQYWdlRXhhbXBsZUFuaW1hdGVkUGh5c2ljYWxNb2RlbCB9ID0gcmVxdWlyZShcIi4vYW5pbWF0aW9uL2V4YW1wbGVfYW5pbWF0ZWRfcGh5c2ljYWxfbW9kZWwuanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlQW5pbWF0ZWRQb3NpdGlvbmVkIH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF9wb3NpdGlvbmVkLmpzXCIpO1xuY29uc3QgeyBQYWdlRXhhbXBsZUFuaW1hdGVkU2l6ZSB9ID0gcmVxdWlyZShcIi4vYW5pbWF0aW9uL2V4YW1wbGVfYW5pbWF0ZWRfc2l6ZS5qc1wiKTtcblxuY29uc3QgeyBQYWdlRXhhbXBsZUFuaW1hdGVkV2lkZ2V0IH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9hbmltYXRlZF93aWRnZXQuanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlQW5pbWF0ZWRXaWRnZXRCYXNlU3RhdGUgfSA9IHJlcXVpcmUoXCIuL2FuaW1hdGlvbi9leGFtcGxlX2FuaW1hdGVkX3dpZGdldF9iYXNlX3N0YXRlLmpzXCIpO1xuY29uc3QgeyBQYWdlRXhhbXBsZURlY29yYXRlZEJveFRyYW5zaXRpb24gfSA9IHJlcXVpcmUoXCIuL2FuaW1hdGlvbi9leGFtcGxlX2RlY29yYXRlZF9ib3hfdHJhbnNpdGlvbi5qc1wiKTtcbmNvbnN0IHsgUGFnZUV4YW1wbGVGYWRlVHJhbnNpdGlvbiB9ID0gcmVxdWlyZShcIi4vYW5pbWF0aW9uL2V4YW1wbGVfZmFkZV90cmFuc2l0aW9uLmpzXCIpO1xuY29uc3QgeyBQYWdlRXhhbXBsZUhlcm8gfSA9IHJlcXVpcmUoXCIuL2FuaW1hdGlvbi9leGFtcGxlX2hlcm8uanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlUG9zaXRpb25lZFRyYW5zaXRpb24gfSA9IHJlcXVpcmUoXCIuL2FuaW1hdGlvbi9leGFtcGxlX3Bvc2l0aW9uZWRfdHJhbnNpdGlvbi5qc1wiKTtcbmNvbnN0IHsgUGFnZUV4YW1wbGVSb3RhdGlvblRyYW5zaXRpb24gfSA9IHJlcXVpcmUoXCIuL2FuaW1hdGlvbi9leGFtcGxlX3JvdGF0aW9uX3RyYW5zaXRpb24uanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlU2NhbGVUcmFuc2l0aW9uIH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9zY2FsZV90cmFuc2l0aW9uLmpzXCIpO1xuY29uc3QgeyBQYWdlRXhhbXBsZVNpemVUcmFuc2l0aW9uIH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9zaXplX3RyYW5zaXRpb24uanNcIik7XG5jb25zdCB7IFBhZ2VFeGFtcGxlU2xpZGVUcmFuc2l0aW9uIH0gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vZXhhbXBsZV9zbGlkZV90cmFuc2l0aW9uLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlc1BhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJFeGFtcGxlc1BhZ2VcIik7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0ZsdXR0ZXIgRXhhbXBsZXMnKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IFNjcm9sbGJhcih7XG4gICAgICAgIGNoaWxkOiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwi5Z+656GA57uE5Lu2XCIsIHsga2V5OiBuZXcgS2V5KFwiMVwiKSB9KSxcblxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQXBwQmFyXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQXBwQmFyO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIlRleHRcIiksXG5cbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVRleHQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQnV0dG9uXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQnV0dG9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkltYWdlXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlSW1hZ2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiUGxhY2Vob2xkZXJcIiksXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVQbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJJY29uXCIpLFxuXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVJY29uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkNvbG9yXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQ29sb3I7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIuW4g+WxgOe7hOS7tlwiLCB7IGtleTogbmV3IEtleShcIjJcIikgfSksXG4gICAgICAgICAgICAvLyB0aGlzLmdlblNlY3Rpb25UaXRsZShjb250ZXh0LFwi5biD5bGA57uE5Lu2XCIpLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQ29sdW1uXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQ29sdW1uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIlJvd1wiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVJvdztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJDb250YWluZXJcIiksXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVDb250YWluZXI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIuWKqOeUu+e7hOS7tlwiLCB7IGtleTogbmV3IEtleShcIjNcIikgfSksXG4gICAgICAgICAgICAvLyB0aGlzLmdlblNlY3Rpb25UaXRsZShjb250ZXh0LFwi5Yqo55S757uE5Lu2XCIpLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQW5pbWF0ZWRCdWlsZGVyXCIpLFxuXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZEJ1aWxkZXI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQW5pbWF0ZWRCdWlsZGVyIHYyXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQW5pbWF0ZWRCdWlsZGVyVjI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQW5pbWF0ZWRDb250YWluZXJcIiksXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJBbmltYXRlZENyb3NzRmFkZVwiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkQ3Jvc3NGYWRlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkFuaW1hdGVkRGVmYXVsdFRleHRTdHlsZVwiKSxcbiBcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkRGVmYXVsdFRleHRTdHlsZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJBbmltYXRlZExpc3RTdGF0ZVwiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkTGlzdFN0YXRlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkFuaW1hdGVkTW9kYWxCYXJyaWVyXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQW5pbWF0ZWRNb2RhbEJhcnJpZXI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQW5pbWF0ZWRPcGFjaXR5XCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQW5pbWF0ZWRPcGFjaXR5O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkFuaW1hdGVkUGh5c2ljYWxNb2RlbFwiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkUGh5c2ljYWxNb2RlbDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJBbmltYXRlZFBvc2l0aW9uZWRcIiksXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZFBvc2l0aW9uZWQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQW5pbWF0ZWRTaXplXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQW5pbWF0ZWRTaXplO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkFuaW1hdGVkV2lkZ2V0XCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQW5pbWF0ZWRXaWRnZXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQW5pbWF0ZWRXaWRnZXRCYXNlU3RhdGVcIiksXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZFdpZGdldEJhc2VTdGF0ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJEZWNvcmF0ZWRCb3hUcmFuc2l0aW9uXCIpLFxuXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVEZWNvcmF0ZWRCb3hUcmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkZhZGVUcmFuc2l0aW9uXCIpLFxuXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVGYWRlVHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJIZXJvXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlSGVybztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJQb3NpdGlvbmVkVHJhbnNpdGlvblwiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVBvc2l0aW9uZWRUcmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIlJvdGF0aW9uVHJhbnNpdGlvblwiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVJvdGF0aW9uVHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJTY2FsZVRyYW5zaXRpb25cIiksXG5cbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVNjYWxlVHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJTaXplVHJhbnNpdGlvblwiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVNpemVUcmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIlNsaWRlVHJhbnNpdGlvblwiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVNsaWRlVHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwi5YW25LuW57uE5Lu2XCIsIHsga2V5OiBuZXcgS2V5KFwiNFwiKSB9KSxcbiAgICAgICAgICAgIC8vIHRoaXMuZ2VuU2VjdGlvblRpdGxlKGNvbnRleHQsXCLlhbbku5bnu4Tku7ZcIiksXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJGbHV0dGVyTG9nb1wiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUZsdXR0ZXJMb2dvO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIlNjYWZmb2xkXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlU2NhZmZvbGQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiU25hY2tCYXJcIiksXG4gICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVTbmFrZUJhcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRXhhbXBsZXNQYWdlLFxufTtcbiIsIi8vICBNWEZsdXR0ZXJGcmFtZXdvcmtcbi8vICBDb3B5cmlnaHQgMjAxOSBUaGUgTVhGbHV0dGVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vL1xuLy8gIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vICBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIEJveERlY29yYXRpb24sXG4gIEJvcmRlclJhZGl1cyxcbiAgUmFkaXVzLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgQ3Jvc3NBeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBGbHV0dGVyTG9nbyxcbiAgV3JhcCxcbiAgU2Nyb2xsYmFyLFxuICBDYXJkLFxuICBUaGVtZSxcbiAgTmF2aWdhdG9yLFxuICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbiAgTWV0aG9kQ2hhbm5lbCxcbiAgQ2xpcFJSZWN0LFxuICBCb3hGaXQsXG4gIER1cmF0aW9uLFxuICBLZXksXG4gIEJvcmRlckRpcmVjdGlvbmFsLFxuICBCb3JkZXJTaWRlLFxuICBBbGlnbm1lbnQsXG4gIEFzcGVjdFJhdGlvLFxuICBEZWNvcmF0aW9uSW1hZ2UsXG4gIFJlY3QsXG59ID0gcmVxdWlyZSgnLi4vanNfZmx1dHRlci5qcycpO1xuXG5sZXQgeyBTbWFydFJlZnJlc2hlciwgQ2xhc3NpY0Zvb3RlciwgUmVmcmVzaENvbnRyb2xsZXIgfSA9IHJlcXVpcmUoJ0B0ZW5jZW50L214Zmx1dHRlci1wdWxsLXRvLXJlZnJlc2gnKTtcblxuY29uc3QgeyBDYWNoZWROZXR3b3JrSW1hZ2UgfSA9IHJlcXVpcmUoJ0B0ZW5jZW50L214Zmx1dHRlci1jYWNoZWQtbmV0d29yay1pbWFnZScpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZSgnLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qcycpO1xuXG5jb25zdCBwYWNrYWdlc19fZGlvID0gcmVxdWlyZSgnQHRlbmNlbnQvbXhmbHV0dGVyLWRpbycpO1xuXG4vL+eUqOS6jua8lOekuue9kee7nOivt+axgmNnaVxuLy9sZXQgY2dpID0gXCJodHRwczovL2MubS4xNjMuY29tL25jL2FydGljbGUvaGVhZGxpbmUvVDEzNDg2NDk1ODA2OTIvMC0xMC5odG1sXCI7XG5cbi8vZGF0YVxubGV0IGdfbmV3c09yZGVyID0gMDtcbi8vXG5jbGFzcyBMaXN0Vmlld0RlbW8gZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignTGlzdFZpZXdEZW1vJyk7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IExpc3RWaWV3RGVtb1N0YXRlKHRoaXMpO1xuICB9XG5cbiAgdGVzdElERSh2YXIxLCB2YXIyLCBsaXN0LCBhYmMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuY2xhc3MgTGlzdFZpZXdEZW1vU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5yZWZyZXNoQ29udHJvbGxlciA9IG5ldyBSZWZyZXNoQ29udHJvbGxlcigpO1xuICAgIHRoaXMubWV0aG9kQ2hhbm5lbCA9IG5ldyBNZXRob2RDaGFubmVsKCdNWEZsdXR0ZXJfTWV0aG9kQ2hhbm5lbF9EZW1vJyk7XG4gICAgdGhpcy5kaW8gPSBwYWNrYWdlc19fZGlvLkRpbygpO1xuXG4gICAgdGhpcy5uZXdzQXJyYXkgPSBbXTtcblxuICAgIHRoaXMucGFnZUNvdW50ID0gMTA7XG4gICAgdGhpcy5wYWdlSW5kZXggPSAwO1xuICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuYnVpbGRDb3VudCA9IDE7XG4gIH1cblxuICBpbml0U3RhdGUoKSB7XG4gICAgc3VwZXIuaW5pdFN0YXRlKCk7XG4gICAgdGhpcy5yZWZyZXNoKHRydWUpO1xuICB9XG5cbiAgYXN5bmMgcmVmcmVzaChpc0luaXQpIHtcbiAgICBsZXQgbmV3c0FycmF5ID0gYXdhaXQgdGhpcy5yZXF1ZXN0SHR0cERhdGEodHJ1ZSk7XG5cbiAgICBpZiAoIWlzSW5pdCkge1xuICAgICAgdGhpcy5lbmRSZWZyZXNoT3JMb2FkTW9yZSh0cnVlLCBuZXdzQXJyYXkgPT0gbnVsbCB8fCBuZXdzQXJyYXkubGVuZ3RoID09IDApO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubmV3c0FycmF5ID0gbmV3c0FycmF5LmNvbmNhdCh0aGlzLm5ld3NBcnJheSk7XG4gICAgICB9LmJpbmQodGhpcyksXG4gICAgKTtcblxuICAgIHJldHVybiBuZXdzQXJyYXk7XG4gIH1cblxuICBhc3luYyBsb2FkTW9yZSgpIHtcbiAgICBsZXQgbmV3c0FycmF5ID0gYXdhaXQgdGhpcy5yZXF1ZXN0SHR0cERhdGEoZmFsc2UpO1xuICAgIHRoaXMuZW5kUmVmcmVzaE9yTG9hZE1vcmUoZmFsc2UsIG5ld3NBcnJheSA9PSBudWxsIHx8IG5ld3NBcnJheS5sZW5ndGggPT0gMCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5ld3NBcnJheSA9IHRoaXMubmV3c0FycmF5LmNvbmNhdChuZXdzQXJyYXkpO1xuICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyByZXF1ZXN0SHR0cERhdGEoaXNSZWZyZXNoKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMucmVxdWVzdE5ld3MoKTtcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdTdHJpbmcnKSB7XG4gICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlc3BBcnJheSA9IHJlc3VsdFsnVDEzNDg2NDk1ODA2OTInXTtcbiAgICAgIHJldHVybiByZXNwQXJyYXk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBlbmRSZWZyZXNoT3JMb2FkTW9yZShpc1JlZnJlc2gsIGlzTm9EYXRhKSB7XG4gICAgdGhpcy5yZWZyZXNoQ29udHJvbGxlci5sb2FkQ29tcGxldGUoKTtcbiAgICB0aGlzLnJlZnJlc2hDb250cm9sbGVyLnJlZnJlc2hDb21wbGV0ZWQoKTtcbiAgICByZXR1cm47XG4gICAgaWYgKGlzUmVmcmVzaCkge1xuICAgICAgdGhpcy5yZWZyZXNoQ29udHJvbGxlci5yZWZyZXNoQ29tcGxldGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc05vRGF0YSkge1xuICAgICAgICB0aGlzLnJlZnJlc2hDb250cm9sbGVyLmxvYWROb0RhdGEoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVmcmVzaENvbnRyb2xsZXIubG9hZENvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8vZGlvIOekuuS+i1xuICBhc3luYyByZXF1ZXN0TmV3cygpIHtcbiAgICB0aGlzLnBhZ2VJbmRleCA9IHRoaXMucGFnZUluZGV4ICUgNDtcbiAgICBsZXQgc3RhcnRJbmRleCA9IHRoaXMucGFnZUluZGV4ICogdGhpcy5wYWdlQ291bnQ7XG4gICAgbGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHRoaXMucGFnZUNvdW50O1xuICAgIHRoaXMucGFnZUluZGV4Kys7XG5cbiAgICBsZXQgdXJsID0gJ2h0dHBzOi8vYy5tLjE2My5jb20vbmMvYXJ0aWNsZS9oZWFkbGluZS9UMTM0ODY0OTU4MDY5Mi8nICsgc3RhcnRJbmRleCArICctJyArIGVuZEluZGV4ICsgJy5odG1sJztcbiAgICB0cnkge1xuICAgICAgLy8gbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICAgIC8vIE1YSlNMb2cubG9nKFwicmVxdWVzdE5ld3M6cmVzcDogXCIgKyByZXNwb25zZS50ZXh0KTtcblxuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5kaW8uZ2V0KHVybCk7XG4gICAgICBNWEpTTG9nLmRlYnVnKCdhd2FpdCBEaW8uZ2V0KHVybFN0cik6cmVxdWVzdCgpIDonICsgcmVzcG9uc2UpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZSQpIHtcbiAgICAgIC8vIGxldCBlID0gZGFydC5nZXRUaHJvd24oZSQpO1xuICAgICAgLy8gTVhKU0xvZy5sb2coJ3JlcXVlc3ROZXdzOnJlc3A6ICBlcnJvcjonICsgZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgZ19uZXdzT3JkZXIgPSAwO1xuICAgIHRoaXMuYnVpbGRDb3VudCsrO1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCfnvZHmmJPmlrDpl7sgTGlzdFZpZXdFeGFtcGxlJyksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBTY3JvbGxiYXIoe1xuICAgICAgICBjaGlsZDogbmV3IFNtYXJ0UmVmcmVzaGVyKHtcbiAgICAgICAgICBjb250cm9sbGVyOiB0aGlzLnJlZnJlc2hDb250cm9sbGVyLFxuICAgICAgICAgIGVuYWJsZVB1bGxVcDogdHJ1ZSxcbiAgICAgICAgICBlbmFibGVQdWxsRG93bjogdHJ1ZSxcbiAgICAgICAgICBmb290ZXI6IG5ldyBDbGFzc2ljRm9vdGVyKHtcbiAgICAgICAgICAgIGZhaWxlZEljb246IG51bGwsXG4gICAgICAgICAgICBjYW5Mb2FkaW5nSWNvbjogbnVsbCxcbiAgICAgICAgICAgIGlkbGVJY29uOiBudWxsLFxuICAgICAgICAgICAgbm9Nb3JlSWNvbjogbnVsbCxcbiAgICAgICAgICAgIGxvYWRpbmdJY29uOiBudWxsLFxuICAgICAgICAgICAgY2FuTG9hZGluZ1RleHQ6ICcnLFxuICAgICAgICAgICAgZmFpbGVkVGV4dDogJ+e9kee7nOmUmeivr++8jOivt+mHjeivlScsXG4gICAgICAgICAgICBub0RhdGFUZXh0OiAn5bey57uP5rKh5pyJ5LqGJyxcbiAgICAgICAgICAgIGxvYWRpbmdUZXh0OiAn5Yqg6L295LitLi4uJyxcbiAgICAgICAgICAgIGlkbGVUZXh0OiAn5LiK5ouJ5Yqg6L295pu05aSaJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAvLyDliqjmgIHliJvlu7pJdGVtXG4gICAgICAgICAgY2hpbGQ6IExpc3RWaWV3LmJ1aWxkZXIoe1xuICAgICAgICAgICAgaXRlbUNvdW50OiB0aGlzLm5ld3NBcnJheS5sZW5ndGgsXG4gICAgICAgICAgICBpdGVtQnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQsIGluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgTGlzdFZpZXdJdGVtKHRoaXMubmV3c0FycmF5W2luZGV4XSk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgb25SZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBNWEpTTG9nLmxvZygnb25SZWZyZXNoJyk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgb25Mb2FkaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBNWEpTTG9nLmxvZygnb25Mb2FkaW5nJyk7XG4gICAgICAgICAgICB0aGlzLmxvYWRNb3JlKCk7XG4gICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxuY2xhc3MgTGlzdFZpZXdJdGVtIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gIGNvbnN0cnVjdG9yKG9uZU5ld3NNYXApIHtcbiAgICBzdXBlcignTGlzdFZpZXdJdGVtJyk7XG5cbiAgICB0aGlzLm5ld3NNb2RlbCA9IE5ld3NNb2RlbC5mcm9tSlNPTihvbmVOZXdzTWFwKTtcblxuICAgIHRoaXMuaW5kZXggPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgfVxuXG4gIGhvdENhcmQoY29udGV4dCwgbmV3c01vZGVsKSB7XG4gICAgZ19uZXdzT3JkZXIrKztcblxuICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgYm9yZGVyOiBuZXcgQm9yZGVyRGlyZWN0aW9uYWwoe1xuICAgICAgICAgIGJvdHRvbTogbmV3IEJvcmRlclNpZGUoe1xuICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibGFjazEyLFxuICAgICAgICAgICAgd2lkdGg6IDEuMCxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICAgIGNoaWxkOiBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge30sXG4gICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoeyB0b3A6IDguMCwgYm90dG9tOiA4LjAgfSksXG4gICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChTdHJpbmcoZ19uZXdzT3JkZXIpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTguMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnQsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXdzTW9kZWwucmlzZSAhPSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgPyBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlNWQ4LCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAxMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KG5ld3NNb2RlbC5yaXNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6IG5ldyBDb250YWluZXIoKSxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgIGZsZXg6IDYsXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KG5ld3NNb2RlbC50aXRsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxNi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibGFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7IGJvdHRvbTogMTAuMCwgcmlnaHQ6IDQuMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3c01vZGVsLm1hcmsgIT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgID8gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChuZXdzTW9kZWwubWFyaywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHsgY29sb3I6IENvbG9ycy5ibGFjazU0IH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHsgYm90dG9tOiA4LjAsIHJpZ2h0OiA0LjAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogbmV3IENvbnRhaW5lcigpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQobmV3c01vZGVsLmhvdE51bSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoeyBjb2xvcjogQ29sb3JzLmJsYWNrNTQgfSksXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICBmbGV4OiAzLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQXNwZWN0UmF0aW8oe1xuICAgICAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IDMuMCAvIDIuMCxcbiAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2xpcFJSZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuY2lyY3VsYXIoNC4wKSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDYWNoZWROZXR3b3JrSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgIGZhZGVJbkR1cmF0aW9uOiBuZXcgRHVyYXRpb24oeyBtaWxsaXNlY29uZHM6IDEwIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGZhZGVPdXREdXJhdGlvbjogbmV3IER1cmF0aW9uKHsgbWlsbGlzZWNvbmRzOiAxMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpbWFnZVVybDogbmV3c01vZGVsLmltZ1VybCxcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTI0LjAsXG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA2OS4wLFxuICAgICAgICAgICAgICAgICAgICAgIGZpdDogQm94Rml0LmZpbGwsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuaG90Q2FyZChjb250ZXh0LCB0aGlzLm5ld3NNb2RlbCk7XG4gICAgfSBjYXRjaCAoZSQpIHtcbiAgICAgIC8vIGxldCBlID0gZGFydC5nZXRUaHJvd24oZSQpO1xuICAgICAgLy8gTVhKU0xvZy5sb2coJ2NhcmQ6YnVpbGQoY29udGV4dCk6ICBlcnJvcjonICsgZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgTmV3c01vZGVsIHtcbiAgY29uc3RydWN0b3Iob3JkZXIsIHRpdGxlLCBob3ROdW0sIGltZ1VybCwgeyBtYXJrLCByaXNlIH0gPSB7fSkge1xuICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgdGhpcy5ob3ROdW0gPSBob3ROdW07XG4gICAgdGhpcy5pbWdVcmwgPSBpbWdVcmw7XG4gICAgdGhpcy5tYXJrID0gbWFyaztcbiAgICB0aGlzLnJpc2UgPSByaXNlO1xuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKGpzb25NYXApIHtcbiAgICBsZXQgbmV3cyA9IG5ldyBOZXdzTW9kZWwoKTtcblxuICAgIG5ld3Mub3JkZXIgPSBTdHJpbmcoanNvbk1hcFsnb3JkZXInXSk7XG4gICAgbmV3cy50aXRsZSA9IGpzb25NYXBbJ3RpdGxlJ107XG4gICAgbmV3cy5ob3ROdW0gPSBTdHJpbmcoanNvbk1hcFsndm90ZWNvdW50J10pICsgJyDkurrngrnotZ4nO1xuICAgIG5ld3MuaW1nVXJsID0ganNvbk1hcFsnaW1nc3JjJ107XG4gICAgbmV3cy5tYXJrID0ganNvbk1hcFsnc291cmNlJ107XG4gICAgbmV3cy5yaXNlID0ganNvbk1hcFsnYWxpYXMnXTtcblxuICAgIHJldHVybiBuZXdzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBMaXN0Vmlld0RlbW8sXG59O1xuIiwiLy8gIE1YRmx1dHRlckZyYW1ld29ya1xuLy8gIENvcHlyaWdodCAyMDE5IFRoZSBNWEZsdXR0ZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBDb2xvcixcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBMaXN0VmlldyxcbiAgICBMaXN0VGlsZSxcbiAgICBJY29uLFxuICAgIEljb25EYXRhLFxuICAgIEVkZ2VJbnNldHMsXG4gICAgUGFkZGluZyxcbiAgICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbiAgICBOYXZpZ2F0b3Jcbn0gPSByZXF1aXJlKFwiLi4vanNfZmx1dHRlci5qc1wiKTtcblxuXG5sZXQgeyBKU0JvdHRvbUFQUEJhckRlbW8gfSA9IHJlcXVpcmUoXCIuL21hdGVyaWFsL2JvdHRvbV9hcHBfYmFyX2RlbW8uanNcIik7XG5sZXQgeyBKU0JvdHRvbU5hdmlnYXRpb25EZW1vIH0gPSByZXF1aXJlKFwiLi9tYXRlcmlhbC9ib3R0b21fbmF2aWdhdGlvbl9kZW1vLmpzXCIpO1xubGV0IHsgSlNFYXN5VUlEZW1vIH0gPSByZXF1aXJlKFwiLi9tYXRlcmlhbC9lYXN5X3VpX2RlbW8uanNcIik7XG5sZXQgeyBKU1RhYnNEZW1vIH0gPSByZXF1aXJlKFwiLi9tYXRlcmlhbC90YWJzX2RlbW8uanNcIik7XG5cbmNsYXNzIEpTTWF0ZXJpYWxQYWdlIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0pTTWF0ZXJpYWxQYWdlJyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSlNNYXRlcmlhbFBhZ2VTdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIEpTTWF0ZXJpYWxQYWdlU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHcgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJNYXRlcmlhbCBEZW1vXCIpXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBhZGRpbmcoeyBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgxLjApIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFkaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMzlkLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwgeyBjb2xvcjogbmV3IENvbG9yKDB4RkZGRjk4MDApIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdCb3R0b20gYXBwIGJhcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCdPcHRpb25hbCBmbG9hdGluZyBhY3Rpb24gYnV0dG9uIG5vdGNoJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSlNCb3R0b21BUFBCYXJEZW1vO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBsZWFkaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMzlkLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwgeyBjb2xvcjogbmV3IENvbG9yKDB4RkZGRjk4MDApIH0pLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGl0bGU6IG5ldyBUZXh0KCdCb3R0b20gbmF2aWdhdGlvbuKAlOKAlOWKqOeUu+mcgOWujOWWhOaJjeiDveWHuueOsCcpLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCdCb3R0b20gbmF2aWdhdGlvbiB3aXRoIGNyb3NzLWZhZGluZyB2aWV3cycpLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpTQm90dG9tTmF2aWdhdGlvbkRlbW87XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICB9KSlcblxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyB9KSxcblxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTM5ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHsgY29sb3I6IG5ldyBDb2xvcigweEZGRkY5ODAwKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlNWRmLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJywgbWF0Y2hUZXh0RGlyZWN0aW9uOiB0cnVlIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRWFzeSBVSScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCdFYXN5IFVJIHVzYWdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSlNFYXN5VUlEZW1vO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFkaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMzlkLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwgeyBjb2xvcjogbmV3IENvbG9yKDB4RkZGRjk4MDApIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdUYWJzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogbmV3IFRleHQoJ1RhYnMgd2l0aCBpbmRlcGVuZGVudGx5IHNjcm9sbGFibGUgdmlld3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKU1RhYnNEZW1vO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHc7XG4gICAgfVxuXG4gICAgbmF2aWdhdG9yUHVzaChqc1dpZGdldCkge1xuXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgSlNNYXRlcmlhbFBhZ2UgfTtcbiIsIlxubGV0IHtcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFRleHQsXG4gIExpc3RWaWV3LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIEdlc3R1cmVEZXRlY3RvcixcbiAgRXhwYW5kZWQsXG4gIFJvdyxcbiAgQWxpZ25tZW50RGlyZWN0aW9uYWwsXG4gIEJvdHRvbUFwcEJhcixcbiAgSWNvbkJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b25Mb2NhdGlvbixcbiAgQ29sb3JzLFxuICBDaXJjdWxhck5vdGNoZWRSZWN0YW5nbGUsXG4gIEVkZ2VJbnNldHNEaXJlY3Rpb25hbCxcbiAgVGV4dFN0eWxlLFxuICBSYWRpbyxcbiAgU2VtYW50aWNzLFxuICBNZXJnZVNlbWFudGljcyxcbiAgUmF3TWF0ZXJpYWxCdXR0b24sXG4gIEJveENvbnN0cmFpbnRzLFxuICBIaXRUZXN0QmVoYXZpb3IsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIENpcmNsZUJvcmRlcixcbiAgQm9yZGVyU2lkZSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFNpemVkQm94XG5cbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgSlNDaG9pY2VWYWx1ZXtcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgbGFiZWxcbiAgICB9ID0ge30pIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICB9XG59XG5cbmNsYXNzIEpTTmFtZWRDb2xvcntcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIGNvbG9yLFxuICAgICAgICBuYW1lXG4gICAgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG59XG5cbi8vIE5vdGNoXG5rU2hvd05vdGNoVHJ1ZSA9IG5ldyBKU0Nob2ljZVZhbHVlKHtcbiAgICB0aXRsZTogJ09uJyxcbiAgICBsYWJlbDogJ3Nob3cgYm90dG9tIGFwcGJhciBub3RjaCcsXG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5rU2hvd05vdGNoRmFsc2UgPSBuZXcgSlNDaG9pY2VWYWx1ZSh7XG4gICAgdGl0bGU6ICdPZmYnLFxuICAgIGxhYmVsOiAnZG8gbm90IHNob3cgYm90dG9tIGFwcGJhciBub3RjaCcsXG4gICAgdmFsdWU6IGZhbHNlXG59KTtcblxuLy8gRkFCIFBvc2l0aW9uXG5rRmFiRW5kRG9ja2VkID0gbmV3IEpTQ2hvaWNlVmFsdWUoe1xuICAgIHRpdGxlOiAnQXR0YWNoZWQgLSBFbmQnLFxuICAgIGxhYmVsOiAnZmxvYXRpbmcgYWN0aW9uIGJ1dHRvbiBpcyBkb2NrZWQgYXQgdGhlIGVuZCBvZiB0aGUgYm90dG9tIGFwcCBiYXInLFxuICAgIHZhbHVlOiBGbG9hdGluZ0FjdGlvbkJ1dHRvbkxvY2F0aW9uLmVuZERvY2tlZFxufSk7XG5cbmtGYWJDZW50ZXJEb2NrZWQgPSBuZXcgSlNDaG9pY2VWYWx1ZSh7XG4gICAgdGl0bGU6ICdBdHRhY2hlZCAtIENlbnRlcicsXG4gICAgbGFiZWw6ICdmbG9hdGluZyBhY3Rpb24gYnV0dG9uIGlzIGRvY2tlZCBhdCB0aGUgY2VudGVyIG9mIHRoZSBib3R0b20gYXBwIGJhcicsXG4gICAgdmFsdWU6IEZsb2F0aW5nQWN0aW9uQnV0dG9uTG9jYXRpb24uY2VudGVyRG9ja2VkXG59KTtcblxua0ZhYkVuZEZsb2F0ID0gbmV3IEpTQ2hvaWNlVmFsdWUoe1xuICAgIHRpdGxlOiAnRnJlZSAtIEVuZCcsXG4gICAgbGFiZWw6ICdmbG9hdGluZyBhY3Rpb24gYnV0dG9uIGZsb2F0cyBhYm92ZSB0aGUgZW5kIG9mIHRoZSBib3R0b20gYXBwIGJhcicsXG4gICAgdmFsdWU6IEZsb2F0aW5nQWN0aW9uQnV0dG9uTG9jYXRpb24uZW5kRmxvYXRcbn0pO1xuXG5rRmFiQ2VudGVyRmxvYXQgPSBuZXcgSlNDaG9pY2VWYWx1ZSh7XG4gICAgdGl0bGU6ICdGcmVlIC0gQ2VudGVyJyxcbiAgICBsYWJlbDogJ2Zsb2F0aW5nIGFjdGlvbiBidXR0b24gaXMgZmxvYXRzIGFib3ZlIHRoZSBjZW50ZXIgb2YgdGhlIGJvdHRvbSBhcHAgYmFyJyxcbiAgICB2YWx1ZTogRmxvYXRpbmdBY3Rpb25CdXR0b25Mb2NhdGlvbi5jZW50ZXJGbG9hdFxufSk7ICAgICAgICBcbiAgICBcblxua0ZhYkNvbG9ycyA9IFtcbiAgICBuZXcgSlNOYW1lZENvbG9yKHtjb2xvcjogbmV3IENvbG9yKDB4RkZGRkZGRkYpLCBuYW1lOiAnQ2xlYXInfSksXG4gICAgbmV3IEpTTmFtZWRDb2xvcih7Y29sb3I6IG5ldyBDb2xvcigweEZGRkZDMTAwKSwgbmFtZTogJ09yYW5nZSd9KSxcbiAgICBuZXcgSlNOYW1lZENvbG9yKHtjb2xvcjogbmV3IENvbG9yKDB4RkY5MUZBRkYpLCBuYW1lOiAnTGlnaHQgQmx1ZSd9KSxcbiAgICBuZXcgSlNOYW1lZENvbG9yKHtjb2xvcjogbmV3IENvbG9yKDB4RkYwMEQxRkYpLCBuYW1lOiAnQ3lhbid9KSxcbiAgICBuZXcgSlNOYW1lZENvbG9yKHtjb2xvcjogbmV3IENvbG9yKDB4RkYwMEJDRkYpLCBuYW1lOiAnQ2VydWxlYW4nfSksXG4gICAgbmV3IEpTTmFtZWRDb2xvcih7Y29sb3I6IG5ldyBDb2xvcigweEZGMDA5QkVFKSwgbmFtZTogJ0JsdWUnfSlcbl07XG5cblxuY2xhc3MgX0pTSGVhZGluZyBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yICh7XG4gICAgICAgIHRleHRcbiAgICB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KXtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgaGVpZ2h0OiA1Ni4wLFxuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0c0RpcmVjdGlvbmFsLm9ubHkoe3N0YXJ0OiAyNi4wfSksXG4gICAgICAgICAgICBhbGlnbm1lbnQ6IG5ldyBBbGlnbm1lbnREaXJlY3Rpb25hbCh7c3RhcnQ6IC0xLjAsIHk6MC4wfSksXG4gICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0LFxuICAgICAgICAgICAgICAgIHtzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGluaGVyaXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTguMCxcbiAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbkNvbG9yOiBuZXcgQ29sb3IoMHhGRjEyMzQ1NiksXG4gICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb25TdHlsZTogVGV4dERlY29yYXRpb25TdHlsZS53YXZ5LFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogbmV3IENvbG9yKDB4RkYxMjM0NTYpXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICApXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgX0pTUmFkaW9JdGVtIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldHtcbiAgICBjb25zdHJ1Y3RvciAoe1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZ3JvdXBWYWx1ZSxcbiAgICAgICAgb25DaGFuZ2VkXG4gICAgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5ncm91cFZhbHVlID0gZ3JvdXBWYWx1ZTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZWQgPSBvbkNoYW5nZWQ7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJbSlNdLU1YSlNGbHV0dGVyOjogcmVxdWlyZS4uLi4uLi4uLi5cIiwgdmFsdWUgLCBncm91cFZhbHVlKTtcblxuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpe1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBoZWlnaHQ6IDU2LjAsXG4gICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzRGlyZWN0aW9uYWwub25seSh7c3RhcnQ6IDM2LjB9KSxcbiAgICAgICAgICAgIGFsaWdubWVudDogbmV3IEFsaWdubWVudERpcmVjdGlvbmFsKHtzdGFydDogLTEuMCwgeTowLjB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgTWVyZ2VTZW1hbnRpY3Moe1xuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSYWRpbyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBWYWx1ZTogdGhpcy5ncm91cFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlZCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFNlbWFudGljcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy52YWx1ZS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBHZXN0dXJlRGV0ZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3I6IEhpdFRlc3RCZWhhdmlvci5vcGFxdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2VkKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRoaXMudmFsdWUudGl0bGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBfSlNDb2xvcnNJdGVtIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldHtcbiAgICBjb25zdHJ1Y3RvciAoe1xuICAgICAgICBjb2xvcnMsXG4gICAgICAgIHNlbGVjdGVkQ29sb3IsXG4gICAgICAgIG9uQ2hhbmdlZFxuICAgIH0gPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbG9ycyA9IGNvbG9ycztcbiAgICAgICAgdGhpcy5zZWxlY3RlZENvbG9yID0gc2VsZWN0ZWRDb2xvcjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZWQgPSBvbkNoYW5nZWQ7XG4gICAgfVxuICAgIFxuICAgIGJ1aWxkKGNvbnRleHQpe1xuICAgICAgICBsZXQgcm93Q29udGVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5jb2xvcnMuZm9yRWFjaChmdW5jdGlvbihuYW1lZENvbG9yKSB7XG4gICAgICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFJhd01hdGVyaWFsQnV0dG9uKHtcbiAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZWQobmFtZWRDb2xvci5jb2xvcik7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzOiBuZXcgQm94Q29uc3RyYWludHMoe1xuICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogMzIsXG4gICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAzMixcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiAzMixcbiAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAzMlxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogbmFtZWRDb2xvci5jb2xvcixcbiAgICAgICAgICAgICAgICBzaGFwZTogbmV3IENpcmNsZUJvcmRlcih7XG4gICAgICAgICAgICAgICAgICAgIHNpZGU6IG5ldyBCb3JkZXJTaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBuYW1lZENvbG9yLmNvbG9yID09IHRoaXMuc2VsZWN0ZWRDb2xvciA/IENvbG9ycy5ibGFjayA6IG5ldyBDb2xvcigweEZGRDVEN0RBKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyLjBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFNlbWFudGljcyh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuYW1lZENvbG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBuYW1lZENvbG9yLmNvbG9yID09IHRoaXMuc2VsZWN0ZWRDb2xvclxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJvd0NvbnRlbnRzLnB1c2god2lkZ2V0KTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICByZXR1cm4gbmV3IFJvdyh7XG4gICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VFdmVubHksXG4gICAgICAgICAgICBjaGlsZHJlbjogcm93Q29udGVudHNcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBKU0JvdHRvbUFQUEJhckRlbW8gZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignSlNCb3R0b21BUFBCYXJEZW1vJyk7XG4gICAgfVxuICBcbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKU0JvdHRvbUFQUEJhckRlbW9TdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIEpTQm90dG9tQVBQQmFyRGVtb1N0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICAvLyBfc2NhZmZvbGRLZXk7Ly9uZXcgR2xvYmFsS2V5KCk7XG4gICAgY29uc3RydWN0b3IgKHdpZGdldCkge1xuICAgICAgICBzdXBlcih3aWRnZXQpO1xuXG4gICAgICAgIHRoaXMuX3Nob3dOb3RjaCA9IGtTaG93Tm90Y2hUcnVlO1xuICAgICAgICB0aGlzLl9mYWJMb2NhdGlvbiA9IGtGYWJDZW50ZXJEb2NrZWQ7XG4gICAgICAgIHRoaXMuX2JhYkNvbG9yID0ga0ZhYkNvbG9yc1sxXS5jb2xvcjtcbiAgICB9XG5cbiAgICBzaG93U25hY2tCYXIoKSB7XG4gICAgICAgIHRleHQgPVxuICAgICAgICBcIldoZW4gdGhlIFNjYWZmb2xkJ3MgZmxvYXRpbmcgYWN0aW9uIGJ1dHRvbiBsb2NhdGlvbiBjaGFuZ2VzLCBcIlxuICAgICAgICAndGhlIGZsb2F0aW5nIGFjdGlvbiBidXR0b24gYW5pbWF0ZXMgdG8gaXRzIG5ldyBwb3NpdGlvbi4nXG4gICAgICAgICdUaGUgQm90dG9tQXBwQmFyIGFkYXB0cyBpdHMgc2hhcGUgYXBwcm9wcmlhdGVseS4nO1xuXG4gICAgICAgIF9zY2FmZm9sZEtleS5jdXJyZW50U3RhdGUuc2hvd1NuYWNrQmFyKFxuICAgICAgICAgICAgbmV3IFNuYWNrQmFyKHtjb250ZW50OiBUZXh0KHRleHQpfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBvblNob3dOb3RjaENoYW5nZWQodmFsdWUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJbSlNdLU1YSlNGbHV0dGVyOjogcmVxdWlyZS4uLi4uLi4uLi5cIik7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9zaG93Tm90Y2ggPSB2YWx1ZTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgXG4gICAgb25GYWJMb2NhdGlvbkNoYW5nZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZhYkxvY2F0aW9uID0gdmFsdWU7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIFxuICAgIG9uQmFiQ29sb3JDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2JhYkNvbG9yID0gdmFsdWU7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCl7XG4gICAgICAgIGxldCBmbG9hdGluZ0J1dHRvbkxvY2F0aW9uID0gdGhpcy5fZmFiTG9jYXRpb24udmFsdWU7XG5cbiAgICAgICAgbGV0IHJvd0NvbnRlbnRzID0gW1xuICAgICAgICAgICAgbmV3IEljb25CdXR0b24oe1xuICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZDIse2ZvbnRGYW1pbHk6J01hdGVyaWFsSWNvbnMnLCBzZW1hbnRpY0xhYmVsOiAnU2hvdyBib3R0b20gc2hlZXQnfSkpLFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdTaG93IGJvdHRvbSBzaGVldCcsXG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcihcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTbmFja0Jhcih7Y29udGVudDogbmV3IFRleHQoJ1RoaXMgaXMgYSBkdW1teSBzaGVldCBhY3Rpb24uJyl9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoZmxvYXRpbmdCdXR0b25Mb2NhdGlvbiA9PSBGbG9hdGluZ0FjdGlvbkJ1dHRvbkxvY2F0aW9uLmNlbnRlckRvY2tlZCB8fCBmbG9hdGluZ0J1dHRvbkxvY2F0aW9uID09IEZsb2F0aW5nQWN0aW9uQnV0dG9uTG9jYXRpb24uY2VudGVyRmxvYXQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJvd0NvbnRlbnRzLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtjaGlsZDpuZXcgU2l6ZWRCb3goKX0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcm93Q29udGVudHMucHVzaChcbiAgICAgICAgICAgIG5ldyBJY29uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlOGI2LHtmb250RmFtaWx5OidNYXRlcmlhbEljb25zJywgc2VtYW50aWNMYWJlbDogJ3Nob3cgc2VhcmNoIGFjdGlvbid9KSksXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogJ3Nob3cgc2VhcmNoIGFjdGlvbicsXG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcihcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNuYWNrQmFyKHtjb250ZW50OiBuZXcgVGV4dCgnVGhpcyBpcyBhIGR1bW15IHNlYXJjaCBhY3Rpb24uJyl9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICByb3dDb250ZW50cy5wdXNoKFxuICAgICAgICAgICAgbmV3IEljb25CdXR0b24oe1xuICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZDMse2ZvbnRGYW1pbHk6J01hdGVyaWFsSWNvbnMnLCBzZW1hbnRpY0xhYmVsOiAnU2hvdyBtZW51IGFjdGlvbnMnfSkpLFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdTaG93IG1lbnUgYWN0aW9ucycsXG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcihcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTbmFja0Jhcih7Y29udGVudDogbmV3IFRleHQoJ1RoaXMgaXMgYSBkdW1teSBtZW51IGFjdGlvbi4nKX0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgLy8ga2V5OiBfc2NhZmZvbGRLZXksXG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQm90dG9tIGFwcCBiYXInKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuIDogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgX0pTSGVhZGluZyh7dGV4dDogXCJOb3RjaFwifSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBfSlNSYWRpb0l0ZW0oe3ZhbHVlOiBrU2hvd05vdGNoVHJ1ZSwgZ3JvdXBWYWx1ZTogdGhpcy5fc2hvd05vdGNoLCBvbkNoYW5nZWQ6IHRoaXMub25TaG93Tm90Y2hDaGFuZ2VkLmJpbmQodGhpcyl9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IF9KU1JhZGlvSXRlbSh7dmFsdWU6IGtTaG93Tm90Y2hGYWxzZSwgZ3JvdXBWYWx1ZTogdGhpcy5fc2hvd05vdGNoLCBvbkNoYW5nZWQ6IHRoaXMub25TaG93Tm90Y2hDaGFuZ2VkLmJpbmQodGhpcyl9KSxcblxuICAgICAgICAgICAgICAgICAgICBuZXcgX0pTSGVhZGluZyh7dGV4dDogXCJGQUIgUG9zaXRpb25cIn0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgX0pTUmFkaW9JdGVtKHt2YWx1ZToga0ZhYkVuZERvY2tlZCwgZ3JvdXBWYWx1ZTogdGhpcy5fZmFiTG9jYXRpb24sIG9uQ2hhbmdlZDogdGhpcy5vbkZhYkxvY2F0aW9uQ2hhbmdlZC5iaW5kKHRoaXMpfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBfSlNSYWRpb0l0ZW0oe3ZhbHVlOiBrRmFiQ2VudGVyRG9ja2VkLCBncm91cFZhbHVlOiB0aGlzLl9mYWJMb2NhdGlvbiwgb25DaGFuZ2VkOiB0aGlzLm9uRmFiTG9jYXRpb25DaGFuZ2VkLmJpbmQodGhpcyl9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IF9KU1JhZGlvSXRlbSh7dmFsdWU6IGtGYWJFbmRGbG9hdCwgZ3JvdXBWYWx1ZTogdGhpcy5fZmFiTG9jYXRpb24sIG9uQ2hhbmdlZDogdGhpcy5vbkZhYkxvY2F0aW9uQ2hhbmdlZC5iaW5kKHRoaXMpfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBfSlNSYWRpb0l0ZW0oe3ZhbHVlOiBrRmFiQ2VudGVyRmxvYXQsIGdyb3VwVmFsdWU6IHRoaXMuX2ZhYkxvY2F0aW9uLCBvbkNoYW5nZWQ6IHRoaXMub25GYWJMb2NhdGlvbkNoYW5nZWQuYmluZCh0aGlzKX0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBfSlNIZWFkaW5nKHt0ZXh0OiBcIkFwcCBiYXIgY29sb3JcIn0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgX0pTQ29sb3JzSXRlbSh7Y29sb3JzOiBrRmFiQ29sb3JzLCBzZWxlY3RlZENvbG9yOiB0aGlzLl9iYWJDb2xvciwgb25DaGFuZ2VkOnRoaXMub25CYWJDb2xvckNoYW5nZS5iaW5kKHRoaXMpfSlcblxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm90dG9tTmF2aWdhdGlvbkJhcjogbmV3IEJvdHRvbUFwcEJhcih7XG4gICAgICAgICAgICAgICAgLy8gY29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe2NoaWxkcmVuOiByb3dDb250ZW50c30pLFxuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLl9iYWJDb2xvcixcbiAgICAgICAgICAgICAgICBzaGFwZTogdGhpcy5fc2hvd05vdGNoLnZhbHVlID09IHRydWUgPyBuZXcgQ2lyY3VsYXJOb3RjaGVkUmVjdGFuZ2xlKCkgOiBudWxsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMTQ1LHtmb250RmFtaWx5OidNYXRlcmlhbEljb25zJyxzZW1hbnRpY0xhYmVsOiAnQWN0aW9uJ30pKSxcbiAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5vcmFuZ2VcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmxvYXRpbmdBY3Rpb25CdXR0b25Mb2NhdGlvbjogZmxvYXRpbmdCdXR0b25Mb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBKU0JvdHRvbUFQUEJhckRlbW8gfTtcblxuIiwiXG5sZXQge1xuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgQ2VudGVyLFxuICBBcHBCYXIsXG4gIFN0YWNrLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQm90dG9tTmF2aWdhdGlvbkJhcixcbiAgQm90dG9tTmF2aWdhdGlvbkJhckl0ZW0sXG4gIEJvdHRvbU5hdmlnYXRpb25CYXJUeXBlLFxuICBDb2xvcnMsXG4gIFNlbWFudGljcyxcbiAgQW5pbWF0aW9uQ29udHJvbGxlcixcbiAgRHVyYXRpb24sXG4gIEN1cnZlVHdlZW4sXG4gIEludGVydmFsLFxuICBDdXJ2ZXMsXG4gIEZhZGVUcmFuc2l0aW9uLFxuICBTbGlkZVRyYW5zaXRpb24sXG4gIFR3ZWVuLFxuICBJY29uVGhlbWUsXG4gIEljb25UaGVtZURhdGEsXG4gIE9mZnNldCxcbiAgQm94RGVjb3JhdGlvbixcbiAgQm9yZGVyXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIE5hdmlnYXRpb25JY29uVmlldyB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBpY29uLFxuICAgICAgICBhY3RpdmVJY29uLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgY29sb3IsXG4gICAgICAgIHZzeW5jXG4gICAgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuX2ljb24gPSBpY29uO1xuICAgICAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLl9jb2xvciA9IGNvbG9yO1xuICAgICAgICB0aGlzLml0ZW0gPSBuZXcgQm90dG9tTmF2aWdhdGlvbkJhckl0ZW0oe1xuICAgICAgICAgICAgaWNvbjogaWNvbixcbiAgICAgICAgICAgIGFjdGl2ZUljb246IGFjdGl2ZUljb24sXG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQodGl0bGUpLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvclxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFuaW1hdGlvbkNvbnRyb2xsZXIoe1xuICAgICAgICAgICAgZHVyYXRpb246IG5ldyBEdXJhdGlvbih7bWlsbGlzZWNvbmRzOiAyMDB9KVxuICAgICAgICAgICAgLy8gdnN5bmM6IHZzeW5jLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uID0gdGhpcy5jb250cm9sbGVyLmRyaXZlKG5ldyBDdXJ2ZVR3ZWVuKHtcbiAgICAgICAgICAgIGN1cnZlOiBuZXcgSW50ZXJ2YWwoMC41LCAxLjAsIHtcbiAgICAgICAgICAgICAgICBjdXJ2ZTogQ3VydmVzLmZhc3RPdXRTbG93SW5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgXG4gICAgdHJhbnNpdGlvbih0eXBlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBpY29uQ29sb3I7XG4gICAgICAgIGlmICh0eXBlID09IEJvdHRvbU5hdmlnYXRpb25CYXJUeXBlLnNoaWZ0aW5nKSB7XG4gICAgICAgICAgICBpY29uQ29sb3IgPSB0aGlzLl9jb2xvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCB0aGVtZURhdGEgPSBUaGVtZS5vZihjb250ZXh0KTtcbiAgICAgICAgICAgIGljb25Db2xvciA9IHRoZW1lRGF0YS5icmlnaHRuZXNzID09IEJyaWdodG5lc3MubGlnaHQgPyB0aGVtZURhdGEucHJpbWFyeUNvbG9yIDogdGhlbWVEYXRhLmFjY2VudENvbG9yO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IEZhZGVUcmFuc2l0aW9uKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IHRoaXMuX2FuaW1hdGlvbixcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgU2xpZGVUcmFuc2l0aW9uKHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5fYW5pbWF0aW9uLmRyaXZlKG5ldyBUd2Vlbih7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiBuZXcgT2Zmc2V0KDAuMCwgMC4yKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBuZXcgT2Zmc2V0KDAuMCwgMC4wKVxuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb25UaGVtZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IG5ldyBJY29uVGhlbWVEYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpY29uQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAxMjAuMFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBTZW1hbnRpY3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdQbGFjZWhvbGRlciBmb3IgJHRoaXMuX3RpdGxlIHRhYicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogdGhpcy5faWNvblxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSBcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmNsYXNzIEN1c3RvbUljb24gZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIC8vLyBUT0RPOlxuICAgICAgICBsZXQgaWNvblRoZW1lRGF0YSA9IEljb25UaGVtZS5vZihjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLmFsbCg0LjApLFxuICAgICAgICAgICAgd2lkdGg6IGljb25UaGVtZURhdGEuc2l6ZSAtIDguMCxcbiAgICAgICAgICAgIGhlaWdodDogaWNvblRoZW1lRGF0YS5zaXplIC0gOC4wLFxuICAgICAgICAgICAgY29sb3I6IGljb25UaGVtZURhdGEuY29sb3JcbiAgICAgICAgfSk7IFxuICAgIH1cbn1cblxuY2xhc3MgQ3VzdG9tSW5hY3RpdmVJY29uIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICAvLy8gVE9ETzpcbiAgICAgICAgbGV0IGljb25UaGVtZURhdGEgPSBJY29uVGhlbWUub2YoY29udGV4dCk7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5hbGwoNC4wKSxcbiAgICAgICAgICAgIHdpZHRoOiBpY29uVGhlbWVEYXRhLnNpemUgLSA4LjAsXG4gICAgICAgICAgICBoZWlnaHQ6IGljb25UaGVtZURhdGEuc2l6ZSAtIDguMCxcbiAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICBib3JkZXI6IEJvcmRlci5hbGwoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogaWNvblRoZW1lRGF0YS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIuMFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTsgXG4gICAgfVxufVxuXG5jbGFzcyBKU0JvdHRvbU5hdmlnYXRpb25EZW1vIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0pTQm90dG9tTmF2aWdhdGlvbkRlbW8nKTtcbiAgICB9XG4gIFxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEpTQm90dG9tTmF2aWdhdGlvbkRlbW9TdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIEpTQm90dG9tTmF2aWdhdGlvbkRlbW9TdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IgKHdpZGdldCkge1xuICAgICAgICBzdXBlcih3aWRnZXQpO1xuICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXggPSAwO1xuICAgICAgICB0aGlzLl90eXBlID0gQm90dG9tTmF2aWdhdGlvbkJhclR5cGUuc2hpZnRpbmc7XG4gICAgICAgIHRoaXMuX25hdmlnYXRpb25WaWV3cyA9IFtdO1xuICAgIH1cblxuICAgIGluaXRTdGF0ZSgpIHtcbiAgICAgICAgLy8gdGhpcy5fbmF2aWdhdGlvblZpZXdzID0gW1xuICAgICAgICAvLyAgICAgbmV3IE5hdmlnYXRpb25JY29uVmlldyh7XG4gICAgICAgIC8vICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTE5MCwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgLy8gICAgICAgICB0aXRsZTogJ0FsYXJtJyxcbiAgICAgICAgLy8gICAgICAgICBjb2xvcjogQ29sb3JzLmRlZXBQdXJwbGUsXG4gICAgICAgIC8vICAgICAgICAgdnN5bmM6IHRoaXMsXG4gICAgICAgIC8vICAgICB9KSxcbiAgICAgICAgLy8gICAgIG5ldyBOYXZpZ2F0aW9uSWNvblZpZXcoe1xuICAgICAgICAvLyAgICAgICAgIGFjdGl2ZUljb246IG5ldyBDdXN0b21JY29uKCksXG4gICAgICAgIC8vICAgICAgICAgaWNvbjogbmV3IEN1c3RvbUluYWN0aXZlSWNvbigpLFxuICAgICAgICAvLyAgICAgICAgIHRpdGxlOiAnQm94JyxcbiAgICAgICAgLy8gICAgICAgICBjb2xvcjogQ29sb3JzLmRlZXBPcmFuZ2UsXG4gICAgICAgIC8vICAgICAgICAgdnN5bmM6IHRoaXMsXG4gICAgICAgIC8vICAgICB9KSxcbiAgICAgICAgLy8gICAgIG5ldyBOYXZpZ2F0aW9uSWNvblZpZXcoe1xuICAgICAgICAvLyAgICAgICAgIGFjdGl2ZUljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUyYmQsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgIC8vICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTJjMiwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgLy8gICAgICAgICB0aXRsZTogJ0Nsb3VkJyxcbiAgICAgICAgLy8gICAgICAgICBjb2xvcjogQ29sb3JzLnRlYWwsXG4gICAgICAgIC8vICAgICAgICAgdnN5bmM6IHRoaXMsXG4gICAgICAgIC8vICAgICB9KSxcbiAgICAgICAgLy8gICAgIG5ldyBOYXZpZ2F0aW9uSWNvblZpZXcoe1xuICAgICAgICAvLyAgICAgICAgIGFjdGl2ZUljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU4N2QsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgIC8vICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTg3ZSwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgLy8gICAgICAgICB0aXRsZTogJ0Zhdm9yaXRlcycsXG4gICAgICAgIC8vICAgICAgICAgY29sb3I6IENvbG9ycy5pbmRpZ28sXG4gICAgICAgIC8vICAgICAgICAgdnN5bmM6IHRoaXMsXG4gICAgICAgIC8vICAgICB9KSxcbiAgICAgICAgLy8gICAgIG5ldyBOYXZpZ2F0aW9uSWNvblZpZXcoe1xuICAgICAgICAvLyAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU2MTQsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgIC8vICAgICAgICAgdGl0bGU6ICdFdmVudCcsXG4gICAgICAgIC8vICAgICAgICAgY29sb3I6IENvbG9ycy5waW5rLFxuICAgICAgICAvLyAgICAgICAgIHZzeW5jOiB0aGlzLFxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vIF07XG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLl9uYXZpZ2F0aW9uVmlld3NbdGhpcy5fY3VycmVudEluZGV4XS5jb250cm9sbGVyLnZhbHVlID0gMS4wO1xuICAgIH1cblxuICAgIGRpc3Bvc2UoKXtcbiAgICAgICAgdGhpcy5fbmF2aWdhdGlvblZpZXdzLm1hcChmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgICAgICB2aWV3LmNvbnRyb2xsZXIuZGlzcG9zZSgpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIF9idWlsZFRyYW5zaXRpb25zU3RhY2soY29udGV4dCkge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuX25hdmlnYXRpb25WaWV3cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB0cmFuc2l0aW9ucy5wdXNoKHRoaXMuX25hdmlnYXRpb25WaWV3c1tpXS50cmFuc2l0aW9uKHRoaXMuX3R5cGUsIGNvbnRleHQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zaXRpb25zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIGxldCBhQW5pbWF0aW9uID0gYS5vcGFjaXR5O1xuICAgICAgICAgICAgbGV0IGJBbmltYXRpb24gPSBiLm9wYWNpdHk7XG4gICAgICAgICAgICBsZXQgYVZhbHVlID0gYUFuaW1hdGlvbi52YWx1ZTtcbiAgICAgICAgICAgIGxldCBiVmFsdWUgPSBiQW5pbWF0aW9uLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIGFWYWx1ZSA8IGJWYWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBTdGFjayh7XG4gICAgICAgICAgICBjaGlsZHJlbjogdHJhbnNpdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGJ1aWxkKGNvbnRleHQpe1xuICAgICAgICB0aGlzLl9uYXZpZ2F0aW9uVmlld3MgPSBbXG4gICAgICAgICAgICBuZXcgTmF2aWdhdGlvbkljb25WaWV3KHtcbiAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMTkwLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkpLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnQWxhcm0nLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZGVlcFB1cnBsZVxuICAgICAgICAgICAgICAgIC8vIHZzeW5jOiB0aGlzLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTmF2aWdhdGlvbkljb25WaWV3KHtcbiAgICAgICAgICAgICAgICBhY3RpdmVJY29uOiBuZXcgQ3VzdG9tSWNvbigpLFxuICAgICAgICAgICAgICAgIGljb246IG5ldyBDdXN0b21JbmFjdGl2ZUljb24oKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0JveCcsXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5kZWVwT3JhbmdlXG4gICAgICAgICAgICAgICAgLy8gdnN5bmM6IHRoaXMsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBOYXZpZ2F0aW9uSWNvblZpZXcoe1xuICAgICAgICAgICAgICAgIGFjdGl2ZUljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUyYmQsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTJjMiwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0Nsb3VkJyxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnRlYWxcbiAgICAgICAgICAgICAgICAvLyB2c3luYzogdGhpcyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IE5hdmlnYXRpb25JY29uVmlldyh7XG4gICAgICAgICAgICAgICAgYWN0aXZlSWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTg3ZCwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlODdlLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkpLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRmF2b3JpdGVzJyxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmluZGlnb1xuICAgICAgICAgICAgICAgIC8vIHZzeW5jOiB0aGlzLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgTmF2aWdhdGlvbkljb25WaWV3KHtcbiAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlNjE0LCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkpLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRXZlbnQnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucGlua1xuICAgICAgICAgICAgICAgIC8vIHZzeW5jOiB0aGlzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX25hdmlnYXRpb25WaWV3c1t0aGlzLl9jdXJyZW50SW5kZXhdLmNvbnRyb2xsZXIudmFsdWUgPSAxLjA7XG5cbiAgICAgICAgbGV0IGJvdE5hdkJhciA9IG5ldyBCb3R0b21OYXZpZ2F0aW9uQmFyKHtcbiAgICAgICAgICAgIGl0ZW1zOnRoaXMuX25hdmlnYXRpb25WaWV3cy5tYXAoZnVuY3Rpb24obmF2aWdhdGlvblZpZXcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmF2aWdhdGlvblZpZXcuaXRlbTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY3VycmVudEluZGV4OiB0aGlzLl9jdXJyZW50SW5kZXgsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLl90eXBlLFxuICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBhcmdzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9uYXZpZ2F0aW9uVmlld3NbdGhpcy5fY3VycmVudEluZGV4XS5jb250cm9sbGVyLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25hdmlnYXRpb25WaWV3c1t0aGlzLl9jdXJyZW50SW5kZXhdLmNvbnRyb2xsZXIuZm9yd2FyZCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdCb3R0b20gTmF2aWdhdGlvbicpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgICAgICBjaGlsZCA6IHRoaXMuX2J1aWxkVHJhbnNpdGlvbnNTdGFjayhjb250ZXh0KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm90dG9tTmF2aWdhdGlvbkJhcjogYm90TmF2QmFyXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEpTQm90dG9tTmF2aWdhdGlvbkRlbW8gfTtcbiIsIlxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBJY29uQnV0dG9uLFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlclxufSA9IHJlcXVpcmUoXCIuLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5cbmNsYXNzIEpTRWFzeVVJRGVtbyBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdKU0Vhc3lVSURlbW8nKTtcbiAgICB9XG4gIFxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEpTRWFzeVVJRGVtb1N0YXRlKHRoaXMpO1xuICAgIH1cbn1cblxuY2xhc3MgSlNFYXN5VUlEZW1vU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5kcm9wZG93blZhbHVlID0gJ3RocmVlJztcbiAgICAgICAgdGhpcy5pY29uQ29sb3JJbmRleCA9IDEwO1xuICAgICAgICB0aGlzLnNsaWRlclZhbHVlID0gMjUuMDtcbiAgICAgICAgdGhpcy5zbGlkZXJEaXNjcmV0ZVZhbHVlID0gMjAuMDtcbiAgICB9XG5cbiAgICAvLyBCdXR0b25zXG4gICAgX2J1aWxkQnV0dG9ucygpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgICAgICAgIG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VCZXR3ZWVuLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJGbGF0IEJ1dHRvblwiLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtjb2xvcjogbmV3IENvbG9yKDB4RkYwMDAwMDApfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ0ZsYXQgQnV0dG9uIFByZXNzZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSGlnaGxpZ2h0Q2hhbmdlZDogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnRmxhdCBCdXR0b24gb25IaWdobGlnaHRDaGFuZ2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbG9yOiBuZXcgQ29sb3IoMHg2MDAwMDAwMCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSYWlzZWRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIlJhaXNlZCBCdXR0b25cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ1JhaXNlZCBCdXR0b24gUHJlc3NlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb2xvcjogbmV3IENvbG9yKDB4NjAwMDAwMDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMTQ1LCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdGbG9hdGluZyBBY3Rpb24gQnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnRmxvYXRpbmcgQWN0aW9uIEJ1dHRvbiBQcmVzc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTgxNSwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnSWNvbiBCdXR0b24gUHJlc3NlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VCZXR3ZWVuLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERyb3Bkb3duQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5kcm9wZG93blZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbJ29uZScsICd0d28nLCAndGhyZWUnLCAnZm91ciddLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERyb3Bkb3duTWVudUl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1YSlNMb2cubG9nKCdJY29uIEJ1dHRvbiBQcmVzc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb3B1cE1lbnVCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0ZWQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ21vcmUgYnV0dG9uIHByZXNzZWQsIGluZGV4ICcgKyBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1CdWlsZGVyOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvcHVwTWVudUl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnQXBwIGJhciBzY3JvbGxzIGF3YXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9wdXBNZW51SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdBcHAgYmFyIHN0YXlzIGF3YXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9wdXBNZW51SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdBcHAgYmFyIGZsb2F0cycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb3B1cE1lbnVJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0FwcCBiYXIgc25hcHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJ1dHRvbkJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNTaXplOiBNYWluQXhpc1NpemUubWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJhaXNlZEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0J1dHRvbiBCYXIgMScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnQnV0dG9uIEJhciAxIHByZXNzZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSYWlzZWRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdCdXR0b24gQmFyIDInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ0J1dHRvbiBCYXIgMiBwcmVzc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxuXG4gICAgLy8gVGV4dHNcbiAgICBfYnVpbGRUZXh0cygpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDEwLjB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQmV0d2VlbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7cmlnaHQ6IDE1LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ+i/meaYr+S4gOS4qnRleHQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQudzcwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFN0eWxlOiBGb250U3R5bGUuaXRhbGljLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogbmV3IENvbG9yKDB4RkZGRjAwRkYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogVGV4dERlY29yYXRpb24udW5kZXJsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uQ29sb3I6IENvbG9yLmZyb21SR0JPKDAsIDAsIDAsIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uU3R5bGU6IFRleHREZWNvcmF0aW9uU3R5bGUuZG91YmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiBUZXh0T3ZlcmZsb3cuZWxsaXBzaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJpY2hUZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBUZXh0U3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogbmV3IENvbG9yKDB4RkZGRjhDMDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTguMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogVGV4dERlY29yYXRpb24udW5kZXJsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uQ29sb3I6IENvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb25TdHlsZTogVGV4dERlY29yYXRpb25TdHlsZS5kYXNoZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+i2hemVv+aWh+ahiHJpY2ggdGV4dO+8jOi2hemVv+aWh+ahiHJpY2ggdGV4dO+8jOi2hemVv+aWh+ahiHJpY2ggdGV4dO+8jOi2hemVv+aWh+ahiHJpY2ggdGV4dO+8jOi2hemVv+aWh+ahiHJpY2ggdGV4dO+8jOi2hemVv+aWh+ahiHJpY2ggdGV4dCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IFRleHRPdmVyZmxvdy5lbGxpcHNpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heExpbmVzOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cblxuICAgIC8vIEljb25zXG4gICAgX2J1aWxkSWNvbnMoKSB7XG4gICAgICAgIGxldCBpY29uQ29sb3JzID0gW1xuICAgICAgICAgICAgQ29sb3JzLnJlZCxcbiAgICAgICAgICAgIENvbG9ycy5waW5rLFxuICAgICAgICAgICAgQ29sb3JzLnB1cnBsZSxcbiAgICAgICAgICAgIENvbG9ycy5kZWVwUHVycGxlLFxuICAgICAgICAgICAgQ29sb3JzLmluZGlnbyxcbiAgICAgICAgICAgIENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgQ29sb3JzLmxpZ2h0Qmx1ZSxcbiAgICAgICAgICAgIENvbG9ycy5jeWFuLFxuICAgICAgICAgICAgQ29sb3JzLnRlYWwsXG4gICAgICAgICAgICBDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICBDb2xvcnMubGlnaHRHcmVlbixcbiAgICAgICAgICAgIENvbG9ycy5saW1lLFxuICAgICAgICAgICAgQ29sb3JzLnllbGxvdyxcbiAgICAgICAgICAgIENvbG9ycy5hbWJlcixcbiAgICAgICAgICAgIENvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICBDb2xvcnMuZGVlcE9yYW5nZSxcbiAgICAgICAgICAgIENvbG9ycy5icm93bixcbiAgICAgICAgICAgIENvbG9ycy5ncmV5LFxuICAgICAgICAgICAgQ29sb3JzLmJsdWVHcmV5XG4gICAgICAgIF07XG4gICAgICAgIFxuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogMTAuMH0pLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOltcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VCZXR3ZWVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpY29uQ29sb3JzW3RoaXMuaWNvbkNvbG9ySW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlODdjLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pY29uQ29sb3JJbmRleCA9ICh0aGlzLmljb25Db2xvckluZGV4ICsgMSkgJSBpY29uQ29sb3JzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogMjQuMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJY29uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGljb25Db2xvcnNbdGhpcy5pY29uQ29sb3JJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU4N2MsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmljb25Db2xvckluZGV4ID0gKHRoaXMuaWNvbkNvbG9ySW5kZXggKyAxKSAlIGljb25Db2xvcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IDM2LjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpY29uQ29sb3JzW3RoaXMuaWNvbkNvbG9ySW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlODdjLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pY29uQ29sb3JJbmRleCA9ICh0aGlzLmljb25Db2xvckluZGV4ICsgMSkgJSBpY29uQ29sb3JzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogNDguMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUJldHdlZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJY29uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGljb25Db2xvcnNbdGhpcy5pY29uQ29sb3JJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUwMDEsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmljb25Db2xvckluZGV4ID0gKHRoaXMuaWNvbkNvbG9ySW5kZXggKyAxKSAlIGljb25Db2xvcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiAyNC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEljb25CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogaWNvbkNvbG9yc1t0aGlzLmljb25Db2xvckluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTAwMSwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWNvbkNvbG9ySW5kZXggPSAodGhpcy5pY29uQ29sb3JJbmRleCArIDEpICUgaWNvbkNvbG9ycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IDM2LjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpY29uQ29sb3JzW3RoaXMuaWNvbkNvbG9ySW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMDAxLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pY29uQ29sb3JJbmRleCA9ICh0aGlzLmljb25Db2xvckluZGV4ICsgMSkgJSBpY29uQ29sb3JzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogNDguMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG5cbiAgICAvLyBUZXh0RmllbGRzXG4gICAgX2J1aWxkVGV4dEZpZWxkcygpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDEwLjB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHtyaWdodDogMTUuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0RmllbGQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkVHlwZTogVGV4dElucHV0VHlwZS5udW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN1Ym1pdHRlZDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ251bWJlciBvblN1Ym1pdHRlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IElucHV0RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsVGV4dDogJ3BsYWNlaG9sZGVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygnbnVtYmVyIG9uQ2hhbmdlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgU2l6ZWRCb3goe1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNC4wXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dEZpZWxkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IG5ldyBUZXh0RWRpdGluZ0NvbnRyb2xsZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdpbml0aWFsIHRleHQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkVHlwZTogVGV4dElucHV0VHlwZS5lbWFpbEFkZHJlc3MoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VibWl0dGVkOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1YSlNMb2cubG9nKCdlbWFpbCBvblN1Ym1pdHRlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1YSlNMb2cubG9nKCdlbWFpbCBvbkNoYW5nZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cblxuICAgIC8vIFRleHRGb3JtRmllbGRzXG4gICAgX2J1aWxkVGV4dEZvcm1GaWVsZHMoKSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7dG9wOiAxMC4wfSksXG4gICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7cmlnaHQ6IDE1LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dEZvcm1GaWVsZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IElucHV0RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbmV3IFVuZGVybGluZUlucHV0Qm9yZGVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTBiZSwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGludFRleHQ6ICdZb3VyIGVtYWlsIGFkZHJlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFRleHQ6ICdFLW1haWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmRUeXBlOiBUZXh0SW5wdXRUeXBlLmVtYWlsQWRkcmVzcygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRmllbGRTdWJtaXR0ZWQ6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1YSlNMb2cubG9nKCdlbWFpbCBvbkZpZWxkU3VibWl0dGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTaXplZEJveCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI0LjBcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHtyaWdodDogMTUuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0Rm9ybUZpZWxkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgSW5wdXREZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBuZXcgVW5kZXJsaW5lSW5wdXRCb3JkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMGNkLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaW50VGV4dDogJ1doZXJlIGNhbiB3ZSByZWFjaCB5b3U/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxUZXh0OiAnUGhvbmUgTnVtYmVyIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXhUZXh0OiAnKzEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmRUeXBlOiBUZXh0SW5wdXRUeXBlLnBob25lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25GaWVsZFN1Ym1pdHRlZDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVhKU0xvZy5sb2coJ3Bob25lIG9uRmllbGRTdWJtaXR0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxuXG4gICAgLy8gVGV4dEZvcm1GaWVsZHNcbiAgICBfYnVpbGRTbGlkZXIoKSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7dG9wOiAxMC4wfSksXG4gICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7cmlnaHQ6IDE1LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgU2xpZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zbGlkZXJWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW46IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IDEwMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDpmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBhcmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlclZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VtYW50aWNGb3JtYXR0ZXJDYWxsYmFjazogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RvbGxhcnMnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTaXplZEJveCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI0LjAsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7cmlnaHQ6IDE1LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgU2xpZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zbGlkZXJEaXNjcmV0ZVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMTAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2aXNpb25zOiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLnNsaWRlckRpc2NyZXRlVmFsdWUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6ZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gYXJncztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZXJEaXNjcmV0ZVZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KXtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRWFzeSBVSScpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTAuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHQoJ0J1dHRvbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmluZGlnbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZEJ1dHRvbnMoKSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dCgnVGV4dCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmluZGlnbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZFRleHRzKCksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDoxNS4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0ljb25zJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDIwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuaW5kaWdvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkSWNvbnMoKSxcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHt0b3A6MTUuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdUZXh0RmllbGQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5pbmRpZ28sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRUZXh0RmllbGRzKCksXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7dG9wOjE1LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnVGV4dEZvcm1GaWVsZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAyMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmluZGlnbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ib2xkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZFRleHRGb3JtRmllbGRzKCksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDoxNS4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ1NsaWRlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAyMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmluZGlnbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ib2xkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZFNsaWRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBKU0Vhc3lVSURlbW8gfTtcbiIsIlxuXG4vL3RhYnNfZGVtby5qcyDmraPlvI/lvIDlp4vvvIzwn5idXG5cbmxldCB7XG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBTY2FmZm9sZCxcbiAgVGV4dCxcbiAgVGhlbWUsXG4gIEVkZ2VJbnNldHMsXG4gIENvbHVtbixcbiAgU2l6ZWRCb3gsXG4gIENhcmQsXG4gIENyb3NzQXhpc0FsaWdubWVudCxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIEFsaWduLFxuICBDZW50ZXIsXG4gIEltYWdlLFxuICBBbGlnbm1lbnQsXG4gIENpcmNsZUF2YXRhcixcbiAgRGVmYXVsdFRhYkNvbnRyb2xsZXIsXG4gIE5lc3RlZFNjcm9sbFZpZXcsXG4gIFNsaXZlck92ZXJsYXBBYnNvcmJlcixcbiAgU2xpdmVyQXBwQmFyLFxuICBUYWJCYXIsXG4gIFRhYixcbiAgVGFiQmFyVmlldyxcbiAgU2FmZUFyZWEsXG4gIEJ1aWxkZXIsXG4gIEN1c3RvbVNjcm9sbFZpZXcsXG4gIFNsaXZlckNoaWxkQnVpbGRlckRlbGVnYXRlLFxuICBTbGl2ZXJPdmVybGFwSW5qZWN0b3IsXG4gIFNsaXZlclBhZGRpbmcsXG4gIFNsaXZlckZpeGVkRXh0ZW50TGlzdCxcbiAgUGFkZGluZ1xuICBcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxubGV0IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2UgPSAnZmx1dHRlcl9nYWxsZXJ5X2Fzc2V0cyc7XG5cbmNsYXNzIF9QYWdlIHtcbiAgICBjb25zdHJ1Y3Rvcih7bGFiZWx9KSB7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICB9XG5cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhYmVsWzBdO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJyRydW50aW1lVHlwZShcIiR0aGlzLmxhYmVsXCIpJztcbiAgICB9XG59XG5cbmNsYXNzIF9DYXJkRGF0YSB7XG4gICAgY29uc3RydWN0b3Ioe3RpdGxlLCBpbWFnZUFzc2V0LCBpbWFnZUFzc2V0UGFja2FnZX0pIHtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlLFxuICAgICAgICB0aGlzLmltYWdlQXNzZXQgPSBpbWFnZUFzc2V0LFxuICAgICAgICB0aGlzLmltYWdlQXNzZXRQYWNrYWdlID0gaW1hZ2VBc3NldFBhY2thZ2U7XG4gICAgfVxufVxuXG4vLyBFUzbnmoRtYXDlhpnms5Xmr5TovoPlpYfmgKpcbnZhciBfYWxsUGFnZXMgPSBuZXcgTWFwKCk7XG5fYWxsUGFnZXMuc2V0KG5ldyBfUGFnZSh7bGFiZWw6ICdIT01FJ30pICwgW1xuICAgIG5ldyBfQ2FyZERhdGEoe1xuICAgICAgICB0aXRsZTogJ0ZsYXR3ZWFyJyxcbiAgICAgICAgaW1hZ2VBc3NldDogJ3Byb2R1Y3RzL2ZsYXR3ZWFyLnBuZycsXG4gICAgICAgIGltYWdlQXNzZXRQYWNrYWdlOiBfa0dhbGxlcnlBc3NldHNQYWNrYWdlXG4gICAgfSksXG4gICAgbmV3IF9DYXJkRGF0YSh7XG4gICAgICAgIHRpdGxlOiAnUGluZSBUYWJsZScsXG4gICAgICAgIGltYWdlQXNzZXQ6ICdwcm9kdWN0cy90YWJsZS5wbmcnLFxuICAgICAgICBpbWFnZUFzc2V0UGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZVxuICAgIH0pLFxuICAgIG5ldyBfQ2FyZERhdGEoe1xuICAgICAgICB0aXRsZTogJ0JsdWUgQ3VwJyxcbiAgICAgICAgaW1hZ2VBc3NldDogJ3Byb2R1Y3RzL2N1cC5wbmcnLFxuICAgICAgICBpbWFnZUFzc2V0UGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZVxuICAgIH0pLFxuICAgICAgbmV3IF9DYXJkRGF0YSh7XG4gICAgICAgIHRpdGxlOiAnVGVhIFNldCcsXG4gICAgICAgIGltYWdlQXNzZXQ6ICdwcm9kdWN0cy90ZWFzZXQucG5nJyxcbiAgICAgICAgaW1hZ2VBc3NldFBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2VcbiAgICB9KSxcbiAgICAgIG5ldyBfQ2FyZERhdGEoe1xuICAgICAgICB0aXRsZTogJ0Rlc2sgU2V0JyxcbiAgICAgICAgaW1hZ2VBc3NldDogJ3Byb2R1Y3RzL2Rlc2tzZXQucG5nJyxcbiAgICAgICAgaW1hZ2VBc3NldFBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2VcbiAgICB9KSxcbiAgICAgIG5ldyBfQ2FyZERhdGEoe1xuICAgICAgICB0aXRsZTogJ0JsdWUgTGluZW4gTmFwa2lucycsXG4gICAgICAgIGltYWdlQXNzZXQ6ICdwcm9kdWN0cy9uYXBraW5zLnBuZycsXG4gICAgICAgIGltYWdlQXNzZXRQYWNrYWdlOiBfa0dhbGxlcnlBc3NldHNQYWNrYWdlXG4gICAgfSksXG4gICAgICBuZXcgX0NhcmREYXRhKHtcbiAgICAgICAgdGl0bGU6ICdQbGFudGVycycsXG4gICAgICAgIGltYWdlQXNzZXQ6ICdwcm9kdWN0cy9wbGFudGVycy5wbmcnLFxuICAgICAgICBpbWFnZUFzc2V0UGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZVxuICAgIH0pLFxuICAgIG5ldyBfQ2FyZERhdGEoe1xuICAgICAgICB0aXRsZTogJ0tpdGNoZW4gUXVhdHRybycsXG4gICAgICAgIGltYWdlQXNzZXQ6ICdwcm9kdWN0cy9raXRjaGVuX3F1YXR0cm8ucG5nJyxcbiAgICAgICAgaW1hZ2VBc3NldFBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2VcbiAgICB9KSxcbiAgICBuZXcgX0NhcmREYXRhKHtcbiAgICAgICAgdGl0bGU6ICdQbGF0dGVyJyxcbiAgICAgICAgaW1hZ2VBc3NldDogJ3Byb2R1Y3RzL3BsYXR0ZXIucG5nJyxcbiAgICAgICAgaW1hZ2VBc3NldFBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2VcbiAgICB9KSxcbl0pLnNldChuZXcgX1BhZ2Uoe2xhYmVsOiAnQVBQQVJFTCd9KSAsIFtcbiAgICBuZXcgX0NhcmREYXRhKHtcbiAgICAgICAgdGl0bGU6ICdDbG91ZC1XaGl0ZSBEcmVzcycsXG4gICAgICAgIGltYWdlQXNzZXQ6ICdwcm9kdWN0cy9kcmVzcy5wbmcnLFxuICAgICAgICBpbWFnZUFzc2V0UGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZVxuICAgIH0pLFxuICAgIG5ldyBfQ2FyZERhdGEoe1xuICAgICAgICB0aXRsZTogJ0dpbmdlciBTY2FyZicsXG4gICAgICAgIGltYWdlQXNzZXQ6ICdwcm9kdWN0cy9zY2FyZi5wbmcnLFxuICAgICAgICBpbWFnZUFzc2V0UGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZVxuICAgIH0pLFxuICAgIG5ldyBfQ2FyZERhdGEoe1xuICAgICAgICB0aXRsZTogJ0JsdXNoIFN3ZWF0cycsXG4gICAgICAgIGltYWdlQXNzZXQ6ICdwcm9kdWN0cy9zd2VhdHMucG5nJyxcbiAgICAgICAgaW1hZ2VBc3NldFBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2VcbiAgICB9KVxuXSk7XG5cbmNsYXNzIF9DYXJkRGF0YUl0ZW0gZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3Rvcih7cGFnZSwgZGF0YX0pIHtcbiAgICAgICAgc3VwZXIoJ19DYXJkRGF0YUl0ZW0nKTtcbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIDI3Mi4wO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBDYXJkKHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgUGFkZGluZyh7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTYuMCksXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6IENyb3NzQXhpc0FsaWdubWVudC5zdHJldGNoLFxuICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQWxpZ24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogdGhpcy5wYWdlLmlkID09ICdIJyA/IEFsaWdubWVudC5jZW50ZXJMZWZ0IDogQWxpZ25tZW50LmNlbnRlclJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2lyY2xlQXZhdGFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRoaXMucGFnZS5pZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNpemVkQm94KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTQ0LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNDQuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogSW1hZ2UuYXNzZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbWFnZUFzc2V0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXQ6IEJveEZpdC5jb250YWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXhQYWNrYWdlOiB0aGlzLmRhdGEuaW1hZ2VBc3NldFBhY2thZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENlbnRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGl0bGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBUaGVtZS5vZihjb250ZXh0KS50ZXh0VGhlbWUudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5jbGFzcyBKU1RhYnNEZW1vIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0pTVGFic0RlbW8nKTtcbiAgICB9XG4gIFxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEpTVGFic0RlbW9TdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIEpTVGFic0RlbW9TdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgYnVpbGQoY29udGV4dCl7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgRGVmYXVsdFRhYkNvbnRyb2xsZXIoe1xuICAgICAgICAgICAgbGVuZ3RoOiBfYWxsUGFnZXMuc2l6ZSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBOZXN0ZWRTY3JvbGxWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyU2xpdmVyQnVpbGRlcjogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2xpdmVyT3ZlcmxhcEFic29yYmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlOiBOZXN0ZWRTY3JvbGxWaWV3LnNsaXZlck92ZXJsYXBBYnNvcmJlckhhbmRsZUZvcihjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBTbGl2ZXJBcHBCYXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdUYWJzIGFuZCBzY3JvbGxpbmcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbm5lZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkSGVpZ2h0OiAxNTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlRWxldmF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBuZXcgVGFiQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJzOiBbLi4uKF9hbGxQYWdlcy5rZXlzKCkpXS5tYXAocGFnZSA9PiBuZXcgVGFiKHt0ZXh0OiBwYWdlLmxhYmVsfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBuZXcgVGFiQmFyVmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogWy4uLihfYWxsUGFnZXMua2V5cygpKV0ubWFwKGZ1bmN0aW9uKHBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNhZmVBcmVhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBCdWlsZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEN1c3RvbVNjcm9sbFZpZXcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGl2ZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2xpdmVyT3ZlcmxhcEluamVjdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGU6IE5lc3RlZFNjcm9sbFZpZXcuc2xpdmVyT3ZlcmxhcEFic29yYmVySGFuZGxlRm9yKGNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTbGl2ZXJQYWRkaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsOiA4LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IDE2LjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGl2ZXI6IG5ldyBTbGl2ZXJGaXhlZEV4dGVudExpc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtRXh0ZW50OiBfQ2FyZERhdGFJdGVtLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGU6IG5ldyBTbGl2ZXJDaGlsZEJ1aWxkZXJEZWxlZ2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGNvbnRleHQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSAoX2FsbFBhZ2VzLmdldChwYWdlKSlbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFkZGluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuc3ltbWV0cmljKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsOiA4LjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgX0NhcmREYXRhSXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZENvdW50OiAoX2FsbFBhZ2VzLmdldChwYWdlKSkubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgSlNUYWJzRGVtbyB9O1xuIiwiLy8gIE1YRmx1dHRlckZyYW1ld29ya1xuLy8gIENvcHlyaWdodCAyMDE5IFRoZSBNWEZsdXR0ZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxldCB7XG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBTY2FmZm9sZCxcbiAgQ2VudGVyLFxuICBBcHBCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBNZWRpYVF1ZXJ5LFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ3VzdG9tU2Nyb2xsVmlldyxcbiAgU2xpdmVyQXBwQmFyLFxuICBTbGl2ZXJQYWRkaW5nLFxuICBTbGl2ZXJHcmlkLFxuICBTbGl2ZXJHcmlkRGVsZWdhdGVXaXRoTWF4Q3Jvc3NBeGlzRXh0ZW50LFxuICBTbGl2ZXJDaGlsZEJ1aWxkZXJEZWxlZ2F0ZSxcbiAgRWRnZUluc2V0cyxcbiAgR2VzdHVyZURldGVjdG9yLFxuICBDYXJkLFxuICBFeHBhbmRlZCxcbiAgQ29sdW1uLFxuICBIZXJvLFxuICBBc3BlY3RSYXRpbyxcbiAgSW1hZ2UsXG4gIEJveEZpdCxcbiAgUm93LFxuICBQYWRkaW5nLFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0XG4gIFxufSA9IHJlcXVpcmUoXCIuLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5cbi8v5Lia5Yqh5Luj56CBXG5cbmxldCBfa0dhbGxlcnlBc3NldHNQYWNrYWdlID0gJ2ZsdXR0ZXJfZ2FsbGVyeV9hc3NldHMnO1xubGV0IF9rQXBwQmFySGVpZ2h0ID0gMTI4LjA7XG5sZXQgX2tGYWJIYWxmU2l6ZSA9IDI4LjA7IC8vIFRPRE8obXBjb21wbGV0ZSk6IG5lZWRzIHRvIGFkYXB0IHRvIHNjcmVlbiBzaXplXG5sZXQgX2tSZWNpcGVQYWdlTWF4V2lkdGggPSA1MDAuMDtcblxuY2xhc3MgSlNQZXN0b1BhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCdKU1Blc3RvUGFnZScpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBKU1Blc3RvUGFnZVN0YXRlKHRoaXMpO1xuICB9XG59XG5cbmNsYXNzIEpTUGVzdG9QYWdlU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gIGJ1aWxkKGNvbnRleHQpIHtcblxuICAgIGxldCBzdGF0dXNCYXJIZWlnaHQgPSAyNDtcblxuICAgIGxldCBtcSA9IE1lZGlhUXVlcnkub2YoY29udGV4dCk7XG4gICAgaWYgKG1xKSB7XG4gICAgICBzdGF0dXNCYXJIZWlnaHQgPSBtcS5wYWRkaW5nLnRvcFxuICAgIH1cblxuICAgIGxldCB3ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIlBlc3RvIERlbW9cIilcbiAgICAgIH0pLFxuICAgICAgZmxvYXRpbmdBY3Rpb25CdXR0b246IG5ldyBGbG9hdGluZ0FjdGlvbkJ1dHRvbih7XG4gICAgICAgIGNoaWxkOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlM2M5KSksXG4gICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IEN1c3RvbVNjcm9sbFZpZXcoe1xuICAgICAgICBzZW1hbnRpY0NoaWxkQ291bnQ6IF9yZWNpcGVMaXN0Lmxlbmd0aCxcbiAgICAgICAgc2xpdmVyczogW1xuICAgICAgICAgIC8vdGhpcy5idWlsZEFwcEJhcihjb250ZXh0LCBzdGF0dXNCYXJIZWlnaHQpLFxuICAgICAgICAgIHRoaXMuYnVpbGRCb2R5KGNvbnRleHQsIHN0YXR1c0JhckhlaWdodClcbiAgICAgICAgXVxuICAgICAgfSlcbiAgICAgIC8vYm9keTp0aGlzLmJ1aWxkSXRlbXMoKVswXVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICBidWlsZEFwcEJhcihjb250ZXh0LCBzdGF0dXNCYXJIZWlnaHQpIHtcbiAgICByZXR1cm4gU2xpdmVyQXBwQmFyKHtcbiAgICAgIHBpbm5lZDogdHJ1ZSxcbiAgICAgIGV4cGFuZGVkSGVpZ2h0OiBfa0FwcEJhckhlaWdodCxcbiAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDEpKSxcbiAgICAgICAgICB0b29sdGlwOiAnU2VhcmNoJyxcbiAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0sXG4gICAgICBmbGV4aWJsZVNwYWNlOiBMYXlvdXRCdWlsZGVyKHtcbiAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQsIGNvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgc2l6ZSA9IGNvbnN0cmFpbnRzLmJpZ2dlc3Q7XG4gICAgICAgICAgYXBwQmFySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSBzdGF0dXNCYXJIZWlnaHQ7XG4gICAgICAgICAgdCA9IChhcHBCYXJIZWlnaHQgLSBrVG9vbGJhckhlaWdodCkgLyAoX2tBcHBCYXJIZWlnaHQgLSBrVG9vbGJhckhlaWdodCk7XG4gICAgICAgICAgZXh0cmFQYWRkaW5nID0gbmV3IFR3ZWVuKHsgYmVnaW46IDEwLjAsIGVuZDogMjQuMCB9KS50cmFuc2Zvcm0odCk7XG4gICAgICAgICAgbG9nb0hlaWdodCA9IGFwcEJhckhlaWdodCAtIDEuNSAqIGV4dHJhUGFkZGluZztcbiAgICAgICAgICByZXR1cm4gUGFkZGluZyh7XG4gICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe1xuICAgICAgICAgICAgICB0b3A6IHN0YXR1c0JhckhlaWdodCArIDAuNSAqIGV4dHJhUGFkZGluZyxcbiAgICAgICAgICAgICAgYm90dG9tOiBleHRyYVBhZGRpbmcsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBDZW50ZXIoe1xuICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb24obmV3IEljb25EYXRhKDEpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkQm9keShjb250ZXh0LCBzdGF0dXNCYXJIZWlnaHQpIHtcblxuICAgIGxldCBtZWRpYVBhZGRpbmcgPSBFZGdlSW5zZXRzLmFsbCgwKTtcbiAgICBsZXQgbXEgPSBNZWRpYVF1ZXJ5Lm9mKGNvbnRleHQpO1xuICAgIGlmIChtcSkge1xuICAgICAgbWVkaWFQYWRkaW5nID0gTWVkaWFRdWVyeS5vZihjb250ZXh0KS5wYWRkaW5nO1xuICAgIH1cbiAgICBsZXQgcGFkZGluZyA9IEVkZ2VJbnNldHMub25seSh7XG4gICAgICB0b3A6IDguMCxcbiAgICAgIGxlZnQ6IDguMCArIG1lZGlhUGFkZGluZy5sZWZ0LFxuICAgICAgcmlnaHQ6IDguMCArIG1lZGlhUGFkZGluZy5yaWdodCxcbiAgICAgIGJvdHRvbTogOC4wXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3IFNsaXZlclBhZGRpbmcoe1xuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIHNsaXZlcjogbmV3IFNsaXZlckdyaWQoe1xuICAgICAgICBncmlkRGVsZWdhdGU6IG5ldyBTbGl2ZXJHcmlkRGVsZWdhdGVXaXRoTWF4Q3Jvc3NBeGlzRXh0ZW50KHtcbiAgICAgICAgICBtYXhDcm9zc0F4aXNFeHRlbnQ6IF9rUmVjaXBlUGFnZU1heFdpZHRoLFxuICAgICAgICAgIGNyb3NzQXhpc1NwYWNpbmc6IDguMCxcbiAgICAgICAgICBtYWluQXhpc1NwYWNpbmc6IDguMCxcbiAgICAgICAgfSksXG4gICAgICAgIGRlbGVnYXRlOiBuZXcgU2xpdmVyQ2hpbGRCdWlsZGVyRGVsZWdhdGUoXG4gICAgICAgICAgZnVuY3Rpb24gKGNvbnRleHQsIGluZGV4KSB7XG4gICAgICAgICAgICBsZXQgcmVjaXBlID0gX3JlY2lwZUxpc3RbaW5kZXhdO1xuICAgICAgICAgICAgbGV0IHcgPSBuZXcgUmVjaXBlQ2FyZCh7XG4gICAgICAgICAgICAgIHJlY2lwZTogcmVjaXBlLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkgeyBzaG93UmVjaXBlUGFnZShjb250ZXh0LCByZWNpcGUpOyB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGlsZENvdW50OiBfcmVjaXBlTGlzdC5sZW5ndGhcbiAgICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGJ1aWxkSXRlbXMoKSB7XG4gIC8vICAgbGV0IHJlY2lwZVdpZGdldExpc3QgPSBbXTtcblxuICAvLyAgIHRoaXMucmVjaXBlcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAvLyAgICAgbGV0IHcgPSBuZXcgUmVjaXBlQ2FyZCh7XG4gIC8vICAgICAgIHJlY2lwZTogZWxlbWVudCxcbiAgLy8gICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHsgc2hvd1JlY2lwZVBhZ2UoY29udGV4dCwgZWxlbWVudCk7IH0sXG4gIC8vICAgICB9KTtcbiAgLy8gICAgIHJlY2lwZVdpZGdldExpc3QucHVzaCh3KTtcbiAgLy8gICB9KTtcblxuICAvLyAgIHJldHVybiByZWNpcGVXaWRnZXRMaXN0O1xuICAvLyB9XG59XG5cbi8vIEEgY2FyZCB3aXRoIHRoZSByZWNpcGUncyBpbWFnZSwgYXV0aG9yLCBhbmQgdGl0bGUuXG5jbGFzcyBSZWNpcGVDYXJkIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG5cbiAgY29uc3RydWN0b3IoeyByZWNpcGUsIG9uVGFwIH0pIHtcbiAgICBzdXBlcihcIlJlY2lwZUNhcmRcIik7XG4gICAgdGhpcy5yZWNpcGUgPSByZWNpcGU7XG4gICAgdGhpcy5vblRhcCA9IG9uVGFwO1xuXG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG5cbiAgICAvL3JldHVybiBuZXcgVGV4dCh0aGlzLnJlY2lwZS5uYW1lKTtcbiAgICByZXR1cm4gbmV3IEdlc3R1cmVEZXRlY3Rvcih7XG4gICAgICBvblRhcDogdGhpcy5vblRhcCxcbiAgICAgIGNoaWxkOiBuZXcgQ2FyZCh7XG4gICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6IENyb3NzQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgbmV3IEhlcm8oe1xuICAgICAgICAgICAgICB0YWc6ICdwYWNrYWdlcy8nICsgdGhpcy5yZWNpcGUuaW1hZ2VQYWNrYWdlICsgJy8nICsgdGhpcy5yZWNpcGUuaW1hZ2VQYXRoLFxuICAgICAgICAgICAgICBjaGlsZDpcbiAgICAgICAgICAgICAgICBuZXcgQXNwZWN0UmF0aW8oe1xuICAgICAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IDQuMCAvIDMuMCxcbiAgICAgICAgICAgICAgICAgIGNoaWxkOiBJbWFnZS5hc3NldChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNpcGUuaW1hZ2VQYXRoLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgbXhQYWNrYWdlOiB0aGlzLnJlY2lwZS5pbWFnZVBhY2thZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgZml0OiBCb3hGaXQuY292ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgc2VtYW50aWNMYWJlbDogdGhpcy5yZWNpcGUubmFtZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgxNi4wKSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IEltYWdlLmFzc2V0KFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjaXBlLmluZ3JlZGllbnRzSW1hZ2VQYXRoLFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG14UGFja2FnZTogdGhpcy5yZWNpcGUuaW5ncmVkaWVudHNJbWFnZVBhY2thZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNDguMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDguMFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6IENyb3NzQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dCh0aGlzLnJlY2lwZS5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KHRoaXMucmVjaXBlLmF1dGhvciksXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbn1cblxuXG5cbi8vdWnmlbDmja5cbmNsYXNzIFJlY2lwZSB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBuYW1lLFxuICAgIGF1dGhvcixcbiAgICBkZXNjcmlwdGlvbixcbiAgICBpbWFnZVBhdGgsXG4gICAgaW1hZ2VQYWNrYWdlLFxuICAgIGluZ3JlZGllbnRzSW1hZ2VQYXRoLFxuICAgIGluZ3JlZGllbnRzSW1hZ2VQYWNrYWdlLFxuICAgIGluZ3JlZGllbnRzLFxuICAgIHN0ZXBzXG4gIH0gPSB7fSkge1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmF1dGhvciA9IGF1dGhvcjtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5pbWFnZVBhdGggPSBpbWFnZVBhdGg7XG4gICAgdGhpcy5pbWFnZVBhY2thZ2UgPSBpbWFnZVBhY2thZ2U7XG4gICAgdGhpcy5pbmdyZWRpZW50c0ltYWdlUGF0aCA9IGluZ3JlZGllbnRzSW1hZ2VQYXRoO1xuICAgIHRoaXMuaW5ncmVkaWVudHNJbWFnZVBhY2thZ2UgPSBpbmdyZWRpZW50c0ltYWdlUGFja2FnZTtcbiAgICB0aGlzLmluZ3JlZGllbnRzID0gaW5ncmVkaWVudHM7XG4gICAgdGhpcy5zdGVwcyA9IHN0ZXBzO1xuICB9XG59XG5cbmNsYXNzIFJlY2lwZUluZ3JlZGllbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgYW1vdW50LFxuICAgIGRlc2NyaXB0aW9uXG4gIH0gPSB7fSkge1xuXG4gICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICB9XG59XG5cblxuY2xhc3MgUmVjaXBlU3RlcCB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBkdXJhdGlvbixcbiAgICBkZXNjcmlwdGlvblxuICB9ID0ge30pIHtcblxuICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIH1cbn1cblxuLy9jb25zdCBMaXN0PFJlY2lwZT4ga1Blc3RvUmVjaXBlcyA9IDxSZWNpcGU+W1xuXG5sZXQgX3JlY2lwZUxpc3QgPSBbXG4gIG5ldyBSZWNpcGUoe1xuICAgIG5hbWU6ICdSb2FzdGVkIENoaWNrZW4nLFxuICAgIGF1dGhvcjogJ1BldGVyIENhcmxzc29uJyxcbiAgICBpbmdyZWRpZW50c0ltYWdlUGF0aDogJ2Zvb2QvaWNvbnMvbWFpbi5wbmcnLFxuICAgIGluZ3JlZGllbnRzSW1hZ2VQYWNrYWdlOiBfa0dhbGxlcnlBc3NldHNQYWNrYWdlLFxuICAgIGRlc2NyaXB0aW9uOiAnVGhlIHBlcmZlY3QgZGlzaCB0byB3ZWxjb21lIHlvdXIgZmFtaWx5IGFuZCBmcmllbmRzIHdpdGggb24gYSBjcmlzcCBhdXR1bW4gbmlnaHQuIFBhaXIgd2l0aCByb2FzdGVkIHZlZ2dpZXMgdG8gdHJ1bHkgaW1wcmVzcyB0aGVtLicsXG4gICAgaW1hZ2VQYXRoOiAnZm9vZC9yb2FzdGVkX2NoaWNrZW4ucG5nJyxcbiAgICBpbWFnZVBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2UsXG4gICAgaW5ncmVkaWVudHM6IFtcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMSB3aG9sZScsIGRlc2NyaXB0aW9uOiAnQ2hpY2tlbicgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzEvMiBjdXAnLCBkZXNjcmlwdGlvbjogJ0J1dHRlcicgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzEgdGJzcCcsIGRlc2NyaXB0aW9uOiAnT25pb24gcG93ZGVyJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMSB0YnNwJywgZGVzY3JpcHRpb246ICdGcmVzaGx5IGdyb3VuZCBwZXBwZXInIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxIHRzcCcsIGRlc2NyaXB0aW9uOiAnU2FsdCcgfSlcbiAgICBdLFxuICAgIHN0ZXBzOiBbXG4gICAgICBuZXcgUmVjaXBlU3RlcCh7IGR1cmF0aW9uOiAnMSBtaW4nLCBkZXNjcmlwdGlvbjogJ1B1dCBpbiBvdmVuJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVTdGVwKHsgZHVyYXRpb246ICcxaHIgNDUgbWluJywgZGVzY3JpcHRpb246ICdDb29rJyB9KVxuICAgIF0sXG4gIH0pLFxuICBuZXcgUmVjaXBlKHtcbiAgICBuYW1lOiAnQ2hvcHBlZCBCZWV0IExlYXZlcycsXG4gICAgYXV0aG9yOiAnVHJldm9yIEhhbnNlbicsXG4gICAgaW5ncmVkaWVudHNJbWFnZVBhdGg6ICdmb29kL2ljb25zL3ZlZ2dpZS5wbmcnLFxuICAgIGluZ3JlZGllbnRzSW1hZ2VQYWNrYWdlOiBfa0dhbGxlcnlBc3NldHNQYWNrYWdlLFxuICAgIGRlc2NyaXB0aW9uOiAnVGhpcyB2ZWdldGFibGUgaGFzIG1vcmUgdG8gb2ZmZXIgdGhhbiBqdXN0IGl0cyByb290LiBCZWV0IGdyZWVucyBjYW4gYmUgdG9zc2VkIGludG8gYSBzYWxhZCB0byBhZGQgc29tZSB2YXJpZXR5IG9yIHNhdXRlZWQgb24gaXRzIG93biB3aXRoIHNvbWUgb2lsIGFuZCBnYXJsaWMuJyxcbiAgICBpbWFnZVBhdGg6ICdmb29kL2Nob3BwZWRfYmVldF9sZWF2ZXMucG5nJyxcbiAgICBpbWFnZVBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2UsXG4gICAgaW5ncmVkaWVudHM6IFtcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMyBjdXBzJywgZGVzY3JpcHRpb246ICdCZWV0IGdyZWVucycgfSlcbiAgICBdLFxuICAgIHN0ZXBzOiBbXG4gICAgICBuZXcgUmVjaXBlU3RlcCh7IGR1cmF0aW9uOiAnNSBtaW4nLCBkZXNjcmlwdGlvbjogJ0Nob3AnIH0pXG4gICAgXVxuICB9KSxcbiAgbmV3IFJlY2lwZSh7XG4gICAgbmFtZTogJ1Blc3RvIFBhc3RhJyxcbiAgICBhdXRob3I6ICdBbGkgQ29ubm9ycycsXG4gICAgaW5ncmVkaWVudHNJbWFnZVBhdGg6ICdmb29kL2ljb25zL21haW4ucG5nJyxcbiAgICBpbmdyZWRpZW50c0ltYWdlUGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZSxcbiAgICBkZXNjcmlwdGlvbjogJ1dpdGggdGhpcyBwZXN0byByZWNpcGUsIHlvdSBjYW4gcXVpY2tseSB3aGlwIHVwIGEgbWVhbCB0byBzYXRpc2Z5IHlvdXIgc2F2b3J5IG5lZWRzLiBBbmQgaWYgeW91XFwncmUgZmVlbGluZyBmZXN0aXZlLCB5b3UgY2FuIGFkZCBiYWNvbiB0byB0YXN0ZS4nLFxuICAgIGltYWdlUGF0aDogJ2Zvb2QvcGVzdG9fcGFzdGEucG5nJyxcbiAgICBpbWFnZVBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2UsXG4gICAgaW5ncmVkaWVudHM6IFtcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMS80IGN1cCAnLCBkZXNjcmlwdGlvbjogJ1Bhc3RhJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMiBjdXBzJywgZGVzY3JpcHRpb246ICdGcmVzaCBiYXNpbCBsZWF2ZXMnIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxLzIgY3VwJywgZGVzY3JpcHRpb246ICdQYXJtZXNhbiBjaGVlc2UnIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxLzIgY3VwJywgZGVzY3JpcHRpb246ICdFeHRyYSB2aXJnaW4gb2xpdmUgb2lsJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMS8zIGN1cCcsIGRlc2NyaXB0aW9uOiAnUGluZSBudXRzJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMS80IGN1cCcsIGRlc2NyaXB0aW9uOiAnTGVtb24ganVpY2UnIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICczIGNsb3ZlcycsIGRlc2NyaXB0aW9uOiAnR2FybGljJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMS80IHRzcCcsIGRlc2NyaXB0aW9uOiAnU2FsdCcgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzEvOCB0c3AnLCBkZXNjcmlwdGlvbjogJ1BlcHBlcicgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzMgbGJzJywgZGVzY3JpcHRpb246ICdCYWNvbicgfSlcbiAgICBdLFxuICAgIHN0ZXBzOiBbXG4gICAgICBuZXcgUmVjaXBlU3RlcCh7IGR1cmF0aW9uOiAnMTUgbWluJywgZGVzY3JpcHRpb246ICdCbGVuZCcgfSlcbiAgICBdXG4gIH0pLFxuICBuZXcgUmVjaXBlKHtcbiAgICBuYW1lOiAnQ2hlcnJ5IFBpZScsXG4gICAgYXV0aG9yOiAnU2FuZHJhIEFkYW1zJyxcbiAgICBpbmdyZWRpZW50c0ltYWdlUGF0aDogJ2Zvb2QvaWNvbnMvbWFpbi5wbmcnLFxuICAgIGluZ3JlZGllbnRzSW1hZ2VQYWNrYWdlOiBfa0dhbGxlcnlBc3NldHNQYWNrYWdlLFxuICAgIGRlc2NyaXB0aW9uOiAnU29tZXRpbWVzIHdoZW4geW91XFwncmUgY3JhdmluZyBzb21lIGNoZWVyIGluIHlvdXIgbGlmZSB5b3UgY2FuIGp1bXBzdGFydCB5b3VyIGRheSB3aXRoIHNvbWUgY2hlcnJ5IHBpZS4gRGVzc2VydCBmb3IgYnJlYWtmYXN0IGlzIHBlcmZlY3RseSBhY2NlcHRhYmxlLicsXG4gICAgaW1hZ2VQYXRoOiAnZm9vZC9jaGVycnlfcGllLnBuZycsXG4gICAgaW1hZ2VQYWNrYWdlOiBfa0dhbGxlcnlBc3NldHNQYWNrYWdlLFxuICAgIGluZ3JlZGllbnRzOiBbXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzEnLCBkZXNjcmlwdGlvbjogJ1BpZSBjcnVzdCcgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzQgY3VwcycsIGRlc2NyaXB0aW9uOiAnRnJlc2ggb3IgZnJvemVuIGNoZXJyaWVzJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMSBjdXAnLCBkZXNjcmlwdGlvbjogJ0dyYW51bGF0ZWQgc3VnYXInIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICc0IHRic3AnLCBkZXNjcmlwdGlvbjogJ0Nvcm5zdGFyY2gnIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxwr0gdGJzcCcsIGRlc2NyaXB0aW9uOiAnQnV0dGVyJyB9KVxuICAgIF0sXG4gICAgc3RlcHM6IFtcbiAgICAgIG5ldyBSZWNpcGVTdGVwKHsgZHVyYXRpb246ICcxNSBtaW4nLCBkZXNjcmlwdGlvbjogJ01peCcgfSksXG4gICAgICBuZXcgUmVjaXBlU3RlcCh7IGR1cmF0aW9uOiAnMWhyIDMwIG1pbicsIGRlc2NyaXB0aW9uOiAnQmFrZScgfSlcbiAgICBdXG4gIH0pLFxuICBuZXcgUmVjaXBlKHtcbiAgICBuYW1lOiAnU3BpbmFjaCBTYWxhZCcsXG4gICAgYXV0aG9yOiAnUGV0ZXIgQ2FybHNzb24nLFxuICAgIGluZ3JlZGllbnRzSW1hZ2VQYXRoOiAnZm9vZC9pY29ucy9zcGljeS5wbmcnLFxuICAgIGluZ3JlZGllbnRzSW1hZ2VQYWNrYWdlOiBfa0dhbGxlcnlBc3NldHNQYWNrYWdlLFxuICAgIGRlc2NyaXB0aW9uOiAnRXZlcnlvbmVcXCdzIGZhdm9yaXRlIGxlYWZ5IGdyZWVuIGlzIGJhY2suIFBhaXJlZCB3aXRoIGZyZXNoIHNsaWNlZCBvbmlvbiwgaXRcXCdzIHJlYWR5IHRvIHRhY2tsZSBhbnkgZGlzaCwgd2hldGhlciBpdCBiZSBhIHNhbGFkIG9yIGFuIGVnZyBzY3JhbWJsZS4nLFxuICAgIGltYWdlUGF0aDogJ2Zvb2Qvc3BpbmFjaF9vbmlvbl9zYWxhZC5wbmcnLFxuICAgIGltYWdlUGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZSxcbiAgICBpbmdyZWRpZW50czogW1xuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICc0IGN1cHMnLCBkZXNjcmlwdGlvbjogJ1NwaW5hY2gnIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxIGN1cCcsIGRlc2NyaXB0aW9uOiAnU2xpY2VkIG9uaW9uJyB9KVxuICAgIF0sXG4gICAgc3RlcHM6IFtcbiAgICAgIG5ldyBSZWNpcGVTdGVwKHsgZHVyYXRpb246ICc1IG1pbicsIGRlc2NyaXB0aW9uOiAnTWl4JyB9KVxuICAgIF1cbiAgfSksXG4gIG5ldyBSZWNpcGUoe1xuICAgIG5hbWU6ICdCdXR0ZXJudXQgU3F1YXNoIFNvdXAnLFxuICAgIGF1dGhvcjogJ0FsaSBDb25ub3JzJyxcbiAgICBpbmdyZWRpZW50c0ltYWdlUGF0aDogJ2Zvb2QvaWNvbnMvaGVhbHRoeS5wbmcnLFxuICAgIGluZ3JlZGllbnRzSW1hZ2VQYWNrYWdlOiBfa0dhbGxlcnlBc3NldHNQYWNrYWdlLFxuICAgIGRlc2NyaXB0aW9uOiAnVGhpcyBjcmVhbXkgYnV0dGVybnV0IHNxdWFzaCBzb3VwIHdpbGwgd2FybSB5b3Ugb24gdGhlIGNoaWxsaWVzdCBvZiB3aW50ZXIgbmlnaHRzIGFuZCBicmluZyBhIGRlbGlnaHRmdWwgcG9wIG9mIG9yYW5nZSB0byB0aGUgZGlubmVyIHRhYmxlLicsXG4gICAgaW1hZ2VQYXRoOiAnZm9vZC9idXR0ZXJudXRfc3F1YXNoX3NvdXAucG5nJyxcbiAgICBpbWFnZVBhY2thZ2U6IF9rR2FsbGVyeUFzc2V0c1BhY2thZ2UsXG4gICAgaW5ncmVkaWVudHM6IFtcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMScsIGRlc2NyaXB0aW9uOiAnQnV0dGVybnV0IHNxdWFzaCcgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzQgY3VwcycsIGRlc2NyaXB0aW9uOiAnQ2hpY2tlbiBzdG9jaycgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzInLCBkZXNjcmlwdGlvbjogJ1BvdGF0b2VzJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMScsIGRlc2NyaXB0aW9uOiAnT25pb24nIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxJywgZGVzY3JpcHRpb246ICdDYXJyb3QnIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxJywgZGVzY3JpcHRpb246ICdDZWxlcnknIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxIHRzcCcsIGRlc2NyaXB0aW9uOiAnU2FsdCcgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJzEgdHNwJywgZGVzY3JpcHRpb246ICdQZXBwZXInIH0pXG4gICAgXSxcbiAgICBzdGVwczogW1xuICAgICAgbmV3IFJlY2lwZVN0ZXAoeyBkdXJhdGlvbjogJzEwIG1pbicsIGRlc2NyaXB0aW9uOiAnUHJlcCB2ZWdldGFibGVzJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVTdGVwKHsgZHVyYXRpb246ICc1IG1pbicsIGRlc2NyaXB0aW9uOiAnU3RpcicgfSksXG4gICAgICBuZXcgUmVjaXBlU3RlcCh7IGR1cmF0aW9uOiAnMSBociAxMCBtaW4nLCBkZXNjcmlwdGlvbjogJ0Nvb2snIH0pXG4gICAgXVxuICB9KSxcbiAgbmV3IFJlY2lwZSh7XG4gICAgbmFtZTogJ1NwYW5ha29waXRhJyxcbiAgICBhdXRob3I6ICdUcmV2b3IgSGFuc2VuJyxcbiAgICBpbmdyZWRpZW50c0ltYWdlUGF0aDogJ2Zvb2QvaWNvbnMvcXVpY2sucG5nJyxcbiAgICBpbmdyZWRpZW50c0ltYWdlUGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZSxcbiAgICBkZXNjcmlwdGlvbjogJ1lvdSBcXCdmZXRhXFwnIGJlbGlldmUgdGhpcyBpcyBhIGNyb3dkLXBsZWFzZXIhIEZsYWt5IHBoeWxsbyBwYXN0cnkgc3Vycm91bmRzIGEgZGVsaWNpb3VzIG1peHR1cmUgb2Ygc3BpbmFjaCBhbmQgY2hlZXNlcyB0byBjcmVhdGUgdGhlIHBlcmZlY3QgYXBwZXRpemVyLicsXG4gICAgaW1hZ2VQYXRoOiAnZm9vZC9zcGFuYWtvcGl0YS5wbmcnLFxuICAgIGltYWdlUGFja2FnZTogX2tHYWxsZXJ5QXNzZXRzUGFja2FnZSxcbiAgICBpbmdyZWRpZW50czogW1xuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcxIGxiJywgZGVzY3JpcHRpb246ICdTcGluYWNoJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnwr0gY3VwJywgZGVzY3JpcHRpb246ICdGZXRhIGNoZWVzZScgfSksXG4gICAgICBuZXcgUmVjaXBlSW5ncmVkaWVudCh7IGFtb3VudDogJ8K9IGN1cCcsIGRlc2NyaXB0aW9uOiAnQ290dGFnZSBjaGVlc2UnIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICcyJywgZGVzY3JpcHRpb246ICdFZ2dzJyB9KSxcbiAgICAgIG5ldyBSZWNpcGVJbmdyZWRpZW50KHsgYW1vdW50OiAnMScsIGRlc2NyaXB0aW9uOiAnT25pb24nIH0pLFxuICAgICAgbmV3IFJlY2lwZUluZ3JlZGllbnQoeyBhbW91bnQ6ICfCvSBsYicsIGRlc2NyaXB0aW9uOiAnUGh5bGxvIGRvdWdoJyB9KVxuICAgIF0sXG4gICAgc3RlcHM6IFtcbiAgICAgIG5ldyBSZWNpcGVTdGVwKHsgZHVyYXRpb246ICc1IG1pbicsIGRlc2NyaXB0aW9uOiAnU2F1dMOpIHZlZ2V0YWJsZXMnIH0pLFxuICAgICAgbmV3IFJlY2lwZVN0ZXAoeyBkdXJhdGlvbjogJzMgbWluJywgZGVzY3JpcHRpb246ICdTdGlyIHZlZ2V0YWJsZXMgYW5kIG90aGVyIGZpbGxpbmcgaW5ncmVkaWVudHMnIH0pLFxuICAgICAgbmV3IFJlY2lwZVN0ZXAoeyBkdXJhdGlvbjogJzEwIG1pbicsIGRlc2NyaXB0aW9uOiAnRmlsbCBwaHlsbG8gc3F1YXJlcyBoYWxmLWZ1bGwgd2l0aCBmaWxsaW5nIGFuZCBmb2xkLicgfSksXG4gICAgICBuZXcgUmVjaXBlU3RlcCh7IGR1cmF0aW9uOiAnNDAgbWluJywgZGVzY3JpcHRpb246ICdCYWtlJyB9KVxuICAgIF1cbiAgfSlcbl07XG5cbm1vZHVsZS5leHBvcnRzID0geyBKU1Blc3RvUGFnZSB9O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxuICBJY29ucyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qc1wiKTtcbmNvbnN0IHBhY2thZ2VzX19kaW8gPSByZXF1aXJlKCdAdGVuY2VudC9teGZsdXR0ZXItZGlvJyk7XG5cblxubGV0IGNnaURhdGFVcmwgPSBcImh0dHBzOi8vYy5tLjE2My5jb20vbmMvYXJ0aWNsZS9oZWFkbGluZS9UMTM0ODY0OTU4MDY5Mi8wLTEwLmh0bWxcIjtcbmxldCBjZ2lKc29uVXJsID0gXCJodHRwczovL3JlYWN0bmF0aXZlLmRldi9tb3ZpZXMuanNvblwiXG5cbmNsYXNzIFBhZ2VFeGFtcGxlRGlvIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZURpb1wiKTtcblxuICAgIHRoaXMuZGF0YSA9IFwiYml6IGRhdGFcIjtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVEaW9TdGF0ZSh0aGlzKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZURpb1N0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZU5ldHdvcmtTdGF0ZVwiKTtcbiAgICB0aGlzLnJlc3BvbnNlID0gXCLngrnlh7vlsI/kurpSdW7kuIrpnaLnmoTku6PnoIFcIjtcbiAgICB0aGlzLmRpbyA9IHBhY2thZ2VzX19kaW8uRGlvKCk7XG4gIH1cblxuICBkaW9Db2RlVGV4dCgpIHtcbiAgICByZXR1cm4gXCJsZXQgcmVzcCA9IGF3YWl0IERpbygpLmdldChjZ2kpO1wiO1xuICB9XG4gIFxuICAvL+S+i+WtkDHvvIzmnIDnroDljZXnmoTnlKjms5UgXG4gIGFzeW5jIHRlc3REaW8xKHVybCkge1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRpby5nZXQodXJsKTtcbiAgICAgIE1YSlNMb2cubG9nKFwiYXdhaXQgRGlvLmdldCh1cmxTdHIpOnJlcXVlc3QoKSA6XCIgKyByZXNwb25zZSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcblxuICAgIH0gY2F0Y2ggKGUkKSB7XG4gICAgICAvLyBsZXQgZSA9IGRhcnQuZ2V0VGhyb3duKGUkKTtcbiAgICAgIC8vIE1YSlNMb2cubG9nKFwidGVzdERpbygpIGVycm9yOlwiICsgZSk7XG4gICAgICByZXR1cm4gZTtcblxuICAgIH1cbiAgfVxuXG4gIC8v5L6L5a2QMu+8jOaOpeWPo+i/mOacquWujOWFqOaUr+aMgVxuICBhc3luYyB0ZXN0RGlvMih1cmwpIHtcbiAgICBcbiAgICB0cnkge1xuICAgICAgbGV0IHJlc3BvbnNlID0gIGF3YWl0IHRoaXMuZGlvLmdldCh1cmwsIHsgb25SZWNlaXZlUHJvZ3Jlc3M6ZnVuY3Rpb24gKHByb2dyZXNzLHRvdGFsKXtcbiAgICAgICAgTVhKU0xvZy5sb2coXCJ0ZXN0RGlvKCk6IHByb2dyZXNzOiBcIiArIHByb2dyZXNzL3RvdGFsKTtcbiAgICAgIH19KTtcblxuICAgICAgTVhKU0xvZy5sb2coXCJhd2FpdCBEaW8uZ2V0KHVybFN0cik6cmVxdWVzdCgpIDpcIiArIHJlc3BvbnNlKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuXG4gICAgfSBjYXRjaCAoZSQpIHtcbiAgICAgIC8vIGxldCBlID0gZGFydC5nZXRUaHJvd24oZSQpO1xuICAgICAgLy8gTVhKU0xvZy5sb2coXCJ0ZXN0RGlvKCkgZXJyb3I6XCIgKyBlKTtcbiAgICAgIHJldGhyb3c7XG4gICAgfVxuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiRGlvIEV4YW1wbGVcIiksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIkNvZGUg6I635Y+W572R5piT5paw6Ze7dGV4dFwiKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKEljb25zW1wiZGlyZWN0aW9uc19ydW5cIl0pLFxuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KHRoaXMuZGlvQ29kZVRleHQoKSwge1xuICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmF5LFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBvblRhcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnRlc3REaW8yKGNnaURhdGFVcmwpO1xuXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZSA9IEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwiQ29kZSDojrflj5ZKc29uIE1hcFwiKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKEljb25zW1wiZGlyZWN0aW9uc19ydW5cIl0pLFxuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KHRoaXMuZGlvQ29kZVRleHQoKSwge1xuICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmF5LFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBvblRhcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnRlc3REaW8xKGNnaUpzb25VcmwpO1xuXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgLy9yZXNwb25zZS5kYXRhIOS4umpzb24gbWFwIG9ialxuICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2UgPSBcImpzb24gdGl0bGU6XCIgKyByZXNwb25zZVtcInRpdGxlXCJdICArIFwiIFxcclxcblxcclxcblxcclxcbmpzb24gdGV4dDpcIiArICBKU09OLnN0cmluZ2lmeShyZXNwb25zZSk7XG5cbiAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIlJlc3BvbnNlXCIpLFxuXG4gICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRoaXMucmVzcG9uc2UsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JheSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVEaW8sXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxuICBJY29ucyxcbiAgTWV0aG9kQ2hhbm5lbFxufSA9IHJlcXVpcmUoXCIuLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBQYWdlRXhhbXBsZU1lc3NhZ2VDaGFubmVsIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZU1lc3NhZ2VDaGFubmVsXCIpO1xuXG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlTWVzc2FnZUNoYW5uZWxTdGF0ZSh0aGlzKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZU1lc3NhZ2VDaGFubmVsU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlBhZ2VFeGFtcGxlTWVzc2FnZUNoYW5uZWxTdGF0ZVwiKTtcbiAgICB0aGlzLnJlc3BvbnNlID0gXCLngrnlh7vlsI/kurpSdW7kuIrpnaLnmoTku6PnoIFcIjtcblxuICAgIHRoaXMubWV0aG9kQ2hhbm5lbCA9IG5ldyBNZXRob2RDaGFubmVsKFwiTVhGbHV0dGVyX01ldGhvZENoYW5uZWxfRGVtb1wiKTtcbiAgfVxuXG4gIGRpb0NvZGVUZXh0KCkge1xuICAgIHJldHVybiBcImxldCByZXN1bHQgPSBhd2FpdCB0aGlzLm1ldGhvZENoYW5uZWwuaW52b2tlTWV0aG9kKCdjYWxsTmF0aXZlSWNvbkxpc3RSZWZyZXNoJywge30pO1wiO1xuICB9XG4gIGRpb0NvZGVUZXh0MigpIHtcbiAgICByZXR1cm4gXCJsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5tZXRob2RDaGFubmVsLmludm9rZU1ldGhvZCgnY2FsbE5hdGl2ZUljb25MaXN0TG9hZE1vcmUnLCB7fSk7XCI7XG4gIH1cblxuICBhc3luYyBjYWxsTWV0aG9kQ2hhbm5lbChtZXRob2QpIHtcblxuICAgIC8vTWVzc2FnZUNoYW5uZWwg55So5rOV56S65L6LXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWV0aG9kQ2hhbm5lbC5pbnZva2VNZXRob2QobWV0aG9kLCB7fSk7XG5cbiAgICBNWEpTTG9nLmxvZyhcImNhbGxOYXRpdmVJY29uTGlzdFJlZnJlc2ggcmVzdWx0OiBcIiArIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcblxuICB9XG5cblxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIk1lc3NhZ2VDaGFubmVsIEV4YW1wbGVcIiksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIkNvZGUg6LCD55SoTWVzc2FnZUNoYW5uZWwgTGlzdFJlZnJlc2hcIiksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRyYWlsaW5nOiBuZXcgSWNvbihJY29uc1tcImRpcmVjdGlvbnNfcnVuXCJdKSxcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCh0aGlzLmRpb0NvZGVUZXh0KCksIHtcbiAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JheSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgb25UYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kQ2hhbm5lbChcImNhbGxOYXRpdmVJY29uTGlzdFJlZnJlc2hcIik7XG5cbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlID0gSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UgPyByZXNwb25zZSA6IFwibWVzc2FnZWNoYW5uZWwgcmV0dXJuIGVtcHR5XCIpO1xuXG4gICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJDb2RlIOiwg+eUqE1lc3NhZ2VDaGFubmVsIExpc3RMb2FkTW9yZVwiKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKEljb25zW1wiZGlyZWN0aW9uc19ydW5cIl0pLFxuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KHRoaXMuZGlvQ29kZVRleHQyKCksIHtcbiAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JheSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgb25UYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kQ2hhbm5lbChcImNhbGxOYXRpdmVJY29uTGlzdExvYWRNb3JlXCIpO1xuXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZSA9IEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlID8gcmVzcG9uc2UgOiBcIm1lc3NhZ2VjaGFubmVsIHJldHVybiBlbXB0eVwiKTtcblxuICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwiTWVzc2FnZUNoYW5uZWwgUmVzdWx0XCIpLFxuXG4gICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRoaXMucmVzcG9uc2UsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JheSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVNZXNzYWdlQ2hhbm5lbCxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlLFxuICBUZXh0T3ZlcmZsb3csXG4gIFBhZGRpbmcsXG4gIEljb25zLFxuICBNZXRob2RDaGFubmVsXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG4vL2xldCBwYWNrYWdlc19fc3AgPSByZXF1aXJlKFwicGFja2FnZXMvc2hhcmVkX3ByZWZlcmVuY2VzL3NoYXJlZF9wcmVmZXJlbmNlcy5qc1wiKTtcblxuXG5hc3luYyBmdW5jdGlvbiB0ZXN0UHJlZmVyZW5jZSgpIHtcbiAgLy9sZXQgcGFja2FnZXNfX3NwID0gcmVxdWlyZShcInBhY2thZ2VzL3NoYXJlZF9wcmVmZXJlbmNlcy9zaGFyZWRfcHJlZmVyZW5jZXMuanNcIik7XG5cbiAgdHJ5IHtcblxuICAgIGxldCBfcHJlZnMgPSAoYXdhaXQgcGFja2FnZXNfX3NwLlNoYXJlZFByZWZlcmVuY2VzLmdldEluc3RhbmNlKCkpO1xuICAgIF9wcmVmcy5zZXRTdHJpbmcoXCJteGZsdXR0ZXJcIiwgXCJNWEZsdXR0ZXIgU2hhcmVkUHJlZmVyZW5jZXM6IENvdW50IDogXCIgKyB0aGlzLmNvdW50KyspO1xuXG5cblxuICAgIGxldCB2ID0gX3ByZWZzLmdldFN0cmluZyhcInNvYXBcIik7XG4gICAgTVhKU0xvZy5sb2coXCJfcHJlZnMuZ2V0U3RyaW5nKCdzb2FwJyk6XCIgKyB2KTtcblxuICAgIF9wcmVmcy5zZXRTdHJpbmdMaXN0KFwic29hcGxpc3RcIiwgW1wic29hcFwiLCBcIm14Zmx1dHRlciB1dXV1dVwiXSk7XG5cbiAgICBsZXQgdkxpc3QgPSBfcHJlZnMuZ2V0U3RyaW5nTGlzdChcInNvYXBsaXN0XCIpO1xuICAgIE1YSlNMb2cubG9nKFwiX3ByZWZzLmdldFN0cmluZ0xpc3QoJ3NvYXBsaXN0Jyk6XCIgKyB2TGlzdCk7XG5cbiAgfSBjYXRjaCAoZSQpIHtcbiAgICBsZXQgZSA9IGRhcnQuZ2V0VGhyb3duKGUkKTtcbiAgICBNWEpTTG9nLmxvZyhcInRlc3RQcmVmZXJlbmNlIGVycm9yOlwiICsgZSk7XG4gICAgcmV0dXJuIGU7XG5cbiAgfVxuXG5cbn1cblxuXG5jbGFzcyBQYWdlRXhhbXBsZVNoYXJlZFByZWZlcmVuY2VzIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJQYWdlRXhhbXBsZVNoYXJlZFByZWZlcmVuY2VzXCIpO1xuXG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlU2hhcmVkUHJlZmVyZW5jZXNTdGF0ZSh0aGlzKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZVNoYXJlZFByZWZlcmVuY2VzU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlBhZ2VFeGFtcGxlU2hhcmVkUHJlZmVyZW5jZXNTdGF0ZVwiKTtcbiAgICB0aGlzLnJlc3BvbnNlID0gXCLngrnlh7vlsI/kurpSdW7kuIrpnaLnmoTku6PnoIFcIjtcbiAgICB0aGlzLmNvdW50ID0gMDtcblxuICAgIHRoaXMucHJlZnMgPSBudWxsO1xuICAgIHRoaXMuc2V0dXAoKTtcbiAgfVxuXG4gIGFzeW5jIHNldHVwKCkge1xuICAgIHRoaXMucHJlZnMgPSAoYXdhaXQgcGFja2FnZXNfX3NwLlNoYXJlZFByZWZlcmVuY2VzLmdldEluc3RhbmNlKCkpO1xuICB9XG5cblxuICBkaW9Db2RlVGV4dCgpIHtcbiAgICByZXR1cm4gXCJwcmVmcy5zZXRTdHJpbmco4oCYbXhmbHV0dGVy4oCZLCBzdHIpXCI7XG4gIH1cbiAgZGlvQ29kZVRleHQyKCkge1xuICAgIHJldHVybiBcInRoaXMucHJlZnMuZ2V0U3RyaW5nKCdteGZsdXR0ZXInKVwiO1xuICB9XG5cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJNZXNzYWdlQ2hhbm5lbCBFeGFtcGxlXCIpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJDb2RlIOiwg+eUqHByZWZzLnNldFN0cmluZ1wiKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKEljb25zW1wiZGlyZWN0aW9uc19ydW5cIl0pLFxuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KHRoaXMuZGlvQ29kZVRleHQoKSwge1xuICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmF5LFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBvblRhcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuXG5cbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgc3RyID0gXCJNWEZsdXR0ZXIgU2hhcmVkUHJlZmVyZW5jZXM6IENvdW50IDogXCIgKyB0aGlzLmNvdW50Kys7XG5cbiAgICAgICAgICAgICAgICBsZXQgdiA9IHRoaXMucHJlZnMuc2V0U3RyaW5nKFwibXhmbHV0dGVyXCIsIHN0cik7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZSA9IFwiIHByZWZzLnNldFN0cmluZygnbXhmbHV0dGVyJyxcIiArIHN0ciArIFwiKVwiO1xuXG4gICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJDb2RlIOiwg+eUqCBwcmVmcy5nZXRTdHJpbmdcIiksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRyYWlsaW5nOiBuZXcgSWNvbihJY29uc1tcImRpcmVjdGlvbnNfcnVuXCJdKSxcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCh0aGlzLmRpb0NvZGVUZXh0MigpLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmdyYXksXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG9uVGFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHYgPSB0aGlzLnByZWZzLmdldFN0cmluZyhcIm14Zmx1dHRlclwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlID0gdjtcblxuICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwicHJlZnMgUmVzdWx0XCIpLFxuXG4gICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRoaXMucmVzcG9uc2UsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JheSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGFnZUV4YW1wbGVTaGFyZWRQcmVmZXJlbmNlcyxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIEljb25CdXR0b24sXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgSW1hZ2UsXG4gIFRoZW1lLFxuICBQYWRkaW5nLFxuICBTY3JvbGxiYXIsXG4gIEtleSxcbiAgTmF2aWdhdG9yLFxuICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qc1wiKTtcblxuXG5jbGFzcyBQbGF0Zm9ybUV4YW1wbGVzUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlBsYXRmb3JtRXhhbXBsZXNQYWdlXCIpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQbGF0Zm9ybSBFeGFtcGxlcycpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgU2Nyb2xsYmFyKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJNZXNzYWdlQ2hhbm5lbFwiKSxcblxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiTWVzc2FnZUNoYW5uZWxcIiksXG4gICAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgVGV4dChcImlPUy9BbmRyb2lkXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxldCB7IFBhZ2VFeGFtcGxlTWVzc2FnZUNoYW5uZWwgfSA9IHJlcXVpcmUoXCIuL2V4YW1wbGVfbWVzc2FnZV9jaGFubmVsLmpzXCIpO1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwi572R57uc57uE5Lu2XCIsIHsga2V5OiBuZXcgS2V5KFwiMVwiKSB9KSxcblxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiRGlvIEV4YW1wbGVzXCIpLFxuICAgICAgICAgICAgICBzdWJ0aXRsZTogbmV3IFRleHQoXCJpT1MvQW5kcm9pZFwiKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsZXQgeyBQYWdlRXhhbXBsZURpbyB9ID0gcmVxdWlyZShcIi4vZXhhbXBsZV9kaW8uanNcIik7XG4gICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVEaW87XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKFwi5a2Y5YKoXCIpLFxuXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJzaGFyZWRfcHJlZmVyZW5jZXNcIiksXG4gICAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgVGV4dChcImlPUy9BbmRyb2lkXCIpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxldCB7IFBhZ2VFeGFtcGxlU2hhcmVkUHJlZmVyZW5jZXMgfSA9IHJlcXVpcmUoXCIuL2V4YW1wbGVfc2hhcmVkX3ByZWZlcmVuY2VzLmpzXCIpO1xuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlU2hhcmVkUHJlZmVyZW5jZXM7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgXSxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUGxhdGZvcm1FeGFtcGxlc1BhZ2UsXG59O1xuIiwiLy8gIE1YRmx1dHRlckZyYW1ld29ya1xuLy8gIENvcHlyaWdodCAyMDE5IFRoZSBNWEZsdXR0ZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgQm94RGVjb3JhdGlvbixcbiAgQm9yZGVyUmFkaXVzLFxuICBSYWRpdXMsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBJY29uQnV0dG9uLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBDcm9zc0F4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG4gIEZsdXR0ZXJMb2dvLFxuICBXcmFwLFxuICBTY3JvbGxiYXIsXG4gIENhcmQsXG4gIFRoZW1lLFxuICBOYXZpZ2F0b3IsXG4gIE1hdGVyaWFsUGFnZVJvdXRlLFxuICBNZXRob2RDaGFubmVsLFxuICBDbGlwUlJlY3QsXG4gIEJveEZpdCxcbiAgRHVyYXRpb24sXG4gIEtleSxcbiAgQm9yZGVyRGlyZWN0aW9uYWwsXG4gIEJvcmRlclNpZGUsXG4gIEFsaWdubWVudCxcbiAgQXNwZWN0UmF0aW8sXG4gIERlY29yYXRpb25JbWFnZSxcbiAgUmVjdCxcbiAgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3LFxuICBTdGFjayxcbiAgUGFkZGluZyxcbiAgTWVkaWFRdWVyeSxcbiAgVW5pcXVlS2V5LFxufSA9IHJlcXVpcmUoJy4uLy4uL2pzX2ZsdXR0ZXIuanMnKTtcblxuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzJyk7XG5jb25zdCB7IENhY2hlZE5ldHdvcmtJbWFnZSB9ID0gcmVxdWlyZSgnQHRlbmNlbnQvbXhmbHV0dGVyLWNhY2hlZC1uZXR3b3JrLWltYWdlJyk7XG5cbi8vXG5jb25zdCBnX21heF9jb3VudCA9IDIwMDtcblxuLy9kYXRhXG5sZXQgZ19uZXdzT3JkZXIgPSAwO1xuXG4vL+WunueOsOS4gOS4queugOWNleeahGV2ZW50X2J1c1xubGV0IGdfZXZlbnRfYnVzX21hcCA9IHt9OyAvL3R5cGUgTWFwPGtleTpTdHJpbmcsZnVuY3Rpb246aGFuZGVsRnVuPlxuXG5jbGFzcyBQZXJmb3JtYW5jZVByb2ZpbGluZ1dpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKHsgdGl0bGUsIHByb2ZpbGVUZXh0LCByZWJ1aWxkQ2FsbGJhY2sgfSA9IHt9KSB7XG4gICAgc3VwZXIoJ1BlcmZvcm1hbmNlUHJvZmlsaW5nV2lkZ2V0Jyk7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlID8gdGl0bGUgOiAn5oCn6IO95YiG5p6QJztcbiAgICB0aGlzLnByb2ZpbGVUZXh0ID0gcHJvZmlsZVRleHQ7XG4gICAgdGhpcy5yZWJ1aWxkQ2FsbGJhY2sgPSByZWJ1aWxkQ2FsbGJhY2s7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBlcmZvcm1hbmNlUHJvZmlsaW5nV2lkZ2V0U3RhdGUodGhpcyk7XG4gIH1cbn1cblxuUGVyZm9ybWFuY2VQcm9maWxpbmdXaWRnZXQuRXZlbnRfUmVmcmVzaF9Qcm9maWxlSW5mbyA9ICdkZW1vX3ByZWZfaW5mb19yZWZyZXNoJztcblxuY2xhc3MgUGVyZm9ybWFuY2VQcm9maWxpbmdXaWRnZXRTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKHdpZGdldCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5idWlsZENvdW50ID0gMDtcbiAgfVxuXG4gIC8vT3ZlcnJpZGVcbiAgaW5pdFN0YXRlKCkge1xuICAgIC8v5rOo5YaM5bGA6YOo5Yi35paw5LqL5Lu2XG4gICAgZ19ldmVudF9idXNfbWFwW1BlcmZvcm1hbmNlUHJvZmlsaW5nV2lkZ2V0LkV2ZW50X1JlZnJlc2hfUHJvZmlsZUluZm9dID0gZnVuY3Rpb24gKHByb2ZpbGVUZXh0KSB7XG4gICAgICB0aGlzLnJlZnJlc2hQcm9maWxlVGV4dChwcm9maWxlVGV4dCk7XG4gICAgfS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLy9PdmVycmlkZVxuICBkaXNwb3NlKCkge1xuICAgIGRlbGV0ZSBnX2V2ZW50X2J1c19tYXBbUGVyZm9ybWFuY2VQcm9maWxpbmdXaWRnZXQuRXZlbnRfUmVmcmVzaF9Qcm9maWxlSW5mb107XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBQYWRkaW5nKHtcbiAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7IHRvcDogMC4wLCBib3R0b206IDAuMCwgbGVmdDogMTAuMCwgcmlnaHQ6IDEwIH0pLFxuICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6IENyb3NzQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIG5ldyBUZXh0KHRoaXMud2lkZ2V0LnRpdGxlICsgJygnICsgKyt0aGlzLmJ1aWxkQ291bnQgKyAnKScsIHtcbiAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTYuMCxcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2ssXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy53aWRnZXQucmVidWlsZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2lkZ2V0LnJlYnVpbGRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIC8v5oCn6IO95YiG5p6Q5qih5byPXG4gICAgICAgICAgICAgICAgICAvL+aJk+W8gOaAp+iDveWIhuaekOaooeW8j++8jHdpZGdldC5lbmFibGVQcm9maWxlID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgLy/lj6/ku6VTdGF0Zeexu+mHjei9vW9uQnVpbGRFbmTvvIzkvb/nlKhhcmdzLnByb2ZpbGVUZXh06I635b6X6L+Z5qyhUmVidWlsZOeahOWQhOS4qumYtuauteiAl+aXtlxuICAgICAgICAgICAgICAgICAgLy/lpoLmnpxvbkJ1aWxkRW5k5Y+I6Kem5Y+Rc2V0U3RhdGUg6K6w5b6X5LiA5a6adGhpcy5lbmFibGVQcm9maWxlID0gZmFsc2U7IOWQpuWImeS8mlJlYnVpbGTmrbvlvqrnjq9cbiAgICAgICAgICAgICAgICAgIHRoaXMud2lkZ2V0LmVuYWJsZVByb2ZpbGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICBNWEpTTG9nLmxvZygn5pWw5o2u6YeP5bCR5pe277yM54K55Ye7Li4uJyk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgn54K55Ye75p+l55yL6ICX5pe2Jywge1xuICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxNC4wLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnJlZCxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHsgdG9wOiAwLjAsIGJvdHRvbTogMTAuMCwgbGVmdDogMC4wLCByaWdodDogMCB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCh0aGlzLnByb2ZpbGVUZXh0ID09IG51bGwgPyBcIuiAl+aXtuS/oeaBr1wiIDogdGhpcy5wcm9maWxlVGV4dCksXG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IENhcmQoeyBjaGlsZDogd2lkZ2V0LCBjb2xvcjogbmV3IENvbG9yKDB4ZmZlMWY1ZmUpLCBtYXJnaW46IEVkZ2VJbnNldHMuZnJvbUxUUkIoOC4wLCA4LjAsIDEwLjAsIDAuMCkgfSk7XG4gIH1cblxuICBvbkJ1aWxkRW5kKGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMud2lkZ2V0LmVuYWJsZVByb2ZpbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlZnJlc2hQcm9maWxlVGV4dChhcmdzLnByb2ZpbGVUZXh0KTtcbiAgfVxuXG4gIHJlZnJlc2hQcm9maWxlVGV4dChwcm9maWxlVGV4dCkge1xuICAgIC8v5aaC5p6cb25CdWlsZEVuZOWPiOinpuWPkXNldFN0YXRlIOiusOW+l+S4gOWumnRoaXMuZW5hYmxlUHJvZmlsZSA9IGZhbHNlOyDlkKbliJnkvJpSZWJ1aWxk5q275b6q546vXG5cbiAgICBpZighcHJvZmlsZVRleHQpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMud2lkZ2V0LmVuYWJsZVByb2ZpbGUgPSBmYWxzZTtcbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByb2ZpbGVUZXh0ID0gcHJvZmlsZVRleHQ7XG4gICAgICB9LmJpbmQodGhpcyksXG4gICAgKTtcbiAgfVxufVxuXG5jbGFzcyBMaXN0Vmlld1Byb2ZpbGVEZW1vMSBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdMaXN0Vmlld0RlbW8nKTtcbiAgICB0aGlzLmVuYWJsZVByb2ZpbGUgPSB0cnVlO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBMaXN0Vmlld1Byb2ZpbGVEZW1vMVN0YXRlKHRoaXMpO1xuICB9XG59XG5cbmNsYXNzIExpc3RWaWV3UHJvZmlsZURlbW8xU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3Rvcih3aWRnZXQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5uZXdzQXJyYXkgPSBbXTtcbiAgICB0aGlzLmJ1aWxkQ291bnQgPSAwO1xuICB9XG5cbiAgaW5pdFN0YXRlKCkge1xuICAgIHN1cGVyLmluaXRTdGF0ZSgpO1xuICAgIHRoaXMubmV3c0FycmF5ID0gZ19uZXdzTGlzdDtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBnX25ld3NPcmRlciA9IDA7XG4gICAgKyt0aGlzLmJ1aWxkQ291bnQ7XG5cbiAgICBsZXQgaXRlbXMgPSBbXTtcblxuICAgIGl0ZW1zLnB1c2gobmV3IENvbnRhaW5lcih7IGNoaWxkOiBuZXcgUGVyZm9ybWFuY2VQcm9maWxpbmdXaWRnZXQoeyB0aXRsZTogJ+WxgOmDqOWIt+aWsOWwj+aVsOaNrumHj+a1i+ivlScgfSkgfSkpO1xuICAgIGl0ZW1zLnB1c2goXG4gICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBQZXJmb3JtYW5jZVByb2ZpbGluZ1dpZGdldCh7XG4gICAgICAgICAgdGl0bGU6ICfmlbTkuKrpobXpnaLliLfmlrDlpKfmlbDmja7ph4/mtYvor5UnLFxuICAgICAgICAgIHByb2ZpbGVUZXh0OiB0aGlzLnByb2ZpbGVUZXh0LFxuICAgICAgICAgIHJlYnVpbGRDYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy/mgKfog73liIbmnpDmqKHlvI9cbiAgICAgICAgICAgIC8v5omT5byA5oCn6IO95YiG5p6Q5qih5byP77yMd2lkZ2V0LmVuYWJsZVByb2ZpbGUgPSB0cnVlXG4gICAgICAgICAgICAvL+WPr+S7pVN0YXRl57G76YeN6L29b25CdWlsZEVuZO+8jOS9v+eUqGdldFByb2ZpbGVUZXh06I635b6X6L+Z5qyhUmVidWlsZOeahOWQhOS4qumYtuauteiAl+aXtlxuICAgICAgICAgICAgLy/lpoLmnpxvbkJ1aWxkRW5k5Y+I6Kem5Y+Rc2V0U3RhdGUg6K6w5b6X5LiA5a6adGhpcy5lbmFibGVQcm9maWxlID0gZmFsc2U7IOWQpuWImeS8mlJlYnVpbGTmrbvlvqrnjq9cbiAgICAgICAgICAgIHRoaXMud2lkZ2V0LmVuYWJsZVByb2ZpbGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7fS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ19tYXhfY291bnQ7ICsraSkge1xuICAgICAgbGV0IGl0ZW0gPSBuZXcgQ29udGFpbmVyKHsgY2hpbGQ6IHRoaXMuaG90Q2FyZCh0aGlzLm5ld3NBcnJheVtpICUgdGhpcy5uZXdzQXJyYXkubGVuZ3RoXSwgdGhpcy5idWlsZENvdW50KSB9KTtcbiAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+e9keaYk+aWsOmXuyBDb2x1bW4gV2lkZ2V0ICcpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3KHtcbiAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgIGNoaWxkcmVuOiBpdGVtcyxcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cblxuICAvL1xuICBvbkJ1aWxkRW5kKGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMud2lkZ2V0LmVuYWJsZVByb2ZpbGUgfHwgIWFyZ3MucHJvZmlsZVRleHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL+WmguaenG9uQnVpbGRFbmTlj4jop6blj5FzZXRTdGF0ZSDorrDlvpfkuIDlrpp0aGlzLmVuYWJsZVByb2ZpbGUgPSBmYWxzZTsg5ZCm5YiZ5LyaUmVidWlsZOatu+W+queOr1xuICAgIHRoaXMud2lkZ2V0LmVuYWJsZVByb2ZpbGUgPSBmYWxzZTtcblxuICAgIC8vMS4g57uZ5oCn6IO9Q2VsbCDlj5HkuKrpgJrnn6XvvIzlsYDpg6jliLfmlrAs5oqKUHJvZmlsZVRleHTmmL7npLrlh7rmnaVcbiAgICBsZXQgaGFuZGVsRnVuID0gZ19ldmVudF9idXNfbWFwW1BlcmZvcm1hbmNlUHJvZmlsaW5nV2lkZ2V0LkV2ZW50X1JlZnJlc2hfUHJvZmlsZUluZm9dO1xuICAgIGlmIChoYW5kZWxGdW4pIHtcbiAgICAgIGhhbmRlbEZ1bihhcmdzLnByb2ZpbGVUZXh0KTtcbiAgICB9XG4gIH1cblxuICBob3RDYXJkKG5ld3NNb2RlbCwgYnVpbGRDb3VudCkge1xuICAgIGdfbmV3c09yZGVyKys7XG5cbiAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgIGNvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgIGJvcmRlcjogbmV3IEJvcmRlckRpcmVjdGlvbmFsKHtcbiAgICAgICAgICBib3R0b206IG5ldyBCb3JkZXJTaWRlKHtcbiAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2sxMixcbiAgICAgICAgICAgIHdpZHRoOiAxLjAsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHsgdG9wOiA4LjAsIGJvdHRvbTogOC4wIH0pLFxuICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoU3RyaW5nKGdfbmV3c09yZGVyKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE4LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3c01vZGVsLnJpc2UgIT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgID8gbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkOCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogMTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dChuZXdzTW9kZWwucmlzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDEwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBuZXcgQ29udGFpbmVyKCksXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICBmbGV4OiA2LFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnYnVpbGRDb3VudDogJyArIGJ1aWxkQ291bnQgKyAnICcgKyBuZXdzTW9kZWwudGl0bGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ib2xkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTYuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxLjEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoeyBib3R0b206IDEwLjAsIHJpZ2h0OiA0LjAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ld3NNb2RlbC5tYXJrICE9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQobmV3c01vZGVsLm1hcmssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7IGNvbG9yOiBDb2xvcnMuYmxhY2s1NCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7IGJvdHRvbTogOC4wLCByaWdodDogNC4wIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6IG5ldyBDb250YWluZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KG5ld3NNb2RlbC5ob3ROdW0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHsgY29sb3I6IENvbG9ycy5ibGFjazU0IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnQsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgZmxleDogMyxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEFzcGVjdFJhdGlvKHtcbiAgICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiAzLjAgLyAyLjAsXG4gICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENsaXBSUmVjdCh7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmNpcmN1bGFyKDQuMCksXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2FjaGVkTmV0d29ya0ltYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICBmYWRlSW5EdXJhdGlvbjogbmV3IER1cmF0aW9uKHsgbWlsbGlzZWNvbmRzOiAxMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBmYWRlT3V0RHVyYXRpb246IG5ldyBEdXJhdGlvbih7IG1pbGxpc2Vjb25kczogMTAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmw6IG5ld3NNb2RlbC5pbWdVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEyNC4wLFxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNjkuMCxcbiAgICAgICAgICAgICAgICAgICAgICBmaXQ6IEJveEZpdC5maWxsLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cbn1cblxuY2xhc3MgTmV3c01vZGVsIHtcbiAgY29uc3RydWN0b3Iob3JkZXIsIHRpdGxlLCBob3ROdW0sIGltZ1VybCwgeyBtYXJrLCByaXNlIH0gPSB7fSkge1xuICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgdGhpcy5ob3ROdW0gPSBob3ROdW07XG4gICAgdGhpcy5pbWdVcmwgPSBpbWdVcmw7XG4gICAgdGhpcy5tYXJrID0gbWFyaztcbiAgICB0aGlzLnJpc2UgPSByaXNlO1xuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKGpzb25NYXApIHtcbiAgICBsZXQgbmV3cyA9IG5ldyBOZXdzTW9kZWwoKTtcblxuICAgIG5ld3Mub3JkZXIgPSBTdHJpbmcoanNvbk1hcFsnb3JkZXInXSk7XG4gICAgbmV3cy50aXRsZSA9IGpzb25NYXBbJ3RpdGxlJ107XG4gICAgbmV3cy5ob3ROdW0gPSBTdHJpbmcoanNvbk1hcFsndm90ZWNvdW50J10pICsgJyDkurrngrnotZ4nO1xuICAgIG5ld3MuaW1nVXJsID0ganNvbk1hcFsnaW1nc3JjJ107XG4gICAgbmV3cy5tYXJrID0ganNvbk1hcFsnc291cmNlJ107XG4gICAgbmV3cy5yaXNlID0ganNvbk1hcFsnYWxpYXMnXTtcblxuICAgIHJldHVybiBuZXdzO1xuICB9XG59XG5cbmxldCBnX25ld3NMaXN0ID0gW1xuICBuZXcgTmV3c01vZGVsKCcwMScsICfkuobkuI3otbfnmoTmlrDml7bku6PvvIzkuJbnlYznq57kuonkuK3nmoTkuK3lm73liLbpgKAnLCAnNDQyNyDkuIfng63luqYnLCAnaHR0cHM6Ly9waWMyLnpoaW1nLmNvbS81MC92Mi03MTBiN2E2ZmVhMTJhNzIwMzk0NWI2NjY3OTBiNzE4MV9oZC5qcGcnKSxcbiAgbmV3IE5ld3NNb2RlbCgnMDInLCAn5LiA5Liq5aWz55Sf5oCO5qC35omN566X6KeB6L+H5LiW6Z2i77yfJywgJzQxNTcg5LiH54Ot5bqmJywgJ2h0dHBzOi8vcGljMy56aGltZy5jb20vNTAvdjItNTZkY2E5OWNkODcxOGY5MzAzZDQzYjMwMTUzNDJiYTdfaGQuanBnJywge1xuICAgIHJpc2U6ICczJyxcbiAgICBtYXJrOiAn5omA6LCT5LiW6Z2i77yM5bCx5piv5LiW55WM55qE5q+P5LiA6Z2iJyxcbiAgfSksXG4gIG5ldyBOZXdzTW9kZWwoJzAzJywgJ+WmguaenOacseagh+ayoeatu++8jOWJiuiXqeeahOivne+8jOacseajo+S8mumAoOWPjeWQl++8nycsICc0MDA5IOS4h+eDreW6picsICdodHRwczovL3BpYzQuemhpbWcuY29tL3YyLTA5NWQyYjQ4OTcwODg5YjEwODI0N2U2ZDJkZDBmYTZiX2IuanBnJyksXG4gIG5ldyBOZXdzTW9kZWwoJzA0JywgJ+WmguS9lee8luivkSBMaW51eCDlhoXmoLjvvJ8nLCAnMzExMCDkuIfng63luqYnLCAnaHR0cHM6Ly9waWMzLnpoaW1nLmNvbS84MC92Mi0xZWExYjBjZjgwYzg1Yjg4ODkzYjJiOTdhOTRkN2U3MV9oZC5qcGcnLCB7IG1hcms6ICflhoXmoLjvvJ/lkbXlkbUnIH0pLFxuICBuZXcgTmV3c01vZGVsKCcwNScsICflpoLkvZXnnIvlvoXlsIbnpZ7or53mlYXkuovmi43miJDnlLXlvbHov5nku7bkuovvvJ8nLCAnMjExOSDkuIfng63luqYnLCAnaHR0cHM6Ly9waWM0LnpoaW1nLmNvbS81MC92Mi0yNjdiMWRkYTYyZjc3MGJkMmJkMTNjYjU0NTExN2I3OF9oZC5qcGcnLCB7XG4gICAgcmlzZTogJzMnLFxuICB9KSxcbl07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBMaXN0Vmlld1Byb2ZpbGVEZW1vMSxcbn07XG4iLCIvLyAgTVhGbHV0dGVyRnJhbWV3b3JrXG4vLyAgQ29weXJpZ2h0IDIwMTkgVGhlIE1YRmx1dHRlciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy9cbi8vICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyAgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxubGV0IHtcbiAgICBNWEpTTG9nLFxuICAgIHJ1bkFwcCxcbiAgICBNWEpTRmx1dHRlckFwcCxcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gICAgTWF0ZXJpYWxBcHAsXG4gICAgU2NhZmZvbGQsXG4gICAgQ29udGFpbmVyLFxuICAgIEJveERlY29yYXRpb24sXG4gICAgQm9yZGVyUmFkaXVzLFxuICAgIFJhZGl1cyxcbiAgICBMaXN0VGlsZSxcbiAgICBDZW50ZXIsXG4gICAgQ29sb3IsXG4gICAgQXBwQmFyLFxuICAgIFNuYWNrQmFyLFxuICAgIFRleHQsXG4gICAgSWNvbixcbiAgICBJY29uRGF0YSxcbiAgICBFZGdlSW5zZXRzLFxuICAgIENvbG9ycyxcbiAgICBJY29uQnV0dG9uLFxuICAgIEZsYXRCdXR0b24sXG4gICAgUmFpc2VkQnV0dG9uLFxuICAgIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICAgIENvbHVtbixcbiAgICBSb3csXG4gICAgRHJvcGRvd25CdXR0b24sXG4gICAgRHJvcGRvd25NZW51SXRlbSxcbiAgICBNYWluQXhpc0FsaWdubWVudCxcbiAgICBDcm9zc0F4aXNBbGlnbm1lbnQsXG4gICAgVGV4dFN0eWxlLFxuICAgIFBvcHVwTWVudUJ1dHRvbixcbiAgICBQb3B1cE1lbnVJdGVtLFxuICAgIEJ1dHRvbkJhcixcbiAgICBNYWluQXhpc1NpemUsXG4gICAgVGV4dERlY29yYXRpb24sXG4gICAgUmljaFRleHQsXG4gICAgVGV4dFNwYW4sXG4gICAgRXhwYW5kZWQsXG4gICAgRm9udFdlaWdodCxcbiAgICBUZXh0Rm9ybUZpZWxkLFxuICAgIElucHV0RGVjb3JhdGlvbixcbiAgICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgICBUZXh0SW5wdXRUeXBlLFxuICAgIFNpemVkQm94LFxuICAgIFRleHRGaWVsZCxcbiAgICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gICAgTGlzdFZpZXcsXG4gICAgU2xpZGVyLFxuICAgIEljb25zLFxuICAgIEZsdXR0ZXJMb2dvLFxuICAgIFdyYXAsXG4gICAgU2Nyb2xsYmFyLFxuICAgIENhcmQsXG4gICAgVGhlbWUsXG4gICAgTmF2aWdhdG9yLFxuICAgIE1hdGVyaWFsUGFnZVJvdXRlLFxuICAgIE1ldGhvZENoYW5uZWwsXG4gICAgQ2xpcFJSZWN0LFxuICAgIEJveEZpdCxcbiAgICBEdXJhdGlvbixcbiAgICBLZXksXG4gICAgQm9yZGVyRGlyZWN0aW9uYWwsXG4gICAgQm9yZGVyU2lkZSxcbiAgICBBbGlnbm1lbnQsXG4gICAgQXNwZWN0UmF0aW8sXG4gICAgRGVjb3JhdGlvbkltYWdlLFxuICAgIFJlY3QsXG4gICAgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3XG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cblxuXG5jb25zdCB7IENhY2hlZE5ldHdvcmtJbWFnZSB9ID0gcmVxdWlyZSgnQHRlbmNlbnQvbXhmbHV0dGVyLWNhY2hlZC1uZXR3b3JrLWltYWdlJyk7XG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5cblxuLy9cbmNvbnN0IGdfbWF4X2NvdW50ID0gMTAwO1xuXG4vL2RhdGFcbmxldCBnX25ld3NPcmRlciA9IDA7XG4vL1xuY2xhc3MgTGlzdFZpZXdQcm9maWxlRGVtbzEgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignTGlzdFZpZXdEZW1vJyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFZpZXdQcm9maWxlRGVtbzFTdGF0ZSh0aGlzKTtcbiAgICB9XG5cbn1cblxuY2xhc3MgTGlzdFZpZXdQcm9maWxlRGVtbzFTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5uZXdzQXJyYXkgPSBbXTtcbiAgICAgICAgdGhpcy5idWlsZENvdW50ID0gMTtcbiAgICB9XG5cbiAgICBpbml0U3RhdGUoKSB7XG4gICAgICAgIHN1cGVyLmluaXRTdGF0ZSgpO1xuICAgICAgICB0aGlzLm5ld3NBcnJheSA9IGdfbmV3c0xpc3Q7XG4gICAgfVxuXG5cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcblxuICAgICAgICBnX25ld3NPcmRlciA9IDA7XG4gICAgICAgIHRoaXMuYnVpbGRDb3VudCsrO1xuXG5cbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnX21heF9jb3VudDsgKytpKSB7XG5cbiAgICAgICAgICAgIGxldCBpdGVtID0gbmV3IENvbnRhaW5lcih7IGNoaWxkOiBuZXcgTGlzdFZpZXdJdGVtKHRoaXMubmV3c0FycmF5W2kgJSB0aGlzLm5ld3NBcnJheS5sZW5ndGhdKSB9KTtcblxuICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+e9keaYk+aWsOmXuyBDb2x1bW4gV2lkZ2V0ICcpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3KHtcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBpdGVtc1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxuY2xhc3MgTGlzdFZpZXdJdGVtIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gICAgY29uc3RydWN0b3Iob25lTmV3c01hcCkge1xuICAgICAgICBzdXBlcignTGlzdFZpZXdJdGVtJyk7XG5cbiAgICAgICAgdGhpcy5uZXdzTW9kZWwgPSBvbmVOZXdzTWFwO1xuXG4gICAgICAgIHRoaXMuaW5kZXggPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcblxuXG4gICAgfVxuXG5cbiAgICBob3RDYXJkKGNvbnRleHQsIG5ld3NNb2RlbCkge1xuXG4gICAgICAgIGdfbmV3c09yZGVyKys7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBuZXcgQm9yZGVyRGlyZWN0aW9uYWwoe1xuICAgICAgICAgICAgICAgICAgICBib3R0b206IG5ldyBCb3JkZXJTaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2sxMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLjBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHsgdG9wOiA4LjAsIGJvdHRvbTogOC4wIH0pLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhnX25ld3NPcmRlciksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTguMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdzTW9kZWwucmlzZSAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZDgsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnIH0pLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAxMC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHQobmV3c01vZGVsLnJpc2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTAuMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IENvbnRhaW5lcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KG5ld3NNb2RlbC50aXRsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTYuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHsgYm90dG9tOiAxMC4wLCByaWdodDogNC4wIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3c01vZGVsLm1hcmsgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KG5ld3NNb2RlbC5tYXJrLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoeyBjb2xvcjogQ29sb3JzLmJsYWNrNTQgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7IGJvdHRvbTogOC4wLCByaWdodDogNC4wIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQobmV3c01vZGVsLmhvdE51bSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoeyBjb2xvcjogQ29sb3JzLmJsYWNrNTQgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQXNwZWN0UmF0aW8oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IDMuMCAvIDIuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2xpcFJSZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5jaXJjdWxhcig0LjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2FjaGVkTmV0d29ya0ltYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFkZUluRHVyYXRpb246IG5ldyBEdXJhdGlvbih7IG1pbGxpc2Vjb25kczogMTAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGVPdXREdXJhdGlvbjogbmV3IER1cmF0aW9uKHsgbWlsbGlzZWNvbmRzOiAxMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmw6IG5ld3NNb2RlbC5pbWdVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMjQuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA2OS4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXQ6IEJveEZpdC5maWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG90Q2FyZChjb250ZXh0LCB0aGlzLm5ld3NNb2RlbCk7XG4gICAgICAgIH0gY2F0Y2ggKGUkKSB7XG4gICAgICAgICAgICAvLyBsZXQgZSA9IGRhcnQuZ2V0VGhyb3duKGUkKTtcbiAgICAgICAgICAgIC8vIE1YSlNMb2cubG9nKFwiY2FyZDpidWlsZChjb250ZXh0KTogIGVycm9yOlwiICsgZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmNsYXNzIE5ld3NNb2RlbCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG9yZGVyLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgaG90TnVtLFxuICAgICAgICBpbWdVcmwsXG4gICAgICAgIHsgbWFyayxcbiAgICAgICAgICAgIHJpc2UgfSA9IHt9XG4gICAgKSB7XG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLmhvdE51bSA9IGhvdE51bTtcbiAgICAgICAgdGhpcy5pbWdVcmwgPSBpbWdVcmw7XG4gICAgICAgIHRoaXMubWFyayA9IG1hcms7XG4gICAgICAgIHRoaXMucmlzZSA9IHJpc2U7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21KU09OKGpzb25NYXApIHtcbiAgICAgICAgbGV0IG5ld3MgPSBuZXcgTmV3c01vZGVsO1xuXG4gICAgICAgIG5ld3Mub3JkZXIgPSBTdHJpbmcoanNvbk1hcFtcIm9yZGVyXCJdKTtcbiAgICAgICAgbmV3cy50aXRsZSA9IGpzb25NYXBbXCJ0aXRsZVwiXTtcbiAgICAgICAgbmV3cy5ob3ROdW0gPSBTdHJpbmcoanNvbk1hcFtcInZvdGVjb3VudFwiXSkgKyBcIiDkurrngrnotZ5cIjtcbiAgICAgICAgbmV3cy5pbWdVcmwgPSBqc29uTWFwW1wiaW1nc3JjXCJdO1xuICAgICAgICBuZXdzLm1hcmsgPSBqc29uTWFwW1wic291cmNlXCJdO1xuICAgICAgICBuZXdzLnJpc2UgPSBqc29uTWFwW1wiYWxpYXNcIl07XG5cbiAgICAgICAgcmV0dXJuIG5ld3M7XG5cbiAgICB9XG59XG5cbmxldCBnX25ld3NMaXN0ID0gW1xuICAgIG5ldyBOZXdzTW9kZWwoXCIwMVwiLCBcIuS6huS4jei1t+eahOaWsOaXtuS7o++8jOS4lueVjOernuS6ieS4reeahOS4reWbveWItumAoFwiLCBcIjQ0Mjcg5LiH54Ot5bqmXCIsIFwiaHR0cHM6Ly9waWMyLnpoaW1nLmNvbS81MC92Mi03MTBiN2E2ZmVhMTJhNzIwMzk0NWI2NjY3OTBiNzE4MV9oZC5qcGdcIiksXG4gICAgbmV3IE5ld3NNb2RlbChcIjAyXCIsIFwi5LiA5Liq5aWz55Sf5oCO5qC35omN566X6KeB6L+H5LiW6Z2i77yfXCIsIFwiNDE1NyDkuIfng63luqZcIiwgXCJodHRwczovL3BpYzMuemhpbWcuY29tLzUwL3YyLTU2ZGNhOTljZDg3MThmOTMwM2Q0M2IzMDE1MzQyYmE3X2hkLmpwZ1wiLCB7IHJpc2U6IFwiM1wiLCBtYXJrOiBcIuaJgOiwk+S4lumdou+8jOWwseaYr+S4lueVjOeahOavj+S4gOmdolwiIH0pLFxuICAgIG5ldyBOZXdzTW9kZWwoXCIwM1wiLCBcIuWmguaenOacseagh+ayoeatu++8jOWJiuiXqeeahOivne+8jOacseajo+S8mumAoOWPjeWQl++8n1wiLCBcIjQwMDkg5LiH54Ot5bqmXCIsIFwiaHR0cHM6Ly9waWM0LnpoaW1nLmNvbS92Mi0wOTVkMmI0ODk3MDg4OWIxMDgyNDdlNmQyZGQwZmE2Yl9iLmpwZ1wiKSxcbiAgICBuZXcgTmV3c01vZGVsKFwiMDRcIiwgXCLlpoLkvZXnvJbor5EgTGludXgg5YaF5qC477yfXCIsIFwiMzExMCDkuIfng63luqZcIiwgXCJodHRwczovL3BpYzMuemhpbWcuY29tLzgwL3YyLTFlYTFiMGNmODBjODViODg4OTNiMmI5N2E5NGQ3ZTcxX2hkLmpwZ1wiLCB7IG1hcms6IFwi5YaF5qC477yf5ZG15ZG1XCIgfSksXG4gICAgbmV3IE5ld3NNb2RlbChcIjA1XCIsIFwi5aaC5L2V55yL5b6F5bCG56We6K+d5pWF5LqL5ouN5oiQ55S15b2x6L+Z5Lu25LqL77yfXCIsIFwiMjExOSDkuIfng63luqZcIiwgXCJodHRwczovL3BpYzQuemhpbWcuY29tLzUwL3YyLTI2N2IxZGRhNjJmNzcwYmQyYmQxM2NiNTQ1MTE3Yjc4X2hkLmpwZ1wiLCB7IHJpc2U6IFwiM1wiIH0pXG5dO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIExpc3RWaWV3UHJvZmlsZURlbW8xLFxufTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgSWNvbkJ1dHRvbixcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBJbWFnZSxcbiAgVGhlbWUsXG4gIFBhZGRpbmcsXG4gIFNjcm9sbGJhcixcbiAgS2V5LFxuICBOYXZpZ2F0b3IsXG4gIE1hdGVyaWFsUGFnZVJvdXRlLFxufSA9IHJlcXVpcmUoXCIuLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG4vLyBsZXQgeyBQYWdlRXhhbXBsZURpbyB9ID0gcmVxdWlyZShcInBsYXRmb3JtL2V4YW1wbGVfZGlvLmpzXCIpO1xuLy8gbGV0IHsgUGFnZUV4YW1wbGVGZXRjaCB9ID0gcmVxdWlyZShcInBsYXRmb3JtL2V4YW1wbGVfZmV0Y2guanNcIik7XG4vLyBsZXQgeyBQYWdlRXhhbXBsZU5ldHdvcmtBUEkgfSA9IHJlcXVpcmUoXCJwbGF0Zm9ybS9leGFtcGxlX25ldHdvcmtfbmF0aXZlX2FwaS5qc1wiKTtcbi8vIGxldCB7IFBhZ2VFeGFtcGxlTWVzc2FnZUNoYW5uZWwgfSA9IHJlcXVpcmUoXCJwbGF0Zm9ybS9leGFtcGxlX21lc3NhZ2VfY2hhbm5lbC5qc1wiKTtcbi8vIGxldCB7IFBhZ2VFeGFtcGxlU2hhcmVkUHJlZmVyZW5jZXMgfSA9IHJlcXVpcmUoXCJwbGF0Zm9ybS9leGFtcGxlX3NoYXJlZF9wcmVmZXJlbmNlcy5qc1wiKTtcblxuXG5cblxuY2xhc3MgUHJvZmlsZUV4YW1wbGVzUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlByb2ZpbGVFeGFtcGxlc1BhZ2VcIik7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1BlcmZvcm1hbmNlIFByb2ZpbGluZycpLFxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgU2Nyb2xsYmFyKHtcbiAgICAgICAgY2hpbGQ6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCLlpKfpobXpnaIgY29sdW1u5qih5oufXCIpLFxuXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJDb2x1bW5cIiksXG4gICAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgVGV4dCgnMjAw5p2hRmVlZHPlkIzml7bmuLLmn5PvvIzmqKHmi5/lpKfpobXpnaLliLfmlrAnKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGxldCBsaXN0X3ZpZXcgPSByZXF1aXJlKFwiLi9jb2x1bW5fcHJvZmlsZS5qc1wiKTtcblxuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGxpc3Rfdmlldy5MaXN0Vmlld1Byb2ZpbGVEZW1vMTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIk1YV2lkZ2V05a2Q5YWD57SgIGNvbHVtbuaooeaLn1wiKSxcblxuICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwiQ29sdW1uXCIpLFxuICAgICAgICAgICAgICBzdWJ0aXRsZTogbmV3IFRleHQoJzEwMOadoUZlZWRzTVhXaWRnZXTlrZDlhYPntKDmuLLmn5MnKSxcbiAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGxldCBsaXN0X3ZpZXcgPSByZXF1aXJlKFwiLi9jb2x1bW5fc3VibXh3aWRnZXRfcHJvZmlsZS5qc1wiKTtcblxuICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGxpc3Rfdmlldy5MaXN0Vmlld1Byb2ZpbGVEZW1vMTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIkxpc3RWaWV3XCIpLFxuXG4gICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJMaXN0Vmlld1wiKSxcbiAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCcxMDAw5p2h5paw6Ze7RmVlZHPmjInpnIDmuLLmn5PvvIzmtYvor5VMaXN0dmlld+WQr+WKqOWSjOa7keWKqOaAp+iDvScpLFxuICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgbGV0IGxpc3RfdmlldyA9IHJlcXVpcmUoXCIuL2xpc3R2aWV3X3Byb2ZpbGUuanNcIik7XG5cbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBsaXN0X3ZpZXcuTGlzdFZpZXdQcm9maWxlRGVtbzE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgXG5cbiAgICAgICAgICBdLFxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQcm9maWxlRXhhbXBsZXNQYWdlLFxufTtcbiIsIi8vICBNWEZsdXR0ZXJGcmFtZXdvcmtcbi8vICBDb3B5cmlnaHQgMjAxOSBUaGUgTVhGbHV0dGVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vL1xuLy8gIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vICBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG5sZXQge1xuICAgIE1YSlNMb2csXG4gICAgcnVuQXBwLFxuICAgIE1YSlNGbHV0dGVyQXBwLFxuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgICBNYXRlcmlhbEFwcCxcbiAgICBTY2FmZm9sZCxcbiAgICBDb250YWluZXIsXG4gICAgQm94RGVjb3JhdGlvbixcbiAgICBCb3JkZXJSYWRpdXMsXG4gICAgUmFkaXVzLFxuICAgIExpc3RUaWxlLFxuICAgIENlbnRlcixcbiAgICBDb2xvcixcbiAgICBBcHBCYXIsXG4gICAgU25hY2tCYXIsXG4gICAgVGV4dCxcbiAgICBJY29uLFxuICAgIEljb25EYXRhLFxuICAgIEVkZ2VJbnNldHMsXG4gICAgQ29sb3JzLFxuICAgIEljb25CdXR0b24sXG4gICAgRmxhdEJ1dHRvbixcbiAgICBSYWlzZWRCdXR0b24sXG4gICAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gICAgQ29sdW1uLFxuICAgIFJvdyxcbiAgICBEcm9wZG93bkJ1dHRvbixcbiAgICBEcm9wZG93bk1lbnVJdGVtLFxuICAgIE1haW5BeGlzQWxpZ25tZW50LFxuICAgIENyb3NzQXhpc0FsaWdubWVudCxcbiAgICBUZXh0U3R5bGUsXG4gICAgUG9wdXBNZW51QnV0dG9uLFxuICAgIFBvcHVwTWVudUl0ZW0sXG4gICAgQnV0dG9uQmFyLFxuICAgIE1haW5BeGlzU2l6ZSxcbiAgICBUZXh0RGVjb3JhdGlvbixcbiAgICBSaWNoVGV4dCxcbiAgICBUZXh0U3BhbixcbiAgICBFeHBhbmRlZCxcbiAgICBGb250V2VpZ2h0LFxuICAgIFRleHRGb3JtRmllbGQsXG4gICAgSW5wdXREZWNvcmF0aW9uLFxuICAgIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICAgIFRleHRJbnB1dFR5cGUsXG4gICAgU2l6ZWRCb3gsXG4gICAgVGV4dEZpZWxkLFxuICAgIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgICBMaXN0VmlldyxcbiAgICBTbGlkZXIsXG4gICAgSWNvbnMsXG4gICAgRmx1dHRlckxvZ28sXG4gICAgV3JhcCxcbiAgICBTY3JvbGxiYXIsXG4gICAgQ2FyZCxcbiAgICBUaGVtZSxcbiAgICBOYXZpZ2F0b3IsXG4gICAgTWF0ZXJpYWxQYWdlUm91dGUsXG4gICAgTWV0aG9kQ2hhbm5lbCxcbiAgICBDbGlwUlJlY3QsXG4gICAgQm94Rml0LFxuICAgIER1cmF0aW9uLFxuICAgIEtleSxcbiAgICBCb3JkZXJEaXJlY3Rpb25hbCxcbiAgICBCb3JkZXJTaWRlLFxuICAgIEFsaWdubWVudCxcbiAgICBBc3BlY3RSYXRpbyxcbiAgICBEZWNvcmF0aW9uSW1hZ2UsXG4gICAgUmVjdFxufSA9IHJlcXVpcmUoXCIuLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5cblxuY29uc3QgeyBDYWNoZWROZXR3b3JrSW1hZ2UgfSA9IHJlcXVpcmUoJ0B0ZW5jZW50L214Zmx1dHRlci1jYWNoZWQtbmV0d29yay1pbWFnZScpO1xuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qc1wiKTtcblxuXG5cbi8vXG5jb25zdCBnX21heF9jb3VudCA9IDEwMDA7XG5cbi8vZGF0YVxubGV0IGdfbmV3c09yZGVyID0gMDtcbi8vXG5jbGFzcyBMaXN0Vmlld1Byb2ZpbGVEZW1vMSBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdMaXN0Vmlld0RlbW8nKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0Vmlld1Byb2ZpbGVEZW1vMVN0YXRlKHRoaXMpO1xuICAgIH1cblxufVxuXG5jbGFzcyBMaXN0Vmlld1Byb2ZpbGVEZW1vMVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm5ld3NBcnJheSA9IFtdO1xuICAgICAgICB0aGlzLmJ1aWxkQ291bnQgPSAxO1xuICAgIH1cblxuICAgIGluaXRTdGF0ZSgpIHtcbiAgICAgICAgc3VwZXIuaW5pdFN0YXRlKCk7XG4gICAgICAgIHRoaXMubmV3c0FycmF5ID0gZ19uZXdzTGlzdDtcbiAgICB9XG5cblxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuXG4gICAgICAgIGdfbmV3c09yZGVyID0gMDtcbiAgICAgICAgdGhpcy5idWlsZENvdW50Kys7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+e9keaYk+aWsOmXuyBMaXN0Vmlld0V4YW1wbGUnKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IFNjcm9sbGJhcih7XG4gICAgICAgICAgICAgICAgY2hpbGQ6IExpc3RWaWV3LmJ1aWxkZXIoe1xuICAgICAgICAgICAgICAgICAgICBpdGVtQ291bnQ6IGdfbWF4X2NvdW50LFxuICAgICAgICAgICAgICAgICAgICBpdGVtQnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExpc3RWaWV3SXRlbSh0aGlzLm5ld3NBcnJheVtpbmRleCAlIHRoaXMubmV3c0FycmF5Lmxlbmd0aF0pO1xuICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5jbGFzcyBMaXN0Vmlld0l0ZW0gZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcihvbmVOZXdzTWFwKSB7XG4gICAgICAgIHN1cGVyKCdMaXN0Vmlld0l0ZW0nKTtcblxuICAgICAgICB0aGlzLm5ld3NNb2RlbCA9IG9uZU5ld3NNYXA7XG5cbiAgICAgICAgdGhpcy5pbmRleCA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuXG5cbiAgICB9XG5cblxuICAgIGhvdENhcmQoY29udGV4dCwgbmV3c01vZGVsKSB7XG5cbiAgICAgICAgZ19uZXdzT3JkZXIrKztcblxuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogbmV3IEJvcmRlclNpZGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibGFjazEyLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEuMFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG5cblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoeyB0b3A6IDguMCwgYm90dG9tOiA4LjAgfSksXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKGdfbmV3c09yZGVyKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxOC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld3NNb2RlbC5yaXNlICE9IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkOCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDEwLjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dChuZXdzTW9kZWwucmlzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgQ29udGFpbmVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiA2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQobmV3c01vZGVsLnRpdGxlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ib2xkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxNi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMS4xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoeyBib3R0b206IDEwLjAsIHJpZ2h0OiA0LjAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdzTW9kZWwubWFyayAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQobmV3c01vZGVsLm1hcmssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7IGNvbG9yOiBDb2xvcnMuYmxhY2s1NCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHsgYm90dG9tOiA4LjAsIHJpZ2h0OiA0LjAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChuZXdzTW9kZWwuaG90TnVtLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7IGNvbG9yOiBDb2xvcnMuYmxhY2s1NCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBBc3BlY3RSYXRpbyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3BlY3RSYXRpbzogMy4wIC8gMi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDbGlwUlJlY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmNpcmN1bGFyKDQuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDYWNoZWROZXR3b3JrSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWRlSW5EdXJhdGlvbjogbmV3IER1cmF0aW9uKHsgbWlsbGlzZWNvbmRzOiAxMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFkZU91dER1cmF0aW9uOiBuZXcgRHVyYXRpb24oeyBtaWxsaXNlY29uZHM6IDEwIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVVybDogbmV3c01vZGVsLmltZ1VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEyNC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDY5LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpdDogQm94Rml0LmZpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3RDYXJkKGNvbnRleHQsIHRoaXMubmV3c01vZGVsKTtcbiAgICAgICAgfSBjYXRjaCAoZSQpIHtcbiAgICAgICAgICAgIC8vIGxldCBlID0gZGFydC5nZXRUaHJvd24oZSQpO1xuICAgICAgICAgICAgLy8gTVhKU0xvZy5sb2coXCJjYXJkOmJ1aWxkKGNvbnRleHQpOiAgZXJyb3I6XCIgKyBlKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuY2xhc3MgTmV3c01vZGVsIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgb3JkZXIsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICBob3ROdW0sXG4gICAgICAgIGltZ1VybCxcbiAgICAgICAgeyBtYXJrLFxuICAgICAgICAgICAgcmlzZSB9ID0ge31cbiAgICApIHtcbiAgICAgICAgdGhpcy5vcmRlciA9IG9yZGVyO1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMuaG90TnVtID0gaG90TnVtO1xuICAgICAgICB0aGlzLmltZ1VybCA9IGltZ1VybDtcbiAgICAgICAgdGhpcy5tYXJrID0gbWFyaztcbiAgICAgICAgdGhpcy5yaXNlID0gcmlzZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUpTT04oanNvbk1hcCkge1xuICAgICAgICBsZXQgbmV3cyA9IG5ldyBOZXdzTW9kZWw7XG5cbiAgICAgICAgbmV3cy5vcmRlciA9IFN0cmluZyhqc29uTWFwW1wib3JkZXJcIl0pO1xuICAgICAgICBuZXdzLnRpdGxlID0ganNvbk1hcFtcInRpdGxlXCJdO1xuICAgICAgICBuZXdzLmhvdE51bSA9IFN0cmluZyhqc29uTWFwW1widm90ZWNvdW50XCJdKSArIFwiIOS6uueCuei1nlwiO1xuICAgICAgICBuZXdzLmltZ1VybCA9IGpzb25NYXBbXCJpbWdzcmNcIl07XG4gICAgICAgIG5ld3MubWFyayA9IGpzb25NYXBbXCJzb3VyY2VcIl07XG4gICAgICAgIG5ld3MucmlzZSA9IGpzb25NYXBbXCJhbGlhc1wiXTtcblxuICAgICAgICByZXR1cm4gbmV3cztcblxuICAgIH1cbn1cblxubGV0IGdfbmV3c0xpc3QgPSBbXG4gICAgbmV3IE5ld3NNb2RlbChcIjAxXCIsIFwi5LqG5LiN6LW355qE5paw5pe25Luj77yM5LiW55WM56ue5LqJ5Lit55qE5Lit5Zu95Yi26YCgXCIsIFwiNDQyNyDkuIfng63luqZcIiwgXCJodHRwczovL3BpYzIuemhpbWcuY29tLzUwL3YyLTcxMGI3YTZmZWExMmE3MjAzOTQ1YjY2Njc5MGI3MTgxX2hkLmpwZ1wiKSxcbiAgICBuZXcgTmV3c01vZGVsKFwiMDJcIiwgXCLkuIDkuKrlpbPnlJ/mgI7moLfmiY3nrpfop4Hov4fkuJbpnaLvvJ9cIiwgXCI0MTU3IOS4h+eDreW6plwiLCBcImh0dHBzOi8vcGljMy56aGltZy5jb20vNTAvdjItNTZkY2E5OWNkODcxOGY5MzAzZDQzYjMwMTUzNDJiYTdfaGQuanBnXCIsIHsgcmlzZTogXCIzXCIsIG1hcms6IFwi5omA6LCT5LiW6Z2i77yM5bCx5piv5LiW55WM55qE5q+P5LiA6Z2iXCIgfSksXG4gICAgbmV3IE5ld3NNb2RlbChcIjAzXCIsIFwi5aaC5p6c5pyx5qCH5rKh5q2777yM5YmK6Jep55qE6K+d77yM5pyx5qOj5Lya6YCg5Y+N5ZCX77yfXCIsIFwiNDAwOSDkuIfng63luqZcIiwgXCJodHRwczovL3BpYzQuemhpbWcuY29tL3YyLTA5NWQyYjQ4OTcwODg5YjEwODI0N2U2ZDJkZDBmYTZiX2IuanBnXCIpLFxuICAgIG5ldyBOZXdzTW9kZWwoXCIwNFwiLCBcIuWmguS9lee8luivkSBMaW51eCDlhoXmoLjvvJ9cIiwgXCIzMTEwIOS4h+eDreW6plwiLCBcImh0dHBzOi8vcGljMy56aGltZy5jb20vODAvdjItMWVhMWIwY2Y4MGM4NWI4ODg5M2IyYjk3YTk0ZDdlNzFfaGQuanBnXCIsIHsgbWFyazogXCLlhoXmoLjvvJ/lkbXlkbVcIiB9KSxcbiAgICBuZXcgTmV3c01vZGVsKFwiMDVcIiwgXCLlpoLkvZXnnIvlvoXlsIbnpZ7or53mlYXkuovmi43miJDnlLXlvbHov5nku7bkuovvvJ9cIiwgXCIyMTE5IOS4h+eDreW6plwiLCBcImh0dHBzOi8vcGljNC56aGltZy5jb20vNTAvdjItMjY3YjFkZGE2MmY3NzBiZDJiZDEzY2I1NDUxMTdiNzhfaGQuanBnXCIsIHsgcmlzZTogXCIzXCIgfSlcbl07XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgTGlzdFZpZXdQcm9maWxlRGVtbzEsXG59O1xuIiwiXG5sZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgU2NhZmZvbGQsXG4gICAgQ29udGFpbmVyLFxuICAgIExpc3RUaWxlLFxuICAgIENvbG9yLFxuICAgIENvbG9ycyxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBFZGdlSW5zZXRzLFxuICAgIExpc3RWaWV3LFxuICAgIFRhYkJhcixcbiAgICBUYWJCYXJWaWV3LFxuICAgIERlZmF1bHRUYWJDb250cm9sbGVyLFxuICAgIFRhYixcbiAgICBBbGlnbixcbiAgICBCb3hEZWNvcmF0aW9uLFxuICAgIEJvcmRlcixcbiAgICBBbGlnbm1lbnQsXG4gICAgQ29sdW1uLFxuICAgIFNsaWRlcixcbiAgICBFeHBhbmRlZCxcbiAgICBDZW50ZXIsXG4gICAgUm93LFxuICAgIFNpemVkQm94LFxuICAgIE1haW5BeGlzQWxpZ25tZW50LFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFsaWduKCk7XG4gICAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUFsaWduIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fd2lkdGhGYWN0b3IgPSAxMi4wO1xuICAgICAgICB0aGlzLl9oZWlnaHRGYWN0b3IgPSAxMi4wO1xuICAgICAgICB0aGlzLl94T2Zmc2V0ID0gMC4wO1xuICAgICAgICB0aGlzLl95T2Zmc2V0ID0gMC4wO1xuICAgIH1cblxuICAgIF9jaGFuZ2VXaWR0aEZhY3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3dpZHRoRmFjdG9yID0gdmFsdWU7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgX2NoYW5nZUhlaWdodEZhY3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2hlaWdodEZhY3RvciA9IHZhbHVlO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIF9jaGFuZ2VYT2Zmc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5feE9mZnNldCA9IHZhbHVlO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIF9jaGFuZ2VZT2Zmc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5feU9mZnNldCA9IHZhbHVlO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIF9vbmVBbGlnbkluQm9hcmQoeyBjb3N0dW1BbGlnbiA9IGZhbHNlLCBhbGlnbm1lbnQgfSA9IHt9KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGhlaWdodDogY29zdHVtQWxpZ24gPyBudWxsIDogMTM1LjAsXG4gICAgICAgICAgICBtYXJnaW46IGNvc3R1bUFsaWduID8gbnVsbCA6IEVkZ2VJbnNldHMuc3ltbWV0cmljKHsgaG9yaXpvbnRhbDogMTIwLjAsIH0pLFxuICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgIGJvcmRlcjogQm9yZGVyLmFsbCh7IGNvbG9yOiBuZXcgQ29sb3IoMHhGRjAwMDAwMCkgfSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQWxpZ24oe1xuICAgICAgICAgICAgICAgIGFsaWdubWVudDogY29zdHVtQWxpZ24gPyBuZXcgQWxpZ25tZW50KHRoaXMuX3hPZmZzZXQsIHRoaXMuX3lPZmZzZXQpIDogYWxpZ25tZW50LFxuICAgICAgICAgICAgICAgIHdpZHRoRmFjdG9yOiB0aGlzLl93aWR0aEZhY3RvcixcbiAgICAgICAgICAgICAgICBoZWlnaHRGYWN0b3I6IHRoaXMuX2hlaWdodEZhY3RvcixcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMi4wLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEyLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfYWxpZ25BbGlnbm1lbnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJBbGlnbm1lbnQ6IHRvcExlZnRcIikgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5fb25lQWxpZ25JbkJvYXJkKHsgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdCB9KSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJBbGlnbm1lbnQ6IHRvcENlbnRlclwiKSB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbmVBbGlnbkluQm9hcmQoeyBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BDZW50ZXIgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiQWxpZ25tZW50OiB0b3BSaWdodFwiKSB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbmVBbGlnbkluQm9hcmQoeyBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BSaWdodCB9KSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJBbGlnbm1lbnQ6IGNlbnRlckxlZnRcIikgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5fb25lQWxpZ25JbkJvYXJkKHsgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyTGVmdCB9KSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJBbGlnbm1lbnQ6IGNlbnRlclwiKSB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbmVBbGlnbkluQm9hcmQoeyBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiQWxpZ25tZW50OiBjZW50ZXJSaWdodFwiKSB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbmVBbGlnbkluQm9hcmQoeyBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXJSaWdodCB9KSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJBbGlnbm1lbnQ6IGJvdHRvbUxlZnRcIikgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5fb25lQWxpZ25JbkJvYXJkKHsgYWxpZ25tZW50OiBBbGlnbm1lbnQuYm90dG9tTGVmdCB9KSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJBbGlnbm1lbnQ6IGJvdHRvbUNlbnRlclwiKSB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbmVBbGlnbkluQm9hcmQoeyBhbGlnbm1lbnQ6IEFsaWdubWVudC5ib3R0b21DZW50ZXIgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiQWxpZ25tZW50OiBib3R0b21SaWdodFwiKSB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbmVBbGlnbkluQm9hcmQoeyBhbGlnbm1lbnQ6IEFsaWdubWVudC5ib3R0b21SaWdodCB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9zaXplZFNsaWRlcih7IHdpZHRoLCBtaW4sIG1heCwgdmFsdWUsIG9uQ2hhbmdlZCB9KSB7XG4gICAgICAgIHJldHVybiBuZXcgU2l6ZWRCb3goe1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBTbGlkZXIoeyBtaW46IG1pbiwgbWF4OiBtYXgsIHZhbHVlOiB2YWx1ZSwgb25DaGFuZ2VkOiBvbkNoYW5nZWQgfSksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hbGlnbkZhY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJBbGlnblwiKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENlbnRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogdGhpcy5fb25lQWxpZ25JbkJvYXJkKHsgY29zdHVtQWxpZ246IHRydWUgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KCdXaWR0aCBGYWN0b3InKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KCdIZWlnaHQgRmFjdG9yJyksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlRXZlbmx5LFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2l6ZWRTbGlkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxODAuMCwgbWluOiA0LjAsIG1heDogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fd2lkdGhGYWN0b3IsIG9uQ2hhbmdlZDogdGhpcy5fY2hhbmdlV2lkdGhGYWN0b3IuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2l6ZWRTbGlkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxODAuMCwgbWluOiA0LjAsIG1heDogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5faGVpZ2h0RmFjdG9yLCBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZUhlaWdodEZhY3Rvci5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHQoJ1ggT2Zmc2V0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dCgnWSBPZmZzZXQnKSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VFdmVubHksXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaXplZFNsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDE4MC4wLCBtaW46IC0xLjAsIG1heDogMS4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl94T2Zmc2V0LCBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZVhPZmZzZXQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2l6ZWRTbGlkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxODAuMCwgbWluOiAtMS4wLCBtYXg6IDEuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5feU9mZnNldCwgb25DaGFuZ2VkOiB0aGlzLl9jaGFuZ2VZT2Zmc2V0LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVmYXVsdFRhYkNvbnRyb2xsZXIoe1xuICAgICAgICAgICAgbGVuZ3RoOiAyLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFsaWduJyksXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogbmV3IFRhYkJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRhYih7IHRleHQ6ICc5IEFsaWdubWVudHMnIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiAnQ3VzdG9tIEZhY3RvciAmIG9mZnNldCcgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBUYWJCYXJWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FsaWduQWxpZ25tZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbGlnbkZhY3RvcigpLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsIlxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxuICBBbmltYXRpb24sXG4gIEFuaW1hdGVkQnVpbGRlcixcbiAgQW5pbWF0aW9uQ29udHJvbGxlcixcbiAgRHVyYXRpb24sXG4gIEludGVydmFsLFxuICBDdXJ2ZVR3ZWVuLFxuICBDdXJ2ZXMsXG4gIFR3ZWVuLFxuICBJbWFnZSxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qc1wiKTtcblxuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZEJ1aWxkZXJWMlN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZEJ1aWxkZXJWMlN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB0aGlzLl9jb250cm9sbGVyID0gbmV3IEFuaW1hdGlvbkNvbnRyb2xsZXIoe1xuICAgICAgZHVyYXRpb246IG5ldyBEdXJhdGlvbih7c2Vjb25kczogMX0pLFxuICAgICAgLy8gdXBwZXJCb3VuZDogMTAwLFxuICAgICAgLy8gdnN5bmM6IHRoaXMsXG4gICAgfSk7XG5cbiAgICB0aGlzLl9jb250cm9sbGVyLmZvcndhcmQoKTtcbiAgfVxuXG4gIGJlZ2luQW5pbWF0aW9uKCl7XG4gICAgdGhpcy5fY29udHJvbGxlci5yZXBlYXQoKTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpe1xuICAgIGNvbnN0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1BhZ2VFeGFtcGxlQW5pbWF0ZWRCdWlsZGVyVjInLCksXG4gICAgICB9KSxcbiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICBjaGlsZDogbmV3IEljb24oSWNvbnMuYWRkKSxcbiAgICAgICAgb25QcmVzc2VkOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLmJlZ2luQW5pbWF0aW9uKCk7XG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgfSksXG4gICAgICBib2R5OiBuZXcgQW5pbWF0ZWRCdWlsZGVyKHtcbiAgICAgICAgYW5pbWF0aW9uOiB0aGlzLl9jb250cm9sbGVyLFxuICAgICAgICB3aWRnZXQ6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGhlaWdodDpcIjEwMCskdmFsdWUqMTAwXCIsICAgLy/liqjmgIHorqHnrpckdmFsdWVcbiAgICAgICAgICAgIHdpZHRoOlwiMjAwKyR2YWx1ZSoyMDBcIiwgICAgLy/liqjmgIHorqHnrpckdmFsdWVcbiAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLngrnlh7sgKCArICkg5Y+377yM6YeN5aSN5pKt5pS+XCIse1xuICAgICAgICAgICAgICAgIHN0eWxlOm5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgY29sb3I6Q29sb3JzLndoaXRlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KVxuICAgICAgICB9KSxcbiAgICAgICAgLy8gYnVpbGRlciDnlLHkuo7lvILmraXpopHnuYHosIPnlKhKU++8jOS8muWvvOiHtEpT57q/56iL5oCn6IO96Zeu6aKY77yM5rKh5pyJ5a6e546w77yMYXN5bmPlnKhidWlsZGVy5Lit6LCD55So5Lmf5a2Y5Zyo5oqA5pyv6Zeu6aKYXG4gICAgICAgIC8vIGJ1aWxkZXI6IGZ1bmN0aW9uKGNvbnRleHQsY2hpbGQpe1xuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKFwiY2FsbCBidWlsZGVyIGluIGpzLi4uLmFhYWFcIik7XG4gICAgICAgIC8vICAgTVhKU0xvZy5sb2coXCJjYWxsIGJ1aWxkZXIgaW4ganMuLi4uYmJiYlwiKTtcbiAgICAgICAgLy8gICByZXR1cm4gY2hpbGQ7XG4gICAgICAgIC8vIH0sXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEV4YW1wbGVXaWRnZXQsXG59O1xuIiwiXG5cbmxldCB7XG4gIE1YSlNMb2csXG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgTGlzdFRpbGUsXG4gIENlbnRlcixcbiAgQ29sb3IsXG4gIEFwcEJhcixcbiAgU25hY2tCYXIsXG4gIFRleHQsXG4gIEljb24sXG4gIEljb25EYXRhLFxuICBFZGdlSW5zZXRzLFxuICBDb2xvcnMsXG4gIEljb25CdXR0b24sXG4gIEZsYXRCdXR0b24sXG4gIFJhaXNlZEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIENvbHVtbixcbiAgUm93LFxuICBEcm9wZG93bkJ1dHRvbixcbiAgRHJvcGRvd25NZW51SXRlbSxcbiAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gIFRleHRTdHlsZSxcbiAgUG9wdXBNZW51QnV0dG9uLFxuICBQb3B1cE1lbnVJdGVtLFxuICBCdXR0b25CYXIsXG4gIE1haW5BeGlzU2l6ZSxcbiAgVGV4dERlY29yYXRpb24sXG4gIFJpY2hUZXh0LFxuICBUZXh0U3BhbixcbiAgRXhwYW5kZWQsXG4gIEZvbnRXZWlnaHQsXG4gIFRleHRGb3JtRmllbGQsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgVW5kZXJsaW5lSW5wdXRCb3JkZXIsXG4gIFRleHRJbnB1dFR5cGUsXG4gIFNpemVkQm94LFxuICBUZXh0RmllbGQsXG4gIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgTGlzdFZpZXcsXG4gIFNsaWRlcixcbiAgSWNvbnMsXG4gIFRleHREZWNvcmF0aW9uU3R5bGUsXG4gIFRleHRPdmVyZmxvdyxcbiAgUGFkZGluZyxcbiAgQW5pbWF0ZWRDb250YWluZXIsXG4gIER1cmF0aW9uLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkQ29udGFpbmVyU3RhdGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkQ29udGFpbmVyU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gIH1cblxuICBidWlsZChjb250ZXh0KXtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGFnZUV4YW1wbGVBbmltYXRlZENvbnRhaW5lcicsKSxcbiAgICAgIH0pLFxuICAgICAgZmxvYXRpbmdBY3Rpb25CdXR0b246IG5ldyBGbG9hdGluZ0FjdGlvbkJ1dHRvbih7XG4gICAgICAgIGNoaWxkOiBuZXcgSWNvbihJY29ucy5hZGQpLFxuICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQ7XG4gICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46W1xuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCJQYWdlRXhhbXBsZUFuaW1hdGVkQ29udGFpbmVyXCIpLFxuICAgICAgICAgIG5ldyBBbmltYXRlZENvbnRhaW5lcih7XG4gICAgICAgICAgICBoZWlnaHQ6dGhpcy5zZWxlY3RlZCA/IDMwMC4wIDogMTAwLFxuICAgICAgICAgICAgY29sb3I6dGhpcy5zZWxlY3RlZCA/IENvbG9ycy5ibHVlOkNvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICBkdXJhdGlvbjpuZXcgRHVyYXRpb24oe21pbGxpc2Vjb25kczoyMDB9KSxcbiAgICAgICAgICAgIGNoaWxkOm5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICBjaGlsZDpuZXcgVGV4dChcIuWKqOeUu+WuueWZqFwiLHtcbiAgICAgICAgICAgICAgICBzdHlsZTpuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOkNvbG9ycy53aGl0ZSxcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOjIwLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRXhhbXBsZVdpZGdldCxcbn07XG4iLCJcblxubGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxuICBBbmltYXRlZENyb3NzRmFkZSxcbiAgQ3Jvc3NGYWRlU3RhdGUsXG4gIER1cmF0aW9uLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZENyb3NzRmFkZVN0YXRlKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVBbmltYXRlZENyb3NzRmFkZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSB0cnVlO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdQYWdlRXhhbXBsZUFuaW1hdGVkQ3Jvc3NGYWRlJyksXG4gICAgICB9KSxcbiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICBjaGlsZDogbmV3IEljb24oSWNvbnMuYWRkKSxcbiAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQ7XG4gICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IEFuaW1hdGVkQ3Jvc3NGYWRlKHtcbiAgICAgICAgY3Jvc3NGYWRlU3RhdGU6IHRoaXMuc2VsZWN0ZWQgPyBDcm9zc0ZhZGVTdGF0ZS5zaG93Rmlyc3QgOiBDcm9zc0ZhZGVTdGF0ZS5zaG93U2Vjb25kLFxuICAgICAgICBkdXJhdGlvbjogbmV3IER1cmF0aW9uKHsgbWlsbGlzZWNvbmRzOiAyMDAgfSksXG4gICAgICAgIGZpcnN0Q2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgIHdpZHRoOiA1MDAsXG4gICAgICAgICAgaGVpZ2h0OiAzMDAsXG4gICAgICAgICAgY29sb3I6IENvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwi56ys5LiA6aG1XCIsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IDIwLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICAgIHNlY29uZENoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICB3aWR0aDogNTAwLFxuICAgICAgICAgIGhlaWdodDogMzAwLFxuICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZSxcbiAgICAgICAgICBjaGlsZDogbmV3IENlbnRlcih7XG4gICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLnrKzkuozpobVcIiwge1xuICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEV4YW1wbGVXaWRnZXQsXG59O1xuIiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIENvbnRhaW5lcixcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBJY29uLFxuICAgIEljb25EYXRhLFxuICAgIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICAgIENvbG9ycyxcbiAgICBUZXh0U3R5bGUsXG4gICAgQWxpZ25tZW50LFxuICAgIEFuaW1hdGVkRGVmYXVsdFRleHRTdHlsZSxcbiAgICBDb2x1bW4sXG4gICAgRHVyYXRpb24sXG4gICAgRm9udFdlaWdodCxcbiAgICBFeHBhbmRlZCxcbiAgICBJY29ucyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuLy8g5Yqo55S7LeWtl+S9k+WKqOeUu1xuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZUFuaW1hdGVkRGVmYXVsdFRleHRTdHlsZVN0YXRlKCk7XG4gICAgfVxufVxuXG5jbGFzcyBQYWdlQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnRleHRTaXplID0gMTA7XG4gICAgICAgIHRoaXMuY29sb3IgPSBDb2xvcnMub3JhbmdlO1xuICAgIH1cblxuICAgIGJ1aWxkKCkge1xuICAgICAgICBsZXQgd2lkZ2V0cyA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlJyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdBbmltYXRlZERlZmF1bHRUZXh0U3R5bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogdGhpcy50ZXh0U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBuZXcgRHVyYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kczogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmbG9hdGluZ0FjdGlvbkJ1dHRvbjogbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb24oSWNvbnMuYWRkKSxcbiAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRTaXplID0gKHRoaXMudGV4dFNpemUgPT0gMTApID8gMzAgOiAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPSAodGhpcy5jb2xvciA9PSBDb2xvcnMub3JhbmdlKSA/IENvbG9ycy5ibGFjayA6IENvbG9ycy5vcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldHM7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0XG59OyIsIlxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIENvbnRhaW5lcixcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBBbmltYXRlZE9wYWNpdHksXG4gICAgQ3VydmVzLFxuICAgIER1cmF0aW9uLFxuICAgIENvbG9ycyxcbiAgICBDZW50ZXIsXG4gICAgUm93LFxuICAgIENvbHVtbixcbiAgICBNYWluQXhpc0FsaWdubWVudCxcbiAgICBDdXBlcnRpbm9Td2l0Y2gsXG4gICAgRWRnZUluc2V0cyxcbiAgICBGbGF0QnV0dG9uLFxuICAgIEV4cGFuZGVkLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkT3BhY2l0eSgpO1xuICAgIH1cbn1cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRPcGFjaXR5IGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXR0aW5nVGFibGUgPSB7XG4gICAgICAgICAgICBcImlzUXVpY2tcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaXNMaW5lYXJcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaXNSZXBlYXRcIjogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3JlcGVhdEFuaW1hdGlvblJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBfc2luZ2xlT3B0aW9uKHNlbGVjdGVkVGV4dCwgdW5zZWxlY3RlZFRleHQsIHZhck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTIuMCksXG4gICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQmV0d2VlbixcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dCh0aGlzLnNldHRpbmdUYWJsZVt2YXJOYW1lXSA/IHNlbGVjdGVkVGV4dCA6IHVuc2VsZWN0ZWRUZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub1N3aXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zZXR0aW5nVGFibGVbdmFyTmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVDb2xvcjogQ29sb3JzLm9yYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ1RhYmxlW3Zhck5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jaGFuZ2VTZWxlY3RlZCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZCA9ICF0aGlzLl9zZWxlY3RlZDtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBfcGxheU9yRW5kKCkge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nVGFibGVbXCJpc1JlcGVhdFwiXSA9PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXBlYXRBbmltYXRpb25SdW5uaW5nID0gIXRoaXMuX3JlcGVhdEFuaW1hdGlvblJ1bm5pbmc7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVwZWF0QW5pbWF0aW9uUnVubmluZyA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ1RhYmxlW1wiaXNSZXBlYXRcIl0gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkID0gIXRoaXMuX3NlbGVjdGVkO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoXCJBbmltYXRlZE9wYWNpdHlcIiksIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEFuaW1hdGVkT3BhY2l0eSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiB0aGlzLl9zZWxlY3RlZCA/IDAuMiA6IDEuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnZlOiB0aGlzLnNldHRpbmdUYWJsZVtcImlzTGluZWFyXCJdID8gQ3VydmVzLmxpbmVhciA6IEN1cnZlcy5lYXNlSW5PdXRDaXJjLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IG5ldyBEdXJhdGlvbih7IG1pbGxpc2Vjb25kczogdGhpcy5zZXR0aW5nVGFibGVbXCJpc1F1aWNrXCJdID8gMzAwIDogMTAwMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRW5kOiB0aGlzLnNldHRpbmdUYWJsZVtcImlzUmVwZWF0XCJdID8gdGhpcy5fY2hhbmdlU2VsZWN0ZWQuYmluZCh0aGlzKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQoXCLliqjnlLvlrrnlmahcIikgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpbmdsZU9wdGlvbihcIuWKqOeUu+mAn+W6pu+8muW/q1wiLCBcIuWKqOeUu+mAn+W6pu+8muaFolwiLCBcImlzUXVpY2tcIiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpbmdsZU9wdGlvbihcIue6v+aAp+WKqOeUu++8muaYr1wiLCBcIue6v+aAp+WKqOeUu++8muWQplwiLCBcImlzTGluZWFyXCIpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaW5nbGVPcHRpb24oXCLlvqrnjq/mkq3mlL7vvJrmmK9cIiwgXCLlvqrnjq/mkq3mlL7vvJrlkKZcIiwgXCJpc1JlcGVhdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHsgY2hpbGQ6IG5ldyBDb250YWluZXIoKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENlbnRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nVGFibGVbXCJpc1JlcGVhdFwiXSA/IHRoaXMuX3JlcGVhdEFuaW1hdGlvblJ1bm5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcIuWBnOatouW+queOr1wiIDogXCLlvqrnjq/mkq3mlL5cIiA6IFwi5pKt5pS+5LiA5qyhXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogdGhpcy5fcGxheU9yRW5kLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHsgY2hpbGQ6IG5ldyBDb250YWluZXIoKSB9KSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsIlxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIENvbnRhaW5lcixcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBBbmltYXRlZFBoeXNpY2FsTW9kZWwsXG4gICAgRHVyYXRpb24sXG4gICAgQ29sb3JzLFxuICAgIENlbnRlcixcbiAgICBSb3csXG4gICAgQ29sdW1uLFxuICAgIE1haW5BeGlzQWxpZ25tZW50LFxuICAgIEN1cGVydGlub1N3aXRjaCxcbiAgICBFZGdlSW5zZXRzLFxuICAgIEJvcmRlclJhZGl1cyxcbiAgICBCb3hTaGFwZSxcbiAgICBTaXplZEJveCxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVBbmltYXRlZFBoeXNpY2FsTW9kZWwoKTtcbiAgICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRQaHlzaWNhbE1vZGVsIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXR0aW5nVGFibGUgPSB7XG4gICAgICAgICAgICBcImhhc0JvcmRlclJhZGl1c1wiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiQ29sb3JQaW5rXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJFbGV2YXRpb25cIjogZmFsc2UsXG4gICAgICAgICAgICBcIlNoYWRvd0NvbG9yXCI6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9zaW5nbGVPcHRpb24oc2VsZWN0ZWRUZXh0LCB1bnNlbGVjdGVkVGV4dCwgdmFyTmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgxMi4wKSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VCZXR3ZWVuLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KHRoaXMuc2V0dGluZ1RhYmxlW3Zhck5hbWVdID8gc2VsZWN0ZWRUZXh0IDogdW5zZWxlY3RlZFRleHQpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ3VwZXJ0aW5vU3dpdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNldHRpbmdUYWJsZVt2YXJOYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbG9yOiBDb2xvcnMub3JhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nVGFibGVbdmFyTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7IHRpdGxlOiBuZXcgVGV4dChcIkFuaW1hdGVkUGh5c2ljYWxNb2RlbFwiKSwgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgU2l6ZWRCb3goeyBoZWlnaHQ6IDIwLjAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBBbmltYXRlZFBoeXNpY2FsTW9kZWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5zZXR0aW5nVGFibGVbXCJoYXNCb3JkZXJSYWRpdXNcIl0gPyBuZXcgQm9yZGVyUmFkaXVzLmNpcmN1bGFyKDIwLjApIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogQm94U2hhcGUucmVjdGFuZ2xlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLnNldHRpbmdUYWJsZVtcIkNvbG9yUGlua1wiXSA/IENvbG9ycy5waW5rLypbMzAwXSovIDogQ29sb3JzLmN5YW4vKlszMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxldmF0aW9uOiB0aGlzLnNldHRpbmdUYWJsZVtcIkVsZXZhdGlvblwiXSA/IDE4IDogOCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogdGhpcy5zZXR0aW5nVGFibGVbXCJTaGFkb3dDb2xvclwiXSA/ICBDb2xvcnMueWVsbG93IDogQ29sb3JzLmJsYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHsgaGVpZ2h0OiAxMjAsIHdpZHRoOiAxMjAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IG5ldyBEdXJhdGlvbih7IG1pbGxpc2Vjb25kczogNTAwIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgU2l6ZWRCb3goeyBoZWlnaHQ6IDIwLjAgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpbmdsZU9wdGlvbihcIuefqeW9ouWchuinku+8muaciVwiLCBcIuefqeW9ouWchuinku+8muaXoFwiLCBcImhhc0JvcmRlclJhZGl1c1wiKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2luZ2xlT3B0aW9uKFwi55+p5b2i6aKc6Imy77ya57KJ6ImyXCIsIFwi55+p5b2i6aKc6Imy77ya6JOd6ImyXCIsIFwiQ29sb3JQaW5rXCIpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaW5nbGVPcHRpb24oXCLnn6nlvaLpq5jluqbvvJrpq5hcIiwgXCLnn6nlvaLpq5jluqbvvJrkvY5cIiwgXCJFbGV2YXRpb25cIiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpbmdsZU9wdGlvbihcIumYtOW9seminOiJsu+8mum7hOiJslwiLCBcIumYtOW9seminOiJsu+8mum7keiJslwiLCBcIlNoYWRvd0NvbG9yXCIpLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwiXG5cbmxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBDb250YWluZXIsXG4gICAgTGlzdFRpbGUsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgQ29sb3JzLFxuICAgIFJhaXNlZEJ1dHRvbixcbiAgICBDb2x1bW4sXG4gICAgU3RhY2ssXG4gICAgQW5pbWF0ZWRQb3NpdGlvbmVkLFxuICAgIER1cmF0aW9uLFxuICAgIEN1cGVydGlub1N3aXRjaCxcbiAgICBBbGlnbm1lbnQsXG4gICAgQ3VydmVzLFxuICAgIEV4cGFuZGVkLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkUG9zaXRpb25lZFN0YXRlKCk7XG4gICAgfVxufVxuXG4vLy8g6K6p5a2Q57uE5Lu26L+b6KGM5a6a5L2N5Yqo55S777yM5Y+v5oyH5a6a5pe26ZW/5ZKM5puy57q/77yM5Y+q6IO955So5LqOU3RhY2vkuK1cbmNsYXNzIFBhZ2VFeGFtcGxlQW5pbWF0ZWRQb3NpdGlvbmVkU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9sZWZ0ID0gMTAwO1xuICAgICAgICB0aGlzLl90b3AgPSAxMDA7XG4gICAgICAgIHRoaXMuX29uU2hvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jdXJ2ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9jaGFuZ2VTd2l0Y2goKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSAhdGhpcy5fc2VsZWN0ZWQ7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfTtcblxuICAgIF9jaGFuZ2VCdXR0b24oKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fbGVmdCA9ICh0aGlzLl9sZWZ0ID09IDEwMCkgPyB0aGlzLl9sZWZ0ICsgMjAwIDogMTAwO1xuICAgICAgICAgICAgdGhpcy5fdG9wID0gKHRoaXMuX3RvcCA9PSAxMDApID8gdGhpcy5fdG9wICsgMjAwIDogMTAwO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH07XG5cbiAgICBfY2hhbmdlQ3VydmUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fY3VydmUgPSAhdGhpcy5fY3VydmU7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGxldCB3aWRnZXRzID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdBbmltYXRlZFBvc2l0aW9uZWQnKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZSgnQW5pbWF0ZWRQb3NpdGlvbmVk5LqL5L6LJyksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgU3RhY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEFuaW1hdGVkUG9zaXRpb25lZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB0aGlzLl90b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogdGhpcy5fbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZTogdGhpcy5fY3VydmUgPyBDdXJ2ZXMuZWxhc3RpY0luIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogbmV3IER1cmF0aW9uKHsgc2Vjb25kczogMSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVuZDogdGhpcy5fc2VsZWN0ZWQgPyB0aGlzLl9jaGFuZ2VCdXR0b24uYmluZCh0aGlzKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KSxcblxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+W+queOr+aSreaUvicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBDdXBlcnRpbm9Td2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9zZWxlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZVN3aXRjaC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+W8gOWQr+WKqOeUuycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBDdXBlcnRpbm9Td2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9jdXJ2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZUN1cnZlLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFJhaXNlZEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ+aSreaUvicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiB0aGlzLl9jaGFuZ2VCdXR0b24uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KSxcblxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gd2lkZ2V0cztcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEV4YW1wbGVXaWRnZXRcbn07IiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIENvbnRhaW5lcixcbiAgICBMaXN0VGlsZSxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBDb2xvcnMsXG4gICAgUmFpc2VkQnV0dG9uLFxuICAgIENvbHVtbixcbiAgICBBbmltYXRlZFNpemUsXG4gICAgRHVyYXRpb24sXG4gICAgQ3VwZXJ0aW5vU3dpdGNoLFxuICAgIEFsaWdubWVudCxcbiAgICBDdXJ2ZXMsXG4gICAgRXhwYW5kZWQsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcignRXhhbXBsZVdpZGdldCcpOyB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFuaW1hdGVkU2l6ZVN0YXRlKCk7IH1cbn1cblxuLy8vIOWtkOe7hOS7tuWkp+Wwj+WPkeeUn+WPmOWMluaXtui/m+ihjOWKqOeUu+a4kOWPmO+8jOWPr+aMh+WumuaXtumVv+OAgeWvuem9kOaWueW8j+OAgeabsue6v+OAgXZzeW5j562J5bGe5oCnXG5jbGFzcyBQYWdlRXhhbXBsZUFuaW1hdGVkU2l6ZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fbGVmdCA9IDEwMDtcbiAgICAgICAgdGhpcy5fdG9wID0gMTAwO1xuICAgICAgICB0aGlzLl9jdXJ2ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9jaGFuZ2VDdXJ2ZSgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJ2ZSA9ICF0aGlzLl9jdXJ2ZTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBfY2hhbmdlQnV0dG9uKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2xlZnQgPSAodGhpcy5fbGVmdCA9PSAxMDApID8gdGhpcy5fbGVmdCArIDIwMCA6IDEwMDtcbiAgICAgICAgICAgIHRoaXMuX3RvcCA9ICh0aGlzLl90b3AgPT0gMTAwKSA/IHRoaXMuX3RvcCArIDIwMCA6IDEwMDtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGxldCB3aWRnZXRzID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdBbmltYXRlZFNpemUnKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZSgnQW5pbWF0ZWRTaXpl5LqL5L6LJyksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQW5pbWF0ZWRTaXplKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VydmU6IHRoaXMuX2N1cnZlID8gQ3VydmVzLmJvdW5jZU91dCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBuZXcgRHVyYXRpb24oeyBzZWNvbmRzOiAxIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuX3RvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLl9sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdBbmltYXRlZFNpemUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KSxcblxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+W8gOWQr+WKqOeUuycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBDdXBlcnRpbm9Td2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9jdXJ2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZUN1cnZlLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFJhaXNlZEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ+aSreaUvicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiB0aGlzLl9jaGFuZ2VCdXR0b24uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHdpZGdldHM7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0LFxufTsiLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIExpc3RUaWxlLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIEljb24sXG4gICAgQ29sb3JzLFxuICAgIEljb25CdXR0b24sXG4gICAgVGV4dFN0eWxlLFxuICAgIExpc3RWaWV3LFxuICAgIEljb25zLFxuICAgIFNpemUsXG4gICAgUHJlZmVycmVkU2l6ZSxcbiAgICBDb250YWluZXIsXG4gICAgQ2VudGVyLFxuICAgIFJvdW5kZWRSZWN0YW5nbGVCb3JkZXIsXG4gICAgQm9yZGVyUmFkaXVzLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUFwcEJhcigpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQXBwQmFyIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+W4puacieW6lemDqOagj+eahEFwcEJhcicsKSxcbiAgICAgICAgICAgICAgICBib3R0b206IG5ldyBQcmVmZXJyZWRTaXplKHtcbiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkU2l6ZTogbmV3IFNpemUoMC4wLCAyNC4wKSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5vcmFuZ2UvKlszMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENlbnRlcih7IGNoaWxkOiBuZXcgVGV4dChcIuW6lemDqOagj1wiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCfmnIDnroDljZXnmoRBcHBCYXInKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEFwcEJhcih7IHRpdGxlOiBuZXcgVGV4dCgnTm9ybWFsQXBwQmFyJykgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCfmoIfpopjmjaLoibInKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ05vcm1hbEFwcEJhcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7IGNvbG9yOiBDb2xvcnMud2hpdGUgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCfog4zmma/mjaLoibInKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdOb3JtYWxBcHBCYXInLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoeyBjb2xvcjogQ29sb3JzLndoaXRlIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn6K6+572ubGVhZGluZycpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYWRpbmc6IG5ldyBJY29uQnV0dG9uKHsgaWNvbjogbmV3IEljb24oSWNvbnMuYWRkKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQXBwQmFyJyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn6ZqQ6JePbGVhZGluZycpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9tYXRpY2FsbHlJbXBseUxlYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdBcHBCYXInKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCforr7nva5hY3Rpb24nKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiBbbmV3IEljb25CdXR0b24oeyBpY29uOiBuZXcgSWNvbihJY29ucy5jYW1lcmEpIH0pXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQXBwQmFyJyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn6K6+572u5aSa5LiqYWN0aW9uJykgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJY29uQnV0dG9uKHsgaWNvbjogbmV3IEljb24oSWNvbnMuY2FtZXJhKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7IGljb246IG5ldyBJY29uKEljb25zLnByaW50KSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0FwcEJhcicpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ+abtOaUuUFwcEJhcuWGheWuueeahOmAj+aYjuW6picpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQXBwQmFyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyT3BhY2l0eTogMC41LFxuICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ+S4quaAp+WMlkFwcEJhcuW9oueKticpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQXBwQmFyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogbmV3IFJvdW5kZWRSZWN0YW5nbGVCb3JkZXIoeyBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5jaXJjdWxhcigyMC4wKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIENvbnRhaW5lcixcbiAgICBMaXN0VGlsZSxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBDb2xvcnMsXG4gICAgUmFpc2VkQnV0dG9uLFxuICAgIENvbHVtbixcbiAgICBBbmltYXRlZFNpemUsXG4gICAgRHVyYXRpb24sXG4gICAgQ3VwZXJ0aW5vU3dpdGNoLFxuICAgIEFsaWdubWVudCxcbiAgICBDdXJ2ZXMsXG4gICAgQXNwZWN0UmF0aW8sXG4gICAgUm93LFxuICAgIEV4cGFuZGVkLFxuICAgIFNsaWRlcixcbiAgICBQYWRkaW5nLFxuICAgIEVkZ2VJbnNldHMsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICAgIH1cblxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQXNwZWN0UmF0aW9TdGF0ZSgpO1xuICAgIH1cbn1cblxuLy8vIOavlOS+i+ebkiDlrrnnurPkuIDkuKrlrZDnu4Tku7Yg6YCa6L+H5oyH5a6a5a696auY5q+U6ZmQ5a6a5a2Q57uE5Lu255qE5aSn5bCPXG5jbGFzcyBQYWdlRXhhbXBsZUFzcGVjdFJhdGlvU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9yYXRpbyA9IDEgLyAyO1xuICAgIH1cblxuICAgIF9jaGFuZ2VSYXRpbyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3JhdGlvID0gdmFsdWU7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGxldCB3aWRnZXRzID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdBc3BlY3RSYXRpbycpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKCfmr5Tkvovnm5Lnu4Tku7YnKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWVHcmV5NTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdzdGF0aWMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBBc3BlY3RSYXRpbyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3BlY3RSYXRpbzogdGhpcy5fcmF0aW8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnc3RhdGljJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fcmF0aW8sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZVJhdGlvLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMixcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSksXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHdpZGdldHM7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0LFxufTsiLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENvbHVtbixcbiAgICBSb3csXG4gICAgQmFzZWxpbmUsXG4gICAgVGV4dEJhc2VsaW5lLFxuICAgIFRleHRTdHlsZSxcbiAgICBDZW50ZXIsXG4gICAgQ29udGFpbmVyLFxuICAgIENvbG9ycyxcbiAgICBNYWluQXhpc0FsaWdubWVudCxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7IHJldHVybiBuZXcgUGFnZUV4YW1wbGVCYXNlTGluZSgpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQmFzZUxpbmUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIF90ZXh0KHRleHQsIHNpemUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRleHQsIHtcbiAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7IGZvbnRTaXplOiBzaXplIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfYmFzZWxpbmVXaXRoVGV4dCh0ZXh0LCBzaXplKSB7XG4gICAgICAgIHJldHVybiBuZXcgQmFzZWxpbmUoe1xuICAgICAgICAgICAgYmFzZWxpbmU6IDUwLjAsXG4gICAgICAgICAgICBiYXNlbGluZVR5cGU6IFRleHRCYXNlbGluZS5hbHBoYWJldGljLFxuICAgICAgICAgICAgY2hpbGQ6IHRoaXMuX3RleHQodGV4dCwgc2l6ZSksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9kaXZpZGVyKCkgeyByZXR1cm4gbmV3IENvbnRhaW5lcih7IGhlaWdodDogMS4wLCBjb2xvcjogQ29sb3JzLmdyZXkgfSk7IH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoJ0Jhc2VsaW5lJykgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYXNlbGluZVdpdGhUZXh0KCdBYUJiQ2NEZEVlRmZHZ0hoSWlKaktrTGxNbU5uJywgMjAuMCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpdmlkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFzZWxpbmVXaXRoVGV4dCgnT29QcFFxUnJTc1R0VXVWdld3WHhZeVp6JywgMjQuMCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpdmlkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFzZWxpbmVXaXRoVGV4dCgnMTIzNDU2Nzg5MCFAIyQlXiYqKCknLCAyOC4wKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGl2aWRlcigpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFzZWxpbmVXaXRoVGV4dCgnMTUsMCcsIDE1LjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Jhc2VsaW5lV2l0aFRleHQoJzIwLDAnLCAyMC4wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYXNlbGluZVdpdGhUZXh0KCcyNSwwJywgMjUuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFzZWxpbmVXaXRoVGV4dCgnMzAsMCcsIDMwLjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Jhc2VsaW5lV2l0aFRleHQoJzM1LDAnLCAzNS4wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpdmlkZXIoKSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJsZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgU2NhZmZvbGQsXG4gICAgTGlzdFRpbGUsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgQ29sb3JzLFxuICAgIENvbHVtbixcbiAgICBDdXBlcnRpbm9Td2l0Y2gsXG4gICAgUGFkZGluZyxcbiAgICBFZGdlSW5zZXRzLFxuICAgIEJvdHRvbU5hdmlnYXRpb25CYXIsXG4gICAgSWNvbixcbiAgICBJY29ucyxcbiAgICBCb3R0b21OYXZpZ2F0aW9uQmFySXRlbSxcbiAgICBCb3R0b21OYXZpZ2F0aW9uQmFyVHlwZSxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY29uc3QgeyBTZWN0aW9uVGl0bGUgfSA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnQvc2VjdGlvbl90aXRsZS5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVCb3R0b21OYXZpZ2F0aW9uQmFyU3RhdGUoKTtcbiAgICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQm90dG9tTmF2aWdhdGlvbkJhclN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSAxO1xuICAgICAgICB0aGlzLl90eXBlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NvbG9ycyA9IFtcbiAgICAgICAgICAgIENvbG9ycy5yZWQsXG4gICAgICAgICAgICBDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICBDb2xvcnMuYmx1ZSxcbiAgICAgICAgXVxuICAgIH1cblxuXG5cbiAgICBfY2hhbmdlQm90dG9tQmFyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSB2YWx1ZTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBfY2hhbmdlVHlwZSgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl90eXBlID0gIXRoaXMuX3R5cGU7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGxldCB3aWRnZXRzID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdCb3R0b21OYXZpZ2F0aW9uQmFyJyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoJ+W6lemDqOWvvOiIquagj+e7hOS7ticpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCfmm7TmlLnmmL7npLrnsbvliKsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsaW5nOiBuZXcgQ3VwZXJ0aW5vU3dpdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZVR5cGUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25CYXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uVGFwOiB0aGlzLl9jaGFuZ2VCb3R0b21CYXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleDogdGhpcy5fcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhlZENvbG9yOiB0aGlzLl90eXBlID8gQ29sb3JzLndoaXRlIDogQ29sb3JzLnBpbmssXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogMjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93VW5zZWxlY3RlZExhYmVsczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93U2VsZWN0ZWRMYWJlbHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAodGhpcy5fdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IEJvdHRvbU5hdmlnYXRpb25CYXJUeXBlLnNoaWZ0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBCb3R0b21OYXZpZ2F0aW9uQmFyVHlwZS5maXhlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMuaG9tZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnSG9tZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuX2NvbG9yc1t0aGlzLl9wb3NpdGlvbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMuYnVzaW5lc3MpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0J1c2luZXNzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5fY29sb3JzW3RoaXMuX3Bvc2l0aW9uXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvbkJhckl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihJY29ucy5zY2hvb2wpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1NjaG9vbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuX2NvbG9yc1t0aGlzLl9wb3NpdGlvbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUGFkZGluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgxMCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pLFxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB3aWRnZXRzO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRXhhbXBsZVdpZGdldCxcbn07IiwiXG5cbmxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBMaXN0VmlldyxcbiAgICBMaXN0VGlsZSxcbiAgICBCdXR0b25CYXIsXG4gICAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gICAgTWFpbkF4aXNTaXplLFxuICAgIFJhaXNlZEJ1dHRvbixcbiAgICBFZGdlSW5zZXRzLFxuICAgIFZlcnRpY2FsRGlyZWN0aW9uLFxuICAgIEJ1dHRvblRleHRUaGVtZSxcbiAgICBCdXR0b25CYXJMYXlvdXRCZWhhdmlvcixcbiAgICBUZXh0U3R5bGUsXG4gICAgQ29sb3JzLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUJ1dHRvbkJhcigpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQnV0dG9uQmFyIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBfYnV0dG9uTGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBSYWlzZWRCdXR0b24oe1xuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIkJ1dHRvbjFcIiksXG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgUmFpc2VkQnV0dG9uKHtcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCJCdXR0b24yXCIpLFxuICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFJhaXNlZEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwiQnV0dG9uM1wiKSxcbiAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXVxuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoJ0J1dHRvbkJhcicpIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ0J1dHRvbkJhci5hbGlnbm1lbnQnKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJ1dHRvbkJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2J1dHRvbkxpc3QoKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8g6L+Z5Liq5LiN55+l6YGT5oCO5LmI5ryU56S6PSA9XG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnQnV0dG9uQmFyLm1haW5BeGlzU2l6ZScpIH0pLFxuICAgICAgICAgICAgICAgICAgICAvLyBuZXcgQnV0dG9uQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIG1haW5BeGlzU2l6ZTogTWFpbkF4aXNTaXplLm1pbixcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNoaWxkcmVuOiB0aGlzLl9idXR0b25MaXN0KClcbiAgICAgICAgICAgICAgICAgICAgLy8gfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdCdXR0b25CYXIuYm90dG9uSGVpZ2h0JykgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBCdXR0b25CYXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25IZWlnaHQ6IDIwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fYnV0dG9uTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ0J1dHRvbkJhci5ib3R0b25NaW5XaWR0aCcpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQnV0dG9uQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uTWluV2lkdGg6IDEwMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2J1dHRvbkxpc3QoKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdCdXR0b25CYXIuYnV0dG9uUGFkZGluZycpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQnV0dG9uQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uUGFkZGluZzogRWRnZUluc2V0cy5zeW1tZXRyaWMoeyBob3Jpem9udGFsOiAyLjAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fYnV0dG9uTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICAvLyDov5nkuKrkuZ/kuI3nn6XpgZPmgI7kuYjmvJTnpLo944CCPVxuICAgICAgICAgICAgICAgICAgICAvLyBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ0J1dHRvbkJhci5sYXlvdXRCZWhhdmlvcicpIH0pLFxuICAgICAgICAgICAgICAgICAgICAvLyBuZXcgQnV0dG9uQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGFsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGF5b3V0QmVoYXZpb3I6IEJ1dHRvbkJhckxheW91dEJlaGF2aW9yLmNvbnN0cmFpbmVkLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY2hpbGRyZW46IHRoaXMuX2J1dHRvbkxpc3QoKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdCdXR0b25CYXIuYnV0dG9uVGV4dFRoZW1lJykgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBCdXR0b25CYXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25UZXh0VGhlbWU6IEJ1dHRvblRleHRUaGVtZS5hY2NlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fYnV0dG9uTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ0J1dHRvbkJhci5vdmVyZmxvd0J1dHRvblNwYWNpbmcnKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJ1dHRvbkJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkhlaWdodDogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbk1pbldpZHRoOiAxODAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93QnV0dG9uU3BhY2luZzogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLl9idXR0b25MaXN0KCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnQnV0dG9uQmFyLm92ZXJmbG93QnV0dG9uRGlyZWN0aW9uJykgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBCdXR0b25CYXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25IZWlnaHQ6IDIwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25NaW5XaWR0aDogMTgwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd0RpcmVjdGlvbjogVmVydGljYWxEaXJlY3Rpb24udXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fYnV0dG9uTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIExpc3RWaWV3LFxuICAgIExpc3RUaWxlLFxuICAgIENhcmQsXG4gICAgQ29sdW1uLFxuICAgIEljb24sXG4gICAgSWNvbnMsXG4gICAgQnV0dG9uQmFyLFxuICAgIEZsYXRCdXR0b24sXG4gICAgTWFpbkF4aXNTaXplLFxuICAgIEVkZ2VJbnNldHMsXG4gICAgSW5rV2VsbCxcbiAgICBDb250YWluZXIsXG4gICAgQ2VudGVyLFxuICAgIEltYWdlLFxuICAgIENvbG9ycyxcbiAgICBSb3VuZGVkUmVjdGFuZ2xlQm9yZGVyLFxuICAgIEJvcmRlclJhZGl1cyxcbiAgICBDbGlwLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTsgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7IHJldHVybiBuZXcgUGFnZUV4YW1wbGVDYXJkKCk7IH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVDYXJkIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBfY2FyZENvbnRlbnQodGl0bGUsIGRlc2NyaXB0aW9uLCBzaG93QnV0dG9uQmFyID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbHVtbih7XG4gICAgICAgICAgICBtYWluQXhpc1NpemU6IE1haW5BeGlzU2l6ZS5taW4sXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlYWRpbmc6IG5ldyBJY29uKEljb25zLmFsYnVtKSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KHRpdGxlKSxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KGRlc2NyaXB0aW9uKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBzaG93QnV0dG9uQmFyID8gbmV3IEJ1dHRvbkJhcih7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCfliIbkuqsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGbGF0QnV0dG9uKHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCflhbPpl60nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KSA6IG5ldyBDb250YWluZXIoKSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jYXJkVGFwcGFibGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2FyZCh7XG4gICAgICAgICAgICBjaGlsZDogbmV3IElua1dlbGwoe1xuICAgICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0OiAzNTAuMCxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQoJ+WPr+eCueWHu+eahOWNoeeJhycpIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoJ0NhcmQnKSB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTIuNSksXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCfkvb/nlKhMaXN0VGlsZeWItuS9nOeahOOAgeW4puacieaMiemSrueahOWNoeeJhycpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ2FyZCh7IGNoaWxkOiB0aGlzLl9jYXJkQ29udGVudCgn5Y2h54mHJywgJ+i/memHjOaYr+aPj+i/sCcpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ+S9v+eUqElua1dlbGzliLbkvZznmoTjgIHlj6/ngrnlh7vnmoTljaHniYcnKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FyZFRhcHBhYmxlKCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn5bim5pyJ6aKc6Imy44CB5LiN5ZCM6auY5bqm44CB5LiN5ZCM6Zi05b2x55qE5Y2h54mHJykgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDYXJkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiB0aGlzLl9jYXJkQ29udGVudCgn5b2p6Imy5Y2h54mH5ZKM5b2p6Imy6Zi05b2xJywgJ2V2ZXZhdGlvbuiuvuS4ujEyLjAg6Zi05b2x6Z2i56ev5Y+Y5aSn5LqGJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUvKlsxMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogQ29sb3JzLnB1cnBsZS8qWzgwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZXZhdGlvbjogMTUuMCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn5pS55Y+YbWFyZ2luJykgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDYXJkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5hbGwoNDAuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogdGhpcy5fY2FyZENvbnRlbnQoJ21hcmdpbjo0MC4wJywgJ+iuqeWNoeeJh+WSjOWFtuS7luWFg+e0oOS/neaMgei3neemuycsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn5Liq5oCn5YyWQ2FyZOW9oueKtuW5tuWJquWIh+WtkOWFg+e0oCcpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ2FyZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogbmV3IFJvdW5kZWRSZWN0YW5nbGVCb3JkZXIoeyBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5jaXJjdWxhcigyNS4wKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBJbWFnZS5hc3NldCggJ3Blb3BsZS9hbGlfbGFuZHNjYXBlLnBuZycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBteFBhY2thZ2U6ICdmbHV0dGVyX2dhbGxlcnlfYXNzZXRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXQ6IEJveEZpdC5jb3ZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpcEJlaGF2aW9yOiBDbGlwLmFudGlBbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsImxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBMaXN0VmlldyxcbiAgICBMaXN0VGlsZSxcbiAgICBDaGlwLFxuICAgIEljb24sXG4gICAgSWNvbnMsXG4gICAgRWRnZUluc2V0cyxcbiAgICBDb2xvcnMsXG4gICAgUm91bmRlZFJlY3RhbmdsZUJvcmRlcixcbiAgICBCb3JkZXJSYWRpdXMsXG4gICAgUm93LFxuICAgIENpcmNsZUF2YXRhcixcbiAgICBUZXh0U3R5bGUsXG4gICAgTWFpbkF4aXNBbGlnbm1lbnQsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcignRXhhbXBsZVdpZGdldCcpOyB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUNoaXAoKTsgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUNoaXAgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7IHRpdGxlOiBuZXcgVGV4dCgnQ2hpcCcpIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ0NoaXAsIOW4puacieWbvuagh+eahENoaXDlkozoh6rlrprkuYlsYWJlbOagt+W8j+eahENoaXAnKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VFdmVubHksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDaGlwKHsgbGFiZWw6IG5ldyBUZXh0KCdDaGlwJykgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENoaXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmF0YXI6IG5ldyBDaXJjbGVBdmF0YXIoeyBjaGlsZDogbmV3IFRleHQoJ0MnKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5ldyBUZXh0KCdDaGlwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENoaXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoJ0NoaXAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxTdHlsZTogbmV3IFRleHRTdHlsZSh7IGNvbG9yOiBDb2xvcnMuYmx1ZSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxQYWRkaW5nOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7IGhvcml6b250YWw6IDMwLjAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ+W4puacieWIoOmZpOaMiemSrueahENoaXAsIOiHquWumuS5ieWkmuenjeagt+W8j+eahENoaXAnKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VFdmVubHksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDaGlwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5ldyBUZXh0KCdDaGlwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUljb246IG5ldyBJY29uKEljb25zLmRlbGV0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUljb25Db2xvcjogQ29sb3JzLnJlZC8qWzQwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EZWxldGVkOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUJ1dHRvblRvb2x0aXBNZXNzYWdlOiAn5Yig6ZmkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ2hpcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgVGV4dCgnQ2hpcCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogbmV3IFJvdW5kZWRSZWN0YW5nbGVCb3JkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuY2lyY3VsYXIoNS4wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLmJsdWUvKlsyMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENoaXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoJ0NoaXAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxldmF0aW9uOiA1LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsImxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBEZWZhdWx0VGFiQ29udHJvbGxlcixcbiAgICBUYWIsXG4gICAgVGFiQmFyLFxuICAgIFRhYkJhclZpZXcsXG4gICAgU2NhZmZvbGQsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgTGlzdFZpZXcsXG4gICAgQ29sdW1uLFxuICAgIENvbnRhaW5lcixcbiAgICBDb2xvcnMsXG4gICAgTGlzdFRpbGUsXG4gICAgQ2VudGVyLFxuICAgIE1haW5BeGlzQWxpZ25tZW50LFxuICAgIE1haW5BeGlzU2l6ZSxcbiAgICBDcm9zc0F4aXNBbGlnbm1lbnQsXG4gICAgVmVydGljYWxEaXJlY3Rpb24sXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcignRXhhbXBsZVdpZGdldCcpOyB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUNvbHVtbigpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQ29sdW1uIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9lcXVhbENvbnRhaW5lcnNMaXN0KCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLypbMzAwXSovLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHsgY2hpbGQ6IG5ldyBUZXh0KFwiMVwiKSB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZS8qWzMwMF0qLyxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENlbnRlcih7IGNoaWxkOiBuZXcgVGV4dChcIjJcIikgfSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogMzAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmdyZWVuLypbMzAwXSovLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHsgY2hpbGQ6IG5ldyBUZXh0KFwiM1wiKSB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIF91bmVxdWFsQ29udGFpbmVyc0xpc3QoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQvKlszMDBdKi8sXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQoXCIxXCIpIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA5MCxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUvKlszMDBdKi8sXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQoXCIyXCIpIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmdyZWVuLypbMzAwXSovLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHsgY2hpbGQ6IG5ldyBUZXh0KFwiM1wiKSB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIF9tYWluQXhpc0FsaWdubWVudFZpZXcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJNYWluQXhpc0FsaWdubWVudC5zdGFydFwiKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fZXF1YWxDb250YWluZXJzTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJNYWluQXhpc0FsaWdubWVudC5lbmRcIikgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjQwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JleS8qWzMwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LmVuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLl9lcXVhbENvbnRhaW5lcnNMaXN0KCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIk1haW5BeGlzQWxpZ25tZW50LmNlbnRlclwiKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2VxdWFsQ29udGFpbmVyc0xpc3QoKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VBcm91bmRcIikgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjQwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JleS8qWzMwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2VxdWFsQ29udGFpbmVyc0xpc3QoKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VCZXR3ZWVuXCIpIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI0MC4wLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmdyZXkvKlszMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUJldHdlZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fZXF1YWxDb250YWluZXJzTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJNYWluQXhpc0FsaWdubWVudC5zcGFjZUV2ZW5seVwiKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VFdmVubHksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fZXF1YWxDb250YWluZXJzTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jcm9zc0F4aXNBbGlnbm1lbnRWaWV3KCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiQ3Jvc3NBeGlzQWxpZ25tZW50LnN0YXJ0XCIpIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDkwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JleS8qWzMwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OiBDcm9zc0F4aXNBbGlnbm1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fdW5lcXVhbENvbnRhaW5lcnNMaXN0KCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIkNyb3NzQXhpc0FsaWdubWVudC5lbmRcIikgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogOTAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6IENyb3NzQXhpc0FsaWdubWVudC5lbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fdW5lcXVhbENvbnRhaW5lcnNMaXN0KCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIkNyb3NzQXhpc0FsaWdubWVudC5jZW50ZXJcIikgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogOTAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc0F4aXNBbGlnbm1lbnQ6IENyb3NzQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fdW5lcXVhbENvbnRhaW5lcnNMaXN0KCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIkNyb3NzQXhpc0FsaWdubWVudC5zdHJldGNoXCIpIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDkwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JleS8qWzMwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OiBDcm9zc0F4aXNBbGlnbm1lbnQuc3RyZXRjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLl91bmVxdWFsQ29udGFpbmVyc0xpc3QoKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfbWFpbkF4aXNTaXplVmlldygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIk1haW5BeGlzU2l6ZS5taW5cIikgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjQwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JleS8qWzMwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNTaXplOiBNYWluQXhpc1NpemUubWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2VxdWFsQ29udGFpbmVyc0xpc3QoKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiTWFpbkF4aXNTaXplLm1heFwiKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc1NpemU6IE1haW5BeGlzU2l6ZS5tYXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fZXF1YWxDb250YWluZXJzTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3ZlcnRpY2FsRGlyZWN0aW9uVmlldygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIlZlcnRpY2FsRGlyZWN0aW9uLmRvd25cIikgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjQwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JleS8qWzMwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxEaXJlY3Rpb246IFZlcnRpY2FsRGlyZWN0aW9uLmRvd24sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fZXF1YWxDb250YWluZXJzTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJWZXJ0aWNhbERpcmVjdGlvbi51cFwiKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbERpcmVjdGlvbjogVmVydGljYWxEaXJlY3Rpb24udXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fZXF1YWxDb250YWluZXJzTGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IERlZmF1bHRUYWJDb250cm9sbGVyKHtcbiAgICAgICAgICAgIGxlbmd0aDogNCxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnQ29sdW1uJyksXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogbmV3IFRhYkJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Njcm9sbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRhYih7IHRleHQ6ICdNYWluQXhpc0FsaWdubWVudCcgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRhYih7IHRleHQ6ICdDcm9zc0F4aXNBbGlnbm1lbnQnIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiAnTWFpbkF4aXNTaXplJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGFiKHsgdGV4dDogJ1ZlcnRpY2FsRGlyZWN0aW9uJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYm9keTogbmV3IFRhYkJhclZpZXcoe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFpbkF4aXNBbGlnbm1lbnRWaWV3KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcm9zc0F4aXNBbGlnbm1lbnRWaWV3KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYWluQXhpc1NpemVWaWV3KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92ZXJ0aWNhbERpcmVjdGlvblZpZXcoKSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJsZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgRGVmYXVsdFRhYkNvbnRyb2xsZXIsXG4gICAgVGFiLFxuICAgIFRhYkJhcixcbiAgICBUYWJCYXJWaWV3LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIExpc3RWaWV3LFxuICAgIEFsaWdubWVudCxcbiAgICBDb250YWluZXIsXG4gICAgQ29sb3JzLFxuICAgIExpc3RUaWxlLFxuICAgIEVkZ2VJbnNldHMsXG4gICAgQm94RGVjb3JhdGlvbixcbiAgICBCb3hTaGFwZSxcbiAgICBCb3JkZXJSYWRpdXMsXG4gICAgUmFkaXVzLFxuICAgIEJvcmRlcixcbiAgICBCb3hTaGFkb3csXG4gICAgT2Zmc2V0LFxuICAgIE1hdHJpeDQsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcignRXhhbXBsZVdpZGdldCcpOyB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUNvbnRhaW5lcigpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQ29udGFpbmVyIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9hbGlnbm1lbnRWaWV3KCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdBbGlnbm1lbnQuY2VudGVyJykgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjQwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZS8qWzIwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0NvbnRhaW5lcicpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnQWxpZ25tZW50LnRvcExlZnQnKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLypbMjAwXSovLFxuICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0LFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0NvbnRhaW5lcicpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnQWxpZ25tZW50KDAuMiwgLTAuNyknKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLypbMjAwXSovLFxuICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IG5ldyBBbGlnbm1lbnQoMC4yLCAtMC43KSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdDb250YWluZXInKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9wYWRkaW5nQW5kTWFyZ2luKCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdSZWQgQ29udGFpbmVyOiAocGFkZGluZzogNTAuMCwgbWFyZ2luOiAyMC4wKScpIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI0MC4wLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUvKlsyMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLypbMjAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoNTAuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMuYWxsKDIwLjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoeyBjb2xvcjogQ29sb3JzLnllbGxvdy8qWzIwMF0qLyB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdtYXJnaW46IEVkZ2VJbnNldHMuZnJvbUxUUkIoMTAsIDIwLCAzMCwgNDApJykgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjQwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZS8qWzIwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmVlbi8qWzIwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5mcm9tTFRSQigxMC4wLCAyMC4wLCAzMC4wLCA0MC4wKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdtYXJnaW46IEVkZ2VJbnNldHMuc3ltbWV0cmljKHt2ZXJ0aWNhbDogMTAsIGhvcml6b250YWw6IDQwfSknKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAuMCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLypbMjAwXSovLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLm9yYW5nZS8qWzIwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5zeW1tZXRyaWMoeyB2ZXJ0aWNhbDogMTAuMCwgaG9yaXpvbnRhbDogNDAuMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdtYXJnaW46IEVkZ2VJbnNldHMub25seSh7Ym90dG9tOiAyMH0pJykgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjQwLjAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZS8qWzIwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5wdXJwbGUvKlsyMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7IGJvdHRvbTogMjAuMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfZGVjb3JhdGlvblZpZXcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ2RlY29yYXRpb24uc2hhcGUnKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdDb250YWluZXInKSxcbiAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGU6IEJveFNoYXBlLmNpcmNsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLypbMjAwXSovLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMuYWxsKDEwLjApLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDgwLjAsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdkZWNvcmF0aW9uLmJvcmRlclJhZGl1cycpIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0NvbnRhaW5lcicpLFxuICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDE2LjApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JlZW4vKlsyMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5zeW1tZXRyaWMoeyB2ZXJ0aWNhbDogMTAuMCwgaG9yaXpvbnRhbDogODAuMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA4MC4wLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnZGVjb3JhdGlvbi5ib3JkZXInKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdDb250YWluZXInKSxcbiAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuYWxsKFJhZGl1cy5jaXJjdWxhcigxNi4wKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IEJvcmRlci5hbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLypbNjAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7IHZlcnRpY2FsOiAxMC4wLCBob3Jpem9udGFsOiAxMjAuMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0MC4wLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnZGVjb3JhdGlvbi5ib3hTaGFkb3cnKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdDb250YWluZXInKSxcbiAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGU6IEJveFNoYXBlLmNpcmNsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZS8qWzMwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBCb3hTaGFkb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsYWNrNTQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogbmV3IE9mZnNldCg1LjAsIDUuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdXJSYWRpdXM6IDUuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5hbGwoMTAuMCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogODAuMCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF90cmFuc2Zvcm1WaWV3KCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdNYXRyaXg0LnJvdGF0aW9uWCgwLjI1KScpIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUvKlsyMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnQ29udGFpbmVyJyksXG4gICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7IGhvcml6b250YWw6IDEyMC4wIH0pLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwLjAsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogTWF0cml4NC5yb3RhdGlvblooMC4yNSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7IGhlaWdodDogMTIwIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnTWF0cml4NC5za2V3WSgwLjI1KScpIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUvKlsyMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnQ29udGFpbmVyJyksXG4gICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7IGhvcml6b250YWw6IDEyMC4wIH0pLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwLjAsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogTWF0cml4NC5za2V3WSgwLjI1KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0cyA9IG5ldyBEZWZhdWx0VGFiQ29udHJvbGxlcih7XG4gICAgICAgICAgICBsZW5ndGg6IDMsXG4gICAgICAgICAgICBjaGlsZDogbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJDb250YWluZXJcIiksXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogbmV3IFRhYkJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiBcImFsaWdubWVudFwiIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiBcInBhZGRpbmcgJiBtYXJnaW5cIiB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGFiKHsgdGV4dDogXCJEZWNvcmF0aW9uXCIgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV3IFRhYih7IHRleHQ6IFwidHJhbnNmb3JtXCIgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBib2R5OiBuZXcgVGFiQmFyVmlldyh7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbGlnbm1lbnRWaWV3KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYWRkaW5nQW5kTWFyZ2luKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWNvcmF0aW9uVmlldygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5fdHJhbnNmb3JtVmlldygpLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0cztcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENvbHVtbixcbiAgICBSb3csXG4gICAgQWxpZ25tZW50LFxuICAgIENvbnRhaW5lcixcbiAgICBDdXBlcnRpbm9BY3Rpdml0eUluZGljYXRvcixcbiAgICBDdXBlcnRpbm9Td2l0Y2gsXG4gICAgRXhwYW5kZWQsXG4gICAgRWRnZUluc2V0cyxcbiAgICBDb2xvcnMsXG4gICAgQm94RGVjb3JhdGlvbixcbiAgICBCb3JkZXIsXG4gICAgQm9yZGVyUmFkaXVzLFxuICAgIFJhZGl1cyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7IH1cblxuICAgIGNyZWF0ZVN0YXRlKCkgeyByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQ3VwZXJ0aW5vQWN0aXZpdHlJbmRpY2F0b3IoKTsgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUN1cGVydGlub0FjdGl2aXR5SW5kaWNhdG9yIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXR0aW5nVGFibGUgPSB7XG4gICAgICAgICAgICBcInNob3dBbmltYXRpb25cIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiYmlnSWNvblwiOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfc2luZ2xlT3B0aW9uKHNlbGVjdGVkVGV4dCwgdW5zZWxlY3RlZFRleHQsIHZhck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTIuMCksXG4gICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQmV0d2VlbixcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dCh0aGlzLnNldHRpbmdUYWJsZVt2YXJOYW1lXSA/IHNlbGVjdGVkVGV4dCA6IHVuc2VsZWN0ZWRUZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub1N3aXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zZXR0aW5nVGFibGVbdmFyTmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVDb2xvcjogQ29sb3JzLm9yYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ1RhYmxlW3Zhck5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoJ0N1cGVydGlub0FjdGl2aXR5SW5kaWNhdG9yJykgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5hbGwoMTIuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuYWxsKFJhZGl1cy5jaXJjdWxhcig0LjApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IEJvcmRlci5hbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI0MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ3VwZXJ0aW5vQWN0aXZpdHlJbmRpY2F0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGluZzogdGhpcy5zZXR0aW5nVGFibGVbXCJzaG93QW5pbWF0aW9uXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogdGhpcy5zZXR0aW5nVGFibGVbXCJiaWdJY29uXCJdID8gMzIuMCA6IDE2LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHsgY2hpbGQ6IG5ldyBDb250YWluZXIoKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2luZ2xlT3B0aW9uKFwi5pi+56S65Yqo55S777ya5pivXCIsIFwi5pi+56S65Yqo55S777ya5ZCmXCIsIFwic2hvd0FuaW1hdGlvblwiKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2luZ2xlT3B0aW9uKFwi5aSn5Zu+5qCH77ya5pivXCIsIFwi5aSn5Zu+5qCH77ya5ZCmXCIsIFwiYmlnSWNvblwiKSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwiXG5cbmxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBMaXN0VmlldyxcbiAgICBDdXBlcnRpbm9CdXR0b24sXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcignRXhhbXBsZVdpZGdldCcpOyB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUN1cGVydGlub0FsZXJ0RGlhbG9nKCk7IH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVDdXBlcnRpbm9BbGVydERpYWxvZyBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7IHRpdGxlOiBuZXcgVGV4dCgnQ3VwZXJ0aW5vQWxlcnREaWFsb2cnKSB9KSxcbiAgICAgICAgICAgIC8vIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAvLyAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIC8vICAgICAgICAgbmV3IEN1cGVydGlub0J1dHRvbih7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0RpYWxvZycpLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgLy8gSGFyb2xkOiDkvLzkuY7msqHmnIlzaG93RGlhbG9n55qE5pa55rOVXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAvLyBvblByZXNzZWQ6ICxcbiAgICAgICAgICAgIC8vICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vICAgICBdXG4gICAgICAgICAgICAvLyB9KSAsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsIlxuXG5sZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgU2NhZmZvbGQsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgTGlzdFZpZXcsXG4gICAgTGlzdFRpbGUsXG4gICAgQ3VwZXJ0aW5vQnV0dG9uLFxuICAgIFJvdyxcbiAgICBNYWluQXhpc0FsaWdubWVudCxcbiAgICBDb2xvcnMsXG4gICAgQm9yZGVyUmFkaXVzLFxuICAgIFJhZGl1cyxcbiAgICBFZGdlSW5zZXRzLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTsgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7IHJldHVybiBuZXcgUGFnZUV4YW1wbGVDdXBlcnRpbm9CdXR0b24oKTsgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUN1cGVydGlub0J1dHRvbiBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7IHRpdGxlOiBuZXcgVGV4dCgnQ3VwZXJ0aW5vQnV0dG9uJykgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIkN1cGVydGlub1RhcHBhYmxlQnV0dG9uXCIpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub0J1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuc3ltbWV0cmljKHsgaG9yaXpvbnRhbDogMTAuMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5vcmFuZ2UvKlszMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkQ29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ1VudGFwcGFibGUgQnV0dG9uJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub0J1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuc3ltbWV0cmljKHsgaG9yaXpvbnRhbDogMTAuMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5vcmFuZ2UvKlszMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnVGFwcGFibGUgQnV0dG9uJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJDdXBlcnRpbm9CdXR0b24uYm9yZGVyUmFkaXVzXCIpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub0J1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0J1dHRvbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub0J1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDI0LjApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdCdXR0b24nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcInBhZGRpbmcgYW5kIG9wYWN0aXJ5XCIpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub0J1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7IGhvcml6b250YWw6IDEwLjAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnQnV0dG9uJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ3VwZXJ0aW5vQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5vcmFuZ2UvKlszMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWRPcGFjaXR5OiAwLjc1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0J1dHRvbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsIlxuXG5sZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgU2NhZmZvbGQsXG4gICAgTGlzdFZpZXcsXG4gICAgTGlzdFRpbGUsXG4gICAgVGV4dCxcbiAgICBDdXBlcnRpbm9QYWdlU2NhZmZvbGQsXG4gICAgQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcixcbiAgICBDdXBlcnRpbm9CdXR0b24sXG4gICAgRWRnZUluc2V0cyxcbiAgICBCb3JkZXIsXG4gICAgQ29sb3JzLFxuICAgIEVkZ2VJbnNldHNEaXJlY3Rpb25hbCxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7IH1cblxuICAgIGNyZWF0ZVN0YXRlKCkgeyByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcigpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhciBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgX25vcm1hbEN1cGVydGlub05hdmlnYXRpb25CYXIoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcih7XG4gICAgICAgICAgICBtaWRkbGU6IG5ldyBUZXh0KFwiQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhclwiKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25CZXR3ZWVuUm91dGVzOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2NoYW5nZUxlYWRpbmdDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKCkge1xuICAgICAgICByZXR1cm4gbmV3IEN1cGVydGlub05hdmlnYXRpb25CYXIoe1xuICAgICAgICAgICAgcHJldmlvdXNQYWdlVGl0bGU6IFwi6L+U5ZueXCIsXG4gICAgICAgICAgICBtaWRkbGU6IG5ldyBUZXh0KFwiQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhclwiKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25CZXR3ZWVuUm91dGVzOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3RyYWlsaW5nQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKHtcbiAgICAgICAgICAgIG1pZGRsZTogbmV3IFRleHQoXCJDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyXCIpLFxuICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBDdXBlcnRpbm9CdXR0b24oe1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuYWxsKDAuMCksXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCforr7nva4nKSxcbiAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdHJhbnNpdGlvbkJldHdlZW5Sb3V0ZXM6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfYm9yZGVyQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKHtcbiAgICAgICAgICAgIG1pZGRsZTogbmV3IFRleHQoXCJDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyXCIpLFxuICAgICAgICAgICAgYm9yZGVyOiBCb3JkZXIuYWxsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLm9yYW5nZS8qWzYwMF0qLyxcbiAgICAgICAgICAgICAgICB3aWR0aDogMi4wLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0cmFuc2l0aW9uQmV0d2VlblJvdXRlczogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9iYWNrZ3JvdW5kQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKHtcbiAgICAgICAgICAgIG1pZGRsZTogbmV3IFRleHQoXCJDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyXCIpLFxuICAgICAgICAgICAgY29sb3I6IENvbG9ycy55ZWxsb3cvKlsyMDBdKi8sXG4gICAgICAgICAgICB0cmFuc2l0aW9uQmV0d2VlblJvdXRlczogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9wYWRkaW5nQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKHtcbiAgICAgICAgICAgIG1pZGRsZTogbmV3IFRleHQoXCJDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyXCIpLFxuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0c0RpcmVjdGlvbmFsLm9ubHkoeyBib3R0b206IDIwLjAgfSksXG4gICAgICAgICAgICB0cmFuc2l0aW9uQmV0d2VlblJvdXRlczogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hY3Rpb25zQ29sb3JDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKCkge1xuICAgICAgICByZXR1cm4gbmV3IEN1cGVydGlub05hdmlnYXRpb25CYXIoe1xuICAgICAgICAgICAgcHJldmlvdXNQYWdlVGl0bGU6IFwi6L+U5ZueXCIsXG4gICAgICAgICAgICBtaWRkbGU6IG5ldyBUZXh0KFwiQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhclwiKSxcbiAgICAgICAgICAgIHRyYWlsaW5nOiBuZXcgQ3VwZXJ0aW5vQnV0dG9uKHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgwLjApLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgn6K6+572uJyksXG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGFjdGlvbnNGb3JlZ3JvdW5kQ29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgdHJhbnNpdGlvbkJldHdlZW5Sb3V0ZXM6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgQ3VwZXJ0aW5vUGFnZVNjYWZmb2xkKHtcbiAgICAgICAgICAgIG5hdmlnYXRpb25CYXI6IG5ldyBDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKHtcbiAgICAgICAgICAgICAgICBtaWRkbGU6IG5ldyBUZXh0KFwiQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhclwiKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZ3JlZW4vKlsxMDBdKi8sXG4gICAgICAgICAgICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5pyA566A5Y2V55qEQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhclwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm9ybWFsQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJsZWFkaW5n5bim5pyJ6K+05piO55qEQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhclwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlTGVhZGluZ0N1cGVydGlub05hdmlnYXRpb25CYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5bim5pyJ5Y+z5L6n5oyJ6ZKu55qEQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhclwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhaWxpbmdDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIuW4puaciei+ueahhueahEN1cGVydGlub05hdmlnYXRpb25CYXJcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JvcmRlckN1cGVydGlub05hdmlnYXRpb25CYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5bim5pyJ6IOM5pmv6Imy55qEQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhclwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFja2dyb3VuZEN1cGVydGlub05hdmlnYXRpb25CYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5bim5pyJcGFkZGluZ+eahEN1cGVydGlub05hdmlnYXRpb25CYXJcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhZGRpbmdDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIuS/ruaUueaMiemSruminOiJsueahOeahEN1cGVydGlub05hdmlnYXRpb25CYXJcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbnNDb2xvckN1cGVydGlub05hdmlnYXRpb25CYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIEN1cGVydGlub1BhZ2VTY2FmZm9sZCxcbiAgICBDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyLFxuICAgIFNjYWZmb2xkLFxuICAgIFRleHQsXG4gICAgTGlzdFZpZXcsXG4gICAgTGlzdFRpbGUsXG4gICAgQ29sb3IsXG4gICAgQ29sb3JzLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTsgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7IHJldHVybiBuZXcgUGFnZUV4YW1wbGVDdXBlcnRpbm9QYWdlU2NhZmZvbGUoKTsgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUN1cGVydGlub1BhZ2VTY2FmZm9sZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvciA9IENvbG9ycy53aGl0ZTtcbiAgICB9XG5cbiAgICBfY2hhbmdlQ29sb3JMaXN0VGlsZSh0ZXh0LCBjb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCh0ZXh0KSxcbiAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IEN1cGVydGlub1BhZ2VTY2FmZm9sZCh7XG4gICAgICAgICAgICBuYXZpZ2F0aW9uQmFyOiBuZXcgQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcih7XG4gICAgICAgICAgICAgICAgbWlkZGxlOiBuZXcgVGV4dChcIkN1cGVydGlub1BhZ2VTY2FmZm9sZFwiKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBuZXcgQ29sb3IoMHgwMDAwMDAwMCksXG4gICAgICAgICAgICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUNvbG9yTGlzdFRpbGUoXCLog4zmma/popzoibLvvJrnmb1cIiwgQ29sb3JzLndoaXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUNvbG9yTGlzdFRpbGUoXCLog4zmma/popzoibLvvJrpu4RcIiwgQ29sb3JzLnllbGxvdy8qWzIwMF0qLyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VDb2xvckxpc3RUaWxlKFwi6IOM5pmv6aKc6Imy77ya57u/XCIsIENvbG9ycy5ncmVlbi8qWzIwMF0qLyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VDb2xvckxpc3RUaWxlKFwi6IOM5pmv6aKc6Imy77ya6JOdXCIsIENvbG9ycy5ibHVlLypbMjAwXSovKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUNvbG9yTGlzdFRpbGUoXCLog4zmma/popzoibLvvJrnsolcIiwgQ29sb3JzLnBpbmsvKlsyMDBdKi8pLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLl9iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsIlxuXG5sZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgU2NhZmZvbGQsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgTGlzdFZpZXcsXG4gICAgTGlzdFRpbGUsXG4gICAgQ3VwZXJ0aW5vU2xpZGVyLFxuICAgIFRleHRTdHlsZSxcbiAgICBDb2xvcnMsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcignRXhhbXBsZVdpZGdldCcpOyB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUN1cGVydGlub1NsaWRlcigpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQ3VwZXJ0aW5vU2xpZGVyIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSA1MC4wO1xuICAgICAgICB0aGlzLmZvbnRTaXplID0gMTYuMDtcbiAgICAgICAgdGhpcy5jb2xvcmVkVmFsdWUgPSA1MC4wXG4gICAgICAgIHRoaXMuZm9udFNpemVNYXAgPSB7XG4gICAgICAgICAgICAxMjogXCLlsI9cIixcbiAgICAgICAgICAgIDE2OiBcIuS4rVwiLFxuICAgICAgICAgICAgMjA6IFwi5aSnXCIsXG4gICAgICAgICAgICAyNDogXCLnibnlpKdcIixcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRTdHlsZSA9IG5ldyBUZXh0U3R5bGUoeyBmb250U2l6ZTogdGhpcy5mb250U2l6ZSB9KTtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoJ0N1cGVydGlub1NsaWRlcicpIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi6L+e57ut5ruR5Z2XLCDlvZPliY3lgLzkuLo6IFwiICsgdGhpcy5jdXJyZW50VmFsdWUudG9GaXhlZCgxKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBjdXJyZW50U3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub1NsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMTAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jdXJyZW50VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCLnprvmlaPmu5HlnZcsIOWtl+S9k+Wkp+WwjzogXCIgKyB0aGlzLmZvbnRTaXplTWFwW3RoaXMuZm9udFNpemVdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGN1cnJlbnRTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ3VwZXJ0aW5vU2xpZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogMTIuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMjQuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdmlzaW9uczogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250U2l6ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIuW4puminOiJsua7keWdl1wiLCB7IHN0eWxlOiBjdXJyZW50U3R5bGUgfSkgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDdXBlcnRpbm9TbGlkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg6IDEwMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29sb3JlZFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ29sb3I6IENvbG9ycy5ibHVlLypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJDb2xvcjogQ29sb3JzLmJsdWUvKls4MDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yZWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIExpc3RWaWV3LFxuICAgIExpc3RUaWxlLFxuICAgIFJvdyxcbiAgICBNYWluQXhpc0FsaWdubWVudCxcbiAgICBDdXBlcnRpbm9Td2l0Y2gsXG4gICAgQ29sb3JzLFxuICAgIERyYWdTdGFydEJlaGF2aW9yLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTsgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7IHJldHVybiBuZXcgUGFnZUV4YW1wbGVDdXBlcnRpbm9Td2l0Y2goKTsgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUN1cGVydGlub1N3aXRjaCBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2hvb3NlID0gW2ZhbHNlLCBmYWxzZSwgZmFsc2VdO1xuICAgIH1cblxuICAgIF9vbkNoYW5nZWQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHsgdGl0bGU6IG5ldyBUZXh0KCdDdXBlcnRpbm9Td2l0Y2gnKSB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiQ3VwZXJ0aW9uU3dpdGNo5Z+65pys5L2/55SoXCIpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub1N3aXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbG9yOiBDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmNob29zZVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiB0aGlzLl9vbkNoYW5nZWQoMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub1N3aXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbG9yOiBDb2xvcnMuYmx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuY2hvb3NlWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX29uQ2hhbmdlZCgwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ3VwZXJ0aW5vU3dpdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmNob29zZVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiB0aGlzLl9vbkNoYW5nZWQoMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub1N3aXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbG9yOiBDb2xvcnMueWVsbG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jaG9vc2VbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDogdGhpcy5fb25DaGFuZ2VkKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIkN1cGVydGlvblN3aXRjaOiHquWumuS5ieacqumAieS4reminOiJslwiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VBcm91bmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDdXBlcnRpbm9Td2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVDb2xvcjogQ29sb3JzLmdyZWVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja0NvbG9yOiBDb2xvcnMuZ3JlZW4vKlsxMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmNob29zZVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiB0aGlzLl9vbkNoYW5nZWQoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub1N3aXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbG9yOiBDb2xvcnMuYmx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tDb2xvcjogQ29sb3JzLmJsdWUvKlsxMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmNob29zZVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiB0aGlzLl9vbkNoYW5nZWQoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1cGVydGlub1N3aXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja0NvbG9yOiBDb2xvcnMucmVkLypbMTAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jaG9vc2VbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDogdGhpcy5fb25DaGFuZ2VkKDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDdXBlcnRpbm9Td2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVDb2xvcjogQ29sb3JzLnllbGxvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tDb2xvcjogQ29sb3JzLnllbGxvdy8qWzEwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuY2hvb3NlWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX29uQ2hhbmdlZCgxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJDdXBlcnRpb25Td2l0Y2jmi5bliqjmlrnlvI9cIikgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ3VwZXJ0aW5vU3dpdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuY2hvb3NlWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX29uQ2hhbmdlZCgyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ3VwZXJ0aW5vU3dpdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuY2hvb3NlWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX29uQ2hhbmdlZCgyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ1N0YXJ0QmVoYXZpb3I6IERyYWdTdGFydEJlaGF2aW9yLnN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJsZXQge1xuICAgIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBDb2xvcnMsXG4gICAgQ3VwZXJ0aW5vVGFiQmFyLFxuICAgIEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtLFxuICAgIEljb24sXG4gICAgSWNvbnMsXG4gICAgQ2VudGVyLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBIb21lUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIkhvbWVQYWdlXCIpO1xuICAgIH1cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIkhvbWVQYWdlXCIpLFxuICAgICAgICB9KVxuICAgIH1cbn1cblxuXG5jbGFzcyBJZGVhUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIklkZWFQYWdlXCIpO1xuICAgIH1cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIklkZWFQYWdlXCIpLFxuICAgICAgICB9KVxuICAgIH1cbn1cblxuXG5jbGFzcyBNZXNzYWdlUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIk1lc3NhZ2VQYWdlXCIpO1xuICAgIH1cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIk1lc3NhZ2VQYWdlXCIpLFxuICAgICAgICB9KVxuICAgIH1cbn1cblxuXG5jbGFzcyBNeVBhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJNeVBhZ2VcIik7XG4gICAgfVxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwiTXlQYWdlXCIpLFxuICAgICAgICB9KVxuICAgIH1cbn1cbi8vIElPU+mjjuagvOeahFRhYkJhclxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiRXhhbXBsZVdpZGdldFwiKTtcbiAgICB9XG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVDdXBlcnRpbm9UYWJCYXIoKTtcbiAgICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlQ3VwZXJ0aW5vVGFiQmFyIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSAxO1xuICAgICAgICB0aGlzLl9wYWdlTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9jdXJyZW50UGFnZSA9IG51bGw7XG4gICAgfVxuXG4gICAgX2NoYW5nZUluZGV4KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSB2YWx1ZTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBidWlsZCgpIHtcbiAgICAgICAgdGhpcy5fcGFnZUxpc3QgPSBbXG4gICAgICAgICAgICBuZXcgSG9tZVBhZ2UoKSxcbiAgICAgICAgICAgIG5ldyBJZGVhUGFnZSgpLFxuICAgICAgICAgICAgbmV3IE1lc3NhZ2VQYWdlKCksXG4gICAgICAgICAgICBuZXcgTXlQYWdlKClcbiAgICAgICAgXVxuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRQYWdlID0gdGhpcy5fcGFnZUxpc3RbdGhpcy5fcG9zaXRpb25dO1xuXG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0N1cGVydGlub1RhYkJhcicpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgICAgICBjaGlsZDogdGhpcy5fY3VycmVudFBhZ2UsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvdHRvbU5hdmlnYXRpb25CYXI6IG5ldyBDdXBlcnRpbm9UYWJCYXIoe1xuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBCb3R0b21OYXZpZ2F0aW9uQmFySXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihJY29ucy5hc3NpZ25tZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIummlumhtVwiKVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKEljb25zLmFsbF9pbmNsdXNpdmUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5oOz5rOVXCIpXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvbkJhckl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMuYWRkX2FsZXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIumAmuefpVwiKVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKEljb25zLnBlcm1faWRlbnRpdHkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5oiR55qEXCIpXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgb25UYXA6IHRoaXMuX2NoYW5nZUluZGV4LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgY3VycmVudEluZGV4OiB0aGlzLl9wb3NpdGlvbixcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICAgICAgYWN0aXZlQ29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgaW5hY3RpdmVDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRXhhbXBsZVdpZGdldCxcbn07IiwiXG5cbmxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBDdXBlcnRpbm9UYWJTY2FmZm9sZCxcbiAgICBCb3R0b21OYXZpZ2F0aW9uQmFySXRlbSxcbiAgICBDdXBlcnRpbm9UYWJCYXIsXG4gICAgQ3VwZXJ0aW5vUGFnZVNjYWZmb2xkLFxuICAgIEN1cGVydGlub05hdmlnYXRpb25CYXIsXG4gICAgVGV4dCxcbiAgICBJY29uLFxuICAgIEljb25zLFxuICAgIFNjYWZmb2xkLFxuICAgIENvbG9ycyxcbiAgICBDZW50ZXIsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcignRXhhbXBsZVdpZGdldCcpOyB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUN1cGVydGlub1RhYlNjYWZmb2xkKCk7IH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVDdXBlcnRpbm9UYWJTY2FmZm9sZCBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IEN1cGVydGlub1RhYlNjYWZmb2xkKHtcbiAgICAgICAgICAgIHRhYkNvdW50OiAzLFxuICAgICAgICAgICAgdGFiQmFyOiBuZXcgQ3VwZXJ0aW5vVGFiQmFyKHtcbiAgICAgICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvbkJhckl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMuaG9tZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCLkuLvpobVcIiksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvbkJhckl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMuZmF2b3JpdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5YWz5rOoXCIpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKEljb25zLmJvb2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5oiR55qEXCIpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRhYkJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0LCBpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAwKSByZXR1cm4gbmV3IEN1cGVydGlub1BhZ2VTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25CYXI6IG5ldyBDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyKHsgbWlkZGxlOiBuZXcgVGV4dChcIuS4u+mhtVwiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5ibHVlLypbMjAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogbmV3IENlbnRlcih7IGNoaWxkOiBuZXcgVGV4dChcIuS4u+mhtVwiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT0gMSkgcmV0dXJuIG5ldyBDdXBlcnRpbm9QYWdlU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uQmFyOiBuZXcgQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcih7IG1pZGRsZTogbmV3IFRleHQoXCLlhbPms6hcIikgfSksXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMucmVkLypbMjAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogbmV3IENlbnRlcih7IGNoaWxkOiBuZXcgVGV4dChcIuWFs+azqFwiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT0gMikgcmV0dXJuIG5ldyBDdXBlcnRpbm9QYWdlU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uQmFyOiBuZXcgQ3VwZXJ0aW5vTmF2aWdhdGlvbkJhcih7IG1pZGRsZTogbmV3IFRleHQoXCLmiJHnmoRcIikgfSksXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZ3JlZW4vKlsyMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBuZXcgQ2VudGVyKHsgY2hpbGQ6IG5ldyBUZXh0KFwi5oiR55qEXCIpIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENlbnRlcixcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlQ3VzdG9tTXVsdGlDaGlsZExheW91dCgpO1xuICAgIH1cbn1cbmNsYXNzIFBhZ2VFeGFtcGxlQ3VzdG9tTXVsdGlDaGlsZExheW91dCBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0N1c3RvbU11bHRpQ2hpbGRMYXlvdXQnKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCJNWEZsdXR0ZXLkuK1kZWxlZ2F0ZeacquWunueOsO+8gVwiKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0XG59IiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIEN1c3RvbVNjcm9sbFZpZXcsXG4gICAgQ29udGFpbmVyLFxuICAgIFNsaXZlckxpc3QsXG4gICAgU2xpdmVyR3JpZCxcbiAgICBTbGl2ZXJHcmlkRGVsZWdhdGVXaXRoTWF4Q3Jvc3NBeGlzRXh0ZW50LFxuICAgIEFsaWdubWVudCxcbiAgICBTbGl2ZXJDaGlsZEJ1aWxkZXJEZWxlZ2F0ZSxcbiAgICBDb2xvcixcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuLy8g6YCa55So55qE5ruR5Yqo57uT5p6EXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVDdXN0b21TY3JvbGxWaWV3KCk7XG4gICAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUN1c3RvbVNjcm9sbFZpZXcgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGJ1aWxkKCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdDdXN0b21TY3JvbGxWaWV3JyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBDdXN0b21TY3JvbGxWaWV3KHtcbiAgICAgICAgICAgICAgICBzbGl2ZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTbGl2ZXJHcmlkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWREZWxlZ2F0ZTogbmV3IFNsaXZlckdyaWREZWxlZ2F0ZVdpdGhNYXhDcm9zc0F4aXNFeHRlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heENyb3NzQXhpc0V4dGVudDogMTIwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRBc3BlY3RSYXRpbzogMi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogbmV3IFNsaXZlckNoaWxkQnVpbGRlckRlbGVnYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjb250ZXh0LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3IuZnJvbVJHQk8oaW5kZXggKiA4LCA2MywgMjU1IC0gaW5kZXggKiA4LCAxLjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KGluZGV4LnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZENvdW50OiA4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTbGl2ZXJMaXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBuZXcgU2xpdmVyQ2hpbGRCdWlsZGVyRGVsZWdhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGNvbnRleHQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICs9IDk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogODAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3IuZnJvbVJHQk8oaW5kZXggKiA4LCA2MywgMjU1IC0gaW5kZXggKiA4LCAxLjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KGluZGV4LnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2hpbGRDb3VudDogMjAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRXhhbXBsZVdpZGdldFxufSIsImxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBDb250YWluZXIsXG4gICAgQWxpZ25tZW50LFxuICAgIENvbG9ycyxcbiAgICBMaXN0VmlldyxcbiAgICBEZWNvcmF0ZWRCb3gsXG4gICAgQm94RGVjb3JhdGlvbixcbiAgICBCb3hTaGFwZSxcbiAgICBCb3hTaGFkb3csXG4gICAgUmFkaXVzLFxuICAgIEJvcmRlclJhZGl1cyxcbiAgICBMaXN0VGlsZSxcbiAgICBFZGdlSW5zZXRzLFxuICAgIE9mZnNldCxcbiAgICBCb3JkZXIsXG4gICAgVGV4dFN0eWxlLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG4vLyDoo4XppbDnsbvnu4Tku7ZcbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICAgIH1cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZURlY29yYXRlZEJveCgpO1xuICAgIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVEZWNvcmF0ZWRCb3ggZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICBidWlsZCgpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRGVjb3JhdGVkQm94JyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgn5Z+65pys57G75Z6LRGVjb3JhdGVkQm94JyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgRGVjb3JhdGVkQm94KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlOiBCb3hTaGFwZS5jaXJjbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMuYWxsKDEwKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+WchuinkuefqeW9okRlY29yYXRlZEJveCcpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IERlY29yYXRlZEJveCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDE2LjApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmVlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0RlY29yYXRlZEJveCcse3N0eWxlOiBuZXcgVGV4dFN0eWxlKHtmb250U2l6ZTogMzB9KX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMuYWxsKDEwKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+W4puaciei+ueahhueahERlY29yYXRlZEJveCcpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IERlY29yYXRlZEJveCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmdyZWVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IEJvcmRlci5hbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ0RlY29yYXRlZEJveCcse3N0eWxlOiBuZXcgVGV4dFN0eWxlKHtmb250U2l6ZTogMzB9KX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMuYWxsKDEwKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+W4puaciemYtOW9seeahERlY29yYXRlZEJveCcpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IERlY29yYXRlZEJveCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogQm94U2hhcGUuY2lyY2xlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJveFNoYWRvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibGFjazU0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogbmV3IE9mZnNldCg1LjAsIDUuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmx1clJhZGl1czogNS4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLmFsbCgxMCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEV4YW1wbGVXaWRnZXQsXG59IiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENvbnRhaW5lcixcbiAgICBBbGlnbm1lbnQsXG4gICAgQ29sb3JzLFxuICAgIEJveERlY29yYXRpb24sXG4gICAgUmFkaXVzLFxuICAgIEJvcmRlclJhZGl1cyxcbiAgICBFeHBhbmRlZCxcbiAgICBDb2x1bW4sXG4gICAgQW5pbWF0aW9uQ29udHJvbGxlcixcbiAgICBEZWNvcmF0ZWRCb3hUcmFuc2l0aW9uLFxuICAgIERlY29yYXRpb25Ud2VlbixcbiAgICBEdXJhdGlvbixcbiAgICBCb3hTaGFkb3csXG4gICAgUmFpc2VkQnV0dG9uLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVEZWNvcmF0ZWRCb3hUcmFuc2l0aW9uKCk7XG4gICAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZURlY29yYXRlZEJveFRyYW5zaXRpb24gZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9jb250cm9sbGVyID0gbmV3IEFuaW1hdGlvbkNvbnRyb2xsZXIoe1xuICAgICAgICAgICAgZHVyYXRpb246IG5ldyBEdXJhdGlvbih7IHNlY29uZHM6IDEgfSksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zaGFkb3cgPSB0cnVlO1xuICAgICAgICB0aGlzLl9hbmltYXRpb24gPSBuZXcgRGVjb3JhdGlvblR3ZWVuKHtcbiAgICAgICAgICAgIGJlZ2luOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoMCkpLFxuICAgICAgICAgICAgICAgIGJveFNoYWRvdzpcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJveFNoYWRvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibGFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibHVyUmFkaXVzOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcmVhZFJhZGl1czogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGVuZDogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoMzApKSxcbiAgICAgICAgICAgICAgICBib3hTaGFkb3c6XG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBCb3hTaGFkb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMueWVsbG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdXJSYWRpdXM6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByZWFkUmFkaXVzOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSxcblxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSkuYW5pbWF0ZSh0aGlzLl9jb250cm9sbGVyKTtcbiAgICB9XG5cbiAgICBidWlsZCgpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRGVjb3JhdGVkQm94VHJhbnNpdGlvbicpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IERlY29yYXRlZEJveFRyYW5zaXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiB0aGlzLl9hbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSYWlzZWRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCfmkq3mlL4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xsZXIuZm9yd2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEV4YW1wbGVXaWRnZXQsXG59IiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIFRleHRTdHlsZSxcbiAgICBDb250YWluZXIsXG4gICAgQWxpZ25tZW50LFxuICAgIENvbG9ycyxcbiAgICBMaXN0VmlldyxcbiAgICBMaXN0VGlsZSxcbiAgICBEZWZhdWx0VGV4dFN0eWxlLFxuICAgIFRleHREZWNvcmF0aW9uLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVEZWZhdWx0VGV4dFN0eWxlKCk7XG4gICAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZURlZmF1bHRUZXh0U3R5bGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGJ1aWxkKCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdEZWZhdWx0VGV4dFN0eWxlJyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCfpu5jorqTmlofmnKwnKSwgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBEZWZhdWx0VGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCdUZXh0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCfoh6rlrprkuYlzdHlsZeaWh+acrCcpLCB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IERlZmF1bHRUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogVGV4dERlY29yYXRpb24udW5kZXJsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnVGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnc29mdFdyYXA6IGZhbHNlJyksIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgRGVmYXVsdFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvZnRXcmFwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ1ZlcnkgVmVyeSBWZXJ5IFZlcnkgVmVyeSBWZXJ5IFZlcnkgVmVyeSBMb25nIFRleHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ3NvZnRXcmFwOiB0cnVlJyksIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgRGVmYXVsdFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvZnRXcmFwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnVmVyeSBWZXJ5IFZlcnkgVmVyeSBWZXJ5IFZlcnkgVmVyeSBWZXJ5IExvbmcgVGV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0XG59IiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIFRleHRTdHlsZSxcbiAgICBDb250YWluZXIsXG4gICAgQWxpZ25tZW50LFxuICAgIENvbG9ycyxcbiAgICBMaXN0VmlldyxcbiAgICBMaXN0VGlsZSxcbiAgICBEZWZhdWx0VGV4dFN0eWxlLFxuICAgIFRleHREZWNvcmF0aW9uLFxuICAgIERyb3Bkb3duTWVudUl0ZW0sXG4gICAgRHJvcGRvd25CdXR0b24sXG4gICAgSWNvbixcbiAgICBJY29ucyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlRHJvcGRvd25CdXR0b24oKTtcbiAgICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlRHJvcGRvd25CdXR0b24gZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9kcm9wVmFsdWUgPSAnTWF0aCc7XG4gICAgICAgIHRoaXMuX2Ryb3BTZWxlY3RWYWx1ZSA9ICdNYXRoJztcbiAgICAgICAgdGhpcy5fZHJvcEhpbnRWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Ryb3BJY29uVmFsdWUgPSAnTWF0aCc7XG4gICAgfVxuXG4gICAgX2J1aWxkSXRlbSgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBEcm9wZG93bk1lbnVJdGVtKHsgY2hpbGQ6IG5ldyBUZXh0KCdNYXRoJyksIHZhbHVlOiAnTWF0aCcgfSksXG4gICAgICAgICAgICBuZXcgRHJvcGRvd25NZW51SXRlbSh7IGNoaWxkOiBuZXcgVGV4dCgnRW5nbGlzaCcpLCB2YWx1ZTogJ0VuZ2xpc2gnIH0pLFxuICAgICAgICAgICAgbmV3IERyb3Bkb3duTWVudUl0ZW0oeyBjaGlsZDogbmV3IFRleHQoJ0NoaW5lc2UnKSwgdmFsdWU6ICdDaGluZXNlJyB9KSxcbiAgICAgICAgXVxuICAgIH1cblxuICAgIF9idWlsZENvbW1vbkJ1dHRvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBEcm9wZG93bkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX2Ryb3BWYWx1ZSxcbiAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5fYnVpbGRJdGVtKCksXG4gICAgICAgICAgICAgICAgb25DaGFuZ2VkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcm9wVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2J1aWxkU2VsZWN0SXRlbUJ1dHRvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBEcm9wZG93bkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX2Ryb3BTZWxlY3RWYWx1ZSxcbiAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5fYnVpbGRJdGVtKCksXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtQnVpbGRlcjogKGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KCdNYXRoJywgeyBzdHlsZTogbmV3IFRleHRTdHlsZSh7IGNvbG9yOiBDb2xvcnMucmVkIH0pIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHQoJ0VuZ2xpc2gnLCB7IHN0eWxlOiBuZXcgVGV4dFN0eWxlKHsgY29sb3I6IENvbG9ycy5yZWQgfSkgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dCgnQ2hpbmVzZScsIHsgc3R5bGU6IG5ldyBUZXh0U3R5bGUoeyBjb2xvcjogQ29sb3JzLnJlZCB9KSB9KSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DaGFuZ2VkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcm9wU2VsZWN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2J1aWxkSGludEJ1dHRvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBEcm9wZG93bkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgaGludDogbmV3IFRleHQoJ+ivt+mAieaLqScpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9kcm9wSGludFZhbHVlLFxuICAgICAgICAgICAgICAgIGl0ZW1zOiB0aGlzLl9idWlsZEl0ZW0oKSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BIaW50VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9idWlsZEljb25CdXR0b24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgRHJvcGRvd25CdXR0b24oe1xuICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgICAgICAgICAgaWNvblNpemU6IDI0LFxuICAgICAgICAgICAgICAgIGljb25EaXNhYmxlZENvbG9yOiBDb2xvcnMuZ3JleSxcbiAgICAgICAgICAgICAgICBpY29uRW5hYmxlZENvbG9yOiBDb2xvcnMucmVkLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9kcm9wSWNvblZhbHVlLFxuICAgICAgICAgICAgICAgIGl0ZW1zOiB0aGlzLl9idWlsZEl0ZW0oKSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BJY29uVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdEcm9wZG93bkJ1dHRvbicpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnRHJvcERvd25CdXR0b24nKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRDb21tb25CdXR0b24oKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdEcm9wZG93bkJ1dHRvbi5zZWxlY3RlZEl0ZW1CdWlsZGVyKE1YRmx1dHRlcuS4reaaguS4jeaUr+aMgSknKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRTZWxlY3RJdGVtQnV0dG9uKCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgnRHJvcGRvd25CdXR0b24uaGludCcpIH0pLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZEhpbnRCdXR0b24oKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KCdEcm9wZG93bkJ1dHRvbi5pY29uJykgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkSWNvbkJ1dHRvbigpLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEV4YW1wbGVXaWRnZXQsXG59IiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENvbnRhaW5lcixcbiAgICBBbGlnbm1lbnQsXG4gICAgQ29sb3IsXG4gICAgQ29sdW1uLFxuICAgIFJvdyxcbiAgICBFeHBhbmRlZCxcbiAgICBMaXN0VGlsZSxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlRXhwYW5kZWQoKTtcbiAgICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlRXhwYW5kZWQgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9mbGV4ID0gMDtcbiAgICB9XG5cbiAgICBfcmFuZG9tVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEyOCkgKyAxMjg7XG4gICAgfVxuXG4gICAgX2J1aWxkRmxleENvbnRhaW5lcihmbGV4TnVtKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgZmxleDogZmxleE51bSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9yLmZyb21SR0JPKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5kb21WYWx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5kb21WYWx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5kb21WYWx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICAxLjBcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnZmxleD0nICsgZmxleE51bSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2J1aWxkQ29udGVudChudW0xLG51bTIsbnVtMykge1xuICAgICAgICByZXR1cm4gbmV3IFJvdyh7XG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkRmxleENvbnRhaW5lcihudW0xKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9idWlsZEZsZXhDb250YWluZXIobnVtMiksXG4gICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRGbGV4Q29udGFpbmVyKG51bTMpLFxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBidWlsZCgpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRXhwYW5kZWQnKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTogbmV3IFRleHQoJ0V4cGFuZGVkLmZsZXhbMCwwLDBdJyksfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkQ29udGVudCgwLDAsMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7dGl0bGU6IG5ldyBUZXh0KCdFeHBhbmRlZC5mbGV4WzAsMCwxXScpLH0pLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZENvbnRlbnQoMCwwLDEpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOiBuZXcgVGV4dCgnRXhwYW5kZWQuZmxleFsxLDEsMV0nKSx9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRDb250ZW50KDEsMSwxKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHt0aXRsZTogbmV3IFRleHQoJ0V4cGFuZGVkLmZsZXhbMiwzLDNdJyksfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkQ29udGVudCgyLDMsMyksXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0LFxufSIsIlxuXG5sZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgU2NhZmZvbGQsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgTGlzdFZpZXcsXG4gICAgTGlzdFRpbGUsXG4gICAgRml0dGVkQm94LFxuICAgIENvbnRhaW5lcixcbiAgICBCb3hGaXQsXG4gICAgSW1hZ2UsXG4gICAgQ29sb3JzLFxuICAgIEFsaWdubWVudCxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7IHJldHVybiBuZXcgUGFnZUV4YW1wbGVGaXR0ZWRCb3goKTsgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUZpdHRlZEJveCBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgX3BpY3R1cmUoKSB7XG4gICAgICAgIHJldHVybiBJbWFnZS5hc3NldCgncGVvcGxlL2FsaV9sYW5kc2NhcGUucG5nJywge1xuICAgICAgICAgICAgbXhQYWNrYWdlOiAnZmx1dHRlcl9nYWxsZXJ5X2Fzc2V0cycsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRml0dGVkQm94JyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiZml0OiBCb3hGaXQuY29udGFpblwiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUvKlsyMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgRml0dGVkQm94KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXQ6IEJveEZpdC5jb250YWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiB0aGlzLl9waWN0dXJlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwiZml0OiBCb3hGaXQuY292ZXJcIikgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLypbMjAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEZpdHRlZEJveCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZml0OiBCb3hGaXQuY292ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IHRoaXMuX3BpY3R1cmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJmaXQ6IEJveEZpdC5maWxsXCIpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZS8qWzIwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBGaXR0ZWRCb3goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpdDogQm94Rml0LmZpbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IHRoaXMuX3BpY3R1cmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJmaXQ6IEJveEZpdC5ub25lXCIpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZS8qWzIwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBGaXR0ZWRCb3goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpdDogQm94Rml0Lm5vbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IHRoaXMuX3BpY3R1cmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXJMZWZ0XCIpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmx1ZS8qWzIwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBGaXR0ZWRCb3goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpdDogQm94Rml0LmNvbnRhaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogdGhpcy5fcGljdHVyZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsIlxuXG5sZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgU2NhZmZvbGQsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgTGlzdFZpZXcsXG4gICAgTGlzdFRpbGUsXG4gICAgQnV0dG9uQmFyLFxuICAgIEZsYXRCdXR0b24sXG4gICAgRWRnZUluc2V0cyxcbiAgICBDb2xvcnMsXG4gICAgQ2lyY2xlQm9yZGVyLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUZsYXRCdXR0b24oKTsgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUZsYXRCdXR0b24gZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRmxhdEJ1dHRvbicpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIkZsYXRCdXR0b27nmoTmoLflvI9cIikgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBCdXR0b25CYXIoeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VBcm91bmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwiYnVpbGRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcImJ1aWxkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnllbGxvdy8qWzEwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGbGF0QnV0dG9uKHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcImJ1aWxkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnJlZC8qWzEwMF0qLyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwiYnVpbGRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkQ29sb3I6IENvbG9ycy5ncmV5LypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZFRleHRDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJ1dHRvbkJhcih7IFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCJidWlsZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxhc2hDb2xvcjogQ29sb3JzLmJsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCJidWlsZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy55ZWxsb3cvKlsxMDBdKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuc3ltbWV0cmljKHsgaG9yaXpvbnRhbDogNDAuMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwiYnVpbGRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMueWVsbG93LypbMTAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogbmV3IENpcmNsZUJvcmRlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIExpc3RWaWV3LFxuICAgIExpc3RUaWxlLFxuICAgIEJ1dHRvbkJhcixcbiAgICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgICBJY29uLFxuICAgIEljb25zLFxuICAgIENvbG9ycyxcbiAgICBSb3VuZGVkUmVjdGFuZ2xlQm9yZGVyLFxuICAgIEJvcmRlclJhZGl1cyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7IHJldHVybiBuZXcgUGFnZUV4YW1wbGVGbG9hdGluZ0FjdGlvbkJ1dHRvbigpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlRmxvYXRpbmdBY3Rpb25CdXR0b24gZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRmxvYXRpbmdBY3Rpb25CdXR0b24nKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCLln7rmnKznmoRGbG9hdGluZ0FjdGlvbkJ1dHRvbuagt+W8j1wiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJ1dHRvbkJhcih7IFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlcm9UYWc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVncm91bmRDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZXJvVGFnOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGbG9hdGluZ0FjdGlvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbihJY29ucy5hZGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGFzaENvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlcm9UYWc6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVncm91bmRDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5waW5rLypbMzAwXSovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGV2YXRpb246IDIuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0RWxldmF0aW9uOiA2LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlcm9UYWc6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCJtaW5pLCDplb/mjInmj5DnpLrlkozlhbbku5blvaLnirbnmoRGbG9hdGluZ0FjdGlvbkJ1dHRvblwiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJ1dHRvbkJhcih7IFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlcm9UYWc6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZsb2F0aW5nQWN0aW9uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IFwiRmxvYXRpbmdBY3Rpb25CdXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVyb1RhZzogNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb24oSWNvbnMuYWRkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGU6IG5ldyBSb3VuZGVkUmVjdGFuZ2xlQm9yZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmNpcmN1bGFyKDEyLjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZXJvVGFnOiA3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwiXG5cbmxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBMaXN0VmlldyxcbiAgICBMaXN0VGlsZSxcbiAgICBNYWluQXhpc0FsaWdubWVudCxcbiAgICBGbHV0dGVyTG9nbyxcbiAgICBSb3csXG4gICAgQ29sb3JzLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHsgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUZsdXR0ZXJMb2dvKCk7IH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVGbHV0dGVyTG9nbyBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdGbHV0dGVyTG9nbycpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIkZsdXR0ZXJMb2dvLnNpemVcIikgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmx1dHRlckxvZ28oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmx1dHRlckxvZ28oeyBzaXplOiA0OCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmx1dHRlckxvZ28oeyBzaXplOiA3MiB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIkZsdXR0ZXJMb2dvLmNvbG9yc1wiKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VBcm91bmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGbHV0dGVyTG9nbyh7IHNpemU6IDQ4LCBjb2xvcnM6IENvbG9ycy5hbWJlciB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmx1dHRlckxvZ28oeyBzaXplOiA0OCwgY29sb3JzOiBDb2xvcnMucGluayB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRmx1dHRlckxvZ28oeyBzaXplOiA0OCwgY29sb3JzOiBDb2xvcnMuZ3JlZW4gfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIEV4cGFuZGVkLFxuICAgIENvbnRhaW5lcixcbiAgICBFZGdlSW5zZXRzLFxuICAgIENvbG9ycyxcbiAgICBDb2x1bW4sXG4gICAgRnJhY3Rpb25hbGx5U2l6ZWRCb3gsXG4gICAgQWxpZ25tZW50LFxuICAgIExpc3RUaWxlLFxuICAgIFNsaWRlcixcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7IHJldHVybiBuZXcgUGFnZUV4YW1wbGVGbHV0dGVyTG9nbygpOyB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlRmx1dHRlckxvZ28gZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl93aWR0aEZhY3RvciA9IDAuNTtcbiAgICAgICAgdGhpcy5faGVpZ2h0RmFjdG9yID0gMC4yO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRmx1dHRlckxvZ28nKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgRnJhY3Rpb25hbGx5U2l6ZWRCb3goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aEZhY3RvcjogdGhpcy5fd2lkdGhGYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0RmFjdG9yOiB0aGlzLl9oZWlnaHRGYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoeyBjb2xvcjogQ29sb3JzLmJsdWUgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCLmsLTlubPmlrnlkJHljaDmr5Q6IFwiICsgKHRoaXMuX3dpZHRoRmFjdG9yICogMTAwKS50b0ZpeGVkKDEpICsgXCIlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTbGlkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAwLjAsIG1heDogMS4wLCB2YWx1ZTogdGhpcy5fd2lkdGhGYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93aWR0aEZhY3RvciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwi5Z6C55u05pa55ZCR5Y2g5q+UOiBcIiArICh0aGlzLl9oZWlnaHRGYWN0b3IgKiAxMDApLnRvRml4ZWQoMSkgKyBcIiVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46IDAuMCwgbWF4OiAxLjAsIHZhbHVlOiB0aGlzLl9oZWlnaHRGYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWlnaHRGYWN0b3IgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENvbnRhaW5lcixcbiAgICBBbGlnbm1lbnQsXG4gICAgQ29sb3JzLFxuICAgIENvbHVtbixcbiAgICBSb3csXG4gICAgRXhwYW5kZWQsXG4gICAgTGlzdFRpbGUsXG4gICAgR2VzdHVyZURldGVjdG9yLFxuICAgIENlbnRlcixcbiAgICBMaXN0VmlldyxcbiAgICBUZXh0U3R5bGUsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbi8vIOaJi+WKv+ivhuWIq+e7hOS7tlxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlR2VzdHVyZURldGVjdG9yKCk7XG4gICAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUdlc3R1cmVEZXRlY3RvciBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2luZm9Db21tb24gPSAnaWRsZSc7XG4gICAgICAgIHRoaXMuX2luZm9PZmZzZXQgPSAnaWRsZSc7XG4gICAgfVxuXG4gICAgX2J1aWxkQ29tbW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IEdlc3R1cmVEZXRlY3Rvcih7XG4gICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmZvQ29tbW9uID0gJ29uVGFwJztcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX2luZm9Db21tb24pO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgb25Mb25nUHJlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5mb0NvbW1vbiA9ICdvbkxvbmdQcmVzcyc7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9pbmZvQ29tbW9uKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAsXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5vcmFuZ2UsXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRoaXMuX2luZm9Db21tb24sIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoeyBmb250U2l6ZTogMjAsIGNvbG9yOiBDb2xvcnMud2hpdGUgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfb25UYXBVcChkZXRhaWxzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRldGFpbHMpO1xuICAgICAgICBjb25zb2xlLmxvZyhkZXRhaWxzLmxvY2FsUG9zaXRpb24pO1xuICAgICAgICBjb25zb2xlLmxvZyhkZXRhaWxzLmdsb2JhbFBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2luZm9PZmZzZXQgPSAnb25UYXBVcFxcbicrZGV0YWlscy5sb2NhbFBvc2l0aW9uKydcXG4nK2RldGFpbHMuZ2xvYmFsUG9zaXRpb247XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgX2J1aWxkT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gbmV3IEdlc3R1cmVEZXRlY3Rvcih7XG4gICAgICAgICAgICBvblRhcFVwOiB0aGlzLl9vblRhcFVwLmJpbmQodGhpcyksXG4gICAgICAgICAgICAvLyBvblRhcERvd246IGZ1bmN0aW9uKGRldGFpbHMpIHtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLl9pbmZvT2Zmc2V0ID0gJ29uVGFwRG93blxcbicrZGV0YWlscy5sb2NhbFBvc2l0aW9uKydcXG4nK2RldGFpbHMuZ2xvYmFsUG9zaXRpb247XG4gICAgICAgICAgICAvLyAgICAgfSlcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhkZXRhaWxzLmxvY2FsUG9zaXRpb24pO1xuICAgICAgICAgICAgLy8gfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLm9yYW5nZSxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQodGhpcy5faW5mb09mZnNldCwge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7Zm9udFNpemU6IDIwLCBjb2xvcjogQ29sb3JzLndoaXRlfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0dlc3R1cmVEZXRlY3RvcicpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn54K55Ye76ZW/5oyJ6K+V6K+V77yfJykgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkQ29tbW9uKCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn5o2i5Liq5L2N572u6K+V6K+V77yfJykgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkT2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRXhhbXBsZVdpZGdldCxcbn07IiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENlbnRlcixcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuLy8g5Y+v5rua5Yqo55qEMkTmlbDnu4Tnu4Tku7ZcbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICAgIH1cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUdyaWRWaWV3KCk7XG4gICAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUdyaWRWaWV3IGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0dyaWRWaWV3JyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgn5YaZ5Yiw5Y2K6Lev5Y+R546wTVhGbHV0dGVy5Lit5pqC5pyq5a6e546w6K+l57uE5Lu2772eJyksXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRXhhbXBsZVdpZGdldCxcbn0iLCJsZXQge1xuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBDb250YWluZXIsXG4gICAgQWxpZ25tZW50LFxuICAgIExpc3RUaWxlLFxuICAgIEdlc3R1cmVEZXRlY3RvcixcbiAgICBMaXN0VmlldyxcbiAgICBIZXJvLFxuICAgIEltYWdlLFxuICAgIE5hdmlnYXRvcixcbiAgICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuLy8g5Yqo55S76aG16Z2i5YiH5o2i57uE5Lu2XG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0V4YW1wbGVXaWRnZXQnKTtcbiAgICB9XG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVIZXJvKCk7XG4gICAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUhlcm8gZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIHZhciBoZXJvID0gbmV3IEhlcm8oe1xuICAgICAgICAgICAgdGFnOiAnaGVybycsXG4gICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgY2hpbGQ6IEltYWdlLmFzc2V0KCdwZW9wbGUvYWxpX2xhbmRzY2FwZS5wbmcnLCB7XG4gICAgICAgICAgICAgICAgICAgIG14UGFja2FnZTogJ2ZsdXR0ZXJfZ2FsbGVyeV9hc3NldHMnLFxuICAgICAgICAgICAgICAgICAgICBmaXQ6IEJveEZpdC5jb3ZlcixcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNTBcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0hlcm8nKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe3RpdGxlOiBuZXcgVGV4dCgn54K55Ye75LiL5pa55Zu+54mH6K+V6K+V772eJyl9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEdlc3R1cmVEZXRlY3Rvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfSGVyb0RlbW8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGhlcm8sXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxuY2xhc3MgX0hlcm9EZW1vIGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gICAgYnVpbGQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHsgdGl0bGU6IG5ldyBUZXh0KCdIZXJvIE5ldyBQYWdlJykgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBIZXJvKHtcbiAgICAgICAgICAgICAgICAgICAgdGFnOiAnaGVybycsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBJbWFnZS5hc3NldCgncGVvcGxlL2FsaV9sYW5kc2NhcGUucG5nJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXhQYWNrYWdlOiAnZmx1dHRlcl9nYWxsZXJ5X2Fzc2V0cycsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXQ6IEJveEZpdC5jb3ZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUwXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0LFxufSIsImxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENvbnRhaW5lcixcbiAgICBBbGlnbm1lbnQsXG4gICAgTGlzdFRpbGUsXG4gICAgR2VzdHVyZURldGVjdG9yLFxuICAgIExpc3RWaWV3LFxuICAgIEhlcm8sXG4gICAgSW1hZ2UsXG4gICAgTmF2aWdhdG9yLFxuICAgIE1hdGVyaWFsUGFnZVJvdXRlLFxuICAgIEljb25CdXR0b24sXG4gICAgSWNvbixcbiAgICBJY29ucyxcbiAgICBDb2xvcnMsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbi8vIOaMiemSrue7hOS7tlxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gICAgfVxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlSWNvbkJ1dHRvbigpO1xuICAgIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVJY29uQnV0dG9uIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHsgdGl0bGU6IG5ldyBUZXh0KCdJY29uQnV0dG9uJykgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn5pmu6YCa5Zu+5qCH5oyJ6ZKuJykgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBJY29uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKEljb25zLnBlcnNvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogMzAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLnJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dCgn6ZW/5oyJ5pi+56S65o+Q56S6IOS4lOacieminOiJsuWPmOWMlicpIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAn6L+Z5piv5LiA5Liq5Zu+5qCH5oyJ6ZKuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKEljb25zLnBlcnNvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogMzAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmdyZWVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0Q29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxhc2hDb2xvcjogQ29sb3JzLm9yYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVDb2xvcjogQ29sb3JzLmdyZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEV4YW1wbGVXaWRnZXQsXG59IiwibGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIENvbnRhaW5lcixcbiAgICBMaXN0VGlsZSxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBDb2xvcnMsXG4gICAgTGlzdFZpZXcsXG4gICAgSW1hZ2UsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICAgIH1cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUltYWdlKCk7XG4gICAgfVxufVxuY2xhc3MgUGFnZUV4YW1wbGVJbWFnZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiUGFnZUV4YW1wbGVJbWFnZVwiKTtcbiAgICB9XG5cbiAgICBnZW5JbWFnZVVJKGJveEZpdE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdCb3hGaXQuJyArIGJveEZpdE5hbWUsKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNTAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMwMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLm9yYW5nZSxcbiAgICAgICAgICAgICAgICBjaGlsZDogSW1hZ2UuYXNzZXQoJ3Blb3BsZS9hbGlfbGFuZHNjYXBlLnBuZycsIHtcbiAgICAgICAgICAgICAgICAgICAgbXhQYWNrYWdlOiAnZmx1dHRlcl9nYWxsZXJ5X2Fzc2V0cycsXG4gICAgICAgICAgICAgICAgICAgIGZpdDogQm94Rml0W2JveEZpdE5hbWVdLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfVxuXG5cbiAgICBidWlsZCgpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnSW1hZ2UnKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCfliqDovb3nvZHnu5zlm77niYcnLCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBJbWFnZS5uZXR3b3JrKCdodHRwczovL2Nkbi5waXhhYmF5LmNvbS9waG90by8yMDE1LzEwLzMwLzIwLzEzL3N1bnJpc2UtMTAxNDcxMl85NjBfNzIwLmpwZycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpdDogQm94Rml0LmNvdmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNTBcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ+WKoOi9veacrOWcsOWbvueJhycsKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIEltYWdlLmFzc2V0KCdwZW9wbGUvYWxpX2xhbmRzY2FwZS5wbmcnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBteFBhY2thZ2U6ICdmbHV0dGVyX2dhbGxlcnlfYXNzZXRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpdDogQm94Rml0LmNvdmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNTBcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2VuSW1hZ2VVSShcImNvbnRhaW5cIiksXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2VuSW1hZ2VVSShcImZpbGxcIiksXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2VuSW1hZ2VVSShcImZpdEhlaWdodFwiKSxcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5nZW5JbWFnZVVJKFwiZml0V2lkdGhcIiksXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2VuSW1hZ2VVSShcInNjYWxlRG93blwiKSxcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5nZW5JbWFnZVVJKFwibm9uZVwiKSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0LFxufTtcbiIsImxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBDb250YWluZXIsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgQ29sb3JzLFxuICAgIEluZGV4ZWRTdGFjayxcbiAgICBDZW50ZXIsXG4gICAgSWNvbixcbiAgICBJY29ucyxcbiAgICBBbGlnbm1lbnQsXG4gICAgUm93LFxuICAgIEljb25CdXR0b24sXG4gICAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gICAgQ29sdW1uLFxuICAgIFdyYXAsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICAgIH1cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUluZGV4ZWRTdGFjaygpO1xuICAgIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVJbmRleGVkU3RhY2sgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignSW5kZXhlZFN0YWNrJyk7XG4gICAgICAgIHRoaXMuX2luZGV4ID0gMTtcbiAgICB9XG5cbiAgICBnZW5JbmRleGVkU3RhY2soY29udGFpbmVyQ29sb3IsIGljb25OYW1lLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IENlbnRlcih7XG4gICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMwMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzW2NvbnRhaW5lckNvbG9yXSxcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBXcmFwKHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KCdOTy4nICsgaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEljb24oSWNvbnNbaWNvbk5hbWVdKSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdlbkluZGV4ZWRJY29uKGljb25OYW1lLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IEljb25CdXR0b24oe1xuICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnNbaWNvbk5hbWVdKSxcbiAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHsgdGl0bGU6IG5ldyBUZXh0KCdJbmRleGVkU3RhY2snKSB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEluZGV4ZWRTdGFjayh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuSW5kZXhlZFN0YWNrKFwicmVkXCIsIFwic2Nob29sXCIsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbkluZGV4ZWRTdGFjayhcImdyZWVuXCIsIFwicGVyc29uXCIsIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbkluZGV4ZWRTdGFjayhcInllbGxvd1wiLCBcImhvbWVcIiwgMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuSW5kZXhlZEljb24oXCJzY2hvb2xcIiwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuSW5kZXhlZEljb24oXCJwZXJzb25cIiwgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuSW5kZXhlZEljb24oXCJob21lXCIsIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFeGFtcGxlV2lkZ2V0LFxufSIsImxldCB7XG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBTY2FmZm9sZCxcbiAgICBDb250YWluZXIsXG4gICAgQXBwQmFyLFxuICAgIFRleHQsXG4gICAgQ29sb3JzLFxuICAgIFJvdyxcbiAgICBJbnRyaW5zaWNIZWlnaHQsXG4gICAgTGlzdFZpZXcsXG4gICAgTGlzdFRpbGUsXG4gICAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gICAgVGFiQmFyLFxuICAgIFRhYixcbiAgICBUYWJCYXJWaWV3LFxuICAgIERlZmF1bHRUYWJDb250cm9sbGVyLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG4vLyDmoLnmja7lhoXpg6jlrZDmjqfku7bpq5jluqbosIPmlbTpq5jluqZcbi8vIOaAp+iDveaNn+iAl+i+g+WkpyDkuI3mjqjojZDkvb/nlKhcbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICAgIH1cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUludHJpbnNpY0hlaWdodCgpO1xuICAgIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVJbnRyaW5zaWNIZWlnaHQgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignSW50cmluc2ljSGVpZ2h0Jyk7XG4gICAgfVxuXG4gICAgX3dpdGhvdXRJbnRyaW5zaWNIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUm93KHtcbiAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUJldHdlZW4sXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoeyBjb2xvcjogQ29sb3JzLmJsdWUsIHdpZHRoOiAxMDAgfSksXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7IGNvbG9yOiBDb2xvcnMucmVkLCB3aWR0aDogNTAsIGhlaWdodDogMTAwIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoeyBjb2xvcjogQ29sb3JzLmdyZWVuLCB3aWR0aDogMTAwIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3dpdGhJbnRyaW5zaWNIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoJ+WPquacieS4remXtOeahENvbnRhaW5lcuiuvue9ruS6hkhlaWdodOWxnuaAp34nKSB9KSxcbiAgICAgICAgICAgICAgICBuZXcgSW50cmluc2ljSGVpZ2h0KHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQmV0d2VlbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7IGNvbG9yOiBDb2xvcnMuYmx1ZSwgd2lkdGg6IDEwMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHsgY29sb3I6IENvbG9ycy5yZWQsIHdpZHRoOiA1MCwgaGVpZ2h0OiAxMDAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7IGNvbG9yOiBDb2xvcnMuZ3JlZW4sIHdpZHRoOiAxMDAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgRGVmYXVsdFRhYkNvbnRyb2xsZXIoe1xuICAgICAgICAgICAgbGVuZ3RoOiAyLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdJbnRyaW5zaWNIZWlnaHQnKSxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBuZXcgVGFiQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRhYih7IHRleHQ6IFwi5pyq5L2/55SoSW50cmluc2ljSGVpZ2h0XCIgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRhYih7IHRleHQ6IFwi5L2/55SoSW50cmluc2ljSGVpZ2h0XCIgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBib2R5OiBuZXcgVGFiQmFyVmlldyh7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93aXRob3V0SW50cmluc2ljSGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93aXRoSW50cmluc2ljSGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRXhhbXBsZVdpZGdldCxcbn0iLCJsZXQge1xuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgU2NhZmZvbGQsXG4gIENvbnRhaW5lcixcbiAgQXBwQmFyLFxuICBUZXh0LFxuICBDb2xvcnMsXG4gIFJvdyxcbiAgSW50cmluc2ljSGVpZ2h0LFxuICBMaXN0VmlldyxcbiAgTGlzdFRpbGUsXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUYWJCYXIsXG4gIFRhYixcbiAgVGFiQmFyVmlldyxcbiAgRGVmYXVsdFRhYkNvbnRyb2xsZXIsXG4gIEludHJpbnNpY1dpZHRoLFxuICBDb2x1bW4sXG4gIENlbnRlcixcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuLy8g55u45q+USW50cmluc2ljSGVpZ2h05aSa5LqG5Lik5Y+C5pWwc3RlcEhlaWdodOOAgXN0ZXBXaWR0aFxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiRXhhbXBsZVdpZGdldFwiKTtcbiAgfVxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlSW50cmluc2ljV2lkdGgoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUludHJpbnNpY1dpZHRoIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJJbnRyaW5zaWNXaWR0aFwiKTtcbiAgfVxuXG4gIF93aXRoV2lkdGhIZWlnaHQoX3N0ZXBIZWlnaHQsX3N0ZXBXaWR0aCkge1xuICAgICAgcmV0dXJuIG5ldyBDb2x1bW4oe1xuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQoXCJzdGVwV2lkdGg6XCIrX3N0ZXBXaWR0aCtcIlxcbnN0ZXBIZWlnaHQ6XCIrX3N0ZXBIZWlnaHQpIH0pLFxuICAgICAgICAgIG5ldyBJbnRyaW5zaWNXaWR0aCh7XG4gICAgICAgICAgICBzdGVwSGVpZ2h0OiBfc3RlcEhlaWdodCxcbiAgICAgICAgICAgIHN0ZXBXaWR0aDogX3N0ZXBXaWR0aCxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHsgY29sb3I6IENvbG9ycy5ibHVlLCBoZWlnaHQ6IDEwMCB9KSxcbiAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHsgY29sb3I6IENvbG9ycy5yZWQsIGhlaWdodDogMTAwLCB3aWR0aDogMTUwIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoeyBjb2xvcjogQ29sb3JzLnllbGxvdywgaGVpZ2h0OiAyNTAgfSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgRGVmYXVsdFRhYkNvbnRyb2xsZXIoe1xuICAgICAgICBsZW5ndGg6IDIsXG4gICAgICAgIGNoaWxkOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJDb250YWluZXJcIiksXG4gICAgICAgICAgICAgICAgYm90dG9tOiBuZXcgVGFiQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGFiczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRhYih7IHRleHQ6IFwiTm90TnVsbFwiIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRhYih7IHRleHQ6IFwiTnVsbFwiIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBib2R5OiBuZXcgVGFiQmFyVmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2l0aFdpZHRoSGVpZ2h0KDQ1MCwzMDApLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93aXRoV2lkdGhIZWlnaHQobnVsbCxudWxsKSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG59XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJcblxubGV0IHtcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIExpc3RWaWV3LFxuICAgIExpbWl0ZWRCb3gsXG4gICAgQ29udGFpbmVyLFxuICAgIENvbG9ycyxcbiAgICBDZW50ZXIsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICAgIH1cblxuICAgIGNyZWF0ZVN0YXRlKCkgeyByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlRmxvYXRpbmdBY3Rpb25CdXR0b24oKTsgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUZsb2F0aW5nQWN0aW9uQnV0dG9uIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBfY29sb3JmdWxDb250YWluZXJzKCkge1xuICAgICAgICBsZXQgY29sb3JzID0gW1xuICAgICAgICAgICAgQ29sb3JzLmJsdWUvKlszMDBdKi8sXG4gICAgICAgICAgICBDb2xvcnMucGluay8qWzMwMF0qLyxcbiAgICAgICAgICAgIENvbG9ycy5vcmFuZ2UvKlszMDBdKi8sXG4gICAgICAgICAgICBDb2xvcnMuZ3JlZW4vKlszMDBdKi8sXG4gICAgICAgICAgICBDb2xvcnMucHVycGxlLypbMzAwXSovLFxuICAgICAgICAgICAgQ29sb3JzLmdyZXkvKlszMDBdKi8sXG4gICAgICAgIF07XG4gICAgICAgIGxldCBsaXN0ID0gW107XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCAxMTsgaSArKykge1xuICAgICAgICAgICAgdmFyIG1heEhlaWdodCA9IDEwMCArIGkgKiAxMDtcbiAgICAgICAgICAgIGxpc3QucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgTGltaXRlZEJveCh7XG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzW2kgJSA2XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCJtYXhIZWlnaHQ6IFwiICsgbWF4SGVpZ2h0LnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0Zsb2F0aW5nQWN0aW9uQnV0dG9uJyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2NvbG9yZnVsQ29udGFpbmVycygpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwibGV0IHtcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIFNjYWZmb2xkLFxuICBBcHBCYXIsXG4gIFRleHQsXG4gIExpc3RCb2R5LFxuICBDb250YWluZXIsXG4gIENlbnRlcixcbiAgQXhpcyxcbiAgQ29sb3JzLFxuICBTaW5nbGVDaGlsZFNjcm9sbFZpZXcsXG4gIERlZmF1bHRUYWJDb250cm9sbGVyLFxuICBUYWJCYXIsXG4gIFRhYixcbiAgVGFiQmFyVmlldyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiRXhhbXBsZVdpZGdldFwiKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVMaXN0Qm9keSgpO1xuICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlTGlzdEJvZHkgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgX3RoZUNvbnRhaW5lcihjb2xvciwgdGV4dCkge1xuICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgIGhlaWdodDogNjAuMCxcbiAgICAgIHdpZHRoOiA2MC4wLFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoe1xuICAgICAgICBjaGlsZDogbmV3IFRleHQodGV4dCksXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIF9jb250YWluZXJMaXN0KCkge1xuICAgIGxldCBjb2xvcnMgPSBbXG4gICAgICAgIENvbG9ycy5ibHVlLypbMzAwXSovLFxuICAgICAgICBDb2xvcnMucGluay8qWzMwMF0qLyxcbiAgICAgICAgQ29sb3JzLm9yYW5nZS8qWzMwMF0qLyxcbiAgICAgICAgQ29sb3JzLmdyZWVuLypbMzAwXSovLFxuICAgICAgICBDb2xvcnMucHVycGxlLypbMzAwXSovLFxuICAgICAgICBDb2xvcnMuZ3JleS8qWzMwMF0qLyxcbiAgICBdO1xuICAgIGxldCBsaXN0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDMwOyBpKyspIHtcbiAgICAgIGxpc3RzLnB1c2godGhpcy5fdGhlQ29udGFpbmVyKGNvbG9yc1tpICUgNl0sIGkudG9TdHJpbmcoKSkpO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdHM7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBEZWZhdWx0VGFiQ29udHJvbGxlcih7XG4gICAgICBsZW5ndGg6IDIsXG4gICAgICBjaGlsZDogbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJMaXN0Qm9keVwiKSxcbiAgICAgICAgICBib3R0b206IG5ldyBUYWJCYXIoe1xuICAgICAgICAgICAgdGFiczogW1xuICAgICAgICAgICAgICBuZXcgVGFiKHsgdGV4dDogXCJBeGlzLnZlcnRpY2FsXCIgfSksXG4gICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiBcIkF4aXMuaG9yaXpvbnRhbFwiIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHk6IG5ldyBUYWJCYXJWaWV3KHtcbiAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgbmV3IFNpbmdsZUNoaWxkU2Nyb2xsVmlldyh7XG4gICAgICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogQXhpcy52ZXJ0aWNhbCxcbiAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBMaXN0Qm9keSh7XG4gICAgICAgICAgICAgICAgbWFpbkF4aXM6IEF4aXMudmVydGljYWwsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2NvbnRhaW5lckxpc3QoKSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBTaW5nbGVDaGlsZFNjcm9sbFZpZXcoe1xuICAgICAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IEF4aXMuaG9yaXpvbnRhbCxcbiAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBMaXN0Qm9keSh7XG4gICAgICAgICAgICAgICAgbWFpbkF4aXM6IEF4aXMuaG9yaXpvbnRhbCxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fY29udGFpbmVyTGlzdCgpLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwibGV0IHtcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIFNjYWZmb2xkLFxuICBBcHBCYXIsXG4gIFRleHQsXG4gIExpc3RWaWV3LFxuICBMaXN0VGlsZSxcbiAgQ29udGFpbmVyLFxuICBDb2xvcnMsXG4gIENpcmNsZUF2YXRhcixcbiAgSWNvbixcbiAgSWNvbnMsXG4gIEljb25CdXR0b24sXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIkV4YW1wbGVXaWRnZXRcIik7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlTGlzdFRpbGUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZUxpc3RUaWxlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zZWxlY3RlZCA9IGZhbHNlO1xuICB9XG5cbiAgX2RpdmlkZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgaGVpZ2h0OiAxLjAsXG4gICAgICBjb2xvcjogQ29sb3JzLmdyZXkvKls0MDBdKi8sXG4gICAgfSk7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJMaXN0VGlsZVwiKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5Z+65pys55qETGlzdFRpbGVcIiksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGhpcy5fZGl2aWRlcigpLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCLluKbmnInmj4/ov7DnmoRMaXN0VGlsZVwiKSxcbiAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgVGV4dChcIui/meS4quS4gOadoeefreaPj+i/sFwiKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0aGlzLl9kaXZpZGVyKCksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIuS4ieihjOW4puacieaPj+i/sOeahExpc3RUaWxlXCIpLFxuICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICBcIui/meS4quS4gOadoemVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+mVv+aPj+i/sFwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNUaHJlZUxpbmU6IHRydWUsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGhpcy5fZGl2aWRlcigpLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCLkuInooYzntKflh5HnmoTnmoRMaXN0VGlsZVwiKSxcbiAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgVGV4dChcbiAgICAgICAgICAgICAgXCLov5nkuKrkuIDmnaHplb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/plb/mj4/ov7BcIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzVGhyZWVMaW5lOiB0cnVlLFxuICAgICAgICAgICAgZGVuc2U6IHRydWUsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGhpcy5fZGl2aWRlcigpLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCLluKbmnInlm77moIfnmoRMaXN0VGlsZVwiKSxcbiAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgVGV4dChcIjAwMC0wMDAwLTAwMDBcIiksXG4gICAgICAgICAgICBsZWFkaW5nOiBuZXcgQ2lyY2xlQXZhdGFyKHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuYmx1ZSxcbiAgICAgICAgICAgICAgZm9yZWdyb3VuZENvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuWktFwiKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihJY29ucy5jYWxsKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHRoaXMuX2RpdmlkZXIoKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5Y+v54K55Ye755qETGlzdFRpbGVcIiksXG4gICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxpc3RUaWxlIHdhcyBUYXBwZWQuXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0aGlzLl9kaXZpZGVyKCksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCh0aGlzLl9zZWxlY3RlZFxuICAgICAgICAgICAgICA/IFwi54K55Ye75bem5L6n5oyJ6ZKu5Y+W5raI6YCJ5LitXCJcbiAgICAgICAgICAgICAgOiBcIuWPr+mVv+aMiemAieS4reeahExpc3RUaWxlXCIpLFxuICAgICAgICAgICAgb25Mb25nUHJlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGVkID09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkID0gIXRoaXMuX3NlbGVjdGVkO1xuICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHNlbGVjdGVkOiB0aGlzLl9zZWxlY3RlZCxcbiAgICAgICAgICAgIGxlYWRpbmc6IHRoaXMuX3NlbGVjdGVkXG4gICAgICAgICAgICAgID8gbmV3IEljb25CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMuY2hlY2tfYm94KSxcbiAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkID0gIXRoaXMuX3NlbGVjdGVkO1xuICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0aGlzLl9kaXZpZGVyKCksXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJsZXQge1xuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgU2NhZmZvbGQsXG4gIEFwcEJhcixcbiAgVGV4dCxcbiAgTGlzdFZpZXcsXG4gIENvbnRhaW5lcixcbiAgQ2VudGVyLFxuICBBeGlzLFxuICBDb2xvcnMsXG4gIERlZmF1bHRUYWJDb250cm9sbGVyLFxuICBUYWJCYXIsXG4gIFRhYixcbiAgVGFiQmFyVmlldyxcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuXG5sZXQgY29sb3JzID0gW1xuICBDb2xvcnMuYmx1ZS8qWzMwMF0qLyxcbiAgQ29sb3JzLnBpbmsvKlszMDBdKi8sXG4gIENvbG9ycy5vcmFuZ2UvKlszMDBdKi8sXG4gIENvbG9ycy5ncmVlbi8qWzMwMF0qLyxcbiAgQ29sb3JzLnB1cnBsZS8qWzMwMF0qLyxcbiAgQ29sb3JzLmdyZXkvKlszMDBdKi8sXG4gIENvbG9ycy55ZWxsb3cvKlszMDBdKi8sXG4gIENvbG9ycy5yZWQvKlszMDBdKi8sXG4gIENvbG9ycy5jeWFuLypbMzAwXSovLFxuXTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiRXhhbXBsZVdpZGdldFwiKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVMaXN0Qm9keSgpO1xuICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlTGlzdEJvZHkgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgX3RoZUNvbnRhaW5lcihjb2xvciwgdGV4dCkge1xuICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgIGhlaWdodDogNjAuMCxcbiAgICAgIHdpZHRoOiA2MC4wLFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoe1xuICAgICAgICBjaGlsZDogbmV3IFRleHQodGV4dCksXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIF9jb250YWluZXJCdWlsZGVyKGNvbnRleHQsIGluZGV4KSB7XG4gICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgaGVpZ2h0OiA2MC4wLFxuICAgICAgd2lkdGg6IDYwLjAsXG4gICAgICBjb2xvcjogY29sb3JzW2luZGV4ICUgOV0sXG4gICAgICBjaGlsZDogbmV3IENlbnRlcih7XG4gICAgICAgIGNoaWxkOiBuZXcgVGV4dChpbmRleC50b1N0cmluZygpKSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgX3NwYXJhdGVkQnVpbGRlcihjb250ZXh0LCBpbmRleCkge1xuICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgIHdpZGdldDogMi4wLFxuICAgICAgaGVpZ2h0OiAyLjAsXG4gICAgICBjb2xvcjogaW5kZXggJSAyID09IDAgPyBDb2xvcnMuYmxhY2s1NCA6IENvbG9ycy5ibGFjayxcbiAgICB9KTtcbiAgfVxuXG4gIF9jb250YWluZXJMaXN0KCkge1xuICAgIGxldCBsaXN0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzE7IGkrKykge1xuICAgICAgbGlzdHMucHVzaCh0aGlzLl90aGVDb250YWluZXIoY29sb3JzW2kgJSA5XSwgaS50b1N0cmluZygpKSk7XG4gICAgfVxuICAgIHJldHVybiBsaXN0cztcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IERlZmF1bHRUYWJDb250cm9sbGVyKHtcbiAgICAgIGxlbmd0aDogMyxcbiAgICAgIGNoaWxkOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkxpc3RCb2R5XCIpLFxuICAgICAgICAgIGJvdHRvbTogbmV3IFRhYkJhcih7XG4gICAgICAgICAgICB0YWJzOiBbXG4gICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiBcIuWeguebtOaWueWQkVwiIH0pLFxuICAgICAgICAgICAgICBuZXcgVGFiKHsgdGV4dDogXCLmsLTlubPmlrnlkJFcIiB9KSxcbiAgICAgICAgICAgICAgbmV3IFRhYih7IHRleHQ6IFwiYnVpbGRlclwiIH0pLFxuICAgICAgICAgICAgICAvLyBuZXcgVGFiKHsgdGV4dDogXCJzZXBhcmF0ZWRcIiB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgICBib2R5OiBuZXcgVGFiQmFyVmlldyh7XG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLl9jb250YWluZXJMaXN0KCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBMaXN0Vmlldyh7XG4gICAgICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogQXhpcy5ob3Jpem9udGFsLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fY29udGFpbmVyTGlzdCgpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBMaXN0Vmlldy5idWlsZGVyKHtcbiAgICAgICAgICAgICAgaXRlbUNvdW50OiAzMSxcbiAgICAgICAgICAgICAgaXRlbUJ1aWxkZXI6IHRoaXMuX2NvbnRhaW5lckJ1aWxkZXIsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC8vIExpc3RWaWV3LnNlcGFyYXRlZCh7XG4gICAgICAgICAgICAvLyAgIGl0ZW1Db3VudDogMzEsXG4gICAgICAgICAgICAvLyAgIGl0ZW1CdWlsZGVyOiB0aGlzLl9jb250YWluZXJCdWlsZGVyLFxuICAgICAgICAgICAgLy8gICBzZXBhcmF0b3JCdWlsZGVyOiB0aGlzLl9zcGFyYXRlZEJ1aWxkZXIsXG4gICAgICAgICAgICAvLyB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsImxldCB7XG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBTY2FmZm9sZCxcbiAgQXBwQmFyLFxuICBUZXh0LFxuICBDb2xvcnMsXG4gIENlbnRlcixcbiAgTWF0ZXJpYWxBcHAsXG4gIFRoZW1lRGF0YSxcbiAgTGlzdFRpbGUsXG4gIExpc3RWaWV3LFxuICBDb250YWluZXIsXG4gIENvbHVtbixcbiAgQ3Jvc3NBeGlzQWxpZ25tZW50LFxuICBDb2xvcixcbn0gPSByZXF1aXJlKCcuLi8uLi8uLi9qc19mbHV0dGVyLmpzJyk7XG5cbi8vIE1hdGVyaWFs5bqU55So55qE6aG257qn57uE5Lu2IOWMheWQq+i3r+eUseeUn+aIkOWZqOOAgeS4u+mimOivreiogOS4u+mhteetieWxnuaAp1xuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdFeGFtcGxlV2lkZ2V0Jyk7XG4gIH1cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZU1hdGVyaWFsQXBwKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVNYXRlcmlhbEFwcCBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdNYXRlcmlhbEFwcCcpO1xuICB9XG4gIGJ1aWxkKCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoJ01hdGVyaWFsQXBwJykgfSksXG4gICAgICAgIGJvZHk6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAsXG4gICAgICAgICAgICAgIGNvbG9yOiBuZXcgQ29sb3IoMHhGRkM1Q0FFOSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCxcbiAgICAgICAgICAgICAgY29sb3I6IG5ldyBDb2xvcigweEZGNzk4NkNCKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgIGhlaWdodDogMTAwLFxuICAgICAgICAgICAgICBjb2xvcjogbmV3IENvbG9yKDB4RkYzOTQ5QUIpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAsXG4gICAgICAgICAgICAgIGNvbG9yOiBuZXcgQ29sb3IoMHhGRjFBMjM3RSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSxcbiAgICAgIC8vIOS4u+mimOebuOWFs1xuICAgICAgLy8gdGhlbWU6IG5ldyBUaGVtZURhdGEoe1xuICAgICAgLy8gICBwcmltYXJ5Q29sb3I6IENvbG9ycy5vcmFuZ2UsXG4gICAgICAvLyB9KSxcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFeGFtcGxlV2lkZ2V0LFxufTtcbiIsImxldCB7XG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBTY2FmZm9sZCxcbiAgQXBwQmFyLFxuICBUZXh0LFxuICBDb2xvcnMsXG4gIFJvdyxcbiAgTGlzdFZpZXcsXG4gIE1lZGlhUXVlcnksXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbi8vIE1lZGlhUXVlcnnojrflj5blsY/luZXlsLrlr7gg6K6+5aSH5a+G5bqmIOaWh+Wtl+e8qeaUvuavlOS+iyDovrnot53nrYnkv6Hmga9cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIkV4YW1wbGVXaWRnZXRcIik7XG4gIH1cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZU1lZGlhUXVlcnkoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZU1lZGlhUXVlcnkgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIk1lZGlhUXVlcnlcIik7XG4gIH1cblxuICBfYnVpbGRRdWVyeURhdGEobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFJvdyh7XG4gICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VCZXR3ZWVuLFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgbmV3IFRleHQobmFtZSwge1xuICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHsgZm9udFNpemU6IDIwLCBjb2xvcjogQ29sb3JzLmJsYWNrIH0pLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFRleHQodmFsdWUudG9TdHJpbmcoKSwge1xuICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHsgZm9udFNpemU6IDIwLCBjb2xvcjogQ29sb3JzLm9yYW5nZSB9KSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG4gIFxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHF1ZXJ5RGF0YSA9IE1lZGlhUXVlcnkub2YoY29udGV4dCk7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoXCJNZWRpYVF1ZXJ5XCIpIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgaXRlbUV4dGVudDogNjAsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgdGhpcy5fYnVpbGRRdWVyeURhdGEoXCJzaXplXCIsIHF1ZXJ5RGF0YS5zaXplKSxcbiAgICAgICAgICB0aGlzLl9idWlsZFF1ZXJ5RGF0YShcInBhZGRpbmcudG9wXCIsIHF1ZXJ5RGF0YS5wYWRkaW5nLnRvcCksXG4gICAgICAgICAgdGhpcy5fYnVpbGRRdWVyeURhdGEoXCJwYWRkaW5nLmxlZnRcIiwgcXVlcnlEYXRhLnBhZGRpbmcubGVmdCksXG4gICAgICAgICAgdGhpcy5fYnVpbGRRdWVyeURhdGEoXCJwYWRkaW5nLnJpZ2h0XCIsIHF1ZXJ5RGF0YS5wYWRkaW5nLnJpZ2h0KSxcbiAgICAgICAgICB0aGlzLl9idWlsZFF1ZXJ5RGF0YShcInBhZGRpbmcuYm90dG9tXCIsIHF1ZXJ5RGF0YS5wYWRkaW5nLmJvdHRvbSksXG4gICAgICAgICAgdGhpcy5fYnVpbGRRdWVyeURhdGEoXCJ2aWV3SW5zZXRzXCIsIHF1ZXJ5RGF0YS52aWV3SW5zZXRzKSxcbiAgICAgICAgICBuZXcgVGV4dChcIui/mOacieW+iOWkmuWFtuS7luWxnuaAp+S4jeS+v+WxleekuiDlj6/ku6Xnu6fnu63mjqLntKLvvZ5cIiwge1xuICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoeyBmb250U2l6ZTogMTUsIGNvbG9yOiBDb2xvcnMuYmxhY2sgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFeGFtcGxlV2lkZ2V0LFxufTtcbiIsImxldCB7XG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICBTY2FmZm9sZCxcbiAgQXBwQmFyLFxuICBUZXh0LFxuICBDb2xvcnMsXG4gIFJvdyxcbiAgTGlzdFZpZXcsXG4gIE1lZGlhUXVlcnksXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIENlbnRlcixcbiAgQ29udGFpbmVyLFxuICBOYXZpZ2F0b3IsXG4gIExpc3RUaWxlLFxuICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbiAgUmFpc2VkQnV0dG9uLFxuICBCb3hEZWNvcmF0aW9uLFxuICBCb3JkZXJSYWRpdXMsXG4gIFJhZGl1cyxcbiAgRmxhdEJ1dHRvbixcbiAgRXhwYW5kZWQsXG4gIEljb25CdXR0b24sXG4gIEljb24sXG4gIEljb25zLFxuICBUZXh0RmllbGQsXG4gIElucHV0RGVjb3JhdGlvblxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG4vLyDot6/nlLHnrqHnkIbmjqfku7Y6IOmAmuW4uOS9v+eUqOS6juWxgOmDqOmhtemdoui3s+i9rOeahOaDheWGtVxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiRXhhbXBsZVdpZGdldFwiKTtcbiAgfVxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlTmF2aWdhdG9yKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVOYXZpZ2F0b3IgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIk5hdmlnYXRvclwiKTtcbiAgfVxuXG4gIF9idWlsZFNlYXJjaEJhcihjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VhcmNoUGFnZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLmkJzntKLmoYZcIiksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0pLFxuICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDQuMCkpLFxuICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUsXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7IHRpdGxlOiB0aGlzLl9idWlsZFNlYXJjaEJhcihjb250ZXh0KX0pLFxuICAgICAgYm9keTogbmV3IENlbnRlcih7XG4gICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIueCueWHu+S4iuaWueaQnOe0ouahhlxcbuiwg+eUqE5hdmlnYXRvci5wdXNoKClcIiksXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5jbGFzcyBTZWFyY2hQYWdlIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ1NlYXJjaFBhZ2UnKTtcbiAgICB9XG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VhcmNoUGFnZVN0YXRlKCk7XG4gICAgfVxufVxuXG5jbGFzcyBTZWFyY2hQYWdlU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gICAgX2J1aWxkU2VhcmNoKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHRGaWVsZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2ZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBJbnB1dERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaW50VGV4dDogXCLovpPlhaXmoYZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4SWNvbjogbmV3IEljb24oSWNvbnMucGVyc29uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7dGl0bGU6IHRoaXMuX2J1aWxkU2VhcmNoKCl9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgnU2VhcmNoRGV0YWlscycpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEV4YW1wbGVXaWRnZXQsXG59O1xuIiwiXG5cbmxldCB7XG4gICAgTVhKU0xvZyxcbiAgICBydW5BcHAsXG4gICAgTVhKU0ZsdXR0ZXJBcHAsXG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBNWEpTU3RhdGVsZXNzV2lkZ2V0LFxuICAgIE1hdGVyaWFsQXBwLFxuICAgIFNjYWZmb2xkLFxuICAgIENvbnRhaW5lcixcbiAgICBMaXN0VGlsZSxcbiAgICBDZW50ZXIsXG4gICAgQ29sb3IsXG4gICAgQXBwQmFyLFxuICAgIFNuYWNrQmFyLFxuICAgIFRleHQsXG4gICAgSWNvbixcbiAgICBJY29uRGF0YSxcbiAgICBFZGdlSW5zZXRzLFxuICAgIENvbG9ycyxcbiAgICBJY29uQnV0dG9uLFxuICAgIEZsYXRCdXR0b24sXG4gICAgUmFpc2VkQnV0dG9uLFxuICAgIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICAgIENvbHVtbixcbiAgICBSb3csXG4gICAgRHJvcGRvd25CdXR0b24sXG4gICAgRHJvcGRvd25NZW51SXRlbSxcbiAgICBNYWluQXhpc0FsaWdubWVudCxcbiAgICBUZXh0U3R5bGUsXG4gICAgUG9wdXBNZW51QnV0dG9uLFxuICAgIFBvcHVwTWVudUl0ZW0sXG4gICAgQnV0dG9uQmFyLFxuICAgIE1haW5BeGlzU2l6ZSxcbiAgICBUZXh0RGVjb3JhdGlvbixcbiAgICBSaWNoVGV4dCxcbiAgICBUZXh0U3BhbixcbiAgICBFeHBhbmRlZCxcbiAgICBGb250V2VpZ2h0LFxuICAgIFRleHRGb3JtRmllbGQsXG4gICAgSW5wdXREZWNvcmF0aW9uLFxuICAgIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICAgIFRleHRJbnB1dFR5cGUsXG4gICAgU2l6ZWRCb3gsXG4gICAgVGV4dEZpZWxkLFxuICAgIFRleHRFZGl0aW5nQ29udHJvbGxlcixcbiAgICBMaXN0VmlldyxcbiAgICBTbGlkZXIsXG4gICAgSWNvbnMsXG4gICAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgICBUZXh0T3ZlcmZsb3csXG4gICAgUGFkZGluZyxcbiAgICBBbmltYXRlZENvbnRhaW5lcixcbiAgICBEdXJhdGlvbixcbiAgICBTd2l0Y2gsXG4gICAgSW1hZ2UsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXhhbXBsZVdpZGdldCcpO1xuICAgIH1cblxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlU3dpdGNoU3RhdGUoKTtcbiAgICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlU3dpdGNoU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkMSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zZWxlY3RlZDIgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBfY2hhbmdlU3RhdGUxKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkMSA9ICF0aGlzLl9zZWxlY3RlZDE7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgX2NoYW5nZVN0YXRlMigpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkMiA9ICF0aGlzLl9zZWxlY3RlZDI7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgX2dldFRleHRTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgZm9udFNpemU6IDE4LFxuICAgICAgICAgICAgaGVpZ2h0OiAxLjIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGFnZUV4YW1wbGVBYnNvcmJQb2ludGVyJyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoJ1N3aXRjaOWfuuehgOeUqOazlScpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTd2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fc2VsZWN0ZWQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZVN0YXRlMS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTd2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fc2VsZWN0ZWQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZVN0YXRlMS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTd2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fc2VsZWN0ZWQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZVN0YXRlMS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTd2l0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fc2VsZWN0ZWQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6IHRoaXMuX2NoYW5nZVN0YXRlMS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkMSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgVGV4dCgndHJ1ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IFRleHQoJ2ZhbHNlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgU2VjdGlvblRpdGxlKCdTd2l0Y2jlm77niYfnlKjms5UnKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dCgnVE9ETyA6IEltYWdlUHJvdmlkZXInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU3dpdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX3NlbGVjdGVkMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiB0aGlzLl9jaGFuZ2VTdGF0ZTIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluYWN0aXZlVGh1bWJJbWFnZTogQ29sb3JzLmdyZWVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhY3RpdmVUaHVtYkltYWdlOiBJbWFnZS5uZXR3b3JrKCdodHRwczovL3BpY3N1bS5waG90b3MvMjAwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWQyIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBUZXh0KCd0cnVlJykgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IFRleHQoJ2ZhbHNlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEV4YW1wbGVXaWRnZXQsXG59OyIsImxldCB7XG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBTY2FmZm9sZCxcbiAgQXBwQmFyLFxuICBUZXh0LFxuICBDaGlwLFxuICBDaXJjbGVBdmF0YXIsXG4gIENhcmQsXG4gIFdyYXAsXG4gIExpc3RWaWV3LFxuICBMaXN0VGlsZSxcbiAgRWRnZUluc2V0cyxcbiAgQ29udGFpbmVyLFxuICBBeGlzLFxuICBXcmFwQWxpZ25tZW50LFxuICBDb2xvcnMsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIkV4YW1wbGVXaWRnZXRcIik7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlV3JhcCgpO1xuICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlV3JhcCBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBfY2hpcExpc3QoKSB7XG4gICAgbGV0IGNvbG9yTGlzdCA9IFtcbiAgICAgIENvbG9ycy5vcmFuZ2UvKls0MDBdKi8sXG4gICAgICBDb2xvcnMuYmx1ZS8qWzQwMF0qLyxcbiAgICAgIENvbG9ycy5ncmVlbi8qWzQwMF0qLyxcbiAgICAgIENvbG9ycy5waW5rLypbNDAwXSovLFxuICAgICAgQ29sb3JzLnB1cnBsZS8qWzQwMF0qLyxcbiAgICBdO1xuICAgIGxldCBmaXJzdEFscGhhID0gW1wiQVwiLCBcIkJcIiwgXCJDXCIsIFwiRFwiLCBcIkVcIiwgXCJGXCIsIFwiR1wiLCBcIkhcIiwgXCJJXCIsIFwiSlwiXTtcbiAgICBsZXQgY2hpcFRleHQgPSBbXCJBbHBoYVwiLCBcIkJldGFcIiwgXCJDaGlwXCIsIFwiRGVmYXVsdFwiLCBcIkVsZW1lbnRcIiwgXCJGb3JtYXRcIiwgXCJHcmVhdFwiLCBcIkhlcm9cIiwgXCJJbmRleFwiLCBcIkphdmFzY3JpcHRcIl07XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIGxldCB3ID0gbmV3IENoaXAoe1xuICAgICAgICBhdmF0YXI6IG5ldyBDaXJjbGVBdmF0YXIoe1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JMaXN0W2kgJSA1XSxcbiAgICAgICAgICBmb3JlZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgICBjaGlsZDogbmV3IFRleHQoZmlyc3RBbHBoYVtpXSksXG4gICAgICAgIH0pLFxuICAgICAgICBsYWJlbDogbmV3IFRleHQoY2hpcFRleHRbaV0pLFxuICAgICAgfSk7XG4gICAgICBsaXN0LnB1c2godyk7XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHsgdGl0bGU6IG5ldyBUZXh0KFwiV3JhcFwiKSB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMuYWxsKDEyLjApLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIuaZrumAmueahFdyYXBcIikgfSksXG4gICAgICAgICAgbmV3IENhcmQoe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBXcmFwKHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2NoaXBMaXN0KCksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIuWinuWKoOS6humhuei+uei3neeahFdyYXBcIikgfSksXG4gICAgICAgICAgbmV3IENhcmQoe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBXcmFwKHtcbiAgICAgICAgICAgICAgc3BhY2luZzogNC4wLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fY2hpcExpc3QoKSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwi5Z6C55u05pa55ZCR5o6S5YiX55qEV3JhcFwiKSB9KSxcbiAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGhlaWdodDogMjIwLjAsXG4gICAgICAgICAgICBjaGlsZDogbmV3IENhcmQoe1xuICAgICAgICAgICAgICBjaGlsZDogbmV3IFdyYXAoe1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogQXhpcy52ZXJ0aWNhbCxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fY2hpcExpc3QoKSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIuavj+ihjOmDveWxheS4reaYvuekuueahFdyYXBcIikgfSksXG4gICAgICAgICAgbmV3IENhcmQoe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBXcmFwKHtcbiAgICAgICAgICAgICAgYWxpZ25tZW50OiBXcmFwQWxpZ25tZW50LnNwYWNlQXJvdW5kLFxuICAgICAgICAgICAgICBzcGFjaW5nOiA0LjAsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLl9jaGlwTGlzdCgpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsIlxuXG5sZXQge1xuICBNWEpTTG9nLFxuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTVhKU1N0YXRlbGVzc1dpZGdldCxcbiAgTWF0ZXJpYWxBcHAsXG4gIFNjYWZmb2xkLFxuICBDb250YWluZXIsXG4gIExpc3RUaWxlLFxuICBDZW50ZXIsXG4gIENvbG9yLFxuICBBcHBCYXIsXG4gIFNuYWNrQmFyLFxuICBUZXh0LFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sb3JzLFxuICBGbGF0QnV0dG9uLFxuICBSYWlzZWRCdXR0b24sXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uLFxuICBDb2x1bW4sXG4gIFJvdyxcbiAgSWNvbkJ1dHRvbixcbiAgRHJvcGRvd25CdXR0b24sXG4gIERyb3Bkb3duTWVudUl0ZW0sXG4gIE1haW5BeGlzQWxpZ25tZW50LFxuICBUZXh0U3R5bGUsXG4gIFBvcHVwTWVudUJ1dHRvbixcbiAgUG9wdXBNZW51SXRlbSxcbiAgQnV0dG9uQmFyLFxuICBNYWluQXhpc1NpemUsXG4gIFRleHREZWNvcmF0aW9uLFxuICBSaWNoVGV4dCxcbiAgVGV4dFNwYW4sXG4gIEV4cGFuZGVkLFxuICBGb250V2VpZ2h0LFxuICBUZXh0Rm9ybUZpZWxkLFxuICBJbnB1dERlY29yYXRpb24sXG4gIFVuZGVybGluZUlucHV0Qm9yZGVyLFxuICBUZXh0SW5wdXRUeXBlLFxuICBTaXplZEJveCxcbiAgVGV4dEZpZWxkLFxuICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIsXG4gIExpc3RWaWV3LFxuICBTbGlkZXIsXG4gIEljb25zLFxuICBJbWFnZSxcbiAgVGhlbWUsXG4gIFBhZGRpbmcsXG4gIFNjcm9sbGJhcixcbiAgS2V5LFxuICBOYXZpZ2F0b3IsXG4gIE1hdGVyaWFsUGFnZVJvdXRlLFxuICBBbGlnbixcbiAgU3RhY2ssXG4gIEFsaWdubWVudCxcbiAgR2VzdHVyZURldGVjdG9yLFxuICBTY3JvbGxDb250cm9sbGVyXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNvbnN0IHsgU2VjdGlvblRpdGxlIH0gPSByZXF1aXJlKFwiLi4vY29tcG9uZW50L3NlY3Rpb25fdGl0bGUuanNcIik7XG5cbmxldCB3aWRnZXRFeGFtcGxlcyA9IFtcbiAgXCJUZXh0XCIsXG5dXG5cbmNsYXNzIFdpZGdldEV4YW1wbGVzUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWxlc3NXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIldpZGdldEV4YW1wbGVzUGFnZVwiKTtcbiAgICB0aGlzLndpZGdldHNBcnJheSA9IHdpZGdldHNOYW1lLnNwbGl0KCcsJyk7XG4gICAgdGhpcy5pbmRleEFycmF5ID0gdGhpcy5jYWxjSW5kZXhBcnJheSh0aGlzLndpZGdldHNBcnJheSk7XG5cbiAgICB0aGlzLnNjcm9sbENvbnRyb2xsZXIgPSBuZXcgU2Nyb2xsQ29udHJvbGxlcigpO1xuXG4gIH1cblxuICBjYWxjSW5kZXhBcnJheSh3aWRnZXRzQXJyYXkpIHtcblxuICAgIGxldCB0ZW1wU2V0ID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgd2lkZ2V0c0FycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZXQgd05hbWUgPSB3aWRnZXRzQXJyYXlbaV07XG4gICAgICB0ZW1wU2V0LmFkZCh3TmFtZS5zdWJzdHJpbmcoMCwgMSkpO1xuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5mcm9tKHRlbXBTZXQpO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdXaWRnZXQgRXhhbXBsZXMnKSxcbiAgICAgIH0pLFxuICAgICAgYm9keTogbmV3IFN0YWNrKHtcbiAgICAgICAgY2hpbGRyZW46IFtuZXcgU2Nyb2xsYmFyKHtcbiAgICAgICAgICBjaGlsZDogTGlzdFZpZXcuYnVpbGRlcih7XG4gICAgICAgICAgICBjb250cm9sbGVyOiB0aGlzLnNjcm9sbENvbnRyb2xsZXIsXG4gICAgICAgICAgICBpdGVtQ291bnQ6IHRoaXMud2lkZ2V0c0FycmF5Lmxlbmd0aCxcbiAgICAgICAgICAgIGl0ZW1CdWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0Vmlld0l0ZW0odGhpcy53aWRnZXRzQXJyYXlbaW5kZXhdKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgQWxpZ24oe1xuICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlclJpZ2h0LC8vbmV3IEZyYWN0aW9uYWxPZmZzZXQoMS4wLCAwLjUpLFxuICAgICAgICAgIGNoaWxkOiBuZXcgU2l6ZWRCb3goe1xuICAgICAgICAgICAgd2lkdGg6IDI1LFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBQYWRkaW5nKHtcbiAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHsgdG9wOiAyMCB9KSxcbiAgICAgICAgICAgICAgY2hpbGQ6IExpc3RWaWV3LmJ1aWxkZXIoe1xuICAgICAgICAgICAgICAgIGl0ZW1Db3VudDogdGhpcy5pbmRleEFycmF5Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpdGVtQnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICBsZXQgdCA9IHRoaXMuaW5kZXhBcnJheVtpbmRleF07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEdlc3R1cmVEZXRlY3Rvcih7XG4gICAgICAgICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkluZGV4VGFwKGluZGV4KVxuICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCh0KVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIF1cbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxuXG4gIG9uSW5kZXhUYXAoaW5kZXgpIHtcblxuICAgIGxldCBwcmVmaXggPSB0aGlzLmluZGV4QXJyYXlbaW5kZXhdO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yICg7IGNvdW50IDwgdGhpcy53aWRnZXRzQXJyYXkubGVuZ3RoOyArK2NvdW50KSB7XG5cbiAgICAgIGlmICh0aGlzLndpZGdldHNBcnJheVtjb3VudF0uc3Vic3RyaW5nKDAsIDEpID09IHByZWZpeCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgaCA9IGNvdW50ICogNDU7XG4gICAgdGhpcy5zY3JvbGxDb250cm9sbGVyLmp1bXBUbyhoKTtcbiAgfVxufVxuXG5jbGFzcyBMaXN0Vmlld0l0ZW0gZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IodGl0bGUpIHtcbiAgICBzdXBlcignTGlzdFZpZXdJdGVtJyk7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgIHRoaXMuc3VidGl0bGUgPSBcIlwiO1xuXG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG5cbiAgICBsZXQgdGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgIGxldCBwcmVmaXggPSB0aXRsZS5zdWJzdHJpbmcoMCwgMSk7XG4gICAgbGV0IGV4YW1wbGUgPSBudWxsO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBleGFtcGxlID0gcmVxdWlyZShcIi4vXCIgKyBwcmVmaXggKyBcIi9cIiArIHRpdGxlICsgXCIuanNcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIFxuICAgIH1cbiAgIFxuICAgIGxldCBjID0gVGhlbWUub2YoY29udGV4dCkucHJpbWFyeUNvbG9yO1xuXG4gICAgaWYoIWV4YW1wbGUpe1xuICAgICAgYyA9IENvbG9ycy5ncmF5O1xuICAgICAgdGl0bGUgPSB0aGlzLnRpdGxlICsgXCIgKOacquWujOaIkOekuuS+iylcIjsgXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgaGVpZ2h0OiA0NSxcbiAgICAgIGNoaWxkOiBuZXcgTGlzdFRpbGUoe1xuICAgICAgICB0aXRsZTogbmV3IFRleHQodGl0bGUpLFxuICAgICAgICAvL3N1YnRpdGxlOiBuZXcgVGV4dCh0aGlzLnN1YnRpdGxlKSxcbiAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTA2ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHsgY29sb3I6IGN9KSxcbiAgICAgICAgLy90cmFpbGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkZiwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycsIG1hdGNoVGV4dERpcmVjdGlvbjogdHJ1ZSB9KSksXG4gICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgZXhhbXBsZS5FeGFtcGxlV2lkZ2V0IDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSlcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG59XG5cbmxldCB3aWRnZXRzTmFtZSA9IFwiQWJzb3JiUG9pbnRlcixBbGVydERpYWxvZyxBbGlnbixBbmltYXRlZEJ1aWxkZXIsQW5pbWF0ZWRDb250YWluZXIsQW5pbWF0ZWRDcm9zc0ZhZGUsQW5pbWF0ZWREZWZhdWx0VGV4dFN0eWxlLEFuaW1hdGVkTGlzdFN0YXRlLEFuaW1hdGVkTW9kYWxCYXJyaWVyLEFuaW1hdGVkT3BhY2l0eSxBbmltYXRlZFBoeXNpY2FsTW9kZWwsQW5pbWF0ZWRQb3NpdGlvbmVkLEFuaW1hdGVkU2l6ZSxBbmltYXRlZFdpZGdldCxBbmltYXRlZFdpZGdldEJhc2VTdGF0ZSxBcHBiYXIsQXNwZWN0UmF0aW8sQXNzZXRCdW5kbGUsQmFja2Ryb3BGaWx0ZXIsQmFzZWxpbmUsQm90dG9tTmF2aWdhdGlvbkJhcixCb3R0b21TaGVldCxCdXR0b25CYXIsQ2FyZCxDZW50ZXIsQ2hlY2tib3gsQ2hpcCxDaXJjdWxhclByb2dyZXNzSW5kaWNhdG9yLENsaXBPdmFsLENsaXBQYXRoLENsaXBSZWN0LENvbHVtbixDb25zdHJhaW5lZEJveCxDb250YWluZXIsQ3VwZXJ0aW5vQWN0aW9uU2hlZXQsQ3VwZXJ0aW5vQWN0aXZpdHlJbmRpY2F0b3IsQ3VwZXJ0aW5vQWxlcnREaWFsb2csQ3VwZXJ0aW5vQnV0dG9uLEN1cGVydGlub0NvbnRleHRNZW51LEN1cGVydGlub0RhdGVQaWNrZXIsQ3VwZXJ0aW5vRGlhbG9nLEN1cGVydGlub0RpYWxvZ0FjdGlvbixDdXBlcnRpbm9GdWxsc2NyZWVuRGlhbG9nVHJhbnNpdGlvbixDdXBlcnRpbm9OYXZpZ2F0aW9uQmFyLEN1cGVydGlub1BhZ2VTY2FmZm9sZCxDdXBlcnRpbm9QYWdlVHJhbnNpdGlvbixDdXBlcnRpbm9QaWNrZXIsQ3VwZXJ0aW5vUG9wdXBTdXJmYWNlLEN1cGVydGlub1Njcm9sbGJhcixDdXBlcnRpbm9TZWdtZW50ZWRDb250cm9sLEN1cGVydGlub1NsaWRlcixDdXBlcnRpbm9TbGlkaW5nU2VnbWVudGVkQ29udHJvbCxDdXBlcnRpbm9Td2l0Y2gsQ3VwZXJ0aW5vVGFiQmFyLEN1cGVydGlub1RhYlNjYWZmb2xkLEN1cGVydGlub1RhYlZpZXcsQ3VwZXJ0aW5vVGV4dEZpZWxkLEN1cGVydGlub1RpbWVyUGlja2VyLEN1c3RvbU11bHRpQ2hpbGRMYXlvdXQsQ3VzdG9tUGFpbnQsQ3VzdG9tU2Nyb2xsVmlldyxDdXN0b21TaW5nbGVDaGlsZExheW91dCxEYXRhVGFibGUsRGF0ZSAmIFRpbWUgUGlja2VycyxEZWNvcmF0ZWRCb3gsRGVjb3JhdGVkQm94VHJhbnNpdGlvbixEZWZhdWx0VGV4dFN0eWxlLERpc21pc3NpYmxlLERpdmlkZXIsRHJhZ1RhcmdldCxEcmFnZ2FibGUsRHJhd2VyLERyb3Bkb3duQnV0dG9uLEV4Y2x1ZGVTZW1hbnRpY3MsRXhwYW5kZWQsRXhwYW5zaW9uUGFuZWwsRmFkZVRyYW5zaXRpb24sRml0dGVkQm94LEZsYXRCdXR0b24sRmxvYXRpbmdBY3Rpb25CdXR0b24sRmxvdyxGbHV0dGVyTG9nbyxGb3JtLEZvcm1GaWVsZCxGcmFjdGlvbmFsVHJhbnNsYXRpb24sRnJhY3Rpb25hbGx5U2l6ZWRCb3gsRnV0dXJlQnVpbGRlcixHZXN0dXJlRGV0ZWN0b3IsR3JpZFZpZXcsSGVybyxJY29uLEljb25CdXR0b24sSWdub3JlUG9pbnRlcixJbWFnZSxJbmRleGVkU3RhY2ssSW50cmluc2ljSGVpZ2h0LEludHJpbnNpY1dpZHRoLExheW91dEJ1aWxkZXIsTGltaXRlZEJveCxMaW5lYXJQcm9ncmVzc0luZGljYXRvcixMaXN0Qm9keSxMaXN0VGlsZSxMaXN0VmlldyxMb25nUHJlc3NEcmFnZ2FibGUsTWF0ZXJpYWxBcHAsTWVkaWFRdWVyeSxNZXJnZVNlbWFudGljcyxOYXZpZ2F0b3IsTmVzdGVkU2Nyb2xsVmlldyxOb3RpZmljYXRpb25MaXN0ZW5lcixPZmZzdGFnZSxPcGFjaXR5LE91dGxpbmVCdXR0b24sT3ZlcmZsb3dCb3gsUGFkZGluZyxQYWdlVmlldyxQbGFjZWhvbGRlcixQb3B1cE1lbnVCdXR0b24sUG9zaXRpb25lZFRyYW5zaXRpb24sUmFkaW8sUmFpc2VkQnV0dG9uLFJhd0ltYWdlLFJhd0tleWJvYXJkTGlzdGVuZXIsUmVmcmVzaEluZGljYXRvcixSaWNoVGV4dCxSb3RhdGVkQm94LFJvdGF0aW9uVHJhbnNpdGlvbixSb3csU2NhZmZvbGQsU2NhbGVUcmFuc2l0aW9uLFNjcm9sbENvbmZpZ3VyYXRpb24sU2Nyb2xsYWJsZSxTY3JvbGxiYXIsU2VtYW50aWNzLFNpbXBsZURpYWxvZyxTaW5nbGVDaGlsZFNjcm9sbFZpZXcsU2l6ZVRyYW5zaXRpb24sU2l6ZWRCb3gsU2l6ZWRPdmVyZmxvd0JveCxTbGlkZVRyYW5zaXRpb24sU2xpZGVyLFNsaXZlckFwcEJhcixTbmFja0JhcixTdGFjayxTdGVwcGVyLFN0cmVhbUJ1aWxkZXIsU3dpdGNoLFRhYkJhcixUYWJCYXJWaWV3LFRhYmxlLFRleHQsVGV4dEZpZWxkLFRoZW1lLFRvb2x0aXAsVHJhbnNmb3JtLFdpZGdldHNBcHAsV3JhcFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgV2lkZ2V0RXhhbXBsZXNQYWdlLFxufTtcbiIsImxldCB7XG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBTY2FmZm9sZCxcbiAgQXBwQmFyLFxuICBUZXh0LFxuICBUYWJsZSxcbiAgVGFibGVSb3csXG4gIFRhYmxlQ2VsbCxcbiAgVGFibGVCb3JkZXIsXG4gIEJvcmRlclNpZGUsXG4gIENvbG9ycyxcbiAgQm94RGVjb3JhdGlvbixcbiAgTGlzdFZpZXcsXG4gIEVkZ2VJbnNldHMsXG4gIENlbnRlcixcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgRXhhbXBsZVdpZGdldCBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiRXhhbXBsZVdpZGdldFwiKTtcbiAgfVxuXG4gIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgUGFnZUV4YW1wbGVUYWJsZSgpO1xuICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlVGFibGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgX3JhbmRvbU5hbWUoKSB7XG4gICAgbGV0IG5hbWUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjYpKTtcbiAgICBsZXQgbGVuZ3RoID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNSkgKyAyO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICBuYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNikpO1xuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgX3JhbmRvbVBlcnNvbihpbmRleCkge1xuICAgIGxldCBudW1ZZWFyID0gKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDIwMTApLnRvU3RyaW5nKCk7XG4gICAgbGV0IG51bVJhbmQgPSAoXCIwMDAwXCIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwKSkuc2xpY2UoLTQpO1xuICAgIGxldCBudW0gPSBudW1ZZWFyICsgbnVtUmFuZDtcbiAgICBsZXQgbmFtZSA9IHRoaXMuX3JhbmRvbU5hbWUoKTtcbiAgICBsZXQgYWdlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzApICsgMjE7XG4gICAgbGV0IHNleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpID09IDAgPyBcIueUt1wiIDogXCLlpbNcIjtcbiAgICBsZXQgdGFibGVSb3cgPSBuZXcgVGFibGVSb3coe1xuICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICBjb2xvcjogaW5kZXggJSAyID09IDAgPyBDb2xvcnMud2hpdGUgOiBDb2xvcnMuZ3JleS8qWzIwMF0qLyxcbiAgICAgIH0pLFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgbmV3IFRhYmxlQ2VsbCh7XG4gICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQobnVtLnRvU3RyaW5nKCkpIH0pLFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFRhYmxlQ2VsbCh7XG4gICAgICAgICAgY2hpbGQ6IG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQobmFtZS50b1N0cmluZygpKSB9KSxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBUYWJsZUNlbGwoe1xuICAgICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHsgY2hpbGQ6IG5ldyBUZXh0KHNleC50b1N0cmluZygpKSB9KSxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBUYWJsZUNlbGwoe1xuICAgICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHsgY2hpbGQ6IG5ldyBUZXh0KGFnZS50b1N0cmluZygpKSB9KSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pO1xuICAgIHJldHVybiB0YWJsZVJvdztcbiAgfVxuXG4gIF9jcmVhdGVUYWJsZSgpIHtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGxldCB0YWJsZVRpdGxlID0gbmV3IFRhYmxlUm93KHtcbiAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLypbNjAwXSovLFxuICAgICAgfSksXG4gICAgICBjaGlsZHJlbjogW1xuICAgICAgICBuZXcgVGFibGVDZWxsKHsgY2hpbGQ6IG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQoXCLlt6Xlj7dcIikgfSkgfSksXG4gICAgICAgIG5ldyBUYWJsZUNlbGwoeyBjaGlsZDogbmV3IENlbnRlcih7IGNoaWxkOiBuZXcgVGV4dChcIuWnk+WQjVwiKSB9KSB9KSxcbiAgICAgICAgbmV3IFRhYmxlQ2VsbCh7IGNoaWxkOiBuZXcgQ2VudGVyKHsgY2hpbGQ6IG5ldyBUZXh0KFwi5oCn5YirXCIpIH0pIH0pLFxuICAgICAgICBuZXcgVGFibGVDZWxsKHsgY2hpbGQ6IG5ldyBDZW50ZXIoeyBjaGlsZDogbmV3IFRleHQoXCLlubTpvoRcIikgfSkgfSksXG4gICAgICBdLFxuICAgIH0pO1xuICAgIGxpc3QucHVzaCh0YWJsZVRpdGxlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDcwOyBpKyspIHtcbiAgICAgIGxpc3QucHVzaCh0aGlzLl9yYW5kb21QZXJzb24oaSkpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhsaXN0KTtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7IHRpdGxlOiBuZXcgVGV4dChcIlRhYmxlXCIpIH0pLFxuICAgICAgYm9keTogbmV3IExpc3RWaWV3KHtcbiAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTIuMCksXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IFRhYmxlKHtcbiAgICAgICAgICAgIGJvcmRlcjogbmV3IFRhYmxlQm9yZGVyKHtcbiAgICAgICAgICAgICAgdG9wOiBuZXcgQm9yZGVyU2lkZSh7IHdpZHRoOiAyLjAsIGNvbG9yOiBDb2xvcnMuYmxhY2sgfSksXG4gICAgICAgICAgICAgIGJvdHRvbTogbmV3IEJvcmRlclNpZGUoeyB3aWR0aDogMi4wLCBjb2xvcjogQ29sb3JzLmJsYWNrIH0pLFxuICAgICAgICAgICAgICBsZWZ0OiBuZXcgQm9yZGVyU2lkZSh7IHdpZHRoOiAyLjAsIGNvbG9yOiBDb2xvcnMuYmxhY2sgfSksXG4gICAgICAgICAgICAgIHJpZ2h0OiBuZXcgQm9yZGVyU2lkZSh7IHdpZHRoOiAyLjAsIGNvbG9yOiBDb2xvcnMuYmxhY2sgfSksXG4gICAgICAgICAgICAgIGhvcml6b250YWxJbnNpZGU6IG5ldyBCb3JkZXJTaWRlKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMS4wLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2s1NCxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHZlcnRpY2FsSW5zaWRlOiBuZXcgQm9yZGVyU2lkZSh7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEuMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsYWNrNTQsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5fY3JlYXRlVGFibGUoKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEV4YW1wbGVXaWRnZXQgfTtcbiIsImxldCB7XG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBTY2FmZm9sZCxcbiAgQXBwQmFyLFxuICBUZXh0LFxuICBMaXN0VmlldyxcbiAgTGlzdFRpbGUsXG4gIEVkZ2VJbnNldHMsXG4gIFRleHRGaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBJY29uLFxuICBJY29ucyxcbiAgT3V0bGluZUlucHV0Qm9yZGVyLFxuICBCb3JkZXJTaWRlLFxuICBCb3JkZXJSYWRpdXMsXG4gIFJhZGl1cyxcbiAgQ29sb3IsXG4gIENvbG9ycyxcbiAgQ29udGFpbmVyLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJFeGFtcGxlV2lkZ2V0XCIpO1xuICB9XG5cbiAgY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZVRleHRGaWVsZCgpO1xuICB9XG59XG5cbmNsYXNzIFBhZ2VFeGFtcGxlVGV4dEZpZWxkIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl90ZXh0RmllbGRWYWx1ZSA9IFwiXCI7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoXCJUZXh0RmllbGRcIikgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLnN5bW1ldHJpYyh7IGhvcml6b250YWw6IDI1LjAgfSksXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwi5Z+656GA55qE5paH5pys6L6T5YWl57uE5Lu2XCIpIH0pLFxuICAgICAgICAgIG5ldyBUZXh0RmllbGQoKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCLluKbmnInnroDljZXoo4XppbDnmoTmlofmnKzovpPlhaXnu4Tku7ZcIikgfSksXG4gICAgICAgICAgbmV3IFRleHRGaWVsZCh7XG4gICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgSW5wdXREZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgbGFiZWxUZXh0OiBcIueUqOaIt+WQjVwiLFxuICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihJY29ucy5wZXJzb24pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwi5bim5pyJ5o+Q56S655qE5paH5pys6L6T5YWl57uE5Lu2XCIpIH0pLFxuICAgICAgICAgIG5ldyBUZXh0RmllbGQoe1xuICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IElucHV0RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgIGhpbnRUZXh0OiBcIuivt+i+k+WFpeeUqOaIt+WQjVwiLFxuICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBcIueUqOaIt+WQjemVv+W6puS4ujYtMTTkuKrlrZfmr41cIixcbiAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMucGVyc29uKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIuaWh+acrOi+k+WFpee7hOS7tueahOmUmeivr+aPkOekulwiKSB9KSxcbiAgICAgICAgICBuZXcgVGV4dEZpZWxkKHtcbiAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBJbnB1dERlY29yYXRpb24oe1xuICAgICAgICAgICAgICBlcnJvclRleHQ6IFwi55So5oi35ZCN6L6T5YWl6ZSZ6K+vXCIsXG4gICAgICAgICAgICAgIGVycm9yQm9yZGVyOiBuZXcgT3V0bGluZUlucHV0Qm9yZGVyKHtcbiAgICAgICAgICAgICAgICBib3JkZXJTaWRlOiBuZXcgQm9yZGVyU2lkZSh7IGNvbG9yOiBDb2xvcnMucmVkIH0pLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIuaWh+acrOi+k+WFpee7hOS7tueahOWtl+aVsOe7n+iuoVwiKSB9KSxcbiAgICAgICAgICBuZXcgVGV4dEZpZWxkKHtcbiAgICAgICAgICAgIG1heExlbmd0aDogMjAsXG4gICAgICAgICAgICBvbkNoYW5nZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRGaWVsZFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgSW5wdXREZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgY291bnRlclRleHQ6IHRoaXMuX3RleHRGaWVsZFZhbHVlLmxlbmd0aCArIFwiLzIwXCIsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoeyB0aXRsZTogbmV3IFRleHQoXCLoh6rlrprkuYnlvaLnirbkuI7pgInkuK3nmoTmlofmnKzovpPlhaXnu4Tku7ZcIikgfSksXG4gICAgICAgICAgbmV3IFRleHRGaWVsZCh7XG4gICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgSW5wdXREZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgZmlsbENvbG9yOiBuZXcgQ29sb3IoMHg0MDQwNDA0MCksXG4gICAgICAgICAgICAgIGZpbGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgZW5hYmxlZEJvcmRlcjogbmV3IE91dGxpbmVJbnB1dEJvcmRlcih7XG4gICAgICAgICAgICAgICAgYm9yZGVyU2lkZTogbmV3IEJvcmRlclNpZGUoeyBjb2xvcjogQ29sb3JzLmdyZXkgfSksXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuYWxsKFJhZGl1cy5jaXJjdWxhcigxMDAuMCkpLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgZm9jdXNlZEJvcmRlcjogbmV3IE91dGxpbmVJbnB1dEJvcmRlcih7XG4gICAgICAgICAgICAgICAgYm9yZGVyU2lkZTogbmV3IEJvcmRlclNpZGUoeyBjb2xvcjogQ29sb3JzLmJsdWUgfSksXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuYWxsKFJhZGl1cy5jaXJjdWxhcigxMi4wKSksXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IExpc3RUaWxlKHsgdGl0bGU6IG5ldyBUZXh0KFwi5a+G56CB6L6T5YWl57uE5Lu2XCIpIH0pLFxuICAgICAgICAgIG5ldyBUZXh0RmllbGQoe1xuICAgICAgICAgICAgb2JzY3VyZVRleHQ6IHRydWUsXG4gICAgICAgICAgICBvYnNjdXJpbmdDaGFyYWN0ZXI6IFwiKlwiLFxuICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IElucHV0RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgIGhpbnRUZXh0OiBcIuivt+i+k+WFpeWvhueggVwiLFxuICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihJY29ucy5sb2NrKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBMaXN0VGlsZSh7IHRpdGxlOiBuZXcgVGV4dChcIuiHquWumuS5ieWFieagh+eahOaWh+acrOi+k+WFpee7hOS7tlwiKSB9KSxcbiAgICAgICAgICBuZXcgVGV4dEZpZWxkKHtcbiAgICAgICAgICAgIGN1cnNvckNvbG9yOiBDb2xvcnMuZ3JlZW4sXG4gICAgICAgICAgICBjdXJzb3JXaWR0aDogMS4wLFxuICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IElucHV0RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgIGhpbnRUZXh0OiBcIuiHquWumuS5ieWFieagh1wiLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IENvbnRhaW5lcih7IGhlaWdodDogMjQwLjAgfSksXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICByZXR1cm4gd2lkZ2V0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBFeGFtcGxlV2lkZ2V0IH07XG4iLCJsZXQge1xuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgU2NhZmZvbGQsXG4gIEFwcEJhcixcbiAgVGV4dCxcbiAgTGlzdFZpZXcsXG4gIENhcmQsXG4gIEVkZ2VJbnNldHMsXG4gIExpc3RUaWxlLFxuICBEZWZhdWx0VGFiQ29udHJvbGxlcixcbiAgVGFiLFxuICBUYWJCYXIsXG4gIFRhYkJhclZpZXcsXG4gIENvbHVtbixcbiAgSWNvbixcbiAgSWNvbnMsXG4gIEJ1dHRvbkJhcixcbiAgRmxhdEJ1dHRvbixcbiAgRmxvYXRpbmdBY3Rpb25CdXR0b24sXG4gIFRoZW1lLFxuICBUaGVtZURhdGEsXG4gIEJvdHRvbU5hdmlnYXRpb25CYXIsXG4gIEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtLFxuICBDb2xvcnMsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIkV4YW1wbGVXaWRnZXRcIik7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlVGhlbWUoKTtcbiAgfVxufVxuXG5jbGFzcyBQYWdlRXhhbXBsZVRoZW1lIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgdGhpcy5fdGhlbWVMaXN0ID0gW1xuICAgICAgVGhlbWVEYXRhLmxpZ2h0KCksXG4gICAgICBUaGVtZURhdGEuZGFyaygpLFxuICAgICAgbmV3IFRoZW1lRGF0YSh7IHByaW1hcnlTd2F0Y2g6IENvbG9ycy5ncmVlbiB9KSxcbiAgICAgIG5ldyBUaGVtZURhdGEoeyBwcmltYXJ5U3dhdGNoOiBDb2xvcnMucGluayB9KSxcbiAgICAgIG5ldyBUaGVtZURhdGEoeyBwcmltYXJ5U3dhdGNoOiBDb2xvcnMub3JhbmdlIH0pLFxuICAgICAgbmV3IFRoZW1lRGF0YSh7IHByaW1hcnlTd2F0Y2g6IENvbG9ycy5kZWVwUHVycGxlIH0pLFxuICAgICAgbmV3IFRoZW1lRGF0YSh7IHByaW1hcnlTd2F0Y2g6IENvbG9ycy5jeWFuIH0pLFxuICAgIF07XG4gICAgdGhpcy5fdGhlbWVOYW1lTGlzdCA9IFtcbiAgICAgIFwi6JOd6ImyXCIsXG4gICAgICBcIuWknOaZmlwiLFxuICAgICAgXCLnu7/oibJcIixcbiAgICAgIFwi57KJ6ImyXCIsXG4gICAgICBcIuapmeiJslwiLFxuICAgICAgXCLntKvoibJcIixcbiAgICAgIFwi5aSp6JOdXCIsXG4gICAgXTtcbiAgICB0aGlzLl90aGVtZURhdGEgPSB0aGlzLl90aGVtZUxpc3RbNF07XG4gIH1cblxuICBfY2FyZFZpZXcoKSB7XG4gICAgcmV0dXJuIG5ldyBMaXN0Vmlldyh7XG4gICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgxMi4wKSxcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIG5ldyBDYXJkKHtcbiAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICBtYWluQXhpc1NpemU6IE1haW5BeGlzU2l6ZS5taW4sXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgIGxlYWRpbmc6IG5ldyBJY29uKEljb25zLmFsYnVtKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCLmoIfpophcIiksXG4gICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KFwi5o+P6L+w5o+P6L+w5o+P6L+w5o+P6L+wXCIpLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgbmV3IEJ1dHRvbkJhcih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIG5ldyBGbGF0QnV0dG9uKHsgY2hpbGQ6IG5ldyBUZXh0KFwi5YiG5LqrXCIpIH0pLFxuICAgICAgICAgICAgICAgICAgbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLlhbPpl61cIiksXG4gICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge30sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfVxuXG4gIF90aGVtZUNoYW5nZVRpbGUoaW5kZXgpIHtcbiAgICByZXR1cm4gbmV3IExpc3RUaWxlKHtcbiAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fdGhlbWVEYXRhID0gdGhpcy5fdGhlbWVMaXN0W2luZGV4XTtcbiAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgKTtcbiAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgIHRpdGxlOiBuZXcgVGV4dCh0aGlzLl90aGVtZU5hbWVMaXN0W2luZGV4XSksXG4gICAgICBsZWFkaW5nOlxuICAgICAgICB0aGlzLl90aGVtZURhdGEgPT0gdGhpcy5fdGhlbWVMaXN0W2luZGV4XVxuICAgICAgICAgID8gbmV3IEljb24oSWNvbnMuY2hlY2tfYm94KVxuICAgICAgICAgIDogbnVsbCxcbiAgICB9KTtcbiAgfVxuXG4gIF90aGVtZUNoYW5nZSgpIHtcbiAgICBsZXQgdGlsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDc7IGkrKykgdGlsZXMucHVzaCh0aGlzLl90aGVtZUNoYW5nZVRpbGUoaSkpO1xuICAgIHJldHVybiBuZXcgTGlzdFZpZXcoe1xuICAgICAgY2hpbGRyZW46IHRpbGVzLFxuICAgIH0pO1xuICB9XG5cbiAgYnVpbGQoY29udGV4dCkge1xuICAgIGxldCB3aWRnZXQgPSBuZXcgVGhlbWUoe1xuICAgICAgZGF0YTogdGhpcy5fdGhlbWVEYXRhLFxuICAgICAgY2hpbGQ6IG5ldyBEZWZhdWx0VGFiQ29udHJvbGxlcih7XG4gICAgICAgIGxlbmd0aDogMixcbiAgICAgICAgY2hpbGQ6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIlRoZW1lXCIpLFxuICAgICAgICAgICAgYm90dG9tOiBuZXcgVGFiQmFyKHtcbiAgICAgICAgICAgICAgdGFiczogW25ldyBUYWIoeyB0ZXh0OiBcIuekuuS+i1wiIH0pLCBuZXcgVGFiKHsgdGV4dDogXCLkuLvpophcIiB9KV0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBib2R5OiBuZXcgVGFiQmFyVmlldyh7XG4gICAgICAgICAgICBjaGlsZHJlbjogW3RoaXMuX2NhcmRWaWV3KCksIHRoaXMuX3RoZW1lQ2hhbmdlKCldLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBuZXcgRmxvYXRpbmdBY3Rpb25CdXR0b24oe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uKEljb25zLmFkZCksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgYm90dG9tTmF2aWdhdGlvbkJhcjogbmV3IEJvdHRvbU5hdmlnYXRpb25CYXIoe1xuICAgICAgICAgICAgY3VycmVudEluZGV4OiB0aGlzLl9pbmRleCxcbiAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCLpppbpobVcIiksXG4gICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24oSWNvbnMuaG9tZSksXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvbkJhckl0ZW0oe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIuS5puexjVwiKSxcbiAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihJY29ucy5ib29rKSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG5ldyBCb3R0b21OYXZpZ2F0aW9uQmFySXRlbSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi5oiR55qEXCIpLFxuICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKEljb25zLnBlcm1faWRlbnRpdHkpLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwibGV0IHtcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIFNjYWZmb2xkLFxuICBBcHBCYXIsXG4gIFRleHQsXG4gIExpc3RWaWV3LFxuICBFZGdlSW5zZXRzLFxuICBDb250YWluZXIsXG4gIENvbG9ycyxcbiAgVHJhbnNmb3JtLFxuICBNYXRyaXg0LFxuICBDZW50ZXIsXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIEV4YW1wbGVXaWRnZXQgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIkV4YW1wbGVXaWRnZXRcIik7XG4gIH1cblxuICBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VFeGFtcGxlVHJhbnNmb3JtKCk7XG4gIH1cbn1cblxuY2xhc3MgUGFnZUV4YW1wbGVUcmFuc2Zvcm0gZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgX2RpdmlkZXJDb250YWluZXIodmFsdWUgPSAxMjAuMCkge1xuICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHsgaGVpZ2h0OiB2YWx1ZSB9KTtcbiAgfVxuXG4gIF9kZWZhdWx0Q29udGFpbmVyKHRleHQpIHtcbiAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgIGhlaWdodDogMTIwLjAsXG4gICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5zeW1tZXRyaWMoeyBob3Jpem9udGFsOiA4MC4wIH0pLFxuICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUsXG4gICAgICAgIGNoaWxkOiBuZXcgQ2VudGVyKHsgY2hpbGQ6IG5ldyBUZXh0KHRleHQpIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICBidWlsZChjb250ZXh0KSB7XG4gICAgbGV0IHdpZGdldCA9IG5ldyBTY2FmZm9sZCh7XG4gICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoeyB0aXRsZTogbmV3IFRleHQoXCJUcmFuc2Zvcm1cIikgfSksXG4gICAgICBib2R5OiBuZXcgTGlzdFZpZXcoe1xuICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgxMi4wKSxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBuZXcgVHJhbnNmb3JtKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogTWF0cml4NC5yb3RhdGlvblgoMC44KSxcbiAgICAgICAgICAgIGNoaWxkOiB0aGlzLl9kZWZhdWx0Q29udGFpbmVyKFwiTWF0cml4NC5yb3RhdGlvblgoMC44KVwiKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0aGlzLl9kaXZpZGVyQ29udGFpbmVyKDQwLjApLFxuICAgICAgICAgIG5ldyBUcmFuc2Zvcm0oe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBNYXRyaXg0LnJvdGF0aW9uWSgwLjgpLFxuICAgICAgICAgICAgY2hpbGQ6IHRoaXMuX2RlZmF1bHRDb250YWluZXIoXCJNYXRyaXg0LnJvdGF0aW9uWSgwLjgpXCIpLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHRoaXMuX2RpdmlkZXJDb250YWluZXIoNDAuMCksXG4gICAgICAgICAgbmV3IFRyYW5zZm9ybSh7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IE1hdHJpeDQucm90YXRpb25aKDAuMiksXG4gICAgICAgICAgICBjaGlsZDogdGhpcy5fZGVmYXVsdENvbnRhaW5lcihcIk1hdHJpeDQucm90YXRpb25aKDAuMilcIiksXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGhpcy5fZGl2aWRlckNvbnRhaW5lcig4MC4wKSxcbiAgICAgICAgICBuZXcgVHJhbnNmb3JtKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogTWF0cml4NC5za2V3KDAuMiwgMC4xKSxcbiAgICAgICAgICAgIGNoaWxkOiB0aGlzLl9kZWZhdWx0Q29udGFpbmVyKFwiTWF0cml4NC5za2V3KDAuMiwgMC4xKVwiKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0aGlzLl9kaXZpZGVyQ29udGFpbmVyKDQwLjApLFxuICAgICAgICBdLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIHdpZGdldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgRXhhbXBsZVdpZGdldCB9O1xuIiwibGV0IHtcbiAgTVhKU0xvZyxcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1dpZGdldFN0YXRlLFxuICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgQ29udGFpbmVyLFxuICBMaXN0VGlsZSxcbiAgQ2VudGVyLFxuICBDb2xvcixcbiAgQXBwQmFyLFxuICBTbmFja0JhcixcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIEVkZ2VJbnNldHMsXG4gIENvbG9ycyxcbiAgSWNvbkJ1dHRvbixcbiAgRmxhdEJ1dHRvbixcbiAgUmFpc2VkQnV0dG9uLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbixcbiAgQ29sdW1uLFxuICBSb3csXG4gIERyb3Bkb3duQnV0dG9uLFxuICBEcm9wZG93bk1lbnVJdGVtLFxuICBNYWluQXhpc0FsaWdubWVudCxcbiAgVGV4dFN0eWxlLFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIEJ1dHRvbkJhcixcbiAgTWFpbkF4aXNTaXplLFxuICBUZXh0RGVjb3JhdGlvbixcbiAgUmljaFRleHQsXG4gIFRleHRTcGFuLFxuICBFeHBhbmRlZCxcbiAgRm9udFdlaWdodCxcbiAgVGV4dEZvcm1GaWVsZCxcbiAgSW5wdXREZWNvcmF0aW9uLFxuICBVbmRlcmxpbmVJbnB1dEJvcmRlcixcbiAgVGV4dElucHV0VHlwZSxcbiAgU2l6ZWRCb3gsXG4gIFRleHRGaWVsZCxcbiAgVGV4dEVkaXRpbmdDb250cm9sbGVyLFxuICBMaXN0VmlldyxcbiAgU2xpZGVyLFxuICBJY29ucyxcbiAgVGV4dERlY29yYXRpb25TdHlsZSxcbiAgVGV4dE92ZXJmbG93LFxuICBQYWRkaW5nLFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jb25zdCB7IFNlY3Rpb25UaXRsZSB9ID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudC9zZWN0aW9uX3RpdGxlLmpzXCIpO1xuXG5jbGFzcyBFeGFtcGxlV2lkZ2V0IGV4dGVuZHMgTVhKU1N0YXRlbGVzc1dpZGdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiRXhhbXBsZVdpZGdldFwiKTtcbiAgfVxuXG4gIGJ1aWxkKGNvbnRleHQpIHtcbiAgICBsZXQgd2lkZ2V0ID0gbmV3IFNjYWZmb2xkKHtcbiAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIlRleHRcIiksXG4gICAgICB9KSxcbiAgICAgIGJvZHk6IG5ldyBMaXN0Vmlldyh7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgbmV3IFNlY3Rpb25UaXRsZShcIuaZrumAmuaWh+acrFwiKSxcbiAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KFwi6K6+572u5paH5pys6aKc6ImyXCIsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMub3JhbmdlLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBTZWN0aW9uVGl0bGUoXCLlr4zmlofmnKxcIiksXG4gICAgICAgICAgbmV3IFBhZGRpbmcoe1xuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTApLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBSaWNoVGV4dCh7XG4gICAgICAgICAgICAgIHRleHQ6IG5ldyBUZXh0U3Bhbih7XG4gICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgY29sb3I6IG5ldyBDb2xvcigweGZmZmY4YzAwKSxcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxOC4wLFxuICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogVGV4dERlY29yYXRpb24udW5kZXJsaW5lLFxuICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbkNvbG9yOiBDb2xvcnMub3JhbmdlLFxuICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvblN0eWxlOiBUZXh0RGVjb3JhdGlvblN0eWxlLmRhc2hlZCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0ZXh0OlxuICAgICAgICAgICAgICAgICAgXCLotoXplb/mlofmoYhyaWNoIHRleHTvvIzotoXplb/mlofmoYhyaWNoIHRleHTvvIzotoXplb/mlofmoYhyaWNoIHRleHTvvIzotoXplb/mlofmoYhyaWNoIHRleHTvvIzotoXplb/mlofmoYhyaWNoIHRleHTvvIzotoXplb/mlofmoYhyaWNoIHRleHRcIixcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgbmV3IFRleHRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogXCIgc3R5bGUgIFwiLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ib2xkLFxuICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IFRleHREZWNvcmF0aW9uLm5vbmUsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBuZXcgVGV4dFNwYW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcInlvdXIgdGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCxcbiAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBUZXh0RGVjb3JhdGlvbi5ub25lLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBvdmVyZmxvdzogVGV4dE92ZXJmbG93LmVsbGlwc2lzLFxuICAgICAgICAgICAgICBtYXhMaW5lczogOTksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEV4YW1wbGVXaWRnZXQsXG59O1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL0EvQWxpZ24uanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbGlnbi5qc1wiLFxuXHRcIi4vQS9BbmltYXRlZEJ1aWxkZXIuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbmltYXRlZEJ1aWxkZXIuanNcIixcblx0XCIuL0EvQW5pbWF0ZWRDb250YWluZXIuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbmltYXRlZENvbnRhaW5lci5qc1wiLFxuXHRcIi4vQS9BbmltYXRlZENyb3NzRmFkZS5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9BL0FuaW1hdGVkQ3Jvc3NGYWRlLmpzXCIsXG5cdFwiLi9BL0FuaW1hdGVkRGVmYXVsdFRleHRTdHlsZS5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9BL0FuaW1hdGVkRGVmYXVsdFRleHRTdHlsZS5qc1wiLFxuXHRcIi4vQS9BbmltYXRlZE9wYWNpdHkuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbmltYXRlZE9wYWNpdHkuanNcIixcblx0XCIuL0EvQW5pbWF0ZWRQaHlzaWNhbE1vZGVsLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0EvQW5pbWF0ZWRQaHlzaWNhbE1vZGVsLmpzXCIsXG5cdFwiLi9BL0FuaW1hdGVkUG9zaXRpb25lZC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9BL0FuaW1hdGVkUG9zaXRpb25lZC5qc1wiLFxuXHRcIi4vQS9BbmltYXRlZFNpemUuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQS9BbmltYXRlZFNpemUuanNcIixcblx0XCIuL0EvQXBwYmFyLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0EvQXBwYmFyLmpzXCIsXG5cdFwiLi9BL0FzcGVjdFJhdGlvLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0EvQXNwZWN0UmF0aW8uanNcIixcblx0XCIuL0IvQmFzZWxpbmUuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQi9CYXNlbGluZS5qc1wiLFxuXHRcIi4vQi9Cb3R0b21OYXZpZ2F0aW9uQmFyLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0IvQm90dG9tTmF2aWdhdGlvbkJhci5qc1wiLFxuXHRcIi4vQi9CdXR0b25CYXIuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQi9CdXR0b25CYXIuanNcIixcblx0XCIuL0MvQ2FyZC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0NhcmQuanNcIixcblx0XCIuL0MvQ2hpcC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0NoaXAuanNcIixcblx0XCIuL0MvQ29sdW1uLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ29sdW1uLmpzXCIsXG5cdFwiLi9DL0NvbnRhaW5lci5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0NvbnRhaW5lci5qc1wiLFxuXHRcIi4vQy9DdXBlcnRpbm9BY3Rpdml0eUluZGljYXRvci5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0N1cGVydGlub0FjdGl2aXR5SW5kaWNhdG9yLmpzXCIsXG5cdFwiLi9DL0N1cGVydGlub0FsZXJ0RGlhbG9nLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ3VwZXJ0aW5vQWxlcnREaWFsb2cuanNcIixcblx0XCIuL0MvQ3VwZXJ0aW5vQnV0dG9uLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ3VwZXJ0aW5vQnV0dG9uLmpzXCIsXG5cdFwiLi9DL0N1cGVydGlub05hdmlnYXRpb25CYXIuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXBlcnRpbm9OYXZpZ2F0aW9uQmFyLmpzXCIsXG5cdFwiLi9DL0N1cGVydGlub1BhZ2VTY2FmZm9sZC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0N1cGVydGlub1BhZ2VTY2FmZm9sZC5qc1wiLFxuXHRcIi4vQy9DdXBlcnRpbm9TbGlkZXIuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXBlcnRpbm9TbGlkZXIuanNcIixcblx0XCIuL0MvQ3VwZXJ0aW5vU3dpdGNoLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0MvQ3VwZXJ0aW5vU3dpdGNoLmpzXCIsXG5cdFwiLi9DL0N1cGVydGlub1RhYkJhci5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0N1cGVydGlub1RhYkJhci5qc1wiLFxuXHRcIi4vQy9DdXBlcnRpbm9UYWJTY2FmZm9sZC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9DL0N1cGVydGlub1RhYlNjYWZmb2xkLmpzXCIsXG5cdFwiLi9DL0N1c3RvbU11bHRpQ2hpbGRMYXlvdXQuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXN0b21NdWx0aUNoaWxkTGF5b3V0LmpzXCIsXG5cdFwiLi9DL0N1c3RvbVNjcm9sbFZpZXcuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvQy9DdXN0b21TY3JvbGxWaWV3LmpzXCIsXG5cdFwiLi9EL0RlY29yYXRlZEJveC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9EL0RlY29yYXRlZEJveC5qc1wiLFxuXHRcIi4vRC9EZWNvcmF0ZWRCb3hUcmFuc2l0aW9uLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0QvRGVjb3JhdGVkQm94VHJhbnNpdGlvbi5qc1wiLFxuXHRcIi4vRC9EZWZhdWx0VGV4dFN0eWxlLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0QvRGVmYXVsdFRleHRTdHlsZS5qc1wiLFxuXHRcIi4vRC9Ecm9wZG93bkJ1dHRvbi5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9EL0Ryb3Bkb3duQnV0dG9uLmpzXCIsXG5cdFwiLi9FL0V4cGFuZGVkLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0UvRXhwYW5kZWQuanNcIixcblx0XCIuL0YvRml0dGVkQm94LmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0YvRml0dGVkQm94LmpzXCIsXG5cdFwiLi9GL0ZsYXRCdXR0b24uanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvRi9GbGF0QnV0dG9uLmpzXCIsXG5cdFwiLi9GL0Zsb2F0aW5nQWN0aW9uQnV0dG9uLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0YvRmxvYXRpbmdBY3Rpb25CdXR0b24uanNcIixcblx0XCIuL0YvRmx1dHRlckxvZ28uanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvRi9GbHV0dGVyTG9nby5qc1wiLFxuXHRcIi4vRi9GcmFjdGlvbmFsbHlTaXplZEJveC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9GL0ZyYWN0aW9uYWxseVNpemVkQm94LmpzXCIsXG5cdFwiLi9HL0dlc3R1cmVEZXRlY3Rvci5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9HL0dlc3R1cmVEZXRlY3Rvci5qc1wiLFxuXHRcIi4vRy9HcmlkVmlldy5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9HL0dyaWRWaWV3LmpzXCIsXG5cdFwiLi9IL0hlcm8uanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvSC9IZXJvLmpzXCIsXG5cdFwiLi9JL0ljb25CdXR0b24uanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvSS9JY29uQnV0dG9uLmpzXCIsXG5cdFwiLi9JL0ltYWdlLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0kvSW1hZ2UuanNcIixcblx0XCIuL0kvSW5kZXhlZFN0YWNrLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0kvSW5kZXhlZFN0YWNrLmpzXCIsXG5cdFwiLi9JL0ludHJpbnNpY0hlaWdodC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9JL0ludHJpbnNpY0hlaWdodC5qc1wiLFxuXHRcIi4vSS9JbnRyaW5zaWNXaWR0aC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9JL0ludHJpbnNpY1dpZHRoLmpzXCIsXG5cdFwiLi9ML0xpbWl0ZWRCb3guanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvTC9MaW1pdGVkQm94LmpzXCIsXG5cdFwiLi9ML0xpc3RCb2R5LmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL0wvTGlzdEJvZHkuanNcIixcblx0XCIuL0wvTGlzdFRpbGUuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvTC9MaXN0VGlsZS5qc1wiLFxuXHRcIi4vTC9MaXN0Vmlldy5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9ML0xpc3RWaWV3LmpzXCIsXG5cdFwiLi9NL01hdGVyaWFsQXBwLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL00vTWF0ZXJpYWxBcHAuanNcIixcblx0XCIuL00vTWVkaWFRdWVyeS5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9NL01lZGlhUXVlcnkuanNcIixcblx0XCIuL04vTmF2aWdhdG9yLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL04vTmF2aWdhdG9yLmpzXCIsXG5cdFwiLi9TL1N3aXRjaC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy9TL1N3aXRjaC5qc1wiLFxuXHRcIi4vVy9XcmFwLmpzXCI6IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL1cvV3JhcC5qc1wiLFxuXHRcIi4vaW5kZXguanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvaW5kZXguanNcIixcblx0XCIuL3QvVGFibGUuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvdC9UYWJsZS5qc1wiLFxuXHRcIi4vdC9UZXh0RmllbGQuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvdC9UZXh0RmllbGQuanNcIixcblx0XCIuL3QvVGhlbWUuanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvdC9UaGVtZS5qc1wiLFxuXHRcIi4vdC9UcmFuc2Zvcm0uanNcIjogXCIuL2xpYi9hcHBfZGVtby93aWRnZXRfZXhhbXBsZXMvdC9UcmFuc2Zvcm0uanNcIixcblx0XCIuL3QvdGV4dC5qc1wiOiBcIi4vbGliL2FwcF9kZW1vL3dpZGdldF9leGFtcGxlcy90L3RleHQuanNcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiLi9saWIvYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzIHN5bmMgcmVjdXJzaXZlIF5cXFxcLlxcXFwvLipcXFxcLmpzJFwiOyIsIlxuXG4vL2dsb2JhbF9jb25maWcuanMg5q2j5byP5byA5aeL77yM8J+YnVxuXG5sZXQge1xuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBUaGVtZURhdGEsXG4gIENvbG9yLFxuICBDb2xvcnNcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxuY2xhc3MgR2xvYmFsQ29uZmlnIHtcbiAgICBzdGF0aWMgZ2V0IHRoZW1lRGF0YSgpIHtcbiAgICAgIHJldHVybiBuZXcgVGhlbWVEYXRhKHticmlnaHRuZXNzOiBCcmlnaHRuZXNzLmxpZ2h0fSk7XG4gICAgfSBcblxuICAgIHN0YXRpYyBnZXQgc2VhcmNoQmFja2dyb3VuZENvbG9yKCkge1xuICAgICAgcmV0dXJuIG5ldyBDb2xvcigweEZGRUVFRUVFKTtcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBjYXJkQmFja2dyb3VuZENvbG9yKCkge1xuICAgICAgcmV0dXJuIENvbG9ycy53aGl0ZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IGZvbnRDb2xvcigpIHtcbiAgICAgIHJldHVybiBuZXcgQ29sb3IoMHhGRjQ0NDQ0NCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgR2xvYmFsQ29uZmlnIH07XG4iLCJcblxuLy9hcnRpY2xlLmpzIOato+W8j+W8gOWni++8jPCfmJ1cblxubGV0IHtcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5jbGFzcyBBcnRpY2xlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaGVhZFVybCxcbiAgICAgICAgdXNlcixcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICB0aW1lLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgbWFyayxcbiAgICAgICAgYWdyZWVOdW0sXG4gICAgICAgIGNvbW1lbnROdW0sIFxuICAgICAgICB7XG4gICAgICAgIGltZ1VybFxuICAgICAgICB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5oZWFkVXJsID0gaGVhZFVybDtcbiAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIHRoaXMudGltZSA9IHRpbWU7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5tYXJrID0gbWFyaztcbiAgICAgICAgdGhpcy5hZ3JlZU51bSA9IGFncmVlTnVtO1xuICAgICAgICB0aGlzLmNvbW1lbnROdW0gPSBjb21tZW50TnVtO1xuICAgICAgICB0aGlzLmltZ1VybCA9IGltZ1VybDtcbiAgICB9XG59XG5cbmxldCBhcnRpY2xlTGlzdCA9IFtcbiAgICBuZXcgQXJ0aWNsZShcbiAgICAgICAgXCJodHRwczovL3BpYzMuemhpbWcuY29tLzUwLzJiOGJlODAxMDQwOTAxMmU3Y2RkNzY0ZTFiZWZjNGQxX3MuanBnXCIsXG4gICAgICAgIFwibGVhcm5lclwiLFxuICAgICAgICBcIui1nuWQjOS6huWbnuetlFwiLFxuICAgICAgICBcIjLlsI/ml7bliY1cIixcbiAgICAgICAgXCLlnKjkuInkvZPkuK3vvIznvZfovpHkuLrku4DkuYjkvJrmiormjqfliLbmnYPkuqTnu5nnqIvlv4PvvIzpmr7pgZPku5bmsqHmnInmjqjmtYvov4flkI7mnpzlkJfvvJ9cIixcbiAgICAgICAgXCLlm6DkuLrnvZfovpHpgbXlrojkuobkurrnsbvkvKbnkIbjgILov5nkuKrkvKbnkIblpKfmpoLlsLHlj6vmsJHkuLvjgIIg5aSn5YiY5YW25a6e5piv5Liq5YW45Z6L55qE57K+6Iux5Li75LmJ6ICF77yM5Zyo5LuW56yU5LiLLi4uXCIsXG4gICAgICAgIDMyLCBcbiAgICAgICAgMTAsXG4gICAgICAgIHtpbWdVcmw6IFwiaHR0cHM6Ly9waWMyLnpoaW1nLmNvbS81MC92Mi03MTBiN2E2ZmVhMTJhNzIwMzk0NWI2NjY3OTBiNzE4MV9oZC5qcGdcIn1cbiAgICApLFxuICAgIG5ldyBBcnRpY2xlKFxuICAgICAgXCJodHRwczovL3BpYzQuemhpbWcuY29tLzUwL3YyLTlhM2NiNWQ1ZWU0MzM5YjhjZjQ0NzBlY2UxOGQ0MDRmX3MuanBnXCIsXG4gICAgICBcImxlYXJuZXJcIixcbiAgICAgIFwi5Zue562U5LqG6Zeu6aKYXCIsXG4gICAgICBcIjXlsI/ml7bliY1cIixcbiAgICAgIFwi5oiR55qE5omL5py657O757uf5piv5a6J5Y2T44CC5peg5oSP6Ze05Y+R546w6Ieq5bex55qE5bGP5bmV6KKr5Lq655uR5o6n77yM6K+36Zeu5oCO5qC35omN6IO95b275bqV5pGG6ISx6KKr55uR5o6n55qE5aSE5aKD5ZGi77yfXCIsXG4gICAgICBcIuajgOafpeS4gOS4i+S9oOaJi+acuumHjOaYr+S4jeaYr+iiq+S6uuijheS6huS7gOS5iOi9r+S7tu+8jOaKiuS9oOS4jeiupOivhueahOmdnuezu+e7n+i9r+S7tuWIoOaOieOAguS4jeS8muWIoOWwseWOu+aJvuaJi+acuuW6l+mHjOeahOWwj+WTpe+8jOS4uuS7gOS5iOi/meS5iOWkmuS6ui4uLlwiLFxuICAgICAgMzgsIFxuICAgICAgMTNcbiAgICApLFxuICAgIG5ldyBBcnRpY2xlKFxuICAgICAgICBcImh0dHBzOi8vcGljMy56aGltZy5jb20vNTAvdjItODk0M2MyMGNlY2FiMDI4ZTE5NjQ0Y2NjZjBmM2EzOGJfcy5qcGdcIixcbiAgICAgICAgXCJsZWFybmVyXCIsXG4gICAgICAgIFwi5Zue562U5LqG6Zeu6aKYXCIsXG4gICAgICAgIFwiN+Wwj+aXtuWJjVwiLFxuICAgICAgICBcIuWmguS9leivhOS7tzIwMTjlubTlronlvr3nnIHnqIvluo/orr7orqHnq57otZvvvJ9cIixcbiAgICAgICAgXCLluKbnnYDmlL/msrvku7vliqHlkozljovlipvljrvmiZPkuobmr5TotZvvvIzmiYDlubjmnIDlkI7ooqvpq5jkuK3nlJ/miqzkuobkuIDmiYvjgILmppzlj6/ku6Xop4Hlj6blpJbmn5Dlm57nrZTjgILlpKfmpoLnu4/ljoblsLHmmK/liY0uLi5cIixcbiAgICAgICAgMzgsIFxuICAgICAgICAxMyxcbiAgICAgICAge2ltZ1VybDogXCJodHRwczovL3BpYzQuemhpbWcuY29tL3YyLWE3NDkzZDY5ZjBkOGY4NDljNjM0NWY4ZjY5MzQ1NGYzXzIwMHgxMTIuanBnXCJ9XG4gICAgKSxcbiAgICBuZXcgQXJ0aWNsZShcbiAgICAgICAgXCJodHRwczovL3BpYzMuemhpbWcuY29tLzUwL3YyLTg5NDNjMjBjZWNhYjAyOGUxOTY0NGNjY2YwZjNhMzhiX3MuanBnXCIsXG4gICAgICAgIFwibGVhcm5lclwiLFxuICAgICAgICBcIuWbnuetlOS6humXrumimFwiLFxuICAgICAgICBcIjflsI/ml7bliY1cIixcbiAgICAgICAgXCLmnoHoh7TnmoTmlofmmI7mmK/ku4DkuYjmoLfnmoTvvJ/kvJrnnJ/nmoTlg4/pu5Hmmpfmo67mnpfms5XliJnkuIDmoLflr7nlhbbku5bkvY7nrYnnlJ/nianov5vooYzlsaDmnYDlkJfvvJ9cIixcbiAgICAgICAgXCLmnIDllpzmrKLnmoTkurrnianmmK/nq6DljJfmtbflkoznu7TlvrfkvYbmnIDllpzmrKLnmoTmg4XoioLljbTmmK/ov5nkuIDmrrXvvIzlnLDnkIPkuIrnmoTkurrmib/or7rnu5nku5bku6zpspzoirHlkozojaPoqokuLi5cIixcbiAgICAgICAgMzgsXG4gICAgICAgIDEzLFxuICAgICAgICB7aW1nVXJsOiBcImh0dHBzOi8vcGljMy56aGltZy5jb20vdjItYjY3YmU1MGJlNTFlMmU2ZDYxMTJhNjQ1Mjg2ODNiMDlfYi5qcGdcIn1cbiAgICApXG4gIF07XG5cbm1vZHVsZS5leHBvcnRzID0geyBBcnRpY2xlLCBhcnRpY2xlTGlzdCB9O1xuXG4iLCJcblxuLy9hc2tfcGFnZS5qcyDmraPlvI/lvIDlp4vvvIzwn5idXG5cbmxldCB7XG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNYXRlcmlhbEFwcCxcbiAgU2NhZmZvbGQsXG4gIEFwcEJhcixcbiAgQ29udGFpbmVyLFxuICBSb3csXG4gIEZsYXRCdXR0b24sXG4gIFRleHQsXG4gIEV4cGFuZGVkLFxuICBUZXh0U3R5bGUsXG4gIENvbG9ycyxcbiAgVGV4dEZpZWxkLFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sdW1uLFxuICBTaW5nbGVDaGlsZFNjcm9sbFZpZXcsXG4gIElucHV0RGVjb3JhdGlvbixcbiAgTmF2aWdhdG9yXG4gIFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5sZXQge0dsb2JhbENvbmZpZ30gPSByZXF1aXJlKFwiLi4vLi4vemhpaHUvZ2xvYmFsX2NvbmZpZy5qc1wiKTtcblxuXG5jbGFzcyBBc2tQYWdlIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0Fza1BhZ2UnKTtcbiAgICB9XG4gIFxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFza1BhZ2VTdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIEFza1BhZ2VTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG5cbiAgICBidWlsZChjb250ZXh0KXtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBNYXRlcmlhbEFwcCh7XG4gICAgICAgICAgICAvLyB0aGVtZTogR2xvYmFsQ29uZmlnLnRoZW1lRGF0YSxcbiAgICAgICAgICAgIGhvbWU6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZsYXRCdXR0b24uaWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucG9wKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUxNGMsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwi5o+Q6ZeuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDpmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwi5LiL5LiA5q2lXCIsIHtzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibGFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYm9keTogbmV3IFNpbmdsZUNoaWxkU2Nyb2xsVmlldyh7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dEZpZWxkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBJbnB1dERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnRUZXh0OiBcIuivt+i+k+WFpeagh+mimFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnRTdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMuYWxsKDE2LjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBBc2tQYWdlIH07XG5cbiIsIlxuXG4vL2ZvbGxvdy5qcyDmraPlvI/lvIDlp4vvvIzwn5idXG5cbmxldCB7XG4gIHJ1bkFwcCxcbiAgTVhKU0ZsdXR0ZXJBcHAsXG4gIE1YSlNXaWRnZXRTdGF0ZSxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBDb250YWluZXIsXG4gIFJvdyxcbiAgRmxhdEJ1dHRvbixcbiAgVGV4dCxcbiAgRXhwYW5kZWQsXG4gIFRleHRTdHlsZSxcbiAgQ29sb3JzLFxuICBBc3BlY3RSYXRpbyxcbiAgQm94RGVjb3JhdGlvbixcbiAgRGVjb3JhdGlvbkltYWdlLFxuICBOZXR3b3JrSW1hZ2UsXG4gIFJlY3QsXG4gIEJvcmRlcixcbiAgQm9yZGVyUmFkaXVzLFxuICBSYWRpdXMsXG4gIENvbG9yLFxuICBJY29uLFxuICBJY29uRGF0YSxcbiAgRWRnZUluc2V0cyxcbiAgQ29sdW1uLFxuICBGb250V2VpZ2h0LFxuICBQb3B1cE1lbnVCdXR0b24sXG4gIFBvcHVwTWVudUl0ZW0sXG4gIFNpbmdsZUNoaWxkU2Nyb2xsVmlldyxcbiAgQWxpZ25tZW50LFxuICBDaXJjbGVBdmF0YXIsXG4gIE1hdGVyaWFsUGFnZVJvdXRlLFxuICBOYXZpZ2F0b3Jcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxubGV0IHtHbG9iYWxDb25maWd9ID0gcmVxdWlyZShcIi4uL2dsb2JhbF9jb25maWcuanNcIik7XG5sZXQge2FydGljbGVMaXN0fSA9IHJlcXVpcmUoXCIuL2FydGljbGUuanNcIik7XG5sZXQge1JlcGx5UGFnZX0gPSByZXF1aXJlKFwiLi9yZXBseV9wYWdlLmpzXCIpO1xuXG5jbGFzcyBGb2xsb3cgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKFwiRm9sbG93XCIpO1xuICAgIH1cbiAgXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRm9sbG93U3RhdGUodGhpcyk7XG4gICAgfVxufVxuXG5jbGFzcyBGb2xsb3dTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG5cbiAgICB3b3Jkc0NhcmQoY29udGV4dCxhcnRpY2xlKXtcbiAgICAgICAgbGV0IG1hcmtXaWRnZXQ7XG4gICAgICAgIGlmIChhcnRpY2xlLmltZ1VybCA9PSBudWxsKSB7XG4gICAgICAgICAgICBtYXJrV2lkZ2V0ID0gbmV3IFRleHQoYXJ0aWNsZS5tYXJrLCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMyxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3JcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXJrV2lkZ2V0ID0gbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KGFydGljbGUubWFyaywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQXNwZWN0UmF0aW8oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiAzLjAgLyAyLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlZ3JvdW5kRGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBEZWNvcmF0aW9uSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgTmV0d29ya0ltYWdlKGFydGljbGUuaW1nVXJsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJTbGljZTogUmVjdC5mcm9tTFRSQigyNzAuMCwgMTgwLjAsIDEzNjAuMCwgNzMwLjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoNi4wKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjogbmV3IENvbG9yKDB4RkZGRkZGRkYpLFxuICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe1xuICAgICAgICAgICAgICAgIHRvcDogNS4wLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogNS4wXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOmZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVwbHlQYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENpcmNsZUF2YXRhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogbmV3IE5ldHdvcmtJbWFnZShhcnRpY2xlLmhlYWRVcmwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDExLjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dChcIiBcIiArIGFydGljbGUudXNlciArIFwiIFwiICsgYXJ0aWNsZS5hY3Rpb24gKyBcIiAuIFwiICsgYXJ0aWNsZS50aW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDEwLjB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoYXJ0aWNsZS50aXRsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTYuMCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMuYmxhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7dG9wOiA2LjAsIGJvdHRvbTogMi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbWFya1dpZGdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7dG9wOiA2Ln0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoYXJ0aWNsZS5hZ3JlZU51bS50b1N0cmluZygpICsgXCIg6LWe5ZCMIMK3IFwiICsgYXJ0aWNsZS5jb21tZW50TnVtLnRvU3RyaW5nKCkgKyBcIuivhOiuulwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvcHVwTWVudUJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTI2MCwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUJ1aWxkZXI6IGZ1bmN0aW9uKGNvbnRleHQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb3B1cE1lbnVJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ+mAiemhueS4gOeahOWAvCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCflsY/olL3ov5nkuKrpl67popgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9wdXBNZW51SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICfpgInpobnkuoznmoTlgLwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dCgn5Y+W5raI5YWz5rOoIGxlYXJuZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9wdXBNZW51SXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICfpgInpobnkuInnmoTlgLwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuS4vuaKpVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJpbGxib2FyZChjb250ZXh0KXtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe1xuICAgICAgICAgICAgICAgIHRvcDogNS4wLCBcbiAgICAgICAgICAgICAgICBib3R0b206IDUuMFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmNhcmRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjpbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENpcmNsZUF2YXRhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogbmV3IE5ldHdvcmtJbWFnZShcImh0dHBzOi8vcGljMS56aGltZy5jb20vNTAvdjItMGM5ZGUyMDEyY2M0YzVlOGIwMTY1N2Q5NmRhMzU1MzRfcy5qcGdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTEuMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KFwiICDlr7nllYrnvZFcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7dG9wOiAxMC4wfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwi6ICD6L+HQ1BB77yM6Z2e5ZCN54mM5aSn5a2m5Lmf6IO96L+b5ZCN5LyBXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ib2xkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE2LjAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDYuMCwgYm90dG9tOiAyLjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQXNwZWN0UmF0aW8oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3BlY3RSYXRpbzogMy4wIC8gMS4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlZ3JvdW5kRGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgRGVjb3JhdGlvbkltYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBOZXR3b3JrSW1hZ2UoXCJodHRwczovL3BpYzIuemhpbWcuY29tLzUwL3YyLTY0MTZlZjZkMzE4MTExN2EwMTc3Mjc1Mjg2ZmFjOGYzX2hkLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyU2xpY2U6IFJlY3QuZnJvbUxUUkIoMjcwLjAsIDE4MC4wLCAxMzYwLjAsIDczMC4wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDYuMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDYuMCwgYm90dG9tOiAxNC4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLov5jlnKjnvqHmhZXliKvkurrnmoTlpb3lt6XkvZzvvJ/lhY3otLnpooblj5bku7flgLwxOTgw5YWD55qE5rOo5YaM5Lya6K6h5biI6K++56iL77yM5Li66Ieq5bex5YWF55S177yBXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxLjMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7Ym90dG9tOiA4LjB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLlub/lkYpcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IEJvcmRlci5hbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoMi4wKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogMi4wLCBib3R0b206IDIuMCwgbGVmdDogMy4wLCByaWdodDogMy4wfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCIgIOafpeeci+ivpuaDhVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTE0Yywge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe2JvdHRvbTogMTAuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KXtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBTaW5nbGVDaGlsZFNjcm9sbFZpZXcoe1xuICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDUuMH0pLFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZHNDYXJkKGNvbnRleHQsYXJ0aWNsZUxpc3RbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3Jkc0NhcmQoY29udGV4dCxhcnRpY2xlTGlzdFsxXSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRzQ2FyZChjb250ZXh0LGFydGljbGVMaXN0WzJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmlsbGJvYXJkKGNvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3Jkc0NhcmQoY29udGV4dCxhcnRpY2xlTGlzdFszXSlcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBGb2xsb3cgfTtcblxuIiwiXG5cbi8vSG9tZVBhZ2UuanMg5q2j5byP5byA5aeL77yM8J+YnVxuXG5sZXQge1xuICAgIHJ1bkFwcCxcbiAgICBNWEpTRmx1dHRlckFwcCxcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBDb250YWluZXIsXG4gICAgUm93LFxuICAgIEZsYXRCdXR0b24sXG4gICAgVGV4dCxcbiAgICBFeHBhbmRlZCxcbiAgICBUZXh0U3R5bGUsXG4gICAgQ29sb3JzLFxuICAgIEJveERlY29yYXRpb24sXG4gICAgQm9yZGVyU2lkZSxcbiAgICBCb3JkZXJSYWRpdXMsXG4gICAgUmFkaXVzLFxuICAgIEljb24sXG4gICAgSWNvbkRhdGEsXG4gICAgQm9yZGVyRGlyZWN0aW9uYWwsXG4gICAgRGVmYXVsdFRhYkNvbnRyb2xsZXIsXG4gICAgVGFiQmFyLFxuICAgIFRhYixcbiAgICBUYWJCYXJWaWV3LFxuICAgIEtleSxcbiAgICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbiAgICBOYXZpZ2F0b3Jcbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxubGV0IHsgR2xvYmFsQ29uZmlnIH0gPSByZXF1aXJlKFwiLi4vZ2xvYmFsX2NvbmZpZy5qc1wiKTtcbmxldCB7IEZvbGxvdyB9ID0gcmVxdWlyZShcIi4vZm9sbG93LmpzXCIpO1xubGV0IHsgUmVjb21tZW5kIH0gPSByZXF1aXJlKFwiLi9yZWNvbW1lbmQuanNcIik7XG5sZXQgeyBIb3QgfSA9IHJlcXVpcmUoXCIuL2hvdC5qc1wiKTtcbmxldCB7IFNlYXJjaFBhZ2UgfSA9IHJlcXVpcmUoXCIuL3NlYXJjaF9wYWdlLmpzXCIpO1xubGV0IHsgQXNrUGFnZSB9ID0gcmVxdWlyZShcIi4vYXNrX3BhZ2UuanNcIik7XG5cbmNsYXNzIEhvbWVQYWdlIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJIb21lUGFnZVwiLCB7IGtleTogbmV3IEtleShcIkhvbWVQYWdlXCIpIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEhvbWVQYWdlU3RhdGUodGhpcyk7XG4gICAgfVxufVxuXG5jbGFzcyBIb21lUGFnZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICAgIGJhclNlYXJjaChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IEZsYXRCdXR0b24uaWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNlYXJjaFBhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZThiNiwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDE2LjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoXCLlnZrmnpxSMeaRhOWDj+WktOaNn+Wdj1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBuZXcgQm9yZGVyU2lkZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDE0LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMS4wXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBGbGF0QnV0dG9uLmljb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQXNrUGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMjJiLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogMTYuMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgVGV4dChcIuaPkOmXrlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuYWxsKFJhZGl1cy5jaXJjdWxhcig0LjApKSxcbiAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLnNlYXJjaEJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBidWlsZChjb250ZXh0KSB7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgRGVmYXVsdFRhYkNvbnRyb2xsZXIoe1xuICAgICAgICAgICAgbGVuZ3RoOiAzLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuYmFyU2VhcmNoKGNvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IG5ldyBUYWJCYXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxDb2xvcjogQ29sb3JzLmJsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JDb2xvcjogQ29sb3JzLmJsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnNlbGVjdGVkTGFiZWxDb2xvcjogQ29sb3JzLmJsYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiBcIuWFs+azqFwiIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiBcIuaOqOiNkFwiIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUYWIoeyB0ZXh0OiBcIueDreamnFwiIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBUYWJCYXJWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBGb2xsb3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWNvbW1lbmQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBIb3QoKVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IEhvbWVQYWdlIH07XG5cbiIsIlxuXG4vL2hvdC5qcyDmraPlvI/lvIDlp4vvvIzwn5idXG5cbmxldCB7XG4gICAgcnVuQXBwLFxuICAgIE1YSlNGbHV0dGVyQXBwLFxuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgQ29udGFpbmVyLFxuICAgIFJvdyxcbiAgICBGbGF0QnV0dG9uLFxuICAgIFRleHQsXG4gICAgRXhwYW5kZWQsXG4gICAgVGV4dFN0eWxlLFxuICAgIENvbG9ycyxcbiAgICBBc3BlY3RSYXRpbyxcbiAgICBCb3hEZWNvcmF0aW9uLFxuICAgIEJvcmRlclNpZGUsXG4gICAgRGVjb3JhdGlvbkltYWdlLFxuICAgIE5ldHdvcmtJbWFnZSxcbiAgICBSZWN0LFxuICAgIEJvcmRlclJhZGl1cyxcbiAgICBSYWRpdXMsXG4gICAgSWNvbixcbiAgICBJY29uRGF0YSxcbiAgICBCb3JkZXJEaXJlY3Rpb25hbCxcbiAgICBFZGdlSW5zZXRzLFxuICAgIENvbHVtbixcbiAgICBGb250V2VpZ2h0LFxuICAgIFNpbmdsZUNoaWxkU2Nyb2xsVmlldyxcbiAgICBBbGlnbm1lbnQsXG4gICAgTWF0ZXJpYWxQYWdlUm91dGUsXG4gICAgTmF2aWdhdG9yXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmxldCB7R2xvYmFsQ29uZmlnfSA9IHJlcXVpcmUoXCIuLi9nbG9iYWxfY29uZmlnLmpzXCIpO1xubGV0IHtxdWVzdGlvbkxpc3R9ID0gcmVxdWlyZShcIi4vcXVlc3Rpb24uanNcIik7XG5sZXQge1F1ZXN0aW9uUGFnZX0gPSByZXF1aXJlKFwiLi9xdWVzdGlvbl9wYWdlLmpzXCIpO1xuXG5jbGFzcyBIb3QgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKFwiSG90XCIpO1xuICAgIH1cbiAgXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSG90U3RhdGUodGhpcyk7XG4gICAgfVxufVxuXG5jbGFzcyBIb3RTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgXG4gICAgaG90Q2FyZChjb250ZXh0LHF1ZXN0aW9uKXtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuY2FyZEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogbmV3IEJvcmRlclNpZGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ibGFjazEyLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEuMFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOmZ1bmN0aW9uKCl7XG4gICAgIFxuICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFF1ZXN0aW9uUGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7dG9wOiA4LjAsIGJvdHRvbTogOC4wfSksXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24ub3JkZXIse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBxdWVzdGlvbi5vcmRlciA8PSBcIjAzXCIgPyBDb2xvcnMucmVkIDogQ29sb3JzLnllbGxvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTguMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbi5yaXNlICE9IG51bGwgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZDgsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDEwLjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHQocXVlc3Rpb24ucmlzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5yZWQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTAuMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5ldyBDb250YWluZXIoKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiA2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQocXVlc3Rpb24udGl0bGUse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE2LjAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMS4xLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHtib3R0b206IDEwLjAscmlnaHQ6IDQuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24ubWFyayAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHF1ZXN0aW9uLm1hcmssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcn0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe2JvdHRvbTogOC4wLHJpZ2h0OiA0LjB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQocXVlc3Rpb24uaG90TnVtLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3J9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBBc3BlY3RSYXRpbyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3BlY3RSYXRpbzogMy4wIC8gMi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVncm91bmREZWNvcmF0aW9uOm5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBEZWNvcmF0aW9uSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBOZXR3b3JrSW1hZ2UocXVlc3Rpb24uaW1nVXJsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclNsaWNlOiBSZWN0LmZyb21MVFJCKDI3MC4wLCAxODAuMCwgMTM2MC4wLCA3MzAuMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoNi4wKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpe1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IFNpbmdsZUNoaWxkU2Nyb2xsVmlldyh7XG4gICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogNS4wfSksXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3RDYXJkKGNvbnRleHQscXVlc3Rpb25MaXN0WzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG90Q2FyZChjb250ZXh0LHF1ZXN0aW9uTGlzdFsxXSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvdENhcmQoY29udGV4dCxxdWVzdGlvbkxpc3RbMl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3RDYXJkKGNvbnRleHQscXVlc3Rpb25MaXN0WzNdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG90Q2FyZChjb250ZXh0LHF1ZXN0aW9uTGlzdFs0XSlcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBIb3QgfTtcblxuIiwiXG5cbi8vcXVlc3Rpb24uanMg5q2j5byP5byA5aeL77yM8J+YnVxuXG5sZXQge1xuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmNsYXNzIFF1ZXN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgb3JkZXIsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICBob3ROdW0sXG4gICAgICAgIGltZ1VybCxcbiAgICAgICAge21hcmssXG4gICAgICAgIHJpc2V9PSB7fVxuICAgICkge1xuICAgICAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5ob3ROdW0gPSBob3ROdW07XG4gICAgICAgIHRoaXMuaW1nVXJsID0gaW1nVXJsO1xuICAgICAgICB0aGlzLm1hcmsgPSBtYXJrO1xuICAgICAgICB0aGlzLnJpc2UgPSByaXNlO1xuICAgIH1cbn1cblxubGV0IHF1ZXN0aW9uTGlzdCA9IFtcbiAgICBuZXcgUXVlc3Rpb24oXCIwMVwiLCBcIuS6huS4jei1t+eahOaWsOaXtuS7o++8jOS4lueVjOernuS6ieS4reeahOS4reWbveWItumAoFwiLCBcIjQ0Mjcg5LiH54Ot5bqmXCIsIFwiaHR0cHM6Ly9waWMyLnpoaW1nLmNvbS81MC92Mi03MTBiN2E2ZmVhMTJhNzIwMzk0NWI2NjY3OTBiNzE4MV9oZC5qcGdcIiksXG4gICAgbmV3IFF1ZXN0aW9uKFwiMDJcIiwgXCLkuIDkuKrlpbPnlJ/mgI7moLfmiY3nrpfop4Hov4fkuJbpnaLvvJ9cIiwgXCI0MTU3IOS4h+eDreW6plwiLCBcImh0dHBzOi8vcGljMy56aGltZy5jb20vNTAvdjItNTZkY2E5OWNkODcxOGY5MzAzZDQzYjMwMTUzNDJiYTdfaGQuanBnXCIsIHtyaXNlOiBcIjNcIiwgbWFyazogXCLmiYDosJPkuJbpnaLvvIzlsLHmmK/kuJbnlYznmoTmr4/kuIDpnaJcIn0pLFxuICAgIG5ldyBRdWVzdGlvbihcIjAzXCIsIFwi5aaC5p6c5pyx5qCH5rKh5q2777yM5YmK6Jep55qE6K+d77yM5pyx5qOj5Lya6YCg5Y+N5ZCX77yfXCIsIFwiNDAwOSDkuIfng63luqZcIiwgXCJodHRwczovL3BpYzQuemhpbWcuY29tL3YyLTA5NWQyYjQ4OTcwODg5YjEwODI0N2U2ZDJkZDBmYTZiX2IuanBnXCIpLFxuICAgIG5ldyBRdWVzdGlvbihcIjA0XCIsIFwi5aaC5L2V57yW6K+RIExpbnV4IOWGheaguO+8n1wiLCBcIjMxMTAg5LiH54Ot5bqmXCIsIFwiaHR0cHM6Ly9waWMzLnpoaW1nLmNvbS84MC92Mi0xZWExYjBjZjgwYzg1Yjg4ODkzYjJiOTdhOTRkN2U3MV9oZC5qcGdcIiwge21hcms6IFwi5YaF5qC477yf5ZG15ZG1XCJ9KSxcbiAgICBuZXcgUXVlc3Rpb24oXCIwNVwiLCBcIuWmguS9leeci+W+heWwhuelnuivneaVheS6i+aLjeaIkOeUteW9sei/meS7tuS6i++8n1wiLCBcIjIxMTkg5LiH54Ot5bqmXCIsIFwiaHR0cHM6Ly9waWM0LnpoaW1nLmNvbS81MC92Mi0yNjdiMWRkYTYyZjc3MGJkMmJkMTNjYjU0NTExN2I3OF9oZC5qcGdcIiwge3Jpc2U6IFwiM1wifSlcbl07XG5cbm1vZHVsZS5leHBvcnRzID0geyBRdWVzdGlvbiwgcXVlc3Rpb25MaXN0IH07XG4iLCJcblxuLy9xdWVzdGlvbl9wYWdlLmpzIOato+W8j+W8gOWni++8jPCfmJ1cblxubGV0IHtcbiAgICBydW5BcHAsXG4gICAgTVhKU0ZsdXR0ZXJBcHAsXG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBNYXRlcmlhbEFwcCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgQ29udGFpbmVyLFxuICAgIFJvdyxcbiAgICBGbGF0QnV0dG9uLFxuICAgIFRleHQsXG4gICAgRXhwYW5kZWQsXG4gICAgVGV4dFN0eWxlLFxuICAgIENvbG9ycyxcbiAgICBCb3hEZWNvcmF0aW9uLFxuICAgIEJvcmRlclNpZGUsXG4gICAgTmV0d29ya0ltYWdlLFxuICAgIEljb24sXG4gICAgSWNvbkRhdGEsXG4gICAgQm9yZGVyRGlyZWN0aW9uYWwsXG4gICAgRWRnZUluc2V0cyxcbiAgICBDb2x1bW4sXG4gICAgRm9udFdlaWdodCxcbiAgICBQb3B1cE1lbnVCdXR0b24sXG4gICAgUG9wdXBNZW51SXRlbSxcbiAgICBTaW5nbGVDaGlsZFNjcm9sbFZpZXcsXG4gICAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gICAgQWxpZ25tZW50LFxuICAgIENpcmNsZUF2YXRhcixcbiAgICBCdXR0b25UZXh0VGhlbWUsXG4gICAgTWF0ZXJpYWxQYWdlUm91dGUsXG4gICAgTmF2aWdhdG9yXG5cbn0gPSByZXF1aXJlKFwiLi4vLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxubGV0IHtHbG9iYWxDb25maWd9ID0gcmVxdWlyZShcIi4uL2dsb2JhbF9jb25maWcuanNcIik7XG5sZXQge1JlcGx5UGFnZSwgQ29tbW9ufSA9IHJlcXVpcmUoXCIuL3JlcGx5X3BhZ2UuanNcIik7XG5cbmNsYXNzIFF1ZXN0aW9uUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoXCJRdWVzdGlvblBhZ2VcIik7XG4gICAgfVxuICBcbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVzdGlvblBhZ2VTdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIFF1ZXN0aW9uUGFnZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcbiAgICBcbiAgICBidWlsZChjb250ZXh0KXtcbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBNYXRlcmlhbEFwcCh7XG4gICAgICAgICAgICAvLyB0aGVtZTogR2xvYmFsQ29uZmlnLnRoZW1lRGF0YSxcbiAgICAgICAgICAgIGhvbWU6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IENvbW1vbi5zZWFyY2hJbnB1dChjb250ZXh0KVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBTaW5nbGVDaGlsZFNjcm9sbFZpZXcoe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe29uUHJlc3NlZDogZnVuY3Rpb24oKXt9LCBjaGlsZDogbmV3IFRleHQoXCLniannkIblraZcIiksIGNvbG9yOiBHbG9iYWxDb25maWcuc2VhcmNoQmFja2dyb3VuZENvbG9yfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3JpZ2h0OiA4LjB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe29uUHJlc3NlZDogZnVuY3Rpb24oKXt9LCBjaGlsZDogbmV3IFRleHQoXCLkuInkvZMo5Lmm57GNKVwiKSwgY29sb3I6IEdsb2JhbENvbmZpZy5zZWFyY2hCYWNrZ3JvdW5kQ29sb3J9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7cmlnaHQ6IDguMH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgRmxhdEJ1dHRvbih7b25QcmVzc2VkOiBmdW5jdGlvbigpe30sIGNoaWxkOiBuZXcgVGV4dChcIuiEkea0nijnvZHnu5znlKjor60pXCIpLCBjb2xvcjogR2xvYmFsQ29uZmlnLnNlYXJjaEJhY2tncm91bmRDb2xvcn0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHtsZWZ0OiAxNi4wLCB0b3A6IDguMCwgYm90dG9tOiA4LjAsIHJpZ2h0OiAxNi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuY2FyZEJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLjgIrkuInkvZPjgIvph4znmoTmsLTmu7TmnInlj6/og73ooqvliLbpgKDlh7rmnaXlkJc/XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGQsIGZvbnRTaXplOiAxOC4wLCBoZWlnaHQ6IDEuMywgY29sb3I6IENvbG9ycy5ibGFja30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe2xlZnQ6IDE2LjAsIGJvdHRvbTogOC4wLCByaWdodDogMTYuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmNhcmRCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCLlpoLmnpzvvIzku4XogIPomZHlhbblu7bplb/lvLrnm7jkupLkvZznlKjlipvnmoTnibnmgKfvvIzogIzkuI3ogIPomZHlhbbnm7Top5LovazlvK/nmoTnibnmgKfvvIzpgqPkuYjmsLTmu7Tog73ooqvliLbpgKDlh7rmnaXlkJfvvJ/mjaLlj6Xor53or7TvvIzlvLrnm7jkupLkvZznlKjlipvog73lpJ/ku6XlvbHlk43lvq7op4LniannkIbph4/nmoTmlrnlvI/lu7bplb/lkJfvvJ9cIix7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7aGVpZ2h0OiAxLjQsIGZvbnRTaXplOiAxNi4wLCBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcn0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogVGV4dEFsaWduLnN0YXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe2xlZnQ6IDE2LjAsIHJpZ2h0OiAxNi4wLCBib3R0b206IDguMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBuZXcgQm9yZGVyU2lkZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAgQ29sb3JzLmJsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5jYXJkQmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IEZsYXRCdXR0b24uaWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTdmMCwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoXCLpgoDor7flm57nrZRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRoZW1lOiBCdXR0b25UZXh0VGhlbWUuYWNjZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7ZW5kOiBuZXcgQm9yZGVyU2lkZSh7Y29sb3I6IENvbG9ycy5ibGFja30pfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IEZsYXRCdXR0b24uaWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTNhZSwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoXCLlhpnlm57nrZRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRoZW1lOiBCdXR0b25UZXh0VGhlbWUuYWNjZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7ZW5kOiBuZXcgQm9yZGVyU2lkZSh7Y29sb3I6IENvbG9ycy5ibGFja30pfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmNhcmRCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogNC4wLCBib3R0b206IDQuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCIxNzPkuKrlm57nrZRcIiwge3N0eWxlOiBuZXcgVGV4dFN0eWxlKHtjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcn0pfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHtsZWZ0OiAxNi4wfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUG9wdXBNZW51QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtQnVpbGRlcjogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb3B1cE1lbnVJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ+i0qOmHjycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0KCfmjInotKjph4/mjpLluo8nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlNWNhLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSksIHtjb2xvcjogQ29sb3JzLmJsdWV9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb3B1cE1lbnVJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ+aXtumXtCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCfmjInml7bpl7TmjpLluo8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dChcIuaMiei0qOmHj+aOkuW6j1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcn0pfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTMxMywge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3J9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlclJpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5jYXJkQmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7Ym90dG9tOiA1LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXBseVBhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENpcmNsZUF2YXRhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBuZXcgTmV0d29ya0ltYWdlKFwiaHR0cHM6Ly9waWMzLnpoaW1nLmNvbS9mYzRjMWNiMzRjMjkwMWExYThjMDU0ODhiYmQ3NmZhMl94cy5qcGdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMS4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHQoXCIg5ri454mn55SxXCIsIHtzdHlsZTogbmV3IFRleHRTdHlsZSh7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3J9KX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogMTAuMH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIuesrOS4gO+8jOWHoOW5tOWJjeaIkei3n+S4gOS4qjk4NTIxMee6p+WIq+Wkp+WtpueahOeJqeeQhuexu+WtpuenkeaVmeaOiOiBiui/h+i/meS4qumXrumimOOAguS7luW+iOS4peiCg+eahOihqOekuu+8jOS9v+eUqOW8uuS6kuS9nOeUqOWKm+S4uuW3peWFt+WcqOWOn+WtkOinkuW6puWKoOW3peWHuui/meenjeawtOW5s+eahOadkOaWme+8jOWvueS6uuexu+ebruWJjeeahOeJqeeQhi4uLlwiLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7aGVpZ2h0OiAxLjMsIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDYuMCwgYm90dG9tOiAxNC4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwiMUsg6LWe5ZCMIMK3IDI2MiDor4TorrogwrcgMTAg5aSp5YmNXCIsIHtzdHlsZTogbmV3IFRleHRTdHlsZSh7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3J9KX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe2JvdHRvbTogMTAuMH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgUXVlc3Rpb25QYWdlIH07XG4iLCJcblxuLy9yZWNvbW1lbmQuanMg5q2j5byP5byA5aeL77yM8J+YnVxuXG5sZXQge1xuICAgIHJ1bkFwcCxcbiAgICBNWEpTRmx1dHRlckFwcCxcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIENvbnRhaW5lcixcbiAgICBSb3csXG4gICAgRmxhdEJ1dHRvbixcbiAgICBUZXh0LFxuICAgIEV4cGFuZGVkLFxuICAgIFRleHRTdHlsZSxcbiAgICBDb2xvcnMsXG4gICAgQXNwZWN0UmF0aW8sXG4gICAgQm94RGVjb3JhdGlvbixcbiAgICBEZWNvcmF0aW9uSW1hZ2UsXG4gICAgTmV0d29ya0ltYWdlLFxuICAgIFJlY3QsXG4gICAgQm9yZGVyUmFkaXVzLFxuICAgIFJhZGl1cyxcbiAgICBJY29uLFxuICAgIEljb25EYXRhLFxuICAgIEVkZ2VJbnNldHMsXG4gICAgQ29sdW1uLFxuICAgIEZvbnRXZWlnaHQsXG4gICAgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3LFxuICAgIEFsaWdubWVudCxcbiAgICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbiAgICBOYXZpZ2F0b3JcbiAgXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmxldCB7R2xvYmFsQ29uZmlnfSA9IHJlcXVpcmUoXCIuLi9nbG9iYWxfY29uZmlnLmpzXCIpO1xubGV0IHthcnRpY2xlTGlzdH0gPSByZXF1aXJlKFwiLi9hcnRpY2xlLmpzXCIpO1xubGV0IHtSZXBseVBhZ2V9ID0gcmVxdWlyZShcIi4vcmVwbHlfcGFnZS5qc1wiKTtcblxuY2xhc3MgUmVjb21tZW5kIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcihcIlJlY29tbWVuZFwiKTtcbiAgICB9XG4gIFxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFJlY29tbWVuZFN0YXRlKHRoaXMpO1xuICAgIH1cbn1cblxuY2xhc3MgUmVjb21tZW5kU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuICAgIFxuICAgIGNvbW1vbkNhcmQoY29udGV4dCxhcnRpY2xlKXtcbiAgICAgICAgbGV0IG1hcmtXaWRnZXQ7XG4gICAgICAgIGlmIChhcnRpY2xlLmltZ1VybCA9PSBudWxsKSB7XG4gICAgICAgICAgICBtYXJrV2lkZ2V0ID0gbmV3IFRleHQoXG4gICAgICAgICAgICAgICAgYXJ0aWNsZS51c2VyICsgXCIgOiAgXCIgKyBhcnRpY2xlLm1hcmsse1xuICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxLjMsIFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvclxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1hcmtXaWRnZXQgPSBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFydGljbGUudXNlciArIFwiIDogIFwiICsgYXJ0aWNsZS5tYXJrLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe2hlaWdodDogMS4zLCBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcn0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQXNwZWN0UmF0aW8oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiAzLjAgLyAyLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6bmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVncm91bmREZWNvcmF0aW9uOm5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgRGVjb3JhdGlvbkltYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IE5ldHdvcmtJbWFnZShhcnRpY2xlLmltZ1VybCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyU2xpY2U6IFJlY3QuZnJvbUxUUkIoMjcwLjAsIDE4MC4wLCAxMzYwLjAsIDczMC4wKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDYuMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5jYXJkQmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogNS4wLCBib3R0b206IDUuMH0pLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICBvblByZXNzZWQ6ZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXBseVBhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnRpY2xlLnRpdGxlLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe2ZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCwgZm9udFNpemU6IDE2LjAsIGhlaWdodDogMS4zLCBjb2xvcjogQ29sb3JzLmJsYWNrfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7dG9wOiA2LjAsIGJvdHRvbTogMi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbWFya1dpZGdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7dG9wOiA2LjAsIGJvdHRvbTogMTQuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KGFydGljbGUuYWdyZWVOdW0udG9TdHJpbmcoKSArIFwiIOi1nuWQjCDCtyBcIiArIGFydGljbGUuY29tbWVudE51bS50b1N0cmluZygpICsgXCLor4TorrpcIix7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcn0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUyNjAsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSwge2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7Ym90dG9tOiAxMC4wfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCl7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3KHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7dG9wOiA1LjB9KSxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1vbkNhcmQoY29udGV4dCxhcnRpY2xlTGlzdFswXSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1vbkNhcmQoY29udGV4dCxhcnRpY2xlTGlzdFsxXSlcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBSZWNvbW1lbmQgfTtcblxuIiwiXG5cbi8vcmVwbGF5X3BhZ2UuanMg5q2j5byP5byA5aeL77yM8J+YnVxuXG5sZXQge1xuICAgIHJ1bkFwcCxcbiAgICBNWEpTRmx1dHRlckFwcCxcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIE1hdGVyaWFsQXBwLFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBDb250YWluZXIsXG4gICAgUm93LFxuICAgIEZsYXRCdXR0b24sXG4gICAgVGV4dCxcbiAgICBFeHBhbmRlZCxcbiAgICBUZXh0U3R5bGUsXG4gICAgQ29sb3JzLFxuICAgIEJveERlY29yYXRpb24sXG4gICAgQm9yZGVyU2lkZSxcbiAgICBOZXR3b3JrSW1hZ2UsXG4gICAgQm9yZGVyUmFkaXVzLFxuICAgIFJhZGl1cyxcbiAgICBUZXh0RmllbGQsXG4gICAgSWNvbixcbiAgICBJY29uRGF0YSxcbiAgICBCb3JkZXJEaXJlY3Rpb25hbCxcbiAgICBFZGdlSW5zZXRzLFxuICAgIENvbHVtbixcbiAgICBGb250V2VpZ2h0LFxuICAgIFNpbmdsZUNoaWxkU2Nyb2xsVmlldyxcbiAgICBJbnB1dERlY29yYXRpb24sXG4gICAgTWFpbkF4aXNBbGlnbm1lbnQsXG4gICAgQWxpZ25tZW50LFxuICAgIENpcmNsZUF2YXRhcixcbiAgICBCdXR0b25UZXh0VGhlbWUsXG4gICAgTGlzdFRpbGUsXG4gICAgSWNvbkJ1dHRvbixcbiAgICBSYWlzZWRCdXR0b24sXG4gICAgQm90dG9tQXBwQmFyLFxuICAgIElucHV0Qm9yZGVyLFxuICAgIE1hdGVyaWFsUGFnZVJvdXRlLFxuICAgIE5hdmlnYXRvclxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5sZXQge0dsb2JhbENvbmZpZ30gPSByZXF1aXJlKFwiLi4vZ2xvYmFsX2NvbmZpZy5qc1wiKTtcbi8vIGxldCB7UXVlc3Rpb25QYWdlfSA9IHJlcXVpcmUoXCIuL3poaWh1L2hvbWUvcXVlc3Rpb25fcGFnZS5qc1wiKTtcblxuY2xhc3MgQ29tbW9uIHtcbiAgICBzdGF0aWMgc2VhcmNoSW5wdXQoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogRmxhdEJ1dHRvbi5pY29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucG9wKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVjNCwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3J9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDYwLjBcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBFeHBhbmRlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHRGaWVsZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogSW5wdXREZWNvcmF0aW9uLmNvbGxhcHNlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnRUZXh0OiBcIuaQnOe0ouavlOS5juWGheWuuVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IElucHV0Qm9yZGVyLm5vbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnRTdHlsZTogbmV3IFRleHRTdHlsZSh7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3J9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb25CdXR0b24oe2ljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU4MGQsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSwge2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXt9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgwLjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiAxOC4wXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb25CdXR0b24oe2ljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU4OTYsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSwge2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXt9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgwLjApLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogMTguMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDQuMCkpLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuc2VhcmNoQmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGhlaWdodDogMzYuMFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFJlcGx5UGFnZSBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoXCJSZXBseVBhZ2VcIik7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVwbHlQYWdlU3RhdGUodGhpcyk7XG4gICAgfVxufVxuXG5jbGFzcyBSZXBseVBhZ2VTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgXG4gICAgYnVpbGQoY29udGV4dCl7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgTWF0ZXJpYWxBcHAoe1xuICAgICAgICAgICAgLy8gdGhlbWU6IEdsb2JhbENvbmZpZy50aGVtZURhdGEsXG4gICAgICAgICAgICBob21lOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgIGFwcEJhcjogbmV3IEFwcEJhcih7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBDb21tb24uc2VhcmNoSW5wdXQoY29udGV4dClcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBib2R5OiBuZXcgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBRdWVzdGlvblBhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuS9oOiupOS4uuOAiuS4ieS9k+OAi+S4reacgOeJm+eahOaWh+aYjuaYr++8n1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTguMCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMTYuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmNhcmRCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbmV3IEJvcmRlckRpcmVjdGlvbmFsKHtib3R0b206IG5ldyBCb3JkZXJTaWRlKHtjb2xvcjogQ29sb3JzLndoaXRlMTB9KX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IEZsYXRCdXR0b24uaWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTNhZSwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoXCLlhpnlm57nrZRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRoZW1lOiBCdXR0b25UZXh0VGhlbWUuYWNjZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7ZW5kOiBuZXcgQm9yZGVyU2lkZSh7Y29sb3I6IENvbG9ycy53aGl0ZTEwfSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUXVlc3Rpb25QYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuafpeeci+WFqOmDqDEwMDAw5Liq5Zue562UID4gXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuY2FyZEJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe2JvdHRvbTogMTAuMH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IENpcmNsZUF2YXRhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBuZXcgTmV0d29ya0ltYWdlKFwiaHR0cHM6Ly9waWMzLnpoaW1nLmNvbS92Mi1jZDQ2N2JiOWJiMzFkMDM4NGYwNjVjZjBiZDY3NzkzMF94bC5qcGdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIkZsdXR0ZXJcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogbmV3IFRleHQoXCLkurrnlJ/lpoLpgIbml4XvvIzmiJHkuqbmmK/ooYzkurpcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFpbGluZzogUmFpc2VkQnV0dG9uLmljb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXt9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMTQ1LCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSksIHtjb2xvcjogQ29sb3JzLmJsYWNrfSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgVGV4dChcIuWFs+azqFwiLCB7c3R5bGU6IG5ldyBUZXh0U3R5bGUoe2NvbG9yOiBDb2xvcnMuYmxhY2t9KX0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmNhcmRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7Ym90dG9tOiBuZXcgQm9yZGVyU2lkZSh7Y29sb3I6IENvbG9ycy5ibGFja30pfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCLlm57lvZLov5DliqhcXG5cXG7kuInkvZPlrprkuYnnmoTpu5Hmmpfmo67mnpfnmoTlroflrpnmoLzlsYDvvIzlsLHmmK/mlofmmI7nm7jkupLmlLvlh7vlkozmr4Hnga3vvIzotorpq5jnuqfnmoTvvIzotormmI7nmb3ol4/lpb3oh6rlt7HlgZrlpb3muIXnkIbvvIznu53kuI3lgZrmjqLmtYvlr7nmlrnmlofmmI7nmoTmhJrooKLooYzkuLrjgIJcXG5cXG7nhLbogIzlvZLov5jov5Dliqjot7Plh7rkuobov5nkuKrpu5Hmmpfmo67mnpfms5XliJnvvIzkuI3njqnpu5Hmmpfmo67mnpfmiZPlh7vvvIzkuI3kvYbmjqLmtYvliKvnmoTlroflrpnmlofmmI7vvIzogIzkuJTov5jmt7HlhaXkuobop6Plr7nmlrnmlofmmI7vvIzogIzkuJTmmK/lhajlroflrpnnmoTmiYDmnInmlofmmI7jgIJcXG5cXG7ov5nmmK/kuIDnp43lpJrkuYjoh6rkv6HnmoTnp5HmioDlrp7lipvlkYDvvIzmiY3og73ot7Plh7rpu5Hmmpfmo67mnpfnmoTnlJ/lrZjms5XliJnlkYBcIix7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxLjQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxNi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IFRleHRBbGlnbi5zdGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLmFsbCgxNi4wKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYm90dG9tTmF2aWdhdGlvbkJhcjogbmV3IEJvdHRvbUFwcEJhcih7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBGbGF0QnV0dG9uLmljb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgVGV4dChcIui1nuWQjCAxMCBLXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLnNlYXJjaEJhY2tncm91bmRDb2xvciwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVjNywge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7bGVmdDogMTYuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1YzUsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5hbGwoMC4wKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7bGVmdDogOC4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoMi4wKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuc2VhcmNoQmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJY29uQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlODdkLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDE4LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHQoXCLmhJ/osKJcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMC4wLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEljb25CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlODM4LCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAxOC4wLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dChcIuaUtuiXj1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEljb25CdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMjUzLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAxOC4wLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dChcIjM0NVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmNhcmRCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBSZXBseVBhZ2UsIENvbW1vbiB9O1xuXG4iLCJcblxuLy9zZWFyY2hfcGFnZS5qcyDmraPlvI/lvIDlp4vvvIzwn5idXG5cbmxldCB7XG4gICAgcnVuQXBwLFxuICAgIE1YSlNGbHV0dGVyQXBwLFxuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgTWF0ZXJpYWxBcHAsXG4gICAgU2NhZmZvbGQsXG4gICAgQXBwQmFyLFxuICAgIENvbnRhaW5lcixcbiAgICBSb3csXG4gICAgRmxhdEJ1dHRvbixcbiAgICBUZXh0LFxuICAgIEV4cGFuZGVkLFxuICAgIFRleHRTdHlsZSxcbiAgICBDb2xvcnMsXG4gICAgQm94RGVjb3JhdGlvbixcbiAgICBCb3JkZXJTaWRlLFxuICAgIEJvcmRlclJhZGl1cyxcbiAgICBSYWRpdXMsXG4gICAgVGV4dEZpZWxkLFxuICAgIEljb24sXG4gICAgSWNvbkRhdGEsXG4gICAgQm9yZGVyRGlyZWN0aW9uYWwsXG4gICAgRWRnZUluc2V0cyxcbiAgICBDb2x1bW4sXG4gICAgRm9udFdlaWdodCxcbiAgICBTaW5nbGVDaGlsZFNjcm9sbFZpZXcsXG4gICAgSW5wdXREZWNvcmF0aW9uLFxuICAgIEFsaWdubWVudCxcbiAgICBDaGlwLFxuICAgIElucHV0Qm9yZGVyLFxuICAgIE5hdmlnYXRvclxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5sZXQge0dsb2JhbENvbmZpZ30gPSByZXF1aXJlKFwiLi4vZ2xvYmFsX2NvbmZpZy5qc1wiKTtcblxuY2xhc3MgU2VhcmNoUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoXCJTZWFyY2hQYWdlXCIpO1xuICAgIH1cblxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNlYXJjaFBhZ2VTdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIFNlYXJjaFBhZ2VTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG5cbiAgICBzZWFyY2hJbnB1dChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogRmxhdEJ1dHRvbi5pY29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnBvcChjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlNWM0LCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSksIHtjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcn0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IFRleHQoXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNjAuMFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dEZpZWxkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvZm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogSW5wdXREZWNvcmF0aW9uLmNvbGxhcHNlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnRUZXh0OiBcIuaQnOe0ouavlOS5juWGheWuuVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IElucHV0Qm9yZGVyLm5vbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnRTdHlsZTogbmV3IFRleHRTdHlsZSh7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3J9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoNC4wKSksXG4gICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5zZWFyY2hCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpe1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IE1hdGVyaWFsQXBwKHtcbiAgICAgICAgICAgIC8vIHRoZW1lOiBHbG9iYWxDb25maWcudGhlbWVEYXRhLFxuICAgICAgICAgICAgaG9tZTogbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zZWFyY2hJbnB1dChjb250ZXh0KVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBTaW5nbGVDaGlsZFNjcm9sbFZpZXcoe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLmr5TkuY7ng63mkJxcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE2LjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDE2LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAxNi4wLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMTYuMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQudG9wTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDaGlwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXt9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuaxvei9puWFs+eojuS4i+iwg1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5ibGFjazEyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHtsZWZ0OiAxNi4wLCBib3R0b206IDE2LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2hpcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCl7fSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLmnY7lvablro/kvKDpl7vovp/osKNcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvcn0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuYmxhY2sxMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHtsZWZ0OiAxNi4wLCBib3R0b206IDE2LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENoaXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwi5bCP57GzOFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5ibGFjazEyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe2xlZnQ6IDE2LjAsIGJvdHRvbTogMTYuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDaGlwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXt9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIui2heaXtuepuuWQjOWxhVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5ibGFjazEyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe2xlZnQ6IDE2LjAsIGJvdHRvbTogMTYuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LnRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwi5pCc57Si5Y6G5Y+yXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBuZXcgVGV4dFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0LmJvbGQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxNi4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe2xlZnQ6IDE2LjAsIGJvdHRvbTogMTYuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudC50b3BMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUxOTIsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSwge2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yLCBzaXplOiAxNi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3JpZ2h0OiAxMi4wfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuS4muS9meWFtOi2o1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5ldyBUZXh0U3R5bGUoe2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yLCBmb250U2l6ZTogMTQuMH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTE0Yywge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3IsIHNpemU6IDE2LjB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7bGVmdDogMTYuMCwgcmlnaHQ6IDE2LjAsIGJvdHRvbTogMTAuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe2JvdHRvbTogMTAuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7Ym90dG9tOiBuZXcgQm9yZGVyU2lkZSh7Y29sb3I6IENvbG9ycy5ibGFjazEyfSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUxOTIsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSwge2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yLCBzaXplOiAxNi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHtyaWdodDogMTIuMH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KFwi5LiJ5L2TXCIsIHtzdHlsZTogbmV3IFRleHRTdHlsZSh7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3IsIGZvbnRTaXplOiAxNC4wfSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTE0Yywge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3IsIHNpemU6IDE2LjB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7bGVmdDogMTYuMCwgcmlnaHQ6IDE2LjAsIGJvdHRvbTogMTAuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe2JvdHRvbTogMTAuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5ldyBCb3JkZXJEaXJlY3Rpb25hbCh7Ym90dG9tOiBuZXcgQm9yZGVyU2lkZSh7Y29sb3I6IENvbG9ycy5ibGFjazEyfSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTE5Miwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7Y29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3IsIHNpemU6IDE2LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3JpZ2h0OiAxMi4wfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXhwYW5kZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLkurrnsbvmnKrmnaVcIiwge3N0eWxlOiBuZXcgVGV4dFN0eWxlKHtjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvciwgZm9udFNpemU6IDE0LjB9KX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMTRjLCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSksIHtjb2xvcjogR2xvYmFsQ29uZmlnLmZvbnRDb2xvciwgc2l6ZTogMTYuMH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe2xlZnQ6IDE2LjAsIHJpZ2h0OiAxNi4wLCBib3R0b206IDEwLjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHtib3R0b206IDEwLjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogbmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBuZXcgQm9yZGVyRGlyZWN0aW9uYWwoe2JvdHRvbTogbmV3IEJvcmRlclNpZGUoe2NvbG9yOiBDb2xvcnMuYmxhY2sxMn0pfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBTZWFyY2hQYWdlIH07XG4iLCJcblxuLy9pZGVhX3BhZ2UuanMg5q2j5byP5byA5aeL77yM8J+YnVxuXG5sZXQge1xuICAgIHJ1bkFwcCxcbiAgICBNWEpTRmx1dHRlckFwcCxcbiAgICBNWEpTV2lkZ2V0U3RhdGUsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIE1hdGVyaWFsQXBwLFxuICAgIFNjYWZmb2xkLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIENlbnRlcixcbiAgICBLZXlcbiAgXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmxldCB7R2xvYmFsQ29uZmlnfSA9IHJlcXVpcmUoXCIuLi9nbG9iYWxfY29uZmlnLmpzXCIpO1xuXG5jbGFzcyBJZGVhUGFnZSBleHRlbmRzIE1YSlNTdGF0ZWZ1bFdpZGdldCB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoXCJJZGVhUGFnZVwiLCB7a2V5OiBuZXcgS2V5KFwiSWRlYVBhZ2VcIil9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJZGVhUGFnZVN0YXRlKHRoaXMpO1xuICAgIH1cbn1cblxuY2xhc3MgSWRlYVBhZ2VTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgXG4gICAgYnVpbGQoY29udGV4dCl7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgTWF0ZXJpYWxBcHAoe1xuICAgICAgICAgICAgaG9tZTogbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IENlbnRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoJ+aDs+azlScpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYm9keTogbmV3IENlbnRlcih7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuWKquWKm+W8gOWPkeS4rX5cIilcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIHRoZW1lOiBHbG9iYWxDb25maWcudGhlbWVEYXRhXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IElkZWFQYWdlIH07XG5cbiIsIlxubGV0IHtcbiAgcnVuQXBwLFxuICBNWEpTRmx1dHRlckFwcCxcbiAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1hdGVyaWFsQXBwLFxuICBTY2FmZm9sZCxcbiAgVGV4dCxcbiAgSWNvbixcbiAgSWNvbkRhdGEsXG4gIENlbnRlcixcbiAgQm90dG9tTmF2aWdhdGlvbkJhckl0ZW0sXG4gIEFuaW1hdGlvbkNvbnRyb2xsZXIsXG4gIER1cmF0aW9uLFxuICBCb3R0b21OYXZpZ2F0aW9uQmFyLFxuICBCb3R0b21OYXZpZ2F0aW9uQmFyVHlwZSxcbiAgQ29sb3JzXG59ID0gcmVxdWlyZShcIi4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmxldCB7R2xvYmFsQ29uZmlnfSA9IHJlcXVpcmUoXCIuL2dsb2JhbF9jb25maWcuanNcIik7XG5sZXQge0hvbWVQYWdlfSA9IHJlcXVpcmUoXCIuL2hvbWUvaG9tZV9wYWdlLmpzXCIpO1xubGV0IHtNeVBhZ2V9ID0gcmVxdWlyZShcIi4vbXkvbXlfcGFnZS5qc1wiKTtcbmxldCB7SWRlYVBhZ2V9ID0gcmVxdWlyZShcIi4vaWRlYS9pZGVhX3BhZ2UuanNcIik7XG5sZXQge01lc3NhZ2VQYWdlfSA9IHJlcXVpcmUoXCIuL21lc3NhZ2UvbWVzc2FnZV9wYWdlLmpzXCIpO1xuXG5jbGFzcyBfTmF2aWdhdGlvbkljb25WaWV3IHtcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIGljb24sIHRpdGxlLCB2c3luY1xuICAgIH0pIHtcbiAgICAgICAgdGhpcy5pdGVtID0gbmV3IEJvdHRvbU5hdmlnYXRpb25CYXJJdGVtKHtcbiAgICAgICAgICAgIGljb246IGljb24sXG4gICAgICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IG5ldyBBbmltYXRpb25Db250cm9sbGVyKHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBuZXcgRHVyYXRpb24oe1xuICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kczogMjAwXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIEluZGV4IGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0luZGV4Jyk7XG4gICAgfVxuICBcbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbmRleFN0YXRlKHRoaXMpO1xuICAgIH1cbn1cblxuY2xhc3MgSW5kZXhTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9uYXZpZ2F0aW9uVmlld3MgPSBbXTtcbiAgICAgICAgdGhpcy5fcGFnZUxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fY3VycmVudFBhZ2UgPSBudWxsO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpe1xuICAgICAgICB0aGlzLl9uYXZpZ2F0aW9uVmlld3MgPSBbXG4gICAgICAgICAgICBuZXcgX05hdmlnYXRpb25JY29uVmlldyh7XG4gICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU4NWQsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIummlumhtVwiKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgX05hdmlnYXRpb25JY29uVmlldyh7XG4gICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGViM2QsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIuaDs+azlVwiKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgX05hdmlnYXRpb25JY29uVmlldyh7XG4gICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUwMDMsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIumAmuefpVwiKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgX05hdmlnYXRpb25JY29uVmlldyh7XG4gICAgICAgICAgICAgIGljb246IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU4YTYsIHtmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucyd9KSksXG4gICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dChcIuaIkeeahFwiKVxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5fcGFnZUxpc3QgPSBbXG4gICAgICAgICAgICBuZXcgSG9tZVBhZ2UoKSxcbiAgICAgICAgICAgIG5ldyBJZGVhUGFnZSgpLFxuICAgICAgICAgICAgbmV3IE1lc3NhZ2VQYWdlKCksXG4gICAgICAgICAgICBuZXcgTXlQYWdlKClcbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLl9jdXJyZW50UGFnZSA9IHRoaXMuX3BhZ2VMaXN0W3RoaXMuX2N1cnJlbnRJbmRleF07XG5cbiAgICAgICAgbGV0IHdpZGdldCA9IG5ldyBNYXRlcmlhbEFwcCh7XG4gICAgICAgICAgICBob21lOiBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogdGhpcy5fY3VycmVudFBhZ2VcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBib3R0b21OYXZpZ2F0aW9uQmFyOiBuZXcgQm90dG9tTmF2aWdhdGlvbkJhcih7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB0aGlzLl9uYXZpZ2F0aW9uVmlld3MubWFwKG5hdmlnYXRpb25JY29uVmlldyA9PiBuYXZpZ2F0aW9uSWNvblZpZXcuaXRlbSksXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleDogdGhpcy5fY3VycmVudEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBmaXhlZENvbG9yOiBDb2xvcnMuYmx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQm90dG9tTmF2aWdhdGlvbkJhclR5cGUuZml4ZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uYXZpZ2F0aW9uVmlld3NbdGhpcy5fY3VycmVudEluZGV4XS5jb250cm9sbGVyLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uYXZpZ2F0aW9uVmlld3NbdGhpcy5fY3VycmVudEluZGV4XS5jb250cm9sbGVyLmZvcndhcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50UGFnZSA9IHRoaXMuX3BhZ2VMaXN0W3RoaXMuX2N1cnJlbnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gdGhlbWU6IEdsb2JhbENvbmZpZy50aGVtZURhdGEsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge0luZGV4fTtcblxuIiwiXG5cbi8vbWVzc2FnZV9wYWdlLmpzIOato+W8j+W8gOWni++8jPCfmJ1cblxubGV0IHtcbiAgICBydW5BcHAsXG4gICAgTVhKU0ZsdXR0ZXJBcHAsXG4gICAgTVhKU1dpZGdldFN0YXRlLFxuICAgIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgICBNYXRlcmlhbEFwcCxcbiAgICBTY2FmZm9sZCxcbiAgICBBcHBCYXIsXG4gICAgVGV4dCxcbiAgICBDZW50ZXIsXG4gICAgS2V5XG4gIFxufSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9qc19mbHV0dGVyLmpzXCIpO1xuXG5sZXQge0dsb2JhbENvbmZpZ30gPSByZXF1aXJlKFwiLi4vZ2xvYmFsX2NvbmZpZy5qc1wiKVxuY2xhc3MgTWVzc2FnZVBhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKFwiTWVzc2FnZVBhZ2VcIiwge2tleTogbmV3IEtleShcIk1lc3NhZ2VQYWdlXCIpfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWVzc2FnZVBhZ2VTdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIE1lc3NhZ2VQYWdlU3RhdGUgZXh0ZW5kcyBNWEpTV2lkZ2V0U3RhdGUge1xuIFxuICAgIGJ1aWxkKGNvbnRleHQpe1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IE1hdGVyaWFsQXBwKHtcbiAgICAgICAgICAgIGhvbWU6IG5ldyBTY2FmZm9sZCh7XG4gICAgICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KCfmtojmga8nKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBDZW50ZXIoe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLliqrlipvlvIDlj5HkuK1+XCIpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvLyB0aGVtZTogR2xvYmFsQ29uZmlnLnRoZW1lRGF0YVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBNZXNzYWdlUGFnZSB9O1xuIiwiXG5cbi8vbXlfcGFnZS5qcyDmraPlvI/lvIDlp4vvvIzwn5idXG5cbmxldCB7XG4gICAgcnVuQXBwLFxuICAgIE1YSlNGbHV0dGVyQXBwLFxuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBNWEpTU3RhdGVmdWxXaWRnZXQsXG4gICAgTWF0ZXJpYWxBcHAsXG4gICAgU2NhZmZvbGQsXG4gICAgQXBwQmFyLFxuICAgIENvbnRhaW5lcixcbiAgICBSb3csXG4gICAgRmxhdEJ1dHRvbixcbiAgICBUZXh0LFxuICAgIEV4cGFuZGVkLFxuICAgIFRleHRTdHlsZSxcbiAgICBDb2xvcnMsXG4gICAgQXNwZWN0UmF0aW8sXG4gICAgQm94RGVjb3JhdGlvbixcbiAgICBCb3JkZXJTaWRlLFxuICAgIERlY29yYXRpb25JbWFnZSxcbiAgICBOZXR3b3JrSW1hZ2UsXG4gICAgUmVjdCxcbiAgICBCb3JkZXJSYWRpdXMsXG4gICAgUmFkaXVzLFxuICAgIENvbG9yLFxuICAgIEljb24sXG4gICAgSWNvbkRhdGEsXG4gICAgQm9yZGVyRGlyZWN0aW9uYWwsXG4gICAgRWRnZUluc2V0cyxcbiAgICBDb2x1bW4sXG4gICAgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3LFxuICAgIE1haW5BeGlzQWxpZ25tZW50LFxuICAgIEFsaWduLFxuICAgIEFsaWdubWVudCxcbiAgICBDaXJjbGVBdmF0YXIsXG4gICAgTGlzdFRpbGUsXG4gICAgTWVkaWFRdWVyeSxcbiAgICBBeGlzLFxuICAgIEtleSxcbiAgICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbiAgICBOYXZpZ2F0b3JcbiAgXG59ID0gcmVxdWlyZShcIi4uLy4uLy4uL2pzX2ZsdXR0ZXIuanNcIik7XG5cbmxldCB7R2xvYmFsQ29uZmlnfSA9IHJlcXVpcmUoXCIuLi9nbG9iYWxfY29uZmlnLmpzXCIpO1xubGV0IHtTZWFyY2hQYWdlfSA9IHJlcXVpcmUoXCIuLi9ob21lL3NlYXJjaF9wYWdlLmpzXCIpO1xuXG5jbGFzcyBNeVBhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKFwiTXlQYWdlXCIsIHtrZXk6IG5ldyBLZXkoXCJNeVBhZ2VcIil9KTtcbiAgICB9XG4gICAgY3JlYXRlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTXlQYWdlU3RhdGUodGhpcyk7XG4gICAgfVxufVxuXG5jbGFzcyBNeVBhZ2VTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgXG4gICAgYmFyU2VhcmNoKCl7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe1xuICAgICAgXG4gICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VhcmNoUGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZThiNiwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDE4LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3JpZ2h0OiAyNi4wfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChcIuaQnOe0ouefpeS5juWGheWuuVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlOGM0LCB7Zm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnfSkse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAxOC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQwLjBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuYWxsKFJhZGl1cy5jaXJjdWxhcig0LjApKSxcbiAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLnNlYXJjaEJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5mb0NhcmREZXNjSXRlbShjb250ZXh0LCBjb3VudCwgZGVzYywgc2hvd1NlcGFyYXRvcil7XG4gICAgICAgIHJldHVybiBuZXcgUm93KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAoTWVkaWFRdWVyeS5vZihjb250ZXh0KS5zaXplLndpZHRoIC0gNi4wKSAvIDQsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgRmxhdEJ1dHRvbiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KGNvdW50LCB7c3R5bGU6bmV3IFRleHRTdHlsZSh7Zm9udFNpemU6IDE2LjAsIGNvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoZGVzYywge3N0eWxlOiBuZXcgVGV4dFN0eWxlKHtmb250U2l6ZTogMTIuMCwgY29sb3I6IEdsb2JhbENvbmZpZy5mb250Q29sb3J9KX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgc2hvd1NlcGFyYXRvciA/IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDE0LjAsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLjAsXG4gICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbmV3IEJvcmRlckRpcmVjdGlvbmFsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbmV3IEJvcmRlclNpZGUoe2NvbG9yOiBDb2xvcnMuYmxhY2sxMiwgd2lkdGg6IDEuMH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pICA6IG5ldyBDb250YWluZXIoKSxcbiAgICAgICAgICAgIF0gXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaW5mb0NhcmQoY29udGV4dCl7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuY2FyZEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDEwLjAsIGJvdHRvbTogNi4wfSksXG4gICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogMTIuMCwgYm90dG9tOiA4LjB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHtsZWZ0OiAxNi4wLCByaWdodDogMTYuMCwgYm90dG9tOiAxNi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IG5ldyBDb2xvcigweEZGRjVGNUY1KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDYuMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgRmxhdEJ1dHRvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBmdW5jdGlvbigpe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlYWRpbmc6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2lyY2xlQXZhdGFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBuZXcgTmV0d29ya0ltYWdlKFwiaHR0cHM6Ly9waWMxLnpoaW1nLmNvbS92Mi1lYzdlZDU3NGRhNjZlMWI0OTVmY2FkMmNjM2Q3MWNiOV94bC5qcGdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAuMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7Ym90dG9tOiAyLjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCJsZWFybmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7dG9wOiAyLjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQoXCLmn6XnnIvmiJbnvJbovpHkuKrkurrkuLvpobVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5mb0NhcmREZXNjSXRlbShjb250ZXh0LCBcIjU3XCIsIFwi5oiR55qE5Yib5L2cXCIsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZm9DYXJkRGVzY0l0ZW0oY29udGV4dCwgXCIyMTBcIiwgXCLlhbPms6hcIiwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5mb0NhcmREZXNjSXRlbShjb250ZXh0LCBcIjE4XCIsIFwi5oiR55qE5pS26JePXCIsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZm9DYXJkRGVzY0l0ZW0oY29udGV4dCwgXCIzM1wiLCBcIuacgOi/kea1j+iniFwiLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc2VydmljZUNhcmREZXNjSXRlbShjb250ZXh0LCBpY29uRGF0YVZhbHVlLCBkZXNjLCBiZ0NvbG9yKXtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgd2lkdGg6IE1lZGlhUXVlcnkub2YoY29udGV4dCkuc2l6ZS53aWR0aCAvIDQsXG4gICAgICAgICAgICBjaGlsZDogbmV3IEZsYXRCdXR0b24oe1xuICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogZnVuY3Rpb24oKXt9LFxuICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe2JvdHRvbTogNi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ2lyY2xlQXZhdGFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoaWNvbkRhdGFWYWx1ZSwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7Y29sb3I6IENvbG9ycy53aGl0ZX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZ0NvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgVGV4dChkZXNjLCB7c3R5bGU6IG5ldyBUZXh0U3R5bGUoe2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yLCBmb250U2l6ZTogMTQuMH0pfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXJ2aWNlQ2FyZChjb250ZXh0KXtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgY29sb3I6IEdsb2JhbENvbmZpZy5jYXJkQmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogNi4wLCBib3R0b206IDYuMH0pLFxuICAgICAgICAgICAgcGFkZGluZzogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDEyLjAsIGJvdHRvbTogOC4wfSksXG4gICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2VDYXJkRGVzY0l0ZW0oY29udGV4dCwgMHhlODY1LCBcIuaIkeeahOS5puaetlwiLCBDb2xvcnMuZ3JlZW4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2VDYXJkRGVzY0l0ZW0oY29udGV4dCwgMHhlM2U3LCBcIuaIkeeahExpdmVcIiwgQ29sb3JzLmJsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2VDYXJkRGVzY0l0ZW0oY29udGV4dCwgMHhlYjQ0LCBcIuengeWutuivvlwiLCBuZXcgQ29sb3IoMHhGRkE2OEY1MikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2VDYXJkRGVzY0l0ZW0oY29udGV4dCwgMHhlMjI3LCBcIuS7mOi0ueWSqOivolwiLCBuZXcgQ29sb3IoMHhGRjM1NUE5QikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogMTYuMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2VDYXJkRGVzY0l0ZW0oY29udGV4dCwgMHhlOGM5LCBcIuW3sui0rVwiLCBuZXcgQ29sb3IoMHhGRjA4OERCNCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2VDYXJkRGVzY0l0ZW0oY29udGV4dCwgMHhlMDNlLCBcIuS9memineekvOWNt1wiLCBDb2xvcnMuYmx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZUNhcmREZXNjSXRlbShjb250ZXh0LCAweGUxZTIsIFwi5pyN5YqhXCIsIG5ldyBDb2xvcigweEZGMDI5QTNGKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc2V0dGluZ0NhcmQoY29udGV4dCl7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuY2FyZEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDYuMCwgYm90dG9tOiA2LjB9KSxcbiAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7dG9wOiAxMi4wLCBib3R0b206IDguMH0pLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5jZW50ZXIsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlQ2FyZERlc2NJdGVtKGNvbnRleHQsIDB4ZTg5MSwgXCLnpL7ljLrlu7rorr5cIiwgbmV3IENvbG9yKDB4RkZCODg4MDApKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlQ2FyZERlc2NJdGVtKGNvbnRleHQsIDB4ZWI0NSwgXCLlj43ppohcIiwgbmV3IENvbG9yKDB4RkY2MzYxNkQpKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlQ2FyZERlc2NJdGVtKGNvbnRleHQsIDB4ZTNhNywgXCLlpJzpl7TmqKHlvI9cIiwgbmV3IENvbG9yKDB4RkZCODZBMEQpKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlQ2FyZERlc2NJdGVtKGNvbnRleHQsIDB4ZThhNCwgXCLorr7nva5cIiwgbmV3IENvbG9yKDB4RkY2MzYyNjkpKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgdmlkZW9DYXJkSGVhZGVyKGNvbnRleHQsIHRpdGxlLCBpY29uRGF0YVZhbHVlLCBjb2xvclZhbHVlLCBuZXh0QWN0aW9uVGl0bGUpe1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7bGVmdDogMTYuMCwgYm90dG9tOiAyMC4wfSksXG4gICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENpcmNsZUF2YXRhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoaWNvbkRhdGFWYWx1ZSwge2ZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJ30pLCB7Y29sb3I6IENvbG9ycy53aGl0ZX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbmV3IENvbG9yKGNvbG9yVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEV4cGFuZGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7bGVmdDogOC4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHRpdGxlLCB7c3R5bGU6IG5ldyBUZXh0U3R5bGUoe2ZvbnRTaXplOiAxOC4wfSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBGbGF0QnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IGZ1bmN0aW9uKCl7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQobmV4dEFjdGlvblRpdGxlLCB7c3R5bGU6IG5ldyBUZXh0U3R5bGUoe2NvbG9yOiBDb2xvcnMuYmx1ZX0pfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmlkZW9DYXJkSXRlbShjb250ZXh0LCBpbWdVcmwpe1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICB3aWR0aDogTWVkaWFRdWVyeS5vZihjb250ZXh0KS5zaXplLndpZHRoIC8gMi41LFxuICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3JpZ2h0OiA2LjB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQXNwZWN0UmF0aW8oe1xuICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiA0LjAgLyAyLjAsXG4gICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICBmb3JlZ3JvdW5kRGVjb3JhdGlvbjpuZXcgQm94RGVjb3JhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IERlY29yYXRpb25JbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBOZXR3b3JrSW1hZ2UoaW1nVXJsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJTbGljZTogUmVjdC5mcm9tTFRSQigyNzAuMCwgMTgwLjAsIDEzNjAuMCwgNzMwLjApXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogQm9yZGVyUmFkaXVzLmFsbChSYWRpdXMuY2lyY3VsYXIoNi4wKSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmlkZW9DYXJkKGNvbnRleHQpe1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLmNhcmRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMub25seSh7dG9wOiA2LjAsIGJvdHRvbTogNi4wfSksXG4gICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogMTIuMCwgYm90dG9tOiA4LjB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvQ2FyZEhlYWRlcihjb250ZXh0LCBcIuinhumikeWIm+S9nFwiLCAweGUwNGIsIDB4RkZCMzY5MDUsIFwi5ouN5LiA5LiqXCIpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHtsZWZ0OiAxNi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFNpbmdsZUNoaWxkU2Nyb2xsVmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsRGlyZWN0aW9uOiBBeGlzLmhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBSb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlb0NhcmRJdGVtKGNvbnRleHQsIFwiaHR0cHM6Ly9waWMyLnpoaW1nLmNvbS81MC92Mi01OTQyYTUxZTZiODM0ZjEwMDc0ZjhkNTBiZTViYmQ0ZF80MDB4MjI0LmpwZ1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9DYXJkSXRlbShjb250ZXh0LCBcImh0dHBzOi8vcGljMS56aGltZy5jb20vNTAvdjItMDAwODA1N2QxYWQyYmQ4MTNhZWE0ZmMyNDc5NTllNjNfNDAweDIyNC5qcGdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvQ2FyZEl0ZW0oY29udGV4dCwgXCJodHRwczovL3BpYzIuemhpbWcuY29tLzUwL3YyLTU5NDJhNTFlNmI4MzRmMTAwNzRmOGQ1MGJlNWJiZDRkXzQwMHgyMjQuanBnXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlb0NhcmRJdGVtKGNvbnRleHQsIFwiaHR0cHM6Ly9waWMxLnpoaW1nLmNvbS81MC92Mi0wMDA4MDU3ZDFhZDJiZDgxM2FlYTRmYzI0Nzk1OWU2M180MDB4MjI0LmpwZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlYUNhcmRJdGVtKGNvbnRleHQsIHRpdGxlLCBzdWJUaXRsZSwgaW1nVXJsKXtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3JpZ2h0OiA2LjB9KSxcbiAgICAgICAgICAgIGRlY29yYXRpb246IG5ldyBCb3hEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogR2xvYmFsQ29uZmlnLnNlYXJjaEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDYuMCkpXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkOiBuZXcgUm93KHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLm9ubHkoe2xlZnQ6IDEwLjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29sdW1uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQWxpZ24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnQuY2VudGVyTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFRleHQodGl0bGUsIHtzdHlsZTogbmV3IFRleHRTdHlsZSh7Y29sb3I6IENvbG9ycy5ibGFjaywgZm9udFNpemU6IDE2LjB9KX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEFsaWduKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50LmNlbnRlckxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe3RvcDogNi4wfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG5ldyBUZXh0KHN1YlRpdGxlLCB7c3R5bGU6IG5ldyBUZXh0U3R5bGUoe2NvbG9yOiBHbG9iYWxDb25maWcuZm9udENvbG9yfSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IEVkZ2VJbnNldHMuYWxsKDEwLjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IE1lZGlhUXVlcnkub2YoY29udGV4dCkuc2l6ZS53aWR0aCAvIDUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IEFzcGVjdFJhdGlvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3BlY3RSYXRpbzogMS4wIC8gMS4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWdyb3VuZERlY29yYXRpb246bmV3IEJveERlY29yYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBEZWNvcmF0aW9uSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgTmV0d29ya0ltYWdlKGltZ1VybCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyU2xpY2U6IFJlY3QuZnJvbUxUUkIoMjcwLjAsIDE4MC4wLCAxMzYwLjAsIDczMC4wKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy5hbGwoUmFkaXVzLmNpcmN1bGFyKDYuMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlYUNhcmQoY29udGV4dCl7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKHtcbiAgICAgICAgICAgIGNvbG9yOiBHbG9iYWxDb25maWcuY2FyZEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIG1hcmdpbjogRWRnZUluc2V0cy5vbmx5KHt0b3A6IDYuMCwgYm90dG9tOiA2LjB9KSxcbiAgICAgICAgICAgIHBhZGRpbmc6IEVkZ2VJbnNldHMub25seSh7dG9wOiAxMi4wLCBib3R0b206IDguMH0pLFxuICAgICAgICAgICAgY2hpbGQ6IG5ldyBDb2x1bW4oe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9DYXJkSGVhZGVyKGNvbnRleHQsIFwi5oOz5rOVXCIsIDB4ZWIzZCwgMHhGRkIzNjkwNSwgXCLljrvlvoDmg7Pms5XpppbpobVcIiksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBDb250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBFZGdlSW5zZXRzLm9ubHkoe2xlZnQ6IDE2LjB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBuZXcgU2luZ2xlQ2hpbGRTY3JvbGxWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IEF4aXMuaG9yaXpvbnRhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkZWFDYXJkSXRlbShjb250ZXh0LCBcIuiLueaenCBXV0RDIDIwMTgg5q2j5Zyo5Li+6KGMXCIsIFwi6L2v5Lu25pu05paw5oSP5paZ5LmL5Lit77yM56Gs5Lu25LmL6LCcLi4uXCIsIFwiaHR0cHM6Ly9waWMyLnpoaW1nLmNvbS81MC92Mi01NTAzOWZhNTM1ZjNmZTA2MzY1YzBmY2RhYTllMzg0N180MDB4MjI0LmpwZ1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWRlYUNhcmRJdGVtKGNvbnRleHQsIFwi5q2k5Yi75L2g55qE5qGM5a2Q5piv5LuA5LmI5qC35a2Q77yfXCIsIFwi5pmS5LiA5pmS5L2g55qE5Lmm5qGML+WKnuWFrOahjFwiLCBcImh0dHBzOi8vcGljMi56aGltZy5jb20vNTAvdjItY2UyZTAxYTA0N2U0YWJhOWJmYWJmODQ2OWNmZDNlNzVfNDAweDIyNC5qcGdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkZWFDYXJkSXRlbShjb250ZXh0LCBcIuWFs+S6jumrmOiAg+S9oOWNsOixoeacgOa3seeahOaYry4uLlwiLCBcIuiBiuiBiuS9oOeahOmrmOS4ieeUn+a0u1wiLCBcImh0dHBzOi8vcGljMi56aGltZy5jb20vNTAvdjItNTUwMzlmYTUzNWYzZmUwNjM2NWMwZmNkYWE5ZTM4NDdfNDAweDIyNC5qcGdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkZWFDYXJkSXRlbShjb250ZXh0LCBcIuWkj+WkqeS4gOWumuimgeWQg+eahOmjn+eJqeacieWTquS6m1wiLCBcIuacgOmAguWQiOWkj+WkqeWQg+eahOmCo+enjVwiLCBcImh0dHBzOi8vcGljMi56aGltZy5jb20vNTAvdjItY2UyZTAxYTA0N2U0YWJhOWJmYWJmODQ2OWNmZDNlNzVfNDAweDIyNC5qcGdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJ1aWxkKGNvbnRleHQpe1xuICAgICAgICBsZXQgd2lkZ2V0ID0gbmV3IE1hdGVyaWFsQXBwKHtcbiAgICAgICAgICAgIC8vIHRoZW1lOiBHbG9iYWxDb25maWcudGhlbWVEYXRhLFxuICAgICAgICAgICAgaG9tZTogbmV3IFNjYWZmb2xkKHtcbiAgICAgICAgICAgICAgICBhcHBCYXI6IG5ldyBBcHBCYXIoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5iYXJTZWFyY2goKVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvZHk6IG5ldyBTaW5nbGVDaGlsZFNjcm9sbFZpZXcoe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogbmV3IENvbHVtbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmZvQ2FyZChjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlQ2FyZChjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nQ2FyZChjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlb0NhcmQoY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWRlYUNhcmQoY29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdpZGdldDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBNeVBhZ2UgfTtcblxuIiwiXG5sZXQge1xuICBydW5BcHAsXG4gIE1YSlNGbHV0dGVyQXBwLFxuICBNWEpTV2lkZ2V0U3RhdGUsXG4gIE1YSlNTdGF0ZWZ1bFdpZGdldCxcbiAgTWF0ZXJpYWxBcHBcbn0gPSByZXF1aXJlKFwiLi4vLi4vanNfZmx1dHRlci5qc1wiKTtcblxubGV0IHtJbmRleH0gPSByZXF1aXJlKFwiLi9pbmRleC5qc1wiKTtcblxuY2xhc3MgSlNaaGlIdVBhZ2UgZXh0ZW5kcyBNWEpTU3RhdGVmdWxXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignSlNaaGlIdVBhZ2UnKTtcbiAgICB9XG4gIFxuICAgIGNyZWF0ZVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEpTWmhpSHVQYWdlU3RhdGUodGhpcyk7XG4gICAgfVxufVxuXG4gIFxuY2xhc3MgSlNaaGlIdVBhZ2VTdGF0ZSBleHRlbmRzIE1YSlNXaWRnZXRTdGF0ZSB7XG4gICAgYnVpbGQoY29udGV4dCl7XG4gICAgICAgIGxldCB3aWRnZXQgPSBuZXcgTWF0ZXJpYWxBcHAoe1xuICAgICAgICAgICAgdGl0bGU6IFwi55+l5LmOLemrmOS7v+eJiFwiLFxuICAgICAgICAgICAgaG9tZTogbmV3IEluZGV4KClcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWRnZXQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgSlNaaGlIdVBhZ2UgfTtcblxuIiwiLy8gIE1YRmx1dHRlckZyYW1ld29ya1xuLy8gIENvcHlyaWdodCAyMDE5IFRoZSBNWEZsdXR0ZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxldCB7XG4gICAgcnVuQXBwLFxuICAgIE1YSlNGbHV0dGVyQXBwLFxuICAgIE1YSlNTdGF0ZWxlc3NXaWRnZXQsXG4gICAgTVhKU1N0YXRlZnVsV2lkZ2V0LFxuICAgIE1YSlNXaWRnZXRTdGF0ZSxcbiAgICBTY2FmZm9sZCxcbiAgICBDb250YWluZXIsXG4gICAgQ29sb3IsXG4gICAgQ29sb3JzLFxuICAgIEFwcEJhcixcbiAgICBUZXh0LFxuICAgIExpc3RWaWV3LFxuICAgIExpc3RUaWxlLFxuICAgIEljb24sXG4gICAgSWNvbkRhdGEsXG4gICAgRWRnZUluc2V0cyxcbiAgICBUZXh0QWxpZ24sXG4gICAgVGV4dFN0eWxlLFxuICAgIFJvdyxcbiAgICBQYWRkaW5nLFxuICAgIFRoZW1lLFxuICAgIE5hdmlnYXRvcixcbiAgICBNYXRlcmlhbFBhZ2VSb3V0ZSxcbiAgICBTY3JvbGxiYXIsXG4gICAgTVhKU0xvZyxcbn0gPSByZXF1aXJlKFwiLi9qc19mbHV0dGVyLmpzXCIpO1xuXG4vL+S4muWKoeS7o+eggVxuY2xhc3MgTVhKU1dpZGdldEhvbWVQYWdlIGV4dGVuZHMgTVhKU1N0YXRlZnVsV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJNWEpTV2lkZ2V0SG9tZVBhZ2VcIik7XG5cbiAgICAgICAgdGhpcy5kYXRhID0gXCJiaXogZGF0YVwiO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB9XG5cbiAgICBjcmVhdGVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNWEpTV2lkZ2V0SG9tZVBhZ2VTdGF0ZSh0aGlzKTtcbiAgICB9XG59XG5cbmNsYXNzIE1YSlNXaWRnZXRIb21lUGFnZVN0YXRlIGV4dGVuZHMgTVhKU1dpZGdldFN0YXRlIHtcblxuICAgIGJ1aWxkKGNvbnRleHQpIHtcblxuICAgICAgICBsZXQgZGVtb0xpc3QgPSBuZXcgTGlzdFZpZXcoe1xuXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uVGl0bGUoY29udGV4dCwgXCJBcHAgRGVtb1wiKSxcbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBsZWFkaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMzlkLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwgeyBjb2xvcjogVGhlbWUub2YoY29udGV4dCkucHJpbWFyeUNvbG9yIH0pLFxuICAgICAgICAgICAgICAgICAgICB0cmFpbGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkZiwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycsIG1hdGNoVGV4dERpcmVjdGlvbjogdHJ1ZSB9KSksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRXhhbXBsZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCdDb21tb24gRXhhbXBsZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy/ngrnlh7vml7bmh5LliqDovb3pobXpnaJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IEV4YW1wbGVzUGFnZSB9ID0gcmVxdWlyZShcIi4vYXBwX2RlbW8vZXhhbXBsZXMvaW5kZXguanNcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFeGFtcGxlc1BhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTM5ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHsgY29sb3I6IFRoZW1lLm9mKGNvbnRleHQpLnByaW1hcnlDb2xvciB9KSxcbiAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1dpZGdldCBFeGFtcGxlcycpLFxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogbmV3IFRleHQoJ0FsbCBXaWRnZXQgRXhhbXBsZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy/ngrnlh7vml7bmh5LliqDovb3pobXpnaJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IFdpZGdldEV4YW1wbGVzUGFnZSB9ID0gcmVxdWlyZShcIi4vYXBwX2RlbW8vd2lkZ2V0X2V4YW1wbGVzL2luZGV4LmpzXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV2lkZ2V0RXhhbXBsZXNQYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTA2ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHsgY29sb3I6IFRoZW1lLm9mKGNvbnRleHQpLnByaW1hcnlDb2xvciB9KSxcbiAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ01hdGVyaWFsJyksXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgVGV4dCgnTWF0ZXJpYWwgVUkgRGVtbycpLFxuICAgICAgICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgSlNNYXRlcmlhbFBhZ2UgfSA9IHJlcXVpcmUoXCIuL2FwcF9kZW1vL21hdGVyaWFsLmpzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpTTWF0ZXJpYWxQYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTM5ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHsgY29sb3I6IFRoZW1lLm9mKGNvbnRleHQpLnByaW1hcnlDb2xvciB9KSxcbiAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1poaUh1JyksXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiBuZXcgVGV4dCgnWmhpSHUgaGlnaCBjb3B5JyksXG4gICAgICAgICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IEpTWmhpSHVQYWdlIH0gPSByZXF1aXJlKFwiLi9hcHBfZGVtby96aGlodS96aGlodS5qc1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpTWmhpSHVQYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBsZWFkaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMzlkLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwgeyBjb2xvcjogVGhlbWUub2YoY29udGV4dCkucHJpbWFyeUNvbG9yIH0pLFxuICAgICAgICAgICAgICAgICAgICB0cmFpbGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkZiwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycsIG1hdGNoVGV4dERpcmVjdGlvbjogdHJ1ZSB9KSksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgn572R5piT5paw6Ze7IExpc3RWaWV3RGVtbycpLFxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogbmV3IFRleHQoJ0xpc3RWaWV3ICxNZXNzYWdlIENoYW5uZWwsIFB1bGwgdG8gcmVmcmVzaCcpLFxuXG4gICAgICAgICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0X3ZpZXcgPSByZXF1aXJlKFwiLi9hcHBfZGVtby9saXN0dmlld19leGFtcGxlLmpzXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbGlzdF92aWV3Lkxpc3RWaWV3RGVtbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTM5ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHsgY29sb3I6IFRoZW1lLm9mKGNvbnRleHQpLnByaW1hcnlDb2xvciB9KSxcbiAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ1BsYXRmb3JtQVBJRXhhbXBsZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCdOZXR3b3JrL0Rpby9NZXNzYWdlQ2hhbm5lbCcpLFxuXG4gICAgICAgICAgICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IFBsYXRmb3JtRXhhbXBsZXNQYWdlIH0gPSByZXF1aXJlKFwiLi9hcHBfZGVtby9wbGF0Zm9ybS9pbmRleC5qc1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBsYXRmb3JtRXhhbXBsZXNQYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBsZWFkaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMDZkLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSwgeyBjb2xvcjogVGhlbWUub2YoY29udGV4dCkucHJpbWFyeUNvbG9yIH0pLFxuICAgICAgICAgICAgICAgICAgICB0cmFpbGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkZiwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycsIG1hdGNoVGV4dERpcmVjdGlvbjogdHJ1ZSB9KSksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUGVzdG8nKSxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCdTaW1wbGUgcmVjaXBlIGJyb3dzZXInKSxcblxuICAgICAgICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGVzdG8gPSByZXF1aXJlKFwiLi9hcHBfZGVtby9wZXN0by5qc1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHBlc3RvLkpTUGVzdG9QYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTBkMCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHsgY29sb3I6IFRoZW1lLm9mKGNvbnRleHQpLnByaW1hcnlDb2xvciB9KSxcbiAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoJ0NvbnRhY3QgcHJvZmlsZScpLFxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogbmV3IFRleHQoJ0FkZHJlc3MgYm9vayBlbnRyeSB3aXRoIGEgZmxleGlibGUgYXBwYmFyJyksXG5cbiAgICAgICAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IEpTQ29udGFjdFBhZ2UgfSA9IHJlcXVpcmUoXCIuL2FwcF9kZW1vL2NvbnRhY3QuanNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSlNDb250YWN0UGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlYWRpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUwNmQsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnIH0pLCB7IGNvbG9yOiBUaGVtZS5vZihjb250ZXh0KS5wcmltYXJ5Q29sb3IgfSksXG4gICAgICAgICAgICAgICAgICAgIHRyYWlsaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlNWRmLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJywgbWF0Y2hUZXh0RGlyZWN0aW9uOiB0cnVlIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5ldyBUZXh0KCdBbmltYXRpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCdTZWN0aW9uIG9yZ2FuaXplcicpLFxuICAgICAgICAgICAgICAgICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgSlNBbmltYXRpb25QYWdlIH0gPSByZXF1aXJlKFwiLi9hcHBfZGVtby9hbmltYXRpb24uanNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSlNBbmltYXRpb25QYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uVGl0bGUoY29udGV4dCwgXCLmgKfog73mtYvor5VcIiksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTA2ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0cmFpbGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkZiwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycsIG1hdGNoVGV4dERpcmVjdGlvbjogdHJ1ZSB9KSksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnUHJvZmlsZScpLFxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogbmV3IFRleHQoJ+aAp+iDvea1i+ivlSBwZXJmb3JtYW5jZSBwcm9maWxpbmcnKSxcbiAgICAgICAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeyBQcm9maWxlRXhhbXBsZXNQYWdlIH0gPSByZXF1aXJlKFwiLi9hcHBfZGVtby9wcm9maWxlL2luZGV4LmpzXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBuZXcgTWF0ZXJpYWxQYWdlUm91dGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvZmlsZUV4YW1wbGVzUGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zZWN0aW9uVGl0bGUoY29udGV4dCwgXCJteGpzYnVpbGRlciBidWlsZCBhcHBcIiksXG4gICAgICAgICAgICAgICAgLy8gbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAvLyAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTM5ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSkpLFxuICAgICAgICAgICAgICAgIC8vICAgICB0cmFpbGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkZiwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycsIG1hdGNoVGV4dERpcmVjdGlvbjogdHJ1ZSB9KSksXG4gICAgICAgICAgICAgICAgLy8gICAgIHRpdGxlOiBuZXcgVGV4dCgnRmx1dHRlckRlbW8nKSxcbiAgICAgICAgICAgICAgICAvLyAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCfnroDljZXmoLfkvosnKSxcbiAgICAgICAgICAgICAgICAvLyAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgbGV0IGZsdXR0ZXJfZGVtb19kZGMgPSByZXF1aXJlKFwiLi9teGpzYnVpbGRlcl9kZW1vL2ZsdXR0ZXJfZGVtby5kYXJ0LmxpYi5qc1wiKTtcblxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwgbmV3IE1hdGVyaWFsUGFnZVJvdXRlKHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBidWlsZGVyOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGZsdXR0ZXJfZGVtb19kZGMubWFpbi5NeUhvbWVQYWdlLm5ldyh7IHRpdGxlOiBcIkZsdXR0ZXIgRGVtbyBIb21lIFBhZ2VcIiB9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgIC8vIH0pLFxuICAgICAgICAgICAgICAgIC8vIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgLy8gICAgIGxlYWRpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUzOWQsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnIH0pKSxcbiAgICAgICAgICAgICAgICAvLyAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgIC8vICAgICB0aXRsZTogbmV3IFRleHQoJ0NvbnRhY3REZW1vJyksXG4gICAgICAgICAgICAgICAgLy8gICAgIHN1YnRpdGxlOiBuZXcgVGV4dCgn6IGU57O75Lq6JyksXG5cbiAgICAgICAgICAgICAgICAvLyAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgbGV0IGNvbnRhY3RfZGVtb19kZGMgPSByZXF1aXJlKFwiLi9teGpzYnVpbGRlcl9kZW1vL2NvbnRhY3RzX2RlbW8uZGFydC5saWIuanNcIik7XG5cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb250YWN0X2RlbW9fZGRjLmNvbnRhY3RzX2RlbW8uQ29udGFjdHNEZW1vLm5ldztcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgIC8vIH0pLFxuICAgICAgICAgICAgICAgIC8vIG5ldyBMaXN0VGlsZSh7XG4gICAgICAgICAgICAgICAgLy8gICAgIGxlYWRpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGUzOWQsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnIH0pKSxcbiAgICAgICAgICAgICAgICAvLyAgICAgdHJhaWxpbmc6IG5ldyBJY29uKG5ldyBJY29uRGF0YSgweGU1ZGYsIHsgZm9udEZhbWlseTogJ01hdGVyaWFsSWNvbnMnLCBtYXRjaFRleHREaXJlY3Rpb246IHRydWUgfSkpLFxuICAgICAgICAgICAgICAgIC8vICAgICB0aXRsZTogbmV3IFRleHQoJ1Blc3RvRGVtbycpLFxuICAgICAgICAgICAgICAgIC8vICAgICBzdWJ0aXRsZTogbmV3IFRleHQoJ+iPnOiwsScpLFxuICAgICAgICAgICAgICAgIC8vICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBsZXQgcGVzdG9fZGVtb19kZGMgPSByZXF1aXJlKFwiLi9teGpzYnVpbGRlcl9kZW1vL3Blc3RvX2RlbW8uZGFydC5saWIuanNcIik7XG5cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBwZXN0b19kZW1vX2RkYy5wZXN0b19kZW1vLlBlc3RvRGVtby5uZXc7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAvLyB9KSxcbiAgICAgICAgICAgICAgICAvLyBuZXcgTGlzdFRpbGUoe1xuICAgICAgICAgICAgICAgIC8vICAgICBsZWFkaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlMzlkLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJyB9KSksXG4gICAgICAgICAgICAgICAgLy8gICAgIHRyYWlsaW5nOiBuZXcgSWNvbihuZXcgSWNvbkRhdGEoMHhlNWRmLCB7IGZvbnRGYW1pbHk6ICdNYXRlcmlhbEljb25zJywgbWF0Y2hUZXh0RGlyZWN0aW9uOiB0cnVlIH0pKSxcbiAgICAgICAgICAgICAgICAvLyAgICAgdGl0bGU6IG5ldyBUZXh0KCdaaGlIdScpLFxuICAgICAgICAgICAgICAgIC8vICAgICBzdWJ0aXRsZTogbmV3IFRleHQoJ+efpeS5ji3pq5jku7/niYgnKSxcblxuICAgICAgICAgICAgICAgIC8vICAgICBvblRhcDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBjb25zdCBwYWNrYWdlc19femhpaHVfX2luZGV4ID0gcmVxdWlyZSgnLi9teGpzYnVpbGRlcl9kZW1vL3BhY2thZ2VzL3poaWh1L2luZGV4L2luZGV4LmRhcnQubGliLmpzJyk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBjb25zdCBpbmRleF9wYWdlID0gcGFja2FnZXNfX3poaWh1X19pbmRleC5pbmRleF9faW5kZXg7XG5cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBpbmRleF9wYWdlLkluZGV4Lm5ldztcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgIC8vIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvblRpdGxlKGNvbnRleHQsIFwiRGFydCBKUyBBcGlcIiksXG4gICAgICAgICAgICAgICAgbmV3IExpc3RUaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTM5ZCwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0cmFpbGluZzogbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTVkZiwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycsIG1hdGNoVGV4dERpcmVjdGlvbjogdHJ1ZSB9KSksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuZXcgVGV4dCgnRGFydCBKUyBBcGknKSxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5ldyBUZXh0KCdKUyBDYWxsIERhcnQgRnVuY3Rpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgUGFnZUV4YW1wbGVKU0FwaSB9ID0gcmVxdWlyZShcIi4vYXBwX2RlbW8vY3VzdG9tX2pzX2FwaS5qc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIG5ldyBNYXRlcmlhbFBhZ2VSb3V0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlRXhhbXBsZUpTQXBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHcgPSBuZXcgU2NhZmZvbGQoe1xuICAgICAgICAgICAgYXBwQmFyOiBuZXcgQXBwQmFyKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV3IFRleHQoXCJNWEZsdXR0ZXIgRXhhbXBsZXNcIilcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYm9keTogZGVtb0xpc3RcbiAgICAgICAgfSk7XG5cblxuICAgICAgICByZXR1cm4gdztcbiAgICB9XG5cbiAgICBzZWN0aW9uVGl0bGUoY29udGV4dCwgdGl0bGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIb21lU2VjdGlvblRpdGxlKHRpdGxlKTtcbiAgICB9XG59XG5cbmNsYXNzIEhvbWVTZWN0aW9uVGl0bGUgZXh0ZW5kcyBNWEpTU3RhdGVsZXNzV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgeyBrZXkgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKFwiSG9tZVNlY3Rpb25UaXRsZVwiLCB7IGtleToga2V5IH0pO1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgfVxuXG4gICAgYnVpbGQoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih7XG4gICAgICAgICAgICBwYWRkaW5nOiBFZGdlSW5zZXRzLmFsbCgxMC4wKSxcbiAgICAgICAgICAgIGNvbG9yOiBUaGVtZS5vZihjb250ZXh0KS5wcmltYXJ5Q29sb3IsXG4gICAgICAgICAgICBjaGlsZDogbmV3IFJvdyh7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEljb24obmV3IEljb25EYXRhKDB4ZTgwZSwgeyBmb250RmFtaWx5OiAnTWF0ZXJpYWxJY29ucycgfSksIHsgc2l6ZTogMjAsIGNvbG9yOiBuZXcgQ29sb3IoMHhGRkZGRkZGRikgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQYWRkaW5nKHsgcGFkZGluZzogRWRnZUluc2V0cy5mcm9tTFRSQigxMC4wLCAwLjAsIDAuMCwgMC4wKSB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRleHQodGhpcy50aXRsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBUZXh0QWxpZ24uc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IFRleHRTdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFRoZW1lLm9mKGNvbnRleHQpLnRleHRUaGVtZS50aXRsZS5mb250V2VpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMud2hpdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgTVhKU1dpZGdldEhvbWVQYWdlIH07XG5cbiIsImV4cG9ydCAqIGZyb20gJ0B0ZW5jZW50L214Zmx1dHRlcic7XG5leHBvcnQgKiBmcm9tICdAdGVuY2VudC9teGZsdXR0ZXItd2lkZ2V0cyc7XG5cbiIsIi8vICBNWEZsdXR0ZXJGcmFtZXdvcmtcbi8vICBDb3B5cmlnaHQgMjAxOSBUaGUgTVhGbHV0dGVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vL1xuLy8gIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vICBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG5jb25zdCB7IE1YTWlycm9yV2lkZ2V0IH0gPSByZXF1aXJlKCdAdGVuY2VudC9teGZsdXR0ZXInKTtcblxuY2xhc3MgQ2FjaGVkTmV0d29ya0ltYWdlIGV4dGVuZHMgTVhNaXJyb3JXaWRnZXQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAga2V5LFxuICAgIGltYWdlVXJsLFxuICAgIGltYWdlQnVpbGRlcixcbiAgICBwbGFjZWhvbGRlcixcbiAgICBlcnJvcldpZGdldCxcbiAgICBmYWRlT3V0RHVyYXRpb24sXG4gICAgZmFkZU91dEN1cnZlLFxuICAgIGZhZGVJbkR1cmF0aW9uLFxuICAgIGZhZGVJbkN1cnZlLFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBmaXQsXG4gICAgYWxpZ25tZW50LFxuICAgIHJlcGVhdCxcbiAgICBtYXRjaFRleHREaXJlY3Rpb24sXG4gICAgaHR0cEhlYWRlcnMsXG4gICAgY2FjaGVNYW5hZ2VyLFxuICAgIHVzZU9sZEltYWdlT25VcmxDaGFuZ2UsXG4gICAgY29sb3IsXG4gICAgZmlsdGVyUXVhbGl0eSxcbiAgICBjb2xvckJsZW5kTW9kZSxcbiAgICBwbGFjZWhvbGRlckZhZGVJbkR1cmF0aW9uLFxuICB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5pbWFnZVVybCA9IGltYWdlVXJsO1xuICAgIHRoaXMuaW1hZ2VCdWlsZGVyID0gaW1hZ2VCdWlsZGVyO1xuICAgIHRoaXMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICB0aGlzLmVycm9yV2lkZ2V0ID0gZXJyb3JXaWRnZXQ7XG4gICAgdGhpcy5mYWRlT3V0RHVyYXRpb24gPSBmYWRlT3V0RHVyYXRpb247XG4gICAgdGhpcy5mYWRlT3V0Q3VydmUgPSBmYWRlT3V0Q3VydmU7XG4gICAgdGhpcy5mYWRlSW5EdXJhdGlvbiA9IGZhZGVJbkR1cmF0aW9uO1xuICAgIHRoaXMuZmFkZUluQ3VydmUgPSBmYWRlSW5DdXJ2ZTtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5maXQgPSBmaXQ7XG4gICAgdGhpcy5hbGlnbm1lbnQgPSBhbGlnbm1lbnQ7XG4gICAgdGhpcy5yZXBlYXQgPSByZXBlYXQ7XG4gICAgdGhpcy5tYXRjaFRleHREaXJlY3Rpb24gPSBtYXRjaFRleHREaXJlY3Rpb247XG4gICAgdGhpcy5odHRwSGVhZGVycyA9IGh0dHBIZWFkZXJzO1xuICAgIHRoaXMuY2FjaGVNYW5hZ2VyID0gY2FjaGVNYW5hZ2VyO1xuICAgIHRoaXMudXNlT2xkSW1hZ2VPblVybENoYW5nZSA9IHVzZU9sZEltYWdlT25VcmxDaGFuZ2U7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgIHRoaXMuZmlsdGVyUXVhbGl0eSA9IGZpbHRlclF1YWxpdHk7XG4gICAgdGhpcy5jb2xvckJsZW5kTW9kZSA9IGNvbG9yQmxlbmRNb2RlO1xuICAgIHRoaXMucGxhY2Vob2xkZXJGYWRlSW5EdXJhdGlvbiA9IHBsYWNlaG9sZGVyRmFkZUluRHVyYXRpb247XG4gIH1cblxuICBwcmVCdWlsZChqc1dpZGdldEhlbHBlciwgYnVpbGRDb250ZXh0KSB7XG4gICAgLy8g5pqC5pe25Y+q5aSE55CGcGxhY2Vob2xkZXJcbiAgICBpZiAodGhpcy5wbGFjZWhvbGRlcikge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlckNoaWxkID0gdGhpcy5wbGFjZWhvbGRlcihidWlsZENvbnRleHQsIHRoaXMuaW1hZ2VVcmwpO1xuICAgICAgZGVsZXRlIHRoaXMucGxhY2Vob2xkZXI7XG4gICAgfVxuICB9XG59XG5cbkNhY2hlZE5ldHdvcmtJbWFnZS5uZXcgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBuZXcgQ2FjaGVkTmV0d29ya0ltYWdlKGFyZyk7XG59O1xuXG4vLyBzcmNfX2NhY2hlZF9pbWFnZV93aWRnZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLy8gc3JjX19jYWNoZWRfaW1hZ2Vfd2lkZ2V0LkNhY2hlZE5ldHdvcmtJbWFnZSA9IENhY2hlZE5ldHdvcmtJbWFnZTtcbi8vIGV4cG9ydHMuc3JjX19jYWNoZWRfaW1hZ2Vfd2lkZ2V0ID0gc3JjX19jYWNoZWRfaW1hZ2Vfd2lkZ2V0O1xuXG4vL2ZvciBqcyBkZXZcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDYWNoZWROZXR3b3JrSW1hZ2UsXG59O1xuIiwibGV0IHdpZGdldEV4cG9ydHMgPSByZXF1aXJlKCcuL2NhY2hlZF9uZXR3b3JrX2ltYWdlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHdpZGdldEV4cG9ydHM7XG4iLCJcbmNvbnN0IHBhY2thZ2VzX19teGRpbyA9IHJlcXVpcmUoXCIuL214ZGlvXCIpO1xuZXhwb3J0cy5EaW8gPSBwYWNrYWdlc19fbXhkaW8uTVhEaW87XG5leHBvcnRzLkJhc2VPcHRpb25zID0gcGFja2FnZXNfX214ZGlvLk1YQmFzZU9wdGlvbnNcbmV4cG9ydHMuT3B0aW9ucyA9IHBhY2thZ2VzX19teGRpby5NWE9wdGlvbnM7XG5leHBvcnRzLkhlYWRlcnMgPSBwYWNrYWdlc19fbXhkaW8uTVhIZWFkZXJzO1xuZXhwb3J0cy5SZXNwb25zZSA9IHBhY2thZ2VzX19teGRpby5NWFJlc3BvbnNlO1xuZXhwb3J0cy5SZXF1ZXN0T3B0aW9ucyA9IHBhY2thZ2VzX19teGRpby5NWFJlcXVlc3RPcHRpb25zXG5leHBvcnRzLlJlc3BvbnNlVHlwZSA9IHBhY2thZ2VzX19teGRpby5NWFJlc3BvbnNlVHlwZTtcbiIsIi8vICBNWEZsdXR0ZXJGcmFtZXdvcmtcbi8vICBDb3B5cmlnaHQgMjAxOSBUaGUgTVhGbHV0dGVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vL1xuLy8gIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vICBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG5jb25zdCB7IE1YRGFydENsYXNzLCBNWExpZmVjeWNsZURhcnRDbGFzcywgTVhNaXJyb3JPYmpNZXRob2RDYWxsLCBNWEpTTG9nIH0gPSByZXF1aXJlKCdAdGVuY2VudC9teGZsdXR0ZXInKTtcblxuTVhSZXNwb25zZVR5cGUgPSB7XG4gIGpzb246IHsgX25hbWU6ICdSZXNwb25zZVR5cGUuanNvbicsIGluZGV4OiAwIH0sXG4gIHN0cmVhbTogeyBfbmFtZTogJ1Jlc3BvbnNlVHlwZS5zdHJlYW0nLCBpbmRleDogMSB9LFxuICBwbGFpbjogeyBfbmFtZTogJ1Jlc3BvbnNlVHlwZS5wbGFpbicsIGluZGV4OiAyIH0sXG4gIGJ5dGVzOiB7IF9uYW1lOiAnUmVzcG9uc2VUeXBlLmJ5dGVzJywgaW5kZXg6IDMgfSxcbn07XG5cbmNsYXNzIE1YQmFzZU9wdGlvbnMgZXh0ZW5kcyBNWERhcnRDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBtZXRob2QsXG4gICAgY29ubmVjdFRpbWVvdXQsXG4gICAgcmVjZWl2ZVRpbWVvdXQsXG4gICAgc2VuZFRpbWVvdXQsXG4gICAgYmFzZVVybCxcbiAgICBxdWVyeVBhcmFtZXRlcnMsXG4gICAgZXh0cmEsXG4gICAgaGVhZGVycyxcbiAgICByZXNwb25zZVR5cGUsXG4gICAgY29udGVudFR5cGUsXG4gICAgdmFsaWRhdGVTdGF0dXMsXG4gICAgcmVjZWl2ZURhdGFXaGVuU3RhdHVzRXJyb3IsXG4gICAgZm9sbG93UmVkaXJlY3RzLFxuICAgIG1heFJlZGlyZWN0cyxcbiAgfSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNsYXNzTmFtZSA9ICdCYXNlT3B0aW9ucyc7XG5cbiAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICB0aGlzLmNvbm5lY3RUaW1lb3V0ID0gY29ubmVjdFRpbWVvdXQ7XG4gICAgdGhpcy5yZWNlaXZlVGltZW91dCA9IHJlY2VpdmVUaW1lb3V0O1xuICAgIHRoaXMuc2VuZFRpbWVvdXQgPSBzZW5kVGltZW91dDtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICAgIHRoaXMucXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzO1xuICAgIHRoaXMuZXh0cmEgPSBleHRyYTtcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIHRoaXMucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgIHRoaXMuY29udGVudFR5cGUgPSBjb250ZW50VHlwZTtcbiAgICB0aGlzLnZhbGlkYXRlU3RhdHVzID0gdmFsaWRhdGVTdGF0dXM7XG4gICAgdGhpcy5yZWNlaXZlRGF0YVdoZW5TdGF0dXNFcnJvciA9IHJlY2VpdmVEYXRhV2hlblN0YXR1c0Vycm9yO1xuICAgIHRoaXMuZm9sbG93UmVkaXJlY3RzID0gZm9sbG93UmVkaXJlY3RzO1xuICAgIHRoaXMubWF4UmVkaXJlY3RzID0gbWF4UmVkaXJlY3RzO1xuICB9XG59XG5cbmNsYXNzIE1YT3B0aW9ucyBleHRlbmRzIE1YRGFydENsYXNzIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIG1ldGhvZCxcbiAgICBzZW5kVGltZW91dCxcbiAgICByZWNlaXZlVGltZW91dCxcbiAgICBleHRyYSxcbiAgICBoZWFkZXJzLFxuICAgIHJlc3BvbnNlVHlwZSxcbiAgICBjb250ZW50VHlwZSxcbiAgICB2YWxpZGF0ZVN0YXR1cyxcbiAgICByZWNlaXZlRGF0YVdoZW5TdGF0dXNFcnJvcixcbiAgICBmb2xsb3dSZWRpcmVjdHMsXG4gICAgbWF4UmVkaXJlY3RzLFxuICAgIC8vIHJlcXVlc3RFbmNvZGVyLFxuICAgIC8vIHJlc3BvbnNlRGVjb2RlcixcbiAgfSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNsYXNzTmFtZSA9ICdPcHRpb25zJztcbiAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICB0aGlzLnNlbmRUaW1lb3V0ID0gc2VuZFRpbWVvdXQ7XG4gICAgdGhpcy5yZWNlaXZlVGltZW91dCA9IHJlY2VpdmVUaW1lb3V0O1xuICAgIHRoaXMuZXh0cmEgPSBleHRyYTtcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIHRoaXMucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgIHRoaXMuY29udGVudFR5cGUgPSBjb250ZW50VHlwZTtcbiAgICB0aGlzLnZhbGlkYXRlU3RhdHVzID0gdmFsaWRhdGVTdGF0dXM7XG4gICAgdGhpcy5yZWNlaXZlRGF0YVdoZW5TdGF0dXNFcnJvciA9IHJlY2VpdmVEYXRhV2hlblN0YXR1c0Vycm9yO1xuICAgIHRoaXMuZm9sbG93UmVkaXJlY3RzID0gZm9sbG93UmVkaXJlY3RzO1xuICAgIHRoaXMubWF4UmVkaXJlY3RzID0gbWF4UmVkaXJlY3RzO1xuICAgIC8vIHRoaXMucmVxdWVzdEVuY29kZXIgPSByZXF1ZXN0RW5jb2RlcjtcbiAgICAvLyB0aGlzLnJlc3BvbnNlRGVjb2RlciA9IHJlc3BvbnNlRGVjb2RlcjtcbiAgfVxufVxuXG5jbGFzcyBNWFJlcXVlc3RPcHRpb25zIGV4dGVuZHMgTVhEYXJ0Q2xhc3Mge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbWV0aG9kLFxuICAgIHNlbmRUaW1lb3V0LFxuICAgIHJlY2VpdmVUaW1lb3V0LFxuICAgIGNvbm5lY3RUaW1lb3V0LFxuICAgIGRhdGEsXG4gICAgcGF0aCxcbiAgICBxdWVyeVBhcmFtZXRlcnMsXG4gICAgYmFzZVVybCxcbiAgICBleHRyYSxcbiAgICBoZWFkZXJzLFxuICAgIHJlc3BvbnNlVHlwZSxcbiAgICBjb250ZW50VHlwZSxcbiAgICB2YWxpZGF0ZVN0YXR1cyxcbiAgICByZWNlaXZlRGF0YVdoZW5TdGF0dXNFcnJvcixcbiAgICBmb2xsb3dSZWRpcmVjdHMsXG4gICAgbWF4UmVkaXJlY3RzLFxuICB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJ1JlcXVlc3RPcHRpb25zJztcbiAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICB0aGlzLnNlbmRUaW1lb3V0ID0gc2VuZFRpbWVvdXQ7XG4gICAgdGhpcy5yZWNlaXZlVGltZW91dCA9IHJlY2VpdmVUaW1lb3V0O1xuICAgIHRoaXMuY29ubmVjdFRpbWVvdXQgPSBjb25uZWN0VGltZW91dDtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgdGhpcy5xdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnM7XG4gICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLmV4dHJhID0gZXh0cmE7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICB0aGlzLmNvbnRlbnRUeXBlID0gY29udGVudFR5cGU7XG4gICAgdGhpcy52YWxpZGF0ZVN0YXR1cyA9IHZhbGlkYXRlU3RhdHVzO1xuICAgIHRoaXMucmVjZWl2ZURhdGFXaGVuU3RhdHVzRXJyb3IgPSByZWNlaXZlRGF0YVdoZW5TdGF0dXNFcnJvcjtcbiAgICB0aGlzLmZvbGxvd1JlZGlyZWN0cyA9IGZvbGxvd1JlZGlyZWN0cztcbiAgICB0aGlzLm1heFJlZGlyZWN0cyA9IG1heFJlZGlyZWN0cztcbiAgfVxufVxuXG5jbGFzcyBNWEhlYWRlcnMge1xuICBjb25zdHJ1Y3Rvcih7IG1hcCB9ID0ge30pIHtcbiAgICB0aGlzLm1hcCA9IG1hcDtcbiAgfVxuICAvLy8gQ29udmVuaWVuY2UgbWV0aG9kIGZvciB0aGUgdmFsdWUgZm9yIGEgc2luZ2xlIHZhbHVlZCBoZWFkZXIuIElmXG4gIC8vLyB0aGVyZSBpcyBubyBoZWFkZXIgd2l0aCB0aGUgcHJvdmlkZWQgbmFtZSwgWzpudWxsOl0gd2lsbCBiZVxuICAvLy8gcmV0dXJuZWQuIElmIHRoZSBoZWFkZXIgaGFzIG1vcmUgdGhhbiBvbmUgdmFsdWUgYW4gZXhjZXB0aW9uIGlzXG4gIC8vLyB0aHJvd24uXG4gIHZhbHVlKG5hbWUpIHtcbiAgICBsZXQgYXJyID0gdGhpcy5tYXBbbmFtZV07XG4gICAgaWYgKGFyciA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoYXJyLmxlbmd0aCA9PSAxKSByZXR1cm4gYXJyWzBdO1xuICAgIHRocm93IEV4Y2VwdGlvbignXCIkbmFtZVwiIGhlYWRlciBoYXMgbW9yZSB0aGFuIG9uZSB2YWx1ZSwgcGxlYXNlIHVzZSBIZWFkZXJzW25hbWVdJyk7XG4gIH1cbn1cblxuTVhIZWFkZXJzLmFjY2VwdEhlYWRlciA9ICdhY2NlcHQnO1xuTVhIZWFkZXJzLmNvbnRlbnRFbmNvZGluZ0hlYWRlciA9ICdjb250ZW50LWVuY29kaW5nJztcbk1YSGVhZGVycy5jb250ZW50TGVuZ3RoSGVhZGVyID0gJ2NvbnRlbnQtbGVuZ3RoJztcbk1YSGVhZGVycy5jb250ZW50VHlwZUhlYWRlciA9ICdjb250ZW50LXR5cGUnO1xuTVhIZWFkZXJzLnd3d0F1dGhlbnRpY2F0ZUhlYWRlciA9ICd3d3ctYXV0aGVudGljYXRlJztcbi8vIEhlYWRlciBmaWVsZCB2YWx1ZVxuTVhIZWFkZXJzLmpzb25Db250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04Jztcbk1YSGVhZGVycy5mb3JtVXJsRW5jb2RlZENvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG5cbmNsYXNzIE1YUmVzcG9uc2UgZXh0ZW5kcyBNWERhcnRDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHsgZGF0YSwgaGVhZGVycywgcmVxdWVzdCwgaXNSZWRpcmVjdCwgc3RhdHVzQ29kZSwgc3RhdHVzTWVzc2FnZSwgcmVkaXJlY3RzLCBleHRyYSB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJ1Jlc3BvbnNlJztcblxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHRoaXMuaXNSZWRpcmVjdCA9IGlzUmVkaXJlY3Q7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLnN0YXR1c01lc3NhZ2UgPSBzdGF0dXNNZXNzYWdlO1xuICAgIHRoaXMucmVkaXJlY3RzID0gcmVkaXJlY3RzO1xuICAgIHRoaXMuZXh0cmEgPSBleHRyYTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSlNPTihqc29uTWFwKSB7XG4gICAgbGV0IHJlc3AgPSBuZXcgTVhSZXNwb25zZSgpO1xuICAgIHJlc3AuZGF0YSA9IGpzb25NYXBbJ2RhdGEnXTtcbiAgICByZXNwLmhlYWRlcnMgPSBuZXcgTVhIZWFkZXJzKGpzb25NYXBbJ2hlYWRlcnMnXSk7XG4gICAgcmVzcC5yZXF1ZXN0ID0ganNvbk1hcFsncmVxdWVzdCddO1xuICAgIHJlc3AuaXNSZWRpcmVjdCA9IGpzb25NYXBbJ2lzUmVkaXJlY3QnXTtcbiAgICByZXNwLnN0YXR1c0NvZGUgPSBqc29uTWFwWydzdGF0dXNDb2RlJ107XG4gICAgcmVzcC5zdGF0dXNNZXNzYWdlID0ganNvbk1hcFsnc3RhdHVzTWVzc2FnZSddO1xuICAgIHJlc3AucmVkaXJlY3RzID0ganNvbk1hcFsncmVkaXJlY3RzJ107XG4gICAgcmVzcC5leHRyYSA9IGpzb25NYXBbJ2V4dHJhJ107XG5cbiAgICByZXR1cm4gcmVzcDtcbiAgfVxufVxuXG4vLy/kuLrkuoZpT1MgLyBBbmRyb2lkIOWPjOW5s+WPsOWQjOaXtuaUr+aMge+8jOeUqEZsdXR0ZXLlsYLog73lipvmnaXlrp7njrDnvZHnu5xcbmNsYXNzIE1YRGlvIGV4dGVuZHMgTVhMaWZlY3ljbGVEYXJ0Q2xhc3Mge1xuICBjb25zdHJ1Y3RvcihiYXNlT3B0aW9ucykge1xuICAgIC8v5Yib5bu65a+55bqURkx1dHRlcuWvueixoVxuICAgIHZhciBhcmd1bWVudCA9IG5ldyBNWE1pcnJvck9iak1ldGhvZENhbGwoe1xuICAgICAgY2xhc3NOYW1lOiAnRGlvJyxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgYmFzZU9wdGlvbnM6IGJhc2VPcHRpb25zLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHN1cGVyKGFyZ3VtZW50KTtcbiAgfVxuXG4gIGdldChcbiAgICBwYXRoLFxuICAgIHtcbiAgICAgIHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgIG9wdGlvbnMsXG4gICAgICAvL2NhbmNlbFRva2VuLFxuICAgICAgb25SZWNlaXZlUHJvZ3Jlc3MsXG4gICAgfSA9IHt9LFxuICApIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHBhdGgsIHtcbiAgICAgIG9wdGlvbnM6IHRoaXMuY2hlY2tPcHRpb25zKCdnZXQnLCBvcHRpb25zKSxcbiAgICAgIHF1ZXJ5UGFyYW1ldGVyczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgLy9jYW5jZWxUb2tlbjogY2FuY2VsVG9rZW4sXG4gICAgICBvblJlY2VpdmVQcm9ncmVzczogb25SZWNlaXZlUHJvZ3Jlc3MsXG4gICAgfSk7XG4gIH1cblxuICBwb3N0KFxuICAgIHBhdGgsXG4gICAge1xuICAgICAgZGF0YSxcbiAgICAgIHF1ZXJ5UGFyYW1ldGVycywgLy8gTWFwPFN0cmluZywgZHluYW1pYz5cbiAgICAgIG9wdGlvbnMsIC8vT3B0aW9uc1xuICAgICAgLy9jYW5jZWxUb2tlbixcbiAgICAgIG9uU2VuZFByb2dyZXNzLCAvL1Byb2dyZXNzQ2FsbGJhY2tcbiAgICAgIG9uUmVjZWl2ZVByb2dyZXNzLCAvL1Byb2dyZXNzQ2FsbGJhY2tcbiAgICB9ID0ge30sXG4gICkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QocGF0aCwge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIG9wdGlvbnM6IHRoaXMuY2hlY2tPcHRpb25zKCdwb3N0Jywgb3B0aW9ucyksXG4gICAgICBxdWVyeVBhcmFtZXRlcnM6IHF1ZXJ5UGFyYW1ldGVycyxcblxuICAgICAgLy9jYW5jZWxUb2tlbjogY2FuY2VsVG9rZW4sXG4gICAgICBvblNlbmRQcm9ncmVzczogb25TZW5kUHJvZ3Jlc3MsXG4gICAgICBvblJlY2VpdmVQcm9ncmVzczogb25SZWNlaXZlUHJvZ3Jlc3MsXG4gICAgfSk7XG4gIH1cblxuICByZXF1ZXN0KFxuICAgIHBhdGgsXG4gICAge1xuICAgICAgZGF0YSxcbiAgICAgIHF1ZXJ5UGFyYW1ldGVycywgLy8gTWFwPFN0cmluZywgZHluYW1pYz5cbiAgICAgIG9wdGlvbnMsIC8vT3B0aW9uc1xuICAgICAgb25TZW5kUHJvZ3Jlc3MsIC8vUHJvZ3Jlc3NDYWxsYmFja1xuICAgICAgb25SZWNlaXZlUHJvZ3Jlc3MsIC8vUHJvZ3Jlc3NDYWxsYmFja1xuICAgIH0gPSB7fSxcbiAgKSB7XG4gICAgbGV0IG9uU2VuZFByb2dyZXNzQ2FsbGJhY2tJRCA9IHRoaXMuYWRkQ2FsbGJhY2sob25TZW5kUHJvZ3Jlc3MpO1xuICAgIGxldCBvblJlY2VpdmVQcm9ncmVzc0NhbGxiYWNrSUQgPSB0aGlzLmFkZENhbGxiYWNrKG9uUmVjZWl2ZVByb2dyZXNzKTtcblxuICAgIGxldCBhcmd1bWVudCA9IG5ldyBNWE1pcnJvck9iak1ldGhvZENhbGwoe1xuICAgICAgY2xhc3NOYW1lOiAnRGlvJyxcbiAgICAgIGZ1bmNOYW1lOiAncmVxdWVzdCcsXG4gICAgICBhcmdzOiB7XG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIHF1ZXJ5UGFyYW1ldGVyczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICBvblNlbmRQcm9ncmVzczogb25TZW5kUHJvZ3Jlc3NDYWxsYmFja0lELFxuICAgICAgICBvblJlY2VpdmVQcm9ncmVzczogb25SZWNlaXZlUHJvZ3Jlc3NDYWxsYmFja0lELFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICBsZXQgcHJvbWlzZVJlc3VsdCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRoYXQuaW52b2tlTWlycm9yT2JqTWV0aG9kKGFyZ3VtZW50LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBsZXQganNvbk1hcCA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgIGxldCByZXNwb25zZSA9IE1YUmVzcG9uc2UuZnJvbUpTT04oanNvbk1hcCk7XG5cbiAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvcHRpb25zLnJlc3BvbnNlVHlwZSA9PSBNWFJlc3BvbnNlVHlwZS5ieXRlcykge1xuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IGNvbnZlcnQuYmFzZTY0RW5jb2RlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGF0LnJlbW92ZUNhbGxiYWNrKG9uU2VuZFByb2dyZXNzQ2FsbGJhY2tJRCk7XG4gICAgICAgICAgdGhhdC5yZW1vdmVDYWxsYmFjayhvblJlY2VpdmVQcm9ncmVzc0NhbGxiYWNrSUQpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb21pc2VSZXN1bHQ7XG4gIH1cblxuICBjaGVja09wdGlvbnMobWV0aG9kLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBvcHRpb25zIDogbmV3IE1YT3B0aW9ucygpO1xuICAgIG9wdGlvbnMubWV0aG9kID0gbWV0aG9kO1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1YRkRpbyhiYXNlT3B0aW9ucykge1xuICByZXR1cm4gbmV3IE1YRGlvKGJhc2VPcHRpb25zKTtcbn1cblxuLy/miYvlhplKU+S9v+eUqOeahOWvvOWHulxuZXhwb3J0cy5NWERpbyA9IE1YRkRpbztcbmV4cG9ydHMuTVhCYXNlT3B0aW9ucyA9IE1YQmFzZU9wdGlvbnM7XG5leHBvcnRzLk1YT3B0aW9ucyA9IE1YT3B0aW9ucztcbmV4cG9ydHMuTVhIZWFkZXJzID0gTVhIZWFkZXJzO1xuZXhwb3J0cy5NWFJlc3BvbnNlID0gTVhSZXNwb25zZTtcbmV4cG9ydHMuTVhSZXF1ZXN0T3B0aW9ucyA9IE1YUmVxdWVzdE9wdGlvbnM7XG5leHBvcnRzLk1YUmVzcG9uc2VUeXBlID0gTVhSZXNwb25zZVR5cGU7XG4iLCJcbmxldCBzbWFydFJlZnJlc2hlckV4cG9ydHMgPSByZXF1aXJlKFwiLi9zcmMvc21hcnRfcmVmcmVzaGVyLmpzXCIpO1xubGV0IGNsYXNzSW5kaWNhdG9yRXhwb3J0cyA9IHJlcXVpcmUoXCIuL3NyYy9pbmRpY2F0b3IvY2xhc3NfaW5kaWNhdG9yLmpzXCIpO1xuXG5leHBvcnRzLlNtYXJ0UmVmcmVzaGVyID0gc21hcnRSZWZyZXNoZXJFeHBvcnRzLlNtYXJ0UmVmcmVzaGVyO1xuZXhwb3J0cy5SZWZyZXNoQ29udHJvbGxlciA9IHNtYXJ0UmVmcmVzaGVyRXhwb3J0cy5SZWZyZXNoQ29udHJvbGxlcjtcbmV4cG9ydHMuUmVmcmVzaENvbmZpZ3VyYXRpb24gPSBzbWFydFJlZnJlc2hlckV4cG9ydHMuUmVmcmVzaENvbmZpZ3VyYXRpb247XG5leHBvcnRzLkxvYWRTdGF0dXMgPSBzbWFydFJlZnJlc2hlckV4cG9ydHMuTG9hZFN0YXR1cztcbmV4cG9ydHMuTG9hZFN0eWxlID0gc21hcnRSZWZyZXNoZXJFeHBvcnRzLkxvYWRTdHlsZTtcbmV4cG9ydHMuSWNvblBvc2l0aW9uID0gc21hcnRSZWZyZXNoZXJFeHBvcnRzLkljb25Qb3NpdGlvbjtcbmV4cG9ydHMuUmVmcmVzaFN0YXR1cyA9IHNtYXJ0UmVmcmVzaGVyRXhwb3J0cy5SZWZyZXNoU3RhdHVzO1xuXG5leHBvcnRzLkNsYXNzaWNIZWFkZXIgPSBjbGFzc0luZGljYXRvckV4cG9ydHMuQ2xhc3NpY0hlYWRlcjtcbmV4cG9ydHMuQ2xhc3NpY0Zvb3RlciA9IGNsYXNzSW5kaWNhdG9yRXhwb3J0cy5DbGFzc2ljRm9vdGVyO1xuIiwiLy8gIE1YRmx1dHRlckZyYW1ld29ya1xuLy8gIENvcHlyaWdodCAyMDE5IFRoZSBNWEZsdXR0ZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmNvbnN0IHsgTVhNaXJyb3JXaWRnZXQgLE1YTGlmZWN5Y2xlV2lkZ2V0Q29udHJvbGxlckJhc2UsTVhNaXJyb3JPYmpNZXRob2RDYWxsfSA9IHJlcXVpcmUoJ0B0ZW5jZW50L214Zmx1dHRlcicpO1xuXG5jbGFzcyBDbGFzc2ljSGVhZGVyIGV4dGVuZHMgTVhNaXJyb3JXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAga2V5LFxuICAgICAgICByZWZyZXNoU3R5bGUsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgY29tcGxldGVEdXJhdGlvbixcbiAgICAgICAgb3V0ZXJCdWlsZGVyLFxuICAgICAgICB0ZXh0U3R5bGUsXG4gICAgICAgIHJlbGVhc2VUZXh0LFxuICAgICAgICByZWZyZXNoaW5nVGV4dCxcbiAgICAgICAgY2FuVHdvTGV2ZWxJY29uLFxuICAgICAgICB0d29MZXZlbFZpZXcsXG4gICAgICAgIGNhblR3b0xldmVsVGV4dCxcbiAgICAgICAgY29tcGxldGVUZXh0LFxuICAgICAgICBmYWlsZWRUZXh0LFxuICAgICAgICBpZGxlVGV4dCxcbiAgICAgICAgaWNvblBvcyxcbiAgICAgICAgc3BhY2luZyxcbiAgICAgICAgcmVmcmVzaGluZ0ljb24sXG4gICAgICAgIGZhaWxlZEljb24sXG4gICAgICAgIGNvbXBsZXRlSWNvbixcbiAgICAgICAgaWRsZUljb24sXG4gICAgICAgIHJlbGVhc2VJY29uLFxuICAgIH0gPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnJlZnJlc2hTdHlsZSA9IHJlZnJlc2hTdHlsZTtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuY29tcGxldGVEdXJhdGlvbiA9IGNvbXBsZXRlRHVyYXRpb247XG4gICAgICAgIHRoaXMub3V0ZXJCdWlsZGVyID0gb3V0ZXJCdWlsZGVyO1xuICAgICAgICB0aGlzLnRleHRTdHlsZSA9IHRleHRTdHlsZTtcbiAgICAgICAgdGhpcy5yZWxlYXNlVGV4dCA9IHJlbGVhc2VUZXh0O1xuICAgICAgICB0aGlzLnJlZnJlc2hpbmdUZXh0ID0gcmVmcmVzaGluZ1RleHQ7XG4gICAgICAgIHRoaXMuY2FuVHdvTGV2ZWxJY29uID0gY2FuVHdvTGV2ZWxJY29uO1xuICAgICAgICB0aGlzLnR3b0xldmVsVmlldyA9IHR3b0xldmVsVmlldztcbiAgICAgICAgdGhpcy5jYW5Ud29MZXZlbFRleHQgPSBjYW5Ud29MZXZlbFRleHQ7XG4gICAgICAgIHRoaXMuY29tcGxldGVUZXh0ID0gY29tcGxldGVUZXh0O1xuICAgICAgICB0aGlzLmZhaWxlZFRleHQgPSBmYWlsZWRUZXh0O1xuICAgICAgICB0aGlzLmlkbGVUZXh0ID0gaWRsZVRleHQ7XG4gICAgICAgIHRoaXMuaWNvblBvcyA9IGljb25Qb3M7XG4gICAgICAgIHRoaXMuc3BhY2luZyA9IHNwYWNpbmc7XG4gICAgICAgIHRoaXMucmVmcmVzaGluZ0ljb24gPSByZWZyZXNoaW5nSWNvbjtcbiAgICAgICAgdGhpcy5mYWlsZWRJY29uID0gZmFpbGVkSWNvbjtcbiAgICAgICAgdGhpcy5jb21wbGV0ZUljb24gPSBjb21wbGV0ZUljb247XG4gICAgICAgIHRoaXMuaWRsZUljb24gPSBpZGxlSWNvbjtcbiAgICAgICAgdGhpcy5yZWxlYXNlSWNvbiA9IHJlbGVhc2VJY29uO1xuICAgIH1cbn1cblxuQ2xhc3NpY0hlYWRlci5uZXcgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIG5ldyBDbGFzc2ljSGVhZGVyKGFyZyk7XG59O1xuXG5jbGFzcyBDbGFzc2ljRm9vdGVyIGV4dGVuZHMgTVhNaXJyb3JXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAga2V5LFxuICAgICAgICBvbkNsaWNrLFxuICAgICAgICBsb2FkU3R5bGUsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgb3V0ZXJCdWlsZGVyLFxuICAgICAgICB0ZXh0U3R5bGUsXG4gICAgICAgIGxvYWRpbmdUZXh0LFxuICAgICAgICBub0RhdGFUZXh0LFxuICAgICAgICBub01vcmVJY29uLFxuICAgICAgICBpZGxlVGV4dCxcbiAgICAgICAgZmFpbGVkVGV4dCxcbiAgICAgICAgY2FuTG9hZGluZ1RleHQsXG4gICAgICAgIGZhaWxlZEljb24sXG4gICAgICAgIGljb25Qb3MsXG4gICAgICAgIHNwYWNpbmcsXG4gICAgICAgIGNvbXBsZXRlRHVyYXRpb24sXG4gICAgICAgIGxvYWRpbmdJY29uLFxuICAgICAgICBjYW5Mb2FkaW5nSWNvbixcbiAgICAgICAgaWRsZUljb24sXG4gICAgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMub25DbGljayA9IG9uQ2xpY2s7XG4gICAgICAgIHRoaXMubG9hZFN0eWxlID0gbG9hZFN0eWxlO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5vdXRlckJ1aWxkZXIgPSBvdXRlckJ1aWxkZXI7XG4gICAgICAgIHRoaXMudGV4dFN0eWxlID0gdGV4dFN0eWxlO1xuICAgICAgICB0aGlzLmxvYWRpbmdUZXh0ID0gbG9hZGluZ1RleHQ7XG4gICAgICAgIHRoaXMubm9EYXRhVGV4dCA9IG5vRGF0YVRleHQ7XG4gICAgICAgIHRoaXMubm9Nb3JlSWNvbiA9IG5vTW9yZUljb247XG4gICAgICAgIHRoaXMuaWRsZVRleHQgPSBpZGxlVGV4dDtcbiAgICAgICAgdGhpcy5mYWlsZWRUZXh0ID0gZmFpbGVkVGV4dDtcbiAgICAgICAgdGhpcy5jYW5Mb2FkaW5nVGV4dCA9IGNhbkxvYWRpbmdUZXh0O1xuICAgICAgICB0aGlzLmZhaWxlZEljb24gPSBmYWlsZWRJY29uO1xuICAgICAgICB0aGlzLmljb25Qb3MgPSBpY29uUG9zO1xuICAgICAgICB0aGlzLnNwYWNpbmcgPSBzcGFjaW5nO1xuICAgICAgICB0aGlzLmNvbXBsZXRlRHVyYXRpb24gPSBjb21wbGV0ZUR1cmF0aW9uO1xuICAgICAgICB0aGlzLmxvYWRpbmdJY29uID0gbG9hZGluZ0ljb247XG4gICAgICAgIHRoaXMuY2FuTG9hZGluZ0ljb24gPSBjYW5Mb2FkaW5nSWNvbjtcbiAgICAgICAgdGhpcy5pZGxlSWNvbiA9IGlkbGVJY29uO1xuICAgIH1cbn1cblxuQ2xhc3NpY0Zvb3Rlci5uZXcgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIG5ldyBDbGFzc2ljRm9vdGVyKGFyZyk7XG59O1xuXG4vLyBzcmNfX2luZGljYXRvcl9fY2xhc3NpY19pbmRpY2F0b3IgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLy8gc3JjX19pbmRpY2F0b3JfX2NsYXNzaWNfaW5kaWNhdG9yLkNsYXNzaWNIZWFkZXIgPSBDbGFzc2ljSGVhZGVyO1xuLy8gc3JjX19pbmRpY2F0b3JfX2NsYXNzaWNfaW5kaWNhdG9yLkNsYXNzaWNGb290ZXIgPSBDbGFzc2ljRm9vdGVyO1xuXG4vLyBleHBvcnRzLnNyY19faW5kaWNhdG9yX19jbGFzc2ljX2luZGljYXRvciA9IHNyY19faW5kaWNhdG9yX19jbGFzc2ljX2luZGljYXRvcjtcblxuZXhwb3J0cy5DbGFzc2ljSGVhZGVyID0gQ2xhc3NpY0hlYWRlcjtcbmV4cG9ydHMuQ2xhc3NpY0Zvb3RlciA9IENsYXNzaWNGb290ZXI7IiwiLy8gIE1YRmx1dHRlckZyYW1ld29ya1xuLy8gIENvcHlyaWdodCAyMDE5IFRoZSBNWEZsdXR0ZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cblxuY29uc3QgeyBNWE1pcnJvcldpZGdldCAsTVhMaWZlY3ljbGVXaWRnZXRDb250cm9sbGVyQmFzZSxNWE1pcnJvck9iak1ldGhvZENhbGx9ID0gcmVxdWlyZSgnQHRlbmNlbnQvbXhmbHV0dGVyJyk7XG5cbkxvYWRTdGF0dXMgPSB7XG4gICAgc3RhcnQ6IHtcbiAgICAgICAgX25hbWU6IFwiQ3Jvc3NBeGlzQWxpZ25tZW50LmlkbGVcIixcbiAgICAgICAgaW5kZXg6IDBcbiAgICB9LFxuICAgIGVuZDoge1xuICAgICAgICBfbmFtZTogXCJDcm9zc0F4aXNBbGlnbm1lbnQuY2FuTG9hZGluZ1wiLFxuICAgICAgICBpbmRleDogMVxuICAgIH0sXG4gICAgY2VudGVyOiB7XG4gICAgICAgIF9uYW1lOiBcIkNyb3NzQXhpc0FsaWdubWVudC5sb2FkaW5nXCIsXG4gICAgICAgIGluZGV4OiAyXG4gICAgfSxcbiAgICBzdHJldGNoOiB7XG4gICAgICAgIF9uYW1lOiBcIkNyb3NzQXhpc0FsaWdubWVudC5ub01vcmVcIixcbiAgICAgICAgaW5kZXg6IDNcbiAgICB9LFxuICAgIGJhc2VsaW5lOiB7XG4gICAgICAgIF9uYW1lOiBcIkNyb3NzQXhpc0FsaWdubWVudC5mYWlsZWRcIixcbiAgICAgICAgaW5kZXg6IDRcbiAgICB9XG59O1xuXG5jbGFzcyBSZWZyZXNoQ29uZmlndXJhdGlvbiBleHRlbmRzIE1YTWlycm9yV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIGNoaWxkLFxuICAgICAgICBoZWFkZXJCdWlsZGVyLFxuICAgICAgICBmb290ZXJCdWlsZGVyLFxuICAgICAgICBkcmFnU3BlZWRSYXRpbyxcbiAgICAgICAgc2hvdWxkRm9vdGVyRm9sbG93V2hlbk5vdEZ1bGwsXG4gICAgICAgIGVuYWJsZVNjcm9sbFdoZW5Ud29MZXZlbCxcbiAgICAgICAgZW5hYmxlTG9hZGluZ1doZW5Ob0RhdGEsXG4gICAgICAgIGVuYWJsZUJhbGxpc3RpY1JlZnJlc2gsXG4gICAgICAgIHNwcmluZ0Rlc2NyaXB0aW9uLFxuICAgICAgICBlbmFibGVTY3JvbGxXaGVuUmVmcmVzaENvbXBsZXRlZCxcbiAgICAgICAgZW5hYmxlTG9hZGluZ1doZW5GYWlsZWQsXG4gICAgICAgIHR3aWNlVHJpZ2dlckRpc3RhbmNlLFxuICAgICAgICBjbG9zZVR3b0xldmVsRGlzdGFuY2UsXG4gICAgICAgIHNraXBDYW5SZWZyZXNoLFxuICAgICAgICBhdXRvTG9hZCxcbiAgICAgICAgbWF4T3ZlclNjcm9sbEV4dGVudCxcbiAgICAgICAgZW5hYmxlQmFsbGlzdGljTG9hZCxcbiAgICAgICAgbWF4VW5kZXJTY3JvbGxFeHRlbnQsXG4gICAgICAgIGhlYWRlclRyaWdnZXJEaXN0YW5jZSxcbiAgICAgICAgZm9vdGVyVHJpZ2dlckRpc3RhbmNlLFxuICAgICAgICBoaWRlRm9vdGVyV2hlbk5vdEZ1bGwsXG4gICAgICAgIHRvcEhpdEJvdW5kYXJ5LFxuICAgICAgICBib3R0b21IaXRCb3VuZGFyeSxcbiAgICB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmNoaWxkID0gY2hpbGQ7XG4gICAgICAgIHRoaXMuaGVhZGVyQnVpbGRlciA9IGhlYWRlckJ1aWxkZXI7XG4gICAgICAgIHRoaXMuZm9vdGVyQnVpbGRlciA9IGZvb3RlckJ1aWxkZXI7XG4gICAgICAgIHRoaXMuZHJhZ1NwZWVkUmF0aW8gPSBkcmFnU3BlZWRSYXRpbztcbiAgICAgICAgdGhpcy5zaG91bGRGb290ZXJGb2xsb3dXaGVuTm90RnVsbCA9IHNob3VsZEZvb3RlckZvbGxvd1doZW5Ob3RGdWxsO1xuICAgICAgICB0aGlzLmVuYWJsZVNjcm9sbFdoZW5Ud29MZXZlbCA9IGVuYWJsZVNjcm9sbFdoZW5Ud29MZXZlbDtcbiAgICAgICAgdGhpcy5lbmFibGVMb2FkaW5nV2hlbk5vRGF0YSA9IGVuYWJsZUxvYWRpbmdXaGVuTm9EYXRhO1xuICAgICAgICB0aGlzLmVuYWJsZUJhbGxpc3RpY1JlZnJlc2ggPSBlbmFibGVCYWxsaXN0aWNSZWZyZXNoO1xuICAgICAgICB0aGlzLnNwcmluZ0Rlc2NyaXB0aW9uID0gc3ByaW5nRGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZW5hYmxlU2Nyb2xsV2hlblJlZnJlc2hDb21wbGV0ZWQgPSBlbmFibGVTY3JvbGxXaGVuUmVmcmVzaENvbXBsZXRlZDtcbiAgICAgICAgdGhpcy5lbmFibGVMb2FkaW5nV2hlbkZhaWxlZCA9IGVuYWJsZUxvYWRpbmdXaGVuRmFpbGVkO1xuICAgICAgICB0aGlzLnR3aWNlVHJpZ2dlckRpc3RhbmNlID0gdHdpY2VUcmlnZ2VyRGlzdGFuY2U7XG4gICAgICAgIHRoaXMuY2xvc2VUd29MZXZlbERpc3RhbmNlID0gY2xvc2VUd29MZXZlbERpc3RhbmNlO1xuICAgICAgICB0aGlzLnNraXBDYW5SZWZyZXNoID0gc2tpcENhblJlZnJlc2g7XG4gICAgICAgIHRoaXMuYXV0b0xvYWQgPSBhdXRvTG9hZDtcbiAgICAgICAgdGhpcy5tYXhPdmVyU2Nyb2xsRXh0ZW50ID0gbWF4T3ZlclNjcm9sbEV4dGVudDtcbiAgICAgICAgdGhpcy5lbmFibGVCYWxsaXN0aWNMb2FkID0gZW5hYmxlQmFsbGlzdGljTG9hZDtcbiAgICAgICAgdGhpcy5tYXhVbmRlclNjcm9sbEV4dGVudCA9IG1heFVuZGVyU2Nyb2xsRXh0ZW50O1xuICAgICAgICB0aGlzLmhlYWRlclRyaWdnZXJEaXN0YW5jZSA9IGhlYWRlclRyaWdnZXJEaXN0YW5jZTtcbiAgICAgICAgdGhpcy5mb290ZXJUcmlnZ2VyRGlzdGFuY2UgPSBmb290ZXJUcmlnZ2VyRGlzdGFuY2U7XG4gICAgICAgIHRoaXMuaGlkZUZvb3RlcldoZW5Ob3RGdWxsID0gaGlkZUZvb3RlcldoZW5Ob3RGdWxsO1xuICAgICAgICB0aGlzLnRvcEhpdEJvdW5kYXJ5ID0gdG9wSGl0Qm91bmRhcnk7XG4gICAgICAgIHRoaXMuYm90dG9tSGl0Qm91bmRhcnkgPSBib3R0b21IaXRCb3VuZGFyeTtcbiAgICB9XG5cbiAgICBwcmVCdWlsZChqc1dpZGdldEhlbHBlciwgYnVpbGRDb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLmhlYWRlckJ1aWxkZXIpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlckJ1aWxkZXJDaGlsZCA9IHRoaXMuaGVhZGVyQnVpbGRlcigpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmhlYWRlckJ1aWxkZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5mb290ZXJCdWlsZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmZvb3RlckJ1aWxkZXJDaGlsZCA9IHRoaXMuZm9vdGVyQnVpbGRlcigpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZm9vdGVyQnVpbGRlcjtcbiAgICAgICAgfVxuXG4gICAgfVxufVxuXG5SZWZyZXNoQ29uZmlndXJhdGlvbi5uZXcgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIG5ldyBSZWZyZXNoQ29uZmlndXJhdGlvbihhcmcpO1xufTtcblxuY2xhc3MgU21hcnRSZWZyZXNoZXIgZXh0ZW5kcyBNWE1pcnJvcldpZGdldCB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBrZXksXG4gICAgICAgIGNvbnRyb2xsZXIsXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBoZWFkZXIsXG4gICAgICAgIGZvb3RlcixcbiAgICAgICAgZW5hYmxlUHVsbERvd24sXG4gICAgICAgIGVuYWJsZVB1bGxVcCxcbiAgICAgICAgZW5hYmxlVHdvTGV2ZWwsXG4gICAgICAgIG9uUmVmcmVzaCxcbiAgICAgICAgb25Mb2FkaW5nLFxuICAgICAgICBvblR3b0xldmVsLFxuICAgICAgICBvbk9mZnNldENoYW5nZSxcbiAgICAgICAgZHJhZ1N0YXJ0QmVoYXZpb3IsXG4gICAgICAgIHByaW1hcnksXG4gICAgICAgIGNhY2hlRXh0ZW50LFxuICAgICAgICBzZW1hbnRpY0NoaWxkQ291bnQsXG4gICAgICAgIHJldmVyc2UsXG4gICAgICAgIHBoeXNpY3MsXG4gICAgICAgIHNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgc2Nyb2xsQ29udHJvbGxlcixcbiAgICB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICAgICAgdGhpcy5jaGlsZCA9IGNoaWxkO1xuICAgICAgICB0aGlzLmhlYWRlciA9IGhlYWRlcjtcbiAgICAgICAgdGhpcy5mb290ZXIgPSBmb290ZXI7XG4gICAgICAgIHRoaXMuZW5hYmxlUHVsbERvd24gPSBlbmFibGVQdWxsRG93bjtcbiAgICAgICAgdGhpcy5lbmFibGVQdWxsVXAgPSBlbmFibGVQdWxsVXA7XG4gICAgICAgIHRoaXMuZW5hYmxlVHdvTGV2ZWwgPSBlbmFibGVUd29MZXZlbDtcbiAgICAgICAgdGhpcy5vblJlZnJlc2ggPSBvblJlZnJlc2g7XG4gICAgICAgIHRoaXMub25Mb2FkaW5nID0gb25Mb2FkaW5nO1xuICAgICAgICB0aGlzLm9uVHdvTGV2ZWwgPSBvblR3b0xldmVsO1xuICAgICAgICB0aGlzLm9uT2Zmc2V0Q2hhbmdlID0gb25PZmZzZXRDaGFuZ2U7XG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0QmVoYXZpb3IgPSBkcmFnU3RhcnRCZWhhdmlvcjtcbiAgICAgICAgdGhpcy5wcmltYXJ5ID0gcHJpbWFyeTtcbiAgICAgICAgdGhpcy5jYWNoZUV4dGVudCA9IGNhY2hlRXh0ZW50O1xuICAgICAgICB0aGlzLnNlbWFudGljQ2hpbGRDb3VudCA9IHNlbWFudGljQ2hpbGRDb3VudDtcbiAgICAgICAgdGhpcy5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICAgICAgdGhpcy5waHlzaWNzID0gcGh5c2ljcztcbiAgICAgICAgdGhpcy5zY3JvbGxEaXJlY3Rpb24gPSBzY3JvbGxEaXJlY3Rpb247XG4gICAgICAgIHRoaXMuc2Nyb2xsQ29udHJvbGxlciA9IHNjcm9sbENvbnRyb2xsZXI7XG4gICAgfVxufVxuXG5TbWFydFJlZnJlc2hlci5uZXcgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIG5ldyBTbWFydFJlZnJlc2hlcihhcmcpO1xufTtcblxuTG9hZFN0eWxlID0ge1xuICAgIFNob3dBbHdheXM6IHtcbiAgICAgICAgX25hbWU6IFwiTG9hZFN0eWxlLlNob3dBbHdheXNcIixcbiAgICAgICAgaW5kZXg6IDBcbiAgICB9LFxuICAgIEhpZGVBbHdheXM6IHtcbiAgICAgICAgX25hbWU6IFwiTG9hZFN0eWxlLkhpZGVBbHdheXNcIixcbiAgICAgICAgaW5kZXg6IDFcbiAgICB9LFxuICAgIFNob3dXaGVuTG9hZGluZzoge1xuICAgICAgICBfbmFtZTogXCJMb2FkU3R5bGUuU2hvd1doZW5Mb2FkaW5nXCIsXG4gICAgICAgIGluZGV4OiAyXG4gICAgfSxcbn07XG5cbkljb25Qb3NpdGlvbiA9IHtcbiAgICBsZWZ0OiB7XG4gICAgICAgIF9uYW1lOiBcIkljb25Qb3NpdGlvbi5sZWZ0XCIsXG4gICAgICAgIGluZGV4OiAwXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgICBfbmFtZTogXCJJY29uUG9zaXRpb24ucmlnaHRcIixcbiAgICAgICAgaW5kZXg6IDFcbiAgICB9LFxuICAgIHRvcDoge1xuICAgICAgICBfbmFtZTogXCJJY29uUG9zaXRpb24udG9wXCIsXG4gICAgICAgIGluZGV4OiAyXG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgICAgX25hbWU6IFwiSWNvblBvc2l0aW9uLmJvdHRvbVwiLFxuICAgICAgICBpbmRleDogM1xuICAgIH0sXG59O1xuXG5jbGFzcyBSZWZyZXNoQ29udHJvbGxlciBleHRlbmRzIE1YTGlmZWN5Y2xlV2lkZ2V0Q29udHJvbGxlckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgaW5pdGlhbFJlZnJlc2gsXG4gICAgICAgIGluaXRpYWxSZWZyZXNoU3RhdHVzLFxuICAgICAgICBpbml0aWFsTG9hZFN0YXR1cyxcbiAgICB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxSZWZyZXNoID0gaW5pdGlhbFJlZnJlc2g7XG4gICAgICAgIHRoaXMuaW5pdGlhbFJlZnJlc2hTdGF0dXMgPSBpbml0aWFsUmVmcmVzaFN0YXR1cztcbiAgICAgICAgdGhpcy5pbml0aWFsTG9hZFN0YXR1cyA9IGluaXRpYWxMb2FkU3RhdHVzO1xuXG4gICAgfVxuXG4gICAgLy8vIHJlcXVlc3QgY29tcGxldGUsdGhlIGhlYWRlciB3aWxsIGVudGVyIGNvbXBsZXRlIHN0YXRlLFxuICAgIC8vL1xuICAgIC8vLyByZXNldEZvb3RlclN0YXRlIDogaXQgd2lsbCBzZXQgdGhlIGZvb3RlciBzdGF0ZSBmcm9tIG5vRGF0YSB0byBpZGxlXG4gICAgcmVmcmVzaENvbXBsZXRlZCh7IHJlc2V0Rm9vdGVyU3RhdGUgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgdmFyIGFyZ3VtZW50ID0gbmV3IE1YTWlycm9yT2JqTWV0aG9kQ2FsbCh7XG4gICAgICAgICAgICBtaXJyb3JJRDogdGhpcy5taXJyb3JJRCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJSZWZyZXNoQ29udHJvbGxlclwiLFxuICAgICAgICAgICAgZnVuY05hbWU6IFwicmVmcmVzaENvbXBsZXRlZFwiLFxuICAgICAgICAgICAgYXJnczogYXJndW1lbnRzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmludm9rZU1pcnJvck9iak1ldGhvZChhcmd1bWVudCk7XG4gICAgfVxuXG4gICAgLy8vIGVuZCB0d29MZXZlbGluZyx3aWxsIHJldHVybiBiYWNrIGZpcnN0IGZsb29yXG4gICAgdHdvTGV2ZWxDb21wbGV0ZShcbiAgICAgICAgeyBkdXJhdGlvbiA9IG5ldyBEdXJhdGlvbih7IG1pbGxpc2Vjb25kczogNTAwIH0pLCBjdXJ2ZSB9ID0ge30pIHtcbiAgICAgICAgdmFyIGFyZ3VtZW50ID0gbmV3IE1YTWlycm9yT2JqTWV0aG9kQ2FsbCh7XG4gICAgICAgICAgICBtaXJyb3JJRDogdGhpcy5taXJyb3JJRCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJSZWZyZXNoQ29udHJvbGxlclwiLFxuICAgICAgICAgICAgZnVuY05hbWU6IFwidHdvTGV2ZWxDb21wbGV0ZVwiLFxuICAgICAgICAgICAgYXJnczogYXJndW1lbnRzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmludm9rZU1pcnJvck9iak1ldGhvZChhcmd1bWVudCk7XG4gICAgfVxuXG4gICAgLy8vIHJlcXVlc3QgZmFpbGVkLHRoZSBoZWFkZXIgZGlzcGxheSBmYWlsZWQgc3RhdGVcbiAgICByZWZyZXNoRmFpbGVkKCkge1xuICAgICAgICB2YXIgYXJndW1lbnQgPSBuZXcgTVhNaXJyb3JPYmpNZXRob2RDYWxsKHtcbiAgICAgICAgICAgIG1pcnJvcklEOiB0aGlzLm1pcnJvcklELFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlJlZnJlc2hDb250cm9sbGVyXCIsXG4gICAgICAgICAgICBmdW5jTmFtZTogXCJyZWZyZXNoRmFpbGVkXCIsXG4gICAgICAgICAgICBhcmdzOiBhcmd1bWVudHNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW52b2tlTWlycm9yT2JqTWV0aG9kKGFyZ3VtZW50KTtcbiAgICB9XG5cbiAgICAvLy8gbm90IHNob3cgc3VjY2VzcyBvciBmYWlsZWQsIGl0IHdpbGwgc2V0IGhlYWRlciBzdGF0ZSB0byBpZGxlIGFuZCBzcHJpbmcgYmFjayBhdCBvbmNlXG4gICAgcmVmcmVzaFRvSWRsZSgpIHtcbiAgICAgICAgdmFyIGFyZ3VtZW50ID0gbmV3IE1YTWlycm9yT2JqTWV0aG9kQ2FsbCh7XG4gICAgICAgICAgICBtaXJyb3JJRDogdGhpcy5taXJyb3JJRCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJSZWZyZXNoQ29udHJvbGxlclwiLFxuICAgICAgICAgICAgZnVuY05hbWU6IFwicmVmcmVzaFRvSWRsZVwiLFxuICAgICAgICAgICAgYXJnczogYXJndW1lbnRzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmludm9rZU1pcnJvck9iak1ldGhvZChhcmd1bWVudCk7XG4gICAgfVxuXG5cbiAgICBsb2FkQ29tcGxldGUoKSB7XG4gICAgICAgIHZhciBhcmd1bWVudCA9IG5ldyBNWE1pcnJvck9iak1ldGhvZENhbGwoe1xuICAgICAgICAgICAgbWlycm9ySUQ6IHRoaXMubWlycm9ySUQsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiUmVmcmVzaENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGZ1bmNOYW1lOiBcImxvYWRDb21wbGV0ZVwiLFxuICAgICAgICAgICAgYXJnczoge31cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW52b2tlTWlycm9yT2JqTWV0aG9kKGFyZ3VtZW50KTtcbiAgICB9XG5cbiAgICBsb2FkRmFpbGVkKCkge1xuICAgICAgICB2YXIgYXJndW1lbnQgPSBuZXcgTVhNaXJyb3JPYmpNZXRob2RDYWxsKHtcbiAgICAgICAgICAgIG1pcnJvcklEOiB0aGlzLm1pcnJvcklELFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlJlZnJlc2hDb250cm9sbGVyXCIsXG4gICAgICAgICAgICBmdW5jTmFtZTogXCJsb2FkRmFpbGVkXCIsXG4gICAgICAgICAgICBhcmdzOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbnZva2VNaXJyb3JPYmpNZXRob2QoYXJndW1lbnQpO1xuICAgIH1cblxuICAgIGxvYWROb0RhdGEoKSB7XG4gICAgICAgIHZhciBhcmd1bWVudCA9IG5ldyBNWE1pcnJvck9iak1ldGhvZENhbGwoe1xuICAgICAgICAgICAgbWlycm9ySUQ6IHRoaXMubWlycm9ySUQsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiUmVmcmVzaENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGZ1bmNOYW1lOiBcImxvYWROb0RhdGFcIixcbiAgICAgICAgICAgIGFyZ3M6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmludm9rZU1pcnJvck9iak1ldGhvZChhcmd1bWVudCk7XG4gICAgfVxuXG4gICAgcmVzZXROb0RhdGEoKSB7XG4gICAgICAgIHZhciBhcmd1bWVudCA9IG5ldyBNWE1pcnJvck9iak1ldGhvZENhbGwoe1xuICAgICAgICAgICAgbWlycm9ySUQ6IHRoaXMubWlycm9ySUQsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiUmVmcmVzaENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGZ1bmNOYW1lOiBcInJlc2V0Tm9EYXRhXCIsXG4gICAgICAgICAgICBhcmdzOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbnZva2VNaXJyb3JPYmpNZXRob2QoYXJndW1lbnQpO1xuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBhcmd1bWVudCA9IG5ldyBNWE1pcnJvck9iak1ldGhvZENhbGwoe1xuICAgICAgICAgICAgbWlycm9ySUQ6IHRoaXMubWlycm9ySUQsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiUmVmcmVzaENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGZ1bmNOYW1lOiBcImRpc3Bvc2VcIixcbiAgICAgICAgICAgIGFyZ3M6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmludm9rZU1pcnJvck9iak1ldGhvZChhcmd1bWVudCk7XG4gICAgfVxufVxuXG5SZWZyZXNoQ29udHJvbGxlci5uZXcgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIG5ldyBSZWZyZXNoQ29udHJvbGxlcihhcmcpO1xufTtcblxuUmVmcmVzaFN0YXR1cyA9IHtcbiAgICBpZGxlOiB7IF9uYW1lOiBcIlJlZnJlc2hTdGF0dXMuaWRsZVwiLCBpbmRleDogMCB9LFxuICAgIGNhblJlZnJlc2g6IHsgX25hbWU6IFwiUmVmcmVzaFN0YXR1cy5jYW5SZWZyZXNoXCIsIGluZGV4OiAxIH0sXG4gICAgcmVmcmVzaGluZzogeyBfbmFtZTogXCJSZWZyZXNoU3RhdHVzLnJlZnJlc2hpbmdcIiwgaW5kZXg6IDIgfSxcbiAgICBjb21wbGV0ZWQ6IHsgX25hbWU6IFwiUmVmcmVzaFN0YXR1cy5jb21wbGV0ZWRcIiwgaW5kZXg6IDMgfSxcbiAgICBmYWlsZWQ6IHsgX25hbWU6IFwiUmVmcmVzaFN0YXR1cy5mYWlsZWRcIiwgaW5kZXg6IDQgfSxcbiAgICBjYW5Ud29MZXZlbDogeyBfbmFtZTogXCJSZWZyZXNoU3RhdHVzLmNhblR3b0xldmVsXCIsIGluZGV4OiA1IH0sXG4gICAgdHdvTGV2ZWxPcGVuaW5nOiB7IF9uYW1lOiBcIlJlZnJlc2hTdGF0dXMudHdvTGV2ZWxPcGVuaW5nXCIsIGluZGV4OiA2IH0sXG4gICAgdHdvTGV2ZWxpbmc6IHsgX25hbWU6IFwiUmVmcmVzaFN0YXR1cy50d29MZXZlbGluZ1wiLCBpbmRleDogNyB9LFxuICAgIHR3b0xldmVsQ2xvc2luZzogeyBfbmFtZTogXCJSZWZyZXNoU3RhdHVzLnR3b0xldmVsQ2xvc2luZ1wiLCBpbmRleDogOCB9LFxufTtcblxuLy8gc3JjX19zbWFydF9yZWZyZXNoZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLy8gc3JjX19zbWFydF9yZWZyZXNoZXIuU21hcnRSZWZyZXNoZXIgPSBTbWFydFJlZnJlc2hlcjtcbi8vIHNyY19fc21hcnRfcmVmcmVzaGVyLlJlZnJlc2hDb25maWd1cmF0aW9uID0gUmVmcmVzaENvbmZpZ3VyYXRpb247XG4vLyBzcmNfX3NtYXJ0X3JlZnJlc2hlci5SZWZyZXNoQ29udHJvbGxlciA9IFJlZnJlc2hDb250cm9sbGVyO1xuLy8gc3JjX19zbWFydF9yZWZyZXNoZXIuTG9hZFN0YXR1cyA9IExvYWRTdGF0dXM7XG4vLyBzcmNfX3NtYXJ0X3JlZnJlc2hlci5Mb2FkU3R5bGUgPSBMb2FkU3R5bGU7XG4vLyBzcmNfX3NtYXJ0X3JlZnJlc2hlci5JY29uUG9zaXRpb24gPSBJY29uUG9zaXRpb247XG4vLyBzcmNfX3NtYXJ0X3JlZnJlc2hlci5SZWZyZXNoU3RhdHVzID0gUmVmcmVzaFN0YXR1cztcblxuLy8gZXhwb3J0cy5zcmNfX3NtYXJ0X3JlZnJlc2hlciA9IHNyY19fc21hcnRfcmVmcmVzaGVyO1xuXG5leHBvcnRzLlNtYXJ0UmVmcmVzaGVyID0gU21hcnRSZWZyZXNoZXI7XG5leHBvcnRzLlJlZnJlc2hDb250cm9sbGVyID0gUmVmcmVzaENvbnRyb2xsZXI7XG5leHBvcnRzLlJlZnJlc2hDb25maWd1cmF0aW9uID0gUmVmcmVzaENvbmZpZ3VyYXRpb247XG5leHBvcnRzLkxvYWRTdGF0dXMgPSBMb2FkU3RhdHVzO1xuZXhwb3J0cy5Mb2FkU3R5bGUgPSBMb2FkU3R5bGU7XG5leHBvcnRzLkljb25Qb3NpdGlvbiA9IEljb25Qb3NpdGlvbjtcbmV4cG9ydHMuUmVmcmVzaFN0YXR1cyA9IFJlZnJlc2hTdGF0dXM7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29uc29sZVwiKTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyB0aGUgc3RhcnR1cCBmdW5jdGlvblxuX193ZWJwYWNrX3JlcXVpcmVfXy54ID0gKCkgPT4ge1xuXHQvLyBMb2FkIGVudHJ5IG1vZHVsZVxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9pbmRleC5qc1wiKTtcbn07XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzIGFuZCBzaWJsaW5nIGNodW5rcyBmb3IgdGhlIGVudHJ5cG9pbnRcbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBuZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy54O1xuX193ZWJwYWNrX3JlcXVpcmVfXy54ID0gKCkgPT4ge1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUoXCJteGZsdXR0ZXItc2RrXCIpO1xuXHRyZXR1cm4gbmV4dCgpO1xufTsiLCIvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGNodW5rc1xuLy8gXCIxXCIgbWVhbnMgXCJsb2FkZWRcIiwgb3RoZXJ3aXNlIG5vdCBsb2FkZWQgeWV0XG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHRcImJ1bmRsZS1teGZsdXR0ZXItanMtZGVtb1wiOiAxXG59O1xuXG52YXIgaW5zdGFsbENodW5rID0gKGNodW5rKSA9PiB7XG5cdHZhciBtb3JlTW9kdWxlcyA9IGNodW5rLm1vZHVsZXMsIGNodW5rSWRzID0gY2h1bmsuaWRzLCBydW50aW1lID0gY2h1bmsucnVudGltZTtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspXG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzW2ldXSA9IDE7XG59O1xuXG4vLyByZXF1aXJlKCkgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLnJlcXVpcmUgPSBmdW5jdGlvbihjaHVua0lkLCBwcm9taXNlcykge1xuXG5cdC8vIFwiMVwiIGlzIHRoZSBzaWduYWwgZm9yIFwiYWxyZWFkeSBsb2FkZWRcIlxuXHRpZighaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdGluc3RhbGxDaHVuayhyZXF1aXJlKFwiLi9cIiArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKSkpO1xuXHRcdH0gZWxzZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAxO1xuXHR9XG59O1xuXG4vLyBubyBleHRlcm5hbCBpbnN0YWxsIGNodW5rXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3QiLCIvLyBydW4gc3RhcnR1cFxucmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ueCgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==