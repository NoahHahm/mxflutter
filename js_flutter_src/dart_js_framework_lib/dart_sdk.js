'use strict';
const _library = Object.create(null);
const dart = Object.create(_library);
dart.library = _library;
const _debugger = Object.create(dart.library);
const _foreign_helper = Object.create(dart.library);
const _interceptors = Object.create(dart.library);
const _internal = Object.create(dart.library);
const _isolate_helper = Object.create(dart.library);
const _js_helper = Object.create(dart.library);
const _js_mirrors = Object.create(dart.library);
const _js_primitives = Object.create(dart.library);
const _metadata = Object.create(dart.library);
const _native_typed_data = Object.create(dart.library);
const async = Object.create(dart.library);
const collection = Object.create(dart.library);
const convert = Object.create(dart.library);
const developer = Object.create(dart.library);
const io = Object.create(dart.library);
const isolate = Object.create(dart.library);
const js = Object.create(dart.library);
const js_util = Object.create(dart.library);
const math = Object.create(dart.library);
const mirrors = Object.create(dart.library);
const typed_data = Object.create(dart.library);
const indexed_db = Object.create(dart.library);
const html = Object.create(dart.library);
const html_common = Object.create(dart.library);
const svg = Object.create(dart.library);
const web_audio = Object.create(dart.library);
const web_gl = Object.create(dart.library);
const web_sql = Object.create(dart.library);
const core = Object.create(dart.library);
const ui = Object.create(dart.library);
const _http = Object.create(dart.library);
const dartx = Object.create(dart.library);
const _privateNames = Symbol("_privateNames");
dart.privateName = function(library, name) {
  if (library == null) {return}
  let names = library[_privateNames];
  if (names == null) names = library[_privateNames] = new Map();
  let symbol = names.get(name);
  if (symbol == null) names.set(name, symbol = name);
  return symbol;
};
const $hashCode = dartx.hashCode = Symbol("dartx.hashCode");
const $length = dartx.length = Symbol("dartx.length");
const $_equals = dartx._equals = Symbol("dartx._equals");
const $toString = dartx.toString = Symbol("dartx.toString");
const $noSuchMethod = dartx.noSuchMethod = Symbol("dartx.noSuchMethod");
const $cast = dartx.cast = Symbol("dartx.cast");
const $addAll = dartx.addAll = Symbol("dartx.addAll");
const $_set = dartx._set = Symbol("dartx._set");
const $_get = dartx._get = Symbol("dartx._get");
const $clear = dartx.clear = Symbol("dartx.clear");
const $indexOf = dartx.indexOf = Symbol("dartx.indexOf");
const $substring = dartx.substring = Symbol("dartx.substring");
const $split = dartx.split = Symbol("dartx.split");
const $trim = dartx.trim = Symbol("dartx.trim");
const $map = dartx.map = Symbol("dartx.map");
const $toList = dartx.toList = Symbol("dartx.toList");
const $add = dartx.add = Symbol("dartx.add");
const $isEmpty = dartx.isEmpty = Symbol("dartx.isEmpty");
const $isNotEmpty = dartx.isNotEmpty = Symbol("dartx.isNotEmpty");
const $runtimeType = dartx.runtimeType = Symbol("dartx.runtimeType");
const $containsKey = dartx.containsKey = Symbol("dartx.containsKey");
const $any = dartx.any = Symbol("dartx.any");
const $keys = dartx.keys = Symbol("dartx.keys");
const $remove = dartx.remove = Symbol("dartx.remove");
const $values = dartx.values = Symbol("dartx.values");
const $dartStack = dartx.dartStack = Symbol("dartx.dartStack");
const $truncate = dartx.truncate = Symbol("dartx.truncate");
const $skip = dartx.skip = Symbol("dartx.skip");
const $take = dartx.take = Symbol("dartx.take");
const $asMap = dartx.asMap = Symbol("dartx.asMap");
const $forEach = dartx.forEach = Symbol("dartx.forEach");
const $elementAt = dartx.elementAt = Symbol("dartx.elementAt");
const $contains = dartx.contains = Symbol("dartx.contains");
const $last = dartx.last = Symbol("dartx.last");
const $join = dartx.join = Symbol("dartx.join");
const $firstWhere = dartx.firstWhere = Symbol("dartx.firstWhere");
const $replaceFirst = dartx.replaceFirst = Symbol("dartx.replaceFirst");
const $startsWith = dartx.startsWith = Symbol("dartx.startsWith");
const $compareTo = dartx.compareTo = Symbol("dartx.compareTo");
const $sort = dartx.sort = Symbol("dartx.sort");
const $where = dartx.where = Symbol("dartx.where");
const $putIfAbsent = dartx.putIfAbsent = Symbol("dartx.putIfAbsent");
const $round = dartx.round = Symbol("dartx.round");
const $bitAnd = dartx['&'] = Symbol("dartx.&");
const $bitOr = dartx['|'] = Symbol("dartx.|");
const $bitXor = dartx['^'] = Symbol("dartx.^");
const $sublist = dartx.sublist = Symbol("dartx.sublist");
const $stackTrace = dartx.stackTrace = Symbol("dartx.stackTrace");
const $invalidValue = dartx.invalidValue = Symbol("dartx.invalidValue");
const $name = dartx.name = Symbol("dartx.name");
const $message = dartx.message = Symbol("dartx.message");
const $checkMutable = dartx.checkMutable = Symbol("dartx.checkMutable");
const $checkGrowable = dartx.checkGrowable = Symbol("dartx.checkGrowable");
const $removeAt = dartx.removeAt = Symbol("dartx.removeAt");
const $insert = dartx.insert = Symbol("dartx.insert");
const $setRange = dartx.setRange = Symbol("dartx.setRange");
const $insertAll = dartx.insertAll = Symbol("dartx.insertAll");
const $setAll = dartx.setAll = Symbol("dartx.setAll");
const $removeLast = dartx.removeLast = Symbol("dartx.removeLast");
const $removeWhere = dartx.removeWhere = Symbol("dartx.removeWhere");
const $retainWhere = dartx.retainWhere = Symbol("dartx.retainWhere");
const $expand = dartx.expand = Symbol("dartx.expand");
const $takeWhile = dartx.takeWhile = Symbol("dartx.takeWhile");
const $skipWhile = dartx.skipWhile = Symbol("dartx.skipWhile");
const $reduce = dartx.reduce = Symbol("dartx.reduce");
const $fold = dartx.fold = Symbol("dartx.fold");
const $lastWhere = dartx.lastWhere = Symbol("dartx.lastWhere");
const $singleWhere = dartx.singleWhere = Symbol("dartx.singleWhere");
const $getRange = dartx.getRange = Symbol("dartx.getRange");
const $first = dartx.first = Symbol("dartx.first");
const $single = dartx.single = Symbol("dartx.single");
const $removeRange = dartx.removeRange = Symbol("dartx.removeRange");
const $fillRange = dartx.fillRange = Symbol("dartx.fillRange");
const $replaceRange = dartx.replaceRange = Symbol("dartx.replaceRange");
const $every = dartx.every = Symbol("dartx.every");
const $reversed = dartx.reversed = Symbol("dartx.reversed");
const $shuffle = dartx.shuffle = Symbol("dartx.shuffle");
const $lastIndexOf = dartx.lastIndexOf = Symbol("dartx.lastIndexOf");
const $toSet = dartx.toSet = Symbol("dartx.toSet");
const $iterator = dartx.iterator = Symbol("dartx.iterator");
const $followedBy = dartx.followedBy = Symbol("dartx.followedBy");
const $whereType = dartx.whereType = Symbol("dartx.whereType");
const $plus = dartx['+'] = Symbol("dartx.+");
const $indexWhere = dartx.indexWhere = Symbol("dartx.indexWhere");
const $lastIndexWhere = dartx.lastIndexWhere = Symbol("dartx.lastIndexWhere");
const $isNegative = dartx.isNegative = Symbol("dartx.isNegative");
const $isNaN = dartx.isNaN = Symbol("dartx.isNaN");
const $isInfinite = dartx.isInfinite = Symbol("dartx.isInfinite");
const $isFinite = dartx.isFinite = Symbol("dartx.isFinite");
const $remainder = dartx.remainder = Symbol("dartx.remainder");
const $abs = dartx.abs = Symbol("dartx.abs");
const $sign = dartx.sign = Symbol("dartx.sign");
const $truncateToDouble = dartx.truncateToDouble = Symbol("dartx.truncateToDouble");
const $toInt = dartx.toInt = Symbol("dartx.toInt");
const $ceilToDouble = dartx.ceilToDouble = Symbol("dartx.ceilToDouble");
const $ceil = dartx.ceil = Symbol("dartx.ceil");
const $floorToDouble = dartx.floorToDouble = Symbol("dartx.floorToDouble");
const $floor = dartx.floor = Symbol("dartx.floor");
const $roundToDouble = dartx.roundToDouble = Symbol("dartx.roundToDouble");
const $clamp = dartx.clamp = Symbol("dartx.clamp");
const $toDouble = dartx.toDouble = Symbol("dartx.toDouble");
const $toStringAsFixed = dartx.toStringAsFixed = Symbol("dartx.toStringAsFixed");
const $toStringAsExponential = dartx.toStringAsExponential = Symbol("dartx.toStringAsExponential");
const $toStringAsPrecision = dartx.toStringAsPrecision = Symbol("dartx.toStringAsPrecision");
const $codeUnitAt = dartx.codeUnitAt = Symbol("dartx.codeUnitAt");
const $toRadixString = dartx.toRadixString = Symbol("dartx.toRadixString");
const $times = dartx['*'] = Symbol("dartx.*");
const $_negate = dartx._negate = Symbol("dartx._negate");
const $minus = dartx['-'] = Symbol("dartx.-");
const $divide = dartx['/'] = Symbol("dartx./");
const $modulo = dartx['%'] = Symbol("dartx.%");
const $floorDivide = dartx['~/'] = Symbol("dartx.~/");
const $leftShift = dartx['<<'] = Symbol("dartx.<<");
const $rightShift = dartx['>>'] = Symbol("dartx.>>");
const $lessThan = dartx['<'] = Symbol("dartx.<");
const $greaterThan = dartx['>'] = Symbol("dartx.>");
const $lessOrEquals = dartx['<='] = Symbol("dartx.<=");
const $greaterOrEquals = dartx['>='] = Symbol("dartx.>=");
const $isEven = dartx.isEven = Symbol("dartx.isEven");
const $isOdd = dartx.isOdd = Symbol("dartx.isOdd");
const $toUnsigned = dartx.toUnsigned = Symbol("dartx.toUnsigned");
const $toSigned = dartx.toSigned = Symbol("dartx.toSigned");
const $bitLength = dartx.bitLength = Symbol("dartx.bitLength");
const $modPow = dartx.modPow = Symbol("dartx.modPow");
const $modInverse = dartx.modInverse = Symbol("dartx.modInverse");
const $gcd = dartx.gcd = Symbol("dartx.gcd");
const $bitNot = dartx['~'] = Symbol("dartx.~");
const $allMatches = dartx.allMatches = Symbol("dartx.allMatches");
const $matchAsPrefix = dartx.matchAsPrefix = Symbol("dartx.matchAsPrefix");
const $endsWith = dartx.endsWith = Symbol("dartx.endsWith");
const $replaceAll = dartx.replaceAll = Symbol("dartx.replaceAll");
const $splitMapJoin = dartx.splitMapJoin = Symbol("dartx.splitMapJoin");
const $replaceAllMapped = dartx.replaceAllMapped = Symbol("dartx.replaceAllMapped");
const $replaceFirstMapped = dartx.replaceFirstMapped = Symbol("dartx.replaceFirstMapped");
const $toLowerCase = dartx.toLowerCase = Symbol("dartx.toLowerCase");
const $toUpperCase = dartx.toUpperCase = Symbol("dartx.toUpperCase");
const $trimLeft = dartx.trimLeft = Symbol("dartx.trimLeft");
const $trimRight = dartx.trimRight = Symbol("dartx.trimRight");
const $padLeft = dartx.padLeft = Symbol("dartx.padLeft");
const $padRight = dartx.padRight = Symbol("dartx.padRight");
const $codeUnits = dartx.codeUnits = Symbol("dartx.codeUnits");
const $runes = dartx.runes = Symbol("dartx.runes");
const $containsValue = dartx.containsValue = Symbol("dartx.containsValue");
const $update = dartx.update = Symbol("dartx.update");
const $updateAll = dartx.updateAll = Symbol("dartx.updateAll");
const $entries = dartx.entries = Symbol("dartx.entries");
const $addEntries = dartx.addEntries = Symbol("dartx.addEntries");
const $lengthInBytes = dartx.lengthInBytes = Symbol("dartx.lengthInBytes");
const $asUint8List = dartx.asUint8List = Symbol("dartx.asUint8List");
const $asInt8List = dartx.asInt8List = Symbol("dartx.asInt8List");
const $asUint8ClampedList = dartx.asUint8ClampedList = Symbol("dartx.asUint8ClampedList");
const $asUint16List = dartx.asUint16List = Symbol("dartx.asUint16List");
const $asInt16List = dartx.asInt16List = Symbol("dartx.asInt16List");
const $asUint32List = dartx.asUint32List = Symbol("dartx.asUint32List");
const $asInt32List = dartx.asInt32List = Symbol("dartx.asInt32List");
const $asUint64List = dartx.asUint64List = Symbol("dartx.asUint64List");
const $asInt64List = dartx.asInt64List = Symbol("dartx.asInt64List");
const $asInt32x4List = dartx.asInt32x4List = Symbol("dartx.asInt32x4List");
const $asFloat32List = dartx.asFloat32List = Symbol("dartx.asFloat32List");
const $asFloat64List = dartx.asFloat64List = Symbol("dartx.asFloat64List");
const $asFloat32x4List = dartx.asFloat32x4List = Symbol("dartx.asFloat32x4List");
const $asFloat64x2List = dartx.asFloat64x2List = Symbol("dartx.asFloat64x2List");
const $asByteData = dartx.asByteData = Symbol("dartx.asByteData");
const $offsetInBytes = dartx.offsetInBytes = Symbol("dartx.offsetInBytes");
const $buffer = dartx.buffer = Symbol("dartx.buffer");
const $elementSizeInBytes = dartx.elementSizeInBytes = Symbol("dartx.elementSizeInBytes");
const $getFloat32 = dartx.getFloat32 = Symbol("dartx.getFloat32");
const $getFloat64 = dartx.getFloat64 = Symbol("dartx.getFloat64");
const $getInt16 = dartx.getInt16 = Symbol("dartx.getInt16");
const $getInt32 = dartx.getInt32 = Symbol("dartx.getInt32");
const $getInt64 = dartx.getInt64 = Symbol("dartx.getInt64");
const $getInt8 = dartx.getInt8 = Symbol("dartx.getInt8");
const $getUint16 = dartx.getUint16 = Symbol("dartx.getUint16");
const $getUint32 = dartx.getUint32 = Symbol("dartx.getUint32");
const $getUint64 = dartx.getUint64 = Symbol("dartx.getUint64");
const $getUint8 = dartx.getUint8 = Symbol("dartx.getUint8");
const $setFloat32 = dartx.setFloat32 = Symbol("dartx.setFloat32");
const $setFloat64 = dartx.setFloat64 = Symbol("dartx.setFloat64");
const $setInt16 = dartx.setInt16 = Symbol("dartx.setInt16");
const $setInt32 = dartx.setInt32 = Symbol("dartx.setInt32");
const $setInt64 = dartx.setInt64 = Symbol("dartx.setInt64");
const $setInt8 = dartx.setInt8 = Symbol("dartx.setInt8");
const $setUint16 = dartx.setUint16 = Symbol("dartx.setUint16");
const $setUint32 = dartx.setUint32 = Symbol("dartx.setUint32");
const $setUint64 = dartx.setUint64 = Symbol("dartx.setUint64");
const $setUint8 = dartx.setUint8 = Symbol("dartx.setUint8");
const $left = dartx.left = Symbol("dartx.left");
const $width = dartx.width = Symbol("dartx.width");
const $top = dartx.top = Symbol("dartx.top");
const $height = dartx.height = Symbol("dartx.height");
const $right = dartx.right = Symbol("dartx.right");
const $bottom = dartx.bottom = Symbol("dartx.bottom");
const $intersection = dartx.intersection = Symbol("dartx.intersection");
const $intersects = dartx.intersects = Symbol("dartx.intersects");
const $boundingBox = dartx.boundingBox = Symbol("dartx.boundingBox");
const $containsRectangle = dartx.containsRectangle = Symbol("dartx.containsRectangle");
const $containsPoint = dartx.containsPoint = Symbol("dartx.containsPoint");
const $topLeft = dartx.topLeft = Symbol("dartx.topLeft");
const $topRight = dartx.topRight = Symbol("dartx.topRight");
const $bottomRight = dartx.bottomRight = Symbol("dartx.bottomRight");
const $bottomLeft = dartx.bottomLeft = Symbol("dartx.bottomLeft");
let ListOfObject = () => (ListOfObject = dart.constFn(core.List$(core.Object)))();
let JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
let IdentityMapOfString$Object = () => (IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))();
let ListOfString = () => (ListOfString = dart.constFn(core.List$(core.String)))();
let IdentityMapOfString$ListOfString = () => (IdentityMapOfString$ListOfString = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfString())))();
let JSArrayOfTypeVariable = () => (JSArrayOfTypeVariable = dart.constFn(_interceptors.JSArray$(dart.TypeVariable)))();
let ListOfType = () => (ListOfType = dart.constFn(core.List$(core.Type)))();
let IdentityMapOfObject$int = () => (IdentityMapOfObject$int = dart.constFn(_js_helper.IdentityMap$(core.Object, core.int)))();
let IdentityMapOfTypeVariable$Object = () => (IdentityMapOfTypeVariable$Object = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.Object)))();
let LinkedHashMapOfTypeVariable$TypeConstraint = () => (LinkedHashMapOfTypeVariable$TypeConstraint = dart.constFn(collection.LinkedHashMap$(dart.TypeVariable, dart.TypeConstraint)))();
let JSArrayOfObject = () => (JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))();
let MapOfSymbol$dynamic = () => (MapOfSymbol$dynamic = dart.constFn(core.Map$(core.Symbol, dart.dynamic)))();
let JSArrayOfNameValuePair = () => (JSArrayOfNameValuePair = dart.constFn(_interceptors.JSArray$(_debugger.NameValuePair)))();
let intAnddynamicToNull = () => (intAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [core.int, dart.dynamic])))();
let JSArrayOfFormatter = () => (JSArrayOfFormatter = dart.constFn(_interceptors.JSArray$(_debugger.Formatter)))();
let _HashSetOfNameValuePair = () => (_HashSetOfNameValuePair = dart.constFn(collection._HashSet$(_debugger.NameValuePair)))();
let IdentityMapOfString$String = () => (IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))();
let dynamicAnddynamicToNull = () => (dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))();
let dynamicToString = () => (dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))();
let ListOfNameValuePair = () => (ListOfNameValuePair = dart.constFn(core.List$(_debugger.NameValuePair)))();
let StringTobool = () => (StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))();
let VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
let StringToNameValuePair = () => (StringToNameValuePair = dart.constFn(dart.fnType(_debugger.NameValuePair, [core.String])))();
let NameValuePairAndNameValuePairToint = () => (NameValuePairAndNameValuePairToint = dart.constFn(dart.fnType(core.int, [_debugger.NameValuePair, _debugger.NameValuePair])))();
let LinkedHashMapOfdynamic$Object = () => (LinkedHashMapOfdynamic$Object = dart.constFn(collection.LinkedHashMap$(dart.dynamic, core.Object)))();
let dynamicTodynamic = () => (dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))();
let dynamicToObject = () => (dynamicToObject = dart.constFn(dart.fnType(core.Object, [dart.dynamic])))();
let LinkedMapOfString$_MethodStats = () => (LinkedMapOfString$_MethodStats = dart.constFn(_js_helper.LinkedMap$(core.String, _debugger._MethodStats)))();
let VoidToString = () => (VoidToString = dart.constFn(dart.fnType(core.String, [])))();
let StringToString = () => (StringToString = dart.constFn(dart.fnType(core.String, [core.String])))();
let VoidTo_MethodStats = () => (VoidTo_MethodStats = dart.constFn(dart.fnType(_debugger._MethodStats, [])))();
let StringAndStringToint = () => (StringAndStringToint = dart.constFn(dart.fnType(core.int, [core.String, core.String])))();
let JSArrayOfListOfObject = () => (JSArrayOfListOfObject = dart.constFn(_interceptors.JSArray$(ListOfObject())))();
let JSArrayOf_CallMethodRecord = () => (JSArrayOf_CallMethodRecord = dart.constFn(_interceptors.JSArray$(_debugger._CallMethodRecord)))();
let LinkedMapOfString$String = () => (LinkedMapOfString$String = dart.constFn(_js_helper.LinkedMap$(core.String, core.String)))();
let dynamicAnddynamicToint = () => (dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))();
let dynamicToNull = () => (dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))();
let dynamicAndStackTraceToNull = () => (dynamicAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, core.StackTrace])))();
let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
let TimerToNull = () => (TimerToNull = dart.constFn(dart.fnType(core.Null, [async.Timer])))();
let _FutureOfNull = () => (_FutureOfNull = dart.constFn(async._Future$(core.Null)))();
let VoidTo_FutureOfNull = () => (VoidTo_FutureOfNull = dart.constFn(dart.fnType(_FutureOfNull(), [])))();
let VoidToFuture = () => (VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))();
let dynamicToFuture = () => (dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))();
let _FutureOfString = () => (_FutureOfString = dart.constFn(async._Future$(core.String)))();
let _FutureOfbool = () => (_FutureOfbool = dart.constFn(async._Future$(core.bool)))();
let VoidTobool = () => (VoidTobool = dart.constFn(dart.fnType(core.bool, [])))();
let boolToNull = () => (boolToNull = dart.constFn(dart.fnType(core.Null, [core.bool])))();
let _FutureOfint = () => (_FutureOfint = dart.constFn(async._Future$(core.int)))();
let dynamicAndStackTraceTovoid = () => (dynamicAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, core.StackTrace])))();
let NullAndNullTodynamic = () => (NullAndNullTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Null, core.Null])))();
let ObjectAndStackTraceTodynamic = () => (ObjectAndStackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object, core.StackTrace])))();
let ObjectTodynamic = () => (ObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))();
let dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))();
let EventSinkTo_ConverterStreamEventSink = () => (EventSinkTo_ConverterStreamEventSink = dart.constFn(dart.fnType(convert._ConverterStreamEventSink, [async.EventSink])))();
let EmptyIteratorOfNull = () => (EmptyIteratorOfNull = dart.constFn(_internal.EmptyIterator$(core.Null)))();
let VoidToint = () => (VoidToint = dart.constFn(dart.fnType(core.int, [])))();
let JSArrayOfint = () => (JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))();
let VoidToObject = () => (VoidToObject = dart.constFn(dart.fnType(core.Object, [])))();
let SubListIterableOfString = () => (SubListIterableOfString = dart.constFn(_internal.SubListIterable$(core.String)))();
let EmptyIterableOfString = () => (EmptyIterableOfString = dart.constFn(_internal.EmptyIterable$(core.String)))();
let MatchToString = () => (MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))();
let ListOfSymbol = () => (ListOfSymbol = dart.constFn(core.List$(core.Symbol)))();
let ListOfInstanceMirror = () => (ListOfInstanceMirror = dart.constFn(core.List$(mirrors.InstanceMirror)))();
let FutureOfLibraryMirror = () => (FutureOfLibraryMirror = dart.constFn(async.Future$(mirrors.LibraryMirror)))();
let ListOfCombinatorMirror = () => (ListOfCombinatorMirror = dart.constFn(core.List$(mirrors.CombinatorMirror)))();
let ListOfTypeMirror = () => (ListOfTypeMirror = dart.constFn(core.List$(mirrors.TypeMirror)))();
let dynamicToTypeMirror = () => (dynamicToTypeMirror = dart.constFn(dart.fnType(mirrors.TypeMirror, [dart.dynamic])))();
let dynamicToInstanceMirror = () => (dynamicToInstanceMirror = dart.constFn(dart.fnType(mirrors.InstanceMirror, [dart.dynamic])))();
let LinkedMapOfSymbol$DeclarationMirror = () => (LinkedMapOfSymbol$DeclarationMirror = dart.constFn(_js_helper.LinkedMap$(core.Symbol, mirrors.DeclarationMirror)))();
let SymbolAnddynamicToNull = () => (SymbolAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [core.Symbol, dart.dynamic])))();
let MapOfSymbol$DeclarationMirror = () => (MapOfSymbol$DeclarationMirror = dart.constFn(core.Map$(core.Symbol, mirrors.DeclarationMirror)))();
let JSArrayOfClassMirror = () => (JSArrayOfClassMirror = dart.constFn(_interceptors.JSArray$(mirrors.ClassMirror)))();
let TypeToTypeMirror = () => (TypeToTypeMirror = dart.constFn(dart.fnType(mirrors.TypeMirror, [core.Type])))();
let ListOfClassMirror = () => (ListOfClassMirror = dart.constFn(core.List$(mirrors.ClassMirror)))();
let MapOfSymbol$MethodMirror = () => (MapOfSymbol$MethodMirror = dart.constFn(core.Map$(core.Symbol, mirrors.MethodMirror)))();
let ListOfTypeVariableMirror = () => (ListOfTypeVariableMirror = dart.constFn(core.List$(mirrors.TypeVariableMirror)))();
let ListOfParameterMirror = () => (ListOfParameterMirror = dart.constFn(core.List$(mirrors.ParameterMirror)))();
let LinkedMapOfSymbol$dynamic = () => (LinkedMapOfSymbol$dynamic = dart.constFn(_js_helper.LinkedMap$(core.Symbol, dart.dynamic)))();
let IterableOfdouble = () => (IterableOfdouble = dart.constFn(core.Iterable$(core.double)))();
let IterableOfint = () => (IterableOfint = dart.constFn(core.Iterable$(core.int)))();
let ObjectAndStackTraceToNull = () => (ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))();
let ObjectTovoid = () => (ObjectTovoid = dart.constFn(dart.fnType(dart.void, [], [core.Object])))();
let ObjectTovoid$ = () => (ObjectTovoid$ = dart.constFn(dart.fnType(dart.void, [core.Object])))();
let ObjectAndStackTraceTovoid = () => (ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object], [core.StackTrace])))();
let ObjectAndStackTraceTovoid$ = () => (ObjectAndStackTraceTovoid$ = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))();
let FutureOfNull = () => (FutureOfNull = dart.constFn(async.Future$(core.Null)))();
let dynamicTobool = () => (dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))();
let FutureOrOfbool = () => (FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))();
let VoidToFutureOrOfbool = () => (VoidToFutureOrOfbool = dart.constFn(dart.fnType(FutureOrOfbool(), [])))();
let FutureOfbool = () => (FutureOfbool = dart.constFn(async.Future$(core.bool)))();
let ObjectTobool = () => (ObjectTobool = dart.constFn(dart.fnType(core.bool, [core.Object])))();
let VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))();
let _FutureListenerOfObject$Object = () => (_FutureListenerOfObject$Object = dart.constFn(async._FutureListener$(core.Object, core.Object)))();
let JSArrayOfFunction = () => (JSArrayOfFunction = dart.constFn(_interceptors.JSArray$(core.Function)))();
let dynamicAndStackTraceToNull$ = () => (dynamicAndStackTraceToNull$ = dart.constFn(dart.fnType(core.Null, [dart.dynamic], [core.StackTrace])))();
let dynamicTo_Future = () => (dynamicTo_Future = dart.constFn(dart.fnType(async._Future, [dart.dynamic])))();
let ZoneAndZoneDelegateAndZone__ToR = () => (ZoneAndZoneDelegateAndZone__ToR = dart.constFn(dart.gFnType(R => {
  let VoidToR = () => (VoidToR = dart.constFn(dart.fnType(R, [])))();
  return [R, [async.Zone, async.ZoneDelegate, async.Zone, VoidToR()]];
})))();
let ZoneAndZoneDelegateAndZone__ToR$ = () => (ZoneAndZoneDelegateAndZone__ToR$ = dart.constFn(dart.gFnType((R, T) => {
  let TToR = () => (TToR = dart.constFn(dart.fnType(R, [T])))();
  return [R, [async.Zone, async.ZoneDelegate, async.Zone, TToR(), T]];
})))();
let ZoneAndZoneDelegateAndZone__ToR$0 = () => (ZoneAndZoneDelegateAndZone__ToR$0 = dart.constFn(dart.gFnType((R, T1, T2) => {
  let T1AndT2ToR = () => (T1AndT2ToR = dart.constFn(dart.fnType(R, [T1, T2])))();
  return [R, [async.Zone, async.ZoneDelegate, async.Zone, T1AndT2ToR(), T1, T2]];
})))();
let ZoneAndZoneDelegateAndZone__ToFn = () => (ZoneAndZoneDelegateAndZone__ToFn = dart.constFn(dart.gFnType(R => {
  let VoidToR = () => (VoidToR = dart.constFn(dart.fnType(R, [])))();
  return [VoidToR(), [async.Zone, async.ZoneDelegate, async.Zone, VoidToR()]];
})))();
let ZoneAndZoneDelegateAndZone__ToFn$ = () => (ZoneAndZoneDelegateAndZone__ToFn$ = dart.constFn(dart.gFnType((R, T) => {
  let TToR = () => (TToR = dart.constFn(dart.fnType(R, [T])))();
  return [TToR(), [async.Zone, async.ZoneDelegate, async.Zone, TToR()]];
})))();
let ZoneAndZoneDelegateAndZone__ToFn$0 = () => (ZoneAndZoneDelegateAndZone__ToFn$0 = dart.constFn(dart.gFnType((R, T1, T2) => {
  let T1AndT2ToR = () => (T1AndT2ToR = dart.constFn(dart.fnType(R, [T1, T2])))();
  return [T1AndT2ToR(), [async.Zone, async.ZoneDelegate, async.Zone, T1AndT2ToR()]];
})))();
let _ZoneFunctionOfFunction = () => (_ZoneFunctionOfFunction = dart.constFn(async._ZoneFunction$(core.Function)))();
let ZoneAndZoneDelegateAndZone__ToAsyncError = () => (ZoneAndZoneDelegateAndZone__ToAsyncError = dart.constFn(dart.fnType(async.AsyncError, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])))();
let _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncError = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncError = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__ToAsyncError())))();
let ZoneAndZoneDelegateAndZone__Tovoid = () => (ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, VoidTovoid()])))();
let _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__Tovoid())))();
let ZoneAndZoneDelegateAndZone__ToTimer = () => (ZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, VoidTovoid()])))();
let _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__ToTimer())))();
let TimerTovoid = () => (TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))();
let ZoneAndZoneDelegateAndZone__ToTimer$ = () => (ZoneAndZoneDelegateAndZone__ToTimer$ = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, TimerTovoid()])))();
let _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$ = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$ = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__ToTimer$())))();
let ZoneAndZoneDelegateAndZone__Tovoid$ = () => (ZoneAndZoneDelegateAndZone__Tovoid$ = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))();
let _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$ = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$ = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__Tovoid$())))();
let ZoneAndZoneDelegateAndZone__ToZone = () => (ZoneAndZoneDelegateAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, async.ZoneSpecification, core.Map])))();
let _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__ToZone())))();
let ZoneAndZoneDelegateAndZone__Tovoid$0 = () => (ZoneAndZoneDelegateAndZone__Tovoid$0 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])))();
let _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$0 = () => (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$0 = dart.constFn(async._ZoneFunction$(ZoneAndZoneDelegateAndZone__Tovoid$0())))();
let ZoneAndZoneDelegateAndZone__ToR$1 = () => (ZoneAndZoneDelegateAndZone__ToR$1 = dart.constFn(dart.gFnType(R => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]])))();
let ZoneAndZoneDelegateAndZone__ToR$2 = () => (ZoneAndZoneDelegateAndZone__ToR$2 = dart.constFn(dart.gFnType((R, T) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T]), T]])))();
let ZoneAndZoneDelegateAndZone__ToR$3 = () => (ZoneAndZoneDelegateAndZone__ToR$3 = dart.constFn(dart.gFnType((R, T1, T2) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2]), T1, T2]])))();
let ZoneAndZoneDelegateAndZone__ToFn$1 = () => (ZoneAndZoneDelegateAndZone__ToFn$1 = dart.constFn(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]])))();
let ZoneAndZoneDelegateAndZone__ToFn$2 = () => (ZoneAndZoneDelegateAndZone__ToFn$2 = dart.constFn(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]])))();
let ZoneAndZoneDelegateAndZone__ToFn$3 = () => (ZoneAndZoneDelegateAndZone__ToFn$3 = dart.constFn(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]])))();
let ZoneAndZoneDelegateAndZone__Tovoid$1 = () => (ZoneAndZoneDelegateAndZone__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, dart.dynamic, core.StackTrace])))();
let StringTovoid = () => (StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))();
let ZoneAndZoneDelegateAndZone__ToNull = () => (ZoneAndZoneDelegateAndZone__ToNull = dart.constFn(dart.fnType(core.Null, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])))();
let ObjectToint = () => (ObjectToint = dart.constFn(dart.fnType(core.int, [core.Object])))();
let ObjectAndObjectTobool = () => (ObjectAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.Object, core.Object])))();
let _SplayTreeMapNodeTobool = () => (_SplayTreeMapNodeTobool = dart.constFn(dart.fnType(core.bool, [collection._SplayTreeMapNode])))();
let ComparableAndComparableToint = () => (ComparableAndComparableToint = dart.constFn(dart.fnType(core.int, [core.Comparable, core.Comparable])))();
let MappedIterableOfString$dynamic = () => (MappedIterableOfString$dynamic = dart.constFn(_internal.MappedIterable$(core.String, dart.dynamic)))();
let MapOfString$dynamic = () => (MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))();
let StringAnddynamicToNull = () => (StringAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [core.String, dart.dynamic])))();
let IdentityMapOfString$dynamic = () => (IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))();
let ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
let StringBufferAndStringToStringBuffer = () => (StringBufferAndStringToStringBuffer = dart.constFn(dart.fnType(core.StringBuffer, [core.StringBuffer, core.String])))();
let StringBufferToString = () => (StringBufferToString = dart.constFn(dart.fnType(core.String, [core.StringBuffer])))();
let IdentityMapOfString$Encoding = () => (IdentityMapOfString$Encoding = dart.constFn(_js_helper.IdentityMap$(core.String, convert.Encoding)))();
let SinkOfListOfint = () => (SinkOfListOfint = dart.constFn(core.Sink$(ListOfint())))();
let StreamOfString = () => (StreamOfString = dart.constFn(async.Stream$(core.String)))();
let StreamOfListOfint = () => (StreamOfListOfint = dart.constFn(async.Stream$(ListOfint())))();
let SinkOfString = () => (SinkOfString = dart.constFn(core.Sink$(core.String)))();
let StreamOfObject = () => (StreamOfObject = dart.constFn(async.Stream$(core.Object)))();
let JSArrayOfListOfint = () => (JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(ListOfint())))();
let Uint8ListAndintAndintTovoid = () => (Uint8ListAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int])))();
let SyncIterableOfString = () => (SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))();
let EventSinkOfString = () => (EventSinkOfString = dart.constFn(async.EventSink$(core.String)))();
let EventSinkOfStringTo_LineSplitterEventSink = () => (EventSinkOfStringTo_LineSplitterEventSink = dart.constFn(dart.fnType(convert._LineSplitterEventSink, [EventSinkOfString()])))();
let LinkedMapOfString$Metric = () => (LinkedMapOfString$Metric = dart.constFn(_js_helper.LinkedMap$(core.String, developer.Metric)))();
let CompleterOfUri = () => (CompleterOfUri = dart.constFn(async.Completer$(core.Uri)))();
let UriTovoid = () => (UriTovoid = dart.constFn(dart.fnType(dart.void, [core.Uri])))();
let JSArrayOf_SyncBlock = () => (JSArrayOf_SyncBlock = dart.constFn(_interceptors.JSArray$(developer._SyncBlock)))();
let JSArrayOf_AsyncBlock = () => (JSArrayOf_AsyncBlock = dart.constFn(_interceptors.JSArray$(developer._AsyncBlock)))();
let FutureOfServiceExtensionResponse = () => (FutureOfServiceExtensionResponse = dart.constFn(async.Future$(developer.ServiceExtensionResponse)))();
let MapOfString$String = () => (MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))();
let StringAndMapOfString$StringToFutureOfServiceExtensionResponse = () => (StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(FutureOfServiceExtensionResponse(), [core.String, MapOfString$String()])))();
let LinkedMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse = () => (LinkedMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(_js_helper.LinkedMap$(core.String, StringAndMapOfString$StringToFutureOfServiceExtensionResponse())))();
let JSArrayOfUint8List = () => (JSArrayOfUint8List = dart.constFn(_interceptors.JSArray$(typed_data.Uint8List)))();
let FutureOfDirectory = () => (FutureOfDirectory = dart.constFn(async.Future$(io.Directory)))();
let DirectoryToFutureOfDirectory = () => (DirectoryToFutureOfDirectory = dart.constFn(dart.fnType(FutureOfDirectory(), [io.Directory])))();
let FutureOrOfDirectory = () => (FutureOrOfDirectory = dart.constFn(async.FutureOr$(io.Directory)))();
let boolToFutureOrOfDirectory = () => (boolToFutureOrOfDirectory = dart.constFn(dart.fnType(FutureOrOfDirectory(), [core.bool])))();
let dynamicTo_Directory = () => (dynamicTo_Directory = dart.constFn(dart.fnType(io._Directory, [dart.dynamic])))();
let dynamicToDirectory = () => (dynamicToDirectory = dart.constFn(dart.fnType(io.Directory, [dart.dynamic])))();
let JSArrayOfFileSystemEntity = () => (JSArrayOfFileSystemEntity = dart.constFn(_interceptors.JSArray$(io.FileSystemEntity)))();
let FutureOrOfString = () => (FutureOrOfString = dart.constFn(async.FutureOr$(core.String)))();
let dynamicToFutureOrOfString = () => (dynamicToFutureOrOfString = dart.constFn(dart.fnType(FutureOrOfString(), [dart.dynamic])))();
let dynamicToFutureOrOfbool = () => (dynamicToFutureOrOfbool = dart.constFn(dart.fnType(FutureOrOfbool(), [dart.dynamic])))();
let FileSystemEntityTypeTobool = () => (FileSystemEntityTypeTobool = dart.constFn(dart.fnType(core.bool, [io.FileSystemEntityType])))();
let dynamicToFileSystemEntityType = () => (dynamicToFileSystemEntityType = dart.constFn(dart.fnType(io.FileSystemEntityType, [dart.dynamic])))();
let StreamControllerOfFileSystemEntity = () => (StreamControllerOfFileSystemEntity = dart.constFn(async.StreamController$(io.FileSystemEntity)))();
let StreamControllerOfUint8List = () => (StreamControllerOfUint8List = dart.constFn(async.StreamController$(typed_data.Uint8List)))();
let Uint8ListToNull = () => (Uint8ListToNull = dart.constFn(dart.fnType(core.Null, [typed_data.Uint8List])))();
let RandomAccessFileTovoid = () => (RandomAccessFileTovoid = dart.constFn(dart.fnType(dart.void, [io.RandomAccessFile])))();
let dynamicAnddynamicTovoid = () => (dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))();
let FutureOfRandomAccessFile = () => (FutureOfRandomAccessFile = dart.constFn(async.Future$(io.RandomAccessFile)))();
let CompleterOfFile = () => (CompleterOfFile = dart.constFn(async.Completer$(io.File)))();
let dynamicAndStackTraceTovoid$ = () => (dynamicAndStackTraceTovoid$ = dart.constFn(dart.fnType(dart.void, [dart.dynamic], [core.StackTrace])))();
let RandomAccessFileTodynamic = () => (RandomAccessFileTodynamic = dart.constFn(dart.fnType(dart.dynamic, [io.RandomAccessFile])))();
let ListOfintToNull = () => (ListOfintToNull = dart.constFn(dart.fnType(core.Null, [ListOfint()])))();
let RandomAccessFileToNull = () => (RandomAccessFileToNull = dart.constFn(dart.fnType(core.Null, [io.RandomAccessFile])))();
let FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
let RandomAccessFileToFutureOfvoid = () => (RandomAccessFileToFutureOfvoid = dart.constFn(dart.fnType(FutureOfvoid(), [io.RandomAccessFile])))();
let voidToFile = () => (voidToFile = dart.constFn(dart.fnType(io.File, [dart.void])))();
let DirectoryToFuture = () => (DirectoryToFuture = dart.constFn(dart.fnType(async.Future, [io.Directory])))();
let dynamicTo_File = () => (dynamicTo_File = dart.constFn(dart.fnType(io._File, [dart.dynamic])))();
let FileSystemEntityTo_File = () => (FileSystemEntityTo_File = dart.constFn(dart.fnType(io._File, [io.FileSystemEntity])))();
let dynamicToFile = () => (dynamicToFile = dart.constFn(dart.fnType(io.File, [dart.dynamic])))();
let dynamicTo_RandomAccessFile = () => (dynamicTo_RandomAccessFile = dart.constFn(dart.fnType(io._RandomAccessFile, [dart.dynamic])))();
let FutureOrOfint = () => (FutureOrOfint = dart.constFn(async.FutureOr$(core.int)))();
let dynamicToFutureOrOfint = () => (dynamicToFutureOrOfint = dart.constFn(dart.fnType(FutureOrOfint(), [dart.dynamic])))();
let dynamicToDateTime = () => (dynamicToDateTime = dart.constFn(dart.fnType(core.DateTime, [dart.dynamic])))();
let CompleterOfUint8List = () => (CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))();
let FutureOfUint8List = () => (FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))();
let RandomAccessFileToFutureOfUint8List = () => (RandomAccessFileToFutureOfUint8List = dart.constFn(dart.fnType(FutureOfUint8List(), [io.RandomAccessFile])))();
let intToFutureOfUint8List = () => (intToFutureOfUint8List = dart.constFn(dart.fnType(FutureOfUint8List(), [core.int])))();
let FutureOfString = () => (FutureOfString = dart.constFn(async.Future$(core.String)))();
let Uint8ListToFutureOrOfString = () => (Uint8ListToFutureOrOfString = dart.constFn(dart.fnType(FutureOrOfString(), [typed_data.Uint8List])))();
let RandomAccessFileTo_File = () => (RandomAccessFileTo_File = dart.constFn(dart.fnType(io._File, [io.RandomAccessFile])))();
let FutureOrOfFile = () => (FutureOrOfFile = dart.constFn(async.FutureOr$(io.File)))();
let RandomAccessFileToFutureOrOfFile = () => (RandomAccessFileToFutureOrOfFile = dart.constFn(dart.fnType(FutureOrOfFile(), [io.RandomAccessFile])))();
let FutureOfFile = () => (FutureOfFile = dart.constFn(async.Future$(io.File)))();
let RandomAccessFileToFutureOfFile = () => (RandomAccessFileToFutureOfFile = dart.constFn(dart.fnType(FutureOfFile(), [io.RandomAccessFile])))();
let dynamicAnddynamicToFutureOfServiceExtensionResponse = () => (dynamicAnddynamicToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(FutureOfServiceExtensionResponse(), [dart.dynamic, dart.dynamic])))();
let dynamicToUint8List = () => (dynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic])))();
let FutureOfint = () => (FutureOfint = dart.constFn(async.Future$(core.int)))();
let dynamicToint = () => (dynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic])))();
let dynamicToFileStat = () => (dynamicToFileStat = dart.constFn(dart.fnType(io.FileStat, [dart.dynamic])))();
let ListOfMapOfString$dynamic = () => (ListOfMapOfString$dynamic = dart.constFn(core.List$(MapOfString$dynamic())))();
let _FileResourceInfoToMapOfString$dynamic = () => (_FileResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(MapOfString$dynamic(), [io._FileResourceInfo])))();
let LinkedMapOfint$_FileResourceInfo = () => (LinkedMapOfint$_FileResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._FileResourceInfo)))();
let _ProcessResourceInfoToMapOfString$dynamic = () => (_ProcessResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(MapOfString$dynamic(), [io._ProcessResourceInfo])))();
let LinkedMapOfint$_ProcessResourceInfo = () => (LinkedMapOfint$_ProcessResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._ProcessResourceInfo)))();
let _SocketResourceInfoToMapOfString$dynamic = () => (_SocketResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(MapOfString$dynamic(), [io._SocketResourceInfo])))();
let LinkedMapOfint$_SocketResourceInfo = () => (LinkedMapOfint$_SocketResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._SocketResourceInfo)))();
let dynamicTo_Link = () => (dynamicTo_Link = dart.constFn(dart.fnType(io._Link, [dart.dynamic])))();
let FutureOfLink = () => (FutureOfLink = dart.constFn(async.Future$(io.Link)))();
let FileSystemEntityToFutureOfLink = () => (FileSystemEntityToFutureOfLink = dart.constFn(dart.fnType(FutureOfLink(), [io.FileSystemEntity])))();
let FileSystemEntityTo_Link = () => (FileSystemEntityTo_Link = dart.constFn(dart.fnType(io._Link, [io.FileSystemEntity])))();
let dynamicToLink = () => (dynamicToLink = dart.constFn(dart.fnType(io.Link, [dart.dynamic])))();
let _CaseInsensitiveStringMapOfString = () => (_CaseInsensitiveStringMapOfString = dart.constFn(io._CaseInsensitiveStringMap$(core.String)))();
let UnmodifiableMapViewOfString$String = () => (UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))();
let RawSecureServerSocketToSecureServerSocket = () => (RawSecureServerSocketToSecureServerSocket = dart.constFn(dart.fnType(io.SecureServerSocket, [io.RawSecureServerSocket])))();
let RawSecureSocketToSecureSocket = () => (RawSecureSocketToSecureSocket = dart.constFn(dart.fnType(io.SecureSocket, [io.RawSecureSocket])))();
let ConnectionTaskOfSecureSocket = () => (ConnectionTaskOfSecureSocket = dart.constFn(io.ConnectionTask$(io.SecureSocket)))();
let ConnectionTaskOfRawSecureSocket = () => (ConnectionTaskOfRawSecureSocket = dart.constFn(io.ConnectionTask$(io.RawSecureSocket)))();
let ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket = () => (ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket = dart.constFn(dart.fnType(ConnectionTaskOfSecureSocket(), [ConnectionTaskOfRawSecureSocket()])))();
let StreamSubscriptionOfRawSocketEvent = () => (StreamSubscriptionOfRawSocketEvent = dart.constFn(async.StreamSubscription$(io.RawSocketEvent)))();
let FutureOfRawSecureSocket = () => (FutureOfRawSecureSocket = dart.constFn(async.Future$(io.RawSecureSocket)))();
let dynamicToFutureOfRawSecureSocket = () => (dynamicToFutureOfRawSecureSocket = dart.constFn(dart.fnType(FutureOfRawSecureSocket(), [dart.dynamic])))();
let StreamControllerOfRawSecureSocket = () => (StreamControllerOfRawSecureSocket = dart.constFn(async.StreamController$(io.RawSecureSocket)))();
let RawServerSocketToRawSecureServerSocket = () => (RawServerSocketToRawSecureServerSocket = dart.constFn(dart.fnType(io.RawSecureServerSocket, [io.RawServerSocket])))();
let RawSecureSocketToNull = () => (RawSecureSocketToNull = dart.constFn(dart.fnType(core.Null, [io.RawSecureSocket])))();
let RawSocketToFutureOfRawSecureSocket = () => (RawSocketToFutureOfRawSecureSocket = dart.constFn(dart.fnType(FutureOfRawSecureSocket(), [io.RawSocket])))();
let ConnectionTaskOfRawSocket = () => (ConnectionTaskOfRawSocket = dart.constFn(io.ConnectionTask$(io.RawSocket)))();
let ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket = () => (ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket = dart.constFn(dart.fnType(ConnectionTaskOfRawSecureSocket(), [ConnectionTaskOfRawSocket()])))();
let CompleterOf_RawSecureSocket = () => (CompleterOf_RawSecureSocket = dart.constFn(async.Completer$(io._RawSecureSocket)))();
let CompleterOfRawSecureSocket = () => (CompleterOfRawSecureSocket = dart.constFn(async.Completer$(io.RawSecureSocket)))();
let StreamControllerOfRawSocketEvent = () => (StreamControllerOfRawSocketEvent = dart.constFn(async.StreamController$(io.RawSocketEvent)))();
let _FilterStatusToNull = () => (_FilterStatusToNull = dart.constFn(dart.fnType(core.Null, [io._FilterStatus])))();
let intToint = () => (intToint = dart.constFn(dart.fnType(core.int, [core.int])))();
let dynamicTo_FilterStatus = () => (dynamicTo_FilterStatus = dart.constFn(dart.fnType(io._FilterStatus, [dart.dynamic])))();
let ListOfintAndStringTovoid = () => (ListOfintAndStringTovoid = dart.constFn(dart.fnType(dart.void, [ListOfint(), core.String])))();
let Fn__ToR = () => (Fn__ToR = dart.constFn(dart.gFnType(R => [R, [dart.fnType(R, [])], {onError: core.Function, zoneSpecification: async.ZoneSpecification, zoneValues: core.Map}, {}])))();
let dynamicTo_DartObject = () => (dynamicTo_DartObject = dart.constFn(dart.fnType(js._DartObject, [dart.dynamic])))();
let ExpandoOfFunction = () => (ExpandoOfFunction = dart.constFn(core.Expando$(core.Function)))();
let PointOfnum = () => (PointOfnum = dart.constFn(math.Point$(core.num)))();
let RectangleOfnum = () => (RectangleOfnum = dart.constFn(math.Rectangle$(core.num)))();
let LibraryMirrorTobool = () => (LibraryMirrorTobool = dart.constFn(dart.fnType(core.bool, [mirrors.LibraryMirror])))();
let intAndintToint = () => (intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))();
let StringToint = () => (StringToint = dart.constFn(dart.fnType(core.int, [core.String])))();
let intToString = () => (intToString = dart.constFn(dart.fnType(core.String, [core.int])))();
let MapOfSymbol$Object = () => (MapOfSymbol$Object = dart.constFn(core.Map$(core.Symbol, core.Object)))();
let MapOfString$StringAndStringToMapOfString$String = () => (MapOfString$StringAndStringToMapOfString$String = dart.constFn(dart.fnType(MapOfString$String(), [MapOfString$String(), core.String])))();
let StringAndintTovoid = () => (StringAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.int])))();
let StringAnddynamicTovoid = () => (StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String], [dart.dynamic])))();
let StringToNull = () => (StringToNull = dart.constFn(dart.fnType(core.Null, [core.String])))();
let MapOfString$ListOfString = () => (MapOfString$ListOfString = dart.constFn(core.Map$(core.String, ListOfString())))();
let StringAndStringTovoid = () => (StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))();
let VoidToListOfString = () => (VoidToListOfString = dart.constFn(dart.fnType(ListOfString(), [])))();
let intAndintAndintTovoid = () => (intAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int, core.int])))();
let _StringSinkConversionSinkOfStringSink = () => (_StringSinkConversionSinkOfStringSink = dart.constFn(convert._StringSinkConversionSink$(core.StringSink)))();
let StringAndStringToNull = () => (StringAndStringToNull = dart.constFn(dart.fnType(core.Null, [core.String, core.String])))();
let ListOfUint8List = () => (ListOfUint8List = dart.constFn(core.List$(typed_data.Uint8List)))();
let intToUint8List = () => (intToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int])))();
let dynamicAnddynamicToUint8List = () => (dynamicAnddynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic, dart.dynamic])))();
let Uint8ListAndStringAndintTovoid = () => (Uint8ListAndStringAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.String, core.int])))();
let StringAndListOfStringToListOfString = () => (StringAndListOfStringToListOfString = dart.constFn(dart.fnType(ListOfString(), [core.String, ListOfString()])))();
let StringAndListOfStringToNull = () => (StringAndListOfStringToNull = dart.constFn(dart.fnType(core.Null, [core.String, ListOfString()])))();
let JSArrayOfCookie = () => (JSArrayOfCookie = dart.constFn(_interceptors.JSArray$(_http.Cookie)))();
let HashMapOfString$String = () => (HashMapOfString$String = dart.constFn(collection.HashMap$(core.String, core.String)))();
let CookieTobool = () => (CookieTobool = dart.constFn(dart.fnType(core.bool, [_http.Cookie])))();
let CookieToString = () => (CookieToString = dart.constFn(dart.fnType(core.String, [_http.Cookie])))();
let FutureOfHttpClientResponse = () => (FutureOfHttpClientResponse = dart.constFn(async.Future$(_http.HttpClientResponse)))();
let _HttpClientRequestToFutureOfHttpClientResponse = () => (_HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(FutureOfHttpClientResponse(), [_http._HttpClientRequest])))();
let _EmptyStreamOfUint8List = () => (_EmptyStreamOfUint8List = dart.constFn(async._EmptyStream$(typed_data.Uint8List)))();
let dynamicToFutureOfHttpClientResponse = () => (dynamicToFutureOfHttpClientResponse = dart.constFn(dart.fnType(FutureOfHttpClientResponse(), [dart.dynamic])))();
let VoidToFutureOfHttpClientResponse = () => (VoidToFutureOfHttpClientResponse = dart.constFn(dart.fnType(FutureOfHttpClientResponse(), [])))();
let _AuthenticationSchemeTo_Credentials = () => (_AuthenticationSchemeTo_Credentials = dart.constFn(dart.fnType(_http._Credentials, [_http._AuthenticationScheme])))();
let _CredentialsTovoid = () => (_CredentialsTovoid = dart.constFn(dart.fnType(dart.void, [_http._Credentials])))();
let _AuthenticationSchemeAndStringToFuture = () => (_AuthenticationSchemeAndStringToFuture = dart.constFn(dart.fnType(async.Future, [_http._AuthenticationScheme, core.String])))();
let FutureOrOfHttpClientResponse = () => (FutureOrOfHttpClientResponse = dart.constFn(async.FutureOr$(_http.HttpClientResponse)))();
let dynamicToFutureOrOfHttpClientResponse = () => (dynamicToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(FutureOrOfHttpClientResponse(), [dart.dynamic])))();
let SinkOfUint8List = () => (SinkOfUint8List = dart.constFn(core.Sink$(typed_data.Uint8List)))();
let CookieToNull = () => (CookieToNull = dart.constFn(dart.fnType(core.Null, [_http.Cookie])))();
let CompleterOfHttpClientResponse = () => (CompleterOfHttpClientResponse = dart.constFn(async.Completer$(_http.HttpClientResponse)))();
let JSArrayOfRedirectInfo = () => (JSArrayOfRedirectInfo = dart.constFn(_interceptors.JSArray$(_http.RedirectInfo)))();
let VoidToMap = () => (VoidToMap = dart.constFn(dart.fnType(core.Map, [])))();
let JSArrayOfMapOfString$dynamic = () => (JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(MapOfString$dynamic())))();
let VoidToListOfMapOfString$dynamic = () => (VoidToListOfMapOfString$dynamic = dart.constFn(dart.fnType(ListOfMapOfString$dynamic(), [])))();
let HttpClientResponseToNull = () => (HttpClientResponseToNull = dart.constFn(dart.fnType(core.Null, [_http.HttpClientResponse])))();
let JSArrayOfFuture = () => (JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))();
let ListToFutureOrOfHttpClientResponse = () => (ListToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(FutureOrOfHttpClientResponse(), [core.List])))();
let HttpClientResponseTovoid = () => (HttpClientResponseTovoid = dart.constFn(dart.fnType(dart.void, [_http.HttpClientResponse])))();
let CompleterOfSocket = () => (CompleterOfSocket = dart.constFn(async.Completer$(io.Socket)))();
let dynamicToIterable = () => (dynamicToIterable = dart.constFn(dart.fnType(core.Iterable, [dart.dynamic])))();
let StreamControllerOfListOfint = () => (StreamControllerOfListOfint = dart.constFn(async.StreamController$(ListOfint())))();
let ListOfintTovoid = () => (ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [ListOfint()])))();
let dynamicTo_HttpOutboundMessage = () => (dynamicTo_HttpOutboundMessage = dart.constFn(dart.fnType(_http._HttpOutboundMessage, [dart.dynamic])))();
let dynamicAnddynamicTo_HttpOutboundMessage = () => (dynamicAnddynamicTo_HttpOutboundMessage = dart.constFn(dart.fnType(_http._HttpOutboundMessage, [dart.dynamic, dart.dynamic])))();
let _HttpIncomingToNull = () => (_HttpIncomingToNull = dart.constFn(dart.fnType(core.Null, [_http._HttpIncoming])))();
let CompleterOf_HttpIncoming = () => (CompleterOf_HttpIncoming = dart.constFn(async.Completer$(_http._HttpIncoming)))();
let SocketToSocket = () => (SocketToSocket = dart.constFn(dart.fnType(io.Socket, [io.Socket])))();
let SocketTo_DetachedSocket = () => (SocketTo_DetachedSocket = dart.constFn(dart.fnType(_http._DetachedSocket, [io.Socket])))();
let SocketTovoid = () => (SocketTovoid = dart.constFn(dart.fnType(dart.void, [io.Socket])))();
let FutureOfSecureSocket = () => (FutureOfSecureSocket = dart.constFn(async.Future$(io.SecureSocket)))();
let HttpClientResponseToFutureOfSecureSocket = () => (HttpClientResponseToFutureOfSecureSocket = dart.constFn(dart.fnType(FutureOfSecureSocket(), [_http.HttpClientResponse])))();
let SecureSocketTo_HttpClientConnection = () => (SecureSocketTo_HttpClientConnection = dart.constFn(dart.fnType(_http._HttpClientConnection, [io.SecureSocket])))();
let _HashSetOf_HttpClientConnection = () => (_HashSetOf_HttpClientConnection = dart.constFn(collection._HashSet$(_http._HttpClientConnection)))();
let _HashSetOfConnectionTask = () => (_HashSetOfConnectionTask = dart.constFn(collection._HashSet$(io.ConnectionTask)))();
let FutureOf_ConnectionInfo = () => (FutureOf_ConnectionInfo = dart.constFn(async.Future$(_http._ConnectionInfo)))();
let CompleterOf_ConnectionInfo = () => (CompleterOf_ConnectionInfo = dart.constFn(async.Completer$(_http._ConnectionInfo)))();
let X509CertificateTobool = () => (X509CertificateTobool = dart.constFn(dart.fnType(core.bool, [io.X509Certificate])))();
let _HttpClientConnectionTo_ConnectionInfo = () => (_HttpClientConnectionTo_ConnectionInfo = dart.constFn(dart.fnType(_http._ConnectionInfo, [_http._HttpClientConnection])))();
let FutureOrOf_ConnectionInfo = () => (FutureOrOf_ConnectionInfo = dart.constFn(async.FutureOr$(_http._ConnectionInfo)))();
let dynamicToFutureOrOf_ConnectionInfo = () => (dynamicToFutureOrOf_ConnectionInfo = dart.constFn(dart.fnType(FutureOrOf_ConnectionInfo(), [dart.dynamic])))();
let ConnectionTaskToFutureOf_ConnectionInfo = () => (ConnectionTaskToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(FutureOf_ConnectionInfo(), [io.ConnectionTask])))();
let IdentityMapOfString$_ConnectionTarget = () => (IdentityMapOfString$_ConnectionTarget = dart.constFn(_js_helper.IdentityMap$(core.String, _http._ConnectionTarget)))();
let JSArrayOf_Credentials = () => (JSArrayOf_Credentials = dart.constFn(_interceptors.JSArray$(_http._Credentials)))();
let JSArrayOf_ProxyCredentials = () => (JSArrayOf_ProxyCredentials = dart.constFn(_interceptors.JSArray$(_http._ProxyCredentials)))();
let Uri__ToString = () => (Uri__ToString = dart.constFn(dart.fnType(core.String, [core.Uri], {environment: MapOfString$String()}, {})))();
let _ConnectionTargetTobool = () => (_ConnectionTargetTobool = dart.constFn(dart.fnType(core.bool, [_http._ConnectionTarget])))();
let FutureOf_HttpClientRequest = () => (FutureOf_HttpClientRequest = dart.constFn(async.Future$(_http._HttpClientRequest)))();
let _ConnectionInfoTo_HttpClientRequest = () => (_ConnectionInfoTo_HttpClientRequest = dart.constFn(dart.fnType(_http._HttpClientRequest, [_http._ConnectionInfo])))();
let FutureOrOf_HttpClientRequest = () => (FutureOrOf_HttpClientRequest = dart.constFn(async.FutureOr$(_http._HttpClientRequest)))();
let _ConnectionInfoToFutureOrOf_HttpClientRequest = () => (_ConnectionInfoToFutureOrOf_HttpClientRequest = dart.constFn(dart.fnType(FutureOrOf_HttpClientRequest(), [_http._ConnectionInfo])))();
let _HttpClientRequestTo_HttpClientRequest = () => (_HttpClientRequestTo_HttpClientRequest = dart.constFn(dart.fnType(_http._HttpClientRequest, [_http._HttpClientRequest])))();
let VoidTo_ConnectionTarget = () => (VoidTo_ConnectionTarget = dart.constFn(dart.fnType(_http._ConnectionTarget, [])))();
let dynamicToFutureOf_ConnectionInfo = () => (dynamicToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(FutureOf_ConnectionInfo(), [dart.dynamic])))();
let _SiteCredentialsAnd_CredentialsTo_SiteCredentials = () => (_SiteCredentialsAnd_CredentialsTo_SiteCredentials = dart.constFn(dart.fnType(_http._SiteCredentials, [_http._SiteCredentials, _http._Credentials])))();
let StreamOfUint8List = () => (StreamOfUint8List = dart.constFn(async.Stream$(typed_data.Uint8List)))();
let SocketToNull = () => (SocketToNull = dart.constFn(dart.fnType(core.Null, [io.Socket])))();
let dynamicTo_DetachedSocket = () => (dynamicTo_DetachedSocket = dart.constFn(dart.fnType(_http._DetachedSocket, [dart.dynamic])))();
let IdentityMapOfint$_HttpConnection = () => (IdentityMapOfint$_HttpConnection = dart.constFn(_js_helper.IdentityMap$(core.int, _http._HttpConnection)))();
let LinkedListOf_HttpConnection = () => (LinkedListOf_HttpConnection = dart.constFn(collection.LinkedList$(_http._HttpConnection)))();
let StreamControllerOfHttpRequest = () => (StreamControllerOfHttpRequest = dart.constFn(async.StreamController$(_http.HttpRequest)))();
let ServerSocketTo_HttpServer = () => (ServerSocketTo_HttpServer = dart.constFn(dart.fnType(_http._HttpServer, [io.ServerSocket])))();
let SecureServerSocketTo_HttpServer = () => (SecureServerSocketTo_HttpServer = dart.constFn(dart.fnType(_http._HttpServer, [io.SecureServerSocket])))();
let _HttpConnectionToNull = () => (_HttpConnectionToNull = dart.constFn(dart.fnType(core.Null, [_http._HttpConnection])))();
let _HttpConnectionToMap = () => (_HttpConnectionToMap = dart.constFn(dart.fnType(core.Map, [_http._HttpConnection])))();
let LinkedMapOfint$_HttpServer = () => (LinkedMapOfint$_HttpServer = dart.constFn(_js_helper.LinkedMap$(core.int, _http._HttpServer)))();
let JSArrayOf_Proxy = () => (JSArrayOf_Proxy = dart.constFn(_interceptors.JSArray$(_http._Proxy)))();
let StreamControllerOf_HttpIncoming = () => (StreamControllerOf_HttpIncoming = dart.constFn(async.StreamController$(_http._HttpIncoming)))();
let IterableOfMapEntry = () => (IterableOfMapEntry = dart.constFn(core.Iterable$(core.MapEntry)))();
let dynamicAnddynamicTodynamic = () => (dynamicAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])))();
let IdentityMapOfString$_HttpSession = () => (IdentityMapOfString$_HttpSession = dart.constFn(_js_helper.IdentityMap$(core.String, _http._HttpSession)))();
let EventSinkTo_WebSocketProtocolTransformer = () => (EventSinkTo_WebSocketProtocolTransformer = dart.constFn(dart.fnType(_http._WebSocketProtocolTransformer, [async.EventSink])))();
let StreamControllerOfWebSocket = () => (StreamControllerOfWebSocket = dart.constFn(async.StreamController$(_http.WebSocket)))();
let StreamOfHttpRequest = () => (StreamOfHttpRequest = dart.constFn(async.Stream$(_http.HttpRequest)))();
let WebSocketTovoid = () => (WebSocketTovoid = dart.constFn(dart.fnType(dart.void, [_http.WebSocket])))();
let HttpRequestToNull = () => (HttpRequestToNull = dart.constFn(dart.fnType(core.Null, [_http.HttpRequest])))();
let FutureOfWebSocket = () => (FutureOfWebSocket = dart.constFn(async.Future$(_http.WebSocket)))();
let SocketTo_WebSocketImpl = () => (SocketTo_WebSocketImpl = dart.constFn(dart.fnType(_http._WebSocketImpl, [io.Socket])))();
let StringToFutureOfWebSocket = () => (StringToFutureOfWebSocket = dart.constFn(dart.fnType(FutureOfWebSocket(), [core.String])))();
let VoidToFutureOrOfString = () => (VoidToFutureOrOfString = dart.constFn(dart.fnType(FutureOrOfString(), [])))();
let EventSinkOfListOfint = () => (EventSinkOfListOfint = dart.constFn(async.EventSink$(ListOfint())))();
let EventSinkOfListOfintTo_WebSocketOutgoingTransformer = () => (EventSinkOfListOfintTo_WebSocketOutgoingTransformer = dart.constFn(dart.fnType(_http._WebSocketOutgoingTransformer, [EventSinkOfListOfint()])))();
let CompleterOfWebSocket = () => (CompleterOfWebSocket = dart.constFn(async.Completer$(_http.WebSocket)))();
let dynamicTo_WebSocketImpl = () => (dynamicTo_WebSocketImpl = dart.constFn(dart.fnType(_http._WebSocketImpl, [dart.dynamic])))();
let StringAnddynamicTovoid$ = () => (StringAnddynamicTovoid$ = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))();
let HttpClientRequestToFutureOfHttpClientResponse = () => (HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(FutureOfHttpClientResponse(), [_http.HttpClientRequest])))();
let HttpClientResponseToFutureOfWebSocket = () => (HttpClientResponseToFutureOfWebSocket = dart.constFn(dart.fnType(FutureOfWebSocket(), [_http.HttpClientResponse])))();
let dynamicToMap = () => (dynamicToMap = dart.constFn(dart.fnType(core.Map, [dart.dynamic])))();
let LinkedMapOfint$_WebSocketImpl = () => (LinkedMapOfint$_WebSocketImpl = dart.constFn(_js_helper.LinkedMap$(core.int, _http._WebSocketImpl)))();
const CT = Object.create(null);
const _jsError$ = dart.privateName(dart, "_jsError");
const _type$ = dart.privateName(dart, "_type");
dart.applyMixin = function applyMixin(to, from) {
  to[dart._mixin] = from;
  let toProto = to.prototype;
  let fromProto = from.prototype;
  dart._copyMembers(toProto, fromProto);
  dart._mixinSignature(to, from, dart._methodSig);
  dart._mixinSignature(to, from, dart._fieldSig);
  dart._mixinSignature(to, from, dart._getterSig);
  dart._mixinSignature(to, from, dart._setterSig);
  let mixinOnFn = from[dart.mixinOn];
  if (mixinOnFn != null) {
    let proto = mixinOnFn(to.__proto__).prototype;
    dart._copyMembers(toProto, proto);
  }
};
dart._copyMembers = function _copyMembers(to, from) {
  let names = dart.getOwnNamesAndSymbols(from);
  for (let i = 0, n = names.length; i < n; i = i + 1) {
    let name = names[i];
    if (name === "constructor") continue;
    dart._copyMember(to, from, name);
  }
  return to;
};
dart._copyMember = function _copyMember(to, from, name) {
  let desc = dart.getOwnPropertyDescriptor(from, name);
  if (name == Symbol.iterator) {
    let existing = dart.getOwnPropertyDescriptor(to, name);
    if (existing != null) {
      if (existing.writable) {
        to[name] = desc.value;
      }
      return;
    }
  }
  let getter = desc.get;
  let setter = desc.set;
  if (getter != null) {
    if (setter == null) {
      let obj = desc.set = {
        __proto__: to.__proto__,
        set [name](x) {
          return super[name] = x;
        }
      };
      desc.set = dart.getOwnPropertyDescriptor(obj, name).set;
    }
  } else if (setter != null) {
    if (getter == null) {
      let obj = desc.get = {
        __proto__: to.__proto__,
        get [name]() {
          return super[name];
        }
      };
      desc.get = dart.getOwnPropertyDescriptor(obj, name).get;
    }
  }
  dart.defineProperty(to, name, desc);
};
dart._mixinSignature = function _mixinSignature(to, from, kind) {
  to[kind] = () => {
    let baseMembers = dart._getMembers(to.__proto__, kind);
    let fromMembers = dart._getMembers(from, kind);
    if (fromMembers == null) return baseMembers;
    let toSignature = {__proto__: baseMembers};
    dart.copyProperties(toSignature, fromMembers);
    return toSignature;
  };
};
dart.getMixin = function getMixin(clazz) {
  return Object.hasOwnProperty.call(clazz, dart._mixin) ? clazz[dart._mixin] : null;
};
dart.getImplements = function getImplements(clazz) {
  return Object.hasOwnProperty.call(clazz, dart.implements) ? clazz[dart.implements] : null;
};
dart.generic = function generic(typeConstructor, setBaseClass) {
  let length = typeConstructor.length;
  if (length < 1) {
    dart.throwInternalError('must have at least one generic type argument');
  }
  let resultMap = new Map();
  function makeGenericType(...args) {
    if (args.length != length && args.length != 0) {
      dart.throwInternalError('requires ' + length + ' or 0 type arguments');
    }
    while (args.length < length)
      args.push(dart.dynamic);
    let value = resultMap;
    for (let i = 0; i < length; i++) {
      let arg = args[i];
      if (arg == null) {
        dart.throwInternalError('type arguments should not be null: ' + typeConstructor);
      }
      let map = value;
      value = map.get(arg);
      if (value === void 0) {
        if (i + 1 == length) {
          value = typeConstructor.apply(null, args);
          if (value) {
            value[dart._typeArguments] = args;
            value[dart._originalDeclaration] = makeGenericType;
          }
          map.set(arg, value);
          if (setBaseClass != null) setBaseClass.apply(null, args);
        } else {
          value = new Map();
          map.set(arg, value);
        }
      }
    }
    return value;
  }
  makeGenericType[dart._genericTypeCtor] = typeConstructor;
  return makeGenericType;
};
dart.getGenericClass = function getGenericClass(type) {
  return dart.safeGetOwnProperty(type, dart._originalDeclaration);
};
dart.getGenericArgs = function getGenericArgs(type) {
  return dart.safeGetOwnProperty(type, dart._typeArguments);
};
dart.getGenericArgVariances = function getGenericArgVariances(type) {
  return dart.safeGetOwnProperty(type, dart._variances);
};
dart.setGenericArgVariances = function setGenericArgVariances(f, variances) {
  return f[dart._variances] = variances;
};
dart.getGenericTypeFormals = function getGenericTypeFormals(genericClass) {
  return dart._typeFormalsFromFunction(dart.getGenericTypeCtor(genericClass));
};
dart.instantiateClass = function instantiateClass(genericClass, typeArgs) {
  return genericClass.apply(null, typeArgs);
};
dart.getConstructors = function getConstructors(value) {
  return dart._getMembers(value, dart._constructorSig);
};
dart.getMethods = function getMethods(value) {
  return dart._getMembers(value, dart._methodSig);
};
dart.getFields = function getFields(value) {
  return dart._getMembers(value, dart._fieldSig);
};
dart.getGetters = function getGetters(value) {
  return dart._getMembers(value, dart._getterSig);
};
dart.getSetters = function getSetters(value) {
  return dart._getMembers(value, dart._setterSig);
};
dart.getStaticMethods = function getStaticMethods(value) {
  return dart._getMembers(value, dart._staticMethodSig);
};
dart.getStaticFields = function getStaticFields(value) {
  return dart._getMembers(value, dart._staticFieldSig);
};
dart.getStaticGetters = function getStaticGetters(value) {
  return dart._getMembers(value, dart._staticGetterSig);
};
dart.getStaticSetters = function getStaticSetters(value) {
  return dart._getMembers(value, dart._staticSetterSig);
};
dart.getGenericTypeCtor = function getGenericTypeCtor(value) {
  return value[dart._genericTypeCtor];
};
dart.getType = function getType(obj) {
  return obj == null ? core.Object : obj.__proto__.constructor;
};
dart.getLibraryUri = function getLibraryUri(value) {
  return value[dart._libraryUri];
};
dart.setLibraryUri = function setLibraryUri(f, uri) {
  return f[dart._libraryUri] = uri;
};
dart.isJsInterop = function isJsInterop(obj) {
  if (obj == null) return false;
  if (typeof obj === "function") {
    return obj[dart._runtimeType] == null;
  }
  if (typeof obj !== "object") return false;
  if (obj[dart._extensionType] != null) return false;
  return !(obj instanceof core.Object);
};
dart.getMethodType = function getMethodType(type, name) {
  let m = dart.getMethods(type);
  return m != null ? m[name] : null;
};
dart.getSetterType = function getSetterType(type, name) {
  let setters = dart.getSetters(type);
  if (setters != null) {
    let type = setters[name];
    if (type != null) {
      if (type instanceof Array) {
        return type[0];
      }
      return type;
    }
  }
  let fields = dart.getFields(type);
  if (fields != null) {
    let fieldInfo = fields[name];
    if (fieldInfo != null && !fieldInfo.isFinal) {
      return fieldInfo.type;
    }
  }
  return null;
};
dart.finalFieldType = function finalFieldType(type, metadata) {
  return {type: type, isFinal: true, metadata: metadata};
};
dart.fieldType = function fieldType(type, metadata) {
  return {type: type, isFinal: false, metadata: metadata};
};
dart.classGetConstructorType = function classGetConstructorType(cls, name) {
  if (cls == null) return null;
  if (name == null) name = "new";
  let ctors = dart.getConstructors(cls);
  return ctors != null ? ctors[name] : null;
};
dart.setMethodSignature = function setMethodSignature(f, sigF) {
  return f[dart._methodSig] = sigF;
};
dart.setFieldSignature = function setFieldSignature(f, sigF) {
  return f[dart._fieldSig] = sigF;
};
dart.setGetterSignature = function setGetterSignature(f, sigF) {
  return f[dart._getterSig] = sigF;
};
dart.setSetterSignature = function setSetterSignature(f, sigF) {
  return f[dart._setterSig] = sigF;
};
dart.setConstructorSignature = function setConstructorSignature(f, sigF) {
  return f[dart._constructorSig] = sigF;
};
dart.setStaticMethodSignature = function setStaticMethodSignature(f, sigF) {
  return f[dart._staticMethodSig] = sigF;
};
dart.setStaticFieldSignature = function setStaticFieldSignature(f, sigF) {
  return f[dart._staticFieldSig] = sigF;
};
dart.setStaticGetterSignature = function setStaticGetterSignature(f, sigF) {
  return f[dart._staticGetterSig] = sigF;
};
dart.setStaticSetterSignature = function setStaticSetterSignature(f, sigF) {
  return f[dart._staticSetterSig] = sigF;
};
dart._getMembers = function _getMembers(type, kind) {
  let sig = type[kind];
  return typeof sig == "function" ? type[kind] = sig() : sig;
};
dart._hasMember = function _hasMember(type, kind, name) {
  let sig = dart._getMembers(type, kind);
  return sig != null && name in sig;
};
dart.hasMethod = function hasMethod(type, name) {
  return dart._hasMember(type, dart._methodSig, name);
};
dart.hasGetter = function hasGetter(type, name) {
  return dart._hasMember(type, dart._getterSig, name);
};
dart.hasSetter = function hasSetter(type, name) {
  return dart._hasMember(type, dart._setterSig, name);
};
dart.hasField = function hasField(type, name) {
  return dart._hasMember(type, dart._fieldSig, name);
};
dart._installProperties = function _installProperties(jsProto, dartType, installedParent) {
  if (dartType === core.Object) {
    dart._installPropertiesForObject(jsProto);
    return;
  }
  let dartSupertype = dartType.__proto__;
  if (dartSupertype !== installedParent) {
    dart._installProperties(jsProto, dartSupertype, installedParent);
  }
  let dartProto = dartType.prototype;
  dart.copyTheseProperties(jsProto, dartProto, dart.getOwnPropertySymbols(dartProto));
};
dart._installPropertiesForObject = function _installPropertiesForObject(jsProto) {
  let coreObjProto = core.Object.prototype;
  let names = dart.getOwnPropertyNames(coreObjProto);
  for (let i = 0, n = names.length; i < n; i = i + 1) {
    let name = names[i];
    if (name === "constructor") continue;
    let desc = dart.getOwnPropertyDescriptor(coreObjProto, name);
    dart.defineProperty(jsProto, dart.dartx[name], desc);
  }
};
dart._installPropertiesForGlobalObject = function _installPropertiesForGlobalObject(jsProto) {
  dart._installPropertiesForObject(jsProto);
  jsProto[dartx.toString] = function() {
    return this.toString();
  };
  dart.identityEquals == null ? dart.identityEquals = jsProto[dartx._equals] : null;
};
dart._applyExtension = function _applyExtension(jsType, dartExtType) {
  if (jsType == null) return;
  let jsProto = jsType.prototype;
  if (jsProto == null) return;
  if (dartExtType === core.Object) {
    dart._installPropertiesForGlobalObject(jsProto);
    return;
  }
  dart._installProperties(jsProto, dartExtType, jsProto[dart._extensionType]);
  if (dartExtType !== _interceptors.JSFunction) {
    jsProto[dart._extensionType] = dartExtType;
  }
  jsType[dart._methodSig] = dartExtType[dart._methodSig];
  jsType[dart._fieldSig] = dartExtType[dart._fieldSig];
  jsType[dart._getterSig] = dartExtType[dart._getterSig];
  jsType[dart._setterSig] = dartExtType[dart._setterSig];
};
dart.applyExtension = function applyExtension(name, nativeObject) {
  let dartExtType = dart._extensionMap.get(name);
  let jsType = nativeObject.constructor;
  dart._applyExtension(jsType, dartExtType);
};
dart.applyAllExtensions = function applyAllExtensions(global) {
  dart._extensionMap.forEach((dartExtType, name) => dart._applyExtension(global[name], dartExtType));
};
dart.registerExtension = function registerExtension(name, dartExtType) {
  dart._extensionMap.set(name, dartExtType);
  let jsType = dart.global[name];
  dart._applyExtension(jsType, dartExtType);
};
dart.defineExtensionMethods = function defineExtensionMethods(type, memberNames) {
  let proto = type.prototype;
  for (let name of memberNames) {
    proto[dartx[name]] = proto[name];
  }
};
dart.defineExtensionAccessors = function defineExtensionAccessors(type, memberNames) {
  let proto = type.prototype;
  for (let name of memberNames) {
    let member = null;
    let p = proto;
    for (;; p = p.__proto__) {
      member = dart.getOwnPropertyDescriptor(p, name);
      if (member != null) break;
    }
    dart.defineProperty(proto, dartx[name], member);
  }
};
dart.definePrimitiveHashCode = function definePrimitiveHashCode(proto) {
  dart.defineProperty(proto, dart.identityHashCode_, dart.getOwnPropertyDescriptor(proto, $hashCode));
};
dart.setBaseClass = function setBaseClass(derived, base) {
  derived.prototype.__proto__ = base.prototype;
  derived.__proto__ = base;
};
dart.setExtensionBaseClass = function setExtensionBaseClass(dartType, jsType) {
  let dartProto = dartType.prototype;
  dartProto[dart._extensionType] = dartType;
  dartProto.__proto__ = jsType.prototype;
};
dart.addTypeTests = function addTypeTests(ctor, isClass) {
  if (isClass == null) isClass = Symbol("_is_" + ctor.name);
  ctor.prototype[isClass] = true;
  ctor.is = function is_C(obj) {
    return obj != null && (obj[isClass] || dart.is(obj, this));
  };
  ctor.as = function as_C(obj) {
    if (obj == null || obj[isClass]) return obj;
    return dart.as(obj, this, false);
  };
  ctor._check = function check_C(obj) {
    if (obj == null || obj[isClass]) return obj;
    return dart.as(obj, this, true);
  };
};
dart.argumentError = function argumentError(value) {
  dart.throw(new core.ArgumentError.value(value));
};
dart.throwUnimplementedError = function throwUnimplementedError(message) {
  dart.throw(new core.UnimplementedError.new(message));
};
dart.assertFailed = function assertFailed(message, fileUri, line, column, conditionSource) {
  if (fileUri === void 0) fileUri = null;
  if (line === void 0) line = null;
  if (column === void 0) column = null;
  if (conditionSource === void 0) conditionSource = null;
  dart.throw(new _js_helper.AssertionErrorImpl.new(message, fileUri, line, column, conditionSource));
};
dart.throwCyclicInitializationError = function throwCyclicInitializationError(field) {
  if (field === void 0) field = null;
  dart.throw(new core.CyclicInitializationError.new(core.String._check(field)));
};
dart.throwNullValueError = function throwNullValueError() {
  dart.throw(new core.NoSuchMethodError.new(null, new _internal.Symbol.new("<Unexpected Null Value>"), null, null, null));
};
dart.castError = function castError(obj, expectedType, isImplicit) {
  if (isImplicit === void 0) isImplicit = false;
  let actualType = dart.getReifiedType(obj);
  let message = dart._castErrorMessage(actualType, expectedType);
  let error = isImplicit ? new _js_helper.TypeErrorImpl.new(message) : new _js_helper.CastErrorImpl.new(message);
  dart.throw(error);
};
dart._castErrorMessage = function _castErrorMessage(from, to) {
  let fromClass = dart.getGenericClass(from);
  if (fromClass != null) {
    let fromTypeFormals = dart.getGenericTypeFormals(fromClass);
    let fromType = dart.instantiateClass(fromClass, fromTypeFormals);
    let inferrer = new dart._TypeInferrer.new(fromTypeFormals);
    if (dart.test(inferrer.trySubtypeMatch(fromType, to))) {
      let inferredTypes = inferrer.getInferredTypes();
      if (inferredTypes != null) {
        let inferred = dart.instantiateClass(fromClass, inferredTypes);
        return "Type '" + dart.typeName(from) + "' should be '" + dart.typeName(inferred) + "' " + "to implement expected type '" + dart.typeName(to) + "'.";
      }
    }
  }
  return "Expected a value of type '" + dart.typeName(to) + "', " + "but got one of type '" + dart.typeName(from) + "'";
};
dart.getThrown = function getThrown(error) {
  if (error != null) {
    let value = error[dart._thrownValue];
    if (value != null) return value;
  }
  return error;
};
dart.stackTrace = function stackTrace(error) {
  if (!(error instanceof Error)) {
    return new dart._StackTrace.missing(error);
  }
  let trace = error[dart._stackTrace];
  if (trace != null) return trace;
  return error[dart._stackTrace] = new dart._StackTrace.new(error);
};
dart.stackTraceForError = function stackTraceForError(error) {
  return dart.stackTrace(error[dart._jsError]);
};
dart.rethrow = function rethrow_(error) {
  throw error;
};
dart.throw = function throw_(exception) {
  throw new dart.DartError(exception);
};
dart.createErrorWithStack = function createErrorWithStack(exception, trace) {
  if (trace == null) {
    let error = exception[dart._jsError];
    return error != null ? error : new dart.DartError(exception);
  }
  if (dart._StackTrace.is(trace)) {
    let originalError = trace[_jsError$];
    if (core.identical(exception, dart.getThrown(originalError))) {
      return originalError;
    }
  }
  return new dart.RethrownDartError(exception, trace);
};
dart.stackPrint = function stackPrint(error) {
  console.log(error.stack ? error.stack : "No stack trace for: " + error);
};
dart.bind = function bind(obj, name, method) {
  if (obj == null) obj = _interceptors.jsNull;
  if (method == null) method = obj[name];
  let f = method.bind(obj);
  f._boundObject = obj;
  f._boundMethod = method;
  f[dart._runtimeType] = dart.getMethodType(dart.getType(obj), name);
  return f;
};
dart.bindCall = function bindCall(obj, name) {
  if (obj == null) return null;
  let ftype = dart.getMethodType(dart.getType(obj), name);
  if (ftype == null) return null;
  let method = obj[name];
  let f = method.bind(obj);
  f._boundObject = obj;
  f._boundMethod = method;
  f[dart._runtimeType] = ftype;
  return f;
};
dart.gbind = function gbind(f, ...typeArgs) {
  let type = f[dart._runtimeType];
  type.checkBounds(typeArgs);
  let result = (...args) => f.apply(null, typeArgs.concat(args));
  return dart.fn(result, type.instantiate(typeArgs));
};
dart.dloadRepl = function dloadRepl(obj, field) {
  return dart.dload(obj, dart.replNameLookup(obj, field), false);
};
dart.dload = function dload(obj, field, mirrors) {
  if (typeof obj == "function" && field == "call") {
    return obj;
  }
  let f = dart._canonicalMember(obj, field);
  _debugger.trackCall(obj);
  if (f != null) {
    let type = dart.getType(obj);
    if (dart.test(dart.hasField(type, f)) || dart.test(dart.hasGetter(type, f))) return obj[f];
    if (dart.test(dart.hasMethod(type, f))) return dart.bind(obj, f, null);
    if (!mirrors && dart.test(dart.isJsInterop(obj))) {
      return obj[f];
    }
  }
  return dart.noSuchMethod(obj, new dart.InvocationImpl.new(field, [], {isGetter: true}));
};
dart.dloadMirror = function dloadMirror(obj, field) {
  return dart.dload(obj, field, true);
};
dart._stripGenericArguments = function _stripGenericArguments(type) {
  let genericClass = dart.getGenericClass(type);
  if (genericClass != null) return genericClass();
  return type;
};
dart.dputMirror = function dputMirror(obj, field, value) {
  return dart.dput(obj, field, value, true);
};
dart.dputRepl = function dputRepl(obj, field, value) {
  return dart.dput(obj, dart.replNameLookup(obj, field), value, false);
};
dart.dput = function dput(obj, field, value, mirrors) {
  let f = dart._canonicalMember(obj, field);
  _debugger.trackCall(obj);
  if (f != null) {
    let setterType = dart.getSetterType(dart.getType(obj), f);
    if (setterType != null) {
      if (mirrors) setterType = dart._stripGenericArguments(setterType);
      return obj[f] = setterType._check(value);
    }
    if (!mirrors && dart.test(dart.isJsInterop(obj))) {
      return obj[f] = value;
    }
  }
  dart.noSuchMethod(obj, new dart.InvocationImpl.new(field, [value], {isSetter: true}));
  return value;
};
dart._argumentErrors = function _argumentErrors(type, actuals, namedActuals) {
  let actualsCount = actuals.length;
  let required = type.args;
  let requiredCount = required.length;
  if (actualsCount < requiredCount) {
    return "Dynamic call with too few arguments. " + "Expected: " + dart.str(requiredCount) + " Actual: " + dart.str(actualsCount);
  }
  let extras = actualsCount - requiredCount;
  let optionals = type.optionals;
  if (extras > optionals.length) {
    return "Dynamic call with too many arguments. " + "Expected: " + dart.str(requiredCount) + " Actual: " + dart.str(actualsCount);
  }
  let names = null;
  let named = type.named;
  if (namedActuals != null) {
    names = dart.getOwnPropertyNames(namedActuals);
    for (let name of names) {
      if (!named.hasOwnProperty(name)) {
        return "Dynamic call with unexpected named argument '" + dart.str(name) + "'.";
      }
    }
  }
  for (let i = 0; i < requiredCount; i = i + 1) {
    required[i]._check(actuals[i]);
  }
  for (let i = 0; i < extras; i = i + 1) {
    optionals[i]._check(actuals[i + requiredCount]);
  }
  if (names != null) {
    for (let name of names) {
      named[name]._check(namedActuals[name]);
    }
  }
  return null;
};
dart._toSymbolName = function _toSymbolName(symbol) {
  let str = symbol.toString();
  return str.substring(7, str.length - 1);
};
dart._toDisplayName = function _toDisplayName(name) {
  if (name[0] === '_') {
    switch (name) {
      case '_get':
      {
        return '[]';
      }
      case '_set':
      {
        return '[]=';
      }
      case '_negate':
      {
        return 'unary-';
      }
      case '_constructor':
      case '_prototype':
      {
        return name.substring(1);
      }
    }
  }
  return name;
};
dart._dartSymbol = function _dartSymbol(name) {
  return typeof name === "symbol" ? dart.const(new _js_helper.PrivateSymbol.new(dart._toSymbolName(name), name)) : dart.const(new _internal.Symbol.new(dart._toDisplayName(name)));
};
dart._setterSymbol = function _setterSymbol(name) {
  return typeof name === "symbol" ? dart.const(new _js_helper.PrivateSymbol.new(dart._toSymbolName(name) + "=", name)) : dart.const(new _internal.Symbol.new(dart._toDisplayName(name) + "="));
};
dart._checkAndCall = function _checkAndCall(f, ftype, obj, typeArgs, args, named, displayName) {
  _debugger.trackCall(obj);
  let originalTarget = obj === void 0 ? f : obj;
  function callNSM(errorMessage) {
    return dart.noSuchMethod(originalTarget, new dart.InvocationImpl.new(displayName, args, {namedArguments: named, typeArguments: typeArgs, isMethod: true, failureMessage: errorMessage}));
  }
  if (f == null) return callNSM('Dynamic call of null.');
  if (!(f instanceof Function)) {
    if (f != null) {
      originalTarget = f;
      f = dart.bindCall(f, dart._canonicalMember(f, "call"));
      ftype = null;
      displayName = "call";
    }
    if (f == null) return callNSM("Dynamic call of object has no instance method 'call'.");
  }
  if (ftype == null) ftype = f[dart._runtimeType];
  if (ftype == null) {
    if (typeArgs != null) {
      dart.throwTypeError('call to JS object `' + obj + '` with type arguments <' + typeArgs + '> is not supported.');
    }
    if (named != null) args.push(named);
    return f.apply(obj, args);
  }
  if (ftype instanceof Array) ftype = ftype[0];
  if (ftype instanceof dart.GenericFunctionType) {
    let formalCount = ftype.formalCount;
    if (typeArgs == null) {
      typeArgs = ftype.instantiateDefaultBounds();
    } else if (typeArgs.length != formalCount) {
      return callNSM('Dynamic call with incorrect number of type arguments. ' + 'Expected: ' + formalCount + ' Actual: ' + typeArgs.length);
    } else {
      ftype.checkBounds(typeArgs);
    }
    ftype = ftype.instantiate(typeArgs);
  } else if (typeArgs != null) {
    return callNSM('Dynamic call with unexpected type arguments. ' + 'Expected: 0 Actual: ' + typeArgs.length);
  }
  let errorMessage = dart._argumentErrors(ftype, args, named);
  if (errorMessage == null) {
    if (typeArgs != null) args = typeArgs.concat(args);
    if (named != null) args.push(named);
    return f.apply(obj, args);
  }
  return callNSM(errorMessage);
};
dart.dcall = function dcall(f, args, named) {
  return dart._checkAndCall(f, null, void 0, null, args, named, f.name);
};
dart.dgcall = function dgcall(f, typeArgs, args, named) {
  return dart._checkAndCall(f, null, void 0, typeArgs, args, named, "call");
};
dart.replNameLookup = function replNameLookup(object, field) {
  let rawField = field;
  if (typeof field == 'symbol') {
    if (field in object) return field;
    field = field.toString();
    field = field.substring('Symbol('.length, field.length - 1);
  } else if (field.charAt(0) != '_') {
    return field;
  }
  if (field in object) return field;
  let proto = object;
  while (proto !== null) {
    let symbols = Object.getOwnPropertySymbols(proto);
    let target = 'Symbol(' + field + ')';
    for (let s = 0; s < symbols.length; s++) {
      let sym = symbols[s];
      if (target == sym.toString()) return sym;
    }
    proto = proto.__proto__;
  }
  return rawField;
};
dart.callMethod = function callMethod(obj, name, typeArgs, args, named, displayName) {
  if (typeof obj == "function" && name == "call") {
    return dart.dgcall(obj, typeArgs, args, named);
  }
  let symbol = dart._canonicalMember(obj, name);
  if (symbol == null) {
    return dart.noSuchMethod(obj, new dart.InvocationImpl.new(displayName, ListOfObject()._check(args), {isMethod: true}));
  }
  let f = obj != null ? obj[symbol] : null;
  let type = dart.getType(obj);
  let ftype = dart.getMethodType(type, symbol);
  return dart._checkAndCall(f, ftype, obj, typeArgs, args, named, displayName);
};
dart.dsend = function dsend(obj, method, args, named) {
  return dart.callMethod(obj, method, null, args, named, method);
};
dart.dgsend = function dgsend(obj, typeArgs, method, args, named) {
  return dart.callMethod(obj, method, typeArgs, args, named, method);
};
dart.dsendRepl = function dsendRepl(obj, method, args, named) {
  return dart.callMethod(obj, dart.replNameLookup(obj, method), null, args, named, method);
};
dart.dgsendRepl = function dgsendRepl(obj, typeArgs, method, args, named) {
  return dart.callMethod(obj, dart.replNameLookup(obj, method), typeArgs, args, named, method);
};
dart.dindex = function dindex(obj, index) {
  return dart.callMethod(obj, "_get", null, [index], null, "[]");
};
dart.dsetindex = function dsetindex(obj, index, value) {
  return dart.callMethod(obj, "_set", null, [index, value], null, "[]=");
};
dart.is = function instanceOf(obj, type) {
  if (obj == null) {
    return core.identical(type, core.Null) || dart._isTop(type);
  }
  return dart.isSubtypeOf(dart.getReifiedType(obj), type);
};
dart.as = function cast(obj, type, isImplicit) {
  if (obj == null) return obj;
  let actual = dart.getReifiedType(obj);
  if (dart.isSubtypeOf(actual, type)) {
    return obj;
  }
  return dart.castError(obj, type, isImplicit);
};
dart.test = function test(obj) {
  if (obj == null) dart._throwBooleanConversionError();
  return obj;
};
dart.dtest = function dtest(obj) {
  if (!(typeof obj == 'boolean')) dart.booleanConversionFailed(obj);
  return core.bool._check(obj);
};
dart._throwBooleanConversionError = function _throwBooleanConversionError() {
  return dart.throw(new _js_helper.BooleanConversionAssertionError.new());
};
dart.booleanConversionFailed = function booleanConversionFailed(obj) {
  let actual = dart.typeName(dart.getReifiedType(dart.test(core.bool._check(obj))));
  dart.throw(new _js_helper.TypeErrorImpl.new("type '" + actual + "' is not a 'bool' in boolean expression"));
};
dart.asInt = function asInt(obj) {
  if (obj == null) return null;
  if (Math.floor(obj) != obj) {
    dart.castError(obj, core.int, false);
  }
  return obj;
};
dart.notNull = function _notNull(x) {
  if (x == null) dart.throwNullValueError();
  return x;
};
dart._lookupNonTerminal = function _lookupNonTerminal(map, key) {
  let result = map.get(key);
  if (result != null) return result;
  map.set(key, result = new Map());
  return result;
};
dart.constMap = function constMap(K, V, elements) {
  let count = elements[$length];
  let map = dart._lookupNonTerminal(dart.constantMaps, count);
  for (let i = 0; i < count; i = i + 1) {
    map = dart._lookupNonTerminal(map, elements[i]);
  }
  map = dart._lookupNonTerminal(map, dart.wrapType(K));
  let result = map.get(V);
  if (result != null) return core.Map$(K, V)._check(result);
  result = new (_js_helper.ImmutableMap$(K, V)).from(elements);
  map.set(V, result);
  return core.Map$(K, V)._check(result);
};
dart._createImmutableSet = function _createImmutableSet(E, elements) {
  dart._immutableSetConstructor == null ? dart._immutableSetConstructor = dart.getLibrary("dart:collection")._ImmutableSet$ : null;
  return new (dart._immutableSetConstructor(E)).from(elements);
};
dart.constSet = function constSet(E, elements) {
  let count = elements[$length];
  let map = dart._lookupNonTerminal(dart.constantSets, count);
  for (let i = 0; i < count; i = i + 1) {
    map = dart._lookupNonTerminal(map, elements[i]);
  }
  let result = map.get(E);
  if (result != null) return core.Set$(E)._check(result);
  result = dart._createImmutableSet(E, elements);
  map.set(E, result);
  return core.Set$(E)._check(result);
};
dart.dassert = function dassert(value) {
  if (value != null && value[dart._runtimeType] instanceof dart.AbstractFunctionType) {
    value = dart.dcall(value, []);
  }
  return dart.dtest(value);
};
dart.multiKeyPutIfAbsent = function multiKeyPutIfAbsent(map, keys, valueFn) {
  for (let k of keys) {
    let value = map.get(k);
    if (!value) {
      map.set(k, value = new Map());
    }
    map = value;
  }
  if (map.has(dart._value)) return map.get(dart._value);
  let value = valueFn();
  map.set(dart._value, value);
  return value;
};
dart.const = function const_(obj) {
  let names = dart.getOwnNamesAndSymbols(obj);
  let count = names.length;
  let map = dart._lookupNonTerminal(dart.constants, count);
  for (let i = 0; i < count; i++) {
    let name = names[i];
    map = dart._lookupNonTerminal(map, name);
    map = dart._lookupNonTerminal(map, obj[name]);
  }
  let type = dart.getReifiedType(obj);
  let value = map.get(type);
  if (value) return value;
  map.set(type, obj);
  return obj;
};
dart.constList = function constList(elements, elementType) {
  let count = elements.length;
  let map = dart._lookupNonTerminal(dart.constantLists, count);
  for (let i = 0; i < count; i++) {
    map = dart._lookupNonTerminal(map, elements[i]);
  }
  let value = map.get(elementType);
  if (value) return value;
  _interceptors.JSArray$(elementType).unmodifiable(elements);
  map.set(elementType, elements);
  return elements;
};
dart.constFn = function constFn(x) {
  return () => x;
};
dart.extensionSymbol = function extensionSymbol(name) {
  return dartx[name];
};
dart.equals = function equals(x, y) {
  return x == null ? y == null : x[$_equals](y);
};
dart.hashCode = function hashCode(obj) {
  return obj == null ? 0 : obj[$hashCode];
};
dart.toString = function _toString(obj) {
  if (obj == null) return "null";
  if (typeof obj == 'string') return obj;
  return obj[$toString]();
};
dart.str = function str(obj) {
  if (obj == null) return "null";
  if (typeof obj == 'string') return obj;
  return core.String._check(dart.notNull(obj[$toString]()));
};
dart.noSuchMethod = function noSuchMethod(obj, invocation) {
  if (obj == null) dart.defaultNoSuchMethod(obj, invocation);
  return obj[$noSuchMethod](invocation);
};
dart.defaultNoSuchMethod = function defaultNoSuchMethod(obj, i) {
  dart.throw(new core.NoSuchMethodError.withInvocation(obj, i));
};
dart.runtimeType = function runtimeType(obj) {
  return obj == null ? dart.wrapType(core.Null) : obj[dartx.runtimeType];
};
dart._canonicalMember = function _canonicalMember(obj, name) {
  if (typeof name === "symbol") return name;
  if (obj != null && obj[dart._extensionType] != null) {
    return dartx[name];
  }
  if (name == "constructor" || name == "prototype") {
    name = "+" + name;
  }
  return name;
};
dart.loadLibrary = function loadLibrary() {
  return async.Future.value();
};
dart.defineLazy = function defineLazy(to, from) {
  for (let name of dart.getOwnNamesAndSymbols(from)) {
    dart.defineLazyField(to, name, dart.getOwnPropertyDescriptor(from, name));
  }
};
dart.fn = function fn(closure, type) {
  closure[dart._runtimeType] = type;
  return closure;
};
dart.lazyFn = function lazyFn(closure, computeType) {
  dart.defineAccessor(closure, dart._runtimeType, {
    get: () => dart.defineValue(closure, dart._runtimeType, computeType()),
    set: value => dart.defineValue(closure, dart._runtimeType, value),
    configurable: true
  });
  return closure;
};
dart.getFunctionType = function getFunctionType(obj) {
  let args = Array(obj.length).fill(dart.dynamic);
  return dart.fnType(dart.bottom, args, void 0);
};
dart.getReifiedType = function getReifiedType(obj) {
  switch (typeof obj) {
    case "object":
    {
      if (obj == null) return core.Null;
      if (obj instanceof core.Object) {
        return obj.constructor;
      }
      let result = obj[dart._extensionType];
      if (result == null) return dart.jsobject;
      return result;
    }
    case "function":
    {
      let result = obj[dart._runtimeType];
      if (result != null) return result;
      return dart.jsobject;
    }
    case "undefined":
    {
      return core.Null;
    }
    case "number":
    {
      return Math.floor(obj) == obj ? core.int : core.double;
    }
    case "boolean":
    {
      return core.bool;
    }
    case "string":
    {
      return core.String;
    }
    case "symbol":
    default:
    {
      return dart.jsobject;
    }
  }
};
dart.getModuleName = function getModuleName(module) {
  return module[dart._moduleName];
};
dart.getModuleNames = function getModuleNames() {
  return JSArrayOfString().of(Array.from(dart._loadedModules.keys()));
};
dart.getSourceMap = function getSourceMap(moduleName) {
  return dart._loadedSourceMaps.get(moduleName);
};
dart.getModuleLibraries = function getModuleLibraries(name) {
  let module = dart._loadedModules.get(name);
  if (module == null) return null;
  module[dart._moduleName] = name;
  return module;
};
dart.getModulePartMap = function getModulePartMap(name) {
  return dart._loadedPartMaps.get(name);
};
dart.trackLibraries = function trackLibraries(moduleName, libraries, parts, sourceMap) {
  if (typeof parts == 'string') {
    sourceMap = core.String.as(parts);
    parts = {};
  }
  dart._loadedSourceMaps.set(moduleName, sourceMap);
  dart._loadedModules.set(moduleName, libraries);
  dart._loadedPartMaps.set(moduleName, parts);
  dart._libraries = null;
  dart._libraryObjects = null;
  dart._parts = null;
};
dart._computeLibraryMetadata = function _computeLibraryMetadata() {
  dart._libraries = JSArrayOfString().of([]);
  dart._libraryObjects = new (IdentityMapOfString$Object()).new();
  dart._parts = new (IdentityMapOfString$ListOfString()).new();
  let modules = dart.getModuleNames();
  for (let name of modules) {
    let module = dart.getModuleLibraries(name);
    let libraries = dart.getOwnPropertyNames(module)[$cast](core.String);
    dart._libraries[$addAll](libraries);
    for (let library of libraries) {
      dart._libraryObjects[$_set](library, module[library]);
    }
    let partMap = dart.getModulePartMap(name);
    libraries = dart.getOwnPropertyNames(partMap)[$cast](core.String);
    for (let library of libraries) {
      dart._parts[$_set](library, ListOfString().from(partMap[library]));
    }
  }
};
dart.getLibrary = function getLibrary(uri) {
  if (dart._libraryObjects == null) {
    dart._computeLibraryMetadata();
  }
  return dart._libraryObjects[$_get](uri);
};
dart.getLibraries = function getLibraries() {
  if (dart._libraries == null) {
    dart._computeLibraryMetadata();
  }
  return dart._libraries;
};
dart.getParts = function getParts(libraryUri) {
  let t0;
  if (dart._parts == null) {
    dart._computeLibraryMetadata();
  }
  t0 = dart._parts[$_get](libraryUri);
  return t0 == null ? JSArrayOfString().of([]) : t0;
};
dart.polyfill = function polyfill(window) {
  if (window[dart._polyfilled]) return false;
  window[dart._polyfilled] = true;
  if (typeof window.NodeList !== "undefined") {
    window.NodeList.prototype.get = function(i) {
      return this[i];
    };
    window.NamedNodeMap.prototype.get = function(i) {
      return this[i];
    };
    window.DOMTokenList.prototype.get = function(i) {
      return this[i];
    };
    window.HTMLCollection.prototype.get = function(i) {
      return this[i];
    };
    if (typeof window.PannerNode == "undefined") {
      let audioContext;
      if (typeof window.AudioContext == "undefined" && typeof window.webkitAudioContext != "undefined") {
        audioContext = new window.webkitAudioContext();
      } else {
        audioContext = new window.AudioContext();
        window.StereoPannerNode = audioContext.createStereoPanner().constructor;
      }
      window.PannerNode = audioContext.createPanner().constructor;
    }
    if (typeof window.AudioSourceNode == "undefined") {
      window.AudioSourceNode = MediaElementAudioSourceNode.__proto__;
    }
    if (typeof window.FontFaceSet == "undefined") {
      if (typeof window.document.fonts != "undefined") {
        window.FontFaceSet = window.document.fonts.__proto__.constructor;
      }
    }
    if (typeof window.MemoryInfo == "undefined") {
      if (typeof window.performance.memory != "undefined") {
        window.MemoryInfo = window.performance.memory.constructor;
      }
    }
    if (typeof window.Geolocation == "undefined") {
      window.Geolocation == window.navigator.geolocation.constructor;
    }
    if (typeof window.Animation == "undefined") {
      let d = window.document.createElement('div');
      if (typeof d.animate != "undefined") {
        window.Animation = d.animate(d).constructor;
      }
    }
    if (typeof window.SourceBufferList == "undefined") {
      if ('MediaSource' in window) {
        window.SourceBufferList = new window.MediaSource().sourceBuffers.constructor;
      }
    }
    if (typeof window.SpeechRecognition == "undefined") {
      window.SpeechRecognition = window.webkitSpeechRecognition;
      window.SpeechRecognitionError = window.webkitSpeechRecognitionError;
      window.SpeechRecognitionEvent = window.webkitSpeechRecognitionEvent;
    }
  }
  return true;
};
dart.trackProfile = function trackProfile(flag) {
  dart.__trackProfile = flag;
};
dart.setStartAsyncSynchronously = function setStartAsyncSynchronously(value) {
  if (value === void 0) value = true;
  dart.startAsyncSynchronously = value;
};
dart.hotRestart = function hotRestart() {
  dart.hotRestartIteration = dart.notNull(dart.hotRestartIteration) + 1;
  for (let f of dart._resetFields)
    f();
  dart._resetFields[$clear]();
  for (let m of dart._cacheMaps)
    m.clear();
  dart._cacheMaps[$clear]();
  dart.constantMaps.clear();
};
dart._isJsObject = function _isJsObject(obj) {
  return dart.getReifiedType(obj) === dart.jsobject;
};
dart.assertInterop = function assertInterop(F, f) {
  if (!dart._isJsObject(f)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/types.dart", 93, 10, "_isJsObject(f)");
  return f;
};
dart.isDartFunction = function isDartFunction(obj) {
  return obj instanceof Function && obj[dart._runtimeType] != null;
};
dart._warn = function _warn(arg) {
  console.warn(arg);
};
dart.lazyJSType = function lazyJSType(getJSTypeCallback, name) {
  let ret = dart._lazyJSTypes.get(name);
  if (ret == null) {
    ret = new dart.LazyJSType.new(getJSTypeCallback, name);
    dart._lazyJSTypes.set(name, ret);
  }
  return ret;
};
dart.anonymousJSType = function anonymousJSType(name) {
  let ret = dart._anonymousJSTypes.get(name);
  if (ret == null) {
    ret = new dart.AnonymousJSType.new(name);
    dart._anonymousJSTypes.set(name, ret);
  }
  return ret;
};
dart.wrapType = function wrapType(type) {
  if (type.hasOwnProperty(dart._typeObject)) {
    return type[dart._typeObject];
  }
  let result = new dart._Type.new(type);
  type[dart._typeObject] = result;
  return result;
};
dart.unwrapType = function unwrapType(obj) {
  return obj[_type$];
};
dart._memoizeArray = function _memoizeArray(map, arr, create) {
  let len = arr.length;
  map = dart._lookupNonTerminal(map, len);
  for (var i = 0; i < len - 1; ++i) {
    map = dart._lookupNonTerminal(map, arr[i]);
  }
  let result = map.get(arr[len - 1]);
  if (result !== void 0) return result;
  map.set(arr[len - 1], result = create());
  return result;
};
dart._canonicalizeArray = function _canonicalizeArray(array, map) {
  return dart._memoizeArray(map, array, () => array);
};
dart._canonicalizeNamed = function _canonicalizeNamed(named, map) {
  let key = [];
  let names = dart.getOwnPropertyNames(named);
  for (var i = 0; i < names.length; ++i) {
    let name = names[i];
    let type = named[name];
    key.push(name);
    key.push(type);
  }
  return dart._memoizeArray(map, key, () => named);
};
dart._createSmall = function _createSmall(returnType, required) {
  let count = required.length;
  let map = dart._fnTypeSmallMap[count];
  for (var i = 0; i < count; ++i) {
    map = dart._lookupNonTerminal(map, required[i]);
  }
  let result = map.get(returnType);
  if (result !== void 0) return result;
  result = new dart.FunctionType.new(core.Type._check(returnType), required, [], {});
  map.set(returnType, result);
  return result;
};
dart._typeFormalsFromFunction = function _typeFormalsFromFunction(typeConstructor) {
  let str = typeConstructor.toString();
  let hasParens = str[$_get](0) === "(";
  let end = str[$indexOf](hasParens ? ")" : "=>");
  if (hasParens) {
    return str[$substring](1, end)[$split](",")[$map](dart.TypeVariable, n => new dart.TypeVariable.new(n[$trim]()))[$toList]();
  } else {
    return JSArrayOfTypeVariable().of([new dart.TypeVariable.new(str[$substring](0, end)[$trim]())]);
  }
};
dart.fnType = function fnType(returnType, args, extra) {
  return dart.FunctionType.create(returnType, args, extra);
};
dart.gFnType = function gFnType(instantiateFn, typeBounds) {
  return new dart.GenericFunctionType.new(instantiateFn, typeBounds);
};
dart.getFunctionTypeMirror = function getFunctionTypeMirror(type) {
  if (dart.GenericFunctionType.is(type)) {
    let typeArgs = ListOfType().filled(type.formalCount, dart.wrapType(dart.dynamic));
    return type.instantiate(typeArgs);
  }
  return type;
};
dart.isType = function isType(obj) {
  return obj[dart._runtimeType] === core.Type;
};
dart.checkTypeBound = function checkTypeBound(type, bound, name) {
  if (!dart.isSubtypeOf(type, bound)) {
    dart.throwTypeError("type `" + dart.str(type) + "` does not extend `" + dart.str(bound) + "` of `" + name + "`.");
  }
};
dart.typeName = function typeName(type) {
  if (type === void 0) return "undefined type";
  if (type === null) return "null type";
  if (type instanceof dart.DartType) {
    return type.toString();
  }
  let tag = type[dart._runtimeType];
  if (tag === core.Type) {
    let name = type.name;
    let args = dart.getGenericArgs(type);
    if (args == null) return name;
    if (dart.getGenericClass(type) == _interceptors.JSArray$) name = 'List';
    let result = name;
    result += '<';
    for (let i = 0; i < args.length; ++i) {
      if (i > 0) result += ', ';
      result += dart.typeName(args[i]);
    }
    result += '>';
    return result;
  }
  if (tag) return "Not a type: " + tag.name;
  return "JSObject<" + type.name + ">";
};
dart._isFunctionSubtype = function _isFunctionSubtype(ft1, ft2) {
  let ret1 = ft1.returnType;
  let ret2 = ft2.returnType;
  let args1 = ft1.args;
  let args2 = ft2.args;
  if (args1.length > args2.length) {
    return false;
  }
  for (let i = 0; i < args1.length; ++i) {
    if (!dart._isSubtype(args2[i], args1[i])) {
      return false;
    }
  }
  let optionals1 = ft1.optionals;
  let optionals2 = ft2.optionals;
  if (args1.length + optionals1.length < args2.length + optionals2.length) {
    return false;
  }
  let j = 0;
  for (let i = args1.length; i < args2.length; ++i, ++j) {
    if (!dart._isSubtype(args2[i], optionals1[j])) {
      return false;
    }
  }
  for (let i = 0; i < optionals2.length; ++i, ++j) {
    if (!dart._isSubtype(optionals2[i], optionals1[j])) {
      return false;
    }
  }
  let named1 = ft1.named;
  let named2 = ft2.named;
  let names = dart.getOwnPropertyNames(named2);
  for (let i = 0; i < names.length; ++i) {
    let name = names[i];
    let n1 = named1[name];
    let n2 = named2[name];
    if (n1 === void 0) {
      return false;
    }
    if (!dart._isSubtype(n2, n1)) {
      return false;
    }
  }
  return dart._isSubtype(ret1, ret2);
};
dart.isSubtypeOf = function isSubtypeOf(t1, t2) {
  let map = null;
  if (!t1.hasOwnProperty(dart._subtypeCache)) {
    t1[dart._subtypeCache] = map = new Map();
    dart._cacheMaps[$add](map);
  } else {
    map = t1[dart._subtypeCache];
    let result = map.get(t2);
    if (result !== void 0) return result;
  }
  let result = dart._isSubtype(t1, t2);
  map.set(t2, result);
  return result;
};
dart._isBottom = function _isBottom(type) {
  return type == dart.bottom || type == core.Null;
};
dart._isTop = function _isTop(type) {
  if (dart._isFutureOr(type)) {
    return dart._isTop(dart.getGenericArgs(type)[0]);
  }
  return type == core.Object || type == dart.dynamic || type == dart.void;
};
dart._isFutureOr = function _isFutureOr(type) {
  return core.identical(dart.getGenericClass(type), async.FutureOr$);
};
dart._isSubtype = function _isSubtype(t1, t2) {
  if (t1 === t2) {
    return true;
  }
  if (dart._isTop(t2) || dart._isBottom(t1)) {
    return true;
  }
  if (dart._isTop(t1) || dart._isBottom(t2)) {
    return false;
  }
  if (dart._isFutureOr(t1)) {
    let t1TypeArg = dart.getGenericArgs(t1)[0];
    if (dart._isFutureOr(t2)) {
      let t2TypeArg = dart.getGenericArgs(t2)[0];
      return dart._isSubtype(t1TypeArg, t2TypeArg);
    }
    let t1Future = async.Future$(t1TypeArg);
    return dart._isSubtype(t1Future, t2) && dart._isSubtype(t1TypeArg, t2);
  }
  if (dart._isFutureOr(t2)) {
    let t2TypeArg = dart.getGenericArgs(t2)[0];
    let t2Future = async.Future$(t2TypeArg);
    return dart._isSubtype(t1, t2Future) || dart._isSubtype(t1, t2TypeArg);
  }
  if (!(t2 instanceof dart.AbstractFunctionType)) {
    if (t1 instanceof dart.AbstractFunctionType) {
      return t2 === core.Function;
    }
    if (t1 === dart.jsobject && t2 instanceof dart.AnonymousJSType) {
      return true;
    }
    return dart._isInterfaceSubtype(t1, t2);
  }
  if (!(t1 instanceof dart.AbstractFunctionType)) {
    return false;
  }
  if (t1 instanceof dart.GenericFunctionType) {
    if (!(t2 instanceof dart.GenericFunctionType)) {
      return false;
    }
    let formalCount = t1.formalCount;
    if (formalCount !== t2.formalCount) {
      return false;
    }
    let fresh = t2.typeFormals;
    if (t1.hasTypeBounds || t2.hasTypeBounds) {
      let t1Bounds = t1.instantiateTypeBounds(fresh);
      let t2Bounds = t2.instantiateTypeBounds(fresh);
      for (let i = 0; i < formalCount; i++) {
        if (t2Bounds[i] != t1Bounds[i]) {
          return false;
        }
      }
    }
    t1 = t1.instantiate(fresh);
    t2 = t2.instantiate(fresh);
  } else if (t2 instanceof dart.GenericFunctionType) {
    return false;
  }
  return dart._isFunctionSubtype(t1, t2);
};
dart._isInterfaceSubtype = function _isInterfaceSubtype(t1, t2) {
  if (t1 instanceof dart.LazyJSType) t1 = t1.rawJSTypeForCheck();
  if (t2 instanceof dart.LazyJSType) t2 = t2.rawJSTypeForCheck();
  if (t1 === t2) {
    return true;
  }
  if (t1 === core.Object) {
    return false;
  }
  if (t1 === core.Function || t2 === core.Function) {
    return false;
  }
  if (t1 == null) {
    return t2 == core.Object || t2 == dart.dynamic;
  }
  let raw1 = dart.getGenericClass(t1);
  let raw2 = dart.getGenericClass(t2);
  if (raw1 != null && raw1 == raw2) {
    let typeArguments1 = dart.getGenericArgs(t1);
    let typeArguments2 = dart.getGenericArgs(t2);
    if (typeArguments1.length != typeArguments2.length) {
      dart.assertFailed();
    }
    let variances = dart.getGenericArgVariances(t1);
    for (let i = 0; i < typeArguments1.length; ++i) {
      if (variances === void 0 || variances[i] == 1) {
        if (!dart._isSubtype(typeArguments1[i], typeArguments2[i])) {
          return false;
        }
      } else if (variances[i] == 2) {
        if (!dart._isSubtype(typeArguments2[i], typeArguments1[i])) {
          return false;
        }
      } else if (variances[i] == 3) {
        if (!dart._isSubtype(typeArguments1[i], typeArguments2[i]) || !dart._isSubtype(typeArguments2[i], typeArguments1[i])) {
          return false;
        }
      }
    }
    return true;
  }
  if (dart._isInterfaceSubtype(t1.__proto__, t2)) {
    return true;
  }
  let m1 = dart.getMixin(t1);
  if (m1 != null && dart._isInterfaceSubtype(m1, t2)) {
    return true;
  }
  let getInterfaces = dart.getImplements(t1);
  if (getInterfaces) {
    for (let i1 of getInterfaces()) {
      if (dart._isInterfaceSubtype(i1, t2)) {
        return true;
      }
    }
  }
  return false;
};
dart.extractTypeArguments = function extractTypeArguments(T, instance, f) {
  if (instance == null) {
    dart.throw(new core.ArgumentError.new("Cannot extract type of null instance."));
  }
  let type = T;
  if (dart.AbstractFunctionType.is(type) || dart._isFutureOr(type)) {
    dart.throw(new core.ArgumentError.new("Cannot extract from non-class type (" + dart.str(type) + ")."));
  }
  let typeArguments = dart.getGenericArgs(type);
  if (dart.test(typeArguments[$isEmpty])) {
    dart.throw(new core.ArgumentError.new("Cannot extract from non-generic type (" + dart.str(type) + ")."));
  }
  let supertype = dart._getMatchingSupertype(dart.getReifiedType(instance), type);
  if (!(supertype != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/types.dart", 1101, 10, "supertype != null");
  let typeArgs = dart.getGenericArgs(supertype);
  if (!(typeArgs != null && dart.test(typeArgs[$isNotEmpty]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/types.dart", 1103, 10, "typeArgs != null && typeArgs.isNotEmpty");
  return dart.dgcall(f, typeArgs, []);
};
dart._getMatchingSupertype = function _getMatchingSupertype(subtype, supertype) {
  if (core.identical(subtype, supertype)) return supertype;
  if (subtype == null || dart.equals(subtype, core.Object)) return null;
  let subclass = dart.getGenericClass(subtype);
  let superclass = dart.getGenericClass(supertype);
  if (subclass != null && core.identical(subclass, superclass)) {
    return subtype;
  }
  let result = dart._getMatchingSupertype(subtype.__proto__, supertype);
  if (result != null) return result;
  let mixin = dart.getMixin(subtype);
  if (mixin != null) {
    result = dart._getMatchingSupertype(mixin, supertype);
    if (result != null) return result;
  }
  let getInterfaces = dart.getImplements(subtype);
  if (getInterfaces != null) {
    for (let iface of getInterfaces()) {
      result = dart._getMatchingSupertype(iface, supertype);
      if (result != null) return result;
    }
  }
  return null;
};
dart.defineValue = function defineValue(obj, name, value) {
  dart.defineAccessor(obj, name, {value: value, configurable: true, writable: true});
  return value;
};
dart.throwTypeError = function throwTypeError(message) {
  dart.throw(new _js_helper.TypeErrorImpl.new(message));
};
dart.throwInternalError = function throwInternalError(message) {
  throw Error(message);
};
dart.getOwnNamesAndSymbols = function getOwnNamesAndSymbols(obj) {
  let names = dart.getOwnPropertyNames(obj);
  let symbols = dart.getOwnPropertySymbols(obj);
  return names.concat(symbols);
};
dart.safeGetOwnProperty = function safeGetOwnProperty(obj, name) {
  let desc = dart.getOwnPropertyDescriptor(obj, name);
  if (desc != null) return desc.value;
};
dart.defineLazyField = function defineLazyField(to, name, desc) {
  const initializer = desc.get;
  let init = initializer;
  let value = null;
  desc.get = function() {
    if (init == null) return value;
    let f = init;
    init = dart.throwCyclicInitializationError;
    if (f === init) f(name);
    dart._resetFields.push(() => {
      init = initializer;
      value = null;
    });
    try {
      value = f();
      init = null;
      return value;
    } catch (e) {
      init = null;
      value = null;
      throw e;
    }
  };
  desc.configurable = true;
  if (desc.set != null) {
    desc.set = function(x) {
      init = null;
      value = x;
    };
  }
  return dart.defineProperty(to, name, desc);
};
dart.copyTheseProperties = function copyTheseProperties(to, from, names) {
  for (let i = 0, n = names.length; i < n; i = i + 1) {
    let name = names[i];
    if (dart.equals(name, "constructor")) continue;
    dart.copyProperty(to, from, name);
  }
  return to;
};
dart.copyProperty = function copyProperty(to, from, name) {
  let desc = dart.getOwnPropertyDescriptor(from, name);
  if (name == Symbol.iterator) {
    let existing = dart.getOwnPropertyDescriptor(to, name);
    if (existing != null) {
      if (existing.writable) {
        to[name] = desc.value;
      }
      return;
    }
  }
  dart.defineProperty(to, name, desc);
};
dart.export = function exportProperty(to, from, name) {
  return dart.copyProperty(to, from, name);
};
dart.copyProperties = function copyProperties(to, from) {
  return dart.copyTheseProperties(to, from, dart.getOwnNamesAndSymbols(from));
};
dart._polyfilled = Symbol("_polyfilled");
dart.global = (function() {
  var globalState = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : null;
  if (!globalState) {
    globalState = new Function('return this;')();
  }
  dart.polyfill(globalState);
  if (globalState.Error) {
    globalState.Error.stackTraceLimit = Infinity;
  }
  let settings = 'ddcSettings' in globalState ? globalState.ddcSettings : {};
  dart.trackProfile('trackProfile' in settings ? settings.trackProfile : false);
  return globalState;
})();
dart.JsSymbol = Symbol;
dart.libraryPrototype = dart.library;
dart.startAsyncSynchronously = true;
dart._cacheMaps = [];
dart._resetFields = [];
dart.hotRestartIteration = 0;
dart.addAsyncCallback = function() {
};
dart.removeAsyncCallback = function() {
};
dart.defineProperty = Object.defineProperty;
dart.defineAccessor = Object.defineProperty;
dart.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
dart.getOwnPropertyNames = Object.getOwnPropertyNames;
dart.getOwnPropertySymbols = Object.getOwnPropertySymbols;
dart.getPrototypeOf = Object.getPrototypeOf;
dart._mixin = Symbol("mixin");
dart.mixinOn = Symbol("mixinOn");
dart.implements = Symbol("implements");
dart._typeArguments = Symbol("typeArguments");
dart._variances = Symbol("variances");
dart._originalDeclaration = Symbol("originalDeclaration");
dart.mixinNew = Symbol("dart.mixinNew");
dart._constructorSig = Symbol("sigCtor");
dart._methodSig = Symbol("sigMethod");
dart._fieldSig = Symbol("sigField");
dart._getterSig = Symbol("sigGetter");
dart._setterSig = Symbol("sigSetter");
dart._staticMethodSig = Symbol("sigStaticMethod");
dart._staticFieldSig = Symbol("sigStaticField");
dart._staticGetterSig = Symbol("sigStaticGetter");
dart._staticSetterSig = Symbol("sigStaticSetter");
dart._genericTypeCtor = Symbol("genericType");
dart._libraryUri = Symbol("libraryUri");
dart._extensionType = Symbol("extensionType");
dart.dartx = dartx;
dart._extensionMap = new Map();
dart.isFuture = Symbol("_is_Future");
dart.isIterable = Symbol("_is_Iterable");
dart.isList = Symbol("_is_List");
dart.isMap = Symbol("_is_Map");
dart.isStream = Symbol("_is_Stream");
dart.isStreamSubscription = Symbol("_is_StreamSubscription");
dart.identityEquals = null;
dart._runtimeType = Symbol("_runtimeType");
dart._moduleName = Symbol("_moduleName");
dart._loadedModules = new Map();
dart._loadedPartMaps = new Map();
dart._loadedSourceMaps = new Map();
dart._libraries = null;
dart._libraryObjects = null;
dart._parts = null;
dart.metadata = Symbol("metadata");
dart._lazyJSTypes = new Map();
dart._anonymousJSTypes = new Map();
core.Object = class Object {
  static is(o) {
    return true;
  }
  static as(o) {
    return o;
  }
  static _check(o) {
    return o;
  }
  _equals(other) {
    return this === other;
  }
  get hashCode() {
    return core.identityHashCode(this);
  }
  toString() {
    return "Instance of '" + dart.typeName(dart.getReifiedType(this)) + "'";
  }
  noSuchMethod(invocation) {
    return dart.defaultNoSuchMethod(this, invocation);
  }
  get runtimeType() {
    return dart.wrapType(dart.getReifiedType(this));
  }
};
(core.Object.new = function() {
  ;
}).prototype = core.Object.prototype;
;
dart.setGetterSignature(core.Object, () => ({
  __proto__: Object.create(null),
  hashCode: core.int,
  [$hashCode]: core.int,
  runtimeType: core.Type,
  [$runtimeType]: core.Type
}));
dart.setLibraryUri(core.Object, "dart:core");
dart.lazyFn(core.Object, () => core.Type);
dart.defineExtensionMethods(core.Object, ['_equals', 'toString', 'noSuchMethod']);
dart.defineExtensionAccessors(core.Object, ['hashCode', 'runtimeType']);
dart.registerExtension("Object", core.Object);
dart.DartType = class DartType extends core.Object {
  get name() {
    return this[$toString]();
  }
  is(object) {
    return dart.is(object, this);
  }
  as(object) {
    return dart.as(object, this, false);
  }
  _check(object) {
    return dart.as(object, this, true);
  }
};
(dart.DartType.new = function() {
  ;
}).prototype = dart.DartType.prototype;
;
dart.DartType[dart.implements] = () => [core.Type];
;
dart.setGetterSignature(dart.DartType, () => ({
  __proto__: dart.getGetters(dart.DartType.__proto__),
  name: core.String
}));
dart.setLibraryUri(dart.DartType, "dart:_runtime");
dart.DynamicType = class DynamicType extends dart.DartType {
  toString() {
    return "dynamic";
  }
  is(object) {
    return true;
  }
  as(object) {
    return object;
  }
  _check(object) {
    return object;
  }
};
(dart.DynamicType.new = function() {
  ;
}).prototype = dart.DynamicType.prototype;
;
dart.setLibraryUri(dart.DynamicType, "dart:_runtime");
dart.defineExtensionMethods(dart.DynamicType, ['toString']);
dart.dynamic = new dart.DynamicType.new();
dart.VoidType = class VoidType extends dart.DartType {
  toString() {
    return "void";
  }
};
(dart.VoidType.new = function() {
  ;
}).prototype = dart.VoidType.prototype;
;
dart.setLibraryUri(dart.VoidType, "dart:_runtime");
dart.defineExtensionMethods(dart.VoidType, ['toString']);
dart.void = new dart.VoidType.new();
dart.JSObjectType = class JSObjectType extends dart.DartType {
  toString() {
    return "NativeJavaScriptObject";
  }
};
(dart.JSObjectType.new = function() {
  ;
}).prototype = dart.JSObjectType.prototype;
;
dart.setLibraryUri(dart.JSObjectType, "dart:_runtime");
dart.defineExtensionMethods(dart.JSObjectType, ['toString']);
dart.jsobject = new dart.JSObjectType.new();
dart._typeObject = Symbol("typeObject");
dart._fnTypeNamedArgMap = new Map();
dart._fnTypeArrayArgMap = new Map();
dart._fnTypeTypeMap = new Map();
dart._fnTypeSmallMap = [new Map(), new Map(), new Map()];
dart._subtypeCache = Symbol("_subtypeCache");
dart._thrownValue = Symbol("_thrownValue");
dart._jsError = Symbol("_jsError");
dart._stackTrace = Symbol("_stackTrace");
dart.DartError = class DartError extends Error {
  constructor(error) {
    super();
    if (error == null) error = new core.NullThrownError.new();
    this[dart._thrownValue] = error;
    if (error != null && typeof error == "object" && error[dart._jsError] == null) {
      error[dart._jsError] = this;
    }
  }
  get message() {
    return dart.toString(this[dart._thrownValue]);
  }
};
dart.RethrownDartError = class RethrownDartError extends dart.DartError {
  constructor(error, stackTrace) {
    super(error);
    this[dart._stackTrace] = stackTrace;
  }
  get message() {
    return super.message + "\n    " + dart.toString(this[dart._stackTrace]) + "\n";
  }
};
dart.constantMaps = new Map();
dart.constantSets = new Map();
dart._immutableSetConstructor = null;
dart._value = Symbol("_value");
dart.constants = new Map();
dart.constantLists = new Map();
dart.identityHashCode_ = Symbol("_identityHashCode");
dart.JsIterator = class JsIterator {
  constructor(dartIterator) {
    this.dartIterator = dartIterator;
  }
  next() {
    let i = this.dartIterator;
    let done = !i.moveNext();
    return {done: done, value: done ? void 0 : i.current};
  }
};
dart.defineLazy(dart, {
  /*dart.bottom*/get bottom() {
    return core.Null;
  }
});
const _rawJSType = dart.privateName(dart, "_rawJSType");
const _getRawJSTypeFn$ = dart.privateName(dart, "_getRawJSTypeFn");
const _dartName$ = dart.privateName(dart, "_dartName");
const _getRawJSType = dart.privateName(dart, "_getRawJSType");
dart.LazyJSType = class LazyJSType extends dart.DartType {
  toString() {
    let raw = this[_getRawJSType]();
    return raw != null ? dart.typeName(raw) : "JSObject<" + this[_dartName$] + ">";
  }
  [_getRawJSType]() {
    let raw = this[_rawJSType];
    if (raw != null) return raw;
    try {
      raw = this[_getRawJSTypeFn$]();
    } catch (e$) {
      let e = dart.getThrown(e$);
    }
    if (raw == null) {
      dart._warn("Cannot find native JavaScript type (" + this[_dartName$] + ") for type check");
    } else {
      this[_rawJSType] = raw;
      this[_getRawJSTypeFn$] = null;
    }
    return raw;
  }
  rawJSTypeForCheck() {
    let t1;
    t1 = this[_getRawJSType]();
    return t1 == null ? dart.jsobject : t1;
  }
  isRawJSType(obj) {
    let raw = this[_getRawJSType]();
    if (raw != null) return obj instanceof raw;
    return dart._isJsObject(obj);
  }
  is(obj) {
    return this.isRawJSType(obj) || dart.is(obj, this);
  }
  as(obj) {
    return obj == null || this.is(obj) ? obj : dart.castError(obj, this, false);
  }
  _check(obj) {
    return obj == null || this.is(obj) ? obj : dart.castError(obj, this, true);
  }
};
(dart.LazyJSType.new = function(_getRawJSTypeFn, _dartName) {
  this[_rawJSType] = null;
  this[_getRawJSTypeFn$] = _getRawJSTypeFn;
  this[_dartName$] = _dartName;
  ;
}).prototype = dart.LazyJSType.prototype;
;
;
dart.setLibraryUri(dart.LazyJSType, "dart:_runtime");
;
dart.defineExtensionMethods(dart.LazyJSType, ['toString']);
dart.AnonymousJSType = class AnonymousJSType extends dart.DartType {
  toString() {
    return this[_dartName$];
  }
  is(obj) {
    return dart._isJsObject(obj) || dart.is(obj, this);
  }
  as(obj) {
    return obj == null || dart._isJsObject(obj) ? obj : dart.as(obj, this, false);
  }
  _check(obj) {
    return obj == null || dart._isJsObject(obj) ? obj : dart.as(obj, this, true);
  }
};
(dart.AnonymousJSType.new = function(_dartName) {
  this[_dartName$] = _dartName;
  ;
}).prototype = dart.AnonymousJSType.prototype;
;
dart.setLibraryUri(dart.AnonymousJSType, "dart:_runtime");
;
dart.defineExtensionMethods(dart.AnonymousJSType, ['toString']);
dart.BottomType = class BottomType extends dart.DartType {
  toString() {
    return "bottom";
  }
};
(dart.BottomType.new = function() {
  ;
}).prototype = dart.BottomType.prototype;
;
dart.setLibraryUri(dart.BottomType, "dart:_runtime");
dart.defineExtensionMethods(dart.BottomType, ['toString']);
core.Type = class Type extends core.Object {};
(core.Type.new = function() {
  ;
}).prototype = core.Type.prototype;
;
dart.setLibraryUri(core.Type, "dart:core");
dart._Type = class _Type extends core.Type {
  toString() {
    return dart.typeName(this[_type$]);
  }
  get runtimeType() {
    return dart.wrapType(core.Type);
  }
};
(dart._Type.new = function(_type) {
  this[_type$] = _type;
  ;
}).prototype = dart._Type.prototype;
;
dart.setLibraryUri(dart._Type, "dart:_runtime");
;
dart.defineExtensionMethods(dart._Type, ['toString']);
dart.defineExtensionAccessors(dart._Type, ['runtimeType']);
dart.AbstractFunctionType = class AbstractFunctionType extends dart.DartType {};
(dart.AbstractFunctionType.new = function() {
  ;
}).prototype = dart.AbstractFunctionType.prototype;
;
dart.setLibraryUri(dart.AbstractFunctionType, "dart:_runtime");
const _stringValue = dart.privateName(dart, "_stringValue");
const _process = dart.privateName(dart, "_process");
const returnType$ = dart.privateName(dart, "FunctionType.returnType");
const args$ = dart.privateName(dart, "FunctionType.args");
const optionals$ = dart.privateName(dart, "FunctionType.optionals");
const named$ = dart.privateName(dart, "FunctionType.named");
const metadata = dart.privateName(dart, "FunctionType.metadata");
dart.FunctionType = class FunctionType extends dart.AbstractFunctionType {
  get returnType() {
    return this[returnType$];
  }
  set returnType(value) {
    super.returnType = value;
  }
  get args() {
    return this[args$];
  }
  set args(value) {
    this[args$] = value;
  }
  get optionals() {
    return this[optionals$];
  }
  set optionals(value) {
    this[optionals$] = value;
  }
  get named() {
    return this[named$];
  }
  set named(value) {
    super.named = value;
  }
  get metadata() {
    return this[metadata];
  }
  set metadata(value) {
    this[metadata] = value;
  }
  static create(returnType, args, extra) {
    if (extra == null && args.length < 3) {
      return dart._createSmall(returnType, args);
    }
    args = dart._canonicalizeArray(args, dart._fnTypeArrayArgMap);
    let keys = null;
    let create = null;
    if (extra == null) {
      keys = [returnType, args];
      create = () => new dart.FunctionType.new(core.Type._check(returnType), args, [], {});
    } else if (extra instanceof Array) {
      let optionals = dart._canonicalizeArray(extra, dart._fnTypeArrayArgMap);
      keys = [returnType, args, optionals];
      create = () => new dart.FunctionType.new(core.Type._check(returnType), args, optionals, {});
    } else {
      let named = dart._canonicalizeNamed(extra, dart._fnTypeNamedArgMap);
      keys = [returnType, args, named];
      create = () => new dart.FunctionType.new(core.Type._check(returnType), args, [], named);
    }
    return dart._memoizeArray(dart._fnTypeTypeMap, keys, create);
  }
  [_process](array) {
    let result = [];
    for (let i = 0; i < array.length; i = i + 1) {
      let arg = array[i];
      if (arg instanceof Array) {
        this.metadata.push(arg.slice(1));
        result.push(arg[0]);
      } else {
        this.metadata.push([]);
        result.push(arg);
      }
    }
    return result;
  }
  toString() {
    return this.name;
  }
  get requiredParameterCount() {
    return this.args[$length];
  }
  get positionalParameterCount() {
    return dart.notNull(this.args[$length]) + dart.notNull(this.optionals[$length]);
  }
  getPositionalParameter(i) {
    let n = this.args[$length];
    return dart.notNull(i) < dart.notNull(n) ? this.args[$_get](i) : this.optionals[$_get](dart.notNull(i) + dart.notNull(n));
  }
  getNamedParameters() {
    let result = new (IdentityMapOfString$Object()).new();
    let names = dart.getOwnPropertyNames(this.named);
    names.sort();
    for (let i = 0; i < names.length; i = i + 1) {
      let name = names[i];
      result[$_set](name, this.named[name]);
    }
    return result;
  }
  get name() {
    if (this[_stringValue] != null) return this[_stringValue];
    let buffer = "(";
    for (let i = 0; i < this.args.length; i = i + 1) {
      if (i > 0) {
        buffer = buffer + ", ";
      }
      buffer = buffer + dart.typeName(this.args[i]);
    }
    if (this.optionals.length > 0) {
      if (this.args.length > 0) buffer = buffer + ", ";
      buffer = buffer + "[";
      for (let i = 0; i < this.optionals.length; i = i + 1) {
        if (i > 0) {
          buffer = buffer + ", ";
        }
        buffer = buffer + dart.typeName(this.optionals[i]);
      }
      buffer = buffer + "]";
    } else if (Object.keys(this.named).length > 0) {
      if (this.args.length > 0) buffer = buffer + ", ";
      buffer = buffer + "{";
      let names = dart.getOwnPropertyNames(this.named);
      names.sort();
      for (let i = 0; i < names.length; i = i + 1) {
        if (i > 0) {
          buffer = buffer + ", ";
        }
        let typeNameString = dart.typeName(this.named[names[i]]);
        buffer = buffer + (typeNameString + " " + dart.str(names[i]));
      }
      buffer = buffer + "}";
    }
    let returnTypeName = dart.typeName(this.returnType);
    buffer = buffer + (") => " + returnTypeName);
    this[_stringValue] = buffer;
    return buffer;
  }
  is(obj) {
    if (typeof obj == "function") {
      let actual = obj[dart._runtimeType];
      return actual == null || dart.isSubtypeOf(actual, this);
    }
    return false;
  }
  as(obj, isImplicit) {
    if (isImplicit === void 0) isImplicit = false;
    if (obj == null) return obj;
    if (typeof obj == "function") {
      let actual = obj[dart._runtimeType];
      if (actual == null || dart.isSubtypeOf(actual, this)) {
        return obj;
      }
    }
    return dart.castError(obj, this, isImplicit);
  }
  _check(obj) {
    return this.as(obj, true);
  }
};
(dart.FunctionType.new = function(returnType, args, optionals, named) {
  this[metadata] = [];
  this[_stringValue] = null;
  this[returnType$] = returnType;
  this[args$] = args;
  this[optionals$] = optionals;
  this[named$] = named;
  this.args = this[_process](this.args);
  this.optionals = this[_process](this.optionals);
}).prototype = dart.FunctionType.prototype;
;
;
dart.setGetterSignature(dart.FunctionType, () => ({
  __proto__: dart.getGetters(dart.FunctionType.__proto__),
  requiredParameterCount: core.int,
  positionalParameterCount: core.int
}));
dart.setLibraryUri(dart.FunctionType, "dart:_runtime");
;
dart.defineExtensionMethods(dart.FunctionType, ['toString']);
const name$ = dart.privateName(dart, "TypeVariable.name");
dart.TypeVariable = class TypeVariable extends dart.DartType {
  get name() {
    return this[name$];
  }
  set name(value) {
    super.name = value;
  }
  toString() {
    return this.name;
  }
};
(dart.TypeVariable.new = function(name) {
  this[name$] = name;
  ;
}).prototype = dart.TypeVariable.prototype;
;
dart.setLibraryUri(dart.TypeVariable, "dart:_runtime");
;
dart.defineExtensionMethods(dart.TypeVariable, ['toString']);
dart.Variance = class Variance extends core.Object {};
(dart.Variance.new = function() {
  ;
}).prototype = dart.Variance.prototype;
;
dart.setLibraryUri(dart.Variance, "dart:_runtime");
dart.defineLazy(dart.Variance, {
  /*dart.Variance.unrelated*/get unrelated() {
    return 0;
  },
  /*dart.Variance.covariant*/get covariant() {
    return 1;
  },
  /*dart.Variance.contravariant*/get contravariant() {
    return 2;
  },
  /*dart.Variance.invariant*/get invariant() {
    return 3;
  }
});
const _typeFormals = dart.privateName(dart, "_typeFormals");
const _instantiateTypeBounds$ = dart.privateName(dart, "_instantiateTypeBounds");
const _instantiateTypeParts = dart.privateName(dart, "_instantiateTypeParts");
const formalCount = dart.privateName(dart, "GenericFunctionType.formalCount");
dart.GenericFunctionType = class GenericFunctionType extends dart.AbstractFunctionType {
  get formalCount() {
    return this[formalCount];
  }
  set formalCount(value) {
    super.formalCount = value;
  }
  get typeFormals() {
    if (this[_typeFormals] != null) return this[_typeFormals];
    return this[_typeFormals] = dart._typeFormalsFromFunction(this[_instantiateTypeParts]);
  }
  get hasTypeBounds() {
    return this[_instantiateTypeBounds$] != null;
  }
  checkBounds(typeArgs) {
    if (!dart.dtest(this.hasTypeBounds)) return;
    let bounds = this.instantiateTypeBounds(typeArgs);
    let typeFormals = this.typeFormals;
    for (let i = 0; i < dart.notNull(typeArgs[$length]); i = i + 1) {
      dart.checkTypeBound(typeArgs[$_get](i), bounds[$_get](i), typeFormals[$_get](i).name);
    }
  }
  instantiate(typeArgs) {
    let parts = this[_instantiateTypeParts].apply(null, typeArgs);
    return dart.FunctionType.create(parts[0], parts[1], parts[2]);
  }
  instantiateTypeBounds(typeArgs) {
    if (!dart.dtest(this.hasTypeBounds)) {
      return core.List.filled(this.formalCount, dart.dynamic);
    }
    return this[_instantiateTypeBounds$].apply(null, typeArgs);
  }
  toString() {
    let s = "<";
    let typeFormals = this.typeFormals;
    let typeBounds = this.instantiateTypeBounds(typeFormals);
    for (let i = 0, n = typeFormals[$length]; i < dart.notNull(n); i = i + 1) {
      if (i !== 0) s = s + ", ";
      s = s + typeFormals[i].name;
      let bound = typeBounds[$_get](i);
      if (bound !== dart.dynamic && bound !== core.Object) {
        s = s + (" extends " + dart.str(bound));
      }
    }
    s = s + (">" + dart.notNull(dart.toString(this.instantiate(typeFormals))));
    return s;
  }
  instantiateDefaultBounds() {
    let typeFormals = this.typeFormals;
    let all = new (IdentityMapOfObject$int()).new();
    let defaults = ListOfObject().new(typeFormals[$length]);
    let partials = new (IdentityMapOfTypeVariable$Object()).new();
    let typeBounds = this.instantiateTypeBounds(typeFormals);
    for (let i = 0; i < dart.notNull(typeFormals[$length]); i = i + 1) {
      let typeFormal = typeFormals[$_get](i);
      let bound = typeBounds[$_get](i);
      all[$_set](typeFormal, i);
      if (core.identical(bound, dart.dynamic)) {
        defaults[$_set](i, bound);
      } else {
        defaults[$_set](i, typeFormal);
        partials[$_set](typeFormal, bound);
      }
    }
    function hasFreeFormal(t) {
      if (dart.test(partials[$containsKey](t))) return true;
      let typeArgs = dart.getGenericArgs(t);
      if (typeArgs != null) return typeArgs[$any](hasFreeFormal);
      if (dart.GenericFunctionType.is(t)) {
        return hasFreeFormal(t.instantiate(t.typeFormals));
      }
      if (dart.FunctionType.is(t)) {
        return dart.test(hasFreeFormal(t.returnType)) || dart.test(t.args[$any](hasFreeFormal));
      }
      return false;
    }
    let hasProgress = true;
    while (hasProgress) {
      hasProgress = false;
      for (let typeFormal of partials[$keys]) {
        let partialBound = partials[$_get](typeFormal);
        if (!dart.test(hasFreeFormal(partialBound))) {
          let index = all[$_get](typeFormal);
          defaults[$_set](index, this.instantiateTypeBounds(defaults)[$_get](index));
          partials[$remove](typeFormal);
          hasProgress = true;
          break;
        }
      }
    }
    if (dart.test(partials[$isNotEmpty])) {
      dart.throwTypeError("Instantiate to bounds failed for type with " + "recursive generic bounds: " + dart.typeName(this) + ". " + "Try passing explicit type arguments.");
    }
    return defaults;
  }
  is(obj) {
    if (typeof obj == "function") {
      let actual = obj[dart._runtimeType];
      return actual != null && dart.isSubtypeOf(actual, this);
    }
    return false;
  }
  as(obj) {
    if (obj == null || this.is(obj)) return obj;
    return dart.castError(obj, this, false);
  }
  _check(obj) {
    if (obj == null || this.is(obj)) return obj;
    return dart.castError(obj, this, true);
  }
};
(dart.GenericFunctionType.new = function(instantiateTypeParts, _instantiateTypeBounds) {
  this[_typeFormals] = null;
  this[_instantiateTypeBounds$] = _instantiateTypeBounds;
  this[_instantiateTypeParts] = instantiateTypeParts;
  this[formalCount] = instantiateTypeParts.length;
  ;
}).prototype = dart.GenericFunctionType.prototype;
;
;
dart.setGetterSignature(dart.GenericFunctionType, () => ({
  __proto__: dart.getGetters(dart.GenericFunctionType.__proto__),
  typeFormals: core.List$(dart.TypeVariable),
  hasTypeBounds: dart.dynamic
}));
dart.setLibraryUri(dart.GenericFunctionType, "dart:_runtime");
;
dart.defineExtensionMethods(dart.GenericFunctionType, ['toString']);
const _typeVariables = dart.privateName(dart, "_typeVariables");
const _isSubtypeMatch = dart.privateName(dart, "_isSubtypeMatch");
const _constrainLower = dart.privateName(dart, "_constrainLower");
const _constrainUpper = dart.privateName(dart, "_constrainUpper");
const _isFunctionSubtypeMatch = dart.privateName(dart, "_isFunctionSubtypeMatch");
const _isInterfaceSubtypeMatch = dart.privateName(dart, "_isInterfaceSubtypeMatch");
const _isNull = dart.privateName(dart, "_isNull");
const _isTop$ = dart.privateName(dart, "_isTop");
dart._TypeInferrer = class _TypeInferrer extends core.Object {
  getInferredTypes() {
    let result = JSArrayOfObject().of([]);
    for (let constraint of this[_typeVariables][$values]) {
      if (constraint.lower != null) {
        result[$add](constraint.lower);
      } else if (constraint.upper != null) {
        result[$add](constraint.upper);
      } else {
        return null;
      }
    }
    return result;
  }
  trySubtypeMatch(subtype, supertype) {
    return this[_isSubtypeMatch](subtype, supertype);
  }
  [_constrainLower](parameter, lower) {
    this[_typeVariables][$_get](parameter)[_constrainLower](lower);
  }
  [_constrainUpper](parameter, upper) {
    this[_typeVariables][$_get](parameter)[_constrainUpper](upper);
  }
  [_isFunctionSubtypeMatch](subtype, supertype) {
    if (dart.notNull(subtype.requiredParameterCount) > dart.notNull(supertype.requiredParameterCount)) {
      return false;
    }
    if (dart.notNull(subtype.positionalParameterCount) < dart.notNull(supertype.positionalParameterCount)) {
      return false;
    }
    if (!dart.VoidType.is(supertype.returnType) && !dart.test(this[_isSubtypeMatch](subtype.returnType, supertype.returnType))) {
      return false;
    }
    for (let i = 0, n = supertype.positionalParameterCount; i < dart.notNull(n); i = i + 1) {
      if (!dart.test(this[_isSubtypeMatch](supertype.getPositionalParameter(i), subtype.getPositionalParameter(i)))) {
        return false;
      }
    }
    let supertypeNamed = supertype.getNamedParameters();
    let subtypeNamed = supertype.getNamedParameters();
    for (let name of supertypeNamed[$keys]) {
      let subtypeParamType = subtypeNamed[$_get](name);
      if (subtypeParamType == null) return false;
      if (!dart.test(this[_isSubtypeMatch](supertypeNamed[$_get](name), subtypeParamType))) {
        return false;
      }
    }
    return true;
  }
  [_isInterfaceSubtypeMatch](subtype, supertype) {
    let matchingSupertype = dart._getMatchingSupertype(subtype, supertype);
    if (matchingSupertype == null) return false;
    let matchingTypeArgs = dart.getGenericArgs(matchingSupertype);
    let supertypeTypeArgs = dart.getGenericArgs(supertype);
    for (let i = 0; i < dart.notNull(supertypeTypeArgs[$length]); i = i + 1) {
      if (!dart.test(this[_isSubtypeMatch](matchingTypeArgs[$_get](i), supertypeTypeArgs[$_get](i)))) {
        return false;
      }
    }
    return true;
  }
  [_isNull](type) {
    return core.identical(type, core.Null);
  }
  [_isSubtypeMatch](subtype, supertype) {
    if (dart.TypeVariable.is(subtype) && dart.test(this[_typeVariables][$containsKey](subtype))) {
      this[_constrainUpper](subtype, supertype);
      return true;
    }
    if (dart.TypeVariable.is(supertype) && dart.test(this[_typeVariables][$containsKey](supertype))) {
      this[_constrainLower](supertype, subtype);
      return true;
    }
    if (core.identical(subtype, supertype)) return true;
    if (dart.test(this[_isTop$](supertype))) return true;
    if (dart.test(this[_isNull](subtype))) return true;
    if (dart._isFutureOr(subtype)) {
      let subtypeArg = dart.getGenericArgs(subtype)[$_get](0);
      if (dart._isFutureOr(supertype)) {
        let supertypeArg = dart.getGenericArgs(supertype)[$_get](0);
        return this[_isSubtypeMatch](subtypeArg, supertypeArg);
      }
      let subtypeFuture = async.Future$(subtypeArg);
      return dart.test(this[_isSubtypeMatch](subtypeFuture, supertype)) && dart.test(this[_isSubtypeMatch](subtypeArg, supertype));
    }
    if (dart._isFutureOr(supertype)) {
      let supertypeArg = dart.getGenericArgs(supertype)[$_get](0);
      let supertypeFuture = async.Future$(supertypeArg);
      return dart.test(this[_isSubtypeMatch](subtype, supertypeFuture)) || dart.test(this[_isSubtypeMatch](subtype, supertypeArg));
    }
    if (dart.TypeVariable.is(subtype)) {
      return dart.TypeVariable.is(supertype) && subtype == supertype;
    }
    if (dart.GenericFunctionType.is(subtype)) {
      if (dart.GenericFunctionType.is(supertype)) {
        let formalCount = subtype.formalCount;
        if (formalCount != supertype.formalCount) return false;
        let fresh = supertype.typeFormals;
        let t1Bounds = subtype.instantiateTypeBounds(fresh);
        let t2Bounds = supertype.instantiateTypeBounds(fresh);
        for (let i = 0; i < dart.notNull(formalCount); i = i + 1) {
          if (!dart.test(this[_isSubtypeMatch](t2Bounds[$_get](i), t1Bounds[$_get](i)))) {
            return false;
          }
        }
        return this[_isFunctionSubtypeMatch](subtype.instantiate(fresh), supertype.instantiate(fresh));
      } else {
        return false;
      }
    } else if (dart.GenericFunctionType.is(supertype)) {
      return false;
    }
    if (dart.FunctionType.is(subtype)) {
      if (!dart.FunctionType.is(supertype)) {
        if (core.identical(supertype, core.Function) || core.identical(supertype, core.Object)) {
          return true;
        } else {
          return false;
        }
      }
      if (dart.FunctionType.is(supertype)) {
        return this[_isFunctionSubtypeMatch](subtype, supertype);
      }
    }
    return this[_isInterfaceSubtypeMatch](subtype, supertype);
  }
  [_isTop$](type) {
    return core.identical(type, dart.dynamic) || core.identical(type, dart.void) || core.identical(type, core.Object);
  }
};
(dart._TypeInferrer.new = function(typeVariables) {
  this[_typeVariables] = LinkedHashMapOfTypeVariable$TypeConstraint().fromIterables(typeVariables, typeVariables[$map](dart.TypeConstraint, _ => new dart.TypeConstraint.new()));
  ;
}).prototype = dart._TypeInferrer.prototype;
;
;
dart.setLibraryUri(dart._TypeInferrer, "dart:_runtime");
;
const lower = dart.privateName(dart, "TypeConstraint.lower");
const upper = dart.privateName(dart, "TypeConstraint.upper");
dart.TypeConstraint = class TypeConstraint extends core.Object {
  get lower() {
    return this[lower];
  }
  set lower(value) {
    this[lower] = value;
  }
  get upper() {
    return this[upper];
  }
  set upper(value) {
    this[upper] = value;
  }
  [_constrainLower](type) {
    if (this.lower != null) {
      if (dart.isSubtypeOf(this.lower, type)) {
        return;
      }
      if (!dart.isSubtypeOf(type, this.lower)) {
        type = core.Null;
      }
    }
    this.lower = type;
  }
  [_constrainUpper](type) {
    if (this.upper != null) {
      if (dart.isSubtypeOf(type, this.upper)) {
        return;
      }
      if (!dart.isSubtypeOf(this.upper, type)) {
        type = core.Object;
      }
    }
    this.upper = type;
  }
  toString() {
    return dart.typeName(this.lower) + " <: <type> <: " + dart.typeName(this.upper);
  }
};
(dart.TypeConstraint.new = function() {
  this[lower] = null;
  this[upper] = null;
  ;
}).prototype = dart.TypeConstraint.prototype;
;
;
dart.setLibraryUri(dart.TypeConstraint, "dart:_runtime");
;
dart.defineExtensionMethods(dart.TypeConstraint, ['toString']);
const _trace = dart.privateName(dart, "_trace");
const _jsObjectMissingTrace = dart.privateName(dart, "_jsObjectMissingTrace");
dart._StackTrace = class _StackTrace extends core.Object {
  toString() {
    if (this[_trace] != null) return this[_trace];
    let e = this[_jsError$];
    let trace = "";
    if (e != null && typeof e === "object") {
      trace = _interceptors.NativeError.is(e) ? e[$dartStack]() : e.stack;
      if (trace != null && _debugger.stackTraceMapper != null) {
        trace = _debugger.stackTraceMapper(trace);
      }
    }
    if (trace[$isEmpty] || this[_jsObjectMissingTrace] != null) {
      let jsToString = null;
      try {
        jsToString = "" + this[_jsObjectMissingTrace];
      } catch (e$) {
        let _ = dart.getThrown(e$);
        jsToString = "<error converting JS object to string>";
      }
      trace = "Non-error `" + dart.str(jsToString) + "` thrown by JS does not have stack trace." + "\nCaught in Dart at:\n\n" + dart.str(trace);
    }
    return this[_trace] = trace;
  }
};
(dart._StackTrace.new = function(_jsError) {
  this[_trace] = null;
  this[_jsError$] = _jsError;
  this[_jsObjectMissingTrace] = null;
  ;
}).prototype = dart._StackTrace.prototype;
(dart._StackTrace.missing = function(caughtObj) {
  this[_trace] = null;
  this[_jsObjectMissingTrace] = caughtObj != null ? caughtObj : "null";
  this[_jsError$] = Error();
  ;
}).prototype = dart._StackTrace.prototype;
;
dart._StackTrace[dart.implements] = () => [core.StackTrace];
dart.setLibraryUri(dart._StackTrace, "dart:_runtime");
;
dart.defineExtensionMethods(dart._StackTrace, ['toString']);
let const$;
let const$0;
let C0;
core.Invocation = class Invocation extends core.Object {
  static method(memberName, positionalArguments, namedArguments) {
    if (namedArguments === void 0) namedArguments = null;
    return new core._Invocation.method(memberName, null, positionalArguments, namedArguments);
  }
  static genericMethod(memberName, typeArguments, positionalArguments, namedArguments) {
    if (namedArguments === void 0) namedArguments = null;
    return new core._Invocation.method(memberName, typeArguments, positionalArguments, namedArguments);
  }
  get typeArguments() {
    return C0 || CT.C0;
  }
  get isAccessor() {
    return dart.test(this.isGetter) || dart.test(this.isSetter);
  }
};
(core.Invocation.new = function() {
  ;
}).prototype = core.Invocation.prototype;
;
dart.setGetterSignature(core.Invocation, () => ({
  __proto__: dart.getGetters(core.Invocation.__proto__),
  typeArguments: core.List$(core.Type),
  isAccessor: core.bool
}));
dart.setLibraryUri(core.Invocation, "dart:core");
const memberName$ = dart.privateName(dart, "InvocationImpl.memberName");
const positionalArguments$ = dart.privateName(dart, "InvocationImpl.positionalArguments");
const namedArguments$ = dart.privateName(dart, "InvocationImpl.namedArguments");
const typeArguments$ = dart.privateName(dart, "InvocationImpl.typeArguments");
const isMethod$ = dart.privateName(dart, "InvocationImpl.isMethod");
const isGetter$ = dart.privateName(dart, "InvocationImpl.isGetter");
const isSetter$ = dart.privateName(dart, "InvocationImpl.isSetter");
const failureMessage$ = dart.privateName(dart, "InvocationImpl.failureMessage");
dart.InvocationImpl = class InvocationImpl extends core.Invocation {
  get memberName() {
    return this[memberName$];
  }
  set memberName(value) {
    super.memberName = value;
  }
  get positionalArguments() {
    return this[positionalArguments$];
  }
  set positionalArguments(value) {
    super.positionalArguments = value;
  }
  get namedArguments() {
    return this[namedArguments$];
  }
  set namedArguments(value) {
    super.namedArguments = value;
  }
  get typeArguments() {
    return this[typeArguments$];
  }
  set typeArguments(value) {
    super.typeArguments = value;
  }
  get isMethod() {
    return this[isMethod$];
  }
  set isMethod(value) {
    super.isMethod = value;
  }
  get isGetter() {
    return this[isGetter$];
  }
  set isGetter(value) {
    super.isGetter = value;
  }
  get isSetter() {
    return this[isSetter$];
  }
  set isSetter(value) {
    super.isSetter = value;
  }
  get failureMessage() {
    return this[failureMessage$];
  }
  set failureMessage(value) {
    super.failureMessage = value;
  }
  static _namedArgsToSymbols(namedArgs) {
    if (namedArgs == null) return const$0 || (const$0 = dart.constMap(core.Symbol, dart.dynamic, []));
    return MapOfSymbol$dynamic().unmodifiable(collection.LinkedHashMap.fromIterable(dart.getOwnPropertyNames(namedArgs), {
      key: dart._dartSymbol,
      value: k => namedArgs[k]
    }));
  }
};
(dart.InvocationImpl.new = function(memberName, positionalArguments, opts) {
  let namedArguments = opts && 'namedArguments' in opts ? opts.namedArguments : null;
  let typeArguments = opts && 'typeArguments' in opts ? opts.typeArguments : null;
  let isMethod = opts && 'isMethod' in opts ? opts.isMethod : false;
  let isGetter = opts && 'isGetter' in opts ? opts.isGetter : false;
  let isSetter = opts && 'isSetter' in opts ? opts.isSetter : false;
  let failureMessage = opts && 'failureMessage' in opts ? opts.failureMessage : "method not found";
  this[isMethod$] = isMethod;
  this[isGetter$] = isGetter;
  this[isSetter$] = isSetter;
  this[failureMessage$] = failureMessage;
  this[memberName$] = dart.test(isSetter) ? dart._setterSymbol(memberName) : dart._dartSymbol(memberName);
  this[positionalArguments$] = core.List.unmodifiable(positionalArguments);
  this[namedArguments$] = dart.InvocationImpl._namedArgsToSymbols(namedArguments);
  this[typeArguments$] = typeArguments == null ? const$ || (const$ = dart.constList([], core.Type)) : ListOfType().unmodifiable(typeArguments[$map](dart.dynamic, dart.wrapType));
  dart.InvocationImpl.__proto__.new.call(this);
  ;
}).prototype = dart.InvocationImpl.prototype;
;
dart.setLibraryUri(dart.InvocationImpl, "dart:_runtime");
;
dart.defineLazy(CT, {
  get C0() {
    return C0 = const$ || (const$ = dart.constList([], core.Type));
  },
  get C1() {
    return C1 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "none"
    });
  },
  get C2() {
    return C2 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "skipDart"
    });
  },
  get C3() {
    return C3 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "keyToString"
    });
  },
  get C4() {
    return C4 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "asClass"
    });
  },
  get C5() {
    return C5 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "asObject"
    });
  },
  get C6() {
    return C6 = dart.const({
      __proto__: _debugger.JsonMLConfig.prototype,
      [name$0]: "asMap"
    });
  },
  get C7() {
    return C7 = dart.fn(_debugger.getTypeName, dynamicToString());
  },
  get C8() {
    return C8 = dart.const({
      __proto__: _foreign_helper._Rest.prototype
    });
  },
  get C9() {
    return C9 = dart.const(new _js_helper.PrivateSymbol.new('_receiver', _receiver));
  },
  get C10() {
    return C10 = dart.const(new _js_helper.PrivateSymbol.new('_existingArgumentNames', _existingArgumentNames));
  },
  get C11() {
    return C11 = dart.const(new _js_helper.PrivateSymbol.new('_arguments', _arguments));
  },
  get C12() {
    return C12 = dart.const(new _js_helper.PrivateSymbol.new('_memberName', _memberName));
  },
  get C13() {
    return C13 = dart.const(new _js_helper.PrivateSymbol.new('_invocation', _invocation));
  },
  get C14() {
    return C14 = dart.const(new _js_helper.PrivateSymbol.new('_namedArguments', _namedArguments));
  },
  get C15() {
    return C15 = dart.const(new _js_helper.PrivateSymbol.new('_hasValue', _hasValue));
  },
  get C16() {
    return C16 = dart.const(new _js_helper.PrivateSymbol.new('_errorExplanation', _errorExplanation));
  },
  get C17() {
    return C17 = dart.const(new _js_helper.PrivateSymbol.new('_errorName', _errorName));
  },
  get C18() {
    return C18 = dart.const({
      __proto__: core.OutOfMemoryError.prototype
    });
  },
  get C19() {
    return C19 = dart.fn(collection.ListMixin._compareAny, dynamicAnddynamicToint());
  },
  get C20() {
    return C20 = dart.fn(core._kNull, dynamicToNull());
  },
  get C21() {
    return C21 = dart.fn(collection.MapBase._id, dynamicTodynamic());
  },
  get C22() {
    return C22 = dart.const({
      __proto__: EmptyIteratorOfNull().prototype
    });
  },
  get C23() {
    return C23 = dart.constList([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000.0, 100000000000.0, 1000000000000.0, 10000000000000.0, 100000000000000.0, 1000000000000000.0, 10000000000000000.0, 100000000000000000.0, 1000000000000000000.0, 10000000000000000000.0, 100000000000000000000.0, 1e+21, 1e+22], core.double);
  },
  get C24() {
    return C24 = dart.fn(_js_helper.Primitives.dateNow, VoidToint());
  },
  get C25() {
    return C25 = dart.const(new _js_helper.PrivateSymbol.new('_receiver', _receiver$0));
  },
  get C26() {
    return C26 = dart.const(new _js_helper.PrivateSymbol.new('_existingArgumentNames', _existingArgumentNames$0));
  },
  get C27() {
    return C27 = dart.const(new _js_helper.PrivateSymbol.new('_arguments', _arguments$0));
  },
  get C28() {
    return C28 = dart.const(new _js_helper.PrivateSymbol.new('_memberName', _memberName$0));
  },
  get C29() {
    return C29 = dart.const(new _js_helper.PrivateSymbol.new('_invocation', _invocation$0));
  },
  get C30() {
    return C30 = dart.const(new _js_helper.PrivateSymbol.new('_namedArguments', _namedArguments$0));
  },
  get C31() {
    return C31 = dart.fn(_js_helper._matchString, MatchToString());
  },
  get C32() {
    return C32 = dart.fn(_js_helper._stringIdentity, StringToString());
  },
  get C33() {
    return C33 = dart.const({
      __proto__: _js_helper._Patch.prototype
    });
  },
  get C34() {
    return C34 = dart.const({
      __proto__: _js_helper._NotNull.prototype
    });
  },
  get C35() {
    return C35 = dart.const({
      __proto__: _js_helper._Undefined.prototype
    });
  },
  get C36() {
    return C36 = dart.const({
      __proto__: _js_helper._NullCheck.prototype
    });
  },
  get C37() {
    return C37 = dart.constMap(core.Uri, mirrors.LibraryMirror, []);
  },
  get C38() {
    return C38 = dart.const(new _internal.Symbol.new('voidType'));
  },
  get C39() {
    return C39 = dart.const(new _internal.Symbol.new('dynamicType'));
  },
  get C40() {
    return C40 = dart.const(new _internal.Symbol.new('findLibrary'));
  },
  get C41() {
    return C41 = dart.const(new _internal.Symbol.new('isolate'));
  },
  get C42() {
    return C42 = dart.const(new _internal.Symbol.new('identifiers'));
  },
  get C43() {
    return C43 = dart.const(new _internal.Symbol.new('isHide'));
  },
  get C44() {
    return C44 = dart.const(new _internal.Symbol.new('isShow'));
  },
  get C45() {
    return C45 = dart.const(new _internal.Symbol.new('owner'));
  },
  get C46() {
    return C46 = dart.const(new _internal.Symbol.new('isTopLevel'));
  },
  get C47() {
    return C47 = dart.const(new _internal.Symbol.new('qualifiedName'));
  },
  get C48() {
    return C48 = dart.const(new _internal.Symbol.new('simpleName'));
  },
  get C49() {
    return C49 = dart.const(new _internal.Symbol.new('isPrivate'));
  },
  get C50() {
    return C50 = dart.const(new _internal.Symbol.new('metadata'));
  },
  get C51() {
    return C51 = dart.const(new _internal.Symbol.new('location'));
  },
  get C52() {
    return C52 = dart.const(new _internal.Symbol.new('rootLibrary'));
  },
  get C53() {
    return C53 = dart.const(new _internal.Symbol.new('isCurrent'));
  },
  get C54() {
    return C54 = dart.const(new _internal.Symbol.new('loadUri'));
  },
  get C55() {
    return C55 = dart.const(new _internal.Symbol.new('debugName'));
  },
  get C56() {
    return C56 = dart.const(new _internal.Symbol.new('targetLibrary'));
  },
  get C57() {
    return C57 = dart.const(new _internal.Symbol.new('isDeferred'));
  },
  get C58() {
    return C58 = dart.const(new _internal.Symbol.new('loadLibrary'));
  },
  get C59() {
    return C59 = dart.const(new _internal.Symbol.new('prefix'));
  },
  get C60() {
    return C60 = dart.const(new _internal.Symbol.new('isExport'));
  },
  get C61() {
    return C61 = dart.const(new _internal.Symbol.new('combinators'));
  },
  get C62() {
    return C62 = dart.const(new _internal.Symbol.new('isImport'));
  },
  get C63() {
    return C63 = dart.const(new _internal.Symbol.new('sourceLibrary'));
  },
  get C64() {
    return C64 = dart.const(new _internal.Symbol.new('invoke'));
  },
  get C65() {
    return C65 = dart.const(new _internal.Symbol.new('setField'));
  },
  get C66() {
    return C66 = dart.const(new _internal.Symbol.new('delegate'));
  },
  get C67() {
    return C67 = dart.const(new _internal.Symbol.new('getField'));
  },
  get C68() {
    return C68 = dart.const(new _internal.Symbol.new('function'));
  },
  get C69() {
    return C69 = dart.constList([], mirrors.TypeMirror);
  },
  get C70() {
    return C70 = dart.constList([], mirrors.InstanceMirror);
  },
  get C71() {
    return C71 = dart.const(new _internal.Symbol.new('isAbstract'));
  },
  get C72() {
    return C72 = dart.const(new _internal.Symbol.new('isAssignableTo'));
  },
  get C73() {
    return C73 = dart.const(new _internal.Symbol.new('staticMembers'));
  },
  get C74() {
    return C74 = dart.const(new _internal.Symbol.new('instanceMembers'));
  },
  get C75() {
    return C75 = dart.const(new _internal.Symbol.new('isSubclassOf'));
  },
  get C76() {
    return C76 = dart.const(new _internal.Symbol.new('typeVariables'));
  },
  get C77() {
    return C77 = dart.const(new _internal.Symbol.new('isSubtypeOf'));
  },
  get C78() {
    return C78 = dart.const(new _internal.Symbol.new('isEnum'));
  },
  get C79() {
    return C79 = dart.fn(_js_mirrors.reflect, dynamicToInstanceMirror());
  },
  get C80() {
    return C80 = dart.const(new _internal.Symbol.new('isExtensionMember'));
  },
  get C81() {
    return C81 = dart.const(new _internal.Symbol.new('isConst'));
  },
  get C82() {
    return C82 = dart.const(new _internal.Symbol.new('isNamed'));
  },
  get C83() {
    return C83 = dart.const(new _internal.Symbol.new('hasDefaultValue'));
  },
  get C84() {
    return C84 = dart.const(new _internal.Symbol.new('defaultValue'));
  },
  get C85() {
    return C85 = dart.const(new _internal.Symbol.new('isOptional'));
  },
  get C86() {
    return C86 = dart.constList([], mirrors.ParameterMirror);
  },
  get C87() {
    return C87 = dart.const(new _internal.Symbol.new('isOperator'));
  },
  get C88() {
    return C88 = dart.const(new _internal.Symbol.new('returnType'));
  },
  get C89() {
    return C89 = dart.const(new _internal.Symbol.new('isGenerativeConstructor'));
  },
  get C90() {
    return C90 = dart.const(new _internal.Symbol.new('isConstConstructor'));
  },
  get C91() {
    return C91 = dart.const(new _internal.Symbol.new('isSynthetic'));
  },
  get C92() {
    return C92 = dart.const(new _internal.Symbol.new('source'));
  },
  get C93() {
    return C93 = dart.const(new _internal.Symbol.new('isRegularMethod'));
  },
  get C94() {
    return C94 = dart.const(new _internal.Symbol.new('isFactoryConstructor'));
  },
  get C95() {
    return C95 = dart.const(new _internal.Symbol.new('isRedirectingConstructor'));
  },
  get C96() {
    return C96 = dart.const(new _internal.Symbol.new('isGetter'));
  },
  get C97() {
    return C97 = dart.const({
      __proto__: typed_data.Endian.prototype,
      [Endian__littleEndian]: false
    });
  },
  get C98() {
    return C98 = dart.fn(async._nullDataHandler, ObjectTovoid$());
  },
  get C99() {
    return C99 = dart.fn(async._nullErrorHandler, ObjectAndStackTraceTovoid());
  },
  get C100() {
    return C100 = dart.fn(async._nullDoneHandler, VoidTovoid());
  },
  get C101() {
    return C101 = dart.const({
      __proto__: async._DelayedDone.prototype
    });
  },
  get C102() {
    return C102 = dart.constList([], core.Null);
  },
  get C103() {
    return C103 = dart.fn(async.Future._kTrue, dynamicTobool());
  },
  get C104() {
    return C104 = async._AsyncRun._scheduleImmediateJSOverride;
  },
  get C105() {
    return C105 = async._AsyncRun._scheduleImmediateWithPromise;
  },
  get C106() {
    return C106 = dart.const({
      __proto__: async._RootZone.prototype
    });
  },
  get C108() {
    return C108 = dart.fn(async._rootRun, ZoneAndZoneDelegateAndZone__ToR$1());
  },
  get C107() {
    return C107 = dart.const({
      __proto__: _ZoneFunctionOfFunction().prototype,
      [func]: C108 || CT.C108,
      [zone$]: C106 || CT.C106
    });
  },
  get C110() {
    return C110 = dart.fn(async._rootRunUnary, ZoneAndZoneDelegateAndZone__ToR$2());
  },
  get C109() {
    return C109 = dart.const({
      __proto__: _ZoneFunctionOfFunction().prototype,
      [func]: C110 || CT.C110,
      [zone$]: C106 || CT.C106
    });
  },
  get C112() {
    return C112 = dart.fn(async._rootRunBinary, ZoneAndZoneDelegateAndZone__ToR$3());
  },
  get C111() {
    return C111 = dart.const({
      __proto__: _ZoneFunctionOfFunction().prototype,
      [func]: C112 || CT.C112,
      [zone$]: C106 || CT.C106
    });
  },
  get C114() {
    return C114 = dart.fn(async._rootRegisterCallback, ZoneAndZoneDelegateAndZone__ToFn$1());
  },
  get C113() {
    return C113 = dart.const({
      __proto__: _ZoneFunctionOfFunction().prototype,
      [func]: C114 || CT.C114,
      [zone$]: C106 || CT.C106
    });
  },
  get C116() {
    return C116 = dart.fn(async._rootRegisterUnaryCallback, ZoneAndZoneDelegateAndZone__ToFn$2());
  },
  get C115() {
    return C115 = dart.const({
      __proto__: _ZoneFunctionOfFunction().prototype,
      [func]: C116 || CT.C116,
      [zone$]: C106 || CT.C106
    });
  },
  get C118() {
    return C118 = dart.fn(async._rootRegisterBinaryCallback, ZoneAndZoneDelegateAndZone__ToFn$3());
  },
  get C117() {
    return C117 = dart.const({
      __proto__: _ZoneFunctionOfFunction().prototype,
      [func]: C118 || CT.C118,
      [zone$]: C106 || CT.C106
    });
  },
  get C120() {
    return C120 = dart.fn(async._rootErrorCallback, ZoneAndZoneDelegateAndZone__ToAsyncError());
  },
  get C119() {
    return C119 = dart.const({
      __proto__: _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncError().prototype,
      [func]: C120 || CT.C120,
      [zone$]: C106 || CT.C106
    });
  },
  get C122() {
    return C122 = dart.fn(async._rootScheduleMicrotask, ZoneAndZoneDelegateAndZone__Tovoid());
  },
  get C121() {
    return C121 = dart.const({
      __proto__: _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid().prototype,
      [func]: C122 || CT.C122,
      [zone$]: C106 || CT.C106
    });
  },
  get C124() {
    return C124 = dart.fn(async._rootCreateTimer, ZoneAndZoneDelegateAndZone__ToTimer());
  },
  get C123() {
    return C123 = dart.const({
      __proto__: _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer().prototype,
      [func]: C124 || CT.C124,
      [zone$]: C106 || CT.C106
    });
  },
  get C126() {
    return C126 = dart.fn(async._rootCreatePeriodicTimer, ZoneAndZoneDelegateAndZone__ToTimer$());
  },
  get C125() {
    return C125 = dart.const({
      __proto__: _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$().prototype,
      [func]: C126 || CT.C126,
      [zone$]: C106 || CT.C106
    });
  },
  get C128() {
    return C128 = dart.fn(async._rootPrint, ZoneAndZoneDelegateAndZone__Tovoid$());
  },
  get C127() {
    return C127 = dart.const({
      __proto__: _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$().prototype,
      [func]: C128 || CT.C128,
      [zone$]: C106 || CT.C106
    });
  },
  get C130() {
    return C130 = dart.fn(async._rootFork, ZoneAndZoneDelegateAndZone__ToZone());
  },
  get C129() {
    return C129 = dart.const({
      __proto__: _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone().prototype,
      [func]: C130 || CT.C130,
      [zone$]: C106 || CT.C106
    });
  },
  get C132() {
    return C132 = dart.fn(async._rootHandleUncaughtError, ZoneAndZoneDelegateAndZone__Tovoid$1());
  },
  get C131() {
    return C131 = dart.const({
      __proto__: _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$0().prototype,
      [func]: C132 || CT.C132,
      [zone$]: C106 || CT.C106
    });
  },
  get C133() {
    return C133 = dart.fn(async._startMicrotaskLoop, VoidTovoid());
  },
  get C134() {
    return C134 = dart.fn(async._printToZone, StringTovoid());
  },
  get C135() {
    return C135 = dart.const({
      __proto__: async._ZoneSpecification.prototype,
      [fork$]: null,
      [print$]: null,
      [createPeriodicTimer$]: null,
      [createTimer$]: null,
      [scheduleMicrotask$]: null,
      [errorCallback$]: null,
      [registerBinaryCallback$]: null,
      [registerUnaryCallback$]: null,
      [registerCallback$]: null,
      [runBinary$]: null,
      [runUnary$]: null,
      [run$]: null,
      [handleUncaughtError$]: null
    });
  },
  get C136() {
    return C136 = dart.hashCode;
  },
  get C137() {
    return C137 = dart.fn(core.identityHashCode, ObjectToint());
  },
  get C138() {
    return C138 = dart.fn(core.identical, ObjectAndObjectTobool());
  },
  get C139() {
    return C139 = dart.equals;
  },
  get C140() {
    return C140 = dart.fn(core.Comparable.compare, ComparableAndComparableToint());
  },
  get C141() {
    return C141 = dart.fn(collection._dynamicCompare, dynamicAnddynamicToint());
  },
  get C142() {
    return C142 = dart.const({
      __proto__: convert.AsciiDecoder.prototype,
      [_UnicodeSubsetDecoder__subsetMask]: 127,
      [_UnicodeSubsetDecoder__allowInvalid]: true
    });
  },
  get C143() {
    return C143 = dart.const({
      __proto__: convert.AsciiDecoder.prototype,
      [_UnicodeSubsetDecoder__subsetMask]: 127,
      [_UnicodeSubsetDecoder__allowInvalid]: false
    });
  },
  get C144() {
    return C144 = dart.const({
      __proto__: convert.AsciiEncoder.prototype,
      [_UnicodeSubsetEncoder__subsetMask]: 127
    });
  },
  get C145() {
    return C145 = dart.constList([239, 191, 189], core.int);
  },
  get C146() {
    return C146 = dart.const({
      __proto__: convert.Base64Encoder.prototype,
      [Base64Encoder__urlSafe]: false
    });
  },
  get C147() {
    return C147 = dart.const({
      __proto__: convert.Base64Encoder.prototype,
      [Base64Encoder__urlSafe]: true
    });
  },
  get C148() {
    return C148 = dart.const({
      __proto__: convert.Base64Decoder.prototype
    });
  },
  get C149() {
    return C149 = dart.const({
      __proto__: convert.HtmlEscapeMode.prototype,
      [escapeSlash$]: true,
      [escapeApos$]: true,
      [escapeQuot$]: true,
      [escapeLtGt$]: true,
      [_name$4]: "unknown"
    });
  },
  get C150() {
    return C150 = dart.const({
      __proto__: convert.HtmlEscapeMode.prototype,
      [escapeSlash$]: false,
      [escapeApos$]: false,
      [escapeQuot$]: true,
      [escapeLtGt$]: true,
      [_name$4]: "attribute"
    });
  },
  get C151() {
    return C151 = dart.const({
      __proto__: convert.HtmlEscapeMode.prototype,
      [escapeSlash$]: false,
      [escapeApos$]: true,
      [escapeQuot$]: false,
      [escapeLtGt$]: true,
      [_name$4]: "attribute"
    });
  },
  get C152() {
    return C152 = dart.const({
      __proto__: convert.HtmlEscapeMode.prototype,
      [escapeSlash$]: false,
      [escapeApos$]: false,
      [escapeQuot$]: false,
      [escapeLtGt$]: true,
      [_name$4]: "element"
    });
  },
  get C153() {
    return C153 = dart.const({
      __proto__: convert.JsonEncoder.prototype,
      [JsonEncoder__toEncodable]: null,
      [JsonEncoder_indent]: null
    });
  },
  get C154() {
    return C154 = dart.const({
      __proto__: convert.JsonDecoder.prototype,
      [JsonDecoder__reviver]: null
    });
  },
  get C155() {
    return C155 = dart.fn(convert._defaultToEncodable, dynamicTodynamic());
  },
  get C156() {
    return C156 = dart.const({
      __proto__: convert.Latin1Decoder.prototype,
      [_UnicodeSubsetDecoder__subsetMask]: 255,
      [_UnicodeSubsetDecoder__allowInvalid]: true
    });
  },
  get C157() {
    return C157 = dart.const({
      __proto__: convert.Latin1Decoder.prototype,
      [_UnicodeSubsetDecoder__subsetMask]: 255,
      [_UnicodeSubsetDecoder__allowInvalid]: false
    });
  },
  get C158() {
    return C158 = dart.const({
      __proto__: convert.Latin1Encoder.prototype,
      [_UnicodeSubsetEncoder__subsetMask]: 255
    });
  },
  get C159() {
    return C159 = dart.constList([65533], core.int);
  },
  get C160() {
    return C160 = dart.const({
      __proto__: convert.Utf8Encoder.prototype
    });
  },
  get C161() {
    return C161 = dart.constList([127, 2047, 65535, 1114111], core.int);
  },
  get C162() {
    return C162 = dart.const({
      __proto__: convert.AsciiCodec.prototype,
      [_allowInvalid$]: false
    });
  },
  get C163() {
    return C163 = dart.const({
      __proto__: convert.Base64Codec.prototype,
      [_encoder$]: C146 || CT.C146
    });
  },
  get C164() {
    return C164 = dart.const({
      __proto__: convert.Base64Codec.prototype,
      [_encoder$]: C147 || CT.C147
    });
  },
  get C165() {
    return C165 = dart.const({
      __proto__: convert.HtmlEscape.prototype,
      [mode$]: C149 || CT.C149
    });
  },
  get C166() {
    return C166 = dart.const({
      __proto__: convert.JsonCodec.prototype,
      [_toEncodable]: null,
      [_reviver]: null
    });
  },
  get C167() {
    return C167 = dart.const({
      __proto__: convert.Latin1Codec.prototype,
      [_allowInvalid$1]: false
    });
  },
  get C168() {
    return C168 = dart.const({
      __proto__: convert.Utf8Codec.prototype,
      [_allowMalformed]: false
    });
  },
  get C169() {
    return C169 = dart.constList([], core.int);
  },
  get C170() {
    return C170 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 0
    });
  },
  get C171() {
    return C171 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 1
    });
  },
  get C172() {
    return C172 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 2
    });
  },
  get C173() {
    return C173 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 3
    });
  },
  get C174() {
    return C174 = dart.const({
      __proto__: io.FileMode.prototype,
      [_mode$]: 4
    });
  },
  get C175() {
    return C175 = dart.const({
      __proto__: io.FileLock.prototype,
      [_type$1]: 1
    });
  },
  get C176() {
    return C176 = dart.const({
      __proto__: io.FileLock.prototype,
      [_type$1]: 2
    });
  },
  get C177() {
    return C177 = dart.const({
      __proto__: io.FileLock.prototype,
      [_type$1]: 3
    });
  },
  get C178() {
    return C178 = dart.const({
      __proto__: io.FileLock.prototype,
      [_type$1]: 4
    });
  },
  get C179() {
    return C179 = dart.const({
      __proto__: convert.LineSplitter.prototype
    });
  },
  get C180() {
    return C180 = dart.fn(io._FileResourceInfo.getOpenFiles, dynamicAnddynamicToFutureOfServiceExtensionResponse());
  },
  get C181() {
    return C181 = dart.fn(io._FileResourceInfo.getFileInfoMapByID, dynamicAnddynamicToFutureOfServiceExtensionResponse());
  },
  get C182() {
    return C182 = dart.constList(["file", "directory", "link", "notFound"], core.String);
  },
  get C183() {
    return C183 = dart.const({
      __proto__: io.FileSystemEntityType.prototype,
      [_type$2]: 0
    });
  },
  get C184() {
    return C184 = dart.const({
      __proto__: io.FileSystemEntityType.prototype,
      [_type$2]: 1
    });
  },
  get C185() {
    return C185 = dart.const({
      __proto__: io.FileSystemEntityType.prototype,
      [_type$2]: 2
    });
  },
  get C186() {
    return C186 = dart.const({
      __proto__: io.FileSystemEntityType.prototype,
      [_type$2]: 3
    });
  },
  get C187() {
    return C187 = dart.constList([C183 || CT.C183, C184 || CT.C184, C185 || CT.C185, C186 || CT.C186], io.FileSystemEntityType);
  },
  get C188() {
    return C188 = dart.constList(["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"], core.String);
  },
  get C189() {
    return C189 = dart.const({
      __proto__: io.FileStat.prototype,
      [size$]: -1,
      [mode$0]: 0,
      [type$]: C186 || CT.C186,
      [accessed$]: null,
      [modified$]: null,
      [changed$]: null
    });
  },
  get C190() {
    return C190 = dart.fn(io._NetworkProfiling._serviceExtensionHandler, StringAndMapOfString$StringToFutureOfServiceExtensionResponse());
  },
  get C192() {
    return C192 = dart.const({
      __proto__: io.ProcessStartMode.prototype,
      [ProcessStartMode__mode]: 0
    });
  },
  get C193() {
    return C193 = dart.const({
      __proto__: io.ProcessStartMode.prototype,
      [ProcessStartMode__mode]: 1
    });
  },
  get C194() {
    return C194 = dart.const({
      __proto__: io.ProcessStartMode.prototype,
      [ProcessStartMode__mode]: 2
    });
  },
  get C195() {
    return C195 = dart.const({
      __proto__: io.ProcessStartMode.prototype,
      [ProcessStartMode__mode]: 3
    });
  },
  get C191() {
    return C191 = dart.constList([C192 || CT.C192, C193 || CT.C193, C194 || CT.C194, C195 || CT.C195], io.ProcessStartMode);
  },
  get C196() {
    return C196 = dart.constList(["normal", "inheritStdio", "detached", "detachedWithStdio"], core.String);
  },
  get C197() {
    return C197 = dart.const({
      __proto__: io.SystemEncoding.prototype
    });
  },
  get C198() {
    return C198 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTERM",
      [ProcessSignal__signalNumber]: 15
    });
  },
  get C199() {
    return C199 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGHUP",
      [ProcessSignal__signalNumber]: 1
    });
  },
  get C200() {
    return C200 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGINT",
      [ProcessSignal__signalNumber]: 2
    });
  },
  get C201() {
    return C201 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGQUIT",
      [ProcessSignal__signalNumber]: 3
    });
  },
  get C202() {
    return C202 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGILL",
      [ProcessSignal__signalNumber]: 4
    });
  },
  get C203() {
    return C203 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTRAP",
      [ProcessSignal__signalNumber]: 5
    });
  },
  get C204() {
    return C204 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGABRT",
      [ProcessSignal__signalNumber]: 6
    });
  },
  get C205() {
    return C205 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGBUS",
      [ProcessSignal__signalNumber]: 7
    });
  },
  get C206() {
    return C206 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGFPE",
      [ProcessSignal__signalNumber]: 8
    });
  },
  get C207() {
    return C207 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGKILL",
      [ProcessSignal__signalNumber]: 9
    });
  },
  get C208() {
    return C208 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGUSR1",
      [ProcessSignal__signalNumber]: 10
    });
  },
  get C209() {
    return C209 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGSEGV",
      [ProcessSignal__signalNumber]: 11
    });
  },
  get C210() {
    return C210 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGUSR2",
      [ProcessSignal__signalNumber]: 12
    });
  },
  get C211() {
    return C211 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGPIPE",
      [ProcessSignal__signalNumber]: 13
    });
  },
  get C212() {
    return C212 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGALRM",
      [ProcessSignal__signalNumber]: 14
    });
  },
  get C213() {
    return C213 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGCHLD",
      [ProcessSignal__signalNumber]: 17
    });
  },
  get C214() {
    return C214 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGCONT",
      [ProcessSignal__signalNumber]: 18
    });
  },
  get C215() {
    return C215 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGSTOP",
      [ProcessSignal__signalNumber]: 19
    });
  },
  get C216() {
    return C216 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTSTP",
      [ProcessSignal__signalNumber]: 20
    });
  },
  get C217() {
    return C217 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTTIN",
      [ProcessSignal__signalNumber]: 21
    });
  },
  get C218() {
    return C218 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGTTOU",
      [ProcessSignal__signalNumber]: 22
    });
  },
  get C219() {
    return C219 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGURG",
      [ProcessSignal__signalNumber]: 23
    });
  },
  get C220() {
    return C220 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGXCPU",
      [ProcessSignal__signalNumber]: 24
    });
  },
  get C221() {
    return C221 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGXFSZ",
      [ProcessSignal__signalNumber]: 25
    });
  },
  get C222() {
    return C222 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGVTALRM",
      [ProcessSignal__signalNumber]: 26
    });
  },
  get C223() {
    return C223 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGPROF",
      [ProcessSignal__signalNumber]: 27
    });
  },
  get C224() {
    return C224 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGWINCH",
      [ProcessSignal__signalNumber]: 28
    });
  },
  get C225() {
    return C225 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGPOLL",
      [ProcessSignal__signalNumber]: 29
    });
  },
  get C226() {
    return C226 = dart.const({
      __proto__: io.ProcessSignal.prototype,
      [ProcessSignal__name]: "SIGSYS",
      [ProcessSignal__signalNumber]: 31
    });
  },
  get C227() {
    return C227 = dart.constList(["RawSocketEvent.read", "RawSocketEvent.write", "RawSocketEvent.readClosed", "RawSocketEvent.closed"], core.String);
  },
  get C228() {
    return C228 = dart.const({
      __proto__: io.RawSocketEvent.prototype,
      [_value$2]: 0
    });
  },
  get C229() {
    return C229 = dart.const({
      __proto__: io.RawSocketEvent.prototype,
      [_value$2]: 1
    });
  },
  get C230() {
    return C230 = dart.const({
      __proto__: io.RawSocketEvent.prototype,
      [_value$2]: 2
    });
  },
  get C231() {
    return C231 = dart.const({
      __proto__: io.RawSocketEvent.prototype,
      [_value$2]: 3
    });
  },
  get C232() {
    return C232 = dart.const({
      __proto__: io.InternetAddressType.prototype,
      [_value$3]: 0
    });
  },
  get C233() {
    return C233 = dart.const({
      __proto__: io.InternetAddressType.prototype,
      [_value$3]: 1
    });
  },
  get C234() {
    return C234 = dart.const({
      __proto__: io.InternetAddressType.prototype,
      [_value$3]: -1
    });
  },
  get C235() {
    return C235 = dart.const({
      __proto__: io.SocketDirection.prototype,
      [_value$4]: 0
    });
  },
  get C236() {
    return C236 = dart.const({
      __proto__: io.SocketDirection.prototype,
      [_value$4]: 1
    });
  },
  get C237() {
    return C237 = dart.const({
      __proto__: io.SocketDirection.prototype,
      [_value$4]: 2
    });
  },
  get C238() {
    return C238 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$5]: 0
    });
  },
  get C239() {
    return C239 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$5]: 1
    });
  },
  get C240() {
    return C240 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$5]: 2
    });
  },
  get C241() {
    return C241 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$5]: 3
    });
  },
  get C242() {
    return C242 = dart.const({
      __proto__: io.SocketOption.prototype,
      [_value$5]: 4
    });
  },
  get C243() {
    return C243 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$5]: "_RawSocketOptions.SOL_SOCKET",
      index: 0
    });
  },
  get C244() {
    return C244 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$5]: "_RawSocketOptions.IPPROTO_IP",
      index: 1
    });
  },
  get C245() {
    return C245 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$5]: "_RawSocketOptions.IP_MULTICAST_IF",
      index: 2
    });
  },
  get C246() {
    return C246 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$5]: "_RawSocketOptions.IPPROTO_IPV6",
      index: 3
    });
  },
  get C247() {
    return C247 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$5]: "_RawSocketOptions.IPV6_MULTICAST_IF",
      index: 4
    });
  },
  get C248() {
    return C248 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$5]: "_RawSocketOptions.IPPROTO_TCP",
      index: 5
    });
  },
  get C249() {
    return C249 = dart.const({
      __proto__: io._RawSocketOptions.prototype,
      [_name$5]: "_RawSocketOptions.IPPROTO_UDP",
      index: 6
    });
  },
  get C250() {
    return C250 = dart.constList([C243 || CT.C243, C244 || CT.C244, C245 || CT.C245, C246 || CT.C246, C247 || CT.C247, C248 || CT.C248, C249 || CT.C249], io._RawSocketOptions);
  },
  get C251() {
    return C251 = dart.const({
      __proto__: io.StdioType.prototype,
      [name$10]: "terminal"
    });
  },
  get C252() {
    return C252 = dart.const({
      __proto__: io.StdioType.prototype,
      [name$10]: "pipe"
    });
  },
  get C253() {
    return C253 = dart.const({
      __proto__: io.StdioType.prototype,
      [name$10]: "file"
    });
  },
  get C254() {
    return C254 = dart.const({
      __proto__: io.StdioType.prototype,
      [name$10]: "other"
    });
  },
  get C255() {
    return C255 = dart.const({
      __proto__: io._WindowsCodePageEncoder.prototype
    });
  },
  get C256() {
    return C256 = dart.const({
      __proto__: io._WindowsCodePageDecoder.prototype
    });
  },
  get C257() {
    return C257 = dart.const({
      __proto__: convert.Utf8Decoder.prototype,
      [_allowMalformed$0]: false
    });
  },
  get C258() {
    return C258 = dart.constList([1, 2, 3, 4, 0], core.int);
  },
  get C259() {
    return C259 = dart.const({
      __proto__: io.ZLibCodec.prototype,
      [dictionary$]: null,
      [raw$]: false,
      [windowBits$]: 15,
      [strategy$]: 0,
      [memLevel$]: 8,
      [level$]: 6,
      [gzip$]: false
    });
  },
  get C260() {
    return C260 = dart.const({
      __proto__: io.GZipCodec.prototype,
      [raw$0]: false,
      [dictionary$0]: null,
      [windowBits$0]: 15,
      [strategy$0]: 0,
      [memLevel$0]: 8,
      [level$0]: 6,
      [gzip$0]: true
    });
  },
  get C261() {
    return C261 = dart.fn(async.runZoned, Fn__ToR());
  },
  get C262() {
    return C262 = dart.fn(js._convertToJS, dynamicTodynamic());
  },
  get C263() {
    return C263 = dart.fn(js._wrapDartFunction, dynamicTodynamic());
  },
  get C264() {
    return C264 = dart.fn(js._wrapToDartHelper, dynamicToObject());
  },
  get C265() {
    return C265 = dart.const({
      __proto__: math._JSRandom.prototype
    });
  },
  get C266() {
    return C266 = dart.const({
      __proto__: typed_data.Endian.prototype,
      [Endian__littleEndian]: true
    });
  },
  get C267() {
    return C267 = dart.const({
      __proto__: core.IntegerDivisionByZeroException.prototype
    });
  },
  get C268() {
    return C268 = dart.const({
      __proto__: core.Duration.prototype,
      [_duration$]: 0
    });
  },
  get C269() {
    return C269 = dart.constList([], core.Object);
  },
  get C270() {
    return C270 = dart.constMap(core.Symbol, core.Object, []);
  },
  get C271() {
    return C271 = dart.fn(core._GeneratorIterable._id, intToint());
  },
  get C272() {
    return C272 = dart.const(new _internal.Symbol.new('unary-'));
  },
  get C273() {
    return C273 = dart.const(new _internal.Symbol.new(''));
  },
  get C274() {
    return C274 = dart.constList([], core.String);
  },
  get C275() {
    return C275 = dart.fn(core.Uri.decodeComponent, StringToString());
  },
  get C276() {
    return C276 = dart.fn(core._Uri._createList, VoidToListOfString());
  },
  get C277() {
    return C277 = dart.constList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431], core.int);
  },
  get C278() {
    return C278 = dart.constList([0, 0, 26498, 1023, 65534, 34815, 65534, 18431], core.int);
  },
  get C279() {
    return C279 = dart.constList([0, 0, 65498, 45055, 65535, 34815, 65534, 18431], core.int);
  },
  get C280() {
    return C280 = dart.constList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047], core.int);
  },
  get C281() {
    return C281 = dart.constList([0, 0, 26624, 1023, 0, 0, 65534, 2047], core.int);
  },
  get C282() {
    return C282 = dart.constList([0, 0, 32722, 11263, 65534, 34815, 65534, 18431], core.int);
  },
  get C283() {
    return C283 = dart.constList([0, 0, 32776, 33792, 1, 10240, 0, 0], core.int);
  },
  get C284() {
    return C284 = dart.constList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431], core.int);
  },
  get C285() {
    return C285 = dart.constList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431], core.int);
  },
  get C286() {
    return C286 = dart.constList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431], core.int);
  },
  get C287() {
    return C287 = dart.constList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431], core.int);
  },
  get C288() {
    return C288 = dart.constList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431], core.int);
  },
  get C289() {
    return C289 = dart.constList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767], core.int);
  },
  get C290() {
    return C290 = dart.constList([0, 0, 34816, 1023, 65534, 2047, 65534, 2047], core.int);
  },
  get C291() {
    return C291 = dart.constMap(core.String, core.String, []);
  },
  get C292() {
    return C292 = dart.constMap(core.String, ListOfString(), []);
  },
  get C293() {
    return C293 = dart.const({
      __proto__: core.Deprecated.prototype,
      [message$13]: "next release"
    });
  },
  get C294() {
    return C294 = dart.const({
      __proto__: core._Override.prototype
    });
  },
  get C295() {
    return C295 = dart.const({
      __proto__: core._Proxy.prototype
    });
  },
  get C296() {
    return C296 = dart.const({
      __proto__: ui.PointMode.prototype,
      [_name$8]: "PointMode.points",
      index: 0
    });
  },
  get C297() {
    return C297 = dart.const({
      __proto__: ui.PointMode.prototype,
      [_name$8]: "PointMode.lines",
      index: 1
    });
  },
  get C298() {
    return C298 = dart.const({
      __proto__: ui.PointMode.prototype,
      [_name$8]: "PointMode.polygon",
      index: 2
    });
  },
  get C299() {
    return C299 = dart.constList([C296 || CT.C296, C297 || CT.C297, C298 || CT.C298], ui.PointMode);
  },
  get C300() {
    return C300 = dart.const({
      __proto__: ui.ClipOp.prototype,
      [_name$8]: "ClipOp.difference",
      index: 0
    });
  },
  get C301() {
    return C301 = dart.const({
      __proto__: ui.ClipOp.prototype,
      [_name$8]: "ClipOp.intersect",
      index: 1
    });
  },
  get C302() {
    return C302 = dart.constList([C300 || CT.C300, C301 || CT.C301], ui.ClipOp);
  },
  get C303() {
    return C303 = dart.const({
      __proto__: ui.VertexMode.prototype,
      [_name$8]: "VertexMode.triangles",
      index: 0
    });
  },
  get C304() {
    return C304 = dart.const({
      __proto__: ui.VertexMode.prototype,
      [_name$8]: "VertexMode.triangleStrip",
      index: 1
    });
  },
  get C305() {
    return C305 = dart.const({
      __proto__: ui.VertexMode.prototype,
      [_name$8]: "VertexMode.triangleFan",
      index: 2
    });
  },
  get C306() {
    return C306 = dart.constList([C303 || CT.C303, C304 || CT.C304, C305 || CT.C305], ui.VertexMode);
  },
  get C307() {
    return C307 = dart.const({
      __proto__: ui.PathFillType.prototype,
      [_name$8]: "PathFillType.nonZero",
      index: 0
    });
  },
  get C308() {
    return C308 = dart.const({
      __proto__: ui.PathFillType.prototype,
      [_name$8]: "PathFillType.evenOdd",
      index: 1
    });
  },
  get C309() {
    return C309 = dart.constList([C307 || CT.C307, C308 || CT.C308], ui.PathFillType);
  },
  get C310() {
    return C310 = dart.const({
      __proto__: ui.PathOperation.prototype,
      [_name$8]: "PathOperation.difference",
      index: 0
    });
  },
  get C311() {
    return C311 = dart.const({
      __proto__: ui.PathOperation.prototype,
      [_name$8]: "PathOperation.intersect",
      index: 1
    });
  },
  get C312() {
    return C312 = dart.const({
      __proto__: ui.PathOperation.prototype,
      [_name$8]: "PathOperation.union",
      index: 2
    });
  },
  get C313() {
    return C313 = dart.const({
      __proto__: ui.PathOperation.prototype,
      [_name$8]: "PathOperation.xor",
      index: 3
    });
  },
  get C314() {
    return C314 = dart.const({
      __proto__: ui.PathOperation.prototype,
      [_name$8]: "PathOperation.reverseDifference",
      index: 4
    });
  },
  get C315() {
    return C315 = dart.constList([C310 || CT.C310, C311 || CT.C311, C312 || CT.C312, C313 || CT.C313, C314 || CT.C314], ui.PathOperation);
  },
  get C316() {
    return C316 = dart.const({
      __proto__: ui.Offset.prototype,
      [_dy$]: 0,
      [_dx$]: 0
    });
  },
  get C317() {
    return C317 = dart.const({
      __proto__: ui.Offset.prototype,
      [_dy$]: 1 / 0,
      [_dx$]: 1 / 0
    });
  },
  get C318() {
    return C318 = dart.const({
      __proto__: ui.Size.prototype,
      [_dy$]: 0,
      [_dx$]: 0
    });
  },
  get C319() {
    return C319 = dart.const({
      __proto__: ui.Size.prototype,
      [_dy$]: 1 / 0,
      [_dx$]: 1 / 0
    });
  },
  get C320() {
    return C320 = dart.const({
      __proto__: ui.Rect.prototype,
      [bottom$]: 0,
      [right$]: 0,
      [top$1]: 0,
      [left$1]: 0
    });
  },
  get C321() {
    return C321 = dart.const({
      __proto__: ui.Rect.prototype,
      [bottom$]: 1000000000,
      [right$]: 1000000000,
      [top$1]: -1000000000,
      [left$1]: -1000000000
    });
  },
  get C322() {
    return C322 = dart.const({
      __proto__: ui.Radius.prototype,
      [y$3]: 0,
      [x$3]: 0
    });
  },
  get C323() {
    return C323 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.clear",
      index: 0
    });
  },
  get C324() {
    return C324 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.src",
      index: 1
    });
  },
  get C325() {
    return C325 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.dst",
      index: 2
    });
  },
  get C326() {
    return C326 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.srcOver",
      index: 3
    });
  },
  get C327() {
    return C327 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.dstOver",
      index: 4
    });
  },
  get C328() {
    return C328 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.srcIn",
      index: 5
    });
  },
  get C329() {
    return C329 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.dstIn",
      index: 6
    });
  },
  get C330() {
    return C330 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.srcOut",
      index: 7
    });
  },
  get C331() {
    return C331 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.dstOut",
      index: 8
    });
  },
  get C332() {
    return C332 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.srcATop",
      index: 9
    });
  },
  get C333() {
    return C333 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.dstATop",
      index: 10
    });
  },
  get C334() {
    return C334 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.xor",
      index: 11
    });
  },
  get C335() {
    return C335 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.plus",
      index: 12
    });
  },
  get C336() {
    return C336 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.modulate",
      index: 13
    });
  },
  get C337() {
    return C337 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.screen",
      index: 14
    });
  },
  get C338() {
    return C338 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.overlay",
      index: 15
    });
  },
  get C339() {
    return C339 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.darken",
      index: 16
    });
  },
  get C340() {
    return C340 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.lighten",
      index: 17
    });
  },
  get C341() {
    return C341 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.colorDodge",
      index: 18
    });
  },
  get C342() {
    return C342 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.colorBurn",
      index: 19
    });
  },
  get C343() {
    return C343 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.hardLight",
      index: 20
    });
  },
  get C344() {
    return C344 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.softLight",
      index: 21
    });
  },
  get C345() {
    return C345 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.difference",
      index: 22
    });
  },
  get C346() {
    return C346 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.exclusion",
      index: 23
    });
  },
  get C347() {
    return C347 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.multiply",
      index: 24
    });
  },
  get C348() {
    return C348 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.hue",
      index: 25
    });
  },
  get C349() {
    return C349 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.saturation",
      index: 26
    });
  },
  get C350() {
    return C350 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.color",
      index: 27
    });
  },
  get C351() {
    return C351 = dart.const({
      __proto__: ui.BlendMode.prototype,
      [_name$8]: "BlendMode.luminosity",
      index: 28
    });
  },
  get C352() {
    return C352 = dart.constList([C323 || CT.C323, C324 || CT.C324, C325 || CT.C325, C326 || CT.C326, C327 || CT.C327, C328 || CT.C328, C329 || CT.C329, C330 || CT.C330, C331 || CT.C331, C332 || CT.C332, C333 || CT.C333, C334 || CT.C334, C335 || CT.C335, C336 || CT.C336, C337 || CT.C337, C338 || CT.C338, C339 || CT.C339, C340 || CT.C340, C341 || CT.C341, C342 || CT.C342, C343 || CT.C343, C344 || CT.C344, C345 || CT.C345, C346 || CT.C346, C347 || CT.C347, C348 || CT.C348, C349 || CT.C349, C350 || CT.C350, C351 || CT.C351], ui.BlendMode);
  },
  get C353() {
    return C353 = dart.const({
      __proto__: ui.FilterQuality.prototype,
      [_name$8]: "FilterQuality.none",
      index: 0
    });
  },
  get C354() {
    return C354 = dart.const({
      __proto__: ui.FilterQuality.prototype,
      [_name$8]: "FilterQuality.low",
      index: 1
    });
  },
  get C355() {
    return C355 = dart.const({
      __proto__: ui.FilterQuality.prototype,
      [_name$8]: "FilterQuality.medium",
      index: 2
    });
  },
  get C356() {
    return C356 = dart.const({
      __proto__: ui.FilterQuality.prototype,
      [_name$8]: "FilterQuality.high",
      index: 3
    });
  },
  get C357() {
    return C357 = dart.constList([C353 || CT.C353, C354 || CT.C354, C355 || CT.C355, C356 || CT.C356], ui.FilterQuality);
  },
  get C358() {
    return C358 = dart.const({
      __proto__: ui.StrokeCap.prototype,
      [_name$8]: "StrokeCap.butt",
      index: 0
    });
  },
  get C359() {
    return C359 = dart.const({
      __proto__: ui.StrokeCap.prototype,
      [_name$8]: "StrokeCap.round",
      index: 1
    });
  },
  get C360() {
    return C360 = dart.const({
      __proto__: ui.StrokeCap.prototype,
      [_name$8]: "StrokeCap.square",
      index: 2
    });
  },
  get C361() {
    return C361 = dart.constList([C358 || CT.C358, C359 || CT.C359, C360 || CT.C360], ui.StrokeCap);
  },
  get C362() {
    return C362 = dart.const({
      __proto__: ui.StrokeJoin.prototype,
      [_name$8]: "StrokeJoin.miter",
      index: 0
    });
  },
  get C363() {
    return C363 = dart.const({
      __proto__: ui.StrokeJoin.prototype,
      [_name$8]: "StrokeJoin.round",
      index: 1
    });
  },
  get C364() {
    return C364 = dart.const({
      __proto__: ui.StrokeJoin.prototype,
      [_name$8]: "StrokeJoin.bevel",
      index: 2
    });
  },
  get C365() {
    return C365 = dart.constList([C362 || CT.C362, C363 || CT.C363, C364 || CT.C364], ui.StrokeJoin);
  },
  get C366() {
    return C366 = dart.const({
      __proto__: ui.PaintingStyle.prototype,
      [_name$8]: "PaintingStyle.fill",
      index: 0
    });
  },
  get C367() {
    return C367 = dart.const({
      __proto__: ui.PaintingStyle.prototype,
      [_name$8]: "PaintingStyle.stroke",
      index: 1
    });
  },
  get C368() {
    return C368 = dart.constList([C366 || CT.C366, C367 || CT.C367], ui.PaintingStyle);
  },
  get C369() {
    return C369 = dart.const({
      __proto__: ui.Clip.prototype,
      [_name$8]: "Clip.none",
      index: 0
    });
  },
  get C370() {
    return C370 = dart.const({
      __proto__: ui.Clip.prototype,
      [_name$8]: "Clip.hardEdge",
      index: 1
    });
  },
  get C371() {
    return C371 = dart.const({
      __proto__: ui.Clip.prototype,
      [_name$8]: "Clip.antiAlias",
      index: 2
    });
  },
  get C372() {
    return C372 = dart.const({
      __proto__: ui.Clip.prototype,
      [_name$8]: "Clip.antiAliasWithSaveLayer",
      index: 3
    });
  },
  get C373() {
    return C373 = dart.constList([C369 || CT.C369, C370 || CT.C370, C371 || CT.C371, C372 || CT.C372], ui.Clip);
  },
  get C374() {
    return C374 = dart.const({
      __proto__: ui.ImageByteFormat.prototype,
      [_name$8]: "ImageByteFormat.rawRgba",
      index: 0
    });
  },
  get C375() {
    return C375 = dart.const({
      __proto__: ui.ImageByteFormat.prototype,
      [_name$8]: "ImageByteFormat.rawUnmodified",
      index: 1
    });
  },
  get C376() {
    return C376 = dart.const({
      __proto__: ui.ImageByteFormat.prototype,
      [_name$8]: "ImageByteFormat.png",
      index: 2
    });
  },
  get C377() {
    return C377 = dart.constList([C374 || CT.C374, C375 || CT.C375, C376 || CT.C376], ui.ImageByteFormat);
  },
  get C378() {
    return C378 = dart.const({
      __proto__: ui.PixelFormat.prototype,
      [_name$8]: "PixelFormat.rgba8888",
      index: 0
    });
  },
  get C379() {
    return C379 = dart.const({
      __proto__: ui.PixelFormat.prototype,
      [_name$8]: "PixelFormat.bgra8888",
      index: 1
    });
  },
  get C380() {
    return C380 = dart.constList([C378 || CT.C378, C379 || CT.C379], ui.PixelFormat);
  },
  get C381() {
    return C381 = dart.const({
      __proto__: ui.BlurStyle.prototype,
      [_name$8]: "BlurStyle.normal",
      index: 0
    });
  },
  get C382() {
    return C382 = dart.const({
      __proto__: ui.BlurStyle.prototype,
      [_name$8]: "BlurStyle.solid",
      index: 1
    });
  },
  get C383() {
    return C383 = dart.const({
      __proto__: ui.BlurStyle.prototype,
      [_name$8]: "BlurStyle.outer",
      index: 2
    });
  },
  get C384() {
    return C384 = dart.const({
      __proto__: ui.BlurStyle.prototype,
      [_name$8]: "BlurStyle.inner",
      index: 3
    });
  },
  get C385() {
    return C385 = dart.constList([C381 || CT.C381, C382 || CT.C382, C383 || CT.C383, C384 || CT.C384], ui.BlurStyle);
  },
  get C386() {
    return C386 = dart.const({
      __proto__: ui.PointerChange.prototype,
      [_name$8]: "PointerChange.cancel",
      index: 0
    });
  },
  get C387() {
    return C387 = dart.const({
      __proto__: ui.PointerChange.prototype,
      [_name$8]: "PointerChange.add",
      index: 1
    });
  },
  get C388() {
    return C388 = dart.const({
      __proto__: ui.PointerChange.prototype,
      [_name$8]: "PointerChange.remove",
      index: 2
    });
  },
  get C389() {
    return C389 = dart.const({
      __proto__: ui.PointerChange.prototype,
      [_name$8]: "PointerChange.hover",
      index: 3
    });
  },
  get C390() {
    return C390 = dart.const({
      __proto__: ui.PointerChange.prototype,
      [_name$8]: "PointerChange.down",
      index: 4
    });
  },
  get C391() {
    return C391 = dart.const({
      __proto__: ui.PointerChange.prototype,
      [_name$8]: "PointerChange.move",
      index: 5
    });
  },
  get C392() {
    return C392 = dart.const({
      __proto__: ui.PointerChange.prototype,
      [_name$8]: "PointerChange.up",
      index: 6
    });
  },
  get C393() {
    return C393 = dart.constList([C386 || CT.C386, C387 || CT.C387, C388 || CT.C388, C389 || CT.C389, C390 || CT.C390, C391 || CT.C391, C392 || CT.C392], ui.PointerChange);
  },
  get C394() {
    return C394 = dart.const({
      __proto__: ui.PointerDeviceKind.prototype,
      [_name$8]: "PointerDeviceKind.touch",
      index: 0
    });
  },
  get C395() {
    return C395 = dart.const({
      __proto__: ui.PointerDeviceKind.prototype,
      [_name$8]: "PointerDeviceKind.mouse",
      index: 1
    });
  },
  get C396() {
    return C396 = dart.const({
      __proto__: ui.PointerDeviceKind.prototype,
      [_name$8]: "PointerDeviceKind.stylus",
      index: 2
    });
  },
  get C397() {
    return C397 = dart.const({
      __proto__: ui.PointerDeviceKind.prototype,
      [_name$8]: "PointerDeviceKind.invertedStylus",
      index: 3
    });
  },
  get C398() {
    return C398 = dart.const({
      __proto__: ui.PointerDeviceKind.prototype,
      [_name$8]: "PointerDeviceKind.unknown",
      index: 4
    });
  },
  get C399() {
    return C399 = dart.constList([C394 || CT.C394, C395 || CT.C395, C396 || CT.C396, C397 || CT.C397, C398 || CT.C398], ui.PointerDeviceKind);
  },
  get C400() {
    return C400 = dart.const({
      __proto__: ui.PointerSignalKind.prototype,
      [_name$8]: "PointerSignalKind.none",
      index: 0
    });
  },
  get C401() {
    return C401 = dart.const({
      __proto__: ui.PointerSignalKind.prototype,
      [_name$8]: "PointerSignalKind.scroll",
      index: 1
    });
  },
  get C402() {
    return C402 = dart.const({
      __proto__: ui.PointerSignalKind.prototype,
      [_name$8]: "PointerSignalKind.unknown",
      index: 2
    });
  },
  get C403() {
    return C403 = dart.constList([C400 || CT.C400, C401 || CT.C401, C402 || CT.C402], ui.PointerSignalKind);
  },
  get C404() {
    return C404 = dart.constList([], ui.PointerData);
  },
  get C405() {
    return C405 = dart.const({
      __proto__: ui.FontStyle.prototype,
      [_name$8]: "FontStyle.normal",
      index: 0
    });
  },
  get C406() {
    return C406 = dart.const({
      __proto__: ui.FontStyle.prototype,
      [_name$8]: "FontStyle.italic",
      index: 1
    });
  },
  get C407() {
    return C407 = dart.constList([C405 || CT.C405, C406 || CT.C406], ui.FontStyle);
  },
  get C408() {
    return C408 = dart.const({
      __proto__: ui.PlaceholderAlignment.prototype,
      [_name$8]: "PlaceholderAlignment.baseline",
      index: 0
    });
  },
  get C409() {
    return C409 = dart.const({
      __proto__: ui.PlaceholderAlignment.prototype,
      [_name$8]: "PlaceholderAlignment.aboveBaseline",
      index: 1
    });
  },
  get C410() {
    return C410 = dart.const({
      __proto__: ui.PlaceholderAlignment.prototype,
      [_name$8]: "PlaceholderAlignment.belowBaseline",
      index: 2
    });
  },
  get C411() {
    return C411 = dart.const({
      __proto__: ui.PlaceholderAlignment.prototype,
      [_name$8]: "PlaceholderAlignment.top",
      index: 3
    });
  },
  get C412() {
    return C412 = dart.const({
      __proto__: ui.PlaceholderAlignment.prototype,
      [_name$8]: "PlaceholderAlignment.bottom",
      index: 4
    });
  },
  get C413() {
    return C413 = dart.const({
      __proto__: ui.PlaceholderAlignment.prototype,
      [_name$8]: "PlaceholderAlignment.middle",
      index: 5
    });
  },
  get C414() {
    return C414 = dart.constList([C408 || CT.C408, C409 || CT.C409, C410 || CT.C410, C411 || CT.C411, C412 || CT.C412, C413 || CT.C413], ui.PlaceholderAlignment);
  },
  get C415() {
    return C415 = dart.constMap(core.int, core.String, [0, "FontWeight.w100", 1, "FontWeight.w200", 2, "FontWeight.w300", 3, "FontWeight.w400", 4, "FontWeight.w500", 5, "FontWeight.w600", 6, "FontWeight.w700", 7, "FontWeight.w800", 8, "FontWeight.w900"]);
  },
  get C416() {
    return C416 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 0
    });
  },
  get C417() {
    return C417 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 1
    });
  },
  get C418() {
    return C418 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 2
    });
  },
  get C419() {
    return C419 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 3
    });
  },
  get C420() {
    return C420 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 4
    });
  },
  get C421() {
    return C421 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 5
    });
  },
  get C422() {
    return C422 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 6
    });
  },
  get C423() {
    return C423 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 7
    });
  },
  get C424() {
    return C424 = dart.const({
      __proto__: ui.FontWeight.prototype,
      [index$]: 8
    });
  },
  get C425() {
    return C425 = dart.constList([C416 || CT.C416, C417 || CT.C417, C418 || CT.C418, C419 || CT.C419, C420 || CT.C420, C421 || CT.C421, C422 || CT.C422, C423 || CT.C423, C424 || CT.C424], ui.FontWeight);
  },
  get C426() {
    return C426 = dart.const({
      __proto__: ui.TextAlign.prototype,
      [_name$8]: "TextAlign.left",
      index: 0
    });
  },
  get C427() {
    return C427 = dart.const({
      __proto__: ui.TextAlign.prototype,
      [_name$8]: "TextAlign.right",
      index: 1
    });
  },
  get C428() {
    return C428 = dart.const({
      __proto__: ui.TextAlign.prototype,
      [_name$8]: "TextAlign.center",
      index: 2
    });
  },
  get C429() {
    return C429 = dart.const({
      __proto__: ui.TextAlign.prototype,
      [_name$8]: "TextAlign.justify",
      index: 3
    });
  },
  get C430() {
    return C430 = dart.const({
      __proto__: ui.TextAlign.prototype,
      [_name$8]: "TextAlign.start",
      index: 4
    });
  },
  get C431() {
    return C431 = dart.const({
      __proto__: ui.TextAlign.prototype,
      [_name$8]: "TextAlign.end",
      index: 5
    });
  },
  get C432() {
    return C432 = dart.constList([C426 || CT.C426, C427 || CT.C427, C428 || CT.C428, C429 || CT.C429, C430 || CT.C430, C431 || CT.C431], ui.TextAlign);
  },
  get C433() {
    return C433 = dart.const({
      __proto__: ui.TextBaseline.prototype,
      [_name$8]: "TextBaseline.alphabetic",
      index: 0
    });
  },
  get C434() {
    return C434 = dart.const({
      __proto__: ui.TextBaseline.prototype,
      [_name$8]: "TextBaseline.ideographic",
      index: 1
    });
  },
  get C435() {
    return C435 = dart.constList([C433 || CT.C433, C434 || CT.C434], ui.TextBaseline);
  },
  get C436() {
    return C436 = dart.const({
      __proto__: ui.TextDecorationStyle.prototype,
      [_name$8]: "TextDecorationStyle.solid",
      index: 0
    });
  },
  get C437() {
    return C437 = dart.const({
      __proto__: ui.TextDecorationStyle.prototype,
      [_name$8]: "TextDecorationStyle.double",
      index: 1
    });
  },
  get C438() {
    return C438 = dart.const({
      __proto__: ui.TextDecorationStyle.prototype,
      [_name$8]: "TextDecorationStyle.dotted",
      index: 2
    });
  },
  get C439() {
    return C439 = dart.const({
      __proto__: ui.TextDecorationStyle.prototype,
      [_name$8]: "TextDecorationStyle.dashed",
      index: 3
    });
  },
  get C440() {
    return C440 = dart.const({
      __proto__: ui.TextDecorationStyle.prototype,
      [_name$8]: "TextDecorationStyle.wavy",
      index: 4
    });
  },
  get C441() {
    return C441 = dart.constList([C436 || CT.C436, C437 || CT.C437, C438 || CT.C438, C439 || CT.C439, C440 || CT.C440], ui.TextDecorationStyle);
  },
  get C442() {
    return C442 = dart.const({
      __proto__: ui.TextDirection.prototype,
      [_name$8]: "TextDirection.rtl",
      index: 0
    });
  },
  get C443() {
    return C443 = dart.const({
      __proto__: ui.TextDirection.prototype,
      [_name$8]: "TextDirection.ltr",
      index: 1
    });
  },
  get C444() {
    return C444 = dart.constList([C442 || CT.C442, C443 || CT.C443], ui.TextDirection);
  },
  get C445() {
    return C445 = dart.const({
      __proto__: ui.TextAffinity.prototype,
      [_name$8]: "TextAffinity.upstream",
      index: 0
    });
  },
  get C446() {
    return C446 = dart.const({
      __proto__: ui.TextAffinity.prototype,
      [_name$8]: "TextAffinity.downstream",
      index: 1
    });
  },
  get C447() {
    return C447 = dart.constList([C445 || CT.C445, C446 || CT.C446], ui.TextAffinity);
  },
  get C448() {
    return C448 = dart.const({
      __proto__: ui.BoxHeightStyle.prototype,
      [_name$8]: "BoxHeightStyle.tight",
      index: 0
    });
  },
  get C449() {
    return C449 = dart.const({
      __proto__: ui.BoxHeightStyle.prototype,
      [_name$8]: "BoxHeightStyle.max",
      index: 1
    });
  },
  get C450() {
    return C450 = dart.const({
      __proto__: ui.BoxHeightStyle.prototype,
      [_name$8]: "BoxHeightStyle.includeLineSpacingMiddle",
      index: 2
    });
  },
  get C451() {
    return C451 = dart.const({
      __proto__: ui.BoxHeightStyle.prototype,
      [_name$8]: "BoxHeightStyle.includeLineSpacingTop",
      index: 3
    });
  },
  get C452() {
    return C452 = dart.const({
      __proto__: ui.BoxHeightStyle.prototype,
      [_name$8]: "BoxHeightStyle.includeLineSpacingBottom",
      index: 4
    });
  },
  get C453() {
    return C453 = dart.constList([C448 || CT.C448, C449 || CT.C449, C450 || CT.C450, C451 || CT.C451, C452 || CT.C452], ui.BoxHeightStyle);
  },
  get C454() {
    return C454 = dart.const({
      __proto__: ui.BoxWidthStyle.prototype,
      [_name$8]: "BoxWidthStyle.tight",
      index: 0
    });
  },
  get C455() {
    return C455 = dart.const({
      __proto__: ui.BoxWidthStyle.prototype,
      [_name$8]: "BoxWidthStyle.max",
      index: 1
    });
  },
  get C456() {
    return C456 = dart.constList([C454 || CT.C454, C455 || CT.C455], ui.BoxWidthStyle);
  },
  get C457() {
    return C457 = dart.const({
      __proto__: ui.TileMode.prototype,
      [_name$8]: "TileMode.clamp",
      index: 0
    });
  },
  get C458() {
    return C458 = dart.const({
      __proto__: ui.TileMode.prototype,
      [_name$8]: "TileMode.repeated",
      index: 1
    });
  },
  get C459() {
    return C459 = dart.const({
      __proto__: ui.TileMode.prototype,
      [_name$8]: "TileMode.mirror",
      index: 2
    });
  },
  get C460() {
    return C460 = dart.constList([C457 || CT.C457, C458 || CT.C458, C459 || CT.C459], ui.TileMode);
  },
  get C461() {
    return C461 = dart.const({
      __proto__: ui.AppLifecycleState.prototype,
      [_name$8]: "AppLifecycleState.resumed",
      index: 0
    });
  },
  get C462() {
    return C462 = dart.const({
      __proto__: ui.AppLifecycleState.prototype,
      [_name$8]: "AppLifecycleState.inactive",
      index: 1
    });
  },
  get C463() {
    return C463 = dart.const({
      __proto__: ui.AppLifecycleState.prototype,
      [_name$8]: "AppLifecycleState.paused",
      index: 2
    });
  },
  get C464() {
    return C464 = dart.const({
      __proto__: ui.AppLifecycleState.prototype,
      [_name$8]: "AppLifecycleState.detached",
      index: 3
    });
  },
  get C465() {
    return C465 = dart.constList([C461 || CT.C461, C462 || CT.C462, C463 || CT.C463, C464 || CT.C464], ui.AppLifecycleState);
  },
  get C466() {
    return C466 = dart.const({
      __proto__: ui.Brightness.prototype,
      [_name$8]: "Brightness.dark",
      index: 0
    });
  },
  get C467() {
    return C467 = dart.const({
      __proto__: ui.Brightness.prototype,
      [_name$8]: "Brightness.light",
      index: 1
    });
  },
  get C468() {
    return C468 = dart.constList([C466 || CT.C466, C467 || CT.C467], ui.Brightness);
  },
  get C469() {
    return C469 = dart.const({
      __proto__: ui.FramePhase.prototype,
      [_name$8]: "FramePhase.buildStart",
      index: 0
    });
  },
  get C470() {
    return C470 = dart.const({
      __proto__: ui.FramePhase.prototype,
      [_name$8]: "FramePhase.buildFinish",
      index: 1
    });
  },
  get C471() {
    return C471 = dart.const({
      __proto__: ui.FramePhase.prototype,
      [_name$8]: "FramePhase.rasterStart",
      index: 2
    });
  },
  get C472() {
    return C472 = dart.const({
      __proto__: ui.FramePhase.prototype,
      [_name$8]: "FramePhase.rasterFinish",
      index: 3
    });
  },
  get C473() {
    return C473 = dart.constList([C469 || CT.C469, C470 || CT.C470, C471 || CT.C471, C472 || CT.C472], ui.FramePhase);
  },
  get C474() {
    return C474 = dart.const({
      __proto__: ui._HashEnd.prototype
    });
  },
  get C475() {
    return C475 = dart.constList(["cache-control", "connection", "date", "pragma", "trailer", "transfer-encoding", "upgrade", "via", "warning"], core.String);
  },
  get C476() {
    return C476 = dart.constList(["allow", "content-encoding", "content-language", "content-length", "content-location", "content-md5", "content-range", "content-type", "expires", "last-modified"], core.String);
  },
  get C477() {
    return C477 = dart.constList(["accept-ranges", "age", "etag", "location", "proxy-authenticate", "retry-after", "server", "vary", "www-authenticate"], core.String);
  },
  get C478() {
    return C478 = dart.constList(["accept", "accept-charset", "accept-encoding", "accept-language", "authorization", "expect", "from", "host", "if-match", "if-modified-since", "if-none-match", "if-range", "if-unmodified-since", "max-forwards", "proxy-authorization", "range", "referer", "te", "user-agent"], core.String);
  },
  get C479() {
    return C479 = dart.const({
      __proto__: _http.HttpClientResponseCompressionState.prototype,
      [_name$9]: "HttpClientResponseCompressionState.notCompressed",
      index: 0
    });
  },
  get C480() {
    return C480 = dart.const({
      __proto__: _http.HttpClientResponseCompressionState.prototype,
      [_name$9]: "HttpClientResponseCompressionState.decompressed",
      index: 1
    });
  },
  get C481() {
    return C481 = dart.const({
      __proto__: _http.HttpClientResponseCompressionState.prototype,
      [_name$9]: "HttpClientResponseCompressionState.compressed",
      index: 2
    });
  },
  get C482() {
    return C482 = dart.constList([C479 || CT.C479, C480 || CT.C480, C481 || CT.C481], _http.HttpClientResponseCompressionState);
  },
  get C483() {
    return C483 = dart.constList([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, 0, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2], core.int);
  },
  get C484() {
    return C484 = dart.constList([3614090360.0, 3905402710.0, 606105819, 3250441966.0, 4118548399.0, 1200080426, 2821735955.0, 4249261313.0, 1770035416, 2336552879.0, 4294925233.0, 2304563134.0, 1804603682, 4254626195.0, 2792965006.0, 1236535329, 4129170786.0, 3225465664.0, 643717713, 3921069994.0, 3593408605.0, 38016083, 3634488961.0, 3889429448.0, 568446438, 3275163606.0, 4107603335.0, 1163531501, 2850285829.0, 4243563512.0, 1735328473, 2368359562.0, 4294588738.0, 2272392833.0, 1839030562, 4259657740.0, 2763975236.0, 1272893353, 4139469664.0, 3200236656.0, 681279174, 3936430074.0, 3572445317.0, 76029189, 3654602809.0, 3873151461.0, 530742520, 3299628645.0, 4096336452.0, 1126891415, 2878612391.0, 4237533241.0, 1700485571, 2399980690.0, 4293915773.0, 2240044497.0, 1873313359, 4264355552.0, 2734768916.0, 1309151649, 4149444226.0, 3174756917.0, 718787259, 3951481745.0], core.int);
  },
  get C485() {
    return C485 = dart.constList([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21], core.int);
  },
  get C486() {
    return C486 = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], dart.dynamic);
  },
  get C487() {
    return C487 = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dart.dynamic);
  },
  get C488() {
    return C488 = dart.constList(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], dart.dynamic);
  },
  get C489() {
    return C489 = dart.constList(["mon", "tue", "wed", "thu", "fri", "sat", "sun"], dart.dynamic);
  },
  get C490() {
    return C490 = dart.constList(["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"], dart.dynamic);
  },
  get C491() {
    return C491 = dart.constList(["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"], dart.dynamic);
  },
  get C492() {
    return C492 = dart.constList(["(", ")", "<", ">", "@", ",", ";", ":", "\\", "\"", "/", "[", "]", "?", "=", "{", "}"], core.String);
  },
  get C493() {
    return C493 = dart.const({
      __proto__: _http._ToUint8List.prototype
    });
  },
  get C494() {
    return C494 = dart.constList([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70], core.int);
  },
  get C495() {
    return C495 = dart.constList([13, 10, 48, 13, 10, 13, 10], core.int);
  },
  get C496() {
    return C496 = dart.constList([48, 13, 10, 13, 10], core.int);
  },
  get C497() {
    return C497 = dart.fn(_http.HttpClient.findProxyFromEnvironment, Uri__ToString());
  },
  get C498() {
    return C498 = dart.const({
      __proto__: core.Duration.prototype,
      [_duration$]: 15000000
    });
  },
  get C501() {
    return C501 = dart.const({
      __proto__: _http._Proxy.prototype,
      [_Proxy_isDirect]: true,
      [_Proxy_password]: null,
      [_Proxy_username]: null,
      [_Proxy_port]: null,
      [_Proxy_host]: null
    });
  },
  get C500() {
    return C500 = dart.constList([C501 || CT.C501], _http._Proxy);
  },
  get C499() {
    return C499 = dart.const({
      __proto__: _http._ProxyConfiguration.prototype,
      [_ProxyConfiguration_proxies]: C500 || CT.C500
    });
  },
  get C502() {
    return C502 = dart.const({
      __proto__: core.Duration.prototype,
      [_duration$]: 120000000
    });
  },
  get C503() {
    return C503 = dart.const({
      __proto__: _http._AuthenticationScheme.prototype,
      [_scheme$]: -1
    });
  },
  get C504() {
    return C504 = dart.const({
      __proto__: _http._AuthenticationScheme.prototype,
      [_scheme$]: 0
    });
  },
  get C505() {
    return C505 = dart.const({
      __proto__: _http._AuthenticationScheme.prototype,
      [_scheme$]: 1
    });
  },
  get C506() {
    return C506 = dart.constList([72, 84, 84, 80], core.int);
  },
  get C507() {
    return C507 = dart.constList([72, 84, 84, 80, 47, 49, 46], core.int);
  },
  get C508() {
    return C508 = dart.constList([72, 84, 84, 80, 47, 49, 46, 48], core.int);
  },
  get C509() {
    return C509 = dart.constList([72, 84, 84, 80, 47, 49, 46, 49], core.int);
  },
  get C510() {
    return C510 = dart.constList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], core.bool);
  },
  get C511() {
    return C511 = dart.const({
      __proto__: _http.CompressionOptions.prototype,
      [enabled$]: true,
      [serverMaxWindowBits$]: null,
      [clientMaxWindowBits$]: null,
      [serverNoContextTakeover$]: false,
      [clientNoContextTakeover$]: false
    });
  },
  get C512() {
    return C512 = dart.const({
      __proto__: _http.CompressionOptions.prototype,
      [enabled$]: false,
      [serverMaxWindowBits$]: null,
      [clientMaxWindowBits$]: null,
      [serverNoContextTakeover$]: false,
      [clientNoContextTakeover$]: false
    });
  },
  get C513() {
    return C513 = dart.constList([0, 0, 255, 255], core.int);
  },
  get C514() {
    return C514 = dart.const({
      __proto__: core.Duration.prototype,
      [_duration$]: 5000000
    });
  }
});
const name$0 = dart.privateName(_debugger, "JsonMLConfig.name");
let C1;
let C2;
let C3;
let C4;
let C5;
let C6;
_debugger.JsonMLConfig = class JsonMLConfig extends core.Object {
  get name() {
    return this[name$0];
  }
  set name(value) {
    super.name = value;
  }
  toString() {
    return "JsonMLConfig(" + dart.str(this.name) + ")";
  }
};
(_debugger.JsonMLConfig.new = function(name) {
  this[name$0] = name;
  ;
}).prototype = _debugger.JsonMLConfig.prototype;
;
dart.setLibraryUri(_debugger.JsonMLConfig, "dart:_debugger");
;
dart.defineExtensionMethods(_debugger.JsonMLConfig, ['toString']);
dart.defineLazy(_debugger.JsonMLConfig, {
  /*_debugger.JsonMLConfig.none*/get none() {
    return C1 || CT.C1;
  },
  /*_debugger.JsonMLConfig.skipDart*/get skipDart() {
    return C2 || CT.C2;
  },
  /*_debugger.JsonMLConfig.keyToString*/get keyToString() {
    return C3 || CT.C3;
  },
  /*_debugger.JsonMLConfig.asClass*/get asClass() {
    return C4 || CT.C4;
  },
  /*_debugger.JsonMLConfig.asObject*/get asObject() {
    return C5 || CT.C5;
  },
  /*_debugger.JsonMLConfig.asMap*/get asMap() {
    return C6 || CT.C6;
  }
});
_debugger.JSNative = class JSNative extends core.Object {
  static getProperty(object, name) {
    return object[name];
  }
  static setProperty(object, name, value) {
    return object[name] = value;
  }
};
(_debugger.JSNative.new = function() {
  ;
}).prototype = _debugger.JSNative.prototype;
;
dart.setLibraryUri(_debugger.JSNative, "dart:_debugger");
const name$1 = dart.privateName(_debugger, "NameValuePair.name");
const value$ = dart.privateName(_debugger, "NameValuePair.value");
const config$ = dart.privateName(_debugger, "NameValuePair.config");
const hideName$ = dart.privateName(_debugger, "NameValuePair.hideName");
_debugger.NameValuePair = class NameValuePair extends core.Object {
  get name() {
    return this[name$1];
  }
  set name(value) {
    super.name = value;
  }
  get value() {
    return this[value$];
  }
  set value(value) {
    super.value = value;
  }
  get config() {
    return this[config$];
  }
  set config(value) {
    super.config = value;
  }
  get hideName() {
    return this[hideName$];
  }
  set hideName(value) {
    super.hideName = value;
  }
  _equals(other) {
    if (!_debugger.NameValuePair.is(other)) return false;
    if (dart.test(this.hideName) || dart.dtest(dart.dload(other, 'hideName'))) return this === other;
    return dart.equals(dart.dload(other, 'name'), this.name);
  }
  get hashCode() {
    return dart.hashCode(this.name);
  }
  get displayName() {
    return dart.test(this.hideName) ? "" : this.name;
  }
};
(_debugger.NameValuePair.new = function(opts) {
  let name = opts && 'name' in opts ? opts.name : null;
  let value = opts && 'value' in opts ? opts.value : null;
  let config = opts && 'config' in opts ? opts.config : C1 || CT.C1;
  let hideName = opts && 'hideName' in opts ? opts.hideName : false;
  this[name$1] = name;
  this[value$] = value;
  this[config$] = config;
  this[hideName$] = hideName;
  ;
}).prototype = _debugger.NameValuePair.prototype;
;
dart.setGetterSignature(_debugger.NameValuePair, () => ({
  __proto__: dart.getGetters(_debugger.NameValuePair.__proto__),
  displayName: core.String
}));
dart.setLibraryUri(_debugger.NameValuePair, "dart:_debugger");
;
dart.defineExtensionMethods(_debugger.NameValuePair, ['_equals']);
dart.defineExtensionAccessors(_debugger.NameValuePair, ['hashCode']);
const key$ = dart.privateName(_debugger, "MapEntry.key");
const value$0 = dart.privateName(_debugger, "MapEntry.value");
_debugger.MapEntry = class MapEntry extends core.Object {
  get key() {
    return this[key$];
  }
  set key(value) {
    super.key = value;
  }
  get value() {
    return this[value$0];
  }
  set value(value) {
    super.value = value;
  }
};
(_debugger.MapEntry.new = function(opts) {
  let key = opts && 'key' in opts ? opts.key : null;
  let value = opts && 'value' in opts ? opts.value : null;
  this[key$] = key;
  this[value$0] = value;
  ;
}).prototype = _debugger.MapEntry.prototype;
;
dart.setLibraryUri(_debugger.MapEntry, "dart:_debugger");
;
const start$ = dart.privateName(_debugger, "IterableSpan.start");
const end$ = dart.privateName(_debugger, "IterableSpan.end");
const iterable$ = dart.privateName(_debugger, "IterableSpan.iterable");
_debugger.IterableSpan = class IterableSpan extends core.Object {
  get start() {
    return this[start$];
  }
  set start(value) {
    super.start = value;
  }
  get end() {
    return this[end$];
  }
  set end(value) {
    super.end = value;
  }
  get iterable() {
    return this[iterable$];
  }
  set iterable(value) {
    super.iterable = value;
  }
  get length() {
    return dart.notNull(this.end) - dart.notNull(this.start);
  }
  get maxPowerOfSubsetSize() {
    return (math.log(dart.notNull(this.length) - 0.5) / math.log(_debugger._maxSpanLength))[$truncate]();
  }
  get subsetSize() {
    return dart.asInt(math.pow(_debugger._maxSpanLength, this.maxPowerOfSubsetSize));
  }
  asMap() {
    return this.iterable[$skip](this.start)[$take](this.length)[$toList]()[$asMap]();
  }
  children() {
    let children = JSArrayOfNameValuePair().of([]);
    if (dart.notNull(this.length) <= dart.notNull(_debugger._maxSpanLength)) {
      this.asMap()[$forEach](dart.fn((i, element) => {
        children[$add](new _debugger.NameValuePair.new({name: (dart.notNull(i) + dart.notNull(this.start))[$toString](), value: element}));
      }, intAnddynamicToNull()));
    } else {
      for (let i = this.start; dart.notNull(i) < dart.notNull(this.end); i = dart.notNull(i) + dart.notNull(this.subsetSize)) {
        let subSpan = new _debugger.IterableSpan.new(i, math.min(core.int, this.end, dart.notNull(this.subsetSize) + dart.notNull(i)), this.iterable);
        if (subSpan.length === 1) {
          children[$add](new _debugger.NameValuePair.new({name: dart.toString(i), value: this.iterable[$elementAt](i)}));
        } else {
          children[$add](new _debugger.NameValuePair.new({name: "[" + dart.str(i) + "..." + dart.str(dart.notNull(subSpan.end) - 1) + "]", value: subSpan, hideName: true}));
        }
      }
    }
    return children;
  }
};
(_debugger.IterableSpan.new = function(start, end, iterable) {
  this[start$] = start;
  this[end$] = end;
  this[iterable$] = iterable;
  ;
}).prototype = _debugger.IterableSpan.prototype;
;
;
dart.setGetterSignature(_debugger.IterableSpan, () => ({
  __proto__: dart.getGetters(_debugger.IterableSpan.__proto__),
  length: core.int,
  maxPowerOfSubsetSize: core.int,
  subsetSize: core.int
}));
dart.setLibraryUri(_debugger.IterableSpan, "dart:_debugger");
;
const name$2 = dart.privateName(_debugger, "Library.name");
const object$ = dart.privateName(_debugger, "Library.object");
_debugger.Library = class Library extends core.Object {
  get name() {
    return this[name$2];
  }
  set name(value) {
    super.name = value;
  }
  get object() {
    return this[object$];
  }
  set object(value) {
    super.object = value;
  }
};
(_debugger.Library.new = function(name, object) {
  this[name$2] = name;
  this[object$] = object;
  ;
}).prototype = _debugger.Library.prototype;
;
dart.setLibraryUri(_debugger.Library, "dart:_debugger");
;
const object$0 = dart.privateName(_debugger, "NamedConstructor.object");
_debugger.NamedConstructor = class NamedConstructor extends core.Object {
  get object() {
    return this[object$0];
  }
  set object(value) {
    super.object = value;
  }
};
(_debugger.NamedConstructor.new = function(object) {
  this[object$0] = object;
  ;
}).prototype = _debugger.NamedConstructor.prototype;
;
dart.setLibraryUri(_debugger.NamedConstructor, "dart:_debugger");
;
const name$3 = dart.privateName(_debugger, "HeritageClause.name");
const types$ = dart.privateName(_debugger, "HeritageClause.types");
_debugger.HeritageClause = class HeritageClause extends core.Object {
  get name() {
    return this[name$3];
  }
  set name(value) {
    super.name = value;
  }
  get types() {
    return this[types$];
  }
  set types(value) {
    super.types = value;
  }
};
(_debugger.HeritageClause.new = function(name, types) {
  this[name$3] = name;
  this[types$] = types;
  ;
}).prototype = _debugger.HeritageClause.prototype;
;
dart.setLibraryUri(_debugger.HeritageClause, "dart:_debugger");
;
const _attributes = dart.privateName(_debugger, "_attributes");
const _jsonML = dart.privateName(_debugger, "_jsonML");
_debugger.JsonMLElement = class JsonMLElement extends core.Object {
  appendChild(element) {
    this[_jsonML][$add](dart.dsend(element, 'toJsonML', []));
  }
  createChild(tagName) {
    let c = new _debugger.JsonMLElement.new(tagName);
    this[_jsonML][$add](c.toJsonML());
    return c;
  }
  createObjectTag(object) {
    let t2;
    t2 = this.createChild("object");
    t2.addAttribute("object", object);
    return t2;
  }
  setStyle(style) {
    dart.dput(this[_attributes], 'style', style);
  }
  addStyle(style) {
    let t2;
    if (dart.dload(this[_attributes], 'style') == null) {
      dart.dput(this[_attributes], 'style', style);
    } else {
      t2 = this[_attributes];
      dart.dput(t2, 'style', dart.dsend(dart.dload(t2, 'style'), '+', [style]));
    }
  }
  addAttribute(key, value) {
    _debugger.JSNative.setProperty(this[_attributes], key, value);
  }
  createTextChild(text) {
    this[_jsonML][$add](text);
  }
  toJsonML() {
    return this[_jsonML];
  }
};
(_debugger.JsonMLElement.new = function(tagName) {
  this[_attributes] = null;
  this[_jsonML] = null;
  this[_attributes] = {};
  this[_jsonML] = [tagName, this[_attributes]];
}).prototype = _debugger.JsonMLElement.prototype;
;
;
dart.setLibraryUri(_debugger.JsonMLElement, "dart:_debugger");
;
const _simpleFormatter$ = dart.privateName(_debugger, "_simpleFormatter");
const customFormattersOn = dart.privateName(_debugger, "JsonMLFormatter.customFormattersOn");
_debugger.JsonMLFormatter = class JsonMLFormatter extends core.Object {
  get customFormattersOn() {
    return this[customFormattersOn];
  }
  set customFormattersOn(value) {
    this[customFormattersOn] = value;
  }
  setMaxSpanLengthForTestingOnly(spanLength) {
    _debugger._maxSpanLength = spanLength;
  }
  header(object, config) {
    let t2;
    this.customFormattersOn = true;
    if (dart.equals(config, _debugger.JsonMLConfig.skipDart) || dart.test(_debugger.isNativeJavaScriptObject(object))) {
      return null;
    }
    let c = this[_simpleFormatter$].preview(object, config);
    if (c == null) return null;
    if (dart.equals(config, _debugger.JsonMLConfig.keyToString)) {
      c = dart.toString(object);
    }
    let element = (t2 = new _debugger.JsonMLElement.new("span"), t2.setStyle("background-color: #d9edf7;color: black"), t2.createTextChild(c), t2);
    return element.toJsonML();
  }
  hasBody(object, config) {
    return this[_simpleFormatter$].hasChildren(object, config);
  }
  body(object, config) {
    let t2, t2$, t2$0, t2$1, t2$2;
    let body = (t2 = new _debugger.JsonMLElement.new("ol"), t2.setStyle("list-style-type: none;" + "padding-left: 0px;" + "margin-top: 0px;" + "margin-bottom: 0px;" + "margin-left: 12px;"), t2);
    if (core.StackTrace.is(object)) {
      body.addStyle("background-color: thistle;color: rgb(196, 26, 22);");
    }
    let children = this[_simpleFormatter$].children(object, config);
    if (children == null) return body.toJsonML();
    for (let child of children) {
      let li = body.createChild("li");
      li.setStyle("padding-left: 13px;");
      let nameSpan = null;
      let valueStyle = "";
      if (!dart.test(child.hideName)) {
        nameSpan = (t2$ = new _debugger.JsonMLElement.new("span"), t2$.createTextChild(child.displayName[$isNotEmpty] ? dart.str(child.displayName) + ": " : ""), t2$.setStyle("background-color: thistle; color: rgb(136, 19, 145); margin-right: -13px"), t2$);
        valueStyle = "margin-left: 13px";
      }
      if (_debugger._typeof(child.value) === "object" || _debugger._typeof(child.value) === "function") {
        let valueSpan = (t2$0 = new _debugger.JsonMLElement.new("span"), t2$0.setStyle(valueStyle), t2$0);
        t2$1 = valueSpan.createObjectTag(child.value);
        t2$1.addAttribute("config", child.config);
        t2$1;
        if (nameSpan != null) {
          li.appendChild(nameSpan);
        }
        li.appendChild(valueSpan);
      } else {
        let line = li.createChild("span");
        if (nameSpan != null) {
          line.appendChild(nameSpan);
        }
        line.appendChild((t2$2 = new _debugger.JsonMLElement.new("span"), t2$2.createTextChild(_debugger.safePreview(child.value, child.config)), t2$2.setStyle(valueStyle), t2$2));
      }
    }
    return body.toJsonML();
  }
};
(_debugger.JsonMLFormatter.new = function(_simpleFormatter) {
  this[customFormattersOn] = false;
  this[_simpleFormatter$] = _simpleFormatter;
  ;
}).prototype = _debugger.JsonMLFormatter.prototype;
;
;
dart.setLibraryUri(_debugger.JsonMLFormatter, "dart:_debugger");
;
_debugger.Formatter = class Formatter extends core.Object {};
(_debugger.Formatter.new = function() {
  ;
}).prototype = _debugger.Formatter.prototype;
;
dart.setLibraryUri(_debugger.Formatter, "dart:_debugger");
const _formatters = dart.privateName(_debugger, "_formatters");
_debugger.DartFormatter = class DartFormatter extends core.Object {
  preview(object, config) {
    try {
      if (object == null || typeof object == 'number' || typeof object == 'string' || dart.test(_debugger.isNativeJavaScriptObject(object))) {
        return dart.toString(object);
      }
      for (let formatter of this[_formatters]) {
        if (dart.test(formatter.accept(object, config))) return formatter.preview(object);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let trace = dart.stackTrace(e$);
    }
    return null;
  }
  hasChildren(object, config) {
    if (object == null) return false;
    try {
      for (let formatter of this[_formatters]) {
        if (dart.test(formatter.accept(object, config))) return formatter.hasChildren(object);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let trace = dart.stackTrace(e$);
    }
    return false;
  }
  children(object, config) {
    try {
      if (object != null) {
        for (let formatter of this[_formatters]) {
          if (dart.test(formatter.accept(object, config))) return formatter.children(object);
        }
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let trace = dart.stackTrace(e$);
    }
    return JSArrayOfNameValuePair().of([]);
  }
};
(_debugger.DartFormatter.new = function() {
  this[_formatters] = null;
  this[_formatters] = JSArrayOfFormatter().of([new _debugger.ObjectInternalsFormatter.new(), new _debugger.ClassFormatter.new(), new _debugger.TypeFormatter.new(), new _debugger.NamedConstructorFormatter.new(), new _debugger.MapFormatter.new(), new _debugger.MapOverviewFormatter.new(), new _debugger.IterableFormatter.new(), new _debugger.IterableSpanFormatter.new(), new _debugger.MapEntryFormatter.new(), new _debugger.StackTraceFormatter.new(), new _debugger.ErrorAndExceptionFormatter.new(), new _debugger.FunctionFormatter.new(), new _debugger.HeritageClauseFormatter.new(), new _debugger.LibraryModuleFormatter.new(), new _debugger.LibraryFormatter.new(), new _debugger.ObjectFormatter.new()]);
}).prototype = _debugger.DartFormatter.prototype;
;
;
dart.setLibraryUri(_debugger.DartFormatter, "dart:_debugger");
;
_debugger.ObjectFormatter = class ObjectFormatter extends _debugger.Formatter {
  accept(object, config) {
    return !dart.test(_debugger.isNativeJavaScriptObject(object));
  }
  preview(object) {
    let typeName = _debugger.getObjectTypeName(object);
    try {
      let toString = dart.str(object);
      if (toString.length > dart.notNull(_debugger.maxFormatterStringLength)) {
        toString = toString[$substring](0, dart.notNull(_debugger.maxFormatterStringLength) - 3) + "...";
      }
      if (toString[$contains](typeName)) {
        return toString;
      } else {
        return toString + " (" + dart.str(typeName) + ")";
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
    }
    return typeName;
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    let type = dart.getType(object);
    let ret = new (_HashSetOfNameValuePair()).new();
    let fields = new (_HashSetOfNameValuePair()).new();
    _debugger.addPropertiesFromSignature(dart.getFields(type), fields, object, true);
    let getters = new (_HashSetOfNameValuePair()).new();
    _debugger.addPropertiesFromSignature(dart.getGetters(type), getters, object, true);
    ret.addAll(_debugger.sortProperties(fields));
    ret.addAll(_debugger.sortProperties(getters));
    _debugger.addMetadataChildren(object, ret);
    return ret[$toList]();
  }
};
(_debugger.ObjectFormatter.new = function() {
  ;
}).prototype = _debugger.ObjectFormatter.prototype;
;
;
dart.setLibraryUri(_debugger.ObjectFormatter, "dart:_debugger");
_debugger.ObjectInternalsFormatter = class ObjectInternalsFormatter extends _debugger.ObjectFormatter {
  accept(object, config) {
    return dart.test(super.accept(object, config)) && dart.equals(config, _debugger.JsonMLConfig.asObject);
  }
  preview(object) {
    return _debugger.getObjectTypeName(object);
  }
};
(_debugger.ObjectInternalsFormatter.new = function() {
  ;
}).prototype = _debugger.ObjectInternalsFormatter.prototype;
;
dart.setLibraryUri(_debugger.ObjectInternalsFormatter, "dart:_debugger");
_debugger.LibraryModuleFormatter = class LibraryModuleFormatter extends core.Object {
  accept(object, config) {
    return dart.getModuleName(object) != null;
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    let libraryNames = dart.getModuleName(object)[$split]("/");
    if (dart.notNull(libraryNames[$length]) > 1 && libraryNames[$last] == libraryNames[$_get](dart.notNull(libraryNames[$length]) - 2)) {
      libraryNames[$_set](dart.notNull(libraryNames[$length]) - 1, "");
    }
    return "Library Module: " + dart.str(libraryNames[$join]("/"));
  }
  children(object) {
    let children = new (_HashSetOfNameValuePair()).new();
    for (let name of _debugger.getOwnPropertyNames(object)) {
      let value = _debugger.safeGetProperty(object, name);
      children.add(new _debugger.NameValuePair.new({name: name, value: new _debugger.Library.new(name, value), hideName: true}));
    }
    return children[$toList]();
  }
};
(_debugger.LibraryModuleFormatter.new = function() {
  ;
}).prototype = _debugger.LibraryModuleFormatter.prototype;
;
_debugger.LibraryModuleFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.LibraryModuleFormatter, "dart:_debugger");
const genericParameters = dart.privateName(_debugger, "LibraryFormatter.genericParameters");
_debugger.LibraryFormatter = class LibraryFormatter extends core.Object {
  get genericParameters() {
    return this[genericParameters];
  }
  set genericParameters(value) {
    this[genericParameters] = value;
  }
  accept(object, config) {
    return _debugger.Library.is(object);
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    return core.String._check(dart.dload(object, 'name'));
  }
  children(object) {
    let children = new (_HashSetOfNameValuePair()).new();
    let objectProperties = _debugger.safeProperties(dart.dload(object, 'object'));
    dart.dsend(objectProperties, 'forEach', [dart.fn((name, value) => {
        if (dart.getGenericTypeCtor(value) != null) return;
        children.add(_debugger.NameValuePair._check(dart.isType(value) ? this.classChild(core.String._check(name), value) : new _debugger.NameValuePair.new({name: core.String._check(name), value: value})));
      }, dynamicAnddynamicToNull())]);
    return children[$toList]();
  }
  classChild(name, child) {
    let typeName = _debugger.getTypeName(child);
    return new _debugger.NameValuePair.new({name: typeName, value: child, config: _debugger.JsonMLConfig.asClass});
  }
};
(_debugger.LibraryFormatter.new = function() {
  this[genericParameters] = new (IdentityMapOfString$String()).new();
  ;
}).prototype = _debugger.LibraryFormatter.prototype;
;
_debugger.LibraryFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.LibraryFormatter, "dart:_debugger");
;
_debugger.FunctionFormatter = class FunctionFormatter extends core.Object {
  accept(object, config) {
    if (_debugger._typeof(object) !== "function") return false;
    return dart.getReifiedType(object) != null;
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    try {
      return dart.typeName(dart.getReifiedType(object));
    } catch (e$) {
      let e = dart.getThrown(e$);
      return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
    }
  }
  children(object) {
    return JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "signature", value: this.preview(object)}), new _debugger.NameValuePair.new({name: "JavaScript Function", value: object, config: _debugger.JsonMLConfig.skipDart})]);
  }
};
(_debugger.FunctionFormatter.new = function() {
  ;
}).prototype = _debugger.FunctionFormatter.prototype;
;
_debugger.FunctionFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.FunctionFormatter, "dart:_debugger");
_debugger.MapOverviewFormatter = class MapOverviewFormatter extends core.Object {
  accept(object, config) {
    return core.Map.is(object);
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    let map = core.Map._check(object);
    try {
      return dart.str(_debugger.getObjectTypeName(map));
    } catch (e$) {
      let e = dart.getThrown(e$);
      return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
    }
  }
  children(object) {
    return JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "[[instance view]]", value: object, config: _debugger.JsonMLConfig.asObject}), new _debugger.NameValuePair.new({name: "[[entries]]", value: object, config: _debugger.JsonMLConfig.asMap})]);
  }
};
(_debugger.MapOverviewFormatter.new = function() {
  ;
}).prototype = _debugger.MapOverviewFormatter.prototype;
;
_debugger.MapOverviewFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.MapOverviewFormatter, "dart:_debugger");
_debugger.MapFormatter = class MapFormatter extends core.Object {
  accept(object, config) {
    return _js_helper.InternalMap.is(object) || dart.equals(config, _debugger.JsonMLConfig.asMap);
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    let map = core.Map._check(object);
    try {
      return dart.str(_debugger.getObjectTypeName(map)) + " length " + dart.str(map[$length]);
    } catch (e$) {
      let e = dart.getThrown(e$);
      return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
    }
  }
  children(object) {
    let map = core.Map._check(object);
    let entries = new (_HashSetOfNameValuePair()).new();
    map[$forEach](dart.fn((key, value) => {
      let entryWrapper = new _debugger.MapEntry.new({key: key, value: value});
      entries.add(new _debugger.NameValuePair.new({name: dart.toString(entries[$length]), value: entryWrapper}));
    }, dynamicAnddynamicToNull()));
    _debugger.addMetadataChildren(object, entries);
    return entries[$toList]();
  }
};
(_debugger.MapFormatter.new = function() {
  ;
}).prototype = _debugger.MapFormatter.prototype;
;
_debugger.MapFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.MapFormatter, "dart:_debugger");
_debugger.IterableFormatter = class IterableFormatter extends core.Object {
  accept(object, config) {
    return core.Iterable.is(object);
  }
  preview(object) {
    let iterable = core.Iterable._check(object);
    try {
      let length = iterable[$length];
      return dart.str(_debugger.getObjectTypeName(iterable)) + " length " + dart.str(length);
    } catch (e) {
      let _ = dart.getThrown(e);
      return dart.str(_debugger.getObjectTypeName(iterable));
    }
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    let children = new (_HashSetOfNameValuePair()).new();
    children.addAll(new _debugger.IterableSpan.new(0, core.int._check(dart.dload(object, 'length')), core.Iterable._check(object)).children());
    _debugger.addMetadataChildren(object, children);
    return children[$toList]();
  }
};
(_debugger.IterableFormatter.new = function() {
  ;
}).prototype = _debugger.IterableFormatter.prototype;
;
_debugger.IterableFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.IterableFormatter, "dart:_debugger");
_debugger.NamedConstructorFormatter = class NamedConstructorFormatter extends core.Object {
  accept(object, config) {
    return _debugger.NamedConstructor.is(object);
  }
  preview(object) {
    return "Named Constructor";
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    return JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "JavaScript Function", value: object, config: _debugger.JsonMLConfig.skipDart})]);
  }
};
(_debugger.NamedConstructorFormatter.new = function() {
  ;
}).prototype = _debugger.NamedConstructorFormatter.prototype;
;
_debugger.NamedConstructorFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.NamedConstructorFormatter, "dart:_debugger");
_debugger.MapEntryFormatter = class MapEntryFormatter extends core.Object {
  accept(object, config) {
    return _debugger.MapEntry.is(object);
  }
  preview(object) {
    let entry = _debugger.MapEntry._check(object);
    return dart.str(_debugger.safePreview(entry.key, _debugger.JsonMLConfig.none)) + " => " + dart.str(_debugger.safePreview(entry.value, _debugger.JsonMLConfig.none));
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    return JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "key", value: dart.dload(object, 'key'), config: _debugger.JsonMLConfig.keyToString}), new _debugger.NameValuePair.new({name: "value", value: dart.dload(object, 'value')})]);
  }
};
(_debugger.MapEntryFormatter.new = function() {
  ;
}).prototype = _debugger.MapEntryFormatter.prototype;
;
_debugger.MapEntryFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.MapEntryFormatter, "dart:_debugger");
let C7;
_debugger.HeritageClauseFormatter = class HeritageClauseFormatter extends core.Object {
  accept(object, config) {
    return _debugger.HeritageClause.is(object);
  }
  preview(object) {
    let clause = _debugger.HeritageClause._check(object);
    let typeNames = clause.types[$map](core.String, C7 || CT.C7);
    return dart.str(clause.name) + " " + dart.str(typeNames[$join](", "));
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    let clause = _debugger.HeritageClause._check(object);
    let children = JSArrayOfNameValuePair().of([]);
    for (let type of clause.types) {
      children[$add](new _debugger.NameValuePair.new({value: type, config: _debugger.JsonMLConfig.asClass}));
    }
    return children;
  }
};
(_debugger.HeritageClauseFormatter.new = function() {
  ;
}).prototype = _debugger.HeritageClauseFormatter.prototype;
;
_debugger.HeritageClauseFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.HeritageClauseFormatter, "dart:_debugger");
_debugger.IterableSpanFormatter = class IterableSpanFormatter extends core.Object {
  accept(object, config) {
    return _debugger.IterableSpan.is(object);
  }
  preview(object) {
    return "[" + dart.str(dart.dload(object, 'start')) + "..." + dart.str(dart.dsend(dart.dload(object, 'end'), '-', [1])) + "]";
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    return ListOfNameValuePair()._check(dart.dsend(object, 'children', []));
  }
};
(_debugger.IterableSpanFormatter.new = function() {
  ;
}).prototype = _debugger.IterableSpanFormatter.prototype;
;
_debugger.IterableSpanFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.IterableSpanFormatter, "dart:_debugger");
_debugger.ErrorAndExceptionFormatter = class ErrorAndExceptionFormatter extends _debugger.ObjectFormatter {
  accept(object, config) {
    return core.Error.is(object) || core.Exception.is(object);
  }
  hasChildren(object) {
    return true;
  }
  preview(object) {
    let trace = dart.stackTrace(object);
    let line = dart.str(trace)[$split]("\n")[$firstWhere](dart.fn(l => l[$contains](_debugger.ErrorAndExceptionFormatter._pattern) && !l[$contains]("dart:sdk") && !l[$contains]("dart_sdk"), StringTobool()), {orElse: dart.fn(() => null, VoidToNull())});
    return line != null ? dart.str(object) + " at " + dart.str(line) : dart.str(object);
  }
  children(object) {
    let trace = dart.stackTrace(object);
    let entries = new (_HashSetOfNameValuePair()).new();
    entries.add(new _debugger.NameValuePair.new({name: "stackTrace", value: trace}));
    this.addInstanceMembers(object, entries);
    _debugger.addMetadataChildren(object, entries);
    return entries[$toList]();
  }
  addInstanceMembers(object, ret) {
    ret.add(new _debugger.NameValuePair.new({name: "[[instance members]]", value: object, config: _debugger.JsonMLConfig.asObject}));
  }
};
(_debugger.ErrorAndExceptionFormatter.new = function() {
  ;
}).prototype = _debugger.ErrorAndExceptionFormatter.prototype;
;
;
dart.setLibraryUri(_debugger.ErrorAndExceptionFormatter, "dart:_debugger");
dart.defineLazy(_debugger.ErrorAndExceptionFormatter, {
  /*_debugger.ErrorAndExceptionFormatter._pattern*/get _pattern() {
    return core.RegExp.new("\\d+\\:\\d+");
  }
});
_debugger.StackTraceFormatter = class StackTraceFormatter extends core.Object {
  accept(object, config) {
    return core.StackTrace.is(object);
  }
  preview(object) {
    return "StackTrace";
  }
  hasChildren(object) {
    return true;
  }
  children(object) {
    return dart.toString(object)[$split]("\n")[$map](_debugger.NameValuePair, dart.fn(line => new _debugger.NameValuePair.new({value: line[$replaceFirst](core.RegExp.new("^\\s+at\\s"), ""), hideName: true}), StringToNameValuePair()))[$toList]();
  }
};
(_debugger.StackTraceFormatter.new = function() {
  ;
}).prototype = _debugger.StackTraceFormatter.prototype;
;
_debugger.StackTraceFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.StackTraceFormatter, "dart:_debugger");
_debugger.ClassFormatter = class ClassFormatter extends core.Object {
  accept(object, config) {
    return dart.equals(config, _debugger.JsonMLConfig.asClass);
  }
  preview(type) {
    let $implements = dart.getImplements(type);
    let typeName = _debugger.getTypeName(type);
    if ($implements != null) {
      let typeNames = $implements()[$map](core.String, C7 || CT.C7);
      return dart.str(typeName) + " implements " + dart.str(typeNames[$join](", "));
    } else {
      return typeName;
    }
  }
  hasChildren(object) {
    return true;
  }
  children(type) {
    let t10, t10$;
    let ret = new (_HashSetOfNameValuePair()).new();
    let staticProperties = new (_HashSetOfNameValuePair()).new();
    let staticMethods = new (_HashSetOfNameValuePair()).new();
    _debugger.addPropertiesFromSignature(dart.getStaticFields(type), staticProperties, type, false);
    _debugger.addPropertiesFromSignature(dart.getStaticGetters(type), staticProperties, type, false);
    _debugger.addPropertiesFromSignature(dart.getStaticMethods(type), staticMethods, type, false);
    if (dart.test(staticProperties[$isNotEmpty]) || dart.test(staticMethods[$isNotEmpty])) {
      t10 = ret;
      t10.add(new _debugger.NameValuePair.new({value: "[[Static members]]", hideName: true}));
      t10.addAll(_debugger.sortProperties(staticProperties));
      t10.addAll(_debugger.sortProperties(staticMethods));
      t10;
    }
    let instanceMethods = new (_HashSetOfNameValuePair()).new();
    _debugger.addPropertiesFromSignature(dart.getMethods(type), instanceMethods, type.prototype, false, {tagTypes: true});
    if (dart.test(instanceMethods[$isNotEmpty])) {
      t10$ = ret;
      t10$.add(new _debugger.NameValuePair.new({value: "[[Instance Methods]]", hideName: true}));
      t10$.addAll(_debugger.sortProperties(instanceMethods));
      t10$;
    }
    let mixin = dart.getMixin(type);
    if (mixin != null) {
      ret.add(new _debugger.NameValuePair.new({name: "[[Mixins]]", value: new _debugger.HeritageClause.new("mixins", [mixin])}));
    }
    let baseProto = type.__proto__;
    if (baseProto != null && !dart.test(dart.isJsInterop(baseProto))) {
      ret.add(new _debugger.NameValuePair.new({name: "[[base class]]", value: baseProto, config: _debugger.JsonMLConfig.asClass}));
    }
    return ret[$toList]();
  }
};
(_debugger.ClassFormatter.new = function() {
  ;
}).prototype = _debugger.ClassFormatter.prototype;
;
_debugger.ClassFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.ClassFormatter, "dart:_debugger");
_debugger.TypeFormatter = class TypeFormatter extends core.Object {
  accept(object, config) {
    return core.Type.is(object);
  }
  preview(object) {
    return dart.toString(object);
  }
  hasChildren(object) {
    return false;
  }
  children(object) {
    return JSArrayOfNameValuePair().of([]);
  }
};
(_debugger.TypeFormatter.new = function() {
  ;
}).prototype = _debugger.TypeFormatter.prototype;
;
_debugger.TypeFormatter[dart.implements] = () => [_debugger.Formatter];
;
dart.setLibraryUri(_debugger.TypeFormatter, "dart:_debugger");
_debugger._MethodStats = class _MethodStats extends core.Object {};
(_debugger._MethodStats.new = function(typeName, frame) {
  this.count = null;
  this.typeName = typeName;
  this.frame = frame;
  this.count = 0.0;
}).prototype = _debugger._MethodStats.prototype;
;
dart.setLibraryUri(_debugger._MethodStats, "dart:_debugger");
;
_debugger._CallMethodRecord = class _CallMethodRecord extends core.Object {};
(_debugger._CallMethodRecord.new = function(jsError, type) {
  this.jsError = jsError;
  this.type = type;
  ;
}).prototype = _debugger._CallMethodRecord.prototype;
;
dart.setLibraryUri(_debugger._CallMethodRecord, "dart:_debugger");
;
_debugger._typeof = function _typeof(object) {
  return typeof object;
};
_debugger.getOwnPropertyNames = function getOwnPropertyNames(object) {
  return JSArrayOfString().of(dart.getOwnPropertyNames(object));
};
_debugger.getOwnPropertySymbols = function getOwnPropertySymbols(object) {
  return Object.getOwnPropertySymbols(object);
};
_debugger.addMetadataChildren = function addMetadataChildren(object, ret) {
  ret.add(new _debugger.NameValuePair.new({name: "[[class]]", value: dart.getReifiedType(object), config: _debugger.JsonMLConfig.asClass}));
};
_debugger.addPropertiesFromSignature = function addPropertiesFromSignature(sig, properties, object, walkPrototypeChain, opts) {
  let t10;
  let tagTypes = opts && 'tagTypes' in opts ? opts.tagTypes : false;
  let skippedNames = (t10 = new collection._HashSet.new(), t10.add("hashCode"), t10);
  let objectPrototype = Object.prototype;
  while (sig != null && !core.identical(sig, objectPrototype)) {
    for (let symbol of _debugger.getOwnPropertySymbols(sig)) {
      let dartName = _debugger.symbolName(symbol);
      let dartXPrefix = "dartx.";
      if (dartName[$startsWith](dartXPrefix)) {
        dartName = dartName[$substring](dartXPrefix.length);
      }
      if (dart.test(skippedNames.contains(dartName))) continue;
      let value = _debugger.safeGetProperty(object, symbol);
      if (dart.dtest(tagTypes) && _debugger._typeof(value) === "function") {
        dart.fn(value, sig[symbol]);
      }
      properties.add(new _debugger.NameValuePair.new({name: dartName, value: value}));
    }
    for (let name of _debugger.getOwnPropertyNames(sig)) {
      let value = _debugger.safeGetProperty(object, name);
      if (dart.test(skippedNames.contains(name))) continue;
      if (dart.dtest(tagTypes) && _debugger._typeof(value) === "function") {
        dart.fn(value, sig[name]);
      }
      properties.add(new _debugger.NameValuePair.new({name: name, value: value}));
    }
    if (!dart.test(walkPrototypeChain)) break;
    sig = dart.getPrototypeOf(sig);
  }
};
_debugger.sortProperties = function sortProperties(properties) {
  let sortedProperties = properties[$toList]();
  sortedProperties[$sort](dart.fn((a, b) => {
    let aPrivate = a.name[$startsWith]("_");
    let bPrivate = b.name[$startsWith]("_");
    if (!aPrivate[$_equals](bPrivate)) return aPrivate ? 1 : -1;
    return a.name[$compareTo](b.name);
  }, NameValuePairAndNameValuePairToint()));
  return sortedProperties;
};
_debugger.getObjectTypeName = function getObjectTypeName(object) {
  let reifiedType = dart.getReifiedType(object);
  if (reifiedType == null) {
    if (_debugger._typeof(object) === "function") {
      return "[[Raw JavaScript Function]]";
    }
    return "<Error getting type name>";
  }
  return _debugger.getTypeName(reifiedType);
};
_debugger.getTypeName = function getTypeName(type) {
  return dart.typeName(type);
};
_debugger.safePreview = function safePreview(object, config) {
  try {
    let preview = _debugger._devtoolsFormatter[_simpleFormatter$].preview(object, config);
    if (preview != null) return preview;
    return dart.toString(object);
  } catch (e$) {
    let e = dart.getThrown(e$);
    return "<Exception thrown> " + dart.str(e);
  }
};
_debugger.symbolName = function symbolName(symbol) {
  let name = dart.toString(symbol);
  if (!name[$startsWith]("Symbol(")) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/debugger.dart", 159, 10, "name.startsWith('Symbol(')");
  return name[$substring]("Symbol(".length, name.length - 1);
};
_debugger.hasMethod = function hasMethod$(object, name) {
  try {
    return dart.hasMethod(object, name);
  } catch (e$) {
    let e = dart.getThrown(e$);
    return false;
  }
};
_debugger.safeGetProperty = function safeGetProperty(protoChain, name) {
  try {
    return _debugger.JSNative.getProperty(protoChain, name);
  } catch (e$) {
    let e = dart.getThrown(e$);
    return "<Exception thrown> " + dart.str(e);
  }
};
_debugger.safeProperties = function safeProperties(object) {
  return LinkedHashMapOfdynamic$Object().fromIterable(_debugger.getOwnPropertyNames(object)[$where](dart.fn(each => _debugger.safeGetProperty(object, each) != null, StringTobool())), {key: dart.fn(name => name, dynamicTodynamic()), value: dart.fn(name => _debugger.safeGetProperty(object, name), dynamicToObject())});
};
_debugger.isNativeJavaScriptObject = function isNativeJavaScriptObject(object) {
  let type = _debugger._typeof(object);
  if (type !== "object" && type !== "function") return true;
  if (dart.test(dart.isJsInterop(object)) && dart.getModuleName(object) == null) {
    return true;
  }
  return false;
};
_debugger.registerDevtoolsFormatter = function registerDevtoolsFormatter() {
  dart.global.devtoolsFormatters = [_debugger._devtoolsFormatter];
};
_debugger.getModuleNames = function getModuleNames$() {
  return dart.getModuleNames();
};
_debugger.getModuleLibraries = function getModuleLibraries$(name) {
  return dart.getModuleLibraries(name);
};
_debugger.getDynamicStats = function getDynamicStats() {
  let t13;
  let callMethodStats = new (LinkedMapOfString$_MethodStats()).new();
  if (dart.notNull(_debugger._callMethodRecords[$length]) > 0) {
    let recordRatio = dart.notNull(_debugger._totalCallRecords) / dart.notNull(_debugger._callMethodRecords[$length]);
    for (let record of _debugger._callMethodRecords) {
      let stackStr = record.jsError.stack;
      let frames = stackStr[$split]("\n");
      let src = frames[$skip](2)[$map](core.String, dart.fn(f => _debugger._frameMappingCache[$putIfAbsent](f, dart.fn(() => _debugger.stackTraceMapper("\n" + dart.str(f)), VoidToString())), StringToString()))[$firstWhere](dart.fn(f => !f[$startsWith]("dart:"), StringTobool()), {orElse: dart.fn(() => "", VoidToString())});
      let actualTypeName = dart.typeName(record.type);
      t13 = callMethodStats[$putIfAbsent](actualTypeName + " <" + dart.str(src) + ">", dart.fn(() => new _debugger._MethodStats.new(actualTypeName, src), VoidTo_MethodStats()));
      t13.count = dart.notNull(t13.count) + recordRatio;
    }
    if (_debugger._totalCallRecords != _debugger._callMethodRecords[$length]) {
      for (let k of callMethodStats[$keys][$toList]()) {
        let stats = callMethodStats[$_get](k);
        let threshold = dart.notNull(_debugger._minCount) * recordRatio;
        if (dart.notNull(stats.count) + 0.001 < threshold) {
          callMethodStats[$remove](k);
        }
      }
    }
  }
  _debugger._callMethodRecords[$clear]();
  _debugger._totalCallRecords = 0;
  let keys = callMethodStats[$keys][$toList]();
  keys[$sort](dart.fn((a, b) => callMethodStats[$_get](b).count[$compareTo](callMethodStats[$_get](a).count), StringAndStringToint()));
  let ret = JSArrayOfListOfObject().of([]);
  for (let key of keys) {
    let stats = callMethodStats[$_get](key);
    ret[$add](JSArrayOfObject().of([stats.typeName, stats.frame, stats.count[$round]()]));
  }
  return ret;
};
_debugger.clearDynamicStats = function clearDynamicStats() {
  _debugger._callMethodRecords[$clear]();
};
_debugger.trackCall = function trackCall(obj) {
  if (!_debugger._trackProfile) return;
  let index = -1;
  _debugger._totalCallRecords = dart.notNull(_debugger._totalCallRecords) + 1;
  if (_debugger._callMethodRecords[$length] == _debugger._callRecordSampleSize) {
    index = Math.floor(Math.random() * _debugger._totalCallRecords);
    if (index >= dart.notNull(_debugger._callMethodRecords[$length])) return;
  }
  let record = new _debugger._CallMethodRecord.new(new Error(), dart.getReifiedType(obj));
  if (index === -1) {
    _debugger._callMethodRecords[$add](record);
  } else {
    _debugger._callMethodRecords[$_set](index, record);
  }
};
dart.copyProperties(_debugger, {
  get stackTraceMapper() {
    let _util = dart.global.$dartStackTraceUtility;
    return _util != null ? _util.mapper : null;
  },
  get _trackProfile() {
    return dart.__trackProfile;
  }
});
dart.defineLazy(_debugger, {
  /*_debugger._maxSpanLength*/get _maxSpanLength() {
    return 100;
  },
  set _maxSpanLength(_) {},
  /*_debugger._devtoolsFormatter*/get _devtoolsFormatter() {
    return new _debugger.JsonMLFormatter.new(new _debugger.DartFormatter.new());
  },
  set _devtoolsFormatter(_) {},
  /*_debugger.maxFormatterStringLength*/get maxFormatterStringLength() {
    return 100;
  },
  set maxFormatterStringLength(_) {},
  /*_debugger._callRecordSampleSize*/get _callRecordSampleSize() {
    return 5000;
  },
  set _callRecordSampleSize(_) {},
  /*_debugger._callMethodRecords*/get _callMethodRecords() {
    return JSArrayOf_CallMethodRecord().of([]);
  },
  set _callMethodRecords(_) {},
  /*_debugger._totalCallRecords*/get _totalCallRecords() {
    return 0;
  },
  set _totalCallRecords(_) {},
  /*_debugger._minCount*/get _minCount() {
    return 2;
  },
  set _minCount(_) {},
  /*_debugger._frameMappingCache*/get _frameMappingCache() {
    return new (LinkedMapOfString$String()).new();
  },
  set _frameMappingCache(_) {}
});
const name$4 = dart.privateName(_foreign_helper, "JSExportName.name");
_foreign_helper.JSExportName = class JSExportName extends core.Object {
  get name() {
    return this[name$4];
  }
  set name(value) {
    super.name = value;
  }
};
(_foreign_helper.JSExportName.new = function(name) {
  this[name$4] = name;
  ;
}).prototype = _foreign_helper.JSExportName.prototype;
;
dart.setLibraryUri(_foreign_helper.JSExportName, "dart:_foreign_helper");
;
const code$ = dart.privateName(_foreign_helper, "JS_CONST.code");
_foreign_helper.JS_CONST = class JS_CONST extends core.Object {
  get code() {
    return this[code$];
  }
  set code(value) {
    super.code = value;
  }
};
(_foreign_helper.JS_CONST.new = function(code) {
  this[code$] = code;
  ;
}).prototype = _foreign_helper.JS_CONST.prototype;
;
dart.setLibraryUri(_foreign_helper.JS_CONST, "dart:_foreign_helper");
;
_foreign_helper._Rest = class _Rest extends core.Object {};
(_foreign_helper._Rest.new = function() {
  ;
}).prototype = _foreign_helper._Rest.prototype;
;
dart.setLibraryUri(_foreign_helper._Rest, "dart:_foreign_helper");
_foreign_helper.JS = function JS(T, typeDescription, codeTemplate, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19) {
  if (arg0 === void 0) arg0 = null;
  if (arg1 === void 0) arg1 = null;
  if (arg2 === void 0) arg2 = null;
  if (arg3 === void 0) arg3 = null;
  if (arg4 === void 0) arg4 = null;
  if (arg5 === void 0) arg5 = null;
  if (arg6 === void 0) arg6 = null;
  if (arg7 === void 0) arg7 = null;
  if (arg8 === void 0) arg8 = null;
  if (arg9 === void 0) arg9 = null;
  if (arg10 === void 0) arg10 = null;
  if (arg11 === void 0) arg11 = null;
  if (arg12 === void 0) arg12 = null;
  if (arg13 === void 0) arg13 = null;
  if (arg14 === void 0) arg14 = null;
  if (arg15 === void 0) arg15 = null;
  if (arg16 === void 0) arg16 = null;
  if (arg17 === void 0) arg17 = null;
  if (arg18 === void 0) arg18 = null;
  if (arg19 === void 0) arg19 = null;
};
_foreign_helper.JS_DART_OBJECT_CONSTRUCTOR = function JS_DART_OBJECT_CONSTRUCTOR() {
};
_foreign_helper.JS_INTERCEPTOR_CONSTANT = function JS_INTERCEPTOR_CONSTANT(type) {
};
_foreign_helper.JS_OPERATOR_IS_PREFIX = function JS_OPERATOR_IS_PREFIX() {
};
_foreign_helper.JS_OPERATOR_AS_PREFIX = function JS_OPERATOR_AS_PREFIX() {
};
_foreign_helper.JS_OBJECT_CLASS_NAME = function JS_OBJECT_CLASS_NAME() {
};
_foreign_helper.JS_NULL_CLASS_NAME = function JS_NULL_CLASS_NAME() {
};
_foreign_helper.JS_FUNCTION_CLASS_NAME = function JS_FUNCTION_CLASS_NAME() {
};
_foreign_helper.JS_IS_INDEXABLE_FIELD_NAME = function JS_IS_INDEXABLE_FIELD_NAME() {
};
_foreign_helper.JS_SIGNATURE_NAME = function JS_SIGNATURE_NAME() {
};
_foreign_helper.JS_TYPEDEF_TAG = function JS_TYPEDEF_TAG() {
};
_foreign_helper.JS_FUNCTION_TYPE_TAG = function JS_FUNCTION_TYPE_TAG() {
};
_foreign_helper.JS_FUNCTION_TYPE_VOID_RETURN_TAG = function JS_FUNCTION_TYPE_VOID_RETURN_TAG() {
};
_foreign_helper.JS_FUNCTION_TYPE_RETURN_TYPE_TAG = function JS_FUNCTION_TYPE_RETURN_TYPE_TAG() {
};
_foreign_helper.JS_FUNCTION_TYPE_REQUIRED_PARAMETERS_TAG = function JS_FUNCTION_TYPE_REQUIRED_PARAMETERS_TAG() {
};
_foreign_helper.JS_FUNCTION_TYPE_OPTIONAL_PARAMETERS_TAG = function JS_FUNCTION_TYPE_OPTIONAL_PARAMETERS_TAG() {
};
_foreign_helper.JS_FUNCTION_TYPE_NAMED_PARAMETERS_TAG = function JS_FUNCTION_TYPE_NAMED_PARAMETERS_TAG() {
};
_foreign_helper.JS_GET_NAME = function JS_GET_NAME(name) {
};
_foreign_helper.JS_GET_FLAG = function JS_GET_FLAG(name) {
};
_foreign_helper.JS_EFFECT = function JS_EFFECT(code) {
  dart.dcall(code, [null]);
};
_foreign_helper.JS_STRING_CONCAT = function JS_STRING_CONCAT(a, b) {
  return a + b;
};
_foreign_helper.spread = function spread(args) {
  dart.throw(new core.StateError.new("The spread function cannot be called, " + "it should be compiled away."));
};
let C8;
dart.defineLazy(_foreign_helper, {
  /*_foreign_helper.rest*/get rest() {
    return C8 || CT.C8;
  }
});
_interceptors.Interceptor = class Interceptor extends core.Object {
  toString() {
    return this.toString();
  }
};
(_interceptors.Interceptor.new = function() {
  ;
}).prototype = _interceptors.Interceptor.prototype;
;
dart.setLibraryUri(_interceptors.Interceptor, "dart:_interceptors");
dart.defineExtensionMethods(_interceptors.Interceptor, ['toString']);
_interceptors.JSBool = class JSBool extends _interceptors.Interceptor {
  [$toString]() {
    return String(this);
  }
  get [$hashCode]() {
    return this ? 2 * 3 * 23 * 3761 : 269 * 811;
  }
  [$bitAnd](other) {
    if (other == null) dart.argumentError(other);
    return other && this;
  }
  [$bitOr](other) {
    if (other == null) dart.argumentError(other);
    return other || this;
  }
  [$bitXor](other) {
    if (other == null) dart.argumentError(other);
    return this !== other;
  }
  get [$runtimeType]() {
    return dart.wrapType(core.bool);
  }
};
(_interceptors.JSBool.new = function() {
  _interceptors.JSBool.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSBool.prototype;
;
_interceptors.JSBool[dart.implements] = () => [core.bool];
;
dart.setLibraryUri(_interceptors.JSBool, "dart:_interceptors");
dart.definePrimitiveHashCode(_interceptors.JSBool.prototype);
dart.registerExtension("Boolean", _interceptors.JSBool);
const _is_JSIndexable_default = Symbol('_is_JSIndexable_default');
_interceptors.JSIndexable$ = dart.generic(E => {
  class JSIndexable extends core.Object {}
  (JSIndexable.new = function() {
    ;
  }).prototype = JSIndexable.prototype;
  ;
  JSIndexable.prototype[_is_JSIndexable_default] = true;
  dart.setLibraryUri(JSIndexable, "dart:_interceptors");
  return JSIndexable;
});
_interceptors.JSIndexable = _interceptors.JSIndexable$();
;
_interceptors.JSObject = class JSObject extends core.Object {};
(_interceptors.JSObject.new = function() {
  ;
}).prototype = _interceptors.JSObject.prototype;
;
dart.setLibraryUri(_interceptors.JSObject, "dart:_interceptors");
_interceptors.JavaScriptObject = class JavaScriptObject extends _interceptors.Interceptor {
  get hashCode() {
    return 0;
  }
  get runtimeType() {
    return dart.wrapType(_interceptors.JSObject);
  }
};
(_interceptors.JavaScriptObject.new = function() {
  _interceptors.JavaScriptObject.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JavaScriptObject.prototype;
;
_interceptors.JavaScriptObject[dart.implements] = () => [_interceptors.JSObject];
dart.setLibraryUri(_interceptors.JavaScriptObject, "dart:_interceptors");
dart.defineExtensionAccessors(_interceptors.JavaScriptObject, ['hashCode', 'runtimeType']);
_interceptors.PlainJavaScriptObject = class PlainJavaScriptObject extends _interceptors.JavaScriptObject {};
(_interceptors.PlainJavaScriptObject.new = function() {
  _interceptors.PlainJavaScriptObject.__proto__.new.call(this);
  ;
}).prototype = _interceptors.PlainJavaScriptObject.prototype;
;
dart.setLibraryUri(_interceptors.PlainJavaScriptObject, "dart:_interceptors");
_interceptors.UnknownJavaScriptObject = class UnknownJavaScriptObject extends _interceptors.JavaScriptObject {
  toString() {
    return String(this);
  }
};
(_interceptors.UnknownJavaScriptObject.new = function() {
  _interceptors.UnknownJavaScriptObject.__proto__.new.call(this);
  ;
}).prototype = _interceptors.UnknownJavaScriptObject.prototype;
;
dart.setLibraryUri(_interceptors.UnknownJavaScriptObject, "dart:_interceptors");
dart.defineExtensionMethods(_interceptors.UnknownJavaScriptObject, ['toString']);
_interceptors.NativeError = class NativeError extends _interceptors.Interceptor {
  dartStack() {
    return this.stack;
  }
};
(_interceptors.NativeError.new = function() {
  _interceptors.NativeError.__proto__.new.call(this);
  ;
}).prototype = _interceptors.NativeError.prototype;
;
;
dart.setLibraryUri(_interceptors.NativeError, "dart:_interceptors");
dart.defineExtensionMethods(_interceptors.NativeError, ['dartStack']);
const _fieldName = dart.privateName(_interceptors, "_fieldName");
const _functionCallTarget = dart.privateName(_interceptors, "_functionCallTarget");
const _receiver = dart.privateName(_interceptors, "_receiver");
let C9;
const _receiver$ = dart.privateName(core, "_receiver");
const _existingArgumentNames = dart.privateName(_interceptors, "_existingArgumentNames");
let C10;
const _existingArgumentNames$ = dart.privateName(core, "_existingArgumentNames");
const _arguments = dart.privateName(_interceptors, "_arguments");
let C11;
const _arguments$ = dart.privateName(core, "_arguments");
const _memberName = dart.privateName(_interceptors, "_memberName");
let C12;
const _memberName$ = dart.privateName(core, "_memberName");
const _invocation = dart.privateName(_interceptors, "_invocation");
let C13;
const _invocation$ = dart.privateName(core, "_invocation");
const _namedArguments = dart.privateName(_interceptors, "_namedArguments");
let C14;
const _namedArguments$ = dart.privateName(core, "_namedArguments");
_interceptors.JSNoSuchMethodError = class JSNoSuchMethodError extends _interceptors.NativeError {
  [_fieldName](message) {
    let t13;
    let match = _interceptors.JSNoSuchMethodError._nullError.firstMatch(message);
    if (match == null) return null;
    let name = match._get(1);
    match = (t13 = _interceptors.JSNoSuchMethodError._extensionName.firstMatch(name), t13 == null ? _interceptors.JSNoSuchMethodError._privateName.firstMatch(name) : t13);
    return match != null ? match._get(1) : name;
  }
  [_functionCallTarget](message) {
    let match = _interceptors.JSNoSuchMethodError._notAFunction.firstMatch(message);
    return match != null ? match._get(1) : null;
  }
  [$dartStack]() {
    let stack = super[$dartStack]();
    stack = dart.notNull(this[$toString]()) + "\n" + dart.notNull(stack[$split]("\n")[$sublist](1)[$join]("\n"));
    return stack;
  }
  get [$stackTrace]() {
    return dart.stackTrace(this);
  }
  [$toString]() {
    let message = this.message;
    let callTarget = this[_functionCallTarget](message);
    if (callTarget != null) {
      return "NoSuchMethodError: tried to call a non-function, such as null: " + "'" + dart.str(callTarget) + "'";
    }
    let name = this[_fieldName](message);
    if (name == null) {
      return this.toString();
    }
    return "NoSuchMethodError: invalid member on null: '" + dart.str(name) + "'";
  }
  get [_receiver$]() {
    return this[$noSuchMethod](new core._Invocation.getter(C9 || CT.C9));
  }
  get [_existingArgumentNames$]() {
    return core.List._check(this[$noSuchMethod](new core._Invocation.getter(C10 || CT.C10)));
  }
  get [_arguments$]() {
    return core.List._check(this[$noSuchMethod](new core._Invocation.getter(C11 || CT.C11)));
  }
  get [_memberName$]() {
    return core.Symbol._check(this[$noSuchMethod](new core._Invocation.getter(C12 || CT.C12)));
  }
  get [_invocation$]() {
    return core.Invocation._check(this[$noSuchMethod](new core._Invocation.getter(C13 || CT.C13)));
  }
  get [_namedArguments$]() {
    return MapOfSymbol$dynamic()._check(this[$noSuchMethod](new core._Invocation.getter(C14 || CT.C14)));
  }
};
(_interceptors.JSNoSuchMethodError.new = function() {
  _interceptors.JSNoSuchMethodError.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSNoSuchMethodError.prototype;
;
_interceptors.JSNoSuchMethodError[dart.implements] = () => [core.NoSuchMethodError];
;
dart.setGetterSignature(_interceptors.JSNoSuchMethodError, () => ({
  __proto__: dart.getGetters(_interceptors.JSNoSuchMethodError.__proto__),
  [$stackTrace]: core.StackTrace,
  [_receiver$]: core.Object,
  [_existingArgumentNames$]: core.List,
  [_arguments$]: core.List,
  [_memberName$]: core.Symbol,
  [_invocation$]: core.Invocation,
  [_namedArguments$]: core.Map$(core.Symbol, dart.dynamic)
}));
dart.setLibraryUri(_interceptors.JSNoSuchMethodError, "dart:_interceptors");
dart.defineLazy(_interceptors.JSNoSuchMethodError, {
  /*_interceptors.JSNoSuchMethodError._nullError*/get _nullError() {
    return core.RegExp.new("^Cannot read property '(.+)' of null$");
  },
  /*_interceptors.JSNoSuchMethodError._notAFunction*/get _notAFunction() {
    return core.RegExp.new("^(.+) is not a function$");
  },
  /*_interceptors.JSNoSuchMethodError._extensionName*/get _extensionName() {
    return core.RegExp.new("^Symbol\\(dartx\\.(.+)\\)$");
  },
  /*_interceptors.JSNoSuchMethodError._privateName*/get _privateName() {
    return core.RegExp.new("^Symbol\\((_.+)\\)$");
  }
});
dart.registerExtension("TypeError", _interceptors.JSNoSuchMethodError);
_interceptors.JSFunction = class JSFunction extends _interceptors.Interceptor {
  [$toString]() {
    if (dart.isType(this)) return dart.typeName(this);
    return "Closure: " + dart.typeName(dart.getReifiedType(this)) + " from: " + this;
  }
  [$_equals](other) {
    if (other == null) return false;
    let boundObj = this._boundObject;
    if (boundObj == null) return this === other;
    return boundObj === other._boundObject && this._boundMethod === other._boundMethod;
  }
  get [$hashCode]() {
    let boundObj = this._boundObject;
    if (boundObj == null) return core.identityHashCode(this);
    let boundMethod = this._boundMethod;
    let hash = 17 * 31 + dart.notNull(dart.hashCode(boundObj)) & 536870911;
    return hash * 31 + dart.notNull(core.identityHashCode(boundMethod)) & 536870911;
  }
  get [$runtimeType]() {
    return dart.wrapType(dart.getReifiedType(this));
  }
};
(_interceptors.JSFunction.new = function() {
  _interceptors.JSFunction.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSFunction.prototype;
;
dart.setLibraryUri(_interceptors.JSFunction, "dart:_interceptors");
dart.registerExtension("Function", _interceptors.JSFunction);
_interceptors.JSNull = class JSNull extends core.Object {
  toString() {
    return "null";
  }
  noSuchMethod(i) {
    return dart.defaultNoSuchMethod(null, i);
  }
};
(_interceptors.JSNull.new = function() {
  ;
}).prototype = _interceptors.JSNull.prototype;
;
dart.setLibraryUri(_interceptors.JSNull, "dart:_interceptors");
dart.defineExtensionMethods(_interceptors.JSNull, ['toString', 'noSuchMethod']);
const _hasValue = dart.privateName(_interceptors, "_hasValue");
let C15;
const _hasValue$ = dart.privateName(core, "_hasValue");
const _errorExplanation = dart.privateName(_interceptors, "_errorExplanation");
let C16;
const _errorExplanation$ = dart.privateName(core, "_errorExplanation");
const _errorName = dart.privateName(_interceptors, "_errorName");
let C17;
const _errorName$ = dart.privateName(core, "_errorName");
_interceptors.JSRangeError = class JSRangeError extends _interceptors.Interceptor {
  get [$stackTrace]() {
    return dart.stackTrace(this);
  }
  get [$invalidValue]() {
    return null;
  }
  get [$name]() {
    return null;
  }
  get [$message]() {
    return this.message;
  }
  [$toString]() {
    return "Invalid argument: " + dart.str(this[$message]);
  }
  get [_hasValue$]() {
    return core.bool._check(this[$noSuchMethod](new core._Invocation.getter(C15 || CT.C15)));
  }
  get [_errorExplanation$]() {
    return core.String._check(this[$noSuchMethod](new core._Invocation.getter(C16 || CT.C16)));
  }
  get [_errorName$]() {
    return core.String._check(this[$noSuchMethod](new core._Invocation.getter(C17 || CT.C17)));
  }
};
(_interceptors.JSRangeError.new = function() {
  _interceptors.JSRangeError.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSRangeError.prototype;
;
_interceptors.JSRangeError[dart.implements] = () => [core.ArgumentError];
dart.setGetterSignature(_interceptors.JSRangeError, () => ({
  __proto__: dart.getGetters(_interceptors.JSRangeError.__proto__),
  [$stackTrace]: core.StackTrace,
  [$invalidValue]: dart.dynamic,
  [$name]: core.String,
  [$message]: dart.dynamic,
  [_hasValue$]: core.bool,
  [_errorExplanation$]: core.String,
  [_errorName$]: core.String
}));
dart.setLibraryUri(_interceptors.JSRangeError, "dart:_interceptors");
dart.registerExtension("RangeError", _interceptors.JSRangeError);
const _removeWhere = dart.privateName(_interceptors, "_removeWhere");
const _is_JSArray_default = Symbol('_is_JSArray_default');
_interceptors.JSArray$ = dart.generic(E => {
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  let SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  let TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  let SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  let EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  let VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  let JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let ReversedListIterableOfE = () => (ReversedListIterableOfE = dart.constFn(_internal.ReversedListIterable$(E)))();
  let LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
  let ArrayIteratorOfE = () => (ArrayIteratorOfE = dart.constFn(_interceptors.ArrayIterator$(E)))();
  let ListMapViewOfE = () => (ListMapViewOfE = dart.constFn(_internal.ListMapView$(E)))();
  let FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  class JSArray extends core.Object {
    constructor() {
      return [];
    }
    static of(list) {
      list.__proto__ = JSArray.prototype;
      return list;
    }
    static fixed(list) {
      list.__proto__ = JSArray.prototype;
      list.fixed$length = Array;
      return list;
    }
    static unmodifiable(list) {
      list.__proto__ = JSArray.prototype;
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    }
    static markFixedList(list) {
      list.fixed$length = Array;
    }
    static markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
    }
    [$checkMutable](reason) {
      if (this.immutable$list) {
        dart.throw(new core.UnsupportedError.new(core.String._check(reason)));
      }
    }
    [$checkGrowable](reason) {
      if (this.fixed$length) {
        dart.throw(new core.UnsupportedError.new(core.String._check(reason)));
      }
    }
    [$cast](R) {
      return core.List.castFrom(E, R, this);
    }
    [$add](value) {
      E._check(value);
      this[$checkGrowable]("add");
      this.push(value);
    }
    [$removeAt](index) {
      if (index == null) dart.argumentError(index);
      this[$checkGrowable]("removeAt");
      if (index < 0 || index >= this[$length]) {
        dart.throw(new core.RangeError.value(index));
      }
      return this.splice(index, 1)[0];
    }
    [$insert](index, value) {
      if (index == null) dart.argumentError(index);
      E._check(value);
      this[$checkGrowable]("insert");
      if (index < 0 || index > this[$length]) {
        dart.throw(new core.RangeError.value(index));
      }
      this.splice(index, 0, value);
    }
    [$insertAll](index, iterable) {
      if (index == null) dart.argumentError(index);
      IterableOfE()._check(iterable);
      this[$checkGrowable]("insertAll");
      core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
      if (!_internal.EfficientLengthIterable.is(iterable)) {
        iterable = iterable[$toList]();
      }
      let insertionLength = dart.notNull(iterable[$length]);
      this[$length] = this[$length] + insertionLength;
      let end = index + insertionLength;
      this[$setRange](end, this[$length], this, index);
      this[$setRange](index, end, iterable);
    }
    [$setAll](index, iterable) {
      let t13;
      if (index == null) dart.argumentError(index);
      IterableOfE()._check(iterable);
      this[$checkMutable]("setAll");
      core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
      for (let element of iterable) {
        this[$_set]((t13 = index, index = t13 + 1, t13), element);
      }
    }
    [$removeLast]() {
      this[$checkGrowable]("removeLast");
      if (this[$length] === 0) dart.throw(_js_helper.diagnoseIndexError(this, -1));
      return this.pop();
    }
    [$remove](element) {
      this[$checkGrowable]("remove");
      let length = this[$length];
      for (let i = 0; i < length; i = i + 1) {
        if (dart.equals(this[$_get](i), element)) {
          this.splice(i, 1);
          return true;
        }
      }
      return false;
    }
    [$removeWhere](test) {
      this[$checkGrowable]("removeWhere");
      this[_removeWhere](test, true);
    }
    [$retainWhere](test) {
      this[$checkGrowable]("retainWhere");
      this[_removeWhere](test, false);
    }
    [_removeWhere](test, removeMatching) {
      let retained = [];
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        if ((!dart.test(test(element)))[$_equals](removeMatching)) {
          retained[$add](element);
        }
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      if (retained[$length] === end) return;
      this[$length] = retained[$length];
      let length = dart.notNull(retained[$length]);
      for (let i = 0; i < length; i = i + 1) {
        this[i] = retained[i];
      }
    }
    [$where](f) {
      return new (WhereIterableOfE()).new(this, f);
    }
    [$expand](T, f) {
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    [$addAll](collection) {
      IterableOfE()._check(collection);
      let i = this[$length];
      this[$checkGrowable]("addAll");
      for (let e of collection) {
        if (!(i === this[$length] || dart.throw(new core.ConcurrentModificationError.new(this)))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_array.dart", 189, 14, "i == this.length || (throw ConcurrentModificationError(this))");
        i = i + 1;
        this.push(e);
      }
    }
    [$clear]() {
      this[$length] = 0;
    }
    [$forEach](f) {
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        f(E._check(element));
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
    }
    [$map](T, f) {
      return new (_internal.MappedListIterable$(E, T)).new(this, f);
    }
    [$join](separator) {
      if (separator === void 0) separator = "";
      let length = this[$length];
      let list = core.List.new(length);
      for (let i = 0; i < length; i = i + 1) {
        list[$_set](i, dart.str(this[$_get](i)));
      }
      return list.join(separator);
    }
    [$take](n) {
      return new (SubListIterableOfE()).new(this, 0, n);
    }
    [$takeWhile](test) {
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    [$skip](n) {
      return new (SubListIterableOfE()).new(this, n, null);
    }
    [$skipWhile](test) {
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    [$reduce](combine) {
      EAndEToE()._check(combine);
      let length = this[$length];
      if (length === 0) dart.throw(_internal.IterableElementError.noElement());
      let value = this[$_get](0);
      for (let i = 1; i < length; i = i + 1) {
        let element = this[i];
        value = combine(value, E._check(element));
        if (length !== this[$length]) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return value;
    }
    [$fold](T, initialValue, combine) {
      let value = initialValue;
      let length = this[$length];
      for (let i = 0; i < length; i = i + 1) {
        let element = this[i];
        value = combine(value, E._check(element));
        if (this[$length] !== length) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return value;
    }
    [$firstWhere](test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        if (dart.test(test(E._check(element)))) return E._check(element);
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    [$lastWhere](test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let length = this[$length];
      for (let i = length - 1; i >= 0; i = i - 1) {
        let element = this[i];
        if (dart.test(test(E._check(element)))) return E._check(element);
        if (length !== this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    [$singleWhere](test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let length = this[$length];
      let match = null;
      let matchFound = false;
      for (let i = 0; i < length; i = i + 1) {
        let element = this[i];
        if (dart.test(test(element))) {
          if (matchFound) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          matchFound = true;
          match = element;
        }
        if (length !== this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (matchFound) return match;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    [$elementAt](index) {
      return this[$_get](index);
    }
    [$sublist](start, end) {
      if (start == null) dart.argumentError(start);
      if (end === void 0) end = null;
      if (start < 0 || start > this[$length]) {
        dart.throw(new core.RangeError.range(start, 0, this[$length], "start"));
      }
      if (end == null) {
        end = this[$length];
      } else {
        let _end = end;
        if (_end < start || _end > this[$length]) {
          dart.throw(new core.RangeError.range(end, start, this[$length], "end"));
        }
      }
      if (start === end) return JSArrayOfE().of([]);
      return JSArrayOfE().of(this.slice(start, end));
    }
    [$getRange](start, end) {
      core.RangeError.checkValidRange(start, end, this[$length]);
      return new (SubListIterableOfE()).new(this, start, end);
    }
    get [$first]() {
      if (this[$length] > 0) return this[$_get](0);
      dart.throw(_internal.IterableElementError.noElement());
    }
    get [$last]() {
      if (this[$length] > 0) return this[$_get](this[$length] - 1);
      dart.throw(_internal.IterableElementError.noElement());
    }
    get [$single]() {
      if (this[$length] === 1) return this[$_get](0);
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      dart.throw(_internal.IterableElementError.tooMany());
    }
    [$removeRange](start, end) {
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      this[$checkGrowable]("removeRange");
      core.RangeError.checkValidRange(start, end, this[$length]);
      let deleteCount = end - start;
      this.splice(start, deleteCount);
    }
    [$setRange](start, end, iterable, skipCount) {
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      IterableOfE()._check(iterable);
      if (skipCount === void 0) skipCount = 0;
      if (skipCount == null) dart.argumentError(skipCount);
      this[$checkMutable]("set range");
      core.RangeError.checkValidRange(start, end, this[$length]);
      let length = end - start;
      if (length === 0) return;
      core.RangeError.checkNotNegative(skipCount, "skipCount");
      let otherList = null;
      let otherStart = 0;
      if (ListOfE().is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = iterable[$skip](skipCount)[$toList]({growable: false});
        otherStart = 0;
      }
      if (otherStart + length > dart.notNull(otherList[$length])) {
        dart.throw(_internal.IterableElementError.tooFew());
      }
      if (otherStart < start) {
        for (let i = length - 1; i >= 0; i = i - 1) {
          let element = otherList[$_get](otherStart + i);
          this[start + i] = element;
        }
      } else {
        for (let i = 0; i < length; i = i + 1) {
          let element = otherList[$_get](otherStart + i);
          this[start + i] = element;
        }
      }
    }
    [$fillRange](start, end, fillValue) {
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      if (fillValue === void 0) fillValue = null;
      E._check(fillValue);
      this[$checkMutable]("fill range");
      core.RangeError.checkValidRange(start, end, this[$length]);
      for (let i = start; i < end; i = i + 1) {
        this[i] = fillValue;
      }
    }
    [$replaceRange](start, end, replacement) {
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      IterableOfE()._check(replacement);
      this[$checkGrowable]("replace range");
      core.RangeError.checkValidRange(start, end, this[$length]);
      if (!_internal.EfficientLengthIterable.is(replacement)) {
        replacement = replacement[$toList]();
      }
      let removeLength = end - start;
      let insertLength = dart.notNull(replacement[$length]);
      if (removeLength >= insertLength) {
        let delta = removeLength - insertLength;
        let insertEnd = start + insertLength;
        let newLength = this[$length] - delta;
        this[$setRange](start, insertEnd, replacement);
        if (delta !== 0) {
          this[$setRange](insertEnd, newLength, this, end);
          this[$length] = newLength;
        }
      } else {
        let delta = insertLength - removeLength;
        let newLength = this[$length] + delta;
        let insertEnd = start + insertLength;
        this[$length] = newLength;
        this[$setRange](insertEnd, newLength, this, end);
        this[$setRange](start, insertEnd, replacement);
      }
    }
    [$any](test) {
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        if (dart.test(test(E._check(element)))) return true;
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return false;
    }
    [$every](test) {
      let end = this[$length];
      for (let i = 0; i < end; i = i + 1) {
        let element = this[i];
        if (!dart.test(test(element))) return false;
        if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return true;
    }
    get [$reversed]() {
      return new (ReversedListIterableOfE()).new(this);
    }
    [$sort](compare) {
      if (compare === void 0) compare = null;
      this[$checkMutable]("sort");
      if (compare == null) {
        _internal.Sort.sort(E, this, dart.fn((a, b) => core.Comparable.compare(core.Comparable._check(a), core.Comparable._check(b)), dynamicAnddynamicToint()));
      } else {
        _internal.Sort.sort(E, this, compare);
      }
    }
    [$shuffle](random) {
      if (random === void 0) random = null;
      this[$checkMutable]("shuffle");
      if (random == null) random = math.Random.new();
      let length = this[$length];
      while (length > 1) {
        let pos = random.nextInt(length);
        length = length - 1;
        let tmp = this[$_get](length);
        this[$_set](length, this[$_get](pos));
        this[$_set](pos, tmp);
      }
    }
    [$indexOf](element, start) {
      if (start === void 0) start = 0;
      if (start == null) dart.argumentError(start);
      let length = this[$length];
      if (start >= length) {
        return -1;
      }
      if (start < 0) {
        start = 0;
      }
      for (let i = start; i < length; i = i + 1) {
        if (dart.equals(this[$_get](i), element)) {
          return i;
        }
      }
      return -1;
    }
    [$lastIndexOf](element, _startIndex) {
      let t13;
      if (_startIndex === void 0) _startIndex = null;
      let startIndex = (t13 = _startIndex, t13 == null ? this[$length] - 1 : t13);
      if (startIndex >= this[$length]) {
        startIndex = this[$length] - 1;
      } else if (startIndex < 0) {
        return -1;
      }
      for (let i = startIndex; i >= 0; i = i - 1) {
        if (dart.equals(this[$_get](i), element)) {
          return i;
        }
      }
      return -1;
    }
    [$contains](other) {
      let length = this[$length];
      for (let i = 0; i < length; i = i + 1) {
        let element = this[i];
        if (dart.equals(element, other)) return true;
      }
      return false;
    }
    get [$isEmpty]() {
      return this[$length] === 0;
    }
    get [$isNotEmpty]() {
      return !this[$isEmpty];
    }
    [$toString]() {
      return collection.ListBase.listToString(this);
    }
    [$toList](opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      if (growable == null) dart.argumentError(growable);
      let list = this.slice();
      if (!growable) _interceptors.JSArray.markFixedList(list);
      return JSArrayOfE().of(list);
    }
    [$toSet]() {
      return LinkedHashSetOfE().from(this);
    }
    get [$iterator]() {
      return new (ArrayIteratorOfE()).new(this);
    }
    get [$hashCode]() {
      return core.identityHashCode(this);
    }
    [$_equals](other) {
      return this === other;
    }
    get [$length]() {
      return this.length;
    }
    set [$length](newLength) {
      if (newLength == null) dart.argumentError(newLength);
      this[$checkGrowable]("set length");
      if (newLength < 0) {
        dart.throw(new core.RangeError.range(newLength, 0, null, "newLength"));
      }
      this.length = newLength;
    }
    [$_get](index) {
      if (index == null || index >= this.length || index < 0) {
        dart.throw(_js_helper.diagnoseIndexError(this, index));
      }
      return this[index];
    }
    [$_set](index, value$) {
      let value = value$;
      E._check(value);
      this[$checkMutable]("indexed set");
      if (index == null || index >= this.length || index < 0) {
        dart.throw(_js_helper.diagnoseIndexError(this, index));
      }
      this[index] = value;
      return value$;
    }
    [$asMap]() {
      return new (ListMapViewOfE()).new(this);
    }
    get [$runtimeType]() {
      return dart.wrapType(core.List$(E));
    }
    [$followedBy](other) {
      IterableOfE()._check(other);
      return FollowedByIterableOfE().firstEfficient(this, other);
    }
    [$whereType](T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    [$plus](other) {
      let t13;
      ListOfE()._check(other);
      let totalLength = this[$length] + dart.notNull(other[$length]);
      t13 = JSArrayOfE().of([]);
      t13[$length] = totalLength;
      t13[$setRange](0, this[$length], this);
      t13[$setRange](this[$length], totalLength, other);
      return t13;
    }
    [$indexWhere](test, start) {
      if (start === void 0) start = 0;
      if (dart.notNull(start) >= this[$length]) return -1;
      if (dart.notNull(start) < 0) start = 0;
      for (let i = start; dart.notNull(i) < this[$length]; i = dart.notNull(i) + 1) {
        if (dart.test(test(this[$_get](i)))) return i;
      }
      return -1;
    }
    [$lastIndexWhere](test, start) {
      if (start === void 0) start = null;
      if (start == null) start = this[$length] - 1;
      if (dart.notNull(start) < 0) return -1;
      for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
        if (dart.test(test(this[$_get](i)))) return i;
      }
      return -1;
    }
    set [$first](element) {
      E._check(element);
      if (this[$isEmpty]) dart.throw(new core.IndexError.new(0, this));
      this[$_set](0, element);
    }
    set [$last](element) {
      E._check(element);
      if (this[$isEmpty]) dart.throw(new core.IndexError.new(0, this));
      this[$_set](this[$length] - 1, element);
    }
  }
  (JSArray.new = function() {
    ;
  }).prototype = JSArray.prototype;
  dart.setExtensionBaseClass(JSArray, dart.global.Array);
  JSArray.prototype[dart.isList] = true;
  ;
  JSArray.prototype[_is_JSArray_default] = true;
  JSArray[dart.implements] = () => [core.List$(E), _interceptors.JSIndexable$(E)];
  ;
  dart.setGetterSignature(JSArray, () => ({
    __proto__: dart.getGetters(JSArray.__proto__),
    [$first]: E,
    [$last]: E,
    [$single]: E,
    [$reversed]: core.Iterable$(E),
    [$isEmpty]: core.bool,
    [$isNotEmpty]: core.bool,
    [$iterator]: core.Iterator$(E),
    [$length]: core.int
  }));
  dart.setSetterSignature(JSArray, () => ({
    __proto__: dart.getSetters(JSArray.__proto__),
    [$length]: core.int,
    [$first]: core.Object,
    [$last]: core.Object
  }));
  dart.setLibraryUri(JSArray, "dart:_interceptors");
  return JSArray;
});
_interceptors.JSArray = _interceptors.JSArray$();
;
dart.registerExtension("Array", _interceptors.JSArray);
const _is_JSMutableArray_default = Symbol('_is_JSMutableArray_default');
_interceptors.JSMutableArray$ = dart.generic(E => {
  class JSMutableArray extends _interceptors.JSArray$(E) {}
  (JSMutableArray.new = function() {
    JSMutableArray.__proto__.new.call(this);
    ;
  }).prototype = JSMutableArray.prototype;
  ;
  JSMutableArray.prototype[_is_JSMutableArray_default] = true;
  dart.setLibraryUri(JSMutableArray, "dart:_interceptors");
  return JSMutableArray;
});
_interceptors.JSMutableArray = _interceptors.JSMutableArray$();
;
const _is_JSFixedArray_default = Symbol('_is_JSFixedArray_default');
_interceptors.JSFixedArray$ = dart.generic(E => {
  class JSFixedArray extends _interceptors.JSMutableArray$(E) {}
  (JSFixedArray.new = function() {
    JSFixedArray.__proto__.new.call(this);
    ;
  }).prototype = JSFixedArray.prototype;
  ;
  JSFixedArray.prototype[_is_JSFixedArray_default] = true;
  dart.setLibraryUri(JSFixedArray, "dart:_interceptors");
  return JSFixedArray;
});
_interceptors.JSFixedArray = _interceptors.JSFixedArray$();
;
const _is_JSExtendableArray_default = Symbol('_is_JSExtendableArray_default');
_interceptors.JSExtendableArray$ = dart.generic(E => {
  class JSExtendableArray extends _interceptors.JSMutableArray$(E) {}
  (JSExtendableArray.new = function() {
    JSExtendableArray.__proto__.new.call(this);
    ;
  }).prototype = JSExtendableArray.prototype;
  ;
  JSExtendableArray.prototype[_is_JSExtendableArray_default] = true;
  dart.setLibraryUri(JSExtendableArray, "dart:_interceptors");
  return JSExtendableArray;
});
_interceptors.JSExtendableArray = _interceptors.JSExtendableArray$();
;
const _is_JSUnmodifiableArray_default = Symbol('_is_JSUnmodifiableArray_default');
_interceptors.JSUnmodifiableArray$ = dart.generic(E => {
  class JSUnmodifiableArray extends _interceptors.JSArray$(E) {}
  (JSUnmodifiableArray.new = function() {
    JSUnmodifiableArray.__proto__.new.call(this);
    ;
  }).prototype = JSUnmodifiableArray.prototype;
  ;
  JSUnmodifiableArray.prototype[_is_JSUnmodifiableArray_default] = true;
  dart.setLibraryUri(JSUnmodifiableArray, "dart:_interceptors");
  return JSUnmodifiableArray;
});
_interceptors.JSUnmodifiableArray = _interceptors.JSUnmodifiableArray$();
;
const _current = dart.privateName(_interceptors, "_current");
const _iterable = dart.privateName(_interceptors, "_iterable");
const _length = dart.privateName(_interceptors, "_length");
const _index = dart.privateName(_interceptors, "_index");
const _is_ArrayIterator_default = Symbol('_is_ArrayIterator_default');
_interceptors.ArrayIterator$ = dart.generic(E => {
  class ArrayIterator extends core.Object {
    get current() {
      return this[_current];
    }
    moveNext() {
      let length = this[_iterable][$length];
      if (this[_length] !== length) {
        dart.throw(_js_helper.throwConcurrentModificationError(this[_iterable]));
      }
      if (this[_index] >= length) {
        this[_current] = null;
        return false;
      }
      this[_current] = this[_iterable][$_get](this[_index]);
      this[_index] = this[_index] + 1;
      return true;
    }
  }
  (ArrayIterator.new = function(iterable) {
    this[_current] = null;
    this[_iterable] = iterable;
    this[_length] = iterable[$length];
    this[_index] = 0;
    ;
  }).prototype = ArrayIterator.prototype;
  ;
  ArrayIterator.prototype[_is_ArrayIterator_default] = true;
  ArrayIterator[dart.implements] = () => [core.Iterator$(E)];
  ;
  dart.setGetterSignature(ArrayIterator, () => ({
    __proto__: dart.getGetters(ArrayIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(ArrayIterator, "dart:_interceptors");
  ;
  return ArrayIterator;
});
_interceptors.ArrayIterator = _interceptors.ArrayIterator$();
;
const _isInt32 = dart.privateName(_interceptors, "_isInt32");
const _tdivSlow = dart.privateName(_interceptors, "_tdivSlow");
const _shlPositive = dart.privateName(_interceptors, "_shlPositive");
const _shrOtherPositive = dart.privateName(_interceptors, "_shrOtherPositive");
const _shrBothPositive = dart.privateName(_interceptors, "_shrBothPositive");
_interceptors.JSNumber = class JSNumber extends _interceptors.Interceptor {
  [$compareTo](b) {
    core.num._check(b);
    if (b == null) dart.argumentError(b);
    if (this < b) {
      return -1;
    } else if (this > b) {
      return 1;
    } else if (this[$_equals](b)) {
      if (this[$_equals](0)) {
        let bIsNegative = b[$isNegative];
        if (this[$isNegative][$_equals](bIsNegative)) return 0;
        if (this[$isNegative]) return -1;
        return 1;
      }
      return 0;
    } else if (this[$isNaN]) {
      if (b[$isNaN]) {
        return 0;
      }
      return 1;
    } else {
      return -1;
    }
  }
  get [$isNegative]() {
    return this[$_equals](0) ? 1 / this < 0 : this < 0;
  }
  get [$isNaN]() {
    return isNaN(this);
  }
  get [$isInfinite]() {
    return this == 1 / 0 || this == -1 / 0;
  }
  get [$isFinite]() {
    return isFinite(this);
  }
  [$remainder](b) {
    if (b == null) dart.argumentError(b);
    return this % b;
  }
  [$abs]() {
    return Math.abs(this);
  }
  get [$sign]() {
    return this > 0 ? 1 : this < 0 ? -1 : this;
  }
  [$toInt]() {
    if (this >= -2147483648 && this <= 2147483647) {
      return this | 0;
    }
    if (isFinite(this)) {
      return this[$truncateToDouble]() + 0;
    }
    dart.throw(new core.UnsupportedError.new("" + this));
  }
  [$truncate]() {
    return this[$toInt]();
  }
  [$ceil]() {
    return this[$ceilToDouble]()[$toInt]();
  }
  [$floor]() {
    return this[$floorToDouble]()[$toInt]();
  }
  [$round]() {
    if (this > 0) {
      if (this !== 1 / 0) {
        return Math.round(this);
      }
    } else if (this > -1 / 0) {
      return 0 - Math.round(0 - this);
    }
    dart.throw(new core.UnsupportedError.new("" + this));
  }
  [$ceilToDouble]() {
    return Math.ceil(this);
  }
  [$floorToDouble]() {
    return Math.floor(this);
  }
  [$roundToDouble]() {
    if (this < 0) {
      return -Math.round(-this);
    } else {
      return Math.round(this);
    }
  }
  [$truncateToDouble]() {
    return this < 0 ? this[$ceilToDouble]() : this[$floorToDouble]();
  }
  [$clamp](lowerLimit, upperLimit) {
    if (lowerLimit == null) dart.argumentError(lowerLimit);
    if (upperLimit == null) dart.argumentError(upperLimit);
    if (lowerLimit[$compareTo](upperLimit) > 0) {
      dart.throw(_js_helper.argumentErrorValue(lowerLimit));
    }
    if (this[$compareTo](lowerLimit) < 0) return lowerLimit;
    if (this[$compareTo](upperLimit) > 0) return upperLimit;
    return this;
  }
  [$toDouble]() {
    return this;
  }
  [$toStringAsFixed](fractionDigits) {
    if (fractionDigits < 0 || fractionDigits > 20) {
      dart.throw(new core.RangeError.range(fractionDigits, 0, 20, "fractionDigits"));
    }
    let result = this.toFixed(fractionDigits);
    if (this[$_equals](0) && this[$isNegative]) return "-" + result;
    return result;
  }
  [$toStringAsExponential](fractionDigits) {
    if (fractionDigits === void 0) fractionDigits = null;
    let result = null;
    if (fractionDigits != null) {
      let _fractionDigits = fractionDigits;
      if (_fractionDigits < 0 || _fractionDigits > 20) {
        dart.throw(new core.RangeError.range(_fractionDigits, 0, 20, "fractionDigits"));
      }
      result = this.toExponential(_fractionDigits);
    } else {
      result = this.toExponential();
    }
    if (this[$_equals](0) && this[$isNegative]) return "-" + dart.str(result);
    return result;
  }
  [$toStringAsPrecision](precision) {
    if (precision == null) dart.argumentError(precision);
    if (precision < 1 || precision > 21) {
      dart.throw(new core.RangeError.range(precision, 1, 21, "precision"));
    }
    let result = this.toPrecision(precision);
    if (this[$_equals](0) && this[$isNegative]) return "-" + result;
    return result;
  }
  [$toRadixString](radix) {
    if (radix == null) dart.argumentError(radix);
    if (radix < 2 || radix > 36) {
      dart.throw(new core.RangeError.range(radix, 2, 36, "radix"));
    }
    let result = this.toString(radix);
    if (result[$codeUnitAt](result.length - 1) !== 41) {
      return result;
    }
    return _interceptors.JSNumber._handleIEtoString(result);
  }
  static _handleIEtoString(result) {
    let match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
    if (match == null) {
      dart.throw(new core.UnsupportedError.new("Unexpected toString result: " + dart.str(result)));
    }
    result = match[$_get](1);
    let exponent = +match[$_get](3);
    if (match[$_get](2) != null) {
      result = result + match[$_get](2);
      exponent = exponent - match[$_get](2).length;
    }
    return dart.notNull(result) + "0"[$times](exponent);
  }
  [$toString]() {
    if (this[$_equals](0) && 1 / this < 0) {
      return "-0.0";
    } else {
      return "" + this;
    }
  }
  get [$hashCode]() {
    let intValue = this | 0;
    if (this[$_equals](intValue)) return 536870911 & intValue;
    let absolute = Math.abs(this);
    let lnAbsolute = Math.log(absolute);
    let log2 = lnAbsolute / 0.6931471805599453;
    let floorLog2 = log2 | 0;
    let factor = Math.pow(2, floorLog2);
    let scaled = absolute < 1 ? absolute / factor : factor / absolute;
    let rescaled1 = scaled * 9007199254740992;
    let rescaled2 = scaled * 3542243181176521;
    let d1 = rescaled1 | 0;
    let d2 = rescaled2 | 0;
    let d3 = floorLog2;
    let h = 536870911 & (d1 + d2) * (601 * 997) + d3 * 1259;
    return h;
  }
  [$_negate]() {
    return -this;
  }
  [$plus](other) {
    if (other == null) dart.argumentError(other);
    return this + other;
  }
  [$minus](other) {
    if (other == null) dart.argumentError(other);
    return this - other;
  }
  [$divide](other) {
    if (other == null) dart.argumentError(other);
    return this / other;
  }
  [$times](other) {
    if (other == null) dart.argumentError(other);
    return this * other;
  }
  [$modulo](other) {
    if (other == null) dart.argumentError(other);
    let result = this % other;
    if (result === 0) return 0;
    if (result > 0) return result;
    if (other < 0) {
      return result - other;
    } else {
      return result + other;
    }
  }
  [_isInt32](value) {
    return (value | 0) === value;
  }
  [$floorDivide](other) {
    if (other == null) dart.argumentError(other);
    if (this[_isInt32](this) && this[_isInt32](other) && 0 !== other && -1 !== other) {
      return this / other | 0;
    } else {
      return this[_tdivSlow](other);
    }
  }
  [_tdivSlow](other) {
    return (this / other)[$toInt]();
  }
  [$leftShift](other) {
    if (other == null) dart.argumentError(other);
    if (other < 0) _js_helper.throwArgumentErrorValue(other);
    return this[_shlPositive](other);
  }
  [_shlPositive](other) {
    return other > 31 ? 0 : this << other >>> 0;
  }
  [$rightShift](other) {
    if (other == null) dart.argumentError(other);
    if (other < 0) _js_helper.throwArgumentErrorValue(other);
    return this[_shrOtherPositive](other);
  }
  [_shrOtherPositive](other) {
    return this > 0 ? this[_shrBothPositive](other) : this >> (other > 31 ? 31 : other) >>> 0;
  }
  [_shrBothPositive](other) {
    return other > 31 ? 0 : this >>> other;
  }
  [$bitAnd](other) {
    if (other == null) dart.argumentError(other);
    return (this & other) >>> 0;
  }
  [$bitOr](other) {
    if (other == null) dart.argumentError(other);
    return (this | other) >>> 0;
  }
  [$bitXor](other) {
    if (other == null) dart.argumentError(other);
    return (this ^ other) >>> 0;
  }
  [$lessThan](other) {
    if (other == null) dart.argumentError(other);
    return this < other;
  }
  [$greaterThan](other) {
    if (other == null) dart.argumentError(other);
    return this > other;
  }
  [$lessOrEquals](other) {
    if (other == null) dart.argumentError(other);
    return this <= other;
  }
  [$greaterOrEquals](other) {
    if (other == null) dart.argumentError(other);
    return this >= other;
  }
  get [$isEven]() {
    return (this & 1) === 0;
  }
  get [$isOdd]() {
    return (this & 1) === 1;
  }
  [$toUnsigned](width) {
    if (width == null) dart.argumentError(width);
    return (this & (1)[$leftShift](width) - 1) >>> 0;
  }
  [$toSigned](width) {
    if (width == null) dart.argumentError(width);
    let signMask = (1)[$leftShift](width - 1);
    return ((this & signMask - 1) >>> 0) - ((this & signMask) >>> 0);
  }
  get [$bitLength]() {
    let nonneg = this < 0 ? -this - 1 : this;
    let wordBits = 32;
    while (nonneg >= 4294967296) {
      nonneg = (nonneg / 4294967296)[$truncate]();
      wordBits = wordBits + 32;
    }
    return wordBits - _interceptors.JSNumber._clz32(nonneg);
  }
  static _clz32(uint32) {
    return 32 - _interceptors.JSNumber._bitCount(_interceptors.JSNumber._spread(uint32));
  }
  [$modPow](e, m) {
    if (e == null) dart.argumentError(e);
    if (m == null) dart.argumentError(m);
    if (e < 0) dart.throw(new core.RangeError.range(e, 0, null, "exponent"));
    if (m <= 0) dart.throw(new core.RangeError.range(m, 1, null, "modulus"));
    if (e === 0) return 1;
    if (this < -9007199254740991.0 || this > 9007199254740991.0) {
      dart.throw(new core.RangeError.range(this, -9007199254740991.0, 9007199254740991.0, "receiver"));
    }
    if (e > 9007199254740991.0) {
      dart.throw(new core.RangeError.range(e, 0, 9007199254740991.0, "exponent"));
    }
    if (m > 9007199254740991.0) {
      dart.throw(new core.RangeError.range(e, 1, 9007199254740991.0, "modulus"));
    }
    if (m > 94906265) {
      return core._BigIntImpl.from(this).modPow(core._BigIntImpl.from(e), core._BigIntImpl.from(m)).toInt();
    }
    let b = this;
    if (b < 0 || b > m) {
      b = b[$modulo](m);
    }
    let r = 1;
    while (e > 0) {
      if (e[$isOdd]) {
        r = (r * b)[$modulo](m);
      }
      e = (e / 2)[$truncate]();
      b = (b * b)[$modulo](m);
    }
    return r;
  }
  static _binaryGcd(x, y, inv) {
    let s = 1;
    if (!inv) {
      while (x[$isEven] && y[$isEven]) {
        x = (x / 2)[$truncate]();
        y = (y / 2)[$truncate]();
        s = s * 2;
      }
      if (y[$isOdd]) {
        let t = x;
        x = y;
        y = t;
      }
    }
    let ac = x[$isEven];
    let u = x;
    let v = y;
    let a = 1;
    let b = 0;
    let c = 0;
    let d = 1;
    do {
      while (u[$isEven]) {
        u = (u / 2)[$truncate]();
        if (ac) {
          if (!a[$isEven] || !b[$isEven]) {
            a = a + y;
            b = b - x;
          }
          a = (a / 2)[$truncate]();
        } else if (!b[$isEven]) {
          b = b - x;
        }
        b = (b / 2)[$truncate]();
      }
      while (v[$isEven]) {
        v = (v / 2)[$truncate]();
        if (ac) {
          if (!c[$isEven] || !d[$isEven]) {
            c = c + y;
            d = d - x;
          }
          c = (c / 2)[$truncate]();
        } else if (!d[$isEven]) {
          d = d - x;
        }
        d = (d / 2)[$truncate]();
      }
      if (u >= v) {
        u = u - v;
        if (ac) a = a - c;
        b = b - d;
      } else {
        v = v - u;
        if (ac) c = c - a;
        d = d - b;
      }
    } while (u !== 0);
    if (!inv) return s * v;
    if (v !== 1) dart.throw(core.Exception.new("Not coprime"));
    if (d < 0) {
      d = d + x;
      if (d < 0) d = d + x;
    } else if (d > x) {
      d = d - x;
      if (d > x) d = d - x;
    }
    return d;
  }
  [$modInverse](m) {
    if (m == null) dart.argumentError(m);
    if (m <= 0) dart.throw(new core.RangeError.range(m, 1, null, "modulus"));
    if (m === 1) return 0;
    let t = this;
    if (t < 0 || t >= m) t = t[$modulo](m);
    if (t === 1) return 1;
    if (t === 0 || t[$isEven] && m[$isEven]) {
      dart.throw(core.Exception.new("Not coprime"));
    }
    return _interceptors.JSNumber._binaryGcd(m, t, true);
  }
  [$gcd](other) {
    if (other == null) dart.argumentError(other);
    let x = this[$abs]();
    let y = other[$abs]();
    if (x === 0) return y;
    if (y === 0) return x;
    if (x === 1 || y === 1) return 1;
    return _interceptors.JSNumber._binaryGcd(x, y, false);
  }
  static _bitCount(i) {
    i = _interceptors.JSNumber._shru(i, 0) - (_interceptors.JSNumber._shru(i, 1) & 1431655765);
    i = (i & 858993459) + (_interceptors.JSNumber._shru(i, 2) & 858993459);
    i = 252645135 & i + _interceptors.JSNumber._shru(i, 4);
    i = i + _interceptors.JSNumber._shru(i, 8);
    i = i + _interceptors.JSNumber._shru(i, 16);
    return i & 63;
  }
  static _shru(value, shift) {
    return value >>> shift;
  }
  static _shrs(value, shift) {
    return value >> shift;
  }
  static _ors(a, b) {
    return a | b;
  }
  static _spread(i) {
    i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 1));
    i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 2));
    i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 4));
    i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 8));
    i = _interceptors.JSNumber._shru(_interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 16)), 0);
    return i;
  }
  [$bitNot]() {
    return ~this >>> 0;
  }
};
(_interceptors.JSNumber.new = function() {
  _interceptors.JSNumber.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSNumber.prototype;
;
_interceptors.JSNumber[dart.implements] = () => [core.int, core.double];
;
dart.setGetterSignature(_interceptors.JSNumber, () => ({
  __proto__: dart.getGetters(_interceptors.JSNumber.__proto__),
  [$isNegative]: core.bool,
  [$isNaN]: core.bool,
  [$isInfinite]: core.bool,
  [$isFinite]: core.bool,
  [$sign]: _interceptors.JSNumber,
  [$isEven]: core.bool,
  [$isOdd]: core.bool,
  [$bitLength]: core.int
}));
dart.setLibraryUri(_interceptors.JSNumber, "dart:_interceptors");
dart.defineLazy(_interceptors.JSNumber, {
  /*_interceptors.JSNumber._MIN_INT32*/get _MIN_INT32() {
    return -2147483648;
  },
  /*_interceptors.JSNumber._MAX_INT32*/get _MAX_INT32() {
    return 2147483647;
  }
});
dart.definePrimitiveHashCode(_interceptors.JSNumber.prototype);
dart.registerExtension("Number", _interceptors.JSNumber);
const _defaultSplit = dart.privateName(_interceptors, "_defaultSplit");
let C18;
const length = dart.privateName(_interceptors, "JSString.length");
_interceptors.JSString = class JSString extends _interceptors.Interceptor {
  get [$length]() {
    return this.length;
  }
  [$codeUnitAt](index) {
    if (index == null) dart.argumentError(index);
    let len = this.length;
    if (index < 0 || index >= len) {
      dart.throw(new core.IndexError.new(index, this, "index", null, len));
    }
    return this.charCodeAt(index);
  }
  [$allMatches](string, start) {
    if (string == null) dart.argumentError(string);
    if (start === void 0) start = 0;
    if (start == null) dart.argumentError(start);
    let len = string.length;
    if (0 > start || start > len) {
      dart.throw(new core.RangeError.range(start, 0, len));
    }
    return _js_helper.allMatchesInStringUnchecked(this, string, start);
  }
  [$matchAsPrefix](string, start) {
    if (string == null) dart.argumentError(string);
    if (start === void 0) start = 0;
    if (start == null) dart.argumentError(start);
    let stringLength = string.length;
    if (start < 0 || start > stringLength) {
      dart.throw(new core.RangeError.range(start, 0, stringLength));
    }
    let thisLength = this.length;
    if (start + thisLength > stringLength) return null;
    for (let i = 0; i < thisLength; i = i + 1) {
      if (string[$codeUnitAt](start + i) !== this[$codeUnitAt](i)) {
        return null;
      }
    }
    return new _js_helper.StringMatch.new(start, string, this);
  }
  [$plus](other) {
    if (other == null) dart.argumentError(other);
    return this + other;
  }
  [$endsWith](other) {
    if (other == null) dart.argumentError(other);
    let otherLength = other.length;
    let thisLength = this.length;
    if (otherLength > thisLength) return false;
    return other === this[$substring](thisLength - otherLength);
  }
  [$replaceAll](from, to) {
    if (to == null) dart.argumentError(to);
    return _js_helper.stringReplaceAllUnchecked(this, from, to);
  }
  [$replaceAllMapped](from, convert) {
    return this[$splitMapJoin](from, {onMatch: convert});
  }
  [$splitMapJoin](from, opts) {
    let onMatch = opts && 'onMatch' in opts ? opts.onMatch : null;
    let onNonMatch = opts && 'onNonMatch' in opts ? opts.onNonMatch : null;
    return _js_helper.stringReplaceAllFuncUnchecked(this, from, onMatch, onNonMatch);
  }
  [$replaceFirst](from, to, startIndex) {
    if (to == null) dart.argumentError(to);
    if (startIndex === void 0) startIndex = 0;
    if (startIndex == null) dart.argumentError(startIndex);
    core.RangeError.checkValueInInterval(startIndex, 0, this.length, "startIndex");
    return _js_helper.stringReplaceFirstUnchecked(this, from, to, startIndex);
  }
  [$replaceFirstMapped](from, replace, startIndex) {
    if (replace == null) dart.argumentError(replace);
    if (startIndex === void 0) startIndex = 0;
    if (startIndex == null) dart.argumentError(startIndex);
    core.RangeError.checkValueInInterval(startIndex, 0, this.length, "startIndex");
    return _js_helper.stringReplaceFirstMappedUnchecked(this, from, replace, startIndex);
  }
  [$split](pattern) {
    if (pattern == null) dart.argumentError(pattern);
    if (typeof pattern == 'string') {
      return JSArrayOfString().of(this.split(pattern));
    } else if (_js_helper.JSSyntaxRegExp.is(pattern) && _js_helper.regExpCaptureCount(pattern) === 0) {
      let re = _js_helper.regExpGetNative(pattern);
      return JSArrayOfString().of(this.split(re));
    } else {
      return this[_defaultSplit](pattern);
    }
  }
  [$replaceRange](start, end, replacement) {
    if (start == null) dart.argumentError(start);
    if (replacement == null) dart.argumentError(replacement);
    end = core.RangeError.checkValidRange(start, end, this.length);
    return _js_helper.stringReplaceRangeUnchecked(this, start, end, replacement);
  }
  [_defaultSplit](pattern) {
    let result = JSArrayOfString().of([]);
    let start = 0;
    let length = 1;
    for (let match of pattern[$allMatches](this)) {
      let matchStart = match.start;
      let matchEnd = match.end;
      length = matchEnd - matchStart;
      if (length === 0 && start === matchStart) {
        continue;
      }
      let end = matchStart;
      result[$add](this[$substring](start, end));
      start = matchEnd;
    }
    if (start < this.length || length > 0) {
      result[$add](this[$substring](start));
    }
    return result;
  }
  [$startsWith](pattern, index) {
    if (index === void 0) index = 0;
    if (index == null) dart.argumentError(index);
    let length = this.length;
    if (index < 0 || index > length) {
      dart.throw(new core.RangeError.range(index, 0, this.length));
    }
    if (typeof pattern == 'string') {
      let other = pattern;
      let otherLength = other.length;
      let endIndex = index + otherLength;
      if (endIndex > length) return false;
      return other === this.substring(index, endIndex);
    }
    return pattern[$matchAsPrefix](this, index) != null;
  }
  [$substring](startIndex, _endIndex) {
    let t13;
    if (startIndex == null) dart.argumentError(startIndex);
    if (_endIndex === void 0) _endIndex = null;
    let length = this.length;
    let endIndex = (t13 = _endIndex, t13 == null ? length : t13);
    if (startIndex < 0) dart.throw(new core.RangeError.value(startIndex));
    if (startIndex > dart.notNull(endIndex)) dart.throw(new core.RangeError.value(startIndex));
    if (dart.notNull(endIndex) > length) dart.throw(new core.RangeError.value(endIndex));
    return this.substring(startIndex, endIndex);
  }
  [$toLowerCase]() {
    return this.toLowerCase();
  }
  [$toUpperCase]() {
    return this.toUpperCase();
  }
  static _isWhitespace(codeUnit) {
    if (codeUnit < 256) {
      switch (codeUnit) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
        case 133:
        case 160:
        {
          return true;
        }
        default:
        {
          return false;
        }
      }
    }
    switch (codeUnit) {
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8232:
      case 8233:
      case 8239:
      case 8287:
      case 12288:
      case 65279:
      {
        return true;
      }
      default:
      {
        return false;
      }
    }
  }
  static _skipLeadingWhitespace(string, index) {
    if (index == null) dart.argumentError(index);
    let stringLength = string.length;
    while (index < stringLength) {
      let codeUnit = string[$codeUnitAt](index);
      if (codeUnit !== 32 && codeUnit !== 13 && !_interceptors.JSString._isWhitespace(codeUnit)) {
        break;
      }
      index = index + 1;
    }
    return index;
  }
  static _skipTrailingWhitespace(string, index) {
    if (index == null) dart.argumentError(index);
    while (index > 0) {
      let codeUnit = string[$codeUnitAt](index - 1);
      if (codeUnit !== 32 && codeUnit !== 13 && !_interceptors.JSString._isWhitespace(codeUnit)) {
        break;
      }
      index = index - 1;
    }
    return index;
  }
  [$trim]() {
    let result = this.trim();
    let length = result.length;
    if (length === 0) return result;
    let firstCode = result[$codeUnitAt](0);
    let startIndex = 0;
    if (firstCode === 133) {
      startIndex = _interceptors.JSString._skipLeadingWhitespace(result, 1);
      if (startIndex === length) return "";
    }
    let endIndex = length;
    let lastCode = result[$codeUnitAt](endIndex - 1);
    if (lastCode === 133) {
      endIndex = _interceptors.JSString._skipTrailingWhitespace(result, endIndex - 1);
    }
    if (startIndex === 0 && endIndex === length) return result;
    return result.substring(startIndex, endIndex);
  }
  [$trimLeft]() {
    let result = null;
    let startIndex = 0;
    if (typeof this.trimLeft != "undefined") {
      result = this.trimLeft();
      if (result.length === 0) return result;
      let firstCode = result[$codeUnitAt](0);
      if (firstCode === 133) {
        startIndex = _interceptors.JSString._skipLeadingWhitespace(result, 1);
      }
    } else {
      result = this;
      startIndex = _interceptors.JSString._skipLeadingWhitespace(this, 0);
    }
    if (startIndex === 0) return result;
    if (startIndex === result.length) return "";
    return result.substring(startIndex);
  }
  [$trimRight]() {
    let result = null;
    let endIndex = 0;
    if (typeof this.trimRight != "undefined") {
      result = this.trimRight();
      endIndex = result.length;
      if (endIndex === 0) return result;
      let lastCode = result[$codeUnitAt](endIndex - 1);
      if (lastCode === 133) {
        endIndex = _interceptors.JSString._skipTrailingWhitespace(result, endIndex - 1);
      }
    } else {
      result = this;
      endIndex = _interceptors.JSString._skipTrailingWhitespace(this, this.length);
    }
    if (endIndex === result.length) return result;
    if (endIndex === 0) return "";
    return result.substring(0, endIndex);
  }
  [$times](times) {
    if (times == null) dart.argumentError(times);
    if (0 >= times) return "";
    if (times === 1 || this.length === 0) return this;
    if (times !== times >>> 0) {
      dart.throw(C18 || CT.C18);
    }
    let result = "";
    let s = this;
    while (true) {
      if ((times & 1) === 1) result = s + result;
      times = times >>> 1;
      if (times === 0) break;
      s = s + s;
    }
    return result;
  }
  [$padLeft](width, padding) {
    if (width == null) dart.argumentError(width);
    if (padding === void 0) padding = " ";
    let delta = width - this.length;
    if (delta <= 0) return this;
    return padding[$times](delta) + this;
  }
  [$padRight](width, padding) {
    if (width == null) dart.argumentError(width);
    if (padding === void 0) padding = " ";
    let delta = width - this.length;
    if (delta <= 0) return this;
    return this[$plus](padding[$times](delta));
  }
  get [$codeUnits]() {
    return new _internal.CodeUnits.new(this);
  }
  get [$runes]() {
    return new core.Runes.new(this);
  }
  [$indexOf](pattern, start) {
    if (pattern == null) dart.argumentError(pattern);
    if (start === void 0) start = 0;
    if (start == null) dart.argumentError(start);
    if (start < 0 || start > this.length) {
      dart.throw(new core.RangeError.range(start, 0, this.length));
    }
    if (typeof pattern == 'string') {
      return _js_helper.stringIndexOfStringUnchecked(this, pattern, start);
    }
    if (_js_helper.JSSyntaxRegExp.is(pattern)) {
      let re = pattern;
      let match = _js_helper.firstMatchAfter(re, this, start);
      return match == null ? -1 : match.start;
    }
    let length = this.length;
    for (let i = start; i <= length; i = i + 1) {
      if (pattern[$matchAsPrefix](this, i) != null) return i;
    }
    return -1;
  }
  [$lastIndexOf](pattern, _start) {
    let t13;
    if (pattern == null) dart.argumentError(pattern);
    if (_start === void 0) _start = null;
    let length = this.length;
    let start = (t13 = _start, t13 == null ? length : t13);
    if (dart.notNull(start) < 0 || dart.notNull(start) > length) {
      dart.throw(new core.RangeError.range(start, 0, length));
    }
    if (typeof pattern == 'string') {
      let other = pattern;
      if (dart.notNull(start) + other.length > length) {
        start = length - other.length;
      }
      return _js_helper.stringLastIndexOfUnchecked(this, other, start);
    }
    for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
      if (pattern[$matchAsPrefix](this, i) != null) return i;
    }
    return -1;
  }
  [$contains](other, startIndex) {
    if (other == null) dart.argumentError(other);
    if (startIndex === void 0) startIndex = 0;
    if (startIndex == null) dart.argumentError(startIndex);
    if (startIndex < 0 || startIndex > this.length) {
      dart.throw(new core.RangeError.range(startIndex, 0, this.length));
    }
    return _js_helper.stringContainsUnchecked(this, other, startIndex);
  }
  get [$isEmpty]() {
    return this.length === 0;
  }
  get [$isNotEmpty]() {
    return !this[$isEmpty];
  }
  [$compareTo](other) {
    core.String._check(other);
    if (other == null) dart.argumentError(other);
    return this[$_equals](other) ? 0 : this < other ? -1 : 1;
  }
  [$toString]() {
    return this;
  }
  get [$hashCode]() {
    let hash = 0;
    let length = this.length;
    for (let i = 0; i < length; i = i + 1) {
      hash = 536870911 & hash + this.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10);
      hash = hash ^ hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3);
    hash = hash ^ hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15);
  }
  get [$runtimeType]() {
    return dart.wrapType(core.String);
  }
  [$_get](index) {
    if (index == null) dart.argumentError(index);
    if (index >= this.length || index < 0) {
      dart.throw(_js_helper.diagnoseIndexError(this, index));
    }
    return this[index];
  }
};
(_interceptors.JSString.new = function() {
  this[length] = null;
  _interceptors.JSString.__proto__.new.call(this);
  ;
}).prototype = _interceptors.JSString.prototype;
;
_interceptors.JSString[dart.implements] = () => [core.String, _interceptors.JSIndexable$(core.String)];
;
dart.setGetterSignature(_interceptors.JSString, () => ({
  __proto__: dart.getGetters(_interceptors.JSString.__proto__),
  [$codeUnits]: core.List$(core.int),
  [$runes]: core.Runes,
  [$isEmpty]: core.bool,
  [$isNotEmpty]: core.bool
}));
dart.setLibraryUri(_interceptors.JSString, "dart:_interceptors");
;
dart.definePrimitiveHashCode(_interceptors.JSString.prototype);
dart.registerExtension("String", _interceptors.JSString);
_interceptors.getInterceptor = function getInterceptor(obj) {
  return obj;
};
_interceptors.findInterceptorConstructorForType = function findInterceptorConstructorForType(type) {
};
_interceptors.findConstructorForNativeSubclassType = function findConstructorForNativeSubclassType(type, name) {
};
_interceptors.getNativeInterceptor = function getNativeInterceptor(object) {
};
_interceptors.setDispatchProperty = function setDispatchProperty(object, value) {
};
dart.defineLazy(_interceptors, {
  /*_interceptors.jsNull*/get jsNull() {
    return new _interceptors.JSNull.new();
  }
});
const _string$ = dart.privateName(_internal, "_string");
const _closeGap = dart.privateName(collection, "_closeGap");
const _filter = dart.privateName(collection, "_filter");
let C19;
const _is_ListMixin_default = Symbol('_is_ListMixin_default');
collection.ListMixin$ = dart.generic(E => {
  let ListIteratorOfE = () => (ListIteratorOfE = dart.constFn(_internal.ListIterator$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  let VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  let WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  let EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  let SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  let SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  let TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  let JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  let ListMapViewOfE = () => (ListMapViewOfE = dart.constFn(_internal.ListMapView$(E)))();
  let ReversedListIterableOfE = () => (ReversedListIterableOfE = dart.constFn(_internal.ReversedListIterable$(E)))();
  class ListMixin extends core.Object {
    get iterator() {
      return new (ListIteratorOfE()).new(this);
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
    elementAt(index) {
      return this[$_get](index);
    }
    followedBy(other) {
      IterableOfE()._check(other);
      return FollowedByIterableOfE().firstEfficient(this, other);
    }
    forEach(action) {
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        action(this[$_get](i));
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
    }
    get isEmpty() {
      return this[$length] === 0;
    }
    get isNotEmpty() {
      return !dart.test(this[$isEmpty]);
    }
    get first() {
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      return this[$_get](0);
    }
    set first(value) {
      E._check(value);
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      this[$_set](0, value);
    }
    get last() {
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      return this[$_get](dart.notNull(this[$length]) - 1);
    }
    set last(value) {
      E._check(value);
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      this[$_set](dart.notNull(this[$length]) - 1, value);
    }
    get single() {
      if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
      if (dart.notNull(this[$length]) > 1) dart.throw(_internal.IterableElementError.tooMany());
      return this[$_get](0);
    }
    contains(element) {
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (dart.equals(this[$_get](i), element)) return true;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return false;
    }
    every(test) {
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (!dart.test(test(this[$_get](i)))) return false;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return true;
    }
    any(test) {
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (dart.test(test(this[$_get](i)))) return true;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return false;
    }
    firstWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this[$_get](i);
        if (dart.test(test(element))) return element;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let length = this[$length];
      for (let i = dart.notNull(length) - 1; i >= 0; i = i - 1) {
        let element = this[$_get](i);
        if (dart.test(test(element))) return element;
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let length = this[$length];
      let match = null;
      let matchFound = false;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this[$_get](i);
        if (dart.test(test(element))) {
          if (matchFound) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          matchFound = true;
          match = element;
        }
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (matchFound) return match;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    join(separator) {
      let t13;
      if (separator === void 0) separator = "";
      if (this[$length] === 0) return "";
      let buffer = (t13 = new core.StringBuffer.new(), t13.writeAll(this, separator), t13);
      return dart.toString(buffer);
    }
    where(test) {
      return new (WhereIterableOfE()).new(this, test);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    map(T, f) {
      return new (_internal.MappedListIterable$(E, T)).new(this, f);
    }
    expand(T, f) {
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    reduce(combine) {
      EAndEToE()._check(combine);
      let length = this[$length];
      if (length === 0) dart.throw(_internal.IterableElementError.noElement());
      let value = this[$_get](0);
      for (let i = 1; i < dart.notNull(length); i = i + 1) {
        value = combine(value, this[$_get](i));
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return value;
    }
    fold(T, initialValue, combine) {
      let value = initialValue;
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        value = combine(value, this[$_get](i));
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return value;
    }
    skip(count) {
      return new (SubListIterableOfE()).new(this, count, null);
    }
    skipWhile(test) {
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    take(count) {
      return new (SubListIterableOfE()).new(this, 0, count);
    }
    takeWhile(test) {
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    toList(opts) {
      let t13;
      let growable = opts && 'growable' in opts ? opts.growable : true;
      let result = null;
      if (dart.test(growable)) {
        result = (t13 = JSArrayOfE().of([]), t13[$length] = this[$length], t13);
      } else {
        result = ListOfE().new(this[$length]);
      }
      for (let i = 0; i < dart.notNull(this[$length]); i = i + 1) {
        result[$_set](i, this[$_get](i));
      }
      return result;
    }
    toSet() {
      let result = new (_HashSetOfE()).new();
      for (let i = 0; i < dart.notNull(this[$length]); i = i + 1) {
        result.add(this[$_get](i));
      }
      return result;
    }
    add(element) {
      let t13;
      E._check(element);
      this[$_set]((t13 = this[$length], this[$length] = dart.notNull(t13) + 1, t13), element);
    }
    addAll(iterable) {
      IterableOfE()._check(iterable);
      let i = this[$length];
      for (let element of iterable) {
        if (!(this[$length] == i || dart.throw(new core.ConcurrentModificationError.new(this)))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/list.dart", 269, 14, "this.length == i || (throw ConcurrentModificationError(this))");
        this[$length] = dart.notNull(i) + 1;
        this[$_set](i, element);
        i = dart.notNull(i) + 1;
      }
    }
    remove(element) {
      for (let i = 0; i < dart.notNull(this[$length]); i = i + 1) {
        if (dart.equals(this[$_get](i), element)) {
          this[_closeGap](i, i + 1);
          return true;
        }
      }
      return false;
    }
    [_closeGap](start, end) {
      let length = this[$length];
      if (!(0 <= dart.notNull(start))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/list.dart", 290, 12, "0 <= start");
      if (!(dart.notNull(start) < dart.notNull(end))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/list.dart", 291, 12, "start < end");
      if (!(dart.notNull(end) <= dart.notNull(length))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/list.dart", 292, 12, "end <= length");
      let size = dart.notNull(end) - dart.notNull(start);
      for (let i = end; dart.notNull(i) < dart.notNull(length); i = dart.notNull(i) + 1) {
        this[$_set](dart.notNull(i) - size, this[$_get](i));
      }
      this[$length] = dart.notNull(length) - size;
    }
    removeWhere(test) {
      this[_filter](test, false);
    }
    retainWhere(test) {
      this[_filter](test, true);
    }
    [_filter](test, retainMatching) {
      let retained = JSArrayOfE().of([]);
      let length = this[$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this[$_get](i);
        if (dart.equals(test(element), retainMatching)) {
          retained[$add](element);
        }
        if (length != this[$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (retained[$length] != this[$length]) {
        this[$setRange](0, retained[$length], retained);
        this[$length] = retained[$length];
      }
    }
    clear() {
      this[$length] = 0;
    }
    cast(R) {
      return core.List.castFrom(E, R, this);
    }
    removeLast() {
      if (this[$length] === 0) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = this[$_get](dart.notNull(this[$length]) - 1);
      this[$length] = dart.notNull(this[$length]) - 1;
      return result;
    }
    sort(compare) {
      let t13;
      if (compare === void 0) compare = null;
      _internal.Sort.sort(E, this, (t13 = compare, t13 == null ? C19 || CT.C19 : t13));
    }
    static _compareAny(a, b) {
      return core.Comparable.compare(core.Comparable._check(a), core.Comparable._check(b));
    }
    shuffle(random) {
      if (random === void 0) random = null;
      random == null ? random = math.Random.new() : null;
      let length = this[$length];
      while (dart.notNull(length) > 1) {
        let pos = random.nextInt(length);
        length = dart.notNull(length) - 1;
        let tmp = this[$_get](length);
        this[$_set](length, this[$_get](pos));
        this[$_set](pos, tmp);
      }
    }
    asMap() {
      return new (ListMapViewOfE()).new(this);
    }
    ['+'](other) {
      let t13;
      ListOfE()._check(other);
      let result = (t13 = JSArrayOfE().of([]), t13[$length] = dart.notNull(this[$length]) + dart.notNull(other[$length]), t13);
      result[$setRange](0, this[$length], this);
      result[$setRange](this[$length], result[$length], other);
      return result;
    }
    sublist(start, end) {
      let t13;
      if (end === void 0) end = null;
      let listLength = this[$length];
      end == null ? end = listLength : null;
      core.RangeError.checkValidRange(start, end, listLength);
      let length = dart.notNull(end) - dart.notNull(start);
      let result = (t13 = JSArrayOfE().of([]), t13[$length] = length, t13);
      for (let i = 0; i < length; i = i + 1) {
        result[$_set](i, this[$_get](dart.notNull(start) + i));
      }
      return result;
    }
    getRange(start, end) {
      core.RangeError.checkValidRange(start, end, this[$length]);
      return new (SubListIterableOfE()).new(this, start, end);
    }
    removeRange(start, end) {
      core.RangeError.checkValidRange(start, end, this[$length]);
      if (dart.notNull(end) > dart.notNull(start)) {
        this[_closeGap](start, end);
      }
    }
    fillRange(start, end, fill) {
      if (fill === void 0) fill = null;
      E._check(fill);
      core.RangeError.checkValidRange(start, end, this[$length]);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        this[$_set](i, fill);
      }
    }
    setRange(start, end, iterable, skipCount) {
      IterableOfE()._check(iterable);
      if (skipCount === void 0) skipCount = 0;
      core.RangeError.checkValidRange(start, end, this[$length]);
      let length = dart.notNull(end) - dart.notNull(start);
      if (length === 0) return;
      core.RangeError.checkNotNegative(skipCount, "skipCount");
      let otherList = null;
      let otherStart = null;
      if (ListOfE().is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = iterable[$skip](skipCount)[$toList]({growable: false});
        otherStart = 0;
      }
      if (dart.notNull(otherStart) + length > dart.notNull(otherList[$length])) {
        dart.throw(_internal.IterableElementError.tooFew());
      }
      if (dart.notNull(otherStart) < dart.notNull(start)) {
        for (let i = length - 1; i >= 0; i = i - 1) {
          this[$_set](dart.notNull(start) + i, otherList[$_get](dart.notNull(otherStart) + i));
        }
      } else {
        for (let i = 0; i < length; i = i + 1) {
          this[$_set](dart.notNull(start) + i, otherList[$_get](dart.notNull(otherStart) + i));
        }
      }
    }
    replaceRange(start, end, newContents) {
      IterableOfE()._check(newContents);
      core.RangeError.checkValidRange(start, end, this[$length]);
      if (!_internal.EfficientLengthIterable.is(newContents)) {
        newContents = newContents[$toList]();
      }
      let removeLength = dart.notNull(end) - dart.notNull(start);
      let insertLength = newContents[$length];
      if (removeLength >= dart.notNull(insertLength)) {
        let insertEnd = dart.notNull(start) + dart.notNull(insertLength);
        this[$setRange](start, insertEnd, newContents);
        if (removeLength > dart.notNull(insertLength)) {
          this[_closeGap](insertEnd, end);
        }
      } else {
        let delta = dart.notNull(insertLength) - removeLength;
        let newLength = dart.notNull(this[$length]) + delta;
        let insertEnd = dart.notNull(start) + dart.notNull(insertLength);
        this[$length] = newLength;
        this[$setRange](insertEnd, newLength, this, end);
        this[$setRange](start, insertEnd, newContents);
      }
    }
    indexOf(element, start) {
      if (start === void 0) start = 0;
      if (dart.notNull(start) < 0) start = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(this[$length]); i = dart.notNull(i) + 1) {
        if (dart.equals(this[$_get](i), element)) return i;
      }
      return -1;
    }
    indexWhere(test, start) {
      if (start === void 0) start = 0;
      if (dart.notNull(start) < 0) start = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(this[$length]); i = dart.notNull(i) + 1) {
        if (dart.test(test(this[$_get](i)))) return i;
      }
      return -1;
    }
    lastIndexOf(element, start) {
      if (start === void 0) start = null;
      if (start == null || dart.notNull(start) >= dart.notNull(this[$length])) start = dart.notNull(this[$length]) - 1;
      for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
        if (dart.equals(this[$_get](i), element)) return i;
      }
      return -1;
    }
    lastIndexWhere(test, start) {
      if (start === void 0) start = null;
      if (start == null || dart.notNull(start) >= dart.notNull(this[$length])) start = dart.notNull(this[$length]) - 1;
      for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
        if (dart.test(test(this[$_get](i)))) return i;
      }
      return -1;
    }
    insert(index, element) {
      E._check(element);
      core.ArgumentError.checkNotNull(index, "index");
      core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
      if (index == this[$length]) {
        this[$add](element);
        return;
      }
      this[$length] = dart.notNull(this[$length]) + 1;
      this[$setRange](dart.notNull(index) + 1, this[$length], this, index);
      this[$_set](index, element);
    }
    removeAt(index) {
      let result = this[$_get](index);
      this[_closeGap](index, dart.notNull(index) + 1);
      return result;
    }
    insertAll(index, iterable) {
      IterableOfE()._check(iterable);
      core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
      if (!_internal.EfficientLengthIterable.is(iterable) || iterable === this) {
        iterable = iterable[$toList]();
      }
      let insertionLength = iterable[$length];
      this[$length] = dart.notNull(this[$length]) + dart.notNull(insertionLength);
      if (iterable[$length] != insertionLength) {
        this[$length] = dart.notNull(this[$length]) - dart.notNull(insertionLength);
        dart.throw(new core.ConcurrentModificationError.new(iterable));
      }
      this[$setRange](dart.notNull(index) + dart.notNull(insertionLength), this[$length], this, index);
      this[$setAll](index, iterable);
    }
    setAll(index, iterable) {
      let t13;
      IterableOfE()._check(iterable);
      if (core.List.is(iterable)) {
        this[$setRange](index, dart.notNull(index) + dart.notNull(iterable[$length]), iterable);
      } else {
        for (let element of iterable) {
          this[$_set]((t13 = index, index = dart.notNull(t13) + 1, t13), element);
        }
      }
    }
    get reversed() {
      return new (ReversedListIterableOfE()).new(this);
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "[", "]");
    }
  }
  (ListMixin.new = function() {
    ;
  }).prototype = ListMixin.prototype;
  ListMixin.prototype[dart.isList] = true;
  ;
  ListMixin.prototype[_is_ListMixin_default] = true;
  ListMixin[dart.implements] = () => [core.List$(E)];
  ;
  dart.setGetterSignature(ListMixin, () => ({
    __proto__: dart.getGetters(ListMixin.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E,
    single: E,
    [$single]: E,
    reversed: core.Iterable$(E),
    [$reversed]: core.Iterable$(E)
  }));
  dart.setSetterSignature(ListMixin, () => ({
    __proto__: dart.getSetters(ListMixin.__proto__),
    first: core.Object,
    [$first]: core.Object,
    last: core.Object,
    [$last]: core.Object
  }));
  dart.setLibraryUri(ListMixin, "dart:collection");
  dart.defineExtensionMethods(ListMixin, [
    'elementAt',
    'followedBy',
    'forEach',
    'contains',
    'every',
    'any',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'join',
    'where',
    'whereType',
    'map',
    'expand',
    'reduce',
    'fold',
    'skip',
    'skipWhile',
    'take',
    'takeWhile',
    'toList',
    'toSet',
    'add',
    'addAll',
    'remove',
    'removeWhere',
    'retainWhere',
    'clear',
    'cast',
    'removeLast',
    'sort',
    'shuffle',
    'asMap',
    '+',
    'sublist',
    'getRange',
    'removeRange',
    'fillRange',
    'setRange',
    'replaceRange',
    'indexOf',
    'indexWhere',
    'lastIndexOf',
    'lastIndexWhere',
    'insert',
    'removeAt',
    'insertAll',
    'setAll',
    'toString'
  ]);
  dart.defineExtensionAccessors(ListMixin, [
    'iterator',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single',
    'reversed'
  ]);
  return ListMixin;
});
collection.ListMixin = collection.ListMixin$();
;
const _is_ListBase_default = Symbol('_is_ListBase_default');
collection.ListBase$ = dart.generic(E => {
  const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
  (Object_ListMixin$36.new = function() {
  }).prototype = Object_ListMixin$36.prototype;
  dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
  class ListBase extends Object_ListMixin$36 {
    static listToString(list) {
      return collection.IterableBase.iterableToFullString(list, "[", "]");
    }
  }
  (ListBase.new = function() {
    ;
  }).prototype = ListBase.prototype;
  ;
  ListBase.prototype[_is_ListBase_default] = true;
  dart.setLibraryUri(ListBase, "dart:collection");
  return ListBase;
});
collection.ListBase = collection.ListBase$();
;
const _is_UnmodifiableListMixin_default = Symbol('_is_UnmodifiableListMixin_default');
_internal.UnmodifiableListMixin$ = dart.generic(E => {
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class UnmodifiableListMixin extends core.Object {
    _set(index, value$) {
      let value = value$;
      E._check(value);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      return value$;
    }
    set length(newLength) {
      dart.throw(new core.UnsupportedError.new("Cannot change the length of an unmodifiable list"));
    }
    set first(element) {
      E._check(element);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    set last(element) {
      E._check(element);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    setAll(at, iterable) {
      IterableOfE()._check(iterable);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    add(value) {
      E._check(value);
      dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
    }
    insert(index, element) {
      E._check(element);
      dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
    }
    insertAll(at, iterable) {
      IterableOfE()._check(iterable);
      dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
    }
    addAll(iterable) {
      IterableOfE()._check(iterable);
      dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
    }
    remove(element) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    removeWhere(test) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    retainWhere(test) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    sort(compare) {
      if (compare === void 0) compare = null;
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    shuffle(random) {
      if (random === void 0) random = null;
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("Cannot clear an unmodifiable list"));
    }
    removeAt(index) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    removeLast() {
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    setRange(start, end, iterable, skipCount) {
      IterableOfE()._check(iterable);
      if (skipCount === void 0) skipCount = 0;
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    removeRange(start, end) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    replaceRange(start, end, iterable) {
      IterableOfE()._check(iterable);
      dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
    }
    fillRange(start, end, fillValue) {
      if (fillValue === void 0) fillValue = null;
      E._check(fillValue);
      dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (UnmodifiableListMixin.new = function() {
    ;
  }).prototype = UnmodifiableListMixin.prototype;
  UnmodifiableListMixin.prototype[dart.isList] = true;
  ;
  UnmodifiableListMixin.prototype[_is_UnmodifiableListMixin_default] = true;
  UnmodifiableListMixin[dart.implements] = () => [core.List$(E)];
  ;
  dart.setSetterSignature(UnmodifiableListMixin, () => ({
    __proto__: dart.getSetters(UnmodifiableListMixin.__proto__),
    length: core.int,
    [$length]: core.int,
    first: core.Object,
    [$first]: core.Object,
    last: core.Object,
    [$last]: core.Object
  }));
  dart.setLibraryUri(UnmodifiableListMixin, "dart:_internal");
  dart.defineExtensionMethods(UnmodifiableListMixin, [
    '_set',
    'setAll',
    'add',
    'insert',
    'insertAll',
    'addAll',
    'remove',
    'removeWhere',
    'retainWhere',
    'sort',
    'shuffle',
    'clear',
    'removeAt',
    'removeLast',
    'setRange',
    'removeRange',
    'replaceRange',
    'fillRange'
  ]);
  dart.defineExtensionAccessors(UnmodifiableListMixin, ['length', 'first', 'last']);
  return UnmodifiableListMixin;
});
_internal.UnmodifiableListMixin = _internal.UnmodifiableListMixin$();
;
const _is_UnmodifiableListBase_default = Symbol('_is_UnmodifiableListBase_default');
_internal.UnmodifiableListBase$ = dart.generic(E => {
  const ListBase_UnmodifiableListMixin$36 = class ListBase_UnmodifiableListMixin extends collection.ListBase$(E) {};
  (ListBase_UnmodifiableListMixin$36.new = function() {
  }).prototype = ListBase_UnmodifiableListMixin$36.prototype;
  dart.applyMixin(ListBase_UnmodifiableListMixin$36, _internal.UnmodifiableListMixin$(E));
  class UnmodifiableListBase extends ListBase_UnmodifiableListMixin$36 {}
  (UnmodifiableListBase.new = function() {
    ;
  }).prototype = UnmodifiableListBase.prototype;
  ;
  UnmodifiableListBase.prototype[_is_UnmodifiableListBase_default] = true;
  dart.setLibraryUri(UnmodifiableListBase, "dart:_internal");
  return UnmodifiableListBase;
});
_internal.UnmodifiableListBase = _internal.UnmodifiableListBase$();
;
let C20;
core.num = class num extends core.Object {
  static is(o) {
    return typeof o == "number";
  }
  static as(o) {
    if (typeof o == "number" || o == null) return o;
    return dart.as(o, core.num, false);
  }
  static _check(o) {
    if (typeof o == "number" || o == null) return o;
    return dart.as(o, core.num, true);
  }
  static parse(input, onError) {
    if (onError === void 0) onError = null;
    let result = core.num.tryParse(input);
    if (result != null) return result;
    if (onError == null) dart.throw(new core.FormatException.new(input));
    return onError(input);
  }
  static tryParse(input) {
    let t13;
    let source = input[$trim]();
    t13 = core.int.tryParse(source);
    return t13 == null ? core.double.tryParse(source) : t13;
  }
  static _returnIntNull(_) {
    return null;
  }
  static _returnDoubleNull(_) {
    return null;
  }
};
(core.num.new = function() {
  ;
}).prototype = core.num.prototype;
core.num[dart.implements] = () => [core.Comparable$(core.num)];
dart.setLibraryUri(core.num, "dart:core");
core.int = class int extends core.num {
  static is(o) {
    return typeof o == "number" && Math.floor(o) == o;
  }
  static as(o) {
    if (typeof o == "number" && Math.floor(o) == o || o == null) {
      return o;
    }
    return dart.as(o, core.int, false);
  }
  static _check(o) {
    if (typeof o == "number" && Math.floor(o) == o || o == null) {
      return o;
    }
    return dart.as(o, core.int, true);
  }
  static fromEnvironment(name, opts) {
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    dart.throw(new core.UnsupportedError.new("int.fromEnvironment can only be used as a const constructor"));
  }
  static parse(source, opts) {
    let radix = opts && 'radix' in opts ? opts.radix : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return _js_helper.Primitives.parseInt(source, radix, onError);
  }
  static tryParse(source, opts) {
    let radix = opts && 'radix' in opts ? opts.radix : null;
    return _js_helper.Primitives.parseInt(source, radix, C20 || CT.C20);
  }
};
dart.setLibraryUri(core.int, "dart:core");
_internal.CodeUnits = class CodeUnits extends _internal.UnmodifiableListBase$(core.int) {
  get length() {
    return this[_string$].length;
  }
  set length(value) {
    super.length = value;
  }
  _get(i) {
    return this[_string$][$codeUnitAt](i);
  }
  static stringOf(u) {
    return u[_string$];
  }
};
(_internal.CodeUnits.new = function(_string) {
  this[_string$] = _string;
  ;
}).prototype = _internal.CodeUnits.prototype;
;
;
dart.setGetterSignature(_internal.CodeUnits, () => ({
  __proto__: dart.getGetters(_internal.CodeUnits.__proto__),
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_internal.CodeUnits, "dart:_internal");
;
dart.defineExtensionMethods(_internal.CodeUnits, ['_get']);
dart.defineExtensionAccessors(_internal.CodeUnits, ['length']);
const name$5 = dart.privateName(_internal, "ExternalName.name");
_internal.ExternalName = class ExternalName extends core.Object {
  get name() {
    return this[name$5];
  }
  set name(value) {
    super.name = value;
  }
};
(_internal.ExternalName.new = function(name) {
  this[name$5] = name;
  ;
}).prototype = _internal.ExternalName.prototype;
;
dart.setLibraryUri(_internal.ExternalName, "dart:_internal");
;
const version$ = dart.privateName(_internal, "Since.version");
_internal.Since = class Since extends core.Object {
  get version() {
    return this[version$];
  }
  set version(value) {
    super.version = value;
  }
};
(_internal.Since.new = function(version) {
  this[version$] = version;
  ;
}).prototype = _internal.Since.prototype;
;
dart.setLibraryUri(_internal.Since, "dart:_internal");
;
_internal.HttpStatus = class HttpStatus extends core.Object {};
(_internal.HttpStatus.new = function() {
  ;
}).prototype = _internal.HttpStatus.prototype;
;
dart.setLibraryUri(_internal.HttpStatus, "dart:_internal");
dart.defineLazy(_internal.HttpStatus, {
  /*_internal.HttpStatus.continue__*/get continue__() {
    return 100;
  },
  /*_internal.HttpStatus.switchingProtocols*/get switchingProtocols() {
    return 101;
  },
  /*_internal.HttpStatus.processing*/get processing() {
    return 102;
  },
  /*_internal.HttpStatus.ok*/get ok() {
    return 200;
  },
  /*_internal.HttpStatus.created*/get created() {
    return 201;
  },
  /*_internal.HttpStatus.accepted*/get accepted() {
    return 202;
  },
  /*_internal.HttpStatus.nonAuthoritativeInformation*/get nonAuthoritativeInformation() {
    return 203;
  },
  /*_internal.HttpStatus.noContent*/get noContent() {
    return 204;
  },
  /*_internal.HttpStatus.resetContent*/get resetContent() {
    return 205;
  },
  /*_internal.HttpStatus.partialContent*/get partialContent() {
    return 206;
  },
  /*_internal.HttpStatus.multiStatus*/get multiStatus() {
    return 207;
  },
  /*_internal.HttpStatus.alreadyReported*/get alreadyReported() {
    return 208;
  },
  /*_internal.HttpStatus.imUsed*/get imUsed() {
    return 226;
  },
  /*_internal.HttpStatus.multipleChoices*/get multipleChoices() {
    return 300;
  },
  /*_internal.HttpStatus.movedPermanently*/get movedPermanently() {
    return 301;
  },
  /*_internal.HttpStatus.found*/get found() {
    return 302;
  },
  /*_internal.HttpStatus.movedTemporarily*/get movedTemporarily() {
    return 302;
  },
  /*_internal.HttpStatus.seeOther*/get seeOther() {
    return 303;
  },
  /*_internal.HttpStatus.notModified*/get notModified() {
    return 304;
  },
  /*_internal.HttpStatus.useProxy*/get useProxy() {
    return 305;
  },
  /*_internal.HttpStatus.temporaryRedirect*/get temporaryRedirect() {
    return 307;
  },
  /*_internal.HttpStatus.permanentRedirect*/get permanentRedirect() {
    return 308;
  },
  /*_internal.HttpStatus.badRequest*/get badRequest() {
    return 400;
  },
  /*_internal.HttpStatus.unauthorized*/get unauthorized() {
    return 401;
  },
  /*_internal.HttpStatus.paymentRequired*/get paymentRequired() {
    return 402;
  },
  /*_internal.HttpStatus.forbidden*/get forbidden() {
    return 403;
  },
  /*_internal.HttpStatus.notFound*/get notFound() {
    return 404;
  },
  /*_internal.HttpStatus.methodNotAllowed*/get methodNotAllowed() {
    return 405;
  },
  /*_internal.HttpStatus.notAcceptable*/get notAcceptable() {
    return 406;
  },
  /*_internal.HttpStatus.proxyAuthenticationRequired*/get proxyAuthenticationRequired() {
    return 407;
  },
  /*_internal.HttpStatus.requestTimeout*/get requestTimeout() {
    return 408;
  },
  /*_internal.HttpStatus.conflict*/get conflict() {
    return 409;
  },
  /*_internal.HttpStatus.gone*/get gone() {
    return 410;
  },
  /*_internal.HttpStatus.lengthRequired*/get lengthRequired() {
    return 411;
  },
  /*_internal.HttpStatus.preconditionFailed*/get preconditionFailed() {
    return 412;
  },
  /*_internal.HttpStatus.requestEntityTooLarge*/get requestEntityTooLarge() {
    return 413;
  },
  /*_internal.HttpStatus.requestUriTooLong*/get requestUriTooLong() {
    return 414;
  },
  /*_internal.HttpStatus.unsupportedMediaType*/get unsupportedMediaType() {
    return 415;
  },
  /*_internal.HttpStatus.requestedRangeNotSatisfiable*/get requestedRangeNotSatisfiable() {
    return 416;
  },
  /*_internal.HttpStatus.expectationFailed*/get expectationFailed() {
    return 417;
  },
  /*_internal.HttpStatus.misdirectedRequest*/get misdirectedRequest() {
    return 421;
  },
  /*_internal.HttpStatus.unprocessableEntity*/get unprocessableEntity() {
    return 422;
  },
  /*_internal.HttpStatus.locked*/get locked() {
    return 423;
  },
  /*_internal.HttpStatus.failedDependency*/get failedDependency() {
    return 424;
  },
  /*_internal.HttpStatus.upgradeRequired*/get upgradeRequired() {
    return 426;
  },
  /*_internal.HttpStatus.preconditionRequired*/get preconditionRequired() {
    return 428;
  },
  /*_internal.HttpStatus.tooManyRequests*/get tooManyRequests() {
    return 429;
  },
  /*_internal.HttpStatus.requestHeaderFieldsTooLarge*/get requestHeaderFieldsTooLarge() {
    return 431;
  },
  /*_internal.HttpStatus.connectionClosedWithoutResponse*/get connectionClosedWithoutResponse() {
    return 444;
  },
  /*_internal.HttpStatus.unavailableForLegalReasons*/get unavailableForLegalReasons() {
    return 451;
  },
  /*_internal.HttpStatus.clientClosedRequest*/get clientClosedRequest() {
    return 499;
  },
  /*_internal.HttpStatus.internalServerError*/get internalServerError() {
    return 500;
  },
  /*_internal.HttpStatus.notImplemented*/get notImplemented() {
    return 501;
  },
  /*_internal.HttpStatus.badGateway*/get badGateway() {
    return 502;
  },
  /*_internal.HttpStatus.serviceUnavailable*/get serviceUnavailable() {
    return 503;
  },
  /*_internal.HttpStatus.gatewayTimeout*/get gatewayTimeout() {
    return 504;
  },
  /*_internal.HttpStatus.httpVersionNotSupported*/get httpVersionNotSupported() {
    return 505;
  },
  /*_internal.HttpStatus.variantAlsoNegotiates*/get variantAlsoNegotiates() {
    return 506;
  },
  /*_internal.HttpStatus.insufficientStorage*/get insufficientStorage() {
    return 507;
  },
  /*_internal.HttpStatus.loopDetected*/get loopDetected() {
    return 508;
  },
  /*_internal.HttpStatus.notExtended*/get notExtended() {
    return 510;
  },
  /*_internal.HttpStatus.networkAuthenticationRequired*/get networkAuthenticationRequired() {
    return 511;
  },
  /*_internal.HttpStatus.networkConnectTimeoutError*/get networkConnectTimeoutError() {
    return 599;
  },
  /*_internal.HttpStatus.CONTINUE*/get CONTINUE() {
    return 100;
  },
  /*_internal.HttpStatus.SWITCHING_PROTOCOLS*/get SWITCHING_PROTOCOLS() {
    return 101;
  },
  /*_internal.HttpStatus.OK*/get OK() {
    return 200;
  },
  /*_internal.HttpStatus.CREATED*/get CREATED() {
    return 201;
  },
  /*_internal.HttpStatus.ACCEPTED*/get ACCEPTED() {
    return 202;
  },
  /*_internal.HttpStatus.NON_AUTHORITATIVE_INFORMATION*/get NON_AUTHORITATIVE_INFORMATION() {
    return 203;
  },
  /*_internal.HttpStatus.NO_CONTENT*/get NO_CONTENT() {
    return 204;
  },
  /*_internal.HttpStatus.RESET_CONTENT*/get RESET_CONTENT() {
    return 205;
  },
  /*_internal.HttpStatus.PARTIAL_CONTENT*/get PARTIAL_CONTENT() {
    return 206;
  },
  /*_internal.HttpStatus.MULTIPLE_CHOICES*/get MULTIPLE_CHOICES() {
    return 300;
  },
  /*_internal.HttpStatus.MOVED_PERMANENTLY*/get MOVED_PERMANENTLY() {
    return 301;
  },
  /*_internal.HttpStatus.FOUND*/get FOUND() {
    return 302;
  },
  /*_internal.HttpStatus.MOVED_TEMPORARILY*/get MOVED_TEMPORARILY() {
    return 302;
  },
  /*_internal.HttpStatus.SEE_OTHER*/get SEE_OTHER() {
    return 303;
  },
  /*_internal.HttpStatus.NOT_MODIFIED*/get NOT_MODIFIED() {
    return 304;
  },
  /*_internal.HttpStatus.USE_PROXY*/get USE_PROXY() {
    return 305;
  },
  /*_internal.HttpStatus.TEMPORARY_REDIRECT*/get TEMPORARY_REDIRECT() {
    return 307;
  },
  /*_internal.HttpStatus.BAD_REQUEST*/get BAD_REQUEST() {
    return 400;
  },
  /*_internal.HttpStatus.UNAUTHORIZED*/get UNAUTHORIZED() {
    return 401;
  },
  /*_internal.HttpStatus.PAYMENT_REQUIRED*/get PAYMENT_REQUIRED() {
    return 402;
  },
  /*_internal.HttpStatus.FORBIDDEN*/get FORBIDDEN() {
    return 403;
  },
  /*_internal.HttpStatus.NOT_FOUND*/get NOT_FOUND() {
    return 404;
  },
  /*_internal.HttpStatus.METHOD_NOT_ALLOWED*/get METHOD_NOT_ALLOWED() {
    return 405;
  },
  /*_internal.HttpStatus.NOT_ACCEPTABLE*/get NOT_ACCEPTABLE() {
    return 406;
  },
  /*_internal.HttpStatus.PROXY_AUTHENTICATION_REQUIRED*/get PROXY_AUTHENTICATION_REQUIRED() {
    return 407;
  },
  /*_internal.HttpStatus.REQUEST_TIMEOUT*/get REQUEST_TIMEOUT() {
    return 408;
  },
  /*_internal.HttpStatus.CONFLICT*/get CONFLICT() {
    return 409;
  },
  /*_internal.HttpStatus.GONE*/get GONE() {
    return 410;
  },
  /*_internal.HttpStatus.LENGTH_REQUIRED*/get LENGTH_REQUIRED() {
    return 411;
  },
  /*_internal.HttpStatus.PRECONDITION_FAILED*/get PRECONDITION_FAILED() {
    return 412;
  },
  /*_internal.HttpStatus.REQUEST_ENTITY_TOO_LARGE*/get REQUEST_ENTITY_TOO_LARGE() {
    return 413;
  },
  /*_internal.HttpStatus.REQUEST_URI_TOO_LONG*/get REQUEST_URI_TOO_LONG() {
    return 414;
  },
  /*_internal.HttpStatus.UNSUPPORTED_MEDIA_TYPE*/get UNSUPPORTED_MEDIA_TYPE() {
    return 415;
  },
  /*_internal.HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE*/get REQUESTED_RANGE_NOT_SATISFIABLE() {
    return 416;
  },
  /*_internal.HttpStatus.EXPECTATION_FAILED*/get EXPECTATION_FAILED() {
    return 417;
  },
  /*_internal.HttpStatus.UPGRADE_REQUIRED*/get UPGRADE_REQUIRED() {
    return 426;
  },
  /*_internal.HttpStatus.INTERNAL_SERVER_ERROR*/get INTERNAL_SERVER_ERROR() {
    return 500;
  },
  /*_internal.HttpStatus.NOT_IMPLEMENTED*/get NOT_IMPLEMENTED() {
    return 501;
  },
  /*_internal.HttpStatus.BAD_GATEWAY*/get BAD_GATEWAY() {
    return 502;
  },
  /*_internal.HttpStatus.SERVICE_UNAVAILABLE*/get SERVICE_UNAVAILABLE() {
    return 503;
  },
  /*_internal.HttpStatus.GATEWAY_TIMEOUT*/get GATEWAY_TIMEOUT() {
    return 504;
  },
  /*_internal.HttpStatus.HTTP_VERSION_NOT_SUPPORTED*/get HTTP_VERSION_NOT_SUPPORTED() {
    return 505;
  },
  /*_internal.HttpStatus.NETWORK_CONNECT_TIMEOUT_ERROR*/get NETWORK_CONNECT_TIMEOUT_ERROR() {
    return 599;
  }
});
const _source$ = dart.privateName(_internal, "_source");
const _add = dart.privateName(async, "_add");
const _closeUnchecked = dart.privateName(async, "_closeUnchecked");
const _addError = dart.privateName(async, "_addError");
const _completeError = dart.privateName(async, "_completeError");
const _complete = dart.privateName(async, "_complete");
const _sink$ = dart.privateName(async, "_sink");
async.Stream$ = dart.generic(T => {
  let _AsBroadcastStreamOfT = () => (_AsBroadcastStreamOfT = dart.constFn(async._AsBroadcastStream$(T)))();
  let _WhereStreamOfT = () => (_WhereStreamOfT = dart.constFn(async._WhereStream$(T)))();
  let TToNull = () => (TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
  let _HandleErrorStreamOfT = () => (_HandleErrorStreamOfT = dart.constFn(async._HandleErrorStream$(T)))();
  let StreamConsumerOfT = () => (StreamConsumerOfT = dart.constFn(async.StreamConsumer$(T)))();
  let TAndTToT = () => (TAndTToT = dart.constFn(dart.fnType(T, [T, T])))();
  let _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
  let VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
  let JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
  let ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
  let _FutureOfListOfT = () => (_FutureOfListOfT = dart.constFn(async._Future$(ListOfT())))();
  let _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
  let SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
  let _FutureOfSetOfT = () => (_FutureOfSetOfT = dart.constFn(async._Future$(SetOfT())))();
  let _TakeStreamOfT = () => (_TakeStreamOfT = dart.constFn(async._TakeStream$(T)))();
  let _TakeWhileStreamOfT = () => (_TakeWhileStreamOfT = dart.constFn(async._TakeWhileStream$(T)))();
  let _SkipStreamOfT = () => (_SkipStreamOfT = dart.constFn(async._SkipStream$(T)))();
  let _SkipWhileStreamOfT = () => (_SkipWhileStreamOfT = dart.constFn(async._SkipWhileStream$(T)))();
  let _DistinctStreamOfT = () => (_DistinctStreamOfT = dart.constFn(async._DistinctStream$(T)))();
  let TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
  let EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
  let _ControllerEventSinkWrapperOfT = () => (_ControllerEventSinkWrapperOfT = dart.constFn(async._ControllerEventSinkWrapper$(T)))();
  let _SyncBroadcastStreamControllerOfT = () => (_SyncBroadcastStreamControllerOfT = dart.constFn(async._SyncBroadcastStreamController$(T)))();
  let _SyncStreamControllerOfT = () => (_SyncStreamControllerOfT = dart.constFn(async._SyncStreamController$(T)))();
  let _StreamControllerBaseOfT = () => (_StreamControllerBaseOfT = dart.constFn(async._StreamControllerBase$(T)))();
  class Stream extends core.Object {
    static value(value) {
      let t13;
      return (t13 = new (async._AsyncStreamController$(T)).new(null, null, null, null), t13[_add](value), t13[_closeUnchecked](), t13).stream;
    }
    static error(error, stackTrace) {
      let t13;
      if (stackTrace === void 0) stackTrace = null;
      return (t13 = new (async._AsyncStreamController$(T)).new(null, null, null, null), t13[_addError](error, stackTrace), t13[_closeUnchecked](), t13).stream;
    }
    static fromFuture(future) {
      let controller = new (async._SyncStreamController$(T)).new(null, null, null, null);
      future.then(core.Null, dart.fn(value => {
        controller[_add](value);
        controller[_closeUnchecked]();
      }, dart.fnType(core.Null, [T])), {onError: dart.fn((error, stackTrace) => {
          controller[_addError](error, core.StackTrace._check(stackTrace));
          controller[_closeUnchecked]();
        }, dynamicAnddynamicToNull())});
      return controller.stream;
    }
    static fromFutures(futures) {
      let controller = new (async._SyncStreamController$(T)).new(null, null, null, null);
      let count = 0;
      let onValue = dart.fn(value => {
        if (!dart.test(controller.isClosed)) {
          controller[_add](value);
          if ((count = count - 1) === 0) controller[_closeUnchecked]();
        }
      }, dart.fnType(core.Null, [T]));
      let onError = dart.fn((error, stack) => {
        if (!dart.test(controller.isClosed)) {
          controller[_addError](error, stack);
          if ((count = count - 1) === 0) controller[_closeUnchecked]();
        }
      }, dynamicAndStackTraceToNull());
      for (let future of futures) {
        count = count + 1;
        future.then(core.Null, onValue, {onError: onError});
      }
      if (count === 0) async.scheduleMicrotask(dart.bind(controller, 'close'));
      return controller.stream;
    }
    static fromIterable(elements) {
      return new (async._GeneratedStreamImpl$(T)).new(dart.fn(() => new (async._IterablePendingEvents$(T)).new(elements), dart.fnType(async._IterablePendingEvents$(T), [])));
    }
    static periodic(period, computation) {
      if (computation === void 0) computation = null;
      let timer = null;
      let computationCount = 0;
      let controller = null;
      let watch = new core.Stopwatch.new();
      function sendEvent() {
        let t13;
        watch.reset();
        let data = null;
        if (computation != null) {
          try {
            data = computation((t13 = computationCount, computationCount = t13 + 1, t13));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            controller.addError(e, s);
            return;
          }
        }
        controller.add(data);
      }
      dart.fn(sendEvent, VoidTovoid());
      function startPeriodicTimer() {
        if (!(timer == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream.dart", 281, 14, "timer == null");
        timer = async.Timer.periodic(period, dart.fn(timer => {
          sendEvent();
        }, TimerToNull()));
      }
      dart.fn(startPeriodicTimer, VoidTovoid());
      controller = async.StreamController$(T).new({sync: true, onListen: dart.fn(() => {
          watch.start();
          startPeriodicTimer();
        }, VoidToNull()), onPause: dart.fn(() => {
          timer.cancel();
          timer = null;
          watch.stop();
        }, VoidToNull()), onResume: dart.fn(() => {
          if (!(timer == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream.dart", 299, 18, "timer == null");
          let elapsed = watch.elapsed;
          watch.start();
          timer = async.Timer.new(period['-'](elapsed), dart.fn(() => {
            timer = null;
            startPeriodicTimer();
            sendEvent();
          }, VoidToNull()));
        }, VoidToNull()), onCancel: dart.fn(() => {
          if (timer != null) timer.cancel();
          timer = null;
          return async.Future._nullFuture;
        }, VoidTo_FutureOfNull())});
      return controller.stream;
    }
    static eventTransformed(source, mapSink) {
      return new (async._BoundSinkStream$(dart.dynamic, T)).new(source, mapSink);
    }
    static castFrom(S, T, source) {
      return new (_internal.CastStream$(S, T)).new(source);
    }
    get isBroadcast() {
      return false;
    }
    asBroadcastStream(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      return new (_AsBroadcastStreamOfT()).new(this, onListen, onCancel);
    }
    where(test) {
      return new (_WhereStreamOfT()).new(this, test);
    }
    map(S, convert) {
      return new (async._MapStream$(T, S)).new(this, convert);
    }
    asyncMap(E, convert) {
      let controller = null;
      let subscription = null;
      const onListen = () => {
        let add = dart.bind(controller, 'add');
        if (!(async._StreamController$(E).is(controller) || async._BroadcastStreamController.is(controller))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream.dart", 505, 14, "controller is _StreamController<E> ||\n          controller is _BroadcastStreamController");
        let addError = dart.bind(controller, _addError);
        subscription = this.listen(dart.fn(event => {
          let newValue = null;
          try {
            newValue = convert(event);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            controller.addError(e, s);
            return;
          }
          if (async.Future$(E).is(newValue)) {
            subscription.pause();
            newValue.then(dart.void, add, {onError: addError}).whenComplete(dart.bind(subscription, 'resume'));
          } else {
            controller.add(E._check(newValue));
          }
        }, TToNull()), {onError: addError, onDone: dart.bind(controller, 'close')});
      };
      dart.fn(onListen, VoidTovoid());
      if (dart.test(this.isBroadcast)) {
        controller = async._StreamControllerBase$(E)._check(async.StreamController$(E).broadcast({onListen: onListen, onCancel: dart.fn(() => {
            subscription.cancel();
          }, VoidToNull()), sync: true}));
      } else {
        controller = async._StreamControllerBase$(E)._check(async.StreamController$(E).new({onListen: onListen, onPause: dart.fn(() => {
            subscription.pause();
          }, VoidToNull()), onResume: dart.fn(() => {
            subscription.resume();
          }, VoidToNull()), onCancel: dart.fn(() => subscription.cancel(), VoidToFuture()), sync: true}));
      }
      return controller.stream;
    }
    asyncExpand(E, convert) {
      let controller = null;
      let subscription = null;
      const onListen = () => {
        if (!(async._StreamController.is(controller) || async._BroadcastStreamController.is(controller))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream.dart", 571, 14, "controller is _StreamController ||\n          controller is _BroadcastStreamController");
        subscription = this.listen(dart.fn(event => {
          let newStream = null;
          try {
            newStream = convert(event);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            controller.addError(e, s);
            return;
          }
          if (newStream != null) {
            subscription.pause();
            controller.addStream(newStream).whenComplete(dart.bind(subscription, 'resume'));
          }
        }, TToNull()), {onError: dart.bind(controller, _addError), onDone: dart.bind(controller, 'close')});
      };
      dart.fn(onListen, VoidTovoid());
      if (dart.test(this.isBroadcast)) {
        controller = async._StreamControllerBase$(E)._check(async.StreamController$(E).broadcast({onListen: onListen, onCancel: dart.fn(() => {
            subscription.cancel();
          }, VoidToNull()), sync: true}));
      } else {
        controller = async._StreamControllerBase$(E)._check(async.StreamController$(E).new({onListen: onListen, onPause: dart.fn(() => {
            subscription.pause();
          }, VoidToNull()), onResume: dart.fn(() => {
            subscription.resume();
          }, VoidToNull()), onCancel: dart.fn(() => subscription.cancel(), VoidToFuture()), sync: true}));
      }
      return controller.stream;
    }
    handleError(onError, opts) {
      let test = opts && 'test' in opts ? opts.test : null;
      return new (_HandleErrorStreamOfT()).new(this, onError, test);
    }
    expand(S, convert) {
      return new (async._ExpandStream$(T, S)).new(this, convert);
    }
    pipe(streamConsumer) {
      StreamConsumerOfT()._check(streamConsumer);
      return streamConsumer.addStream(this).then(dart.dynamic, dart.fn(_ => streamConsumer.close(), dynamicToFuture()));
    }
    transform(S, streamTransformer) {
      async.StreamTransformer$(T, S)._check(streamTransformer);
      return streamTransformer.bind(this);
    }
    reduce(combine) {
      TAndTToT()._check(combine);
      let result = new (_FutureOfT()).new();
      let seenFirst = false;
      let value = null;
      let subscription = null;
      subscription = this.listen(dart.fn(element => {
        if (seenFirst) {
          async._runUserCode(T, dart.fn(() => combine(value, element), VoidToT()), dart.fn(newValue => {
            value = newValue;
          }, TToNull()), async._cancelAndErrorClosure(subscription, result));
        } else {
          value = element;
          seenFirst = true;
        }
      }, TToNull()), {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
          if (!seenFirst) {
            try {
              dart.throw(_internal.IterableElementError.noElement());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              async._completeWithErrorCallback(result, e, s);
            }
          } else {
            result[_complete](value);
          }
        }, VoidToNull()), cancelOnError: true});
      return result;
    }
    fold(S, initialValue, combine) {
      let result = new (async._Future$(S)).new();
      let value = initialValue;
      let subscription = null;
      subscription = this.listen(dart.fn(element => {
        async._runUserCode(S, dart.fn(() => combine(value, element), dart.fnType(S, [])), dart.fn(newValue => {
          value = newValue;
        }, dart.fnType(core.Null, [S])), async._cancelAndErrorClosure(subscription, result));
      }, TToNull()), {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
          result[_complete](value);
        }, VoidToNull()), cancelOnError: true});
      return result;
    }
    join(separator) {
      if (separator === void 0) separator = "";
      let result = new (_FutureOfString()).new();
      let buffer = new core.StringBuffer.new();
      let subscription = null;
      let first = true;
      subscription = this.listen(dart.fn(element => {
        if (!first) {
          buffer.write(separator);
        }
        first = false;
        try {
          buffer.write(element);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          async._cancelAndErrorWithReplacement(subscription, result, e, s);
        }
      }, TToNull()), {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
          result[_complete](buffer.toString());
        }, VoidToNull()), cancelOnError: true});
      return result;
    }
    contains(needle) {
      let future = new (_FutureOfbool()).new();
      let subscription = null;
      subscription = this.listen(dart.fn(element => {
        async._runUserCode(core.bool, dart.fn(() => dart.equals(element, needle), VoidTobool()), dart.fn(isMatch => {
          if (dart.test(isMatch)) {
            async._cancelAndValue(subscription, future, true);
          }
        }, boolToNull()), async._cancelAndErrorClosure(subscription, future));
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](false);
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    forEach(action) {
      let future = new async._Future.new();
      let subscription = null;
      subscription = this.listen(dart.fn(element => {
        async._runUserCode(dart.dynamic, dart.fn(() => action(element), VoidTovoid()), dart.fn(_ => {
        }, dynamicToNull()), async._cancelAndErrorClosure(subscription, future));
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](null);
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    every(test) {
      let future = new (_FutureOfbool()).new();
      let subscription = null;
      subscription = this.listen(dart.fn(element => {
        async._runUserCode(core.bool, dart.fn(() => test(element), VoidTobool()), dart.fn(isMatch => {
          if (!dart.test(isMatch)) {
            async._cancelAndValue(subscription, future, false);
          }
        }, boolToNull()), async._cancelAndErrorClosure(subscription, future));
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](true);
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    any(test) {
      let future = new (_FutureOfbool()).new();
      let subscription = null;
      subscription = this.listen(dart.fn(element => {
        async._runUserCode(core.bool, dart.fn(() => test(element), VoidTobool()), dart.fn(isMatch => {
          if (dart.test(isMatch)) {
            async._cancelAndValue(subscription, future, true);
          }
        }, boolToNull()), async._cancelAndErrorClosure(subscription, future));
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](false);
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    get length() {
      let future = new (_FutureOfint()).new();
      let count = 0;
      this.listen(dart.fn(_ => {
        count = count + 1;
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](count);
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    get isEmpty() {
      let future = new (_FutureOfbool()).new();
      let subscription = null;
      subscription = this.listen(dart.fn(_ => {
        async._cancelAndValue(subscription, future, false);
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](true);
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    cast(R) {
      return async.Stream.castFrom(T, R, this);
    }
    toList() {
      let result = JSArrayOfT().of([]);
      let future = new (_FutureOfListOfT()).new();
      this.listen(dart.fn(data => {
        result[$add](data);
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](result);
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    toSet() {
      let result = new (_HashSetOfT()).new();
      let future = new (_FutureOfSetOfT()).new();
      this.listen(dart.fn(data => {
        result.add(data);
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_complete](result);
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    drain(E, futureValue) {
      if (futureValue === void 0) futureValue = null;
      return this.listen(null, {cancelOnError: true}).asFuture(E, futureValue);
    }
    take(count) {
      return new (_TakeStreamOfT()).new(this, count);
    }
    takeWhile(test) {
      return new (_TakeWhileStreamOfT()).new(this, test);
    }
    skip(count) {
      return new (_SkipStreamOfT()).new(this, count);
    }
    skipWhile(test) {
      return new (_SkipWhileStreamOfT()).new(this, test);
    }
    distinct(equals) {
      if (equals === void 0) equals = null;
      return new (_DistinctStreamOfT()).new(this, equals);
    }
    get first() {
      let future = new (_FutureOfT()).new();
      let subscription = null;
      subscription = this.listen(dart.fn(value => {
        async._cancelAndValue(subscription, future, value);
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            async._completeWithErrorCallback(future, e, s);
          }
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    get last() {
      let future = new (_FutureOfT()).new();
      let result = null;
      let foundResult = false;
      this.listen(dart.fn(value => {
        foundResult = true;
        result = value;
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (foundResult) {
            future[_complete](result);
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            async._completeWithErrorCallback(future, e, s);
          }
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    get single() {
      let future = new (_FutureOfT()).new();
      let result = null;
      let foundResult = false;
      let subscription = null;
      subscription = this.listen(dart.fn(value => {
        if (foundResult) {
          try {
            dart.throw(_internal.IterableElementError.tooMany());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            async._cancelAndErrorWithReplacement(subscription, future, e, s);
          }
          return;
        }
        foundResult = true;
        result = value;
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (foundResult) {
            future[_complete](result);
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            async._completeWithErrorCallback(future, e, s);
          }
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    firstWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToT()._check(orElse);
      let future = new (_FutureOfT()).new();
      let subscription = null;
      subscription = this.listen(dart.fn(value => {
        async._runUserCode(core.bool, dart.fn(() => test(value), VoidTobool()), dart.fn(isMatch => {
          if (dart.test(isMatch)) {
            async._cancelAndValue(subscription, future, value);
          }
        }, boolToNull()), async._cancelAndErrorClosure(subscription, future));
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (orElse != null) {
            async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            async._completeWithErrorCallback(future, e, s);
          }
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToT()._check(orElse);
      let future = new (_FutureOfT()).new();
      let result = null;
      let foundResult = false;
      let subscription = null;
      subscription = this.listen(dart.fn(value => {
        async._runUserCode(core.bool, dart.fn(() => true[$_equals](test(value)), VoidTobool()), dart.fn(isMatch => {
          if (dart.test(isMatch)) {
            foundResult = true;
            result = value;
          }
        }, boolToNull()), async._cancelAndErrorClosure(subscription, future));
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (foundResult) {
            future[_complete](result);
            return;
          }
          if (orElse != null) {
            async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
            return;
          }
          try {
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            async._completeWithErrorCallback(future, e, s);
          }
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    singleWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToT()._check(orElse);
      let future = new (_FutureOfT()).new();
      let result = null;
      let foundResult = false;
      let subscription = null;
      subscription = this.listen(dart.fn(value => {
        async._runUserCode(core.bool, dart.fn(() => true[$_equals](test(value)), VoidTobool()), dart.fn(isMatch => {
          if (dart.test(isMatch)) {
            if (foundResult) {
              try {
                dart.throw(_internal.IterableElementError.tooMany());
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                async._cancelAndErrorWithReplacement(subscription, future, e, s);
              }
              return;
            }
            foundResult = true;
            result = value;
          }
        }, boolToNull()), async._cancelAndErrorClosure(subscription, future));
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          if (foundResult) {
            future[_complete](result);
            return;
          }
          try {
            if (orElse != null) {
              async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
              return;
            }
            dart.throw(_internal.IterableElementError.noElement());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            async._completeWithErrorCallback(future, e, s);
          }
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    elementAt(index) {
      core.ArgumentError.checkNotNull(index, "index");
      core.RangeError.checkNotNegative(index, "index");
      let future = new (_FutureOfT()).new();
      let subscription = null;
      let elementIndex = 0;
      subscription = this.listen(dart.fn(value => {
        if (index === elementIndex) {
          async._cancelAndValue(subscription, future, value);
          return;
        }
        elementIndex = elementIndex + 1;
      }, TToNull()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
          future[_completeError](new core.IndexError.new(index, this, "index", null, elementIndex));
        }, VoidToNull()), cancelOnError: true});
      return future;
    }
    timeout(timeLimit, opts) {
      let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
      let controller = null;
      let subscription = null;
      let timer = null;
      let zone = null;
      let timeout = null;
      function onData(event) {
        timer.cancel();
        timer = zone.createTimer(timeLimit, timeout);
        controller.add(event);
      }
      dart.fn(onData, TTovoid());
      function onError(error, stackTrace) {
        timer.cancel();
        if (!(async._StreamController.is(controller) || async._BroadcastStreamController.is(controller))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream.dart", 1577, 14, "controller is _StreamController ||\n          controller is _BroadcastStreamController");
        controller[_addError](error, stackTrace);
        timer = zone.createTimer(timeLimit, timeout);
      }
      dart.fn(onError, dynamicAndStackTraceTovoid());
      function onDone() {
        timer.cancel();
        controller.close();
      }
      dart.fn(onDone, VoidTovoid());
      const onListen = () => {
        zone = async.Zone.current;
        if (onTimeout == null) {
          timeout = dart.fn(() => {
            controller.addError(new async.TimeoutException.new("No stream event", timeLimit), null);
          }, VoidToNull());
        } else {
          let registeredOnTimeout = zone.registerUnaryCallback(dart.dynamic, EventSinkOfT(), onTimeout);
          let wrapper = new (_ControllerEventSinkWrapperOfT()).new(null);
          timeout = dart.fn(() => {
            wrapper[_sink$] = controller;
            zone.runUnaryGuarded(_ControllerEventSinkWrapperOfT(), registeredOnTimeout, wrapper);
            wrapper[_sink$] = null;
          }, VoidToNull());
        }
        subscription = this.listen(onData, {onError: onError, onDone: onDone});
        timer = zone.createTimer(timeLimit, timeout);
      };
      dart.fn(onListen, VoidTovoid());
      function onCancel() {
        timer.cancel();
        let result = subscription.cancel();
        subscription = null;
        return result;
      }
      dart.fn(onCancel, VoidToFuture());
      controller = _StreamControllerBaseOfT()._check(dart.test(this.isBroadcast) ? new (_SyncBroadcastStreamControllerOfT()).new(onListen, onCancel) : new (_SyncStreamControllerOfT()).new(onListen, dart.fn(() => {
        timer.cancel();
        subscription.pause();
      }, VoidToNull()), dart.fn(() => {
        subscription.resume();
        timer = zone.createTimer(timeLimit, timeout);
      }, VoidToNull()), onCancel));
      return controller.stream;
    }
  }
  (Stream.new = function() {
    ;
  }).prototype = Stream.prototype;
  (Stream._internal = function() {
    ;
  }).prototype = Stream.prototype;
  ;
  Stream.prototype[dart.isStream] = true;
  ;
  dart.setGetterSignature(Stream, () => ({
    __proto__: dart.getGetters(Stream.__proto__),
    isBroadcast: core.bool,
    length: async.Future$(core.int),
    isEmpty: async.Future$(core.bool),
    first: async.Future$(T),
    last: async.Future$(T),
    single: async.Future$(T)
  }));
  dart.setLibraryUri(Stream, "dart:async");
  return Stream;
});
async.Stream = async.Stream$();
;
const _is_CastStream_default = Symbol('_is_CastStream_default');
_internal.CastStream$ = dart.generic((S, T) => {
  let CastStreamSubscriptionOfS$T = () => (CastStreamSubscriptionOfS$T = dart.constFn(_internal.CastStreamSubscription$(S, T)))();
  class CastStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[_source$].isBroadcast;
    }
    listen(onData, opts) {
      let t13;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      t13 = new (CastStreamSubscriptionOfS$T()).new(this[_source$].listen(null, {onDone: onDone, cancelOnError: cancelOnError}));
      t13.onData(onData);
      t13.onError(onError);
      return t13;
    }
    cast(R) {
      return new (_internal.CastStream$(S, R)).new(this[_source$]);
    }
  }
  (CastStream.new = function(_source) {
    this[_source$] = _source;
    CastStream.__proto__.new.call(this);
    ;
  }).prototype = CastStream.prototype;
  ;
  CastStream.prototype[_is_CastStream_default] = true;
  ;
  dart.setLibraryUri(CastStream, "dart:_internal");
  ;
  return CastStream;
});
_internal.CastStream = _internal.CastStream$();
;
const _zone = dart.privateName(_internal, "_zone");
const _handleData = dart.privateName(_internal, "_handleData");
const _handleError = dart.privateName(_internal, "_handleError");
const _onData = dart.privateName(_internal, "_onData");
const _is_CastStreamSubscription_default = Symbol('_is_CastStreamSubscription_default');
_internal.CastStreamSubscription$ = dart.generic((S, T) => {
  class CastStreamSubscription extends core.Object {
    cancel() {
      return this[_source$].cancel();
    }
    onData(handleData) {
      this[_handleData] = handleData == null ? null : this[_zone].registerUnaryCallback(dart.dynamic, T, handleData);
    }
    onError(handleError) {
      this[_source$].onError(handleError);
      if (handleError == null) {
        this[_handleError] = null;
      } else if (NullAndNullTodynamic().is(handleError)) {
        this[_handleError] = this[_zone].registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, ObjectAndStackTraceTodynamic()._check(handleError));
      } else {
        this[_handleError] = this[_zone].registerUnaryCallback(dart.dynamic, core.Object, ObjectTodynamic()._check(handleError));
      }
    }
    onDone(handleDone) {
      this[_source$].onDone(handleDone);
    }
    [_onData](data) {
      S._check(data);
      if (this[_handleData] == null) return;
      let targetData = null;
      try {
        targetData = T.as(data);
      } catch (e) {
        let error = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        if (this[_handleError] == null) {
          this[_zone].handleUncaughtError(error, stack);
        } else if (NullAndNullTodynamic().is(this[_handleError])) {
          this[_zone].runBinaryGuarded(dart.dynamic, core.StackTrace, dynamicAndStackTraceTovoid()._check(this[_handleError]), error, stack);
        } else {
          this[_zone].runUnaryGuarded(dart.dynamic, dynamicTovoid()._check(this[_handleError]), error);
        }
        return;
      }
      this[_zone].runUnaryGuarded(T, this[_handleData], targetData);
    }
    pause(resumeSignal) {
      if (resumeSignal === void 0) resumeSignal = null;
      this[_source$].pause(resumeSignal);
    }
    resume() {
      this[_source$].resume();
    }
    get isPaused() {
      return this[_source$].isPaused;
    }
    asFuture(E, futureValue) {
      if (futureValue === void 0) futureValue = null;
      return this[_source$].asFuture(E, futureValue);
    }
  }
  (CastStreamSubscription.new = function(_source) {
    this[_zone] = async.Zone.current;
    this[_handleData] = null;
    this[_handleError] = null;
    this[_source$] = _source;
    this[_source$].onData(dart.bind(this, _onData));
  }).prototype = CastStreamSubscription.prototype;
  CastStreamSubscription.prototype[dart.isStreamSubscription] = true;
  ;
  CastStreamSubscription.prototype[_is_CastStreamSubscription_default] = true;
  CastStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T)];
  ;
  dart.setGetterSignature(CastStreamSubscription, () => ({
    __proto__: dart.getGetters(CastStreamSubscription.__proto__),
    isPaused: core.bool
  }));
  dart.setLibraryUri(CastStreamSubscription, "dart:_internal");
  ;
  return CastStreamSubscription;
});
_internal.CastStreamSubscription = _internal.CastStreamSubscription$();
;
const _is_StreamTransformerBase_default = Symbol('_is_StreamTransformerBase_default');
async.StreamTransformerBase$ = dart.generic((S, T) => {
  class StreamTransformerBase extends core.Object {
    cast(RS, RT) {
      return async.StreamTransformer.castFrom(S, T, RS, RT, this);
    }
  }
  (StreamTransformerBase.new = function() {
    ;
  }).prototype = StreamTransformerBase.prototype;
  ;
  StreamTransformerBase.prototype[_is_StreamTransformerBase_default] = true;
  StreamTransformerBase[dart.implements] = () => [async.StreamTransformer$(S, T)];
  ;
  dart.setLibraryUri(StreamTransformerBase, "dart:async");
  return StreamTransformerBase;
});
async.StreamTransformerBase = async.StreamTransformerBase$();
;
const _is_CastStreamTransformer_default = Symbol('_is_CastStreamTransformer_default');
_internal.CastStreamTransformer$ = dart.generic((SS, ST, TS, TT) => {
  let StreamOfTS = () => (StreamOfTS = dart.constFn(async.Stream$(TS)))();
  class CastStreamTransformer extends async.StreamTransformerBase$(TS, TT) {
    cast(RS, RT) {
      return new (_internal.CastStreamTransformer$(SS, ST, RS, RT)).new(this[_source$]);
    }
    bind(stream) {
      StreamOfTS()._check(stream);
      return this[_source$].bind(stream.cast(SS)).cast(TT);
    }
  }
  (CastStreamTransformer.new = function(_source) {
    this[_source$] = _source;
    CastStreamTransformer.__proto__.new.call(this);
    ;
  }).prototype = CastStreamTransformer.prototype;
  ;
  CastStreamTransformer.prototype[_is_CastStreamTransformer_default] = true;
  ;
  dart.setLibraryUri(CastStreamTransformer, "dart:_internal");
  ;
  return CastStreamTransformer;
});
_internal.CastStreamTransformer = _internal.CastStreamTransformer$();
;
const _is_Converter_default = Symbol('_is_Converter_default');
convert.Converter$ = dart.generic((S, T) => {
  let StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  let SinkOfT = () => (SinkOfT = dart.constFn(core.Sink$(T)))();
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  class Converter extends async.StreamTransformerBase$(S, T) {
    static castFrom(SS, ST, TS, TT, source) {
      return new (_internal.CastConverter$(SS, ST, TS, TT)).new(source);
    }
    fuse(TT, other) {
      convert.Converter$(T, TT)._check(other);
      return new (convert._FusedConverter$(S, T, TT)).new(this, other);
    }
    startChunkedConversion(sink) {
      SinkOfT()._check(sink);
      dart.throw(new core.UnsupportedError.new("This converter does not support chunked conversions: " + dart.str(this)));
    }
    bind(stream) {
      StreamOfS()._check(stream);
      return StreamOfT().eventTransformed(stream, dart.fn(sink => new convert._ConverterStreamEventSink.new(this, sink), EventSinkTo_ConverterStreamEventSink()));
    }
    cast(RS, RT) {
      return convert.Converter.castFrom(S, T, RS, RT, this);
    }
  }
  (Converter.new = function() {
    Converter.__proto__.new.call(this);
    ;
  }).prototype = Converter.prototype;
  ;
  Converter.prototype[_is_Converter_default] = true;
  ;
  dart.setLibraryUri(Converter, "dart:convert");
  return Converter;
});
convert.Converter = convert.Converter$();
;
const _is_CastConverter_default = Symbol('_is_CastConverter_default');
_internal.CastConverter$ = dart.generic((SS, ST, TS, TT) => {
  let StreamOfTS = () => (StreamOfTS = dart.constFn(async.Stream$(TS)))();
  class CastConverter extends convert.Converter$(TS, TT) {
    convert(input) {
      TS._check(input);
      return TT.as(this[_source$].convert(SS.as(input)));
    }
    bind(stream) {
      StreamOfTS()._check(stream);
      return this[_source$].bind(stream.cast(SS)).cast(TT);
    }
    cast(RS, RT) {
      return new (_internal.CastConverter$(SS, ST, RS, RT)).new(this[_source$]);
    }
  }
  (CastConverter.new = function(_source) {
    this[_source$] = _source;
    CastConverter.__proto__.new.call(this);
    ;
  }).prototype = CastConverter.prototype;
  ;
  CastConverter.prototype[_is_CastConverter_default] = true;
  ;
  dart.setLibraryUri(CastConverter, "dart:_internal");
  ;
  return CastConverter;
});
_internal.CastConverter = _internal.CastConverter$();
;
core.Iterable$ = dart.generic(E => {
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let EfficientLengthIterableOfE = () => (EfficientLengthIterableOfE = dart.constFn(_internal.EfficientLengthIterable$(E)))();
  let FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  let WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  let EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
  let TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
  let TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  let SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  let SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  let VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  class Iterable extends core.Object {
    static generate(count, generator) {
      if (generator === void 0) generator = null;
      if (dart.notNull(count) <= 0) return new (_internal.EmptyIterable$(E)).new();
      return new (core._GeneratorIterable$(E)).new(count, generator);
    }
    static castFrom(S, T, source) {
      return _internal.CastIterable$(S, T).new(source);
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
    cast(R) {
      return core.Iterable.castFrom(E, R, this);
    }
    followedBy(other) {
      IterableOfE()._check(other);
      if (EfficientLengthIterableOfE().is(this)) {
        return FollowedByIterableOfE().firstEfficient(EfficientLengthIterableOfE()._check(this), other);
      }
      return new (FollowedByIterableOfE()).new(this, other);
    }
    map(T, f) {
      return _internal.MappedIterable$(E, T).new(this, f);
    }
    where(test) {
      return new (WhereIterableOfE()).new(this, test);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    expand(T, f) {
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    contains(element) {
      for (let e of this) {
        if (dart.equals(e, element)) return true;
      }
      return false;
    }
    forEach(f) {
      for (let element of this)
        f(element);
    }
    reduce(combine) {
      EAndEToE()._check(combine);
      let iterator = this[$iterator];
      if (!dart.test(iterator.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let value = iterator.current;
      while (dart.test(iterator.moveNext())) {
        value = combine(value, iterator.current);
      }
      return value;
    }
    fold(T, initialValue, combine) {
      let value = initialValue;
      for (let element of this)
        value = combine(value, element);
      return value;
    }
    every(test) {
      for (let element of this) {
        if (!dart.test(test(element))) return false;
      }
      return true;
    }
    join(separator) {
      if (separator === void 0) separator = "";
      let iterator = this[$iterator];
      if (!dart.test(iterator.moveNext())) return "";
      let buffer = new core.StringBuffer.new();
      if (separator == null || separator === "") {
        do {
          buffer.write(dart.str(iterator.current));
        } while (dart.test(iterator.moveNext()));
      } else {
        buffer.write(dart.str(iterator.current));
        while (dart.test(iterator.moveNext())) {
          buffer.write(separator);
          buffer.write(dart.str(iterator.current));
        }
      }
      return buffer.toString();
    }
    any(test) {
      for (let element of this) {
        if (dart.test(test(element))) return true;
      }
      return false;
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      return ListOfE().from(this, {growable: growable});
    }
    toSet() {
      return LinkedHashSetOfE().from(this);
    }
    get length() {
      if (!!_internal.EfficientLengthIterable.is(this)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/iterable.dart", 422, 12, "this is! EfficientLengthIterable");
      let count = 0;
      let it = this[$iterator];
      while (dart.test(it.moveNext())) {
        count = count + 1;
      }
      return count;
    }
    get isEmpty() {
      return !dart.test(this[$iterator].moveNext());
    }
    get isNotEmpty() {
      return !dart.test(this[$isEmpty]);
    }
    take(count) {
      return TakeIterableOfE().new(this, count);
    }
    takeWhile(test) {
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    skip(count) {
      return SkipIterableOfE().new(this, count);
    }
    skipWhile(test) {
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    get first() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      return it.current;
    }
    get last() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = null;
      do {
        result = it.current;
      } while (dart.test(it.moveNext()));
      return result;
    }
    get single() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
      let result = it.current;
      if (dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.tooMany());
      return result;
    }
    firstWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      for (let element of this) {
        if (dart.test(test(element))) return element;
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let result = null;
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching) return result;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let result = null;
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          if (foundMatching) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching) return result;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      core.ArgumentError.checkNotNull(index, "index");
      core.RangeError.checkNotNegative(index, "index");
      let elementIndex = 0;
      for (let element of this) {
        if (index === elementIndex) return element;
        elementIndex = elementIndex + 1;
      }
      dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
    }
    toString() {
      return collection.IterableBase.iterableToShortString(this, "(", ")");
    }
  }
  (Iterable.new = function() {
    ;
  }).prototype = Iterable.prototype;
  ;
  Iterable.prototype[dart.isIterable] = true;
  ;
  dart.setGetterSignature(Iterable, () => ({
    __proto__: dart.getGetters(Iterable.__proto__),
    length: core.int,
    [$length]: core.int,
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E,
    single: E,
    [$single]: E
  }));
  dart.setLibraryUri(Iterable, "dart:core");
  dart.defineExtensionMethods(Iterable, [
    'cast',
    'followedBy',
    'map',
    'where',
    'whereType',
    'expand',
    'contains',
    'forEach',
    'reduce',
    'fold',
    'every',
    'join',
    'any',
    'toList',
    'toSet',
    'take',
    'takeWhile',
    'skip',
    'skipWhile',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'elementAt',
    'toString'
  ]);
  dart.defineExtensionAccessors(Iterable, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single'
  ]);
  return Iterable;
});
core.Iterable = core.Iterable$();
;
const _is__CastIterableBase_default = Symbol('_is__CastIterableBase_default');
_internal._CastIterableBase$ = dart.generic((S, T) => {
  let CastIteratorOfS$T = () => (CastIteratorOfS$T = dart.constFn(_internal.CastIterator$(S, T)))();
  let CastIterableOfS$T = () => (CastIterableOfS$T = dart.constFn(_internal.CastIterable$(S, T)))();
  let STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
  let VoidToS = () => (VoidToS = dart.constFn(dart.fnType(S, [])))();
  let VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
  class _CastIterableBase extends core.Iterable$(T) {
    get iterator() {
      return new (CastIteratorOfS$T()).new(this[_source$][$iterator]);
    }
    get length() {
      return this[_source$][$length];
    }
    get isEmpty() {
      return this[_source$][$isEmpty];
    }
    get isNotEmpty() {
      return this[_source$][$isNotEmpty];
    }
    skip(count) {
      return CastIterableOfS$T().new(this[_source$][$skip](count));
    }
    take(count) {
      return CastIterableOfS$T().new(this[_source$][$take](count));
    }
    elementAt(index) {
      return T.as(this[_source$][$elementAt](index));
    }
    get first() {
      return T.as(this[_source$][$first]);
    }
    get last() {
      return T.as(this[_source$][$last]);
    }
    get single() {
      return T.as(this[_source$][$single]);
    }
    contains(other) {
      return this[_source$][$contains](other);
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToT()._check(orElse);
      return T.as(this[_source$][$lastWhere](dart.fn(element => test(T.as(element)), STobool()), {orElse: orElse == null ? null : dart.fn(() => S.as(orElse()), VoidToS())}));
    }
    toString() {
      return dart.toString(this[_source$]);
    }
  }
  (_CastIterableBase.new = function() {
    _CastIterableBase.__proto__.new.call(this);
    ;
  }).prototype = _CastIterableBase.prototype;
  ;
  _CastIterableBase.prototype[_is__CastIterableBase_default] = true;
  dart.setGetterSignature(_CastIterableBase, () => ({
    __proto__: dart.getGetters(_CastIterableBase.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(_CastIterableBase, "dart:_internal");
  dart.defineExtensionMethods(_CastIterableBase, [
    'skip',
    'take',
    'elementAt',
    'contains',
    'lastWhere',
    'toString'
  ]);
  dart.defineExtensionAccessors(_CastIterableBase, [
    'iterator',
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single'
  ]);
  return _CastIterableBase;
});
_internal._CastIterableBase = _internal._CastIterableBase$();
;
const _is_CastIterator_default = Symbol('_is_CastIterator_default');
_internal.CastIterator$ = dart.generic((S, T) => {
  class CastIterator extends core.Object {
    moveNext() {
      return this[_source$].moveNext();
    }
    get current() {
      return T.as(this[_source$].current);
    }
  }
  (CastIterator.new = function(_source) {
    this[_source$] = _source;
    ;
  }).prototype = CastIterator.prototype;
  ;
  CastIterator.prototype[_is_CastIterator_default] = true;
  CastIterator[dart.implements] = () => [core.Iterator$(T)];
  ;
  dart.setGetterSignature(CastIterator, () => ({
    __proto__: dart.getGetters(CastIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(CastIterator, "dart:_internal");
  ;
  return CastIterator;
});
_internal.CastIterator = _internal.CastIterator$();
;
const _is_CastIterable_default = Symbol('_is_CastIterable_default');
const _source$0 = dart.privateName(_internal, "CastIterable._source");
_internal.CastIterable$ = dart.generic((S, T) => {
  class CastIterable extends _internal._CastIterableBase$(S, T) {
    get [_source$]() {
      return this[_source$0];
    }
    set [_source$](value) {
      super[_source$] = value;
    }
    static new(source) {
      if (_internal.EfficientLengthIterable$(S).is(source)) {
        return new (_internal._EfficientLengthCastIterable$(S, T)).new(source);
      }
      return new (_internal.CastIterable$(S, T)).__(source);
    }
    cast(R) {
      return _internal.CastIterable$(S, R).new(this[_source$]);
    }
  }
  (CastIterable.__ = function(_source) {
    this[_source$0] = _source;
    CastIterable.__proto__.new.call(this);
    ;
  }).prototype = CastIterable.prototype;
  ;
  CastIterable.prototype[_is_CastIterable_default] = true;
  dart.setLibraryUri(CastIterable, "dart:_internal");
  ;
  dart.defineExtensionMethods(CastIterable, ['cast']);
  return CastIterable;
});
_internal.CastIterable = _internal.CastIterable$();
;
const _is__EfficientLengthCastIterable_default = Symbol('_is__EfficientLengthCastIterable_default');
_internal._EfficientLengthCastIterable$ = dart.generic((S, T) => {
  class _EfficientLengthCastIterable extends _internal.CastIterable$(S, T) {}
  (_EfficientLengthCastIterable.new = function(source) {
    _EfficientLengthCastIterable.__proto__.__.call(this, source);
    ;
  }).prototype = _EfficientLengthCastIterable.prototype;
  ;
  _EfficientLengthCastIterable.prototype[_is__EfficientLengthCastIterable_default] = true;
  _EfficientLengthCastIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(T)];
  dart.setLibraryUri(_EfficientLengthCastIterable, "dart:_internal");
  return _EfficientLengthCastIterable;
});
_internal._EfficientLengthCastIterable = _internal._EfficientLengthCastIterable$();
;
const _is__CastListBase_default = Symbol('_is__CastListBase_default');
_internal._CastListBase$ = dart.generic((S, T) => {
  let CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
  let SAndSToint = () => (SAndSToint = dart.constFn(dart.fnType(core.int, [S, S])))();
  let STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
  let CastIterableOfS$T = () => (CastIterableOfS$T = dart.constFn(_internal.CastIterable$(S, T)))();
  let IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
  const _CastIterableBase_ListMixin$36 = class _CastIterableBase_ListMixin extends _internal._CastIterableBase$(S, T) {};
  (_CastIterableBase_ListMixin$36.new = function() {
    _CastIterableBase_ListMixin$36.__proto__.new.call(this);
  }).prototype = _CastIterableBase_ListMixin$36.prototype;
  dart.applyMixin(_CastIterableBase_ListMixin$36, collection.ListMixin$(T));
  class _CastListBase extends _CastIterableBase_ListMixin$36 {
    _get(index) {
      return T.as(this[_source$][$_get](index));
    }
    _set(index, value$) {
      let value = value$;
      T._check(value);
      this[_source$][$_set](index, S.as(value));
      return value$;
    }
    set length(length) {
      this[_source$][$length] = length;
    }
    get length() {
      return super.length;
    }
    add(value) {
      T._check(value);
      this[_source$][$add](S.as(value));
    }
    addAll(values) {
      IterableOfT()._check(values);
      this[_source$][$addAll](CastIterableOfT$S().new(values));
    }
    sort(compare) {
      if (compare === void 0) compare = null;
      this[_source$][$sort](compare == null ? null : dart.fn((v1, v2) => compare(T.as(v1), T.as(v2)), SAndSToint()));
    }
    shuffle(random) {
      if (random === void 0) random = null;
      this[_source$][$shuffle](random);
    }
    insert(index, element) {
      T._check(element);
      this[_source$][$insert](index, S.as(element));
    }
    insertAll(index, elements) {
      IterableOfT()._check(elements);
      this[_source$][$insertAll](index, CastIterableOfT$S().new(elements));
    }
    setAll(index, elements) {
      IterableOfT()._check(elements);
      this[_source$][$setAll](index, CastIterableOfT$S().new(elements));
    }
    remove(value) {
      return this[_source$][$remove](value);
    }
    removeAt(index) {
      return T.as(this[_source$][$removeAt](index));
    }
    removeLast() {
      return T.as(this[_source$][$removeLast]());
    }
    removeWhere(test) {
      this[_source$][$removeWhere](dart.fn(element => test(T.as(element)), STobool()));
    }
    retainWhere(test) {
      this[_source$][$retainWhere](dart.fn(element => test(T.as(element)), STobool()));
    }
    getRange(start, end) {
      return CastIterableOfS$T().new(this[_source$][$getRange](start, end));
    }
    setRange(start, end, iterable, skipCount) {
      IterableOfT()._check(iterable);
      if (skipCount === void 0) skipCount = 0;
      this[_source$][$setRange](start, end, CastIterableOfT$S().new(iterable), skipCount);
    }
    removeRange(start, end) {
      this[_source$][$removeRange](start, end);
    }
    fillRange(start, end, fillValue) {
      if (fillValue === void 0) fillValue = null;
      T._check(fillValue);
      this[_source$][$fillRange](start, end, S.as(fillValue));
    }
    replaceRange(start, end, replacement) {
      IterableOfT()._check(replacement);
      this[_source$][$replaceRange](start, end, CastIterableOfT$S().new(replacement));
    }
  }
  (_CastListBase.new = function() {
    _CastListBase.__proto__.new.call(this);
    ;
  }).prototype = _CastListBase.prototype;
  ;
  _CastListBase.prototype[_is__CastListBase_default] = true;
  ;
  dart.setSetterSignature(_CastListBase, () => ({
    __proto__: dart.getSetters(_CastListBase.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_CastListBase, "dart:_internal");
  dart.defineExtensionMethods(_CastListBase, [
    '_get',
    '_set',
    'add',
    'addAll',
    'sort',
    'shuffle',
    'insert',
    'insertAll',
    'setAll',
    'remove',
    'removeAt',
    'removeLast',
    'removeWhere',
    'retainWhere',
    'getRange',
    'setRange',
    'removeRange',
    'fillRange',
    'replaceRange'
  ]);
  dart.defineExtensionAccessors(_CastListBase, ['length']);
  return _CastListBase;
});
_internal._CastListBase = _internal._CastListBase$();
;
const _is_CastList_default = Symbol('_is_CastList_default');
const _source$1 = dart.privateName(_internal, "CastList._source");
_internal.CastList$ = dart.generic((S, T) => {
  class CastList extends _internal._CastListBase$(S, T) {
    get [_source$]() {
      return this[_source$1];
    }
    set [_source$](value) {
      super[_source$] = value;
    }
    cast(R) {
      return new (_internal.CastList$(S, R)).new(this[_source$]);
    }
  }
  (CastList.new = function(_source) {
    this[_source$1] = _source;
    CastList.__proto__.new.call(this);
    ;
  }).prototype = CastList.prototype;
  ;
  CastList.prototype[_is_CastList_default] = true;
  dart.setLibraryUri(CastList, "dart:_internal");
  ;
  dart.defineExtensionMethods(CastList, ['cast']);
  return CastList;
});
_internal.CastList = _internal.CastList$();
;
const _emptySet$ = dart.privateName(_internal, "_emptySet");
const _conditionalAdd = dart.privateName(_internal, "_conditionalAdd");
const _clone = dart.privateName(_internal, "_clone");
const _is_CastSet_default = Symbol('_is_CastSet_default');
const _source$2 = dart.privateName(_internal, "CastSet._source");
_internal.CastSet$ = dart.generic((S, T) => {
  let CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
  let STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
  let CastSetOfS$T = () => (CastSetOfS$T = dart.constFn(_internal.CastSet$(S, T)))();
  let IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
  let _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
  let SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
  class CastSet extends _internal._CastIterableBase$(S, T) {
    get [_source$]() {
      return this[_source$2];
    }
    set [_source$](value) {
      super[_source$] = value;
    }
    static _defaultEmptySet(R) {
      return new (collection._HashSet$(R)).new();
    }
    cast(R) {
      return new (_internal.CastSet$(S, R)).new(this[_source$], this[_emptySet$]);
    }
    add(value) {
      T._check(value);
      return this[_source$].add(S.as(value));
    }
    addAll(elements) {
      IterableOfT()._check(elements);
      this[_source$].addAll(CastIterableOfT$S().new(elements));
    }
    remove(object) {
      return this[_source$].remove(object);
    }
    removeAll(objects) {
      this[_source$].removeAll(objects);
    }
    retainAll(objects) {
      this[_source$].retainAll(objects);
    }
    removeWhere(test) {
      this[_source$].removeWhere(dart.fn(element => test(T.as(element)), STobool()));
    }
    retainWhere(test) {
      this[_source$].retainWhere(dart.fn(element => test(T.as(element)), STobool()));
    }
    containsAll(objects) {
      return this[_source$].containsAll(objects);
    }
    intersection(other) {
      if (this[_emptySet$] != null) return this[_conditionalAdd](other, true);
      return new (CastSetOfS$T()).new(this[_source$].intersection(other), null);
    }
    difference(other) {
      if (this[_emptySet$] != null) return this[_conditionalAdd](other, false);
      return new (CastSetOfS$T()).new(this[_source$].difference(other), null);
    }
    [_conditionalAdd](other, otherContains) {
      let result = this[_emptySet$] == null ? new (_HashSetOfT()).new() : this[_emptySet$](T);
      for (let element of this[_source$]) {
        let castElement = T.as(element);
        if (dart.equals(otherContains, other.contains(castElement))) result.add(castElement);
      }
      return result;
    }
    union(other) {
      let t27;
      SetOfT()._check(other);
      t27 = this[_clone]();
      t27.addAll(other);
      return t27;
    }
    clear() {
      this[_source$].clear();
    }
    [_clone]() {
      let result = this[_emptySet$] == null ? new (_HashSetOfT()).new() : this[_emptySet$](T);
      result.addAll(this);
      return result;
    }
    toSet() {
      return this[_clone]();
    }
    lookup(key) {
      return T.as(this[_source$].lookup(key));
    }
  }
  (CastSet.new = function(_source, _emptySet) {
    this[_source$2] = _source;
    this[_emptySet$] = _emptySet;
    CastSet.__proto__.new.call(this);
    ;
  }).prototype = CastSet.prototype;
  ;
  CastSet.prototype[_is_CastSet_default] = true;
  CastSet[dart.implements] = () => [core.Set$(T)];
  ;
  dart.setLibraryUri(CastSet, "dart:_internal");
  ;
  dart.defineExtensionMethods(CastSet, ['cast', 'toSet']);
  return CastSet;
});
_internal.CastSet = _internal.CastSet$();
;
let C21;
const _is_MapMixin_default = Symbol('_is_MapMixin_default');
collection.MapMixin$ = dart.generic((K, V) => {
  let MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  let KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
  let MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
  let KToMapEntryOfK$V = () => (KToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [K])))();
  let IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
  let JSArrayOfK = () => (JSArrayOfK = dart.constFn(_interceptors.JSArray$(K)))();
  let _MapBaseValueIterableOfK$V = () => (_MapBaseValueIterableOfK$V = dart.constFn(collection._MapBaseValueIterable$(K, V)))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  let VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  class MapMixin extends core.Object {
    cast(RK, RV) {
      return core.Map.castFrom(K, V, RK, RV, this);
    }
    forEach(action) {
      for (let key of this.keys) {
        action(key, this._get(key));
      }
    }
    addAll(other) {
      MapOfK$V()._check(other);
      for (let key of other[$keys]) {
        this._set(key, other[$_get](key));
      }
    }
    containsValue(value) {
      for (let key of this.keys) {
        if (dart.equals(this._get(key), value)) return true;
      }
      return false;
    }
    putIfAbsent(key, ifAbsent) {
      let t28, t27;
      K._check(key);
      VoidToV()._check(ifAbsent);
      if (dart.test(this.containsKey(key))) {
        return this._get(key);
      }
      t27 = key;
      t28 = ifAbsent();
      this._set(t27, t28);
      return t28;
    }
    update(key, update, opts) {
      let t28, t27, t28$, t27$;
      K._check(key);
      VToV()._check(update);
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToV()._check(ifAbsent);
      if (dart.test(this.containsKey(key))) {
        t27 = key;
        t28 = update(this._get(key));
        this._set(t27, t28);
        return t28;
      }
      if (ifAbsent != null) {
        t27$ = key;
        t28$ = ifAbsent();
        this._set(t27$, t28$);
        return t28$;
      }
      dart.throw(new core.ArgumentError.value(key, "key", "Key not in map."));
    }
    updateAll(update) {
      KAndVToV()._check(update);
      for (let key of this.keys) {
        this._set(key, update(key, this._get(key)));
      }
    }
    get entries() {
      return this.keys[$map](MapEntryOfK$V(), dart.fn(key => new (MapEntryOfK$V()).__(key, this._get(key)), KToMapEntryOfK$V()));
    }
    map(K2, V2, transform) {
      let result = new (_js_helper.LinkedMap$(K2, V2)).new();
      for (let key of this.keys) {
        let entry = transform(key, this._get(key));
        result[$_set](entry.key, entry.value);
      }
      return result;
    }
    addEntries(newEntries) {
      IterableOfMapEntryOfK$V()._check(newEntries);
      for (let entry of newEntries) {
        this._set(entry.key, entry.value);
      }
    }
    removeWhere(test) {
      let keysToRemove = JSArrayOfK().of([]);
      for (let key of this.keys) {
        if (dart.test(test(key, this._get(key)))) keysToRemove[$add](key);
      }
      for (let key of keysToRemove) {
        this.remove(key);
      }
    }
    containsKey(key) {
      return this.keys[$contains](key);
    }
    get length() {
      return this.keys[$length];
    }
    get isEmpty() {
      return this.keys[$isEmpty];
    }
    get isNotEmpty() {
      return this.keys[$isNotEmpty];
    }
    get values() {
      return new (_MapBaseValueIterableOfK$V()).new(this);
    }
    toString() {
      return collection.MapBase.mapToString(this);
    }
  }
  (MapMixin.new = function() {
    ;
  }).prototype = MapMixin.prototype;
  MapMixin.prototype[dart.isMap] = true;
  ;
  MapMixin.prototype[_is_MapMixin_default] = true;
  MapMixin[dart.implements] = () => [core.Map$(K, V)];
  ;
  dart.setGetterSignature(MapMixin, () => ({
    __proto__: dart.getGetters(MapMixin.__proto__),
    entries: core.Iterable$(core.MapEntry$(K, V)),
    [$entries]: core.Iterable$(core.MapEntry$(K, V)),
    length: core.int,
    [$length]: core.int,
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    values: core.Iterable$(V),
    [$values]: core.Iterable$(V)
  }));
  dart.setLibraryUri(MapMixin, "dart:collection");
  dart.defineExtensionMethods(MapMixin, [
    'cast',
    'forEach',
    'addAll',
    'containsValue',
    'putIfAbsent',
    'update',
    'updateAll',
    'map',
    'addEntries',
    'removeWhere',
    'containsKey',
    'toString'
  ]);
  dart.defineExtensionAccessors(MapMixin, [
    'entries',
    'length',
    'isEmpty',
    'isNotEmpty',
    'values'
  ]);
  return MapMixin;
});
collection.MapMixin = collection.MapMixin$();
;
const _is_MapBase_default = Symbol('_is_MapBase_default');
collection.MapBase$ = dart.generic((K, V) => {
  class MapBase extends collection.MapMixin$(K, V) {
    static mapToString(m) {
      if (dart.test(collection._isToStringVisiting(m))) {
        return "{...}";
      }
      let result = new core.StringBuffer.new();
      try {
        collection._toStringVisiting[$add](m);
        result.write("{");
        let first = true;
        m[$forEach](dart.fn((k, v) => {
          if (!first) {
            result.write(", ");
          }
          first = false;
          result.write(k);
          result.write(": ");
          result.write(v);
        }, dynamicAnddynamicToNull()));
        result.write("}");
      } finally {
        if (!core.identical(collection._toStringVisiting[$last], m)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/maps.dart", 46, 14, "identical(_toStringVisiting.last, m)");
        collection._toStringVisiting[$removeLast]();
      }
      return result.toString();
    }
    static _id(x) {
      return x;
    }
    static _fillMapWithMappedIterable(map, iterable, key, value) {
      key == null ? key = C21 || CT.C21 : null;
      value == null ? value = C21 || CT.C21 : null;
      for (let element of iterable) {
        map[$_set](key(element), value(element));
      }
    }
    static _fillMapWithIterables(map, keys, values) {
      let keyIterator = keys[$iterator];
      let valueIterator = values[$iterator];
      let hasNextKey = keyIterator.moveNext();
      let hasNextValue = valueIterator.moveNext();
      while (dart.test(hasNextKey) && dart.test(hasNextValue)) {
        map[$_set](keyIterator.current, valueIterator.current);
        hasNextKey = keyIterator.moveNext();
        hasNextValue = valueIterator.moveNext();
      }
      if (dart.test(hasNextKey) || dart.test(hasNextValue)) {
        dart.throw(new core.ArgumentError.new("Iterables do not have same length."));
      }
    }
  }
  (MapBase.new = function() {
    ;
  }).prototype = MapBase.prototype;
  ;
  MapBase.prototype[_is_MapBase_default] = true;
  dart.setLibraryUri(MapBase, "dart:collection");
  return MapBase;
});
collection.MapBase = collection.MapBase$();
;
const _is_CastMap_default = Symbol('_is_CastMap_default');
_internal.CastMap$ = dart.generic((SK, SV, K, V) => {
  let CastMapOfK$V$SK$SV = () => (CastMapOfK$V$SK$SV = dart.constFn(_internal.CastMap$(K, V, SK, SV)))();
  let SKAndSVToNull = () => (SKAndSVToNull = dart.constFn(dart.fnType(core.Null, [SK, SV])))();
  let CastIterableOfSK$K = () => (CastIterableOfSK$K = dart.constFn(_internal.CastIterable$(SK, K)))();
  let SKAndSVToSV = () => (SKAndSVToSV = dart.constFn(dart.fnType(SV, [SK, SV])))();
  let MapEntryOfSK$SV = () => (MapEntryOfSK$SV = dart.constFn(core.MapEntry$(SK, SV)))();
  let MapEntryOfSK$SVToMapEntryOfK$V = () => (MapEntryOfSK$SVToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [MapEntryOfSK$SV()])))();
  let SKAndSVTobool = () => (SKAndSVTobool = dart.constFn(dart.fnType(core.bool, [SK, SV])))();
  let VoidToSV = () => (VoidToSV = dart.constFn(dart.fnType(SV, [])))();
  let CastIterableOfSV$V = () => (CastIterableOfSV$V = dart.constFn(_internal.CastIterable$(SV, V)))();
  let SVToSV = () => (SVToSV = dart.constFn(dart.fnType(SV, [SV])))();
  let MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  let KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
  let MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
  let IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  let VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  class CastMap extends collection.MapBase$(K, V) {
    cast(RK, RV) {
      return new (_internal.CastMap$(SK, SV, RK, RV)).new(this[_source$]);
    }
    containsValue(value) {
      return this[_source$][$containsValue](value);
    }
    containsKey(key) {
      return this[_source$][$containsKey](key);
    }
    _get(key) {
      return V.as(this[_source$][$_get](key));
    }
    _set(key, value$) {
      let value = value$;
      K._check(key);
      V._check(value);
      this[_source$][$_set](SK.as(key), SV.as(value));
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K._check(key);
      VoidToV()._check(ifAbsent);
      return V.as(this[_source$][$putIfAbsent](SK.as(key), ifAbsent == null ? null : dart.fn(() => SV.as(ifAbsent()), VoidToSV())));
    }
    addAll(other) {
      MapOfK$V()._check(other);
      this[_source$][$addAll](new (CastMapOfK$V$SK$SV()).new(other));
    }
    remove(key) {
      return V.as(this[_source$][$remove](key));
    }
    clear() {
      this[_source$][$clear]();
    }
    forEach(f) {
      this[_source$][$forEach](dart.fn((key, value) => {
        f(K.as(key), V.as(value));
      }, SKAndSVToNull()));
    }
    get keys() {
      return CastIterableOfSK$K().new(this[_source$][$keys]);
    }
    get values() {
      return CastIterableOfSV$V().new(this[_source$][$values]);
    }
    get length() {
      return this[_source$][$length];
    }
    get isEmpty() {
      return this[_source$][$isEmpty];
    }
    get isNotEmpty() {
      return this[_source$][$isNotEmpty];
    }
    update(key, update, opts) {
      K._check(key);
      VToV()._check(update);
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToV()._check(ifAbsent);
      return V.as(this[_source$][$update](SK.as(key), dart.fn(value => SV.as(update(V.as(value))), SVToSV()), {ifAbsent: ifAbsent == null ? null : dart.fn(() => SV.as(ifAbsent()), VoidToSV())}));
    }
    updateAll(update) {
      KAndVToV()._check(update);
      this[_source$][$updateAll](dart.fn((key, value) => SV.as(update(K.as(key), V.as(value))), SKAndSVToSV()));
    }
    get entries() {
      return this[_source$][$entries][$map](MapEntryOfK$V(), dart.fn(e => new (MapEntryOfK$V()).__(K.as(e.key), V.as(e.value)), MapEntryOfSK$SVToMapEntryOfK$V()));
    }
    addEntries(entries) {
      IterableOfMapEntryOfK$V()._check(entries);
      for (let entry of entries) {
        this[_source$][$_set](SK.as(entry.key), SV.as(entry.value));
      }
    }
    removeWhere(test) {
      this[_source$][$removeWhere](dart.fn((key, value) => test(K.as(key), V.as(value)), SKAndSVTobool()));
    }
  }
  (CastMap.new = function(_source) {
    this[_source$] = _source;
    ;
  }).prototype = CastMap.prototype;
  ;
  CastMap.prototype[_is_CastMap_default] = true;
  ;
  dart.setGetterSignature(CastMap, () => ({
    __proto__: dart.getGetters(CastMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(CastMap, "dart:_internal");
  ;
  dart.defineExtensionMethods(CastMap, [
    'cast',
    'containsValue',
    'containsKey',
    '_get',
    '_set',
    'putIfAbsent',
    'addAll',
    'remove',
    'clear',
    'forEach',
    'update',
    'updateAll',
    'addEntries',
    'removeWhere'
  ]);
  dart.defineExtensionAccessors(CastMap, [
    'keys',
    'values',
    'length',
    'isEmpty',
    'isNotEmpty',
    'entries'
  ]);
  return CastMap;
});
_internal.CastMap = _internal.CastMap$();
;
const _is_CastQueue_default = Symbol('_is_CastQueue_default');
const _source$3 = dart.privateName(_internal, "CastQueue._source");
_internal.CastQueue$ = dart.generic((S, T) => {
  let CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
  let STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
  let IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
  class CastQueue extends _internal._CastIterableBase$(S, T) {
    get [_source$]() {
      return this[_source$3];
    }
    set [_source$](value) {
      super[_source$] = value;
    }
    cast(R) {
      return new (_internal.CastQueue$(S, R)).new(this[_source$]);
    }
    removeFirst() {
      return T.as(this[_source$].removeFirst());
    }
    removeLast() {
      return T.as(this[_source$].removeLast());
    }
    add(value) {
      T._check(value);
      this[_source$].add(S.as(value));
    }
    addFirst(value) {
      T._check(value);
      this[_source$].addFirst(S.as(value));
    }
    addLast(value) {
      T._check(value);
      this[_source$].addLast(S.as(value));
    }
    remove(other) {
      return this[_source$].remove(other);
    }
    addAll(elements) {
      IterableOfT()._check(elements);
      this[_source$].addAll(CastIterableOfT$S().new(elements));
    }
    removeWhere(test) {
      this[_source$].removeWhere(dart.fn(element => test(T.as(element)), STobool()));
    }
    retainWhere(test) {
      this[_source$].retainWhere(dart.fn(element => test(T.as(element)), STobool()));
    }
    clear() {
      this[_source$].clear();
    }
  }
  (CastQueue.new = function(_source) {
    this[_source$3] = _source;
    CastQueue.__proto__.new.call(this);
    ;
  }).prototype = CastQueue.prototype;
  ;
  CastQueue.prototype[_is_CastQueue_default] = true;
  CastQueue[dart.implements] = () => [collection.Queue$(T)];
  ;
  dart.setLibraryUri(CastQueue, "dart:_internal");
  ;
  dart.defineExtensionMethods(CastQueue, ['cast']);
  return CastQueue;
});
_internal.CastQueue = _internal.CastQueue$();
;
const _is_EfficientLengthIterable_default = Symbol('_is_EfficientLengthIterable_default');
_internal.EfficientLengthIterable$ = dart.generic(T => {
  class EfficientLengthIterable extends core.Iterable$(T) {}
  (EfficientLengthIterable.new = function() {
    EfficientLengthIterable.__proto__.new.call(this);
    ;
  }).prototype = EfficientLengthIterable.prototype;
  ;
  EfficientLengthIterable.prototype[_is_EfficientLengthIterable_default] = true;
  dart.setLibraryUri(EfficientLengthIterable, "dart:_internal");
  return EfficientLengthIterable;
});
_internal.EfficientLengthIterable = _internal.EfficientLengthIterable$();
;
const _is_ListIterable_default = Symbol('_is_ListIterable_default');
_internal.ListIterable$ = dart.generic(E => {
  let ListIteratorOfE = () => (ListIteratorOfE = dart.constFn(_internal.ListIterator$(E)))();
  let VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  let EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  let SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  let JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  class ListIterable extends _internal.EfficientLengthIterable$(E) {
    get iterator() {
      return new (ListIteratorOfE()).new(this);
    }
    forEach(action) {
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        action(this.elementAt(i));
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
    }
    get isEmpty() {
      return this.length === 0;
    }
    get first() {
      if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
      return this.elementAt(0);
    }
    get last() {
      if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
      return this.elementAt(dart.notNull(this.length) - 1);
    }
    get single() {
      if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
      if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
      return this.elementAt(0);
    }
    contains(element) {
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (dart.equals(this.elementAt(i), element)) return true;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return false;
    }
    every(test) {
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (!dart.test(test(this.elementAt(i)))) return false;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return true;
    }
    any(test) {
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (dart.test(test(this.elementAt(i)))) return true;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return false;
    }
    firstWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this.elementAt(i);
        if (dart.test(test(element))) return element;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let length = this.length;
      for (let i = dart.notNull(length) - 1; i >= 0; i = i - 1) {
        let element = this.elementAt(i);
        if (dart.test(test(element))) return element;
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let length = this.length;
      let match = null;
      let matchFound = false;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let element = this.elementAt(i);
        if (dart.test(test(element))) {
          if (matchFound) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          matchFound = true;
          match = element;
        }
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      if (matchFound) return match;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    join(separator) {
      if (separator === void 0) separator = "";
      let length = this.length;
      if (!separator[$isEmpty]) {
        if (length === 0) return "";
        let first = dart.str(this.elementAt(0));
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        let buffer = new core.StringBuffer.new(first);
        for (let i = 1; i < dart.notNull(length); i = i + 1) {
          buffer.write(separator);
          buffer.write(this.elementAt(i));
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return buffer.toString();
      } else {
        let buffer = new core.StringBuffer.new();
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          buffer.write(this.elementAt(i));
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return buffer.toString();
      }
    }
    where(test) {
      return super[$where](test);
    }
    map(T, f) {
      return new (_internal.MappedListIterable$(E, T)).new(this, f);
    }
    reduce(combine) {
      EAndEToE()._check(combine);
      let length = this.length;
      if (length === 0) dart.throw(_internal.IterableElementError.noElement());
      let value = this.elementAt(0);
      for (let i = 1; i < dart.notNull(length); i = i + 1) {
        value = combine(value, this.elementAt(i));
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return value;
    }
    fold(T, initialValue, combine) {
      let value = initialValue;
      let length = this.length;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        value = combine(value, this.elementAt(i));
        if (length != this.length) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      return value;
    }
    skip(count) {
      return new (SubListIterableOfE()).new(this, count, null);
    }
    skipWhile(test) {
      return super[$skipWhile](test);
    }
    take(count) {
      return new (SubListIterableOfE()).new(this, 0, count);
    }
    takeWhile(test) {
      return super[$takeWhile](test);
    }
    toList(opts) {
      let t27;
      let growable = opts && 'growable' in opts ? opts.growable : true;
      let result = null;
      if (dart.test(growable)) {
        result = (t27 = JSArrayOfE().of([]), t27[$length] = this.length, t27);
      } else {
        result = ListOfE().new(this.length);
      }
      for (let i = 0; i < dart.notNull(this.length); i = i + 1) {
        result[$_set](i, this.elementAt(i));
      }
      return result;
    }
    toSet() {
      let result = new (_HashSetOfE()).new();
      for (let i = 0; i < dart.notNull(this.length); i = i + 1) {
        result.add(this.elementAt(i));
      }
      return result;
    }
  }
  (ListIterable.new = function() {
    ListIterable.__proto__.new.call(this);
    ;
  }).prototype = ListIterable.prototype;
  ;
  ListIterable.prototype[_is_ListIterable_default] = true;
  dart.setGetterSignature(ListIterable, () => ({
    __proto__: dart.getGetters(ListIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(ListIterable, "dart:_internal");
  dart.defineExtensionMethods(ListIterable, [
    'forEach',
    'contains',
    'every',
    'any',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'join',
    'where',
    'map',
    'reduce',
    'fold',
    'skip',
    'skipWhile',
    'take',
    'takeWhile',
    'toList',
    'toSet'
  ]);
  dart.defineExtensionAccessors(ListIterable, [
    'iterator',
    'isEmpty',
    'first',
    'last',
    'single'
  ]);
  return ListIterable;
});
_internal.ListIterable = _internal.ListIterable$();
;
const _iterable$ = dart.privateName(_internal, "_iterable");
const _start$ = dart.privateName(_internal, "_start");
const _endOrLength$ = dart.privateName(_internal, "_endOrLength");
const _endIndex = dart.privateName(_internal, "_endIndex");
const _startIndex = dart.privateName(_internal, "_startIndex");
const _is_SubListIterable_default = Symbol('_is_SubListIterable_default');
_internal.SubListIterable$ = dart.generic(E => {
  let EmptyIterableOfE = () => (EmptyIterableOfE = dart.constFn(_internal.EmptyIterable$(E)))();
  let SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  let JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  class SubListIterable extends _internal.ListIterable$(E) {
    get [_endIndex]() {
      let length = this[_iterable$][$length];
      if (this[_endOrLength$] == null || dart.notNull(this[_endOrLength$]) > dart.notNull(length)) return length;
      return this[_endOrLength$];
    }
    get [_startIndex]() {
      let length = this[_iterable$][$length];
      if (dart.notNull(this[_start$]) > dart.notNull(length)) return length;
      return this[_start$];
    }
    get length() {
      let length = this[_iterable$][$length];
      if (dart.notNull(this[_start$]) >= dart.notNull(length)) return 0;
      if (this[_endOrLength$] == null || dart.notNull(this[_endOrLength$]) >= dart.notNull(length)) {
        return dart.notNull(length) - dart.notNull(this[_start$]);
      }
      return dart.notNull(this[_endOrLength$]) - dart.notNull(this[_start$]);
    }
    elementAt(index) {
      let realIndex = dart.notNull(this[_startIndex]) + dart.notNull(index);
      if (dart.notNull(index) < 0 || realIndex >= dart.notNull(this[_endIndex])) {
        dart.throw(new core.IndexError.new(index, this, "index"));
      }
      return this[_iterable$][$elementAt](realIndex);
    }
    skip(count) {
      core.RangeError.checkNotNegative(count, "count");
      let newStart = dart.notNull(this[_start$]) + dart.notNull(count);
      if (this[_endOrLength$] != null && newStart >= dart.notNull(this[_endOrLength$])) {
        return new (EmptyIterableOfE()).new();
      }
      return new (SubListIterableOfE()).new(this[_iterable$], newStart, this[_endOrLength$]);
    }
    take(count) {
      core.RangeError.checkNotNegative(count, "count");
      if (this[_endOrLength$] == null) {
        return new (SubListIterableOfE()).new(this[_iterable$], this[_start$], dart.notNull(this[_start$]) + dart.notNull(count));
      } else {
        let newEnd = dart.notNull(this[_start$]) + dart.notNull(count);
        if (dart.notNull(this[_endOrLength$]) < newEnd) return this;
        return new (SubListIterableOfE()).new(this[_iterable$], this[_start$], newEnd);
      }
    }
    toList(opts) {
      let t27;
      let growable = opts && 'growable' in opts ? opts.growable : true;
      let start = this[_start$];
      let end = this[_iterable$][$length];
      if (this[_endOrLength$] != null && dart.notNull(this[_endOrLength$]) < dart.notNull(end)) end = this[_endOrLength$];
      let length = dart.notNull(end) - dart.notNull(start);
      if (length < 0) length = 0;
      let result = dart.test(growable) ? (t27 = JSArrayOfE().of([]), t27[$length] = length, t27) : ListOfE().new(length);
      for (let i = 0; i < length; i = i + 1) {
        result[$_set](i, this[_iterable$][$elementAt](dart.notNull(start) + i));
        if (dart.notNull(this[_iterable$][$length]) < dart.notNull(end)) dart.throw(new core.ConcurrentModificationError.new(this));
      }
      return result;
    }
  }
  (SubListIterable.new = function(_iterable, _start, _endOrLength) {
    this[_iterable$] = _iterable;
    this[_start$] = _start;
    this[_endOrLength$] = _endOrLength;
    SubListIterable.__proto__.new.call(this);
    core.RangeError.checkNotNegative(this[_start$], "start");
    if (this[_endOrLength$] != null) {
      core.RangeError.checkNotNegative(this[_endOrLength$], "end");
      if (dart.notNull(this[_start$]) > dart.notNull(this[_endOrLength$])) {
        dart.throw(new core.RangeError.range(this[_start$], 0, this[_endOrLength$], "start"));
      }
    }
  }).prototype = SubListIterable.prototype;
  ;
  SubListIterable.prototype[_is_SubListIterable_default] = true;
  dart.setGetterSignature(SubListIterable, () => ({
    __proto__: dart.getGetters(SubListIterable.__proto__),
    [_endIndex]: core.int,
    [_startIndex]: core.int
  }));
  dart.setLibraryUri(SubListIterable, "dart:_internal");
  ;
  dart.defineExtensionMethods(SubListIterable, ['elementAt', 'skip', 'take', 'toList']);
  dart.defineExtensionAccessors(SubListIterable, ['length']);
  return SubListIterable;
});
_internal.SubListIterable = _internal.SubListIterable$();
;
const _current$ = dart.privateName(_internal, "_current");
const _length$ = dart.privateName(_internal, "_length");
const _index$ = dart.privateName(_internal, "_index");
const _is_ListIterator_default = Symbol('_is_ListIterator_default');
_internal.ListIterator$ = dart.generic(E => {
  class ListIterator extends core.Object {
    get current() {
      return this[_current$];
    }
    moveNext() {
      let length = this[_iterable$][$length];
      if (this[_length$] != length) {
        dart.throw(new core.ConcurrentModificationError.new(this[_iterable$]));
      }
      if (dart.notNull(this[_index$]) >= dart.notNull(length)) {
        this[_current$] = null;
        return false;
      }
      this[_current$] = this[_iterable$][$elementAt](this[_index$]);
      this[_index$] = dart.notNull(this[_index$]) + 1;
      return true;
    }
  }
  (ListIterator.new = function(iterable) {
    this[_current$] = null;
    this[_iterable$] = iterable;
    this[_length$] = iterable[$length];
    this[_index$] = 0;
    ;
  }).prototype = ListIterator.prototype;
  ;
  ListIterator.prototype[_is_ListIterator_default] = true;
  ListIterator[dart.implements] = () => [core.Iterator$(E)];
  ;
  dart.setGetterSignature(ListIterator, () => ({
    __proto__: dart.getGetters(ListIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(ListIterator, "dart:_internal");
  ;
  return ListIterator;
});
_internal.ListIterator = _internal.ListIterator$();
;
const _f$ = dart.privateName(_internal, "_f");
const _is_MappedIterable_default = Symbol('_is_MappedIterable_default');
_internal.MappedIterable$ = dart.generic((S, T) => {
  let MappedIteratorOfS$T = () => (MappedIteratorOfS$T = dart.constFn(_internal.MappedIterator$(S, T)))();
  class MappedIterable extends core.Iterable$(T) {
    static new(iterable, $function) {
      if (_internal.EfficientLengthIterable.is(iterable)) {
        return new (_internal.EfficientLengthMappedIterable$(S, T)).new(iterable, $function);
      }
      return new (_internal.MappedIterable$(S, T)).__(iterable, $function);
    }
    get iterator() {
      return new (MappedIteratorOfS$T()).new(this[_iterable$][$iterator], this[_f$]);
    }
    get length() {
      return this[_iterable$][$length];
    }
    get isEmpty() {
      return this[_iterable$][$isEmpty];
    }
    get first() {
      return this[_f$](this[_iterable$][$first]);
    }
    get last() {
      return this[_f$](this[_iterable$][$last]);
    }
    get single() {
      return this[_f$](this[_iterable$][$single]);
    }
    elementAt(index) {
      return this[_f$](this[_iterable$][$elementAt](index));
    }
  }
  (MappedIterable.__ = function(_iterable, _f) {
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    MappedIterable.__proto__.new.call(this);
    ;
  }).prototype = MappedIterable.prototype;
  ;
  MappedIterable.prototype[_is_MappedIterable_default] = true;
  dart.setGetterSignature(MappedIterable, () => ({
    __proto__: dart.getGetters(MappedIterable.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(MappedIterable, "dart:_internal");
  ;
  dart.defineExtensionMethods(MappedIterable, ['elementAt']);
  dart.defineExtensionAccessors(MappedIterable, [
    'iterator',
    'length',
    'isEmpty',
    'first',
    'last',
    'single'
  ]);
  return MappedIterable;
});
_internal.MappedIterable = _internal.MappedIterable$();
;
const _is_EfficientLengthMappedIterable_default = Symbol('_is_EfficientLengthMappedIterable_default');
_internal.EfficientLengthMappedIterable$ = dart.generic((S, T) => {
  class EfficientLengthMappedIterable extends _internal.MappedIterable$(S, T) {}
  (EfficientLengthMappedIterable.new = function(iterable, $function) {
    EfficientLengthMappedIterable.__proto__.__.call(this, iterable, $function);
    ;
  }).prototype = EfficientLengthMappedIterable.prototype;
  ;
  EfficientLengthMappedIterable.prototype[_is_EfficientLengthMappedIterable_default] = true;
  EfficientLengthMappedIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(T)];
  dart.setLibraryUri(EfficientLengthMappedIterable, "dart:_internal");
  return EfficientLengthMappedIterable;
});
_internal.EfficientLengthMappedIterable = _internal.EfficientLengthMappedIterable$();
;
const _iterator$ = dart.privateName(_internal, "_iterator");
const _is_Iterator_default = Symbol('_is_Iterator_default');
core.Iterator$ = dart.generic(E => {
  class Iterator extends core.Object {}
  (Iterator.new = function() {
    ;
  }).prototype = Iterator.prototype;
  ;
  Iterator.prototype[_is_Iterator_default] = true;
  dart.setLibraryUri(Iterator, "dart:core");
  return Iterator;
});
core.Iterator = core.Iterator$();
;
const _is_MappedIterator_default = Symbol('_is_MappedIterator_default');
_internal.MappedIterator$ = dart.generic((S, T) => {
  class MappedIterator extends core.Iterator$(T) {
    moveNext() {
      if (dart.test(this[_iterator$].moveNext())) {
        this[_current$] = this[_f$](this[_iterator$].current);
        return true;
      }
      this[_current$] = null;
      return false;
    }
    get current() {
      return this[_current$];
    }
  }
  (MappedIterator.new = function(_iterator, _f) {
    this[_current$] = null;
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = MappedIterator.prototype;
  ;
  MappedIterator.prototype[_is_MappedIterator_default] = true;
  ;
  dart.setGetterSignature(MappedIterator, () => ({
    __proto__: dart.getGetters(MappedIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(MappedIterator, "dart:_internal");
  ;
  return MappedIterator;
});
_internal.MappedIterator = _internal.MappedIterator$();
;
const _is_MappedListIterable_default = Symbol('_is_MappedListIterable_default');
_internal.MappedListIterable$ = dart.generic((S, T) => {
  class MappedListIterable extends _internal.ListIterable$(T) {
    get length() {
      return this[_source$][$length];
    }
    elementAt(index) {
      return this[_f$](this[_source$][$elementAt](index));
    }
  }
  (MappedListIterable.new = function(_source, _f) {
    this[_source$] = _source;
    this[_f$] = _f;
    MappedListIterable.__proto__.new.call(this);
    ;
  }).prototype = MappedListIterable.prototype;
  ;
  MappedListIterable.prototype[_is_MappedListIterable_default] = true;
  dart.setLibraryUri(MappedListIterable, "dart:_internal");
  ;
  dart.defineExtensionMethods(MappedListIterable, ['elementAt']);
  dart.defineExtensionAccessors(MappedListIterable, ['length']);
  return MappedListIterable;
});
_internal.MappedListIterable = _internal.MappedListIterable$();
;
const _is_WhereIterable_default = Symbol('_is_WhereIterable_default');
_internal.WhereIterable$ = dart.generic(E => {
  let WhereIteratorOfE = () => (WhereIteratorOfE = dart.constFn(_internal.WhereIterator$(E)))();
  class WhereIterable extends core.Iterable$(E) {
    get iterator() {
      return new (WhereIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
    }
    map(T, f) {
      return new (_internal.MappedIterable$(E, T)).__(this, f);
    }
  }
  (WhereIterable.new = function(_iterable, _f) {
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    WhereIterable.__proto__.new.call(this);
    ;
  }).prototype = WhereIterable.prototype;
  ;
  WhereIterable.prototype[_is_WhereIterable_default] = true;
  dart.setGetterSignature(WhereIterable, () => ({
    __proto__: dart.getGetters(WhereIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(WhereIterable, "dart:_internal");
  ;
  dart.defineExtensionMethods(WhereIterable, ['map']);
  dart.defineExtensionAccessors(WhereIterable, ['iterator']);
  return WhereIterable;
});
_internal.WhereIterable = _internal.WhereIterable$();
;
const _is_WhereIterator_default = Symbol('_is_WhereIterator_default');
_internal.WhereIterator$ = dart.generic(E => {
  class WhereIterator extends core.Iterator$(E) {
    moveNext() {
      while (dart.test(this[_iterator$].moveNext())) {
        if (dart.test(this[_f$](this[_iterator$].current))) {
          return true;
        }
      }
      return false;
    }
    get current() {
      return this[_iterator$].current;
    }
  }
  (WhereIterator.new = function(_iterator, _f) {
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = WhereIterator.prototype;
  ;
  WhereIterator.prototype[_is_WhereIterator_default] = true;
  ;
  dart.setGetterSignature(WhereIterator, () => ({
    __proto__: dart.getGetters(WhereIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(WhereIterator, "dart:_internal");
  ;
  return WhereIterator;
});
_internal.WhereIterator = _internal.WhereIterator$();
;
const _is_ExpandIterable_default = Symbol('_is_ExpandIterable_default');
_internal.ExpandIterable$ = dart.generic((S, T) => {
  let ExpandIteratorOfS$T = () => (ExpandIteratorOfS$T = dart.constFn(_internal.ExpandIterator$(S, T)))();
  class ExpandIterable extends core.Iterable$(T) {
    get iterator() {
      return new (ExpandIteratorOfS$T()).new(this[_iterable$][$iterator], this[_f$]);
    }
  }
  (ExpandIterable.new = function(_iterable, _f) {
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    ExpandIterable.__proto__.new.call(this);
    ;
  }).prototype = ExpandIterable.prototype;
  ;
  ExpandIterable.prototype[_is_ExpandIterable_default] = true;
  dart.setGetterSignature(ExpandIterable, () => ({
    __proto__: dart.getGetters(ExpandIterable.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(ExpandIterable, "dart:_internal");
  ;
  dart.defineExtensionAccessors(ExpandIterable, ['iterator']);
  return ExpandIterable;
});
_internal.ExpandIterable = _internal.ExpandIterable$();
;
const _currentExpansion = dart.privateName(_internal, "_currentExpansion");
let C22;
const _is_ExpandIterator_default = Symbol('_is_ExpandIterator_default');
_internal.ExpandIterator$ = dart.generic((S, T) => {
  class ExpandIterator extends core.Object {
    get current() {
      return this[_current$];
    }
    moveNext() {
      if (this[_currentExpansion] == null) return false;
      while (!dart.test(this[_currentExpansion].moveNext())) {
        this[_current$] = null;
        if (dart.test(this[_iterator$].moveNext())) {
          this[_currentExpansion] = null;
          this[_currentExpansion] = this[_f$](this[_iterator$].current)[$iterator];
        } else {
          return false;
        }
      }
      this[_current$] = this[_currentExpansion].current;
      return true;
    }
  }
  (ExpandIterator.new = function(_iterator, _f) {
    this[_currentExpansion] = C22 || CT.C22;
    this[_current$] = null;
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = ExpandIterator.prototype;
  ;
  ExpandIterator.prototype[_is_ExpandIterator_default] = true;
  ExpandIterator[dart.implements] = () => [core.Iterator$(T)];
  ;
  dart.setGetterSignature(ExpandIterator, () => ({
    __proto__: dart.getGetters(ExpandIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(ExpandIterator, "dart:_internal");
  ;
  return ExpandIterator;
});
_internal.ExpandIterator = _internal.ExpandIterator$();
;
const _takeCount$ = dart.privateName(_internal, "_takeCount");
const _is_TakeIterable_default = Symbol('_is_TakeIterable_default');
_internal.TakeIterable$ = dart.generic(E => {
  let TakeIteratorOfE = () => (TakeIteratorOfE = dart.constFn(_internal.TakeIterator$(E)))();
  class TakeIterable extends core.Iterable$(E) {
    static new(iterable, takeCount) {
      core.ArgumentError.checkNotNull(takeCount, "takeCount");
      core.RangeError.checkNotNegative(takeCount, "takeCount");
      if (_internal.EfficientLengthIterable.is(iterable)) {
        return new (_internal.EfficientLengthTakeIterable$(E)).new(iterable, takeCount);
      }
      return new (_internal.TakeIterable$(E)).__(iterable, takeCount);
    }
    get iterator() {
      return new (TakeIteratorOfE()).new(this[_iterable$][$iterator], this[_takeCount$]);
    }
  }
  (TakeIterable.__ = function(_iterable, _takeCount) {
    this[_iterable$] = _iterable;
    this[_takeCount$] = _takeCount;
    TakeIterable.__proto__.new.call(this);
    ;
  }).prototype = TakeIterable.prototype;
  ;
  TakeIterable.prototype[_is_TakeIterable_default] = true;
  dart.setGetterSignature(TakeIterable, () => ({
    __proto__: dart.getGetters(TakeIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(TakeIterable, "dart:_internal");
  ;
  dart.defineExtensionAccessors(TakeIterable, ['iterator']);
  return TakeIterable;
});
_internal.TakeIterable = _internal.TakeIterable$();
;
const _is_EfficientLengthTakeIterable_default = Symbol('_is_EfficientLengthTakeIterable_default');
_internal.EfficientLengthTakeIterable$ = dart.generic(E => {
  class EfficientLengthTakeIterable extends _internal.TakeIterable$(E) {
    get length() {
      let iterableLength = this[_iterable$][$length];
      if (dart.notNull(iterableLength) > dart.notNull(this[_takeCount$])) return this[_takeCount$];
      return iterableLength;
    }
  }
  (EfficientLengthTakeIterable.new = function(iterable, takeCount) {
    EfficientLengthTakeIterable.__proto__.__.call(this, iterable, takeCount);
    ;
  }).prototype = EfficientLengthTakeIterable.prototype;
  ;
  EfficientLengthTakeIterable.prototype[_is_EfficientLengthTakeIterable_default] = true;
  EfficientLengthTakeIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(EfficientLengthTakeIterable, "dart:_internal");
  dart.defineExtensionAccessors(EfficientLengthTakeIterable, ['length']);
  return EfficientLengthTakeIterable;
});
_internal.EfficientLengthTakeIterable = _internal.EfficientLengthTakeIterable$();
;
const _remaining$ = dart.privateName(_internal, "_remaining");
const _is_TakeIterator_default = Symbol('_is_TakeIterator_default');
_internal.TakeIterator$ = dart.generic(E => {
  class TakeIterator extends core.Iterator$(E) {
    moveNext() {
      this[_remaining$] = dart.notNull(this[_remaining$]) - 1;
      if (dart.notNull(this[_remaining$]) >= 0) {
        return this[_iterator$].moveNext();
      }
      this[_remaining$] = -1;
      return false;
    }
    get current() {
      if (dart.notNull(this[_remaining$]) < 0) return null;
      return this[_iterator$].current;
    }
  }
  (TakeIterator.new = function(_iterator, _remaining) {
    this[_iterator$] = _iterator;
    this[_remaining$] = _remaining;
    if (!(dart.notNull(this[_remaining$]) >= 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/iterable.dart", 531, 12, "_remaining >= 0");
  }).prototype = TakeIterator.prototype;
  ;
  TakeIterator.prototype[_is_TakeIterator_default] = true;
  ;
  dart.setGetterSignature(TakeIterator, () => ({
    __proto__: dart.getGetters(TakeIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(TakeIterator, "dart:_internal");
  ;
  return TakeIterator;
});
_internal.TakeIterator = _internal.TakeIterator$();
;
const _is_TakeWhileIterable_default = Symbol('_is_TakeWhileIterable_default');
_internal.TakeWhileIterable$ = dart.generic(E => {
  let TakeWhileIteratorOfE = () => (TakeWhileIteratorOfE = dart.constFn(_internal.TakeWhileIterator$(E)))();
  class TakeWhileIterable extends core.Iterable$(E) {
    get iterator() {
      return new (TakeWhileIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
    }
  }
  (TakeWhileIterable.new = function(_iterable, _f) {
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    TakeWhileIterable.__proto__.new.call(this);
    ;
  }).prototype = TakeWhileIterable.prototype;
  ;
  TakeWhileIterable.prototype[_is_TakeWhileIterable_default] = true;
  dart.setGetterSignature(TakeWhileIterable, () => ({
    __proto__: dart.getGetters(TakeWhileIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(TakeWhileIterable, "dart:_internal");
  ;
  dart.defineExtensionAccessors(TakeWhileIterable, ['iterator']);
  return TakeWhileIterable;
});
_internal.TakeWhileIterable = _internal.TakeWhileIterable$();
;
const _isFinished = dart.privateName(_internal, "_isFinished");
const _is_TakeWhileIterator_default = Symbol('_is_TakeWhileIterator_default');
_internal.TakeWhileIterator$ = dart.generic(E => {
  class TakeWhileIterator extends core.Iterator$(E) {
    moveNext() {
      if (dart.test(this[_isFinished])) return false;
      if (!dart.test(this[_iterator$].moveNext()) || !dart.test(this[_f$](this[_iterator$].current))) {
        this[_isFinished] = true;
        return false;
      }
      return true;
    }
    get current() {
      if (dart.test(this[_isFinished])) return null;
      return this[_iterator$].current;
    }
  }
  (TakeWhileIterator.new = function(_iterator, _f) {
    this[_isFinished] = false;
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = TakeWhileIterator.prototype;
  ;
  TakeWhileIterator.prototype[_is_TakeWhileIterator_default] = true;
  ;
  dart.setGetterSignature(TakeWhileIterator, () => ({
    __proto__: dart.getGetters(TakeWhileIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(TakeWhileIterator, "dart:_internal");
  ;
  return TakeWhileIterator;
});
_internal.TakeWhileIterator = _internal.TakeWhileIterator$();
;
const _skipCount$ = dart.privateName(_internal, "_skipCount");
const _is_SkipIterable_default = Symbol('_is_SkipIterable_default');
_internal.SkipIterable$ = dart.generic(E => {
  let SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  let SkipIteratorOfE = () => (SkipIteratorOfE = dart.constFn(_internal.SkipIterator$(E)))();
  class SkipIterable extends core.Iterable$(E) {
    static new(iterable, count) {
      if (_internal.EfficientLengthIterable.is(iterable)) {
        return _internal.EfficientLengthSkipIterable$(E).new(iterable, count);
      }
      return new (_internal.SkipIterable$(E)).__(iterable, _internal._checkCount(count));
    }
    skip(count) {
      return new (SkipIterableOfE()).__(this[_iterable$], dart.notNull(this[_skipCount$]) + dart.notNull(_internal._checkCount(count)));
    }
    get iterator() {
      return new (SkipIteratorOfE()).new(this[_iterable$][$iterator], this[_skipCount$]);
    }
  }
  (SkipIterable.__ = function(_iterable, _skipCount) {
    this[_iterable$] = _iterable;
    this[_skipCount$] = _skipCount;
    SkipIterable.__proto__.new.call(this);
    ;
  }).prototype = SkipIterable.prototype;
  ;
  SkipIterable.prototype[_is_SkipIterable_default] = true;
  dart.setGetterSignature(SkipIterable, () => ({
    __proto__: dart.getGetters(SkipIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(SkipIterable, "dart:_internal");
  ;
  dart.defineExtensionMethods(SkipIterable, ['skip']);
  dart.defineExtensionAccessors(SkipIterable, ['iterator']);
  return SkipIterable;
});
_internal.SkipIterable = _internal.SkipIterable$();
;
const _is_EfficientLengthSkipIterable_default = Symbol('_is_EfficientLengthSkipIterable_default');
_internal.EfficientLengthSkipIterable$ = dart.generic(E => {
  let EfficientLengthSkipIterableOfE = () => (EfficientLengthSkipIterableOfE = dart.constFn(_internal.EfficientLengthSkipIterable$(E)))();
  class EfficientLengthSkipIterable extends _internal.SkipIterable$(E) {
    static new(iterable, count) {
      return new (_internal.EfficientLengthSkipIterable$(E)).__(iterable, _internal._checkCount(count));
    }
    get length() {
      let length = dart.notNull(this[_iterable$][$length]) - dart.notNull(this[_skipCount$]);
      if (length >= 0) return length;
      return 0;
    }
    skip(count) {
      return new (EfficientLengthSkipIterableOfE()).__(this[_iterable$], dart.notNull(this[_skipCount$]) + dart.notNull(_internal._checkCount(count)));
    }
  }
  (EfficientLengthSkipIterable.__ = function(iterable, count) {
    EfficientLengthSkipIterable.__proto__.__.call(this, iterable, count);
    ;
  }).prototype = EfficientLengthSkipIterable.prototype;
  ;
  EfficientLengthSkipIterable.prototype[_is_EfficientLengthSkipIterable_default] = true;
  EfficientLengthSkipIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(EfficientLengthSkipIterable, "dart:_internal");
  dart.defineExtensionMethods(EfficientLengthSkipIterable, ['skip']);
  dart.defineExtensionAccessors(EfficientLengthSkipIterable, ['length']);
  return EfficientLengthSkipIterable;
});
_internal.EfficientLengthSkipIterable = _internal.EfficientLengthSkipIterable$();
;
const _is_SkipIterator_default = Symbol('_is_SkipIterator_default');
_internal.SkipIterator$ = dart.generic(E => {
  class SkipIterator extends core.Iterator$(E) {
    moveNext() {
      for (let i = 0; i < dart.notNull(this[_skipCount$]); i = i + 1)
        this[_iterator$].moveNext();
      this[_skipCount$] = 0;
      return this[_iterator$].moveNext();
    }
    get current() {
      return this[_iterator$].current;
    }
  }
  (SkipIterator.new = function(_iterator, _skipCount) {
    this[_iterator$] = _iterator;
    this[_skipCount$] = _skipCount;
    if (!(dart.notNull(this[_skipCount$]) >= 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/iterable.dart", 636, 12, "_skipCount >= 0");
  }).prototype = SkipIterator.prototype;
  ;
  SkipIterator.prototype[_is_SkipIterator_default] = true;
  ;
  dart.setGetterSignature(SkipIterator, () => ({
    __proto__: dart.getGetters(SkipIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(SkipIterator, "dart:_internal");
  ;
  return SkipIterator;
});
_internal.SkipIterator = _internal.SkipIterator$();
;
const _is_SkipWhileIterable_default = Symbol('_is_SkipWhileIterable_default');
_internal.SkipWhileIterable$ = dart.generic(E => {
  let SkipWhileIteratorOfE = () => (SkipWhileIteratorOfE = dart.constFn(_internal.SkipWhileIterator$(E)))();
  class SkipWhileIterable extends core.Iterable$(E) {
    get iterator() {
      return new (SkipWhileIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
    }
  }
  (SkipWhileIterable.new = function(_iterable, _f) {
    this[_iterable$] = _iterable;
    this[_f$] = _f;
    SkipWhileIterable.__proto__.new.call(this);
    ;
  }).prototype = SkipWhileIterable.prototype;
  ;
  SkipWhileIterable.prototype[_is_SkipWhileIterable_default] = true;
  dart.setGetterSignature(SkipWhileIterable, () => ({
    __proto__: dart.getGetters(SkipWhileIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(SkipWhileIterable, "dart:_internal");
  ;
  dart.defineExtensionAccessors(SkipWhileIterable, ['iterator']);
  return SkipWhileIterable;
});
_internal.SkipWhileIterable = _internal.SkipWhileIterable$();
;
const _hasSkipped = dart.privateName(_internal, "_hasSkipped");
const _is_SkipWhileIterator_default = Symbol('_is_SkipWhileIterator_default');
_internal.SkipWhileIterator$ = dart.generic(E => {
  class SkipWhileIterator extends core.Iterator$(E) {
    moveNext() {
      if (!dart.test(this[_hasSkipped])) {
        this[_hasSkipped] = true;
        while (dart.test(this[_iterator$].moveNext())) {
          if (!dart.test(this[_f$](this[_iterator$].current))) return true;
        }
      }
      return this[_iterator$].moveNext();
    }
    get current() {
      return this[_iterator$].current;
    }
  }
  (SkipWhileIterator.new = function(_iterator, _f) {
    this[_hasSkipped] = false;
    this[_iterator$] = _iterator;
    this[_f$] = _f;
    ;
  }).prototype = SkipWhileIterator.prototype;
  ;
  SkipWhileIterator.prototype[_is_SkipWhileIterator_default] = true;
  ;
  dart.setGetterSignature(SkipWhileIterator, () => ({
    __proto__: dart.getGetters(SkipWhileIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(SkipWhileIterator, "dart:_internal");
  ;
  return SkipWhileIterator;
});
_internal.SkipWhileIterator = _internal.SkipWhileIterator$();
;
const _is_EmptyIterable_default = Symbol('_is_EmptyIterable_default');
_internal.EmptyIterable$ = dart.generic(E => {
  let VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  let EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  let JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  class EmptyIterable extends _internal.EfficientLengthIterable$(E) {
    get iterator() {
      return C22 || CT.C22;
    }
    forEach(action) {
    }
    get isEmpty() {
      return true;
    }
    get length() {
      return 0;
    }
    get first() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    get last() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    get single() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      dart.throw(new core.RangeError.range(index, 0, 0, "index"));
    }
    contains(element) {
      return false;
    }
    every(test) {
      return true;
    }
    any(test) {
      return false;
    }
    firstWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    join(separator) {
      if (separator === void 0) separator = "";
      return "";
    }
    where(test) {
      return this;
    }
    map(T, f) {
      return new (_internal.EmptyIterable$(T)).new();
    }
    reduce(combine) {
      EAndEToE()._check(combine);
      dart.throw(_internal.IterableElementError.noElement());
    }
    fold(T, initialValue, combine) {
      return initialValue;
    }
    skip(count) {
      core.RangeError.checkNotNegative(count, "count");
      return this;
    }
    skipWhile(test) {
      return this;
    }
    take(count) {
      core.RangeError.checkNotNegative(count, "count");
      return this;
    }
    takeWhile(test) {
      return this;
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      return dart.test(growable) ? JSArrayOfE().of([]) : ListOfE().new(0);
    }
    toSet() {
      return new (_HashSetOfE()).new();
    }
  }
  (EmptyIterable.new = function() {
    EmptyIterable.__proto__.new.call(this);
    ;
  }).prototype = EmptyIterable.prototype;
  ;
  EmptyIterable.prototype[_is_EmptyIterable_default] = true;
  dart.setGetterSignature(EmptyIterable, () => ({
    __proto__: dart.getGetters(EmptyIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(EmptyIterable, "dart:_internal");
  dart.defineExtensionMethods(EmptyIterable, [
    'forEach',
    'elementAt',
    'contains',
    'every',
    'any',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'join',
    'where',
    'map',
    'reduce',
    'fold',
    'skip',
    'skipWhile',
    'take',
    'takeWhile',
    'toList',
    'toSet'
  ]);
  dart.defineExtensionAccessors(EmptyIterable, [
    'iterator',
    'isEmpty',
    'length',
    'first',
    'last',
    'single'
  ]);
  return EmptyIterable;
});
_internal.EmptyIterable = _internal.EmptyIterable$();
;
const _is_EmptyIterator_default = Symbol('_is_EmptyIterator_default');
_internal.EmptyIterator$ = dart.generic(E => {
  class EmptyIterator extends core.Object {
    moveNext() {
      return false;
    }
    get current() {
      return null;
    }
  }
  (EmptyIterator.new = function() {
    ;
  }).prototype = EmptyIterator.prototype;
  ;
  EmptyIterator.prototype[_is_EmptyIterator_default] = true;
  EmptyIterator[dart.implements] = () => [core.Iterator$(E)];
  ;
  dart.setGetterSignature(EmptyIterator, () => ({
    __proto__: dart.getGetters(EmptyIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(EmptyIterator, "dart:_internal");
  return EmptyIterator;
});
_internal.EmptyIterator = _internal.EmptyIterator$();
;
const _first$ = dart.privateName(_internal, "_first");
const _second$ = dart.privateName(_internal, "_second");
const _is_FollowedByIterable_default = Symbol('_is_FollowedByIterable_default');
_internal.FollowedByIterable$ = dart.generic(E => {
  let FollowedByIteratorOfE = () => (FollowedByIteratorOfE = dart.constFn(_internal.FollowedByIterator$(E)))();
  class FollowedByIterable extends core.Iterable$(E) {
    static firstEfficient(first, second) {
      if (_internal.EfficientLengthIterable$(E).is(second)) {
        return new (_internal.EfficientLengthFollowedByIterable$(E)).new(first, second);
      }
      return new (_internal.FollowedByIterable$(E)).new(first, second);
    }
    get iterator() {
      return new (FollowedByIteratorOfE()).new(this[_first$], this[_second$]);
    }
    get length() {
      return dart.notNull(this[_first$][$length]) + dart.notNull(this[_second$][$length]);
    }
    get isEmpty() {
      return dart.test(this[_first$][$isEmpty]) && dart.test(this[_second$][$isEmpty]);
    }
    get isNotEmpty() {
      return dart.test(this[_first$][$isNotEmpty]) || dart.test(this[_second$][$isNotEmpty]);
    }
    contains(value) {
      return dart.test(this[_first$][$contains](value)) || dart.test(this[_second$][$contains](value));
    }
    get first() {
      let iterator = this[_first$][$iterator];
      if (dart.test(iterator.moveNext())) return iterator.current;
      return this[_second$][$first];
    }
    get last() {
      let iterator = this[_second$][$iterator];
      if (dart.test(iterator.moveNext())) {
        let last = iterator.current;
        while (dart.test(iterator.moveNext()))
          last = iterator.current;
        return last;
      }
      return this[_first$][$last];
    }
  }
  (FollowedByIterable.new = function(_first, _second) {
    this[_first$] = _first;
    this[_second$] = _second;
    FollowedByIterable.__proto__.new.call(this);
    ;
  }).prototype = FollowedByIterable.prototype;
  ;
  FollowedByIterable.prototype[_is_FollowedByIterable_default] = true;
  dart.setGetterSignature(FollowedByIterable, () => ({
    __proto__: dart.getGetters(FollowedByIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(FollowedByIterable, "dart:_internal");
  ;
  dart.defineExtensionMethods(FollowedByIterable, ['contains']);
  dart.defineExtensionAccessors(FollowedByIterable, [
    'iterator',
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last'
  ]);
  return FollowedByIterable;
});
_internal.FollowedByIterable = _internal.FollowedByIterable$();
;
const _is_EfficientLengthFollowedByIterable_default = Symbol('_is_EfficientLengthFollowedByIterable_default');
_internal.EfficientLengthFollowedByIterable$ = dart.generic(E => {
  let EfficientLengthFollowedByIterableOfE = () => (EfficientLengthFollowedByIterableOfE = dart.constFn(_internal.EfficientLengthFollowedByIterable$(E)))();
  let EfficientLengthIterableOfE = () => (EfficientLengthIterableOfE = dart.constFn(_internal.EfficientLengthIterable$(E)))();
  class EfficientLengthFollowedByIterable extends _internal.FollowedByIterable$(E) {
    skip(count) {
      let firstLength = this[_first$][$length];
      if (dart.notNull(count) >= dart.notNull(firstLength)) return this[_second$][$skip](dart.notNull(count) - dart.notNull(firstLength));
      return new (EfficientLengthFollowedByIterableOfE()).new(EfficientLengthIterableOfE()._check(this[_first$][$skip](count)), EfficientLengthIterableOfE()._check(this[_second$]));
    }
    take(count) {
      let firstLength = this[_first$][$length];
      if (dart.notNull(count) <= dart.notNull(firstLength)) return this[_first$][$take](count);
      return new (EfficientLengthFollowedByIterableOfE()).new(EfficientLengthIterableOfE()._check(this[_first$]), EfficientLengthIterableOfE()._check(this[_second$][$take](dart.notNull(count) - dart.notNull(firstLength))));
    }
    elementAt(index) {
      let firstLength = this[_first$][$length];
      if (dart.notNull(index) < dart.notNull(firstLength)) return this[_first$][$elementAt](index);
      return this[_second$][$elementAt](dart.notNull(index) - dart.notNull(firstLength));
    }
    get first() {
      if (dart.test(this[_first$][$isNotEmpty])) return this[_first$][$first];
      return this[_second$][$first];
    }
    get last() {
      if (dart.test(this[_second$][$isNotEmpty])) return this[_second$][$last];
      return this[_first$][$last];
    }
  }
  (EfficientLengthFollowedByIterable.new = function(first, second) {
    EfficientLengthFollowedByIterable.__proto__.new.call(this, first, second);
    ;
  }).prototype = EfficientLengthFollowedByIterable.prototype;
  ;
  EfficientLengthFollowedByIterable.prototype[_is_EfficientLengthFollowedByIterable_default] = true;
  EfficientLengthFollowedByIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(EfficientLengthFollowedByIterable, "dart:_internal");
  dart.defineExtensionMethods(EfficientLengthFollowedByIterable, ['skip', 'take', 'elementAt']);
  dart.defineExtensionAccessors(EfficientLengthFollowedByIterable, ['first', 'last']);
  return EfficientLengthFollowedByIterable;
});
_internal.EfficientLengthFollowedByIterable = _internal.EfficientLengthFollowedByIterable$();
;
const _nextIterable$ = dart.privateName(_internal, "_nextIterable");
const _currentIterator = dart.privateName(_internal, "_currentIterator");
const _is_FollowedByIterator_default = Symbol('_is_FollowedByIterator_default');
_internal.FollowedByIterator$ = dart.generic(E => {
  class FollowedByIterator extends core.Object {
    moveNext() {
      if (dart.test(this[_currentIterator].moveNext())) return true;
      if (this[_nextIterable$] != null) {
        this[_currentIterator] = this[_nextIterable$][$iterator];
        this[_nextIterable$] = null;
        return this[_currentIterator].moveNext();
      }
      return false;
    }
    get current() {
      return this[_currentIterator].current;
    }
  }
  (FollowedByIterator.new = function(first, _nextIterable) {
    this[_nextIterable$] = _nextIterable;
    this[_currentIterator] = first[$iterator];
    ;
  }).prototype = FollowedByIterator.prototype;
  ;
  FollowedByIterator.prototype[_is_FollowedByIterator_default] = true;
  FollowedByIterator[dart.implements] = () => [core.Iterator$(E)];
  ;
  dart.setGetterSignature(FollowedByIterator, () => ({
    __proto__: dart.getGetters(FollowedByIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(FollowedByIterator, "dart:_internal");
  ;
  return FollowedByIterator;
});
_internal.FollowedByIterator = _internal.FollowedByIterator$();
;
const _is_WhereTypeIterable_default = Symbol('_is_WhereTypeIterable_default');
_internal.WhereTypeIterable$ = dart.generic(T => {
  let WhereTypeIteratorOfT = () => (WhereTypeIteratorOfT = dart.constFn(_internal.WhereTypeIterator$(T)))();
  class WhereTypeIterable extends core.Iterable$(T) {
    get iterator() {
      return new (WhereTypeIteratorOfT()).new(this[_source$][$iterator]);
    }
  }
  (WhereTypeIterable.new = function(_source) {
    this[_source$] = _source;
    WhereTypeIterable.__proto__.new.call(this);
    ;
  }).prototype = WhereTypeIterable.prototype;
  ;
  WhereTypeIterable.prototype[_is_WhereTypeIterable_default] = true;
  dart.setGetterSignature(WhereTypeIterable, () => ({
    __proto__: dart.getGetters(WhereTypeIterable.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(WhereTypeIterable, "dart:_internal");
  ;
  dart.defineExtensionAccessors(WhereTypeIterable, ['iterator']);
  return WhereTypeIterable;
});
_internal.WhereTypeIterable = _internal.WhereTypeIterable$();
;
const _is_WhereTypeIterator_default = Symbol('_is_WhereTypeIterator_default');
_internal.WhereTypeIterator$ = dart.generic(T => {
  class WhereTypeIterator extends core.Object {
    moveNext() {
      while (dart.test(this[_source$].moveNext())) {
        if (T.is(this[_source$].current)) return true;
      }
      return false;
    }
    get current() {
      return T._check(this[_source$].current);
    }
  }
  (WhereTypeIterator.new = function(_source) {
    this[_source$] = _source;
    ;
  }).prototype = WhereTypeIterator.prototype;
  ;
  WhereTypeIterator.prototype[_is_WhereTypeIterator_default] = true;
  WhereTypeIterator[dart.implements] = () => [core.Iterator$(T)];
  ;
  dart.setGetterSignature(WhereTypeIterator, () => ({
    __proto__: dart.getGetters(WhereTypeIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(WhereTypeIterator, "dart:_internal");
  ;
  return WhereTypeIterator;
});
_internal.WhereTypeIterator = _internal.WhereTypeIterator$();
;
_internal.IterableElementError = class IterableElementError extends core.Object {
  static noElement() {
    return new core.StateError.new("No element");
  }
  static tooMany() {
    return new core.StateError.new("Too many elements");
  }
  static tooFew() {
    return new core.StateError.new("Too few elements");
  }
};
(_internal.IterableElementError.new = function() {
  ;
}).prototype = _internal.IterableElementError.prototype;
;
dart.setLibraryUri(_internal.IterableElementError, "dart:_internal");
const _is_FixedLengthListMixin_default = Symbol('_is_FixedLengthListMixin_default');
_internal.FixedLengthListMixin$ = dart.generic(E => {
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class FixedLengthListMixin extends core.Object {
    set length(newLength) {
      dart.throw(new core.UnsupportedError.new("Cannot change the length of a fixed-length list"));
    }
    add(value) {
      E._check(value);
      dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
    }
    insert(index, value) {
      E._check(value);
      dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
    }
    insertAll(at, iterable) {
      IterableOfE()._check(iterable);
      dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
    }
    addAll(iterable) {
      IterableOfE()._check(iterable);
      dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
    }
    remove(element) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    removeWhere(test) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    retainWhere(test) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("Cannot clear a fixed-length list"));
    }
    removeAt(index) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    removeLast() {
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    removeRange(start, end) {
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
    replaceRange(start, end, iterable) {
      IterableOfE()._check(iterable);
      dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
    }
  }
  (FixedLengthListMixin.new = function() {
    ;
  }).prototype = FixedLengthListMixin.prototype;
  ;
  FixedLengthListMixin.prototype[_is_FixedLengthListMixin_default] = true;
  ;
  dart.setSetterSignature(FixedLengthListMixin, () => ({
    __proto__: dart.getSetters(FixedLengthListMixin.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(FixedLengthListMixin, "dart:_internal");
  dart.defineExtensionMethods(FixedLengthListMixin, [
    'add',
    'insert',
    'insertAll',
    'addAll',
    'remove',
    'removeWhere',
    'retainWhere',
    'clear',
    'removeAt',
    'removeLast',
    'removeRange',
    'replaceRange'
  ]);
  dart.defineExtensionAccessors(FixedLengthListMixin, ['length']);
  return FixedLengthListMixin;
});
_internal.FixedLengthListMixin = _internal.FixedLengthListMixin$();
;
const _is_FixedLengthListBase_default = Symbol('_is_FixedLengthListBase_default');
_internal.FixedLengthListBase$ = dart.generic(E => {
  const ListBase_FixedLengthListMixin$36 = class ListBase_FixedLengthListMixin extends collection.ListBase$(E) {};
  (ListBase_FixedLengthListMixin$36.new = function() {
  }).prototype = ListBase_FixedLengthListMixin$36.prototype;
  dart.applyMixin(ListBase_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(E));
  class FixedLengthListBase extends ListBase_FixedLengthListMixin$36 {}
  (FixedLengthListBase.new = function() {
    ;
  }).prototype = FixedLengthListBase.prototype;
  ;
  FixedLengthListBase.prototype[_is_FixedLengthListBase_default] = true;
  dart.setLibraryUri(FixedLengthListBase, "dart:_internal");
  return FixedLengthListBase;
});
_internal.FixedLengthListBase = _internal.FixedLengthListBase$();
;
const _backedList$ = dart.privateName(_internal, "_backedList");
_internal._ListIndicesIterable = class _ListIndicesIterable extends _internal.ListIterable$(core.int) {
  get length() {
    return this[_backedList$][$length];
  }
  elementAt(index) {
    core.RangeError.checkValidIndex(index, this);
    return index;
  }
};
(_internal._ListIndicesIterable.new = function(_backedList) {
  this[_backedList$] = _backedList;
  _internal._ListIndicesIterable.__proto__.new.call(this);
  ;
}).prototype = _internal._ListIndicesIterable.prototype;
;
dart.setLibraryUri(_internal._ListIndicesIterable, "dart:_internal");
;
dart.defineExtensionMethods(_internal._ListIndicesIterable, ['elementAt']);
dart.defineExtensionAccessors(_internal._ListIndicesIterable, ['length']);
const _values$ = dart.privateName(_internal, "_values");
const _is__UnmodifiableMapMixin_default = Symbol('_is__UnmodifiableMapMixin_default');
collection._UnmodifiableMapMixin$ = dart.generic((K, V) => {
  let MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  let MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
  let IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
  let KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  let VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  class _UnmodifiableMapMixin extends core.Object {
    _set(key, value$) {
      let value = value$;
      K._check(key);
      V._check(value);
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      return value$;
    }
    addAll(other) {
      MapOfK$V()._check(other);
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    addEntries(entries) {
      IterableOfMapEntryOfK$V()._check(entries);
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    remove(key) {
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    removeWhere(test) {
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    putIfAbsent(key, ifAbsent) {
      K._check(key);
      VoidToV()._check(ifAbsent);
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    update(key, update, opts) {
      K._check(key);
      VToV()._check(update);
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToV()._check(ifAbsent);
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
    updateAll(update) {
      KAndVToV()._check(update);
      dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
    }
  }
  (_UnmodifiableMapMixin.new = function() {
    ;
  }).prototype = _UnmodifiableMapMixin.prototype;
  _UnmodifiableMapMixin.prototype[dart.isMap] = true;
  ;
  _UnmodifiableMapMixin.prototype[_is__UnmodifiableMapMixin_default] = true;
  _UnmodifiableMapMixin[dart.implements] = () => [core.Map$(K, V)];
  ;
  dart.setLibraryUri(_UnmodifiableMapMixin, "dart:collection");
  dart.defineExtensionMethods(_UnmodifiableMapMixin, [
    '_set',
    'addAll',
    'addEntries',
    'clear',
    'remove',
    'removeWhere',
    'putIfAbsent',
    'update',
    'updateAll'
  ]);
  return _UnmodifiableMapMixin;
});
collection._UnmodifiableMapMixin = collection._UnmodifiableMapMixin$();
;
const _is_UnmodifiableMapBase_default = Symbol('_is_UnmodifiableMapBase_default');
collection.UnmodifiableMapBase$ = dart.generic((K, V) => {
  const MapBase__UnmodifiableMapMixin$36 = class MapBase__UnmodifiableMapMixin extends collection.MapBase$(K, V) {};
  (MapBase__UnmodifiableMapMixin$36.new = function() {
  }).prototype = MapBase__UnmodifiableMapMixin$36.prototype;
  dart.applyMixin(MapBase__UnmodifiableMapMixin$36, collection._UnmodifiableMapMixin$(K, V));
  class UnmodifiableMapBase extends MapBase__UnmodifiableMapMixin$36 {}
  (UnmodifiableMapBase.new = function() {
    ;
  }).prototype = UnmodifiableMapBase.prototype;
  ;
  UnmodifiableMapBase.prototype[_is_UnmodifiableMapBase_default] = true;
  dart.setLibraryUri(UnmodifiableMapBase, "dart:collection");
  return UnmodifiableMapBase;
});
collection.UnmodifiableMapBase = collection.UnmodifiableMapBase$();
;
const _is_ListMapView_default = Symbol('_is_ListMapView_default');
_internal.ListMapView$ = dart.generic(E => {
  let SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
  class ListMapView extends collection.UnmodifiableMapBase$(core.int, E) {
    _get(key) {
      return dart.test(this.containsKey(key)) ? this[_values$][$_get](core.int._check(key)) : null;
    }
    get length() {
      return this[_values$][$length];
    }
    get values() {
      return new (SubListIterableOfE()).new(this[_values$], 0, null);
    }
    get keys() {
      return new _internal._ListIndicesIterable.new(this[_values$]);
    }
    get isEmpty() {
      return this[_values$][$isEmpty];
    }
    get isNotEmpty() {
      return this[_values$][$isNotEmpty];
    }
    containsValue(value) {
      return this[_values$][$contains](value);
    }
    containsKey(key) {
      return core.int.is(key) && dart.notNull(key) >= 0 && dart.notNull(key) < dart.notNull(this.length);
    }
    forEach(f) {
      let length = this[_values$][$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        f(i, this[_values$][$_get](i));
        if (length != this[_values$][$length]) {
          dart.throw(new core.ConcurrentModificationError.new(this[_values$]));
        }
      }
    }
  }
  (ListMapView.new = function(_values) {
    this[_values$] = _values;
    ;
  }).prototype = ListMapView.prototype;
  ;
  ListMapView.prototype[_is_ListMapView_default] = true;
  ;
  dart.setGetterSignature(ListMapView, () => ({
    __proto__: dart.getGetters(ListMapView.__proto__),
    keys: core.Iterable$(core.int),
    [$keys]: core.Iterable$(core.int)
  }));
  dart.setLibraryUri(ListMapView, "dart:_internal");
  ;
  dart.defineExtensionMethods(ListMapView, ['_get', 'containsValue', 'containsKey', 'forEach']);
  dart.defineExtensionAccessors(ListMapView, [
    'length',
    'values',
    'keys',
    'isEmpty',
    'isNotEmpty'
  ]);
  return ListMapView;
});
_internal.ListMapView = _internal.ListMapView$();
;
const _is_ReversedListIterable_default = Symbol('_is_ReversedListIterable_default');
_internal.ReversedListIterable$ = dart.generic(E => {
  class ReversedListIterable extends _internal.ListIterable$(E) {
    get length() {
      return this[_source$][$length];
    }
    elementAt(index) {
      return this[_source$][$elementAt](dart.notNull(this[_source$][$length]) - 1 - dart.notNull(index));
    }
  }
  (ReversedListIterable.new = function(_source) {
    this[_source$] = _source;
    ReversedListIterable.__proto__.new.call(this);
    ;
  }).prototype = ReversedListIterable.prototype;
  ;
  ReversedListIterable.prototype[_is_ReversedListIterable_default] = true;
  dart.setLibraryUri(ReversedListIterable, "dart:_internal");
  ;
  dart.defineExtensionMethods(ReversedListIterable, ['elementAt']);
  dart.defineExtensionAccessors(ReversedListIterable, ['length']);
  return ReversedListIterable;
});
_internal.ReversedListIterable = _internal.ReversedListIterable$();
;
_internal.UnmodifiableListError = class UnmodifiableListError extends core.Object {
  static add() {
    return new core.UnsupportedError.new("Cannot add to unmodifiable List");
  }
  static change() {
    return new core.UnsupportedError.new("Cannot change the content of an unmodifiable List");
  }
  static length() {
    return new core.UnsupportedError.new("Cannot change length of unmodifiable List");
  }
  static remove() {
    return new core.UnsupportedError.new("Cannot remove from unmodifiable List");
  }
};
(_internal.UnmodifiableListError.new = function() {
  ;
}).prototype = _internal.UnmodifiableListError.prototype;
;
dart.setLibraryUri(_internal.UnmodifiableListError, "dart:_internal");
_internal.NonGrowableListError = class NonGrowableListError extends core.Object {
  static add() {
    return new core.UnsupportedError.new("Cannot add to non-growable List");
  }
  static length() {
    return new core.UnsupportedError.new("Cannot change length of non-growable List");
  }
  static remove() {
    return new core.UnsupportedError.new("Cannot remove from non-growable List");
  }
};
(_internal.NonGrowableListError.new = function() {
  ;
}).prototype = _internal.NonGrowableListError.prototype;
;
dart.setLibraryUri(_internal.NonGrowableListError, "dart:_internal");
_internal.Sort = class Sort extends core.Object {
  static sort(E, a, compare) {
    _internal.Sort._doSort(E, a, 0, dart.notNull(a[$length]) - 1, compare);
  }
  static sortRange(E, a, from, to, compare) {
    if (dart.notNull(from) < 0 || dart.notNull(to) > dart.notNull(a[$length]) || dart.notNull(to) < dart.notNull(from)) {
      dart.throw("OutOfRange");
    }
    _internal.Sort._doSort(E, a, from, dart.notNull(to) - 1, compare);
  }
  static _doSort(E, a, left, right, compare) {
    if (dart.notNull(right) - dart.notNull(left) <= 32) {
      _internal.Sort._insertionSort(E, a, left, right, compare);
    } else {
      _internal.Sort._dualPivotQuicksort(E, a, left, right, compare);
    }
  }
  static _insertionSort(E, a, left, right, compare) {
    for (let i = dart.notNull(left) + 1; i <= dart.notNull(right); i = i + 1) {
      let el = a[$_get](i);
      let j = i;
      while (j > dart.notNull(left) && dart.notNull(compare(a[$_get](j - 1), el)) > 0) {
        a[$_set](j, a[$_get](j - 1));
        j = j - 1;
      }
      a[$_set](j, el);
    }
  }
  static _dualPivotQuicksort(E, a, left, right, compare) {
    let t27, t27$, t27$0, t27$1, t27$2, t27$3, t27$4, t27$5, t27$6;
    if (!(dart.notNull(right) - dart.notNull(left) > 32)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/sort.dart", 81, 12, "right - left > _INSERTION_SORT_THRESHOLD");
    let sixth = ((dart.notNull(right) - dart.notNull(left) + 1) / 6)[$truncate]();
    let index1 = dart.notNull(left) + sixth;
    let index5 = dart.notNull(right) - sixth;
    let index3 = ((dart.notNull(left) + dart.notNull(right)) / 2)[$truncate]();
    let index2 = index3 - sixth;
    let index4 = index3 + sixth;
    let el1 = a[$_get](index1);
    let el2 = a[$_get](index2);
    let el3 = a[$_get](index3);
    let el4 = a[$_get](index4);
    let el5 = a[$_get](index5);
    if (dart.notNull(compare(el1, el2)) > 0) {
      let t = el1;
      el1 = el2;
      el2 = t;
    }
    if (dart.notNull(compare(el4, el5)) > 0) {
      let t = el4;
      el4 = el5;
      el5 = t;
    }
    if (dart.notNull(compare(el1, el3)) > 0) {
      let t = el1;
      el1 = el3;
      el3 = t;
    }
    if (dart.notNull(compare(el2, el3)) > 0) {
      let t = el2;
      el2 = el3;
      el3 = t;
    }
    if (dart.notNull(compare(el1, el4)) > 0) {
      let t = el1;
      el1 = el4;
      el4 = t;
    }
    if (dart.notNull(compare(el3, el4)) > 0) {
      let t = el3;
      el3 = el4;
      el4 = t;
    }
    if (dart.notNull(compare(el2, el5)) > 0) {
      let t = el2;
      el2 = el5;
      el5 = t;
    }
    if (dart.notNull(compare(el2, el3)) > 0) {
      let t = el2;
      el2 = el3;
      el3 = t;
    }
    if (dart.notNull(compare(el4, el5)) > 0) {
      let t = el4;
      el4 = el5;
      el5 = t;
    }
    let pivot1 = el2;
    let pivot2 = el4;
    a[$_set](index1, el1);
    a[$_set](index3, el3);
    a[$_set](index5, el5);
    a[$_set](index2, a[$_get](left));
    a[$_set](index4, a[$_get](right));
    let less = dart.notNull(left) + 1;
    let great = dart.notNull(right) - 1;
    let pivots_are_equal = compare(pivot1, pivot2) === 0;
    if (pivots_are_equal) {
      let pivot = pivot1;
      for (let k = less; k <= great; k = k + 1) {
        let ak = a[$_get](k);
        let comp = compare(ak, pivot);
        if (comp === 0) continue;
        if (dart.notNull(comp) < 0) {
          if (k !== less) {
            a[$_set](k, a[$_get](less));
            a[$_set](less, ak);
          }
          less = less + 1;
        } else {
          while (true) {
            comp = compare(a[$_get](great), pivot);
            if (dart.notNull(comp) > 0) {
              great = great - 1;
              continue;
            } else if (dart.notNull(comp) < 0) {
              a[$_set](k, a[$_get](less));
              a[$_set]((t27 = less, less = t27 + 1, t27), a[$_get](great));
              a[$_set]((t27$ = great, great = t27$ - 1, t27$), ak);
              break;
            } else {
              a[$_set](k, a[$_get](great));
              a[$_set]((t27$0 = great, great = t27$0 - 1, t27$0), ak);
              break;
            }
          }
        }
      }
    } else {
      for (let k = less; k <= great; k = k + 1) {
        let ak = a[$_get](k);
        let comp_pivot1 = compare(ak, pivot1);
        if (dart.notNull(comp_pivot1) < 0) {
          if (k !== less) {
            a[$_set](k, a[$_get](less));
            a[$_set](less, ak);
          }
          less = less + 1;
        } else {
          let comp_pivot2 = compare(ak, pivot2);
          if (dart.notNull(comp_pivot2) > 0) {
            while (true) {
              let comp = compare(a[$_get](great), pivot2);
              if (dart.notNull(comp) > 0) {
                great = great - 1;
                if (great < k) break;
                continue;
              } else {
                comp = compare(a[$_get](great), pivot1);
                if (dart.notNull(comp) < 0) {
                  a[$_set](k, a[$_get](less));
                  a[$_set]((t27$1 = less, less = t27$1 + 1, t27$1), a[$_get](great));
                  a[$_set]((t27$2 = great, great = t27$2 - 1, t27$2), ak);
                } else {
                  a[$_set](k, a[$_get](great));
                  a[$_set]((t27$3 = great, great = t27$3 - 1, t27$3), ak);
                }
                break;
              }
            }
          }
        }
      }
    }
    a[$_set](left, a[$_get](less - 1));
    a[$_set](less - 1, pivot1);
    a[$_set](right, a[$_get](great + 1));
    a[$_set](great + 1, pivot2);
    _internal.Sort._doSort(E, a, left, less - 2, compare);
    _internal.Sort._doSort(E, a, great + 2, right, compare);
    if (pivots_are_equal) {
      return;
    }
    if (less < index1 && great > index5) {
      while (compare(a[$_get](less), pivot1) === 0) {
        less = less + 1;
      }
      while (compare(a[$_get](great), pivot2) === 0) {
        great = great - 1;
      }
      for (let k = less; k <= great; k = k + 1) {
        let ak = a[$_get](k);
        let comp_pivot1 = compare(ak, pivot1);
        if (comp_pivot1 === 0) {
          if (k !== less) {
            a[$_set](k, a[$_get](less));
            a[$_set](less, ak);
          }
          less = less + 1;
        } else {
          let comp_pivot2 = compare(ak, pivot2);
          if (comp_pivot2 === 0) {
            while (true) {
              let comp = compare(a[$_get](great), pivot2);
              if (comp === 0) {
                great = great - 1;
                if (great < k) break;
                continue;
              } else {
                comp = compare(a[$_get](great), pivot1);
                if (dart.notNull(comp) < 0) {
                  a[$_set](k, a[$_get](less));
                  a[$_set]((t27$4 = less, less = t27$4 + 1, t27$4), a[$_get](great));
                  a[$_set]((t27$5 = great, great = t27$5 - 1, t27$5), ak);
                } else {
                  a[$_set](k, a[$_get](great));
                  a[$_set]((t27$6 = great, great = t27$6 - 1, t27$6), ak);
                }
                break;
              }
            }
          }
        }
      }
      _internal.Sort._doSort(E, a, less, great, compare);
    } else {
      _internal.Sort._doSort(E, a, less, great, compare);
    }
  }
};
(_internal.Sort.new = function() {
  ;
}).prototype = _internal.Sort.prototype;
;
dart.setLibraryUri(_internal.Sort, "dart:_internal");
dart.defineLazy(_internal.Sort, {
  /*_internal.Sort._INSERTION_SORT_THRESHOLD*/get _INSERTION_SORT_THRESHOLD() {
    return 32;
  }
});
const _name = dart.privateName(_internal, "_name");
const _name$ = dart.privateName(_internal, "Symbol._name");
_internal.Symbol = class Symbol extends core.Object {
  get [_name]() {
    return this[_name$];
  }
  set [_name](value) {
    super[_name] = value;
  }
  _equals(other) {
    return _internal.Symbol.is(other) && this[_name] == other[_name];
  }
  get hashCode() {
    let hash = this._hashCode;
    if (hash != null) return hash;
    hash = 536870911 & 664597 * dart.hashCode(this[_name]);
    this._hashCode = hash;
    return hash;
  }
  toString() {
    return "Symbol(\"" + dart.str(this[_name]) + "\")";
  }
  static getName(symbol) {
    return symbol[_name];
  }
  static validatePublicSymbol(name) {
    if (name[$isEmpty] || dart.test(_internal.Symbol.publicSymbolPattern.hasMatch(name))) return name;
    if (name[$startsWith]("_")) {
      dart.throw(new core.ArgumentError.new("\"" + dart.str(name) + "\" is a private identifier"));
    }
    dart.throw(new core.ArgumentError.new("\"" + dart.str(name) + "\" is not a valid (qualified) symbol name"));
  }
  static isValidSymbol(name) {
    return name[$isEmpty] || dart.test(_internal.Symbol.symbolPattern.hasMatch(name));
  }
  static computeUnmangledName(symbol) {
    return symbol[_name];
  }
};
(_internal.Symbol.new = function(name) {
  this[_name$] = name;
  ;
}).prototype = _internal.Symbol.prototype;
(_internal.Symbol.unvalidated = function(_name) {
  this[_name$] = _name;
  ;
}).prototype = _internal.Symbol.prototype;
(_internal.Symbol.validated = function(name) {
  this[_name$] = _internal.Symbol.validatePublicSymbol(name);
  ;
}).prototype = _internal.Symbol.prototype;
;
_internal.Symbol[dart.implements] = () => [core.Symbol];
;
dart.setLibraryUri(_internal.Symbol, "dart:_internal");
;
dart.defineExtensionMethods(_internal.Symbol, ['_equals', 'toString']);
dart.defineExtensionAccessors(_internal.Symbol, ['hashCode']);
dart.defineLazy(_internal.Symbol, {
  /*_internal.Symbol.reservedWordRE*/get reservedWordRE() {
    return "(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))";
  },
  /*_internal.Symbol.publicIdentifierRE*/get publicIdentifierRE() {
    return "(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*";
  },
  /*_internal.Symbol.identifierRE*/get identifierRE() {
    return "(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$_][\\w$]*";
  },
  /*_internal.Symbol.operatorRE*/get operatorRE() {
    return "(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)";
  },
  /*_internal.Symbol.publicSymbolPattern*/get publicSymbolPattern() {
    return core.RegExp.new("^(?:" + dart.str(_internal.Symbol.operatorRE) + "$|" + dart.str(_internal.Symbol.publicIdentifierRE) + "(?:=?$|[.](?!$)))+?$");
  },
  /*_internal.Symbol.symbolPattern*/get symbolPattern() {
    return core.RegExp.new("^(?:" + dart.str(_internal.Symbol.operatorRE) + "$|" + dart.str(_internal.Symbol.identifierRE) + "(?:=?$|[.](?!$)))+?$");
  }
});
const _next = dart.privateName(_internal, "_next");
const _previous = dart.privateName(_internal, "_previous");
const _list$ = dart.privateName(_internal, "_list");
const _is_IterableBase_default = Symbol('_is_IterableBase_default');
collection.IterableBase$ = dart.generic(E => {
  class IterableBase extends core.Iterable$(E) {
    static iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      let t27;
      if (leftDelimiter === void 0) leftDelimiter = "(";
      if (rightDelimiter === void 0) rightDelimiter = ")";
      if (dart.test(collection._isToStringVisiting(iterable))) {
        if (leftDelimiter === "(" && rightDelimiter === ")") {
          return "(...)";
        }
        return dart.str(leftDelimiter) + "..." + dart.str(rightDelimiter);
      }
      let parts = JSArrayOfString().of([]);
      collection._toStringVisiting[$add](iterable);
      try {
        collection._iterablePartsToStrings(iterable, parts);
      } finally {
        if (!core.identical(collection._toStringVisiting[$last], iterable)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/iterable.dart", 242, 14, "identical(_toStringVisiting.last, iterable)");
        collection._toStringVisiting[$removeLast]();
      }
      return (t27 = new core.StringBuffer.new(leftDelimiter), t27.writeAll(parts, ", "), t27.write(rightDelimiter), t27).toString();
    }
    static iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      if (leftDelimiter === void 0) leftDelimiter = "(";
      if (rightDelimiter === void 0) rightDelimiter = ")";
      if (dart.test(collection._isToStringVisiting(iterable))) {
        return dart.str(leftDelimiter) + "..." + dart.str(rightDelimiter);
      }
      let buffer = new core.StringBuffer.new(leftDelimiter);
      collection._toStringVisiting[$add](iterable);
      try {
        buffer.writeAll(iterable, ", ");
      } finally {
        if (!core.identical(collection._toStringVisiting[$last], iterable)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/iterable.dart", 271, 14, "identical(_toStringVisiting.last, iterable)");
        collection._toStringVisiting[$removeLast]();
      }
      buffer.write(rightDelimiter);
      return buffer.toString();
    }
  }
  (IterableBase.new = function() {
    IterableBase.__proto__.new.call(this);
    ;
  }).prototype = IterableBase.prototype;
  ;
  IterableBase.prototype[_is_IterableBase_default] = true;
  dart.setLibraryUri(IterableBase, "dart:collection");
  return IterableBase;
});
collection.IterableBase = collection.IterableBase$();
;
const _is_LinkedList_default = Symbol('_is_LinkedList_default');
const first = dart.privateName(_internal, "LinkedList.first");
const last = dart.privateName(_internal, "LinkedList.last");
const length$ = dart.privateName(_internal, "LinkedList.length");
_internal.LinkedList$ = dart.generic(T => {
  let _LinkedListIteratorOfT = () => (_LinkedListIteratorOfT = dart.constFn(_internal._LinkedListIterator$(T)))();
  class LinkedList extends collection.IterableBase$(T) {
    get first() {
      return this[first];
    }
    set first(value) {
      this[first] = T._check(value);
    }
    get last() {
      return this[last];
    }
    set last(value) {
      this[last] = T._check(value);
    }
    get length() {
      return this[length$];
    }
    set length(value) {
      this[length$] = value;
    }
    get isEmpty() {
      return this.length === 0;
    }
    add(newLast) {
      T._check(newLast);
      if (!(newLast[_next] == null && newLast[_previous] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/linked_list.dart", 21, 12, "newLast._next == null && newLast._previous == null");
      if (this.last != null) {
        if (!(this.last[_next] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/linked_list.dart", 23, 14, "last._next == null");
        this.last[_next] = newLast;
      } else {
        this.first = newLast;
      }
      newLast[_previous] = this.last;
      this.last = newLast;
      this.last[_list$] = this;
      this.length = dart.notNull(this.length) + 1;
    }
    addFirst(newFirst) {
      T._check(newFirst);
      if (this.first != null) {
        if (!(this.first[_previous] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/linked_list.dart", 39, 14, "first._previous == null");
        this.first[_previous] = newFirst;
      } else {
        this.last = newFirst;
      }
      newFirst[_next] = this.first;
      this.first = newFirst;
      this.first[_list$] = this;
      this.length = dart.notNull(this.length) + 1;
    }
    remove(node) {
      T._check(node);
      if (!dart.equals(node[_list$], this)) return;
      this.length = dart.notNull(this.length) - 1;
      if (node[_previous] == null) {
        if (!(node == this.first)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/linked_list.dart", 61, 14, "identical(node, first)");
        this.first = node[_next];
      } else {
        node[_previous][_next] = node[_next];
      }
      if (node[_next] == null) {
        if (!(node == this.last)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/linked_list.dart", 67, 14, "identical(node, last)");
        this.last = node[_previous];
      } else {
        node[_next][_previous] = node[_previous];
      }
      node[_next] = node[_previous] = null;
      node[_list$] = null;
    }
    get iterator() {
      return new (_LinkedListIteratorOfT()).new(this);
    }
  }
  (LinkedList.new = function() {
    this[first] = null;
    this[last] = null;
    this[length$] = 0;
    LinkedList.__proto__.new.call(this);
    ;
  }).prototype = LinkedList.prototype;
  ;
  LinkedList.prototype[_is_LinkedList_default] = true;
  ;
  dart.setGetterSignature(LinkedList, () => ({
    __proto__: dart.getGetters(LinkedList.__proto__),
    iterator: core.Iterator$(T),
    [$iterator]: core.Iterator$(T)
  }));
  dart.setLibraryUri(LinkedList, "dart:_internal");
  ;
  dart.defineExtensionAccessors(LinkedList, [
    'first',
    'last',
    'length',
    'isEmpty',
    'iterator'
  ]);
  return LinkedList;
});
_internal.LinkedList = _internal.LinkedList$();
;
const _is_LinkedListEntry_default = Symbol('_is_LinkedListEntry_default');
const _next$ = dart.privateName(_internal, "LinkedListEntry._next");
const _previous$ = dart.privateName(_internal, "LinkedListEntry._previous");
const _list = dart.privateName(_internal, "LinkedListEntry._list");
_internal.LinkedListEntry$ = dart.generic(T => {
  let LinkedListOfT = () => (LinkedListOfT = dart.constFn(_internal.LinkedList$(T)))();
  class LinkedListEntry extends core.Object {
    get [_next]() {
      return this[_next$];
    }
    set [_next](value) {
      this[_next$] = T._check(value);
    }
    get [_previous]() {
      return this[_previous$];
    }
    set [_previous](value) {
      this[_previous$] = T._check(value);
    }
    get [_list$]() {
      return this[_list];
    }
    set [_list$](value) {
      this[_list] = LinkedListOfT()._check(value);
    }
    unlink() {
      if (this[_list$] == null) return;
      this[_list$].remove(T._check(this));
    }
  }
  (LinkedListEntry.new = function() {
    this[_next$] = null;
    this[_previous$] = null;
    this[_list] = null;
    ;
  }).prototype = LinkedListEntry.prototype;
  ;
  LinkedListEntry.prototype[_is_LinkedListEntry_default] = true;
  ;
  dart.setLibraryUri(LinkedListEntry, "dart:_internal");
  ;
  return LinkedListEntry;
});
_internal.LinkedListEntry = _internal.LinkedListEntry$();
;
const _is__LinkedListIterator_default = Symbol('_is__LinkedListIterator_default');
const current = dart.privateName(_internal, "_LinkedListIterator.current");
_internal._LinkedListIterator$ = dart.generic(T => {
  class _LinkedListIterator extends core.Object {
    get current() {
      return this[current];
    }
    set current(value) {
      this[current] = T._check(value);
    }
    moveNext() {
      if (this.current == null) {
        if (this[_list$] == null) return false;
        if (!(dart.notNull(this[_list$].length) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/linked_list.dart", 120, 14, "_list.length > 0");
        this.current = this[_list$].first;
        this[_list$] = null;
        return true;
      }
      this.current = this.current[_next];
      return this.current != null;
    }
  }
  (_LinkedListIterator.new = function(_list) {
    this[current] = null;
    this[_list$] = _list;
    if (this[_list$].length === 0) this[_list$] = null;
  }).prototype = _LinkedListIterator.prototype;
  ;
  _LinkedListIterator.prototype[_is__LinkedListIterator_default] = true;
  _LinkedListIterator[dart.implements] = () => [core.Iterator$(T)];
  ;
  dart.setLibraryUri(_LinkedListIterator, "dart:_internal");
  ;
  return _LinkedListIterator;
});
_internal._LinkedListIterator = _internal._LinkedListIterator$();
;
_internal.hexDigitValue = function hexDigitValue(char) {
  if (!(dart.notNull(char) >= 0 && dart.notNull(char) <= 65535)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/internal.dart", 96, 10, "char >= 0 && char <= 0xFFFF");
  let digit = (dart.notNull(char) ^ 48) >>> 0;
  if (digit <= 9) return digit;
  let letter = (dart.notNull(char) | 32) >>> 0;
  if (97 <= letter && letter <= 102) return letter - (97 - 10);
  return -1;
};
_internal.parseHexByte = function parseHexByte(source, index) {
  if (!(dart.notNull(index) + 2 <= source.length)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/internal/internal.dart", 111, 10, "index + 2 <= source.length");
  let digit1 = _internal.hexDigitValue(source[$codeUnitAt](index));
  let digit2 = _internal.hexDigitValue(source[$codeUnitAt](dart.notNull(index) + 1));
  return dart.notNull(digit1) * 16 + dart.notNull(digit2) - (dart.notNull(digit2) & 256);
};
_internal.extractTypeArguments = function extractTypeArguments$(T, instance, extract) {
  return dart.extractTypeArguments(T, instance, extract);
};
_internal._checkCount = function _checkCount(count) {
  core.ArgumentError.checkNotNull(count, "count");
  core.RangeError.checkNotNegative(count, "count");
  return count;
};
_internal.makeListFixedLength = function makeListFixedLength(E, growableList) {
  _interceptors.JSArray.markFixedList(growableList);
  return growableList;
};
_internal.makeFixedListUnmodifiable = function makeFixedListUnmodifiable(E, fixedLengthList) {
  _interceptors.JSArray.markUnmodifiableList(fixedLengthList);
  return fixedLengthList;
};
_internal.printToConsole = function printToConsole(line) {
  _js_primitives.printString(dart.str(line));
};
let C23;
dart.defineLazy(_internal, {
  /*_internal.POWERS_OF_TEN*/get POWERS_OF_TEN() {
    return C23 || CT.C23;
  },
  /*_internal.printToZone*/get printToZone() {
    return null;
  },
  set printToZone(_) {}
});
const _handle = dart.privateName(_isolate_helper, "_handle");
const _tick = dart.privateName(_isolate_helper, "_tick");
const _once = dart.privateName(_isolate_helper, "_once");
_isolate_helper.TimerImpl = class TimerImpl extends core.Object {
  get tick() {
    return this[_tick];
  }
  cancel() {
    if (dart.test(_isolate_helper.hasTimer())) {
      if (this[_handle] == null) return;
      dart.removeAsyncCallback();
      if (dart.test(this[_once])) {
        _isolate_helper.global.clearTimeout(this[_handle]);
      } else {
        _isolate_helper.global.clearInterval(this[_handle]);
      }
      this[_handle] = null;
    } else {
      dart.throw(new core.UnsupportedError.new("Canceling a timer."));
    }
  }
  get isActive() {
    return this[_handle] != null;
  }
};
(_isolate_helper.TimerImpl.new = function(milliseconds, callback) {
  this[_handle] = null;
  this[_tick] = 0;
  this[_once] = true;
  if (dart.test(_isolate_helper.hasTimer())) {
    let currentHotRestartIteration = dart.hotRestartIteration;
    const internalCallback = () => {
      this[_handle] = null;
      dart.removeAsyncCallback();
      this[_tick] = 1;
      if (currentHotRestartIteration == dart.hotRestartIteration) {
        callback();
      }
    };
    dart.fn(internalCallback, VoidTovoid());
    dart.addAsyncCallback();
    this[_handle] = _isolate_helper.global.setTimeout(internalCallback, milliseconds);
  } else {
    dart.throw(new core.UnsupportedError.new("`setTimeout()` not found."));
  }
}).prototype = _isolate_helper.TimerImpl.prototype;
(_isolate_helper.TimerImpl.periodic = function(milliseconds, callback) {
  this[_handle] = null;
  this[_tick] = 0;
  this[_once] = false;
  if (dart.test(_isolate_helper.hasTimer())) {
    dart.addAsyncCallback();
    let start = Date.now();
    let currentHotRestartIteration = dart.hotRestartIteration;
    this[_handle] = _isolate_helper.global.setInterval(dart.fn(() => {
      if (currentHotRestartIteration != dart.hotRestartIteration) {
        this.cancel();
        return;
      }
      let tick = dart.notNull(this[_tick]) + 1;
      if (dart.notNull(milliseconds) > 0) {
        let duration = Date.now() - start;
        if (duration > (tick + 1) * dart.notNull(milliseconds)) {
          tick = (duration / dart.notNull(milliseconds))[$truncate]();
        }
      }
      this[_tick] = tick;
      callback(this);
    }, VoidToNull()), milliseconds);
  } else {
    dart.throw(new core.UnsupportedError.new("Periodic timer."));
  }
}).prototype = _isolate_helper.TimerImpl.prototype;
;
_isolate_helper.TimerImpl[dart.implements] = () => [async.Timer];
;
dart.setGetterSignature(_isolate_helper.TimerImpl, () => ({
  __proto__: dart.getGetters(_isolate_helper.TimerImpl.__proto__),
  tick: core.int,
  isActive: core.bool
}));
dart.setLibraryUri(_isolate_helper.TimerImpl, "dart:_isolate_helper");
;
_isolate_helper.startRootIsolate = function startRootIsolate(main, args) {
  if (args == null) args = JSArrayOfString().of([]);
  if (core.List.is(args)) {
    if (!ListOfString().is(args)) args = ListOfString().from(core.Iterable._check(args));
    if (typeof main == "function") {
      main(args, null);
    } else {
      dart.dcall(main, [args]);
    }
  } else {
    dart.throw(new core.ArgumentError.new("Arguments to main must be a List: " + dart.str(args)));
  }
};
_isolate_helper.hasTimer = function hasTimer() {
  return _isolate_helper.global.setTimeout != null;
};
dart.defineLazy(_isolate_helper, {
  /*_isolate_helper.global*/get global() {
    return dart.global;
  }
});
_js_helper._Patch = class _Patch extends core.Object {};
(_js_helper._Patch.new = function() {
  ;
}).prototype = _js_helper._Patch.prototype;
;
dart.setLibraryUri(_js_helper._Patch, "dart:_js_helper");
const _current$0 = dart.privateName(_js_helper, "_current");
const _jsIterator$ = dart.privateName(_js_helper, "_jsIterator");
const _is_DartIterator_default = Symbol('_is_DartIterator_default');
_js_helper.DartIterator$ = dart.generic(E => {
  class DartIterator extends core.Object {
    get current() {
      return this[_current$0];
    }
    moveNext() {
      let ret = this[_jsIterator$].next();
      this[_current$0] = ret.value;
      return !ret.done;
    }
  }
  (DartIterator.new = function(_jsIterator) {
    this[_current$0] = null;
    this[_jsIterator$] = _jsIterator;
    ;
  }).prototype = DartIterator.prototype;
  ;
  DartIterator.prototype[_is_DartIterator_default] = true;
  DartIterator[dart.implements] = () => [core.Iterator$(E)];
  ;
  dart.setGetterSignature(DartIterator, () => ({
    __proto__: dart.getGetters(DartIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(DartIterator, "dart:_js_helper");
  ;
  return DartIterator;
});
_js_helper.DartIterator = _js_helper.DartIterator$();
;
const _initGenerator$ = dart.privateName(_js_helper, "_initGenerator");
const _is_SyncIterable_default = Symbol('_is_SyncIterable_default');
_js_helper.SyncIterable$ = dart.generic(E => {
  let DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
  class SyncIterable extends collection.IterableBase$(E) {
    [Symbol.iterator]() {
      return this[_initGenerator$]();
    }
    get iterator() {
      return new (DartIteratorOfE()).new(this[_initGenerator$]());
    }
  }
  (SyncIterable.new = function(_initGenerator) {
    this[_initGenerator$] = _initGenerator;
    SyncIterable.__proto__.new.call(this);
    ;
  }).prototype = SyncIterable.prototype;
  ;
  SyncIterable.prototype[_is_SyncIterable_default] = true;
  ;
  dart.setGetterSignature(SyncIterable, () => ({
    __proto__: dart.getGetters(SyncIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(SyncIterable, "dart:_js_helper");
  ;
  dart.defineExtensionAccessors(SyncIterable, ['iterator']);
  return SyncIterable;
});
_js_helper.SyncIterable = _js_helper.SyncIterable$();
;
let C24;
_js_helper.Primitives = class Primitives extends core.Object {
  static _parseIntError(source, handleError) {
    if (handleError == null) dart.throw(new core.FormatException.new(source));
    return handleError(source);
  }
  static parseInt(source, _radix, handleError) {
    if (source == null) dart.argumentError(source);
    let re = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i;
    let match = re.exec(source);
    let digitsIndex = 1;
    let hexIndex = 2;
    let decimalIndex = 3;
    if (match == null) {
      return _js_helper.Primitives._parseIntError(source, handleError);
    }
    let decimalMatch = match[$_get](decimalIndex);
    if (_radix == null) {
      if (decimalMatch != null) {
        return parseInt(source, 10);
      }
      if (match[$_get](hexIndex) != null) {
        return parseInt(source, 16);
      }
      return _js_helper.Primitives._parseIntError(source, handleError);
    }
    let radix = _radix;
    if (radix < 2 || radix > 36) {
      dart.throw(new core.RangeError.range(radix, 2, 36, "radix"));
    }
    if (radix === 10 && decimalMatch != null) {
      return parseInt(source, 10);
    }
    if (radix < 10 || decimalMatch == null) {
      let maxCharCode = null;
      if (radix <= 10) {
        maxCharCode = 48 - 1 + radix;
      } else {
        maxCharCode = 97 - 10 - 1 + radix;
      }
      if (!(typeof match[$_get](digitsIndex) == 'string')) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_helper.dart", 136, 14, "match[digitsIndex] is String");
      let digitsPart = match[digitsIndex];
      for (let i = 0; i < digitsPart.length; i = i + 1) {
        let characterCode = (digitsPart[$codeUnitAt](i) | 32) >>> 0;
        if (characterCode > dart.notNull(maxCharCode)) {
          return _js_helper.Primitives._parseIntError(source, handleError);
        }
      }
    }
    return parseInt(source, radix);
  }
  static _parseDoubleError(source, handleError) {
    if (handleError == null) {
      dart.throw(new core.FormatException.new("Invalid double", source));
    }
    return handleError(source);
  }
  static parseDouble(source, handleError) {
    if (source == null) dart.argumentError(source);
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source)) {
      return _js_helper.Primitives._parseDoubleError(source, handleError);
    }
    let result = parseFloat(source);
    if (result[$isNaN]) {
      let trimmed = source[$trim]();
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN") {
        return result;
      }
      return _js_helper.Primitives._parseDoubleError(source, handleError);
    }
    return result;
  }
  static dateNow() {
    return Date.now();
  }
  static initTicker() {
    if (_js_helper.Primitives.timerFrequency != null) return;
    _js_helper.Primitives.timerFrequency = 1000;
    _js_helper.Primitives.timerTicks = C24 || CT.C24;
    if (typeof window == "undefined") return;
    let jsWindow = window;
    if (jsWindow == null) return;
    let performance = jsWindow.performance;
    if (performance == null) return;
    if (typeof performance.now != "function") return;
    _js_helper.Primitives.timerFrequency = 1000000;
    _js_helper.Primitives.timerTicks = dart.fn(() => (1000 * performance.now())[$floor](), VoidToint());
  }
  static get isD8() {
    return typeof version == "function" && typeof os == "object" && "system" in os;
  }
  static get isJsshell() {
    return typeof version == "function" && typeof system == "function";
  }
  static currentUri() {
    if (!!dart.global.location) {
      return dart.global.location.href;
    }
    return "";
  }
  static _fromCharCodeApply(array) {
    let end = dart.notNull(array[$length]);
    if (end <= 500) {
      return String.fromCharCode.apply(null, array);
    }
    let result = "";
    for (let i = 0; i < end; i = i + 500) {
      let chunkEnd = i + 500 < end ? i + 500 : end;
      result = result + String.fromCharCode.apply(null, array.slice(i, chunkEnd));
    }
    return result;
  }
  static stringFromCodePoints(codePoints) {
    let a = JSArrayOfint().of([]);
    for (let i of codePoints) {
      if (i == null) dart.argumentError(i);
      {
        if (i <= 65535) {
          a[$add](i);
        } else if (i <= 1114111) {
          a[$add](55296 + (i - 65536 >> 10 & 1023));
          a[$add](56320 + (i & 1023));
        } else {
          dart.throw(_js_helper.argumentErrorValue(i));
        }
      }
    }
    return _js_helper.Primitives._fromCharCodeApply(a);
  }
  static stringFromCharCodes(charCodes) {
    for (let i of charCodes) {
      if (i == null) dart.argumentError(i);
      {
        if (i < 0) dart.throw(_js_helper.argumentErrorValue(i));
        if (i > 65535) return _js_helper.Primitives.stringFromCodePoints(charCodes);
      }
    }
    return _js_helper.Primitives._fromCharCodeApply(charCodes);
  }
  static stringFromNativeUint8List(charCodes, start, end) {
    if (start == null) dart.argumentError(start);
    if (end == null) dart.argumentError(end);
    if (end <= 500 && start === 0 && end === charCodes[$length]) {
      return String.fromCharCode.apply(null, charCodes);
    }
    let result = "";
    for (let i = start; i < end; i = i + 500) {
      let chunkEnd = i + 500 < end ? i + 500 : end;
      result = result + String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
    }
    return result;
  }
  static stringFromCharCode(charCode) {
    if (charCode == null) dart.argumentError(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535) {
        return String.fromCharCode(charCode);
      }
      if (charCode <= 1114111) {
        let bits = charCode - 65536;
        let low = 56320 | bits & 1023;
        let high = (55296 | bits[$rightShift](10)) >>> 0;
        return String.fromCharCode(high, low);
      }
    }
    dart.throw(new core.RangeError.range(charCode, 0, 1114111));
  }
  static stringConcatUnchecked(string1, string2) {
    return _foreign_helper.JS_STRING_CONCAT(string1, string2);
  }
  static flattenString(str) {
    return str.charCodeAt(0) == 0 ? str : str;
  }
  static getTimeZoneName(receiver) {
    let d = _js_helper.Primitives.lazyAsJsDate(receiver);
    let match = /\((.*)\)/.exec(d.toString());
    if (match != null) return core.String._check(match[$_get](1));
    match = /^[A-Z,a-z]{3}\s[A-Z,a-z]{3}\s\d+\s\d{2}:\d{2}:\d{2}\s([A-Z]{3,5})\s\d{4}$/.exec(d.toString());
    if (match != null) return core.String._check(match[$_get](1));
    match = /(?:GMT|UTC)[+-]\d{4}/.exec(d.toString());
    if (match != null) return core.String._check(match[$_get](0));
    return "";
  }
  static getTimeZoneOffsetInMinutes(receiver) {
    return -_js_helper.Primitives.lazyAsJsDate(receiver).getTimezoneOffset();
  }
  static valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
    if (years == null) dart.argumentError(years);
    if (month == null) dart.argumentError(month);
    if (day == null) dart.argumentError(day);
    if (hours == null) dart.argumentError(hours);
    if (minutes == null) dart.argumentError(minutes);
    if (seconds == null) dart.argumentError(seconds);
    if (milliseconds == null) dart.argumentError(milliseconds);
    if (isUtc == null) dart.argumentError(isUtc);
    let MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
    let jsMonth = month - 1;
    let value = null;
    if (isUtc) {
      value = Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds);
    } else {
      value = new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
    }
    if (value[$isNaN] || dart.notNull(value) < -MAX_MILLISECONDS_SINCE_EPOCH || dart.notNull(value) > MAX_MILLISECONDS_SINCE_EPOCH) {
      return null;
    }
    if (years <= 0 || years < 100) return _js_helper.Primitives.patchUpY2K(value, years, isUtc);
    return value;
  }
  static patchUpY2K(value, years, isUtc) {
    let date = new Date(value);
    if (dart.dtest(isUtc)) {
      date.setUTCFullYear(years);
    } else {
      date.setFullYear(years);
    }
    return date.valueOf();
  }
  static lazyAsJsDate(receiver) {
    if (receiver.date === void 0) {
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    }
    return receiver.date;
  }
  static getYear(receiver) {
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCFullYear() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getFullYear() + 0;
  }
  static getMonth(receiver) {
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMonth() + 1 : _js_helper.Primitives.lazyAsJsDate(receiver).getMonth() + 1;
  }
  static getDay(receiver) {
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCDate() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getDate() + 0;
  }
  static getHours(receiver) {
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCHours() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getHours() + 0;
  }
  static getMinutes(receiver) {
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMinutes() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getMinutes() + 0;
  }
  static getSeconds(receiver) {
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCSeconds() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getSeconds() + 0;
  }
  static getMilliseconds(receiver) {
    return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getMilliseconds() + 0;
  }
  static getWeekday(receiver) {
    let weekday = dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCDay() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getDay() + 0;
    return (weekday + 6)[$modulo](7) + 1;
  }
  static valueFromDateString(str) {
    if (!(typeof str == 'string')) dart.throw(_js_helper.argumentErrorValue(str));
    let value = Date.parse(str);
    if (value[$isNaN]) dart.throw(_js_helper.argumentErrorValue(str));
    return value;
  }
  static getProperty(object, key) {
    if (object == null || typeof object == 'boolean' || typeof object == 'number' || typeof object == 'string') {
      dart.throw(_js_helper.argumentErrorValue(object));
    }
    return object[key];
  }
  static setProperty(object, key, value) {
    if (object == null || typeof object == 'boolean' || typeof object == 'number' || typeof object == 'string') {
      dart.throw(_js_helper.argumentErrorValue(object));
    }
    object[key] = value;
  }
};
(_js_helper.Primitives.new = function() {
  ;
}).prototype = _js_helper.Primitives.prototype;
;
dart.setLibraryUri(_js_helper.Primitives, "dart:_js_helper");
dart.defineLazy(_js_helper.Primitives, {
  /*_js_helper.Primitives.DOLLAR_CHAR_VALUE*/get DOLLAR_CHAR_VALUE() {
    return 36;
  },
  /*_js_helper.Primitives.timerFrequency*/get timerFrequency() {
    return null;
  },
  set timerFrequency(_) {},
  /*_js_helper.Primitives.timerTicks*/get timerTicks() {
    return null;
  },
  set timerTicks(_) {}
});
const _message$ = dart.privateName(_js_helper, "_message");
const _method = dart.privateName(_js_helper, "_method");
const _receiver$0 = dart.privateName(_js_helper, "_receiver");
let C25;
const _existingArgumentNames$0 = dart.privateName(_js_helper, "_existingArgumentNames");
let C26;
const _arguments$0 = dart.privateName(_js_helper, "_arguments");
let C27;
const _memberName$0 = dart.privateName(_js_helper, "_memberName");
let C28;
const _invocation$0 = dart.privateName(_js_helper, "_invocation");
let C29;
const _namedArguments$0 = dart.privateName(_js_helper, "_namedArguments");
let C30;
core.Error = class Error extends core.Object {
  static safeToString(object) {
    if (typeof object == 'number' || typeof object == 'boolean' || null == object) {
      return dart.toString(object);
    }
    if (typeof object == 'string') {
      return core.Error._stringToSafeString(object);
    }
    return core.Error._objectToString(object);
  }
  static _stringToSafeString(string) {
    return JSON.stringify(string);
  }
  static _objectToString(object) {
    return "Instance of '" + dart.typeName(dart.getReifiedType(object)) + "'";
  }
  get stackTrace() {
    return dart.stackTraceForError(this);
  }
};
(core.Error.new = function() {
  ;
}).prototype = core.Error.prototype;
;
dart.setGetterSignature(core.Error, () => ({
  __proto__: dart.getGetters(core.Error.__proto__),
  stackTrace: core.StackTrace,
  [$stackTrace]: core.StackTrace
}));
dart.setLibraryUri(core.Error, "dart:core");
dart.defineExtensionAccessors(core.Error, ['stackTrace']);
const _receiver$1 = dart.privateName(_js_helper, "JsNoSuchMethodError._receiver");
_js_helper.JsNoSuchMethodError = class JsNoSuchMethodError extends core.Error {
  get [_receiver$0]() {
    return this[_receiver$1];
  }
  set [_receiver$0](value) {
    super[_receiver$0] = value;
  }
  toString() {
    if (this[_method] == null) return "NoSuchMethodError: " + dart.str(this[_message$]);
    if (this[_receiver$0] == null) {
      return "NoSuchMethodError: method not found: '" + dart.str(this[_method]) + "' (" + dart.str(this[_message$]) + ")";
    }
    return "NoSuchMethodError: " + "method not found: '" + dart.str(this[_method]) + "' on '" + dart.str(this[_receiver$0]) + "' (" + dart.str(this[_message$]) + ")";
  }
  get [_receiver$]() {
    return this[$noSuchMethod](new core._Invocation.getter(C25 || CT.C25));
  }
  get [_existingArgumentNames$]() {
    return core.List._check(this[$noSuchMethod](new core._Invocation.getter(C26 || CT.C26)));
  }
  get [_arguments$]() {
    return core.List._check(this[$noSuchMethod](new core._Invocation.getter(C27 || CT.C27)));
  }
  get [_memberName$]() {
    return core.Symbol._check(this[$noSuchMethod](new core._Invocation.getter(C28 || CT.C28)));
  }
  get [_invocation$]() {
    return core.Invocation._check(this[$noSuchMethod](new core._Invocation.getter(C29 || CT.C29)));
  }
  get [_namedArguments$]() {
    return MapOfSymbol$dynamic()._check(this[$noSuchMethod](new core._Invocation.getter(C30 || CT.C30)));
  }
};
(_js_helper.JsNoSuchMethodError.new = function(_message, match) {
  this[_message$] = _message;
  this[_method] = match == null ? null : match.method;
  this[_receiver$1] = match == null ? null : match.receiver;
  _js_helper.JsNoSuchMethodError.__proto__.new.call(this);
  ;
}).prototype = _js_helper.JsNoSuchMethodError.prototype;
;
_js_helper.JsNoSuchMethodError[dart.implements] = () => [core.NoSuchMethodError];
dart.setGetterSignature(_js_helper.JsNoSuchMethodError, () => ({
  __proto__: dart.getGetters(_js_helper.JsNoSuchMethodError.__proto__),
  [_receiver$]: core.Object,
  [_existingArgumentNames$]: core.List,
  [_arguments$]: core.List,
  [_memberName$]: core.Symbol,
  [_invocation$]: core.Invocation,
  [_namedArguments$]: core.Map$(core.Symbol, dart.dynamic)
}));
dart.setLibraryUri(_js_helper.JsNoSuchMethodError, "dart:_js_helper");
;
dart.defineExtensionMethods(_js_helper.JsNoSuchMethodError, ['toString']);
_js_helper.UnknownJsTypeError = class UnknownJsTypeError extends core.Error {
  toString() {
    return this[_message$][$isEmpty] ? "Error" : "Error: " + dart.str(this[_message$]);
  }
};
(_js_helper.UnknownJsTypeError.new = function(_message) {
  this[_message$] = _message;
  _js_helper.UnknownJsTypeError.__proto__.new.call(this);
  ;
}).prototype = _js_helper.UnknownJsTypeError.prototype;
;
dart.setLibraryUri(_js_helper.UnknownJsTypeError, "dart:_js_helper");
;
dart.defineExtensionMethods(_js_helper.UnknownJsTypeError, ['toString']);
const types$0 = dart.privateName(_js_helper, "Creates.types");
_js_helper.Creates = class Creates extends core.Object {
  get types() {
    return this[types$0];
  }
  set types(value) {
    super.types = value;
  }
};
(_js_helper.Creates.new = function(types) {
  this[types$0] = types;
  ;
}).prototype = _js_helper.Creates.prototype;
;
dart.setLibraryUri(_js_helper.Creates, "dart:_js_helper");
;
const types$1 = dart.privateName(_js_helper, "Returns.types");
_js_helper.Returns = class Returns extends core.Object {
  get types() {
    return this[types$1];
  }
  set types(value) {
    super.types = value;
  }
};
(_js_helper.Returns.new = function(types) {
  this[types$1] = types;
  ;
}).prototype = _js_helper.Returns.prototype;
;
dart.setLibraryUri(_js_helper.Returns, "dart:_js_helper");
;
const name$6 = dart.privateName(_js_helper, "JSName.name");
_js_helper.JSName = class JSName extends core.Object {
  get name() {
    return this[name$6];
  }
  set name(value) {
    super.name = value;
  }
};
(_js_helper.JSName.new = function(name) {
  this[name$6] = name;
  ;
}).prototype = _js_helper.JSName.prototype;
;
dart.setLibraryUri(_js_helper.JSName, "dart:_js_helper");
;
const _is_JavaScriptIndexingBehavior_default = Symbol('_is_JavaScriptIndexingBehavior_default');
_js_helper.JavaScriptIndexingBehavior$ = dart.generic(E => {
  class JavaScriptIndexingBehavior extends core.Object {}
  (JavaScriptIndexingBehavior.new = function() {
    ;
  }).prototype = JavaScriptIndexingBehavior.prototype;
  ;
  JavaScriptIndexingBehavior.prototype[_is_JavaScriptIndexingBehavior_default] = true;
  dart.setLibraryUri(JavaScriptIndexingBehavior, "dart:_js_helper");
  return JavaScriptIndexingBehavior;
});
_js_helper.JavaScriptIndexingBehavior = _js_helper.JavaScriptIndexingBehavior$();
;
const message$ = dart.privateName(_js_helper, "TypeErrorImpl.message");
_js_helper.TypeErrorImpl = class TypeErrorImpl extends core.Error {
  get message() {
    return this[message$];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return this.message;
  }
};
(_js_helper.TypeErrorImpl.new = function(message) {
  this[message$] = message;
  _js_helper.TypeErrorImpl.__proto__.new.call(this);
  ;
}).prototype = _js_helper.TypeErrorImpl.prototype;
;
_js_helper.TypeErrorImpl[dart.implements] = () => [core.TypeError];
dart.setLibraryUri(_js_helper.TypeErrorImpl, "dart:_js_helper");
;
dart.defineExtensionMethods(_js_helper.TypeErrorImpl, ['toString']);
const message$0 = dart.privateName(_js_helper, "CastErrorImpl.message");
_js_helper.CastErrorImpl = class CastErrorImpl extends core.Error {
  get message() {
    return this[message$0];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return this.message;
  }
};
(_js_helper.CastErrorImpl.new = function(message) {
  this[message$0] = message;
  _js_helper.CastErrorImpl.__proto__.new.call(this);
  ;
}).prototype = _js_helper.CastErrorImpl.prototype;
;
_js_helper.CastErrorImpl[dart.implements] = () => [core.CastError];
dart.setLibraryUri(_js_helper.CastErrorImpl, "dart:_js_helper");
;
dart.defineExtensionMethods(_js_helper.CastErrorImpl, ['toString']);
core.FallThroughError = class FallThroughError extends core.Error {
  toString() {
    return super[$toString]();
  }
};
(core.FallThroughError.new = function() {
  core.FallThroughError.__proto__.new.call(this);
  ;
}).prototype = core.FallThroughError.prototype;
(core.FallThroughError._create = function(url, line) {
  core.FallThroughError.__proto__.new.call(this);
  ;
}).prototype = core.FallThroughError.prototype;
;
dart.setLibraryUri(core.FallThroughError, "dart:core");
dart.defineExtensionMethods(core.FallThroughError, ['toString']);
_js_helper.FallThroughErrorImplementation = class FallThroughErrorImplementation extends core.FallThroughError {
  toString() {
    return "Switch case fall-through.";
  }
};
(_js_helper.FallThroughErrorImplementation.new = function() {
  _js_helper.FallThroughErrorImplementation.__proto__.new.call(this);
  ;
}).prototype = _js_helper.FallThroughErrorImplementation.prototype;
;
dart.setLibraryUri(_js_helper.FallThroughErrorImplementation, "dart:_js_helper");
dart.defineExtensionMethods(_js_helper.FallThroughErrorImplementation, ['toString']);
const message$1 = dart.privateName(_js_helper, "RuntimeError.message");
_js_helper.RuntimeError = class RuntimeError extends core.Error {
  get message() {
    return this[message$1];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return "RuntimeError: " + dart.str(this.message);
  }
};
(_js_helper.RuntimeError.new = function(message) {
  this[message$1] = message;
  _js_helper.RuntimeError.__proto__.new.call(this);
  ;
}).prototype = _js_helper.RuntimeError.prototype;
;
dart.setLibraryUri(_js_helper.RuntimeError, "dart:_js_helper");
;
dart.defineExtensionMethods(_js_helper.RuntimeError, ['toString']);
const _fileUri$ = dart.privateName(_js_helper, "_fileUri");
const _line$ = dart.privateName(_js_helper, "_line");
const _column$ = dart.privateName(_js_helper, "_column");
const _conditionSource$ = dart.privateName(_js_helper, "_conditionSource");
const message$2 = dart.privateName(core, "AssertionError.message");
core.AssertionError = class AssertionError extends core.Error {
  get message() {
    return this[message$2];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return "Assertion failed";
  }
};
(core.AssertionError.new = function(message) {
  if (message === void 0) message = null;
  this[message$2] = message;
  core.AssertionError.__proto__.new.call(this);
  ;
}).prototype = core.AssertionError.prototype;
;
dart.setLibraryUri(core.AssertionError, "dart:core");
;
dart.defineExtensionMethods(core.AssertionError, ['toString']);
_js_helper.AssertionErrorImpl = class AssertionErrorImpl extends core.AssertionError {
  toString() {
    let failureMessage = "";
    if (this[_fileUri$] != null && this[_line$] != null && this[_column$] != null && this[_conditionSource$] != null) {
      failureMessage = failureMessage + (dart.str(this[_fileUri$]) + ":" + dart.str(this[_line$]) + ":" + dart.str(this[_column$]) + "\n" + dart.str(this[_conditionSource$]) + "\n");
    }
    failureMessage = failureMessage + dart.notNull(this.message != null ? core.Error.safeToString(this.message) : "is not true");
    return "Assertion failed: " + failureMessage;
  }
};
(_js_helper.AssertionErrorImpl.new = function(message, _fileUri, _line, _column, _conditionSource) {
  if (_fileUri === void 0) _fileUri = null;
  if (_line === void 0) _line = null;
  if (_column === void 0) _column = null;
  if (_conditionSource === void 0) _conditionSource = null;
  this[_fileUri$] = _fileUri;
  this[_line$] = _line;
  this[_column$] = _column;
  this[_conditionSource$] = _conditionSource;
  _js_helper.AssertionErrorImpl.__proto__.new.call(this, message);
  ;
}).prototype = _js_helper.AssertionErrorImpl.prototype;
;
dart.setLibraryUri(_js_helper.AssertionErrorImpl, "dart:_js_helper");
;
dart.defineExtensionMethods(_js_helper.AssertionErrorImpl, ['toString']);
_js_helper.BooleanConversionAssertionError = class BooleanConversionAssertionError extends core.AssertionError {
  toString() {
    return "Failed assertion: boolean expression must not be null";
  }
};
(_js_helper.BooleanConversionAssertionError.new = function() {
  _js_helper.BooleanConversionAssertionError.__proto__.new.call(this);
  ;
}).prototype = _js_helper.BooleanConversionAssertionError.prototype;
;
dart.setLibraryUri(_js_helper.BooleanConversionAssertionError, "dart:_js_helper");
dart.defineExtensionMethods(_js_helper.BooleanConversionAssertionError, ['toString']);
const _name$0 = dart.privateName(_js_helper, "_name");
const _nativeSymbol = dart.privateName(_js_helper, "_nativeSymbol");
const _name$1 = dart.privateName(_js_helper, "PrivateSymbol._name");
const _nativeSymbol$ = dart.privateName(_js_helper, "PrivateSymbol._nativeSymbol");
_js_helper.PrivateSymbol = class PrivateSymbol extends core.Object {
  get [_name$0]() {
    return this[_name$1];
  }
  set [_name$0](value) {
    super[_name$0] = value;
  }
  get [_nativeSymbol]() {
    return this[_nativeSymbol$];
  }
  set [_nativeSymbol](value) {
    super[_nativeSymbol] = value;
  }
  static getName(symbol) {
    return _js_helper.PrivateSymbol.as(symbol)[_name$0];
  }
  static getNativeSymbol(symbol) {
    if (_js_helper.PrivateSymbol.is(symbol)) return symbol[_nativeSymbol];
    return null;
  }
  _equals(other) {
    return _js_helper.PrivateSymbol.is(other) && this[_name$0] == other[_name$0] && core.identical(this[_nativeSymbol], other[_nativeSymbol]);
  }
  get hashCode() {
    return dart.hashCode(this[_name$0]);
  }
  toString() {
    return "Symbol(\"" + dart.str(this[_name$0]) + "\")";
  }
};
(_js_helper.PrivateSymbol.new = function(_name, _nativeSymbol) {
  this[_name$1] = _name;
  this[_nativeSymbol$] = _nativeSymbol;
  ;
}).prototype = _js_helper.PrivateSymbol.prototype;
;
_js_helper.PrivateSymbol[dart.implements] = () => [core.Symbol];
dart.setLibraryUri(_js_helper.PrivateSymbol, "dart:_js_helper");
;
dart.defineExtensionMethods(_js_helper.PrivateSymbol, ['_equals', 'toString']);
dart.defineExtensionAccessors(_js_helper.PrivateSymbol, ['hashCode']);
_js_helper.ForceInline = class ForceInline extends core.Object {};
(_js_helper.ForceInline.new = function() {
  ;
}).prototype = _js_helper.ForceInline.prototype;
;
dart.setLibraryUri(_js_helper.ForceInline, "dart:_js_helper");
_js_helper._NotNull = class _NotNull extends core.Object {};
(_js_helper._NotNull.new = function() {
  ;
}).prototype = _js_helper._NotNull.prototype;
;
dart.setLibraryUri(_js_helper._NotNull, "dart:_js_helper");
_js_helper.NoReifyGeneric = class NoReifyGeneric extends core.Object {};
(_js_helper.NoReifyGeneric.new = function() {
  ;
}).prototype = _js_helper.NoReifyGeneric.prototype;
;
dart.setLibraryUri(_js_helper.NoReifyGeneric, "dart:_js_helper");
const value$1 = dart.privateName(_js_helper, "ReifyFunctionTypes.value");
_js_helper.ReifyFunctionTypes = class ReifyFunctionTypes extends core.Object {
  get value() {
    return this[value$1];
  }
  set value(value) {
    super.value = value;
  }
};
(_js_helper.ReifyFunctionTypes.new = function(value) {
  this[value$1] = value;
  ;
}).prototype = _js_helper.ReifyFunctionTypes.prototype;
;
dart.setLibraryUri(_js_helper.ReifyFunctionTypes, "dart:_js_helper");
;
_js_helper._NullCheck = class _NullCheck extends core.Object {};
(_js_helper._NullCheck.new = function() {
  ;
}).prototype = _js_helper._NullCheck.prototype;
;
dart.setLibraryUri(_js_helper._NullCheck, "dart:_js_helper");
_js_helper._Undefined = class _Undefined extends core.Object {};
(_js_helper._Undefined.new = function() {
  ;
}).prototype = _js_helper._Undefined.prototype;
;
dart.setLibraryUri(_js_helper._Undefined, "dart:_js_helper");
_js_helper.NoThrows = class NoThrows extends core.Object {};
(_js_helper.NoThrows.new = function() {
  ;
}).prototype = _js_helper.NoThrows.prototype;
;
dart.setLibraryUri(_js_helper.NoThrows, "dart:_js_helper");
_js_helper.NoInline = class NoInline extends core.Object {};
(_js_helper.NoInline.new = function() {
  ;
}).prototype = _js_helper.NoInline.prototype;
;
dart.setLibraryUri(_js_helper.NoInline, "dart:_js_helper");
const name$7 = dart.privateName(_js_helper, "Native.name");
_js_helper.Native = class Native extends core.Object {
  get name() {
    return this[name$7];
  }
  set name(value) {
    super.name = value;
  }
};
(_js_helper.Native.new = function(name) {
  this[name$7] = name;
  ;
}).prototype = _js_helper.Native.prototype;
;
dart.setLibraryUri(_js_helper.Native, "dart:_js_helper");
;
const name$8 = dart.privateName(_js_helper, "JsPeerInterface.name");
_js_helper.JsPeerInterface = class JsPeerInterface extends core.Object {
  get name() {
    return this[name$8];
  }
  set name(value) {
    super.name = value;
  }
};
(_js_helper.JsPeerInterface.new = function(opts) {
  let name = opts && 'name' in opts ? opts.name : null;
  this[name$8] = name;
  ;
}).prototype = _js_helper.JsPeerInterface.prototype;
;
dart.setLibraryUri(_js_helper.JsPeerInterface, "dart:_js_helper");
;
_js_helper.SupportJsExtensionMethods = class SupportJsExtensionMethods extends core.Object {};
(_js_helper.SupportJsExtensionMethods.new = function() {
  ;
}).prototype = _js_helper.SupportJsExtensionMethods.prototype;
;
dart.setLibraryUri(_js_helper.SupportJsExtensionMethods, "dart:_js_helper");
const _modifications = dart.privateName(_js_helper, "_modifications");
const _map$ = dart.privateName(_js_helper, "_map");
const _is_InternalMap_default = Symbol('_is_InternalMap_default');
_js_helper.InternalMap$ = dart.generic((K, V) => {
  class InternalMap extends collection.MapBase$(K, V) {
    forEach(action) {
      let modifications = this[_modifications];
      for (let entry of this[_map$].entries()) {
        action(entry[0], entry[1]);
        if (modifications !== this[_modifications]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
    }
  }
  (InternalMap.new = function() {
    ;
  }).prototype = InternalMap.prototype;
  ;
  InternalMap.prototype[_is_InternalMap_default] = true;
  InternalMap[dart.implements] = () => [collection.LinkedHashMap$(K, V), collection.HashMap$(K, V)];
  dart.setLibraryUri(InternalMap, "dart:_js_helper");
  dart.defineExtensionMethods(InternalMap, ['forEach']);
  return InternalMap;
});
_js_helper.InternalMap = _js_helper.InternalMap$();
;
const _keyMap = dart.privateName(_js_helper, "_keyMap");
const _is_LinkedMap_default = Symbol('_is_LinkedMap_default');
const _map = dart.privateName(_js_helper, "LinkedMap._map");
const _modifications$ = dart.privateName(_js_helper, "LinkedMap._modifications");
_js_helper.LinkedMap$ = dart.generic((K, V) => {
  let _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
  let MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  let KAndVToNull = () => (KAndVToNull = dart.constFn(dart.fnType(core.Null, [K, V])))();
  let _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  class LinkedMap extends _js_helper.InternalMap$(K, V) {
    get [_map$]() {
      return this[_map];
    }
    set [_map$](value) {
      super[_map$] = value;
    }
    get [_modifications]() {
      return this[_modifications$];
    }
    set [_modifications](value) {
      this[_modifications$] = value;
    }
    get length() {
      return this[_map$].size;
    }
    get isEmpty() {
      return this[_map$].size == 0;
    }
    get isNotEmpty() {
      return this[_map$].size != 0;
    }
    get keys() {
      return new (_JSMapIterableOfK()).new(this, true);
    }
    get values() {
      return new (_JSMapIterableOfV()).new(this, false);
    }
    containsKey(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let buckets = this[_keyMap].get(dart.hashCode(k) & 0x3ffffff);
        if (buckets != null) {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return true;
          }
        }
        return false;
      }
      return this[_map$].has(key);
    }
    containsValue(value) {
      for (let v of this[_map$].values()) {
        if (dart.equals(v, value)) return true;
      }
      return false;
    }
    addAll(other) {
      MapOfK$V()._check(other);
      let map = this[_map$];
      let length = map.size;
      other[$forEach](dart.fn((key, value) => {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          key = _js_helper.putLinkedMapKey(key, this[_keyMap]);
        }
        this[_map$].set(key, value);
      }, KAndVToNull()));
      if (length !== map.size) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
    _get(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let buckets = this[_keyMap].get(dart.hashCode(k) & 0x3ffffff);
        if (buckets != null) {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return this[_map$].get(k);
          }
        }
        return null;
      }
      let value = this[_map$].get(key);
      return value == null ? null : value;
    }
    _set(key, value$) {
      let value = value$;
      K._check(key);
      V._check(value);
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        key = _js_helper.putLinkedMapKey(key, this[_keyMap]);
      }
      let map = this[_map$];
      let length = map.size;
      map.set(key, value);
      if (length !== map.size) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K._check(key);
      VoidToV()._check(ifAbsent);
      let map = this[_map$];
      if (key == null) {
        key = null;
        if (map.has(null)) return map.get(null);
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let hash = dart.hashCode(k) & 0x3ffffff;
        let buckets = this[_keyMap].get(hash);
        if (buckets == null) {
          this[_keyMap].set(hash, [key]);
        } else {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return map.get(k);
          }
          buckets.push(key);
        }
      } else if (map.has(key)) {
        return map.get(key);
      }
      let value = ifAbsent();
      if (value == null) value = null;
      map.set(key, value);
      this[_modifications] = this[_modifications] + 1 & 67108863;
      return value;
    }
    remove(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let hash = dart.hashCode(k) & 0x3ffffff;
        let buckets = this[_keyMap].get(hash);
        if (buckets == null) return null;
        for (let i = 0, n = buckets.length;;) {
          k = buckets[i];
          if (dart.equals(k, key)) {
            key = k;
            if (n === 1) {
              this[_keyMap].delete(hash);
            } else {
              buckets.splice(i, 1);
            }
            break;
          }
          if ((i = i + 1) >= n) return null;
        }
      }
      let map = this[_map$];
      let value = map.get(key);
      if (map.delete(key)) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
      return value == null ? null : value;
    }
    clear() {
      let map = this[_map$];
      if (map.size > 0) {
        map.clear();
        this[_keyMap].clear();
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
  }
  (LinkedMap.new = function() {
    this[_map] = new Map();
    this[_keyMap] = new Map();
    this[_modifications$] = 0;
    ;
  }).prototype = LinkedMap.prototype;
  (LinkedMap.from = function(entries) {
    this[_map] = new Map();
    this[_keyMap] = new Map();
    this[_modifications$] = 0;
    let map = this[_map$];
    let keyMap = this[_keyMap];
    for (let i = 0, n = entries.length; i < n; i = i + 2) {
      let key = entries[i];
      let value = entries[i + 1];
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        key = _js_helper.putLinkedMapKey(key, keyMap);
      }
      map.set(key, value);
    }
  }).prototype = LinkedMap.prototype;
  ;
  LinkedMap.prototype[_is_LinkedMap_default] = true;
  ;
  dart.setGetterSignature(LinkedMap, () => ({
    __proto__: dart.getGetters(LinkedMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(LinkedMap, "dart:_js_helper");
  ;
  dart.defineExtensionMethods(LinkedMap, [
    'containsKey',
    'containsValue',
    'addAll',
    '_get',
    '_set',
    'putIfAbsent',
    'remove',
    'clear'
  ]);
  dart.defineExtensionAccessors(LinkedMap, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'keys',
    'values'
  ]);
  return LinkedMap;
});
_js_helper.LinkedMap = _js_helper.LinkedMap$();
;
const _is_ImmutableMap_default = Symbol('_is_ImmutableMap_default');
_js_helper.ImmutableMap$ = dart.generic((K, V) => {
  class ImmutableMap extends _js_helper.LinkedMap$(K, V) {
    _set(key, value$) {
      let value = value$;
      dart.throw(_js_helper.ImmutableMap._unsupported());
      return value$;
    }
    addAll(other) {
      return dart.throw(_js_helper.ImmutableMap._unsupported());
    }
    clear() {
      return dart.throw(_js_helper.ImmutableMap._unsupported());
    }
    remove(key) {
      return dart.throw(_js_helper.ImmutableMap._unsupported());
    }
    putIfAbsent(key, ifAbsent) {
      VoidToObject()._check(ifAbsent);
      return dart.throw(_js_helper.ImmutableMap._unsupported());
    }
    static _unsupported() {
      return new core.UnsupportedError.new("Cannot modify unmodifiable map");
    }
  }
  (ImmutableMap.from = function(entries) {
    ImmutableMap.__proto__.from.call(this, entries);
    ;
  }).prototype = ImmutableMap.prototype;
  ;
  ImmutableMap.prototype[_is_ImmutableMap_default] = true;
  dart.setLibraryUri(ImmutableMap, "dart:_js_helper");
  dart.defineExtensionMethods(ImmutableMap, [
    '_set',
    'addAll',
    'clear',
    'remove',
    'putIfAbsent'
  ]);
  return ImmutableMap;
});
_js_helper.ImmutableMap = _js_helper.ImmutableMap$();
;
const _is_IdentityMap_default = Symbol('_is_IdentityMap_default');
const _map$0 = dart.privateName(_js_helper, "IdentityMap._map");
const _modifications$0 = dart.privateName(_js_helper, "IdentityMap._modifications");
_js_helper.IdentityMap$ = dart.generic((K, V) => {
  let _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
  let MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  let KAndVToNull = () => (KAndVToNull = dart.constFn(dart.fnType(core.Null, [K, V])))();
  let _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  class IdentityMap extends _js_helper.InternalMap$(K, V) {
    get [_map$]() {
      return this[_map$0];
    }
    set [_map$](value) {
      super[_map$] = value;
    }
    get [_modifications]() {
      return this[_modifications$0];
    }
    set [_modifications](value) {
      this[_modifications$0] = value;
    }
    get length() {
      return this[_map$].size;
    }
    get isEmpty() {
      return this[_map$].size == 0;
    }
    get isNotEmpty() {
      return this[_map$].size != 0;
    }
    get keys() {
      return new (_JSMapIterableOfK()).new(this, true);
    }
    get values() {
      return new (_JSMapIterableOfV()).new(this, false);
    }
    containsKey(key) {
      return this[_map$].has(key);
    }
    containsValue(value) {
      for (let v of this[_map$].values()) {
        if (dart.equals(v, value)) return true;
      }
      return false;
    }
    addAll(other) {
      MapOfK$V()._check(other);
      if (dart.test(other[$isNotEmpty])) {
        let map = this[_map$];
        other[$forEach](dart.fn((key, value) => {
          map.set(key, value);
        }, KAndVToNull()));
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
    _get(key) {
      let value = this[_map$].get(key);
      return value == null ? null : value;
    }
    _set(key, value$) {
      let value = value$;
      K._check(key);
      V._check(value);
      let map = this[_map$];
      let length = map.size;
      map.set(key, value);
      if (length !== map.size) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K._check(key);
      VoidToV()._check(ifAbsent);
      if (this[_map$].has(key)) {
        return this[_map$].get(key);
      }
      let value = ifAbsent();
      if (value == null) value = null;
      this[_map$].set(key, value);
      this[_modifications] = this[_modifications] + 1 & 67108863;
      return value;
    }
    remove(key) {
      let value = this[_map$].get(key);
      if (this[_map$].delete(key)) {
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
      return value == null ? null : value;
    }
    clear() {
      if (this[_map$].size > 0) {
        this[_map$].clear();
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
  }
  (IdentityMap.new = function() {
    this[_map$0] = new Map();
    this[_modifications$0] = 0;
    ;
  }).prototype = IdentityMap.prototype;
  (IdentityMap.from = function(entries) {
    this[_map$0] = new Map();
    this[_modifications$0] = 0;
    let map = this[_map$];
    for (let i = 0, n = entries.length; i < n; i = i + 2) {
      map.set(entries[i], entries[i + 1]);
    }
  }).prototype = IdentityMap.prototype;
  ;
  IdentityMap.prototype[_is_IdentityMap_default] = true;
  ;
  dart.setGetterSignature(IdentityMap, () => ({
    __proto__: dart.getGetters(IdentityMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(IdentityMap, "dart:_js_helper");
  ;
  dart.defineExtensionMethods(IdentityMap, [
    'containsKey',
    'containsValue',
    'addAll',
    '_get',
    '_set',
    'putIfAbsent',
    'remove',
    'clear'
  ]);
  dart.defineExtensionAccessors(IdentityMap, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'keys',
    'values'
  ]);
  return IdentityMap;
});
_js_helper.IdentityMap = _js_helper.IdentityMap$();
;
const _isKeys$ = dart.privateName(_js_helper, "_isKeys");
const _is__JSMapIterable_default = Symbol('_is__JSMapIterable_default');
_js_helper._JSMapIterable$ = dart.generic(E => {
  let DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
  class _JSMapIterable extends _internal.EfficientLengthIterable$(E) {
    get length() {
      return this[_map$].length;
    }
    get isEmpty() {
      return this[_map$].isEmpty;
    }
    [Symbol.iterator]() {
      let map = this[_map$];
      let iterator = this[_isKeys$] ? map[_map$].keys() : map[_map$].values();
      let modifications = map[_modifications];
      return {
        next() {
          if (modifications != map[_modifications]) {
            throw new core.ConcurrentModificationError.new(map);
          }
          return iterator.next();
        }
      };
    }
    get iterator() {
      return new (DartIteratorOfE()).new(this[Symbol.iterator]());
    }
    contains(element) {
      return this[_isKeys$] ? this[_map$].containsKey(element) : this[_map$].containsValue(element);
    }
    forEach(f) {
      for (let entry of this)
        f(entry);
    }
  }
  (_JSMapIterable.new = function(_map, _isKeys) {
    this[_map$] = _map;
    this[_isKeys$] = _isKeys;
    _JSMapIterable.__proto__.new.call(this);
    ;
  }).prototype = _JSMapIterable.prototype;
  ;
  _JSMapIterable.prototype[_is__JSMapIterable_default] = true;
  ;
  dart.setGetterSignature(_JSMapIterable, () => ({
    __proto__: dart.getGetters(_JSMapIterable.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(_JSMapIterable, "dart:_js_helper");
  ;
  dart.defineExtensionMethods(_JSMapIterable, ['contains', 'forEach']);
  dart.defineExtensionAccessors(_JSMapIterable, ['length', 'isEmpty', 'iterator']);
  return _JSMapIterable;
});
_js_helper._JSMapIterable = _js_helper._JSMapIterable$();
;
const _validKey$ = dart.privateName(_js_helper, "_validKey");
const _equals$ = dart.privateName(_js_helper, "_equals");
const _hashCode$ = dart.privateName(_js_helper, "_hashCode");
const _is_CustomHashMap_default = Symbol('_is_CustomHashMap_default');
const _map$1 = dart.privateName(_js_helper, "CustomHashMap._map");
const _modifications$1 = dart.privateName(_js_helper, "CustomHashMap._modifications");
_js_helper.CustomHashMap$ = dart.generic((K, V) => {
  let _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
  let MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  let KAndVToNull = () => (KAndVToNull = dart.constFn(dart.fnType(core.Null, [K, V])))();
  let _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  class CustomHashMap extends _js_helper.InternalMap$(K, V) {
    get [_map$]() {
      return this[_map$1];
    }
    set [_map$](value) {
      super[_map$] = value;
    }
    get [_modifications]() {
      return this[_modifications$1];
    }
    set [_modifications](value) {
      this[_modifications$1] = value;
    }
    get length() {
      return this[_map$].size;
    }
    get isEmpty() {
      return this[_map$].size == 0;
    }
    get isNotEmpty() {
      return this[_map$].size != 0;
    }
    get keys() {
      return new (_JSMapIterableOfK()).new(this, true);
    }
    get values() {
      return new (_JSMapIterableOfV()).new(this, false);
    }
    containsKey(key) {
      if (K.is(key)) {
        let buckets = this[_keyMap].get(this[_hashCode$](key) & 0x3ffffff);
        if (buckets != null) {
          let equals = this[_equals$];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) return true;
          }
        }
      }
      return false;
    }
    containsValue(value) {
      for (let v of this[_map$].values()) {
        if (dart.equals(value, v)) return true;
      }
      return false;
    }
    addAll(other) {
      MapOfK$V()._check(other);
      other[$forEach](dart.fn((key, value) => {
        this._set(key, value);
      }, KAndVToNull()));
    }
    _get(key) {
      if (K.is(key)) {
        let buckets = this[_keyMap].get(this[_hashCode$](key) & 0x3ffffff);
        if (buckets != null) {
          let equals = this[_equals$];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) {
              let value = this[_map$].get(k);
              return value == null ? null : value;
            }
          }
        }
      }
      return null;
    }
    _set(key, value$) {
      let value = value$;
      K._check(key);
      V._check(value);
      let keyMap = this[_keyMap];
      let hash = this[_hashCode$](key) & 0x3ffffff;
      let buckets = keyMap.get(hash);
      if (buckets == null) {
        keyMap.set(hash, [key]);
      } else {
        let equals = this[_equals$];
        for (let i = 0, n = buckets.length;;) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) {
            key = k;
            break;
          }
          if ((i = i + 1) >= n) {
            buckets.push(key);
            break;
          }
        }
      }
      this[_map$].set(key, value);
      this[_modifications] = this[_modifications] + 1 & 67108863;
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K._check(key);
      VoidToV()._check(ifAbsent);
      let keyMap = this[_keyMap];
      let hash = this[_hashCode$](key) & 0x3ffffff;
      let buckets = keyMap.get(hash);
      if (buckets == null) {
        keyMap.set(hash, [key]);
      } else {
        let equals = this[_equals$];
        for (let i = 0, n = buckets.length; i < n; i = i + 1) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) return this[_map$].get(k);
        }
        buckets.push(key);
      }
      let value = ifAbsent();
      if (value == null) value = null;
      this[_map$].set(key, value);
      this[_modifications] = this[_modifications] + 1 & 67108863;
      return value;
    }
    remove(key) {
      if (K.is(key)) {
        let hash = this[_hashCode$](key) & 0x3ffffff;
        let keyMap = this[_keyMap];
        let buckets = keyMap.get(hash);
        if (buckets == null) return null;
        let equals = this[_equals$];
        for (let i = 0, n = buckets.length; i < n; i = i + 1) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) {
            if (n === 1) {
              keyMap.delete(hash);
            } else {
              buckets.splice(i, 1);
            }
            let map = this[_map$];
            let value = map.get(k);
            map.delete(k);
            this[_modifications] = this[_modifications] + 1 & 67108863;
            return value == null ? null : value;
          }
        }
      }
      return null;
    }
    clear() {
      let map = this[_map$];
      if (map.size > 0) {
        map.clear();
        this[_keyMap].clear();
        this[_modifications] = this[_modifications] + 1 & 67108863;
      }
    }
  }
  (CustomHashMap.new = function(_equals, _hashCode) {
    this[_map$1] = new Map();
    this[_keyMap] = new Map();
    this[_modifications$1] = 0;
    this[_equals$] = _equals;
    this[_hashCode$] = _hashCode;
    ;
  }).prototype = CustomHashMap.prototype;
  ;
  CustomHashMap.prototype[_is_CustomHashMap_default] = true;
  ;
  dart.setGetterSignature(CustomHashMap, () => ({
    __proto__: dart.getGetters(CustomHashMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(CustomHashMap, "dart:_js_helper");
  ;
  dart.defineExtensionMethods(CustomHashMap, [
    'containsKey',
    'containsValue',
    'addAll',
    '_get',
    '_set',
    'putIfAbsent',
    'remove',
    'clear'
  ]);
  dart.defineExtensionAccessors(CustomHashMap, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'keys',
    'values'
  ]);
  return CustomHashMap;
});
_js_helper.CustomHashMap = _js_helper.CustomHashMap$();
;
const _is_CustomKeyHashMap_default = Symbol('_is_CustomKeyHashMap_default');
_js_helper.CustomKeyHashMap$ = dart.generic((K, V) => {
  class CustomKeyHashMap extends _js_helper.CustomHashMap$(K, V) {
    containsKey(key) {
      if (!dart.test(this[_validKey$](key))) return false;
      return super.containsKey(key);
    }
    _get(key) {
      if (!dart.test(this[_validKey$](key))) return null;
      return super._get(key);
    }
    remove(key) {
      if (!dart.test(this[_validKey$](key))) return null;
      return super.remove(key);
    }
  }
  (CustomKeyHashMap.new = function(equals, hashCode, _validKey) {
    this[_validKey$] = _validKey;
    CustomKeyHashMap.__proto__.new.call(this, equals, hashCode);
    ;
  }).prototype = CustomKeyHashMap.prototype;
  ;
  CustomKeyHashMap.prototype[_is_CustomKeyHashMap_default] = true;
  dart.setLibraryUri(CustomKeyHashMap, "dart:_js_helper");
  ;
  dart.defineExtensionMethods(CustomKeyHashMap, ['containsKey', '_get', 'remove']);
  return CustomKeyHashMap;
});
_js_helper.CustomKeyHashMap = _js_helper.CustomKeyHashMap$();
;
const _nativeGlobalRegExp = dart.privateName(_js_helper, "_nativeGlobalRegExp");
const _nativeAnchoredRegExp = dart.privateName(_js_helper, "_nativeAnchoredRegExp");
const _nativeRegExp = dart.privateName(_js_helper, "_nativeRegExp");
const _isMultiLine = dart.privateName(_js_helper, "_isMultiLine");
const _isCaseSensitive = dart.privateName(_js_helper, "_isCaseSensitive");
const _isUnicode = dart.privateName(_js_helper, "_isUnicode");
const _isDotAll = dart.privateName(_js_helper, "_isDotAll");
const _nativeGlobalVersion = dart.privateName(_js_helper, "_nativeGlobalVersion");
const _nativeAnchoredVersion = dart.privateName(_js_helper, "_nativeAnchoredVersion");
const _execGlobal = dart.privateName(_js_helper, "_execGlobal");
const _execAnchored = dart.privateName(_js_helper, "_execAnchored");
const pattern = dart.privateName(_js_helper, "JSSyntaxRegExp.pattern");
_js_helper.JSSyntaxRegExp = class JSSyntaxRegExp extends core.Object {
  get pattern() {
    return this[pattern];
  }
  set pattern(value) {
    super.pattern = value;
  }
  toString() {
    return "RegExp/" + dart.str(this.pattern) + "/" + this[_nativeRegExp].flags;
  }
  get [_nativeGlobalVersion]() {
    if (this[_nativeGlobalRegExp] != null) return this[_nativeGlobalRegExp];
    return this[_nativeGlobalRegExp] = _js_helper.JSSyntaxRegExp.makeNative(this.pattern, this[_isMultiLine], this[_isCaseSensitive], this[_isUnicode], this[_isDotAll], true);
  }
  get [_nativeAnchoredVersion]() {
    if (this[_nativeAnchoredRegExp] != null) return this[_nativeAnchoredRegExp];
    return this[_nativeAnchoredRegExp] = _js_helper.JSSyntaxRegExp.makeNative(dart.str(this.pattern) + "|()", this[_isMultiLine], this[_isCaseSensitive], this[_isUnicode], this[_isDotAll], true);
  }
  get [_isMultiLine]() {
    return this[_nativeRegExp].multiline;
  }
  get [_isCaseSensitive]() {
    return !this[_nativeRegExp].ignoreCase;
  }
  get [_isUnicode]() {
    return this[_nativeRegExp].unicode;
  }
  get [_isDotAll]() {
    return this[_nativeRegExp].dotAll == true;
  }
  static makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
    if (source == null) dart.argumentError(source);
    let m = dart.test(multiLine) ? "m" : "";
    let i = dart.test(caseSensitive) ? "" : "i";
    let u = dart.test(unicode) ? "u" : "";
    let s = dart.test(dotAll) ? "s" : "";
    let g = dart.test(global) ? "g" : "";
    let regexp = (function() {
      try {
        return new RegExp(source, m + i + u + s + g);
      } catch (e) {
        return e;
      }
    })();
    if (regexp instanceof RegExp) return regexp;
    let errorMessage = String(regexp);
    dart.throw(new core.FormatException.new("Illegal RegExp pattern: " + source + ", " + errorMessage));
  }
  firstMatch(string) {
    if (string == null) dart.argumentError(string);
    let m = this[_nativeRegExp].exec(string);
    if (m == null) return null;
    return new _js_helper._MatchImplementation.new(this, JSArrayOfString().of(m));
  }
  hasMatch(string) {
    if (string == null) dart.argumentError(string);
    return this[_nativeRegExp].test(string);
  }
  stringMatch(string) {
    let match = this.firstMatch(string);
    if (match != null) return match.group(0);
    return null;
  }
  allMatches(string, start) {
    if (string == null) dart.argumentError(string);
    if (start === void 0) start = 0;
    if (start == null) dart.argumentError(start);
    if (start < 0 || start > string.length) {
      dart.throw(new core.RangeError.range(start, 0, string.length));
    }
    return new _js_helper._AllMatchesIterable.new(this, string, start);
  }
  [_execGlobal](string, start) {
    let regexp = this[_nativeGlobalVersion];
    regexp.lastIndex = start;
    let match = regexp.exec(string);
    if (match == null) return null;
    return new _js_helper._MatchImplementation.new(this, JSArrayOfString().of(match));
  }
  [_execAnchored](string, start) {
    let t27;
    let regexp = this[_nativeAnchoredVersion];
    regexp.lastIndex = start;
    let match = regexp.exec(string);
    if (match == null) return null;
    if (match[$_get](dart.notNull(match[$length]) - 1) != null) return null;
    t27 = match;
    t27[$length] = dart.notNull(t27[$length]) - 1;
    return new _js_helper._MatchImplementation.new(this, JSArrayOfString().of(match));
  }
  matchAsPrefix(string, start) {
    if (start === void 0) start = 0;
    if (dart.notNull(start) < 0 || dart.notNull(start) > string.length) {
      dart.throw(new core.RangeError.range(start, 0, string.length));
    }
    return this[_execAnchored](string, start);
  }
  get isMultiLine() {
    return this[_isMultiLine];
  }
  get isCaseSensitive() {
    return this[_isCaseSensitive];
  }
  get isUnicode() {
    return this[_isUnicode];
  }
  get isDotAll() {
    return this[_isDotAll];
  }
};
(_js_helper.JSSyntaxRegExp.new = function(source, opts) {
  let multiLine = opts && 'multiLine' in opts ? opts.multiLine : false;
  let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : true;
  let unicode = opts && 'unicode' in opts ? opts.unicode : false;
  let dotAll = opts && 'dotAll' in opts ? opts.dotAll : false;
  this[_nativeGlobalRegExp] = null;
  this[_nativeAnchoredRegExp] = null;
  this[pattern] = source;
  this[_nativeRegExp] = _js_helper.JSSyntaxRegExp.makeNative(source, multiLine, caseSensitive, unicode, dotAll, false);
  ;
}).prototype = _js_helper.JSSyntaxRegExp.prototype;
;
_js_helper.JSSyntaxRegExp[dart.implements] = () => [core.RegExp];
;
dart.setGetterSignature(_js_helper.JSSyntaxRegExp, () => ({
  __proto__: dart.getGetters(_js_helper.JSSyntaxRegExp.__proto__),
  [_nativeGlobalVersion]: dart.dynamic,
  [_nativeAnchoredVersion]: dart.dynamic,
  [_isMultiLine]: core.bool,
  [_isCaseSensitive]: core.bool,
  [_isUnicode]: core.bool,
  [_isDotAll]: core.bool,
  isMultiLine: core.bool,
  isCaseSensitive: core.bool,
  isUnicode: core.bool,
  isDotAll: core.bool
}));
dart.setLibraryUri(_js_helper.JSSyntaxRegExp, "dart:_js_helper");
;
dart.defineExtensionMethods(_js_helper.JSSyntaxRegExp, ['toString', 'allMatches', 'matchAsPrefix']);
const _match$ = dart.privateName(_js_helper, "_match");
_js_helper._MatchImplementation = class _MatchImplementation extends core.Object {
  get input() {
    return this[_match$].input;
  }
  get start() {
    return this[_match$].index;
  }
  get end() {
    return dart.notNull(this.start) + this[_match$][$_get](0).length;
  }
  group(index) {
    return this[_match$][$_get](index);
  }
  _get(index) {
    return this.group(index);
  }
  get groupCount() {
    return dart.notNull(this[_match$][$length]) - 1;
  }
  groups(groups) {
    let out = JSArrayOfString().of([]);
    for (let i of groups) {
      out[$add](this.group(i));
    }
    return out;
  }
  namedGroup(name) {
    let groups = this[_match$].groups;
    if (groups !== null) {
      let result = groups[name];
      if (result != null || name in groups) {
        return core.String._check(result);
      }
    }
    dart.throw(new core.ArgumentError.value(name, "name", "Not a capture group name"));
  }
  get groupNames() {
    let groups = this[_match$].groups;
    if (groups !== null) {
      let keys = JSArrayOfString().of(Object.keys(groups));
      return new (SubListIterableOfString()).new(keys, 0, null);
    }
    return new (EmptyIterableOfString()).new();
  }
};
(_js_helper._MatchImplementation.new = function(pattern, _match) {
  this.pattern = pattern;
  this[_match$] = _match;
  if (!(typeof this[_match$].input == 'string')) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/regexp_helper.dart", 185, 12, "JS(\"var\", \"#.input\", _match) is String");
  if (!core.int.is(this[_match$].index)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/regexp_helper.dart", 186, 12, "JS(\"var\", \"#.index\", _match) is int");
}).prototype = _js_helper._MatchImplementation.prototype;
;
_js_helper._MatchImplementation[dart.implements] = () => [core.RegExpMatch];
;
dart.setGetterSignature(_js_helper._MatchImplementation, () => ({
  __proto__: dart.getGetters(_js_helper._MatchImplementation.__proto__),
  input: core.String,
  start: core.int,
  end: core.int,
  groupCount: core.int,
  groupNames: core.Iterable$(core.String)
}));
dart.setLibraryUri(_js_helper._MatchImplementation, "dart:_js_helper");
;
const _re$ = dart.privateName(_js_helper, "_re");
const _string$0 = dart.privateName(_js_helper, "_string");
const _start$0 = dart.privateName(_js_helper, "_start");
core.RegExpMatch = class RegExpMatch extends core.Object {};
(core.RegExpMatch.new = function() {
  ;
}).prototype = core.RegExpMatch.prototype;
;
core.RegExpMatch[dart.implements] = () => [core.Match];
dart.setLibraryUri(core.RegExpMatch, "dart:core");
_js_helper._AllMatchesIterable = class _AllMatchesIterable extends collection.IterableBase$(core.RegExpMatch) {
  get iterator() {
    return new _js_helper._AllMatchesIterator.new(this[_re$], this[_string$0], this[_start$0]);
  }
};
(_js_helper._AllMatchesIterable.new = function(_re, _string, _start) {
  this[_re$] = _re;
  this[_string$0] = _string;
  this[_start$0] = _start;
  _js_helper._AllMatchesIterable.__proto__.new.call(this);
  ;
}).prototype = _js_helper._AllMatchesIterable.prototype;
;
dart.setGetterSignature(_js_helper._AllMatchesIterable, () => ({
  __proto__: dart.getGetters(_js_helper._AllMatchesIterable.__proto__),
  iterator: core.Iterator$(core.RegExpMatch),
  [$iterator]: core.Iterator$(core.RegExpMatch)
}));
dart.setLibraryUri(_js_helper._AllMatchesIterable, "dart:_js_helper");
;
dart.defineExtensionAccessors(_js_helper._AllMatchesIterable, ['iterator']);
const _regExp$ = dart.privateName(_js_helper, "_regExp");
const _nextIndex$ = dart.privateName(_js_helper, "_nextIndex");
_js_helper._AllMatchesIterator = class _AllMatchesIterator extends core.Object {
  get current() {
    return this[_current$0];
  }
  static _isLeadSurrogate(c) {
    return dart.notNull(c) >= 55296 && dart.notNull(c) <= 56319;
  }
  static _isTrailSurrogate(c) {
    return dart.notNull(c) >= 56320 && dart.notNull(c) <= 57343;
  }
  moveNext() {
    if (this[_string$0] == null) return false;
    if (dart.notNull(this[_nextIndex$]) <= this[_string$0].length) {
      let match = this[_regExp$][_execGlobal](this[_string$0], this[_nextIndex$]);
      if (match != null) {
        this[_current$0] = match;
        let nextIndex = match.end;
        if (match.start == nextIndex) {
          if (dart.test(this[_regExp$].isUnicode) && dart.notNull(this[_nextIndex$]) + 1 < this[_string$0].length && dart.test(_js_helper._AllMatchesIterator._isLeadSurrogate(this[_string$0][$codeUnitAt](this[_nextIndex$]))) && dart.test(_js_helper._AllMatchesIterator._isTrailSurrogate(this[_string$0][$codeUnitAt](dart.notNull(this[_nextIndex$]) + 1)))) {
            nextIndex = dart.notNull(nextIndex) + 1;
          }
          nextIndex = dart.notNull(nextIndex) + 1;
        }
        this[_nextIndex$] = nextIndex;
        return true;
      }
    }
    this[_current$0] = null;
    this[_string$0] = null;
    return false;
  }
};
(_js_helper._AllMatchesIterator.new = function(_regExp, _string, _nextIndex) {
  this[_current$0] = null;
  this[_regExp$] = _regExp;
  this[_string$0] = _string;
  this[_nextIndex$] = _nextIndex;
  ;
}).prototype = _js_helper._AllMatchesIterator.prototype;
;
_js_helper._AllMatchesIterator[dart.implements] = () => [core.Iterator$(core.RegExpMatch)];
;
dart.setGetterSignature(_js_helper._AllMatchesIterator, () => ({
  __proto__: dart.getGetters(_js_helper._AllMatchesIterator.__proto__),
  current: core.RegExpMatch
}));
dart.setLibraryUri(_js_helper._AllMatchesIterator, "dart:_js_helper");
;
const start$0 = dart.privateName(_js_helper, "StringMatch.start");
const input$ = dart.privateName(_js_helper, "StringMatch.input");
const pattern$ = dart.privateName(_js_helper, "StringMatch.pattern");
_js_helper.StringMatch = class StringMatch extends core.Object {
  get start() {
    return this[start$0];
  }
  set start(value) {
    super.start = value;
  }
  get input() {
    return this[input$];
  }
  set input(value) {
    super.input = value;
  }
  get pattern() {
    return this[pattern$];
  }
  set pattern(value) {
    super.pattern = value;
  }
  get end() {
    return dart.notNull(this.start) + this.pattern.length;
  }
  _get(g) {
    return this.group(g);
  }
  get groupCount() {
    return 0;
  }
  group(group_) {
    if (group_ !== 0) {
      dart.throw(new core.RangeError.value(group_));
    }
    return this.pattern;
  }
  groups(groups_) {
    let result = JSArrayOfString().of([]);
    for (let g of groups_) {
      result[$add](this.group(g));
    }
    return result;
  }
};
(_js_helper.StringMatch.new = function(start, input, pattern) {
  this[start$0] = start;
  this[input$] = input;
  this[pattern$] = pattern;
  ;
}).prototype = _js_helper.StringMatch.prototype;
;
_js_helper.StringMatch[dart.implements] = () => [core.Match];
;
dart.setGetterSignature(_js_helper.StringMatch, () => ({
  __proto__: dart.getGetters(_js_helper.StringMatch.__proto__),
  end: core.int,
  groupCount: core.int
}));
dart.setLibraryUri(_js_helper.StringMatch, "dart:_js_helper");
;
const _input$ = dart.privateName(_js_helper, "_input");
const _pattern$ = dart.privateName(_js_helper, "_pattern");
const _index$0 = dart.privateName(_js_helper, "_index");
core.Match = class Match extends core.Object {};
(core.Match.new = function() {
  ;
}).prototype = core.Match.prototype;
;
dart.setLibraryUri(core.Match, "dart:core");
_js_helper._StringAllMatchesIterable = class _StringAllMatchesIterable extends core.Iterable$(core.Match) {
  get iterator() {
    return new _js_helper._StringAllMatchesIterator.new(this[_input$], this[_pattern$], this[_index$0]);
  }
  get first() {
    let index = _js_helper.stringIndexOfStringUnchecked(this[_input$], this[_pattern$], this[_index$0]);
    if (index >= 0) {
      return new _js_helper.StringMatch.new(index, this[_input$], this[_pattern$]);
    }
    dart.throw(_internal.IterableElementError.noElement());
  }
};
(_js_helper._StringAllMatchesIterable.new = function(_input, _pattern, _index) {
  this[_input$] = _input;
  this[_pattern$] = _pattern;
  this[_index$0] = _index;
  _js_helper._StringAllMatchesIterable.__proto__.new.call(this);
  ;
}).prototype = _js_helper._StringAllMatchesIterable.prototype;
;
dart.setGetterSignature(_js_helper._StringAllMatchesIterable, () => ({
  __proto__: dart.getGetters(_js_helper._StringAllMatchesIterable.__proto__),
  iterator: core.Iterator$(core.Match),
  [$iterator]: core.Iterator$(core.Match)
}));
dart.setLibraryUri(_js_helper._StringAllMatchesIterable, "dart:_js_helper");
;
dart.defineExtensionAccessors(_js_helper._StringAllMatchesIterable, ['iterator', 'first']);
_js_helper._StringAllMatchesIterator = class _StringAllMatchesIterator extends core.Object {
  moveNext() {
    if (dart.notNull(this[_index$0]) + this[_pattern$].length > this[_input$].length) {
      this[_current$0] = null;
      return false;
    }
    let index = _js_helper.stringIndexOfStringUnchecked(this[_input$], this[_pattern$], this[_index$0]);
    if (index < 0) {
      this[_index$0] = this[_input$].length + 1;
      this[_current$0] = null;
      return false;
    }
    let end = index + this[_pattern$].length;
    this[_current$0] = new _js_helper.StringMatch.new(index, this[_input$], this[_pattern$]);
    if (end === this[_index$0]) end = end + 1;
    this[_index$0] = end;
    return true;
  }
  get current() {
    return this[_current$0];
  }
};
(_js_helper._StringAllMatchesIterator.new = function(_input, _pattern, _index) {
  this[_current$0] = null;
  this[_input$] = _input;
  this[_pattern$] = _pattern;
  this[_index$0] = _index;
  ;
}).prototype = _js_helper._StringAllMatchesIterator.prototype;
;
_js_helper._StringAllMatchesIterator[dart.implements] = () => [core.Iterator$(core.Match)];
;
dart.setGetterSignature(_js_helper._StringAllMatchesIterator, () => ({
  __proto__: dart.getGetters(_js_helper._StringAllMatchesIterator.__proto__),
  current: core.Match
}));
dart.setLibraryUri(_js_helper._StringAllMatchesIterator, "dart:_js_helper");
;
let C31;
let C32;
_js_helper.diagnoseIndexError = function diagnoseIndexError(indexable, index) {
  let length = core.int._check(dart.dload(indexable, 'length'));
  if (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(length)) {
    return new core.IndexError.new(index, indexable, "index", null, length);
  }
  return new core.RangeError.value(index, "index");
};
_js_helper.diagnoseRangeError = function diagnoseRangeError(start, end, length) {
  if (start == null) {
    return new core.ArgumentError.value(start, "start");
  }
  if (dart.notNull(start) < 0 || dart.notNull(start) > dart.notNull(length)) {
    return new core.RangeError.range(start, 0, length, "start");
  }
  if (end != null) {
    if (dart.notNull(end) < dart.notNull(start) || dart.notNull(end) > dart.notNull(length)) {
      return new core.RangeError.range(end, start, length, "end");
    }
  }
  return new core.ArgumentError.value(end, "end");
};
_js_helper.stringLastIndexOfUnchecked = function stringLastIndexOfUnchecked(receiver, element, start) {
  return receiver.lastIndexOf(element, start);
};
_js_helper.argumentErrorValue = function argumentErrorValue(object) {
  return new core.ArgumentError.value(object);
};
_js_helper.throwArgumentErrorValue = function throwArgumentErrorValue(value) {
  dart.throw(_js_helper.argumentErrorValue(value));
};
_js_helper.checkInt = function checkInt(value) {
  if (!core.int.is(value)) dart.throw(_js_helper.argumentErrorValue(value));
  return value;
};
_js_helper.throwRuntimeError = function throwRuntimeError(message) {
  dart.throw(new _js_helper.RuntimeError.new(message));
};
_js_helper.throwAbstractClassInstantiationError = function throwAbstractClassInstantiationError(className) {
  dart.throw(new core.AbstractClassInstantiationError.new(core.String._check(className)));
};
_js_helper.throwConcurrentModificationError = function throwConcurrentModificationError(collection) {
  dart.throw(new core.ConcurrentModificationError.new(collection));
};
_js_helper.fillLiteralMap = function fillLiteralMap(keyValuePairs, result) {
  let t27, t27$;
  let index = 0;
  let length = _js_helper.getLength(keyValuePairs);
  while (index < dart.notNull(length)) {
    let key = _js_helper.getIndex(keyValuePairs, (t27 = index, index = t27 + 1, t27));
    let value = _js_helper.getIndex(keyValuePairs, (t27$ = index, index = t27$ + 1, t27$));
    result[$_set](key, value);
  }
  return result;
};
_js_helper.jsHasOwnProperty = function jsHasOwnProperty(jsObject, property) {
  return jsObject.hasOwnProperty(property);
};
_js_helper.jsPropertyAccess = function jsPropertyAccess(jsObject, property) {
  return jsObject[property];
};
_js_helper.getFallThroughError = function getFallThroughError() {
  return new _js_helper.FallThroughErrorImplementation.new();
};
_js_helper.random64 = function random64() {
  let int32a = Math.random() * 0x100000000 >>> 0;
  let int32b = Math.random() * 0x100000000 >>> 0;
  return int32a + int32b * 4294967296;
};
_js_helper.registerGlobalObject = function registerGlobalObject(object) {
  try {
    if (dart.test(dart.polyfill(object))) {
      dart.applyAllExtensions(object);
    }
  } catch (e$) {
    let e = dart.getThrown(e$);
  }
};
_js_helper.applyExtension = function applyExtension$(name, nativeObject) {
  dart.applyExtension(name, nativeObject);
};
_js_helper.getRuntimeType = function getRuntimeType(object) {
  return dart.getReifiedType(object);
};
_js_helper.getIndex = function getIndex(array, index) {
  if (!dart.test(_js_helper.isJsArray(array))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_rti.dart", 16, 10, "isJsArray(array)");
  return array[index];
};
_js_helper.getLength = function getLength(array) {
  if (!dart.test(_js_helper.isJsArray(array))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_rti.dart", 22, 10, "isJsArray(array)");
  return array.length;
};
_js_helper.isJsArray = function isJsArray(value) {
  return _interceptors.JSArray.is(value);
};
_js_helper.putLinkedMapKey = function putLinkedMapKey(key, keyMap) {
  let hash = key[$hashCode] & 0x3ffffff;
  let buckets = keyMap.get(hash);
  if (buckets == null) {
    keyMap.set(hash, [key]);
    return key;
  }
  for (let i = 0, n = buckets.length; i < n; i = i + 1) {
    let k = buckets[i];
    if (k[$_equals](key)) return k;
  }
  buckets.push(key);
  return key;
};
_js_helper.convertDartClosureToJS = function convertDartClosureToJS(F, closure, arity) {
  return closure;
};
_js_helper.setNativeSubclassDispatchRecord = function setNativeSubclassDispatchRecord(proto, interceptor) {
};
_js_helper.findDispatchTagForInterceptorClass = function findDispatchTagForInterceptorClass(interceptorClassConstructor) {
};
_js_helper.makeLeafDispatchRecord = function makeLeafDispatchRecord(interceptor) {
};
_js_helper.regExpGetNative = function regExpGetNative(regexp) {
  return regexp[_nativeRegExp];
};
_js_helper.regExpGetGlobalNative = function regExpGetGlobalNative(regexp) {
  let nativeRegexp = regexp[_nativeGlobalVersion];
  nativeRegexp.lastIndex = 0;
  return nativeRegexp;
};
_js_helper.regExpCaptureCount = function regExpCaptureCount(regexp) {
  let nativeAnchoredRegExp = regexp[_nativeAnchoredVersion];
  let match = nativeAnchoredRegExp.exec('');
  return match[$length] - 2;
};
_js_helper.firstMatchAfter = function firstMatchAfter(regExp, string, start) {
  return regExp[_execGlobal](string, start);
};
_js_helper.stringIndexOfStringUnchecked = function stringIndexOfStringUnchecked(receiver, other, startIndex) {
  return receiver.indexOf(other, startIndex);
};
_js_helper.substring1Unchecked = function substring1Unchecked(receiver, startIndex) {
  return receiver.substring(startIndex);
};
_js_helper.substring2Unchecked = function substring2Unchecked(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};
_js_helper.stringContainsStringUnchecked = function stringContainsStringUnchecked(receiver, other, startIndex) {
  return _js_helper.stringIndexOfStringUnchecked(receiver, other, startIndex) >= 0;
};
_js_helper.allMatchesInStringUnchecked = function allMatchesInStringUnchecked(pattern, string, startIndex) {
  return new _js_helper._StringAllMatchesIterable.new(string, pattern, startIndex);
};
_js_helper.stringContainsUnchecked = function stringContainsUnchecked(receiver, other, startIndex) {
  if (typeof other == 'string') {
    return _js_helper.stringContainsStringUnchecked(receiver, other, startIndex);
  } else if (_js_helper.JSSyntaxRegExp.is(other)) {
    return other.hasMatch(receiver[$substring](startIndex));
  } else {
    let substr = receiver[$substring](startIndex);
    return core.bool._check(dart.dload(dart.dsend(other, 'allMatches', [substr]), 'isNotEmpty'));
  }
};
_js_helper.stringReplaceJS = function stringReplaceJS(receiver, replacer, replacement) {
  replacement = replacement.replace(/\$/g, "$$$$");
  return receiver.replace(replacer, replacement);
};
_js_helper.stringReplaceFirstRE = function stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
  let match = regexp[_execGlobal](receiver, startIndex);
  if (match == null) return receiver;
  let start = match.start;
  let end = match.end;
  return _js_helper.stringReplaceRangeUnchecked(receiver, start, end, replacement);
};
_js_helper.quoteStringForRegExp = function quoteStringForRegExp(string) {
  return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
};
_js_helper.stringReplaceAllUnchecked = function stringReplaceAllUnchecked(receiver, pattern, replacement) {
  if (pattern == null) dart.argumentError(pattern);
  if (replacement == null) dart.argumentError(replacement);
  if (typeof pattern == 'string') {
    if (pattern === "") {
      if (receiver === "") {
        return replacement;
      } else {
        let result = new core.StringBuffer.new();
        let length = receiver.length;
        result.write(replacement);
        for (let i = 0; i < length; i = i + 1) {
          result.write(receiver[$_get](i));
          result.write(replacement);
        }
        return result.toString();
      }
    } else {
      return receiver.split(pattern).join(replacement);
    }
  } else if (_js_helper.JSSyntaxRegExp.is(pattern)) {
    let re = _js_helper.regExpGetGlobalNative(pattern);
    return _js_helper.stringReplaceJS(receiver, re, replacement);
  } else {
    dart.throw("String.replaceAll(Pattern) UNIMPLEMENTED");
  }
};
_js_helper._matchString = function _matchString(match) {
  return match._get(0);
};
_js_helper._stringIdentity = function _stringIdentity(string) {
  return string;
};
_js_helper.stringReplaceAllFuncUnchecked = function stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
  if (pattern == null) dart.argumentError(pattern);
  if (onMatch == null) onMatch = C31 || CT.C31;
  if (onNonMatch == null) onNonMatch = C32 || CT.C32;
  if (typeof pattern == 'string') {
    return _js_helper.stringReplaceAllStringFuncUnchecked(receiver, pattern, onMatch, onNonMatch);
  }
  let buffer = new core.StringBuffer.new();
  let startIndex = 0;
  for (let match of pattern[$allMatches](receiver)) {
    buffer.write(onNonMatch(receiver[$substring](startIndex, match.start)));
    buffer.write(onMatch(match));
    startIndex = match.end;
  }
  buffer.write(onNonMatch(receiver[$substring](startIndex)));
  return buffer.toString();
};
_js_helper.stringReplaceAllEmptyFuncUnchecked = function stringReplaceAllEmptyFuncUnchecked(receiver, onMatch, onNonMatch) {
  let buffer = new core.StringBuffer.new();
  let length = receiver.length;
  let i = 0;
  buffer.write(onNonMatch(""));
  while (i < length) {
    buffer.write(onMatch(new _js_helper.StringMatch.new(i, receiver, "")));
    let code = receiver[$codeUnitAt](i);
    if ((code & ~1023 >>> 0) === 55296 && length > i + 1) {
      code = receiver[$codeUnitAt](i + 1);
      if ((code & ~1023 >>> 0) === 56320) {
        buffer.write(onNonMatch(receiver[$substring](i, i + 2)));
        i = i + 2;
        continue;
      }
    }
    buffer.write(onNonMatch(receiver[$_get](i)));
    i = i + 1;
  }
  buffer.write(onMatch(new _js_helper.StringMatch.new(i, receiver, "")));
  buffer.write(onNonMatch(""));
  return buffer.toString();
};
_js_helper.stringReplaceAllStringFuncUnchecked = function stringReplaceAllStringFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
  let patternLength = pattern.length;
  if (patternLength === 0) {
    return _js_helper.stringReplaceAllEmptyFuncUnchecked(receiver, onMatch, onNonMatch);
  }
  let length = receiver.length;
  let buffer = new core.StringBuffer.new();
  let startIndex = 0;
  while (startIndex < length) {
    let position = _js_helper.stringIndexOfStringUnchecked(receiver, pattern, startIndex);
    if (position === -1) {
      break;
    }
    buffer.write(onNonMatch(receiver[$substring](startIndex, position)));
    buffer.write(onMatch(new _js_helper.StringMatch.new(position, receiver, pattern)));
    startIndex = position + patternLength;
  }
  buffer.write(onNonMatch(receiver[$substring](startIndex)));
  return buffer.toString();
};
_js_helper.stringReplaceFirstUnchecked = function stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
  if (pattern == null) dart.argumentError(pattern);
  if (typeof pattern == 'string') {
    let index = _js_helper.stringIndexOfStringUnchecked(receiver, pattern, startIndex);
    if (index < 0) return receiver;
    let end = index + pattern.length;
    return _js_helper.stringReplaceRangeUnchecked(receiver, index, end, replacement);
  }
  if (_js_helper.JSSyntaxRegExp.is(pattern)) {
    return startIndex === 0 ? _js_helper.stringReplaceJS(receiver, _js_helper.regExpGetNative(pattern), replacement) : _js_helper.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
  }
  let matches = pattern[$allMatches](receiver, startIndex)[$iterator];
  if (!dart.test(matches.moveNext())) return receiver;
  let match = matches.current;
  return receiver[$replaceRange](match.start, match.end, replacement);
};
_js_helper.stringReplaceFirstMappedUnchecked = function stringReplaceFirstMappedUnchecked(receiver, pattern, replace, startIndex) {
  let matches = pattern[$allMatches](receiver, startIndex)[$iterator];
  if (!dart.test(matches.moveNext())) return receiver;
  let match = matches.current;
  let replacement = dart.str(replace(match));
  return receiver[$replaceRange](match.start, match.end, replacement);
};
_js_helper.stringJoinUnchecked = function stringJoinUnchecked(array, separator) {
  return array.join(separator);
};
_js_helper.stringReplaceRangeUnchecked = function stringReplaceRangeUnchecked(receiver, start, end, replacement) {
  let prefix = receiver.substring(0, start);
  let suffix = receiver.substring(end);
  return prefix + dart.str(replacement) + suffix;
};
let C33;
let C34;
let C35;
let C36;
dart.defineLazy(_js_helper, {
  /*_js_helper.patch*/get patch() {
    return C33 || CT.C33;
  },
  /*_js_helper.notNull*/get notNull() {
    return C34 || CT.C34;
  },
  /*_js_helper.undefined*/get undefined() {
    return C35 || CT.C35;
  },
  /*_js_helper.nullCheck*/get nullCheck() {
    return C36 || CT.C36;
  }
});
let C37;
let C38;
let C39;
let C40;
let C41;
_js_mirrors.JsMirrorSystem = class JsMirrorSystem extends core.Object {
  get libraries() {
    return C37 || CT.C37;
  }
  noSuchMethod(i) {
    _js_mirrors._unimplemented(this[$runtimeType], i);
  }
  get voidType() {
    return mirrors.TypeMirror._check(this.noSuchMethod(new core._Invocation.getter(C38 || CT.C38)));
  }
  get dynamicType() {
    return mirrors.TypeMirror._check(this.noSuchMethod(new core._Invocation.getter(C39 || CT.C39)));
  }
  findLibrary(libraryName) {
    return mirrors.LibraryMirror._check(this.noSuchMethod(new core._Invocation.method(C40 || CT.C40, null, [libraryName])));
  }
  get isolate() {
    return mirrors.IsolateMirror._check(this.noSuchMethod(new core._Invocation.getter(C41 || CT.C41)));
  }
};
(_js_mirrors.JsMirrorSystem.new = function() {
  ;
}).prototype = _js_mirrors.JsMirrorSystem.prototype;
;
_js_mirrors.JsMirrorSystem[dart.implements] = () => [mirrors.MirrorSystem];
;
dart.setGetterSignature(_js_mirrors.JsMirrorSystem, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsMirrorSystem.__proto__),
  libraries: core.Map$(core.Uri, mirrors.LibraryMirror),
  voidType: mirrors.TypeMirror,
  dynamicType: mirrors.TypeMirror,
  isolate: mirrors.IsolateMirror
}));
dart.setLibraryUri(_js_mirrors.JsMirrorSystem, "dart:_js_mirrors");
dart.defineExtensionMethods(_js_mirrors.JsMirrorSystem, ['noSuchMethod']);
_js_mirrors.JsMirror = class JsMirror extends core.Object {
  noSuchMethod(i) {
    _js_mirrors._unimplemented(this[$runtimeType], i);
  }
};
(_js_mirrors.JsMirror.new = function() {
  ;
}).prototype = _js_mirrors.JsMirror.prototype;
;
_js_mirrors.JsMirror[dart.implements] = () => [mirrors.Mirror];
dart.setLibraryUri(_js_mirrors.JsMirror, "dart:_js_mirrors");
dart.defineExtensionMethods(_js_mirrors.JsMirror, ['noSuchMethod']);
let C42;
let C43;
let C44;
_js_mirrors.JsCombinatorMirror = class JsCombinatorMirror extends _js_mirrors.JsMirror {
  get identifiers() {
    return ListOfSymbol()._check(this.noSuchMethod(new core._Invocation.getter(C42 || CT.C42)));
  }
  get isHide() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C43 || CT.C43)));
  }
  get isShow() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C44 || CT.C44)));
  }
};
(_js_mirrors.JsCombinatorMirror.new = function() {
  ;
}).prototype = _js_mirrors.JsCombinatorMirror.prototype;
;
_js_mirrors.JsCombinatorMirror[dart.implements] = () => [mirrors.CombinatorMirror];
dart.setGetterSignature(_js_mirrors.JsCombinatorMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsCombinatorMirror.__proto__),
  identifiers: core.List$(core.Symbol),
  isHide: core.bool,
  isShow: core.bool
}));
dart.setLibraryUri(_js_mirrors.JsCombinatorMirror, "dart:_js_mirrors");
let C45;
let C46;
let C47;
let C48;
let C49;
let C50;
let C51;
_js_mirrors.JsDeclarationMirror = class JsDeclarationMirror extends _js_mirrors.JsMirror {
  get owner() {
    return mirrors.DeclarationMirror._check(this.noSuchMethod(new core._Invocation.getter(C45 || CT.C45)));
  }
  get isTopLevel() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C46 || CT.C46)));
  }
  get qualifiedName() {
    return core.Symbol._check(this.noSuchMethod(new core._Invocation.getter(C47 || CT.C47)));
  }
  get simpleName() {
    return core.Symbol._check(this.noSuchMethod(new core._Invocation.getter(C48 || CT.C48)));
  }
  get isPrivate() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C49 || CT.C49)));
  }
  get metadata() {
    return ListOfInstanceMirror()._check(this.noSuchMethod(new core._Invocation.getter(C50 || CT.C50)));
  }
  get location() {
    return mirrors.SourceLocation._check(this.noSuchMethod(new core._Invocation.getter(C51 || CT.C51)));
  }
};
(_js_mirrors.JsDeclarationMirror.new = function() {
  ;
}).prototype = _js_mirrors.JsDeclarationMirror.prototype;
;
_js_mirrors.JsDeclarationMirror[dart.implements] = () => [mirrors.DeclarationMirror];
dart.setGetterSignature(_js_mirrors.JsDeclarationMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsDeclarationMirror.__proto__),
  owner: mirrors.DeclarationMirror,
  isTopLevel: core.bool,
  qualifiedName: core.Symbol,
  simpleName: core.Symbol,
  isPrivate: core.bool,
  metadata: core.List$(mirrors.InstanceMirror),
  location: mirrors.SourceLocation
}));
dart.setLibraryUri(_js_mirrors.JsDeclarationMirror, "dart:_js_mirrors");
let C52;
let C53;
let C54;
let C55;
_js_mirrors.JsIsolateMirror = class JsIsolateMirror extends _js_mirrors.JsMirror {
  get rootLibrary() {
    return mirrors.LibraryMirror._check(this.noSuchMethod(new core._Invocation.getter(C52 || CT.C52)));
  }
  get isCurrent() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C53 || CT.C53)));
  }
  loadUri(uri) {
    return FutureOfLibraryMirror()._check(this.noSuchMethod(new core._Invocation.method(C54 || CT.C54, null, [uri])));
  }
  get debugName() {
    return core.String._check(this.noSuchMethod(new core._Invocation.getter(C55 || CT.C55)));
  }
};
(_js_mirrors.JsIsolateMirror.new = function() {
  ;
}).prototype = _js_mirrors.JsIsolateMirror.prototype;
;
_js_mirrors.JsIsolateMirror[dart.implements] = () => [mirrors.IsolateMirror];
;
dart.setGetterSignature(_js_mirrors.JsIsolateMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsIsolateMirror.__proto__),
  rootLibrary: mirrors.LibraryMirror,
  isCurrent: core.bool,
  debugName: core.String
}));
dart.setLibraryUri(_js_mirrors.JsIsolateMirror, "dart:_js_mirrors");
let C56;
let C57;
let C58;
let C59;
let C60;
let C61;
let C62;
let C63;
_js_mirrors.JsLibraryDependencyMirror = class JsLibraryDependencyMirror extends _js_mirrors.JsMirror {
  get targetLibrary() {
    return mirrors.LibraryMirror._check(this.noSuchMethod(new core._Invocation.getter(C56 || CT.C56)));
  }
  get isDeferred() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C57 || CT.C57)));
  }
  loadLibrary() {
    return FutureOfLibraryMirror()._check(this.noSuchMethod(new core._Invocation.method(C58 || CT.C58, null, [])));
  }
  get prefix() {
    return core.Symbol._check(this.noSuchMethod(new core._Invocation.getter(C59 || CT.C59)));
  }
  get isExport() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C60 || CT.C60)));
  }
  get combinators() {
    return ListOfCombinatorMirror()._check(this.noSuchMethod(new core._Invocation.getter(C61 || CT.C61)));
  }
  get isImport() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C62 || CT.C62)));
  }
  get metadata() {
    return ListOfInstanceMirror()._check(this.noSuchMethod(new core._Invocation.getter(C50 || CT.C50)));
  }
  get location() {
    return mirrors.SourceLocation._check(this.noSuchMethod(new core._Invocation.getter(C51 || CT.C51)));
  }
  get sourceLibrary() {
    return mirrors.LibraryMirror._check(this.noSuchMethod(new core._Invocation.getter(C63 || CT.C63)));
  }
};
(_js_mirrors.JsLibraryDependencyMirror.new = function() {
  ;
}).prototype = _js_mirrors.JsLibraryDependencyMirror.prototype;
;
_js_mirrors.JsLibraryDependencyMirror[dart.implements] = () => [mirrors.LibraryDependencyMirror];
;
dart.setGetterSignature(_js_mirrors.JsLibraryDependencyMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsLibraryDependencyMirror.__proto__),
  targetLibrary: mirrors.LibraryMirror,
  isDeferred: core.bool,
  prefix: core.Symbol,
  isExport: core.bool,
  combinators: core.List$(mirrors.CombinatorMirror),
  isImport: core.bool,
  metadata: core.List$(mirrors.InstanceMirror),
  location: mirrors.SourceLocation,
  sourceLibrary: mirrors.LibraryMirror
}));
dart.setLibraryUri(_js_mirrors.JsLibraryDependencyMirror, "dart:_js_mirrors");
let C64;
let C65;
let C66;
let C67;
_js_mirrors.JsObjectMirror = class JsObjectMirror extends _js_mirrors.JsMirror {
  invoke(memberName, positionalArguments, namedArguments) {
    if (namedArguments === void 0) namedArguments = null;
    return mirrors.InstanceMirror._check(this.noSuchMethod(new core._Invocation.method(C64 || CT.C64, null, [memberName, positionalArguments, namedArguments])));
  }
  setField(fieldName, value) {
    return mirrors.InstanceMirror._check(this.noSuchMethod(new core._Invocation.method(C65 || CT.C65, null, [fieldName, value])));
  }
  delegate(invocation) {
    return this.noSuchMethod(new core._Invocation.method(C66 || CT.C66, null, [invocation]));
  }
  getField(fieldName) {
    return mirrors.InstanceMirror._check(this.noSuchMethod(new core._Invocation.method(C67 || CT.C67, null, [fieldName])));
  }
};
(_js_mirrors.JsObjectMirror.new = function() {
  ;
}).prototype = _js_mirrors.JsObjectMirror.prototype;
;
_js_mirrors.JsObjectMirror[dart.implements] = () => [mirrors.ObjectMirror];
;
dart.setLibraryUri(_js_mirrors.JsObjectMirror, "dart:_js_mirrors");
const reflectee$ = dart.privateName(_js_mirrors, "JsInstanceMirror.reflectee");
_js_mirrors.JsInstanceMirror = class JsInstanceMirror extends _js_mirrors.JsObjectMirror {
  get reflectee() {
    return this[reflectee$];
  }
  set reflectee(value) {
    super.reflectee = value;
  }
  get hasReflectee() {
    return true;
  }
  get type() {
    if (this.reflectee == null) return mirrors.reflectClass(dart.wrapType(core.Null));
    return mirrors.ClassMirror._check(_js_mirrors.reflectType(core.Type._check(_js_mirrors._runtimeType(this.reflectee))));
  }
  _equals(other) {
    return _js_mirrors.JsInstanceMirror.is(other) && core.identical(this.reflectee, other.reflectee);
  }
  get hashCode() {
    return (dart.notNull(core.identityHashCode(this.reflectee)) ^ 909522486) >>> 0;
  }
  getField(symbol) {
    let name = _js_mirrors._getMember(symbol);
    let field = dart.dloadMirror(this.reflectee, name);
    return _js_mirrors.reflect(field);
  }
  setField(symbol, value) {
    let name = _js_mirrors._getMember(symbol);
    dart.dputMirror(this.reflectee, name, value);
    return _js_mirrors.reflect(value);
  }
  invoke(symbol, args, namedArgs) {
    if (namedArgs === void 0) namedArgs = null;
    let name = _js_mirrors._getMember(symbol);
    let result = dart.callMethod(this.reflectee, name, null, args, _js_mirrors._toJsMap(namedArgs), name);
    return _js_mirrors.reflect(result);
  }
  toString() {
    return "InstanceMirror on '" + dart.str(this.reflectee) + "'";
  }
};
(_js_mirrors.JsInstanceMirror.__ = function(reflectee) {
  this[reflectee$] = reflectee;
  ;
}).prototype = _js_mirrors.JsInstanceMirror.prototype;
;
_js_mirrors.JsInstanceMirror[dart.implements] = () => [mirrors.InstanceMirror];
;
dart.setGetterSignature(_js_mirrors.JsInstanceMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsInstanceMirror.__proto__),
  hasReflectee: core.bool,
  type: mirrors.ClassMirror
}));
dart.setLibraryUri(_js_mirrors.JsInstanceMirror, "dart:_js_mirrors");
;
dart.defineExtensionMethods(_js_mirrors.JsInstanceMirror, ['_equals', 'toString']);
dart.defineExtensionAccessors(_js_mirrors.JsInstanceMirror, ['hashCode']);
let C68;
_js_mirrors.JsClosureMirror = class JsClosureMirror extends _js_mirrors.JsInstanceMirror {
  apply(args, namedArgs) {
    if (namedArgs === void 0) namedArgs = null;
    let result = dart.dcall(this.reflectee, args, _js_mirrors._toJsMap(namedArgs));
    return _js_mirrors.reflect(result);
  }
  get function() {
    return mirrors.MethodMirror._check(this.noSuchMethod(new core._Invocation.getter(C68 || CT.C68)));
  }
};
(_js_mirrors.JsClosureMirror.__ = function(reflectee) {
  _js_mirrors.JsClosureMirror.__proto__.__.call(this, reflectee);
  ;
}).prototype = _js_mirrors.JsClosureMirror.prototype;
;
_js_mirrors.JsClosureMirror[dart.implements] = () => [mirrors.ClosureMirror];
;
dart.setGetterSignature(_js_mirrors.JsClosureMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsClosureMirror.__proto__),
  function: mirrors.MethodMirror
}));
dart.setLibraryUri(_js_mirrors.JsClosureMirror, "dart:_js_mirrors");
const _originalDeclaration = dart.privateName(_js_mirrors, "_originalDeclaration");
const _mixin = dart.privateName(_js_mirrors, "_mixin");
const _typeArguments = dart.privateName(_js_mirrors, "_typeArguments");
const _metadata$ = dart.privateName(_js_mirrors, "_metadata");
const _declarations = dart.privateName(_js_mirrors, "_declarations");
const _cls = dart.privateName(_js_mirrors, "_cls");
const _raw = dart.privateName(_js_mirrors, "_raw");
let C69;
let C70;
let C71;
let C72;
let C73;
let C74;
let C75;
let C76;
let C77;
let C78;
const simpleName = dart.privateName(_js_mirrors, "JsClassMirror.simpleName");
_js_mirrors.JsClassMirror = class JsClassMirror extends _js_mirrors.JsMirror {
  get simpleName() {
    return this[simpleName];
  }
  set simpleName(value) {
    super.simpleName = value;
  }
  get metadata() {
    if (this[_metadata$] == null) {
      let unwrapped = dart.unwrapType(this[_cls]);
      let fn = Object.hasOwnProperty.call(unwrapped, dart.metadata) ? unwrapped[dart.metadata] : null;
      this[_metadata$] = fn == null ? C70 || CT.C70 : ListOfInstanceMirror().unmodifiable(core.Iterable._check(dart.dsend(dart.dcall(fn, []), 'map', [dart.fn(i => _js_mirrors.reflect(i), dynamicToInstanceMirror())])));
    }
    return this[_metadata$];
  }
  get declarations() {
    if (this[_declarations] == null) {
      this[_declarations] = new (LinkedMapOfSymbol$DeclarationMirror()).new();
      let unwrapped = dart.unwrapType(this[_cls]);
      let constructors = _js_mirrors._toDartMap(dart.getConstructors(unwrapped));
      constructors[$forEach](dart.fn((symbol, ft) => {
        let name = _js_mirrors.getName(symbol);
        this[_declarations][$_set](symbol, new _js_mirrors.JsMethodMirror._constructor(this, symbol, ft));
      }, SymbolAnddynamicToNull()));
      if (dart.test(constructors[$isEmpty])) {
        let name = "new";
        let ft = dart.fnType(dart.unwrapType(this[_cls]), []);
        let symbol = new _internal.Symbol.new(name);
        this[_declarations][$_set](symbol, new _js_mirrors.JsMethodMirror._constructor(this, symbol, ft));
      }
      let fields = _js_mirrors._toDartMap(dart.getFields(unwrapped));
      fields[$forEach](dart.fn((symbol, t) => {
        this[_declarations][$_set](symbol, new _js_mirrors.JsVariableMirror._fromField(symbol, t));
      }, SymbolAnddynamicToNull()));
      let methods = _js_mirrors._toDartMap(dart.getMethods(unwrapped));
      methods[$forEach](dart.fn((symbol, ft) => {
        let name = _js_mirrors.getName(symbol);
        this[_declarations][$_set](symbol, new _js_mirrors.JsMethodMirror._instanceMethod(this, symbol, ft));
      }, SymbolAnddynamicToNull()));
      function getterType(type) {
        if (type instanceof Array) {
          let array = type.slice();
          type = array[0];
          array[0] = dart.fnType(type, []);
          return array;
        } else {
          return dart.fnType(type, []);
        }
      }
      dart.fn(getterType, dynamicToObject());
      let getters = _js_mirrors._toDartMap(dart.getGetters(unwrapped));
      getters[$forEach](dart.fn((symbol, type) => {
        this[_declarations][$_set](symbol, new _js_mirrors.JsMethodMirror._instanceMethod(this, symbol, getterType(type)));
      }, SymbolAnddynamicToNull()));
      function setterType(type) {
        if (type instanceof Array) {
          let array = type.slice();
          type = array[0];
          array[0] = dart.fnType(dart.void, [type]);
          return array;
        } else {
          return dart.fnType(dart.void, [type]);
        }
      }
      dart.fn(setterType, dynamicToObject());
      let setters = _js_mirrors._toDartMap(dart.getSetters(unwrapped));
      setters[$forEach](dart.fn((symbol, type) => {
        let name = dart.notNull(_js_mirrors.getName(symbol)) + "=";
        symbol = new _js_helper.PrivateSymbol.new(name, _js_mirrors._getESSymbol(symbol));
        this[_declarations][$_set](symbol, new _js_mirrors.JsMethodMirror._instanceMethod(this, symbol, setterType(type)));
      }, SymbolAnddynamicToNull()));
      let staticFields = _js_mirrors._toDartMap(dart.getStaticFields(unwrapped));
      staticFields[$forEach](dart.fn((symbol, t) => {
        this[_declarations][$_set](symbol, new _js_mirrors.JsVariableMirror._fromField(symbol, t));
      }, SymbolAnddynamicToNull()));
      let statics = _js_mirrors._toDartMap(dart.getStaticMethods(unwrapped));
      statics[$forEach](dart.fn((symbol, ft) => {
        this[_declarations][$_set](symbol, new _js_mirrors.JsMethodMirror._staticMethod(this, symbol, ft));
      }, SymbolAnddynamicToNull()));
      let staticGetters = _js_mirrors._toDartMap(dart.getStaticGetters(unwrapped));
      staticGetters[$forEach](dart.fn((symbol, type) => {
        this[_declarations][$_set](symbol, new _js_mirrors.JsMethodMirror._staticMethod(this, symbol, getterType(type)));
      }, SymbolAnddynamicToNull()));
      let staticSetters = _js_mirrors._toDartMap(dart.getStaticSetters(unwrapped));
      staticSetters[$forEach](dart.fn((symbol, type) => {
        this[_declarations][$_set](symbol, new _js_mirrors.JsMethodMirror._staticMethod(this, symbol, setterType(type)));
      }, SymbolAnddynamicToNull()));
      this[_declarations] = MapOfSymbol$DeclarationMirror().unmodifiable(this[_declarations]);
    }
    return this[_declarations];
  }
  newInstance(constructorName, args, namedArgs) {
    if (namedArgs === void 0) namedArgs = null;
    let name = _js_mirrors.getName(constructorName);
    if (!(namedArgs == null || dart.test(namedArgs[$isEmpty]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_mirrors.dart", 372, 12, "namedArgs == null || namedArgs.isEmpty");
    if (name === "") name = "new";
    let cls = dart.unwrapType(this[_cls]);
    let ctr = cls[name];
    let instance = cls.prototype == ctr.prototype ? new ctr(...args) : ctr(...args);
    return _js_mirrors.reflect(instance);
  }
  getField(symbol) {
    let name = _js_mirrors.getName(symbol);
    return _js_mirrors.reflect(dart.unwrapType(this[_cls])[name]);
  }
  setField(symbol, value) {
    let name = _js_mirrors.getName(symbol);
    dart.unwrapType(this[_cls])[name] = value;
    return _js_mirrors.reflect(value);
  }
  invoke(symbol, args, namedArgs) {
    if (namedArgs === void 0) namedArgs = null;
    let name = _js_mirrors.getName(symbol);
    if (namedArgs != null) {
      args = core.List.from(args);
      args[$add](_js_mirrors._toJsMap(namedArgs));
    }
    let result = dart.unwrapType(this[_cls])[name](...args);
    return _js_mirrors.reflect(result);
  }
  get superinterfaces() {
    let interfaceThunk = dart.unwrapType(this[_cls])[dart.implements];
    if (interfaceThunk == null) {
      return JSArrayOfClassMirror().of([]);
    } else {
      let interfaces = interfaceThunk();
      return ListOfClassMirror()._check(interfaces[$map](mirrors.TypeMirror, dart.fn(t => _js_mirrors.reflectType(t), TypeToTypeMirror()))[$toList]());
    }
  }
  get hasReflectedType() {
    return true;
  }
  get reflectedType() {
    return this[_cls];
  }
  get isOriginalDeclaration() {
    return this[_raw] == null;
  }
  get typeArguments() {
    return this[_typeArguments];
  }
  get originalDeclaration() {
    if (this[_raw] == null) {
      return this;
    }
    if (this[_originalDeclaration] != null) {
      return this[_originalDeclaration];
    }
    this[_originalDeclaration] = new _js_mirrors.JsClassMirror.__(dart.wrapType(this[_raw]()), {instantiated: false});
    return this[_originalDeclaration];
  }
  get superclass() {
    if (dart.equals(this[_cls], dart.wrapType(core.Object))) {
      return null;
    } else {
      return mirrors.ClassMirror._check(_js_mirrors.reflectType(dart.wrapType(dart.unwrapType(this[_cls]).__proto__)));
    }
  }
  get mixin() {
    if (this[_mixin] != null) {
      return this[_mixin];
    }
    let mixin = dart.getMixin(dart.unwrapType(this[_cls]));
    if (mixin == null) {
      this[_mixin] = this;
      return this[_mixin];
    }
    this[_mixin] = mirrors.ClassMirror._check(_js_mirrors.reflectType(dart.wrapType(mixin)));
    return this[_mixin];
  }
  toString() {
    return "ClassMirror on '" + dart.str(this[_cls]) + "'";
  }
  get isAbstract() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C71 || CT.C71)));
  }
  get owner() {
    return mirrors.DeclarationMirror._check(this.noSuchMethod(new core._Invocation.getter(C45 || CT.C45)));
  }
  isAssignableTo(other) {
    return core.bool._check(this.noSuchMethod(new core._Invocation.method(C72 || CT.C72, null, [other])));
  }
  get staticMembers() {
    return MapOfSymbol$MethodMirror()._check(this.noSuchMethod(new core._Invocation.getter(C73 || CT.C73)));
  }
  get isTopLevel() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C46 || CT.C46)));
  }
  get qualifiedName() {
    return core.Symbol._check(this.noSuchMethod(new core._Invocation.getter(C47 || CT.C47)));
  }
  get instanceMembers() {
    return MapOfSymbol$MethodMirror()._check(this.noSuchMethod(new core._Invocation.getter(C74 || CT.C74)));
  }
  isSubclassOf(other) {
    return core.bool._check(this.noSuchMethod(new core._Invocation.method(C75 || CT.C75, null, [other])));
  }
  get typeVariables() {
    return ListOfTypeVariableMirror()._check(this.noSuchMethod(new core._Invocation.getter(C76 || CT.C76)));
  }
  delegate(invocation) {
    return this.noSuchMethod(new core._Invocation.method(C66 || CT.C66, null, [invocation]));
  }
  get isPrivate() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C49 || CT.C49)));
  }
  isSubtypeOf(other) {
    return core.bool._check(this.noSuchMethod(new core._Invocation.method(C77 || CT.C77, null, [other])));
  }
  get isEnum() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C78 || CT.C78)));
  }
  get location() {
    return mirrors.SourceLocation._check(this.noSuchMethod(new core._Invocation.getter(C51 || CT.C51)));
  }
};
(_js_mirrors.JsClassMirror.__ = function(cls, opts) {
  let instantiated = opts && 'instantiated' in opts ? opts.instantiated : true;
  this[_originalDeclaration] = null;
  this[_mixin] = null;
  this[_typeArguments] = null;
  this[_metadata$] = null;
  this[_declarations] = null;
  this[_cls] = cls;
  this[_raw] = dart.test(instantiated) ? dart.getGenericClass(dart.unwrapType(cls)) : null;
  this[simpleName] = new _internal.Symbol.new(dart.unwrapType(cls).name);
  let typeArgs = dart.getGenericArgs(dart.unwrapType(this[_cls]));
  if (typeArgs == null) {
    this[_typeArguments] = C69 || CT.C69;
  } else {
    this[_typeArguments] = ListOfTypeMirror().unmodifiable(typeArgs[$map](dart.dynamic, dart.fn(t => _js_mirrors.reflectType(dart.wrapType(t)), dynamicToTypeMirror())));
  }
}).prototype = _js_mirrors.JsClassMirror.prototype;
;
_js_mirrors.JsClassMirror[dart.implements] = () => [mirrors.ClassMirror];
;
dart.setGetterSignature(_js_mirrors.JsClassMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsClassMirror.__proto__),
  metadata: core.List$(mirrors.InstanceMirror),
  declarations: core.Map$(core.Symbol, mirrors.DeclarationMirror),
  superinterfaces: core.List$(mirrors.ClassMirror),
  hasReflectedType: core.bool,
  reflectedType: core.Type,
  isOriginalDeclaration: core.bool,
  typeArguments: core.List$(mirrors.TypeMirror),
  originalDeclaration: mirrors.TypeMirror,
  superclass: mirrors.ClassMirror,
  mixin: mirrors.ClassMirror,
  isAbstract: core.bool,
  owner: mirrors.DeclarationMirror,
  staticMembers: core.Map$(core.Symbol, mirrors.MethodMirror),
  isTopLevel: core.bool,
  qualifiedName: core.Symbol,
  instanceMembers: core.Map$(core.Symbol, mirrors.MethodMirror),
  typeVariables: core.List$(mirrors.TypeVariableMirror),
  isPrivate: core.bool,
  isEnum: core.bool,
  location: mirrors.SourceLocation
}));
dart.setLibraryUri(_js_mirrors.JsClassMirror, "dart:_js_mirrors");
;
dart.defineExtensionMethods(_js_mirrors.JsClassMirror, ['toString']);
const _symbol = dart.privateName(_js_mirrors, "_symbol");
const _name$2 = dart.privateName(_js_mirrors, "_name");
let C79;
let C80;
let C81;
const type = dart.privateName(_js_mirrors, "JsVariableMirror.type");
const metadata$ = dart.privateName(_js_mirrors, "JsVariableMirror.metadata");
const isFinal$ = dart.privateName(_js_mirrors, "JsVariableMirror.isFinal");
const isStatic = dart.privateName(_js_mirrors, "JsVariableMirror.isStatic");
_js_mirrors.JsVariableMirror = class JsVariableMirror extends _js_mirrors.JsMirror {
  get type() {
    return this[type];
  }
  set type(value) {
    super.type = value;
  }
  get metadata() {
    return this[metadata$];
  }
  set metadata(value) {
    super.metadata = value;
  }
  get isFinal() {
    return this[isFinal$];
  }
  set isFinal(value) {
    super.isFinal = value;
  }
  get isStatic() {
    return this[isStatic];
  }
  set isStatic(value) {
    super.isStatic = value;
  }
  get simpleName() {
    return this[_symbol];
  }
  toString() {
    return "VariableMirror on '" + dart.str(this[_name$2]) + "'";
  }
  get isExtensionMember() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C80 || CT.C80)));
  }
  get owner() {
    return mirrors.DeclarationMirror._check(this.noSuchMethod(new core._Invocation.getter(C45 || CT.C45)));
  }
  get isConst() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C81 || CT.C81)));
  }
  get isTopLevel() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C46 || CT.C46)));
  }
  get qualifiedName() {
    return core.Symbol._check(this.noSuchMethod(new core._Invocation.getter(C47 || CT.C47)));
  }
  get isPrivate() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C49 || CT.C49)));
  }
  get location() {
    return mirrors.SourceLocation._check(this.noSuchMethod(new core._Invocation.getter(C51 || CT.C51)));
  }
};
(_js_mirrors.JsVariableMirror.__ = function(symbol, t, annotations, opts) {
  let t28, t28$;
  let isFinal = opts && 'isFinal' in opts ? opts.isFinal : false;
  this[isStatic] = false;
  this[isFinal$] = isFinal;
  this[_symbol] = symbol;
  this[_name$2] = _js_mirrors.getName(symbol);
  this[type] = _js_mirrors.reflectType(t);
  this[metadata$] = ListOfInstanceMirror().unmodifiable((t28$ = (t28 = annotations, t28 == null ? null : t28[$map](dart.dynamic, C79 || CT.C79)), t28$ == null ? [] : t28$));
  ;
}).prototype = _js_mirrors.JsVariableMirror.prototype;
(_js_mirrors.JsVariableMirror._fromField = function(symbol, fieldInfo) {
  _js_mirrors.JsVariableMirror.__.call(this, symbol, dart.wrapType(fieldInfo.type), fieldInfo.metadata, {isFinal: fieldInfo.isFinal});
}).prototype = _js_mirrors.JsVariableMirror.prototype;
;
_js_mirrors.JsVariableMirror[dart.implements] = () => [mirrors.VariableMirror];
dart.setGetterSignature(_js_mirrors.JsVariableMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsVariableMirror.__proto__),
  simpleName: core.Symbol,
  isExtensionMember: core.bool,
  owner: mirrors.DeclarationMirror,
  isConst: core.bool,
  isTopLevel: core.bool,
  qualifiedName: core.Symbol,
  isPrivate: core.bool,
  location: mirrors.SourceLocation
}));
dart.setLibraryUri(_js_mirrors.JsVariableMirror, "dart:_js_mirrors");
;
dart.defineExtensionMethods(_js_mirrors.JsVariableMirror, ['toString']);
let C82;
let C83;
let C84;
let C85;
_js_mirrors.JsParameterMirror = class JsParameterMirror extends _js_mirrors.JsVariableMirror {
  toString() {
    return "ParameterMirror on '" + dart.str(this[_name$2]) + "'";
  }
  get isNamed() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C82 || CT.C82)));
  }
  get hasDefaultValue() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C83 || CT.C83)));
  }
  get defaultValue() {
    return mirrors.InstanceMirror._check(this.noSuchMethod(new core._Invocation.getter(C84 || CT.C84)));
  }
  get isOptional() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C85 || CT.C85)));
  }
};
(_js_mirrors.JsParameterMirror.__ = function(member, t, annotations) {
  _js_mirrors.JsParameterMirror.__proto__.__.call(this, member, t, annotations);
  ;
}).prototype = _js_mirrors.JsParameterMirror.prototype;
;
_js_mirrors.JsParameterMirror[dart.implements] = () => [mirrors.ParameterMirror];
dart.setGetterSignature(_js_mirrors.JsParameterMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsParameterMirror.__proto__),
  isNamed: core.bool,
  hasDefaultValue: core.bool,
  defaultValue: mirrors.InstanceMirror,
  isOptional: core.bool
}));
dart.setLibraryUri(_js_mirrors.JsParameterMirror, "dart:_js_mirrors");
dart.defineExtensionMethods(_js_mirrors.JsParameterMirror, ['toString']);
const _params = dart.privateName(_js_mirrors, "_params");
const _createParameterMirrorList = dart.privateName(_js_mirrors, "_createParameterMirrorList");
let C86;
let C87;
let C88;
let C89;
let C90;
let C91;
let C92;
let C93;
let C94;
let C95;
let C96;
const isConstructor = dart.privateName(_js_mirrors, "JsMethodMirror.isConstructor");
const isStatic$ = dart.privateName(_js_mirrors, "JsMethodMirror.isStatic");
const isFinal = dart.privateName(_js_mirrors, "JsMethodMirror.isFinal");
_js_mirrors.JsMethodMirror = class JsMethodMirror extends _js_mirrors.JsMirror {
  get isConstructor() {
    return this[isConstructor];
  }
  set isConstructor(value) {
    super.isConstructor = value;
  }
  get isStatic() {
    return this[isStatic$];
  }
  set isStatic(value) {
    super.isStatic = value;
  }
  get isFinal() {
    return this[isFinal];
  }
  set isFinal(value) {
    super.isFinal = value;
  }
  get isSetter() {
    return this[_name$2][$endsWith]("=");
  }
  get isPrivate() {
    return this[_name$2][$startsWith]("_");
  }
  get simpleName() {
    return this[_symbol];
  }
  get constructorName() {
    return dart.test(this.isConstructor) ? this[_symbol] : null;
  }
  get parameters() {
    return this[_params];
  }
  get metadata() {
    return this[_metadata$];
  }
  [_createParameterMirrorList](ftype) {
    if (ftype == null) {
      this[_params] = C86 || CT.C86;
      this[_metadata$] = C70 || CT.C70;
      return;
    }
    if (!core.Function.is(ftype) && core.List.is(ftype)) {
      this[_metadata$] = ListOfInstanceMirror().unmodifiable(core.Iterable._check(dart.dsend(dart.dsend(ftype, 'skip', [1]), 'map', [dart.fn(a => _js_mirrors.reflect(a), dynamicToInstanceMirror())])));
      ftype = dart.dsend(ftype, '_get', [0]);
    } else {
      this[_metadata$] = C70 || CT.C70;
    }
    ftype = dart.getFunctionTypeMirror(dart.AbstractFunctionType._check(ftype));
    let args = core.List._check(dart.dload(ftype, 'args'));
    let opts = core.List._check(dart.dload(ftype, 'optionals'));
    let params = ListOfParameterMirror().new(dart.notNull(args[$length]) + dart.notNull(opts[$length]));
    for (let i = 0; i < dart.notNull(args[$length]); i = i + 1) {
      let type = args[$_get](i);
      let metadata = dart.dsend(dart.dload(ftype, 'metadata'), '_get', [i]);
      let param = new _js_mirrors.JsParameterMirror.__(new _internal.Symbol.new(""), dart.wrapType(type), core.List._check(metadata));
      params[$_set](i, param);
    }
    for (let i = 0; i < dart.notNull(opts[$length]); i = i + 1) {
      let type = opts[$_get](i);
      let metadata = dart.dsend(dart.dload(ftype, 'metadata'), '_get', [dart.notNull(args[$length]) + i]);
      let param = new _js_mirrors.JsParameterMirror.__(new _internal.Symbol.new(""), dart.wrapType(type), core.List._check(metadata));
      params[$_set](i + dart.notNull(args[$length]), param);
    }
    this[_params] = ListOfParameterMirror().unmodifiable(params);
  }
  toString() {
    return "MethodMirror on '" + dart.str(this[_name$2]) + "'";
  }
  get isOperator() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C87 || CT.C87)));
  }
  get isExtensionMember() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C80 || CT.C80)));
  }
  get isAbstract() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C71 || CT.C71)));
  }
  get owner() {
    return mirrors.DeclarationMirror._check(this.noSuchMethod(new core._Invocation.getter(C45 || CT.C45)));
  }
  get isTopLevel() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C46 || CT.C46)));
  }
  get returnType() {
    return mirrors.TypeMirror._check(this.noSuchMethod(new core._Invocation.getter(C88 || CT.C88)));
  }
  get isGenerativeConstructor() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C89 || CT.C89)));
  }
  get isConstConstructor() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C90 || CT.C90)));
  }
  get qualifiedName() {
    return core.Symbol._check(this.noSuchMethod(new core._Invocation.getter(C47 || CT.C47)));
  }
  get isSynthetic() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C91 || CT.C91)));
  }
  get source() {
    return core.String._check(this.noSuchMethod(new core._Invocation.getter(C92 || CT.C92)));
  }
  get isRegularMethod() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C93 || CT.C93)));
  }
  get isFactoryConstructor() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C94 || CT.C94)));
  }
  get isRedirectingConstructor() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C95 || CT.C95)));
  }
  get location() {
    return mirrors.SourceLocation._check(this.noSuchMethod(new core._Invocation.getter(C51 || CT.C51)));
  }
  get isGetter() {
    return core.bool._check(this.noSuchMethod(new core._Invocation.getter(C96 || CT.C96)));
  }
};
(_js_mirrors.JsMethodMirror._constructor = function(cls, symbol, ftype) {
  this[_params] = null;
  this[_metadata$] = null;
  this[isFinal] = false;
  this[_symbol] = symbol;
  this[_name$2] = _js_mirrors.getName(symbol);
  this[isConstructor] = true;
  this[isStatic$] = false;
  this[_createParameterMirrorList](ftype);
}).prototype = _js_mirrors.JsMethodMirror.prototype;
(_js_mirrors.JsMethodMirror._instanceMethod = function(cls, symbol, ftype) {
  this[_params] = null;
  this[_metadata$] = null;
  this[isFinal] = false;
  this[_symbol] = symbol;
  this[_name$2] = _js_mirrors.getName(symbol);
  this[isConstructor] = false;
  this[isStatic$] = false;
  this[_createParameterMirrorList](ftype);
}).prototype = _js_mirrors.JsMethodMirror.prototype;
(_js_mirrors.JsMethodMirror._staticMethod = function(cls, symbol, ftype) {
  this[_params] = null;
  this[_metadata$] = null;
  this[isFinal] = false;
  this[_symbol] = symbol;
  this[_name$2] = _js_mirrors.getName(symbol);
  this[isConstructor] = false;
  this[isStatic$] = true;
  this[_createParameterMirrorList](ftype);
}).prototype = _js_mirrors.JsMethodMirror.prototype;
;
_js_mirrors.JsMethodMirror[dart.implements] = () => [mirrors.MethodMirror];
;
dart.setGetterSignature(_js_mirrors.JsMethodMirror, () => ({
  __proto__: dart.getGetters(_js_mirrors.JsMethodMirror.__proto__),
  isSetter: core.bool,
  isPrivate: core.bool,
  simpleName: core.Symbol,
  constructorName: core.Symbol,
  parameters: core.List$(mirrors.ParameterMirror),
  metadata: core.List$(mirrors.InstanceMirror),
  isOperator: core.bool,
  isExtensionMember: core.bool,
  isAbstract: core.bool,
  owner: mirrors.DeclarationMirror,
  isTopLevel: core.bool,
  returnType: mirrors.TypeMirror,
  isGenerativeConstructor: core.bool,
  isConstConstructor: core.bool,
  qualifiedName: core.Symbol,
  isSynthetic: core.bool,
  source: core.String,
  isRegularMethod: core.bool,
  isFactoryConstructor: core.bool,
  isRedirectingConstructor: core.bool,
  location: mirrors.SourceLocation,
  isGetter: core.bool
}));
dart.setLibraryUri(_js_mirrors.JsMethodMirror, "dart:_js_mirrors");
;
dart.defineExtensionMethods(_js_mirrors.JsMethodMirror, ['toString']);
_js_mirrors.getName = function getName(symbol) {
  if (_js_helper.PrivateSymbol.is(symbol)) {
    return _js_helper.PrivateSymbol.getName(symbol);
  } else {
    return _internal.Symbol.getName(_internal.Symbol.as(symbol));
  }
};
_js_mirrors.getSymbol = function getSymbol(name, library) {
  return dart.throw(new core.UnimplementedError.new("MirrorSystem.getSymbol unimplemented"));
};
_js_mirrors.reflect = function reflect(reflectee) {
  if (core.Function.is(reflectee)) {
    return new _js_mirrors.JsClosureMirror.__(reflectee);
  } else {
    return new _js_mirrors.JsInstanceMirror.__(reflectee);
  }
};
_js_mirrors.reflectType = function reflectType(key) {
  let unwrapped = dart.unwrapType(key);
  let property = Object.getOwnPropertyDescriptor(unwrapped, _js_mirrors._typeMirror);
  if (property != null) {
    return property.value;
  }
  let mirror = new _js_mirrors.JsClassMirror.__(key);
  unwrapped[_js_mirrors._typeMirror] = mirror;
  return mirror;
};
_js_mirrors._getESSymbol = function _getESSymbol(symbol) {
  return _js_helper.PrivateSymbol.getNativeSymbol(symbol);
};
_js_mirrors._getMember = function _getMember(symbol) {
  let privateSymbol = _js_mirrors._getESSymbol(symbol);
  if (privateSymbol != null) {
    return privateSymbol;
  }
  let name = _js_mirrors.getName(symbol);
  switch (name) {
    case "[]":
    {
      name = "_get";
      break;
    }
    case "[]=":
    {
      name = "_set";
      break;
    }
    case "unary-":
    {
      name = "_negate";
      break;
    }
    case "constructor":
    case "prototype":
    {
      name = "_" + dart.str(name);
      break;
    }
  }
  return name;
};
_js_mirrors._getNameForESSymbol = function _getNameForESSymbol(member) {
  if (!(typeof member == "symbol")) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_mirrors.dart", 84, 10, "JS<bool>('!', 'typeof # == \"symbol\"', member)");
  let str = dart.toString(member);
  if (!(str[$startsWith]("Symbol(") && str[$endsWith](")"))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_mirrors.dart", 86, 10, "str.startsWith('Symbol(') && str.endsWith(')')");
  return str[$substring](7, str.length - 1);
};
_js_mirrors._getSymbolForESSymbol = function _getSymbolForESSymbol(member) {
  let name = _js_mirrors._getNameForESSymbol(member);
  return new _js_helper.PrivateSymbol.new(name, member);
};
_js_mirrors._getSymbolForMember = function _getSymbolForMember(member) {
  if (typeof member == 'string') {
    return new _internal.Symbol.new(member);
  } else {
    let name = _js_mirrors._getNameForESSymbol(member);
    return new _js_helper.PrivateSymbol.new(name, member);
  }
};
_js_mirrors._toDartMap = function _toDartMap(data) {
  if (data == null) return new (LinkedMapOfSymbol$dynamic()).new();
  let map = new (LinkedMapOfSymbol$dynamic()).new();
  let publicMembers = Object.getOwnPropertyNames(data);
  for (let member of core.Iterable._check(publicMembers)) {
    let symbol = new _internal.Symbol.new(core.String._check(member));
    map[$_set](symbol, data[member]);
  }
  let privateMembers = Object.getOwnPropertySymbols(data);
  for (let member of core.Iterable._check(privateMembers)) {
    let symbol = _js_mirrors._getSymbolForESSymbol(member);
    map[$_set](symbol, data[member]);
  }
  return map;
};
_js_mirrors._runtimeType = function _runtimeType(obj) {
  return dart.wrapType(dart.getReifiedType(obj));
};
_js_mirrors._unimplemented = function _unimplemented(t, i) {
  dart.throw(new core.UnimplementedError.new(dart.str(t) + "." + dart.str(_js_mirrors.getName(i.memberName)) + " unimplemented"));
};
_js_mirrors._toJsMap = function _toJsMap(map) {
  if (map == null) return null;
  let obj = {};
  map[$forEach](dart.fn((key, value) => {
    obj[_js_mirrors.getName(key)] = value;
  }, SymbolAnddynamicToNull()));
  return obj;
};
dart.defineLazy(_js_mirrors, {
  /*_js_mirrors.currentJsMirrorSystem*/get currentJsMirrorSystem() {
    return new _js_mirrors.JsMirrorSystem.new();
  },
  /*_js_mirrors._typeMirror*/get _typeMirror() {
    return Symbol("_typeMirror");
  }
});
_js_primitives.printString = function printString(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log != "undefined") {
    console.log(string);
    return;
  }
  if (typeof window == "object") {
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};
_native_typed_data.NativeByteBuffer = class NativeByteBuffer extends core.Object {
  get [$lengthInBytes]() {
    return this.byteLength;
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.ByteBuffer);
  }
  [$asUint8List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeUint8List.view(this, offsetInBytes, length);
  }
  [$asInt8List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeInt8List.view(this, offsetInBytes, length);
  }
  [$asUint8ClampedList](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeUint8ClampedList.view(this, offsetInBytes, length);
  }
  [$asUint16List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeUint16List.view(this, offsetInBytes, length);
  }
  [$asInt16List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeInt16List.view(this, offsetInBytes, length);
  }
  [$asUint32List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeUint32List.view(this, offsetInBytes, length);
  }
  [$asInt32List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeInt32List.view(this, offsetInBytes, length);
  }
  [$asUint64List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    dart.throw(new core.UnsupportedError.new("Uint64List not supported by dart2js."));
  }
  [$asInt64List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    dart.throw(new core.UnsupportedError.new("Int64List not supported by dart2js."));
  }
  [$asInt32x4List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    let storage = _native_typed_data.NativeInt32List._check(this[$asInt32List](offsetInBytes, length != null ? dart.notNull(length) * 4 : null));
    return new _native_typed_data.NativeInt32x4List._externalStorage(storage);
  }
  [$asFloat32List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeFloat32List.view(this, offsetInBytes, length);
  }
  [$asFloat64List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeFloat64List.view(this, offsetInBytes, length);
  }
  [$asFloat32x4List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    let storage = _native_typed_data.NativeFloat32List._check(this[$asFloat32List](offsetInBytes, length != null ? dart.notNull(length) * 4 : null));
    return new _native_typed_data.NativeFloat32x4List._externalStorage(storage);
  }
  [$asFloat64x2List](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    let storage = _native_typed_data.NativeFloat64List._check(this[$asFloat64List](offsetInBytes, length != null ? dart.notNull(length) * 2 : null));
    return new _native_typed_data.NativeFloat64x2List._externalStorage(storage);
  }
  [$asByteData](offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return _native_typed_data.NativeByteData.view(this, offsetInBytes, length);
  }
};
(_native_typed_data.NativeByteBuffer.new = function() {
  ;
}).prototype = _native_typed_data.NativeByteBuffer.prototype;
;
_native_typed_data.NativeByteBuffer[dart.implements] = () => [typed_data.ByteBuffer];
;
dart.setGetterSignature(_native_typed_data.NativeByteBuffer, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeByteBuffer.__proto__),
  [$lengthInBytes]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeByteBuffer, "dart:_native_typed_data");
dart.registerExtension("ArrayBuffer", _native_typed_data.NativeByteBuffer);
const _storage$ = dart.privateName(_native_typed_data, "_storage");
typed_data.Float32x4 = class Float32x4 extends core.Object {};
(typed_data.Float32x4[dart.mixinNew] = function() {
}).prototype = typed_data.Float32x4.prototype;
;
dart.setLibraryUri(typed_data.Float32x4, "dart:typed_data");
dart.defineLazy(typed_data.Float32x4, {
  /*typed_data.Float32x4.xxxx*/get xxxx() {
    return 0;
  },
  /*typed_data.Float32x4.xxxy*/get xxxy() {
    return 64;
  },
  /*typed_data.Float32x4.xxxz*/get xxxz() {
    return 128;
  },
  /*typed_data.Float32x4.xxxw*/get xxxw() {
    return 192;
  },
  /*typed_data.Float32x4.xxyx*/get xxyx() {
    return 16;
  },
  /*typed_data.Float32x4.xxyy*/get xxyy() {
    return 80;
  },
  /*typed_data.Float32x4.xxyz*/get xxyz() {
    return 144;
  },
  /*typed_data.Float32x4.xxyw*/get xxyw() {
    return 208;
  },
  /*typed_data.Float32x4.xxzx*/get xxzx() {
    return 32;
  },
  /*typed_data.Float32x4.xxzy*/get xxzy() {
    return 96;
  },
  /*typed_data.Float32x4.xxzz*/get xxzz() {
    return 160;
  },
  /*typed_data.Float32x4.xxzw*/get xxzw() {
    return 224;
  },
  /*typed_data.Float32x4.xxwx*/get xxwx() {
    return 48;
  },
  /*typed_data.Float32x4.xxwy*/get xxwy() {
    return 112;
  },
  /*typed_data.Float32x4.xxwz*/get xxwz() {
    return 176;
  },
  /*typed_data.Float32x4.xxww*/get xxww() {
    return 240;
  },
  /*typed_data.Float32x4.xyxx*/get xyxx() {
    return 4;
  },
  /*typed_data.Float32x4.xyxy*/get xyxy() {
    return 68;
  },
  /*typed_data.Float32x4.xyxz*/get xyxz() {
    return 132;
  },
  /*typed_data.Float32x4.xyxw*/get xyxw() {
    return 196;
  },
  /*typed_data.Float32x4.xyyx*/get xyyx() {
    return 20;
  },
  /*typed_data.Float32x4.xyyy*/get xyyy() {
    return 84;
  },
  /*typed_data.Float32x4.xyyz*/get xyyz() {
    return 148;
  },
  /*typed_data.Float32x4.xyyw*/get xyyw() {
    return 212;
  },
  /*typed_data.Float32x4.xyzx*/get xyzx() {
    return 36;
  },
  /*typed_data.Float32x4.xyzy*/get xyzy() {
    return 100;
  },
  /*typed_data.Float32x4.xyzz*/get xyzz() {
    return 164;
  },
  /*typed_data.Float32x4.xyzw*/get xyzw() {
    return 228;
  },
  /*typed_data.Float32x4.xywx*/get xywx() {
    return 52;
  },
  /*typed_data.Float32x4.xywy*/get xywy() {
    return 116;
  },
  /*typed_data.Float32x4.xywz*/get xywz() {
    return 180;
  },
  /*typed_data.Float32x4.xyww*/get xyww() {
    return 244;
  },
  /*typed_data.Float32x4.xzxx*/get xzxx() {
    return 8;
  },
  /*typed_data.Float32x4.xzxy*/get xzxy() {
    return 72;
  },
  /*typed_data.Float32x4.xzxz*/get xzxz() {
    return 136;
  },
  /*typed_data.Float32x4.xzxw*/get xzxw() {
    return 200;
  },
  /*typed_data.Float32x4.xzyx*/get xzyx() {
    return 24;
  },
  /*typed_data.Float32x4.xzyy*/get xzyy() {
    return 88;
  },
  /*typed_data.Float32x4.xzyz*/get xzyz() {
    return 152;
  },
  /*typed_data.Float32x4.xzyw*/get xzyw() {
    return 216;
  },
  /*typed_data.Float32x4.xzzx*/get xzzx() {
    return 40;
  },
  /*typed_data.Float32x4.xzzy*/get xzzy() {
    return 104;
  },
  /*typed_data.Float32x4.xzzz*/get xzzz() {
    return 168;
  },
  /*typed_data.Float32x4.xzzw*/get xzzw() {
    return 232;
  },
  /*typed_data.Float32x4.xzwx*/get xzwx() {
    return 56;
  },
  /*typed_data.Float32x4.xzwy*/get xzwy() {
    return 120;
  },
  /*typed_data.Float32x4.xzwz*/get xzwz() {
    return 184;
  },
  /*typed_data.Float32x4.xzww*/get xzww() {
    return 248;
  },
  /*typed_data.Float32x4.xwxx*/get xwxx() {
    return 12;
  },
  /*typed_data.Float32x4.xwxy*/get xwxy() {
    return 76;
  },
  /*typed_data.Float32x4.xwxz*/get xwxz() {
    return 140;
  },
  /*typed_data.Float32x4.xwxw*/get xwxw() {
    return 204;
  },
  /*typed_data.Float32x4.xwyx*/get xwyx() {
    return 28;
  },
  /*typed_data.Float32x4.xwyy*/get xwyy() {
    return 92;
  },
  /*typed_data.Float32x4.xwyz*/get xwyz() {
    return 156;
  },
  /*typed_data.Float32x4.xwyw*/get xwyw() {
    return 220;
  },
  /*typed_data.Float32x4.xwzx*/get xwzx() {
    return 44;
  },
  /*typed_data.Float32x4.xwzy*/get xwzy() {
    return 108;
  },
  /*typed_data.Float32x4.xwzz*/get xwzz() {
    return 172;
  },
  /*typed_data.Float32x4.xwzw*/get xwzw() {
    return 236;
  },
  /*typed_data.Float32x4.xwwx*/get xwwx() {
    return 60;
  },
  /*typed_data.Float32x4.xwwy*/get xwwy() {
    return 124;
  },
  /*typed_data.Float32x4.xwwz*/get xwwz() {
    return 188;
  },
  /*typed_data.Float32x4.xwww*/get xwww() {
    return 252;
  },
  /*typed_data.Float32x4.yxxx*/get yxxx() {
    return 1;
  },
  /*typed_data.Float32x4.yxxy*/get yxxy() {
    return 65;
  },
  /*typed_data.Float32x4.yxxz*/get yxxz() {
    return 129;
  },
  /*typed_data.Float32x4.yxxw*/get yxxw() {
    return 193;
  },
  /*typed_data.Float32x4.yxyx*/get yxyx() {
    return 17;
  },
  /*typed_data.Float32x4.yxyy*/get yxyy() {
    return 81;
  },
  /*typed_data.Float32x4.yxyz*/get yxyz() {
    return 145;
  },
  /*typed_data.Float32x4.yxyw*/get yxyw() {
    return 209;
  },
  /*typed_data.Float32x4.yxzx*/get yxzx() {
    return 33;
  },
  /*typed_data.Float32x4.yxzy*/get yxzy() {
    return 97;
  },
  /*typed_data.Float32x4.yxzz*/get yxzz() {
    return 161;
  },
  /*typed_data.Float32x4.yxzw*/get yxzw() {
    return 225;
  },
  /*typed_data.Float32x4.yxwx*/get yxwx() {
    return 49;
  },
  /*typed_data.Float32x4.yxwy*/get yxwy() {
    return 113;
  },
  /*typed_data.Float32x4.yxwz*/get yxwz() {
    return 177;
  },
  /*typed_data.Float32x4.yxww*/get yxww() {
    return 241;
  },
  /*typed_data.Float32x4.yyxx*/get yyxx() {
    return 5;
  },
  /*typed_data.Float32x4.yyxy*/get yyxy() {
    return 69;
  },
  /*typed_data.Float32x4.yyxz*/get yyxz() {
    return 133;
  },
  /*typed_data.Float32x4.yyxw*/get yyxw() {
    return 197;
  },
  /*typed_data.Float32x4.yyyx*/get yyyx() {
    return 21;
  },
  /*typed_data.Float32x4.yyyy*/get yyyy() {
    return 85;
  },
  /*typed_data.Float32x4.yyyz*/get yyyz() {
    return 149;
  },
  /*typed_data.Float32x4.yyyw*/get yyyw() {
    return 213;
  },
  /*typed_data.Float32x4.yyzx*/get yyzx() {
    return 37;
  },
  /*typed_data.Float32x4.yyzy*/get yyzy() {
    return 101;
  },
  /*typed_data.Float32x4.yyzz*/get yyzz() {
    return 165;
  },
  /*typed_data.Float32x4.yyzw*/get yyzw() {
    return 229;
  },
  /*typed_data.Float32x4.yywx*/get yywx() {
    return 53;
  },
  /*typed_data.Float32x4.yywy*/get yywy() {
    return 117;
  },
  /*typed_data.Float32x4.yywz*/get yywz() {
    return 181;
  },
  /*typed_data.Float32x4.yyww*/get yyww() {
    return 245;
  },
  /*typed_data.Float32x4.yzxx*/get yzxx() {
    return 9;
  },
  /*typed_data.Float32x4.yzxy*/get yzxy() {
    return 73;
  },
  /*typed_data.Float32x4.yzxz*/get yzxz() {
    return 137;
  },
  /*typed_data.Float32x4.yzxw*/get yzxw() {
    return 201;
  },
  /*typed_data.Float32x4.yzyx*/get yzyx() {
    return 25;
  },
  /*typed_data.Float32x4.yzyy*/get yzyy() {
    return 89;
  },
  /*typed_data.Float32x4.yzyz*/get yzyz() {
    return 153;
  },
  /*typed_data.Float32x4.yzyw*/get yzyw() {
    return 217;
  },
  /*typed_data.Float32x4.yzzx*/get yzzx() {
    return 41;
  },
  /*typed_data.Float32x4.yzzy*/get yzzy() {
    return 105;
  },
  /*typed_data.Float32x4.yzzz*/get yzzz() {
    return 169;
  },
  /*typed_data.Float32x4.yzzw*/get yzzw() {
    return 233;
  },
  /*typed_data.Float32x4.yzwx*/get yzwx() {
    return 57;
  },
  /*typed_data.Float32x4.yzwy*/get yzwy() {
    return 121;
  },
  /*typed_data.Float32x4.yzwz*/get yzwz() {
    return 185;
  },
  /*typed_data.Float32x4.yzww*/get yzww() {
    return 249;
  },
  /*typed_data.Float32x4.ywxx*/get ywxx() {
    return 13;
  },
  /*typed_data.Float32x4.ywxy*/get ywxy() {
    return 77;
  },
  /*typed_data.Float32x4.ywxz*/get ywxz() {
    return 141;
  },
  /*typed_data.Float32x4.ywxw*/get ywxw() {
    return 205;
  },
  /*typed_data.Float32x4.ywyx*/get ywyx() {
    return 29;
  },
  /*typed_data.Float32x4.ywyy*/get ywyy() {
    return 93;
  },
  /*typed_data.Float32x4.ywyz*/get ywyz() {
    return 157;
  },
  /*typed_data.Float32x4.ywyw*/get ywyw() {
    return 221;
  },
  /*typed_data.Float32x4.ywzx*/get ywzx() {
    return 45;
  },
  /*typed_data.Float32x4.ywzy*/get ywzy() {
    return 109;
  },
  /*typed_data.Float32x4.ywzz*/get ywzz() {
    return 173;
  },
  /*typed_data.Float32x4.ywzw*/get ywzw() {
    return 237;
  },
  /*typed_data.Float32x4.ywwx*/get ywwx() {
    return 61;
  },
  /*typed_data.Float32x4.ywwy*/get ywwy() {
    return 125;
  },
  /*typed_data.Float32x4.ywwz*/get ywwz() {
    return 189;
  },
  /*typed_data.Float32x4.ywww*/get ywww() {
    return 253;
  },
  /*typed_data.Float32x4.zxxx*/get zxxx() {
    return 2;
  },
  /*typed_data.Float32x4.zxxy*/get zxxy() {
    return 66;
  },
  /*typed_data.Float32x4.zxxz*/get zxxz() {
    return 130;
  },
  /*typed_data.Float32x4.zxxw*/get zxxw() {
    return 194;
  },
  /*typed_data.Float32x4.zxyx*/get zxyx() {
    return 18;
  },
  /*typed_data.Float32x4.zxyy*/get zxyy() {
    return 82;
  },
  /*typed_data.Float32x4.zxyz*/get zxyz() {
    return 146;
  },
  /*typed_data.Float32x4.zxyw*/get zxyw() {
    return 210;
  },
  /*typed_data.Float32x4.zxzx*/get zxzx() {
    return 34;
  },
  /*typed_data.Float32x4.zxzy*/get zxzy() {
    return 98;
  },
  /*typed_data.Float32x4.zxzz*/get zxzz() {
    return 162;
  },
  /*typed_data.Float32x4.zxzw*/get zxzw() {
    return 226;
  },
  /*typed_data.Float32x4.zxwx*/get zxwx() {
    return 50;
  },
  /*typed_data.Float32x4.zxwy*/get zxwy() {
    return 114;
  },
  /*typed_data.Float32x4.zxwz*/get zxwz() {
    return 178;
  },
  /*typed_data.Float32x4.zxww*/get zxww() {
    return 242;
  },
  /*typed_data.Float32x4.zyxx*/get zyxx() {
    return 6;
  },
  /*typed_data.Float32x4.zyxy*/get zyxy() {
    return 70;
  },
  /*typed_data.Float32x4.zyxz*/get zyxz() {
    return 134;
  },
  /*typed_data.Float32x4.zyxw*/get zyxw() {
    return 198;
  },
  /*typed_data.Float32x4.zyyx*/get zyyx() {
    return 22;
  },
  /*typed_data.Float32x4.zyyy*/get zyyy() {
    return 86;
  },
  /*typed_data.Float32x4.zyyz*/get zyyz() {
    return 150;
  },
  /*typed_data.Float32x4.zyyw*/get zyyw() {
    return 214;
  },
  /*typed_data.Float32x4.zyzx*/get zyzx() {
    return 38;
  },
  /*typed_data.Float32x4.zyzy*/get zyzy() {
    return 102;
  },
  /*typed_data.Float32x4.zyzz*/get zyzz() {
    return 166;
  },
  /*typed_data.Float32x4.zyzw*/get zyzw() {
    return 230;
  },
  /*typed_data.Float32x4.zywx*/get zywx() {
    return 54;
  },
  /*typed_data.Float32x4.zywy*/get zywy() {
    return 118;
  },
  /*typed_data.Float32x4.zywz*/get zywz() {
    return 182;
  },
  /*typed_data.Float32x4.zyww*/get zyww() {
    return 246;
  },
  /*typed_data.Float32x4.zzxx*/get zzxx() {
    return 10;
  },
  /*typed_data.Float32x4.zzxy*/get zzxy() {
    return 74;
  },
  /*typed_data.Float32x4.zzxz*/get zzxz() {
    return 138;
  },
  /*typed_data.Float32x4.zzxw*/get zzxw() {
    return 202;
  },
  /*typed_data.Float32x4.zzyx*/get zzyx() {
    return 26;
  },
  /*typed_data.Float32x4.zzyy*/get zzyy() {
    return 90;
  },
  /*typed_data.Float32x4.zzyz*/get zzyz() {
    return 154;
  },
  /*typed_data.Float32x4.zzyw*/get zzyw() {
    return 218;
  },
  /*typed_data.Float32x4.zzzx*/get zzzx() {
    return 42;
  },
  /*typed_data.Float32x4.zzzy*/get zzzy() {
    return 106;
  },
  /*typed_data.Float32x4.zzzz*/get zzzz() {
    return 170;
  },
  /*typed_data.Float32x4.zzzw*/get zzzw() {
    return 234;
  },
  /*typed_data.Float32x4.zzwx*/get zzwx() {
    return 58;
  },
  /*typed_data.Float32x4.zzwy*/get zzwy() {
    return 122;
  },
  /*typed_data.Float32x4.zzwz*/get zzwz() {
    return 186;
  },
  /*typed_data.Float32x4.zzww*/get zzww() {
    return 250;
  },
  /*typed_data.Float32x4.zwxx*/get zwxx() {
    return 14;
  },
  /*typed_data.Float32x4.zwxy*/get zwxy() {
    return 78;
  },
  /*typed_data.Float32x4.zwxz*/get zwxz() {
    return 142;
  },
  /*typed_data.Float32x4.zwxw*/get zwxw() {
    return 206;
  },
  /*typed_data.Float32x4.zwyx*/get zwyx() {
    return 30;
  },
  /*typed_data.Float32x4.zwyy*/get zwyy() {
    return 94;
  },
  /*typed_data.Float32x4.zwyz*/get zwyz() {
    return 158;
  },
  /*typed_data.Float32x4.zwyw*/get zwyw() {
    return 222;
  },
  /*typed_data.Float32x4.zwzx*/get zwzx() {
    return 46;
  },
  /*typed_data.Float32x4.zwzy*/get zwzy() {
    return 110;
  },
  /*typed_data.Float32x4.zwzz*/get zwzz() {
    return 174;
  },
  /*typed_data.Float32x4.zwzw*/get zwzw() {
    return 238;
  },
  /*typed_data.Float32x4.zwwx*/get zwwx() {
    return 62;
  },
  /*typed_data.Float32x4.zwwy*/get zwwy() {
    return 126;
  },
  /*typed_data.Float32x4.zwwz*/get zwwz() {
    return 190;
  },
  /*typed_data.Float32x4.zwww*/get zwww() {
    return 254;
  },
  /*typed_data.Float32x4.wxxx*/get wxxx() {
    return 3;
  },
  /*typed_data.Float32x4.wxxy*/get wxxy() {
    return 67;
  },
  /*typed_data.Float32x4.wxxz*/get wxxz() {
    return 131;
  },
  /*typed_data.Float32x4.wxxw*/get wxxw() {
    return 195;
  },
  /*typed_data.Float32x4.wxyx*/get wxyx() {
    return 19;
  },
  /*typed_data.Float32x4.wxyy*/get wxyy() {
    return 83;
  },
  /*typed_data.Float32x4.wxyz*/get wxyz() {
    return 147;
  },
  /*typed_data.Float32x4.wxyw*/get wxyw() {
    return 211;
  },
  /*typed_data.Float32x4.wxzx*/get wxzx() {
    return 35;
  },
  /*typed_data.Float32x4.wxzy*/get wxzy() {
    return 99;
  },
  /*typed_data.Float32x4.wxzz*/get wxzz() {
    return 163;
  },
  /*typed_data.Float32x4.wxzw*/get wxzw() {
    return 227;
  },
  /*typed_data.Float32x4.wxwx*/get wxwx() {
    return 51;
  },
  /*typed_data.Float32x4.wxwy*/get wxwy() {
    return 115;
  },
  /*typed_data.Float32x4.wxwz*/get wxwz() {
    return 179;
  },
  /*typed_data.Float32x4.wxww*/get wxww() {
    return 243;
  },
  /*typed_data.Float32x4.wyxx*/get wyxx() {
    return 7;
  },
  /*typed_data.Float32x4.wyxy*/get wyxy() {
    return 71;
  },
  /*typed_data.Float32x4.wyxz*/get wyxz() {
    return 135;
  },
  /*typed_data.Float32x4.wyxw*/get wyxw() {
    return 199;
  },
  /*typed_data.Float32x4.wyyx*/get wyyx() {
    return 23;
  },
  /*typed_data.Float32x4.wyyy*/get wyyy() {
    return 87;
  },
  /*typed_data.Float32x4.wyyz*/get wyyz() {
    return 151;
  },
  /*typed_data.Float32x4.wyyw*/get wyyw() {
    return 215;
  },
  /*typed_data.Float32x4.wyzx*/get wyzx() {
    return 39;
  },
  /*typed_data.Float32x4.wyzy*/get wyzy() {
    return 103;
  },
  /*typed_data.Float32x4.wyzz*/get wyzz() {
    return 167;
  },
  /*typed_data.Float32x4.wyzw*/get wyzw() {
    return 231;
  },
  /*typed_data.Float32x4.wywx*/get wywx() {
    return 55;
  },
  /*typed_data.Float32x4.wywy*/get wywy() {
    return 119;
  },
  /*typed_data.Float32x4.wywz*/get wywz() {
    return 183;
  },
  /*typed_data.Float32x4.wyww*/get wyww() {
    return 247;
  },
  /*typed_data.Float32x4.wzxx*/get wzxx() {
    return 11;
  },
  /*typed_data.Float32x4.wzxy*/get wzxy() {
    return 75;
  },
  /*typed_data.Float32x4.wzxz*/get wzxz() {
    return 139;
  },
  /*typed_data.Float32x4.wzxw*/get wzxw() {
    return 203;
  },
  /*typed_data.Float32x4.wzyx*/get wzyx() {
    return 27;
  },
  /*typed_data.Float32x4.wzyy*/get wzyy() {
    return 91;
  },
  /*typed_data.Float32x4.wzyz*/get wzyz() {
    return 155;
  },
  /*typed_data.Float32x4.wzyw*/get wzyw() {
    return 219;
  },
  /*typed_data.Float32x4.wzzx*/get wzzx() {
    return 43;
  },
  /*typed_data.Float32x4.wzzy*/get wzzy() {
    return 107;
  },
  /*typed_data.Float32x4.wzzz*/get wzzz() {
    return 171;
  },
  /*typed_data.Float32x4.wzzw*/get wzzw() {
    return 235;
  },
  /*typed_data.Float32x4.wzwx*/get wzwx() {
    return 59;
  },
  /*typed_data.Float32x4.wzwy*/get wzwy() {
    return 123;
  },
  /*typed_data.Float32x4.wzwz*/get wzwz() {
    return 187;
  },
  /*typed_data.Float32x4.wzww*/get wzww() {
    return 251;
  },
  /*typed_data.Float32x4.wwxx*/get wwxx() {
    return 15;
  },
  /*typed_data.Float32x4.wwxy*/get wwxy() {
    return 79;
  },
  /*typed_data.Float32x4.wwxz*/get wwxz() {
    return 143;
  },
  /*typed_data.Float32x4.wwxw*/get wwxw() {
    return 207;
  },
  /*typed_data.Float32x4.wwyx*/get wwyx() {
    return 31;
  },
  /*typed_data.Float32x4.wwyy*/get wwyy() {
    return 95;
  },
  /*typed_data.Float32x4.wwyz*/get wwyz() {
    return 159;
  },
  /*typed_data.Float32x4.wwyw*/get wwyw() {
    return 223;
  },
  /*typed_data.Float32x4.wwzx*/get wwzx() {
    return 47;
  },
  /*typed_data.Float32x4.wwzy*/get wwzy() {
    return 111;
  },
  /*typed_data.Float32x4.wwzz*/get wwzz() {
    return 175;
  },
  /*typed_data.Float32x4.wwzw*/get wwzw() {
    return 239;
  },
  /*typed_data.Float32x4.wwwx*/get wwwx() {
    return 63;
  },
  /*typed_data.Float32x4.wwwy*/get wwwy() {
    return 127;
  },
  /*typed_data.Float32x4.wwwz*/get wwwz() {
    return 191;
  },
  /*typed_data.Float32x4.wwww*/get wwww() {
    return 255;
  }
});
const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
(Object_ListMixin$36.new = function() {
}).prototype = Object_ListMixin$36.prototype;
dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(typed_data.Float32x4));
const Object_FixedLengthListMixin$36 = class Object_FixedLengthListMixin extends Object_ListMixin$36 {};
(Object_FixedLengthListMixin$36.new = function() {
}).prototype = Object_FixedLengthListMixin$36.prototype;
dart.applyMixin(Object_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(typed_data.Float32x4));
_native_typed_data.NativeFloat32x4List = class NativeFloat32x4List extends Object_FixedLengthListMixin$36 {
  get runtimeType() {
    return dart.wrapType(typed_data.Float32x4List);
  }
  static fromList(list) {
    if (_native_typed_data.NativeFloat32x4List.is(list)) {
      return new _native_typed_data.NativeFloat32x4List._externalStorage(_native_typed_data.NativeFloat32List.fromList(list[_storage$]));
    } else {
      return new _native_typed_data.NativeFloat32x4List._slowFromList(list);
    }
  }
  get buffer() {
    return this[_storage$].buffer;
  }
  get lengthInBytes() {
    return this[_storage$][$lengthInBytes];
  }
  get offsetInBytes() {
    return this[_storage$][$offsetInBytes];
  }
  get elementSizeInBytes() {
    return 16;
  }
  get length() {
    return (dart.notNull(this[_storage$][$length]) / 4)[$truncate]();
  }
  set length(value) {
    super.length = value;
  }
  _get(index) {
    _native_typed_data._checkValidIndex(index, this, this.length);
    let _x = this[_storage$][$_get](dart.notNull(index) * 4 + 0);
    let _y = this[_storage$][$_get](dart.notNull(index) * 4 + 1);
    let _z = this[_storage$][$_get](dart.notNull(index) * 4 + 2);
    let _w = this[_storage$][$_get](dart.notNull(index) * 4 + 3);
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  _set(index, value$) {
    let value = value$;
    typed_data.Float32x4._check(value);
    _native_typed_data._checkValidIndex(index, this, this.length);
    this[_storage$][$_set](dart.notNull(index) * 4 + 0, value.x);
    this[_storage$][$_set](dart.notNull(index) * 4 + 1, value.y);
    this[_storage$][$_set](dart.notNull(index) * 4 + 2, value.z);
    this[_storage$][$_set](dart.notNull(index) * 4 + 3, value.w);
    return value$;
  }
  sublist(start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this.length);
    return new _native_typed_data.NativeFloat32x4List._externalStorage(_native_typed_data.NativeFloat32List._check(this[_storage$][$sublist](dart.notNull(start) * 4, dart.notNull(end) * 4)));
  }
};
(_native_typed_data.NativeFloat32x4List.new = function(length) {
  this[_storage$] = _native_typed_data.NativeFloat32List.new(dart.notNull(length) * 4);
  ;
}).prototype = _native_typed_data.NativeFloat32x4List.prototype;
(_native_typed_data.NativeFloat32x4List._externalStorage = function(_storage) {
  this[_storage$] = _storage;
  ;
}).prototype = _native_typed_data.NativeFloat32x4List.prototype;
(_native_typed_data.NativeFloat32x4List._slowFromList = function(list) {
  this[_storage$] = _native_typed_data.NativeFloat32List.new(dart.notNull(list[$length]) * 4);
  for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
    let e = list[$_get](i);
    this[_storage$][$_set](i * 4 + 0, e.x);
    this[_storage$][$_set](i * 4 + 1, e.y);
    this[_storage$][$_set](i * 4 + 2, e.z);
    this[_storage$][$_set](i * 4 + 3, e.w);
  }
}).prototype = _native_typed_data.NativeFloat32x4List.prototype;
;
_native_typed_data.NativeFloat32x4List[dart.implements] = () => [typed_data.Float32x4List];
;
dart.setGetterSignature(_native_typed_data.NativeFloat32x4List, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeFloat32x4List.__proto__),
  buffer: typed_data.ByteBuffer,
  [$buffer]: typed_data.ByteBuffer,
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int,
  offsetInBytes: core.int,
  [$offsetInBytes]: core.int,
  elementSizeInBytes: core.int,
  [$elementSizeInBytes]: core.int,
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeFloat32x4List, "dart:_native_typed_data");
;
dart.defineExtensionMethods(_native_typed_data.NativeFloat32x4List, ['_get', '_set', 'sublist']);
dart.defineExtensionAccessors(_native_typed_data.NativeFloat32x4List, [
  'runtimeType',
  'buffer',
  'lengthInBytes',
  'offsetInBytes',
  'elementSizeInBytes',
  'length'
]);
typed_data.Int32x4 = class Int32x4 extends core.Object {};
(typed_data.Int32x4[dart.mixinNew] = function() {
}).prototype = typed_data.Int32x4.prototype;
;
dart.setLibraryUri(typed_data.Int32x4, "dart:typed_data");
dart.defineLazy(typed_data.Int32x4, {
  /*typed_data.Int32x4.xxxx*/get xxxx() {
    return 0;
  },
  /*typed_data.Int32x4.xxxy*/get xxxy() {
    return 64;
  },
  /*typed_data.Int32x4.xxxz*/get xxxz() {
    return 128;
  },
  /*typed_data.Int32x4.xxxw*/get xxxw() {
    return 192;
  },
  /*typed_data.Int32x4.xxyx*/get xxyx() {
    return 16;
  },
  /*typed_data.Int32x4.xxyy*/get xxyy() {
    return 80;
  },
  /*typed_data.Int32x4.xxyz*/get xxyz() {
    return 144;
  },
  /*typed_data.Int32x4.xxyw*/get xxyw() {
    return 208;
  },
  /*typed_data.Int32x4.xxzx*/get xxzx() {
    return 32;
  },
  /*typed_data.Int32x4.xxzy*/get xxzy() {
    return 96;
  },
  /*typed_data.Int32x4.xxzz*/get xxzz() {
    return 160;
  },
  /*typed_data.Int32x4.xxzw*/get xxzw() {
    return 224;
  },
  /*typed_data.Int32x4.xxwx*/get xxwx() {
    return 48;
  },
  /*typed_data.Int32x4.xxwy*/get xxwy() {
    return 112;
  },
  /*typed_data.Int32x4.xxwz*/get xxwz() {
    return 176;
  },
  /*typed_data.Int32x4.xxww*/get xxww() {
    return 240;
  },
  /*typed_data.Int32x4.xyxx*/get xyxx() {
    return 4;
  },
  /*typed_data.Int32x4.xyxy*/get xyxy() {
    return 68;
  },
  /*typed_data.Int32x4.xyxz*/get xyxz() {
    return 132;
  },
  /*typed_data.Int32x4.xyxw*/get xyxw() {
    return 196;
  },
  /*typed_data.Int32x4.xyyx*/get xyyx() {
    return 20;
  },
  /*typed_data.Int32x4.xyyy*/get xyyy() {
    return 84;
  },
  /*typed_data.Int32x4.xyyz*/get xyyz() {
    return 148;
  },
  /*typed_data.Int32x4.xyyw*/get xyyw() {
    return 212;
  },
  /*typed_data.Int32x4.xyzx*/get xyzx() {
    return 36;
  },
  /*typed_data.Int32x4.xyzy*/get xyzy() {
    return 100;
  },
  /*typed_data.Int32x4.xyzz*/get xyzz() {
    return 164;
  },
  /*typed_data.Int32x4.xyzw*/get xyzw() {
    return 228;
  },
  /*typed_data.Int32x4.xywx*/get xywx() {
    return 52;
  },
  /*typed_data.Int32x4.xywy*/get xywy() {
    return 116;
  },
  /*typed_data.Int32x4.xywz*/get xywz() {
    return 180;
  },
  /*typed_data.Int32x4.xyww*/get xyww() {
    return 244;
  },
  /*typed_data.Int32x4.xzxx*/get xzxx() {
    return 8;
  },
  /*typed_data.Int32x4.xzxy*/get xzxy() {
    return 72;
  },
  /*typed_data.Int32x4.xzxz*/get xzxz() {
    return 136;
  },
  /*typed_data.Int32x4.xzxw*/get xzxw() {
    return 200;
  },
  /*typed_data.Int32x4.xzyx*/get xzyx() {
    return 24;
  },
  /*typed_data.Int32x4.xzyy*/get xzyy() {
    return 88;
  },
  /*typed_data.Int32x4.xzyz*/get xzyz() {
    return 152;
  },
  /*typed_data.Int32x4.xzyw*/get xzyw() {
    return 216;
  },
  /*typed_data.Int32x4.xzzx*/get xzzx() {
    return 40;
  },
  /*typed_data.Int32x4.xzzy*/get xzzy() {
    return 104;
  },
  /*typed_data.Int32x4.xzzz*/get xzzz() {
    return 168;
  },
  /*typed_data.Int32x4.xzzw*/get xzzw() {
    return 232;
  },
  /*typed_data.Int32x4.xzwx*/get xzwx() {
    return 56;
  },
  /*typed_data.Int32x4.xzwy*/get xzwy() {
    return 120;
  },
  /*typed_data.Int32x4.xzwz*/get xzwz() {
    return 184;
  },
  /*typed_data.Int32x4.xzww*/get xzww() {
    return 248;
  },
  /*typed_data.Int32x4.xwxx*/get xwxx() {
    return 12;
  },
  /*typed_data.Int32x4.xwxy*/get xwxy() {
    return 76;
  },
  /*typed_data.Int32x4.xwxz*/get xwxz() {
    return 140;
  },
  /*typed_data.Int32x4.xwxw*/get xwxw() {
    return 204;
  },
  /*typed_data.Int32x4.xwyx*/get xwyx() {
    return 28;
  },
  /*typed_data.Int32x4.xwyy*/get xwyy() {
    return 92;
  },
  /*typed_data.Int32x4.xwyz*/get xwyz() {
    return 156;
  },
  /*typed_data.Int32x4.xwyw*/get xwyw() {
    return 220;
  },
  /*typed_data.Int32x4.xwzx*/get xwzx() {
    return 44;
  },
  /*typed_data.Int32x4.xwzy*/get xwzy() {
    return 108;
  },
  /*typed_data.Int32x4.xwzz*/get xwzz() {
    return 172;
  },
  /*typed_data.Int32x4.xwzw*/get xwzw() {
    return 236;
  },
  /*typed_data.Int32x4.xwwx*/get xwwx() {
    return 60;
  },
  /*typed_data.Int32x4.xwwy*/get xwwy() {
    return 124;
  },
  /*typed_data.Int32x4.xwwz*/get xwwz() {
    return 188;
  },
  /*typed_data.Int32x4.xwww*/get xwww() {
    return 252;
  },
  /*typed_data.Int32x4.yxxx*/get yxxx() {
    return 1;
  },
  /*typed_data.Int32x4.yxxy*/get yxxy() {
    return 65;
  },
  /*typed_data.Int32x4.yxxz*/get yxxz() {
    return 129;
  },
  /*typed_data.Int32x4.yxxw*/get yxxw() {
    return 193;
  },
  /*typed_data.Int32x4.yxyx*/get yxyx() {
    return 17;
  },
  /*typed_data.Int32x4.yxyy*/get yxyy() {
    return 81;
  },
  /*typed_data.Int32x4.yxyz*/get yxyz() {
    return 145;
  },
  /*typed_data.Int32x4.yxyw*/get yxyw() {
    return 209;
  },
  /*typed_data.Int32x4.yxzx*/get yxzx() {
    return 33;
  },
  /*typed_data.Int32x4.yxzy*/get yxzy() {
    return 97;
  },
  /*typed_data.Int32x4.yxzz*/get yxzz() {
    return 161;
  },
  /*typed_data.Int32x4.yxzw*/get yxzw() {
    return 225;
  },
  /*typed_data.Int32x4.yxwx*/get yxwx() {
    return 49;
  },
  /*typed_data.Int32x4.yxwy*/get yxwy() {
    return 113;
  },
  /*typed_data.Int32x4.yxwz*/get yxwz() {
    return 177;
  },
  /*typed_data.Int32x4.yxww*/get yxww() {
    return 241;
  },
  /*typed_data.Int32x4.yyxx*/get yyxx() {
    return 5;
  },
  /*typed_data.Int32x4.yyxy*/get yyxy() {
    return 69;
  },
  /*typed_data.Int32x4.yyxz*/get yyxz() {
    return 133;
  },
  /*typed_data.Int32x4.yyxw*/get yyxw() {
    return 197;
  },
  /*typed_data.Int32x4.yyyx*/get yyyx() {
    return 21;
  },
  /*typed_data.Int32x4.yyyy*/get yyyy() {
    return 85;
  },
  /*typed_data.Int32x4.yyyz*/get yyyz() {
    return 149;
  },
  /*typed_data.Int32x4.yyyw*/get yyyw() {
    return 213;
  },
  /*typed_data.Int32x4.yyzx*/get yyzx() {
    return 37;
  },
  /*typed_data.Int32x4.yyzy*/get yyzy() {
    return 101;
  },
  /*typed_data.Int32x4.yyzz*/get yyzz() {
    return 165;
  },
  /*typed_data.Int32x4.yyzw*/get yyzw() {
    return 229;
  },
  /*typed_data.Int32x4.yywx*/get yywx() {
    return 53;
  },
  /*typed_data.Int32x4.yywy*/get yywy() {
    return 117;
  },
  /*typed_data.Int32x4.yywz*/get yywz() {
    return 181;
  },
  /*typed_data.Int32x4.yyww*/get yyww() {
    return 245;
  },
  /*typed_data.Int32x4.yzxx*/get yzxx() {
    return 9;
  },
  /*typed_data.Int32x4.yzxy*/get yzxy() {
    return 73;
  },
  /*typed_data.Int32x4.yzxz*/get yzxz() {
    return 137;
  },
  /*typed_data.Int32x4.yzxw*/get yzxw() {
    return 201;
  },
  /*typed_data.Int32x4.yzyx*/get yzyx() {
    return 25;
  },
  /*typed_data.Int32x4.yzyy*/get yzyy() {
    return 89;
  },
  /*typed_data.Int32x4.yzyz*/get yzyz() {
    return 153;
  },
  /*typed_data.Int32x4.yzyw*/get yzyw() {
    return 217;
  },
  /*typed_data.Int32x4.yzzx*/get yzzx() {
    return 41;
  },
  /*typed_data.Int32x4.yzzy*/get yzzy() {
    return 105;
  },
  /*typed_data.Int32x4.yzzz*/get yzzz() {
    return 169;
  },
  /*typed_data.Int32x4.yzzw*/get yzzw() {
    return 233;
  },
  /*typed_data.Int32x4.yzwx*/get yzwx() {
    return 57;
  },
  /*typed_data.Int32x4.yzwy*/get yzwy() {
    return 121;
  },
  /*typed_data.Int32x4.yzwz*/get yzwz() {
    return 185;
  },
  /*typed_data.Int32x4.yzww*/get yzww() {
    return 249;
  },
  /*typed_data.Int32x4.ywxx*/get ywxx() {
    return 13;
  },
  /*typed_data.Int32x4.ywxy*/get ywxy() {
    return 77;
  },
  /*typed_data.Int32x4.ywxz*/get ywxz() {
    return 141;
  },
  /*typed_data.Int32x4.ywxw*/get ywxw() {
    return 205;
  },
  /*typed_data.Int32x4.ywyx*/get ywyx() {
    return 29;
  },
  /*typed_data.Int32x4.ywyy*/get ywyy() {
    return 93;
  },
  /*typed_data.Int32x4.ywyz*/get ywyz() {
    return 157;
  },
  /*typed_data.Int32x4.ywyw*/get ywyw() {
    return 221;
  },
  /*typed_data.Int32x4.ywzx*/get ywzx() {
    return 45;
  },
  /*typed_data.Int32x4.ywzy*/get ywzy() {
    return 109;
  },
  /*typed_data.Int32x4.ywzz*/get ywzz() {
    return 173;
  },
  /*typed_data.Int32x4.ywzw*/get ywzw() {
    return 237;
  },
  /*typed_data.Int32x4.ywwx*/get ywwx() {
    return 61;
  },
  /*typed_data.Int32x4.ywwy*/get ywwy() {
    return 125;
  },
  /*typed_data.Int32x4.ywwz*/get ywwz() {
    return 189;
  },
  /*typed_data.Int32x4.ywww*/get ywww() {
    return 253;
  },
  /*typed_data.Int32x4.zxxx*/get zxxx() {
    return 2;
  },
  /*typed_data.Int32x4.zxxy*/get zxxy() {
    return 66;
  },
  /*typed_data.Int32x4.zxxz*/get zxxz() {
    return 130;
  },
  /*typed_data.Int32x4.zxxw*/get zxxw() {
    return 194;
  },
  /*typed_data.Int32x4.zxyx*/get zxyx() {
    return 18;
  },
  /*typed_data.Int32x4.zxyy*/get zxyy() {
    return 82;
  },
  /*typed_data.Int32x4.zxyz*/get zxyz() {
    return 146;
  },
  /*typed_data.Int32x4.zxyw*/get zxyw() {
    return 210;
  },
  /*typed_data.Int32x4.zxzx*/get zxzx() {
    return 34;
  },
  /*typed_data.Int32x4.zxzy*/get zxzy() {
    return 98;
  },
  /*typed_data.Int32x4.zxzz*/get zxzz() {
    return 162;
  },
  /*typed_data.Int32x4.zxzw*/get zxzw() {
    return 226;
  },
  /*typed_data.Int32x4.zxwx*/get zxwx() {
    return 50;
  },
  /*typed_data.Int32x4.zxwy*/get zxwy() {
    return 114;
  },
  /*typed_data.Int32x4.zxwz*/get zxwz() {
    return 178;
  },
  /*typed_data.Int32x4.zxww*/get zxww() {
    return 242;
  },
  /*typed_data.Int32x4.zyxx*/get zyxx() {
    return 6;
  },
  /*typed_data.Int32x4.zyxy*/get zyxy() {
    return 70;
  },
  /*typed_data.Int32x4.zyxz*/get zyxz() {
    return 134;
  },
  /*typed_data.Int32x4.zyxw*/get zyxw() {
    return 198;
  },
  /*typed_data.Int32x4.zyyx*/get zyyx() {
    return 22;
  },
  /*typed_data.Int32x4.zyyy*/get zyyy() {
    return 86;
  },
  /*typed_data.Int32x4.zyyz*/get zyyz() {
    return 150;
  },
  /*typed_data.Int32x4.zyyw*/get zyyw() {
    return 214;
  },
  /*typed_data.Int32x4.zyzx*/get zyzx() {
    return 38;
  },
  /*typed_data.Int32x4.zyzy*/get zyzy() {
    return 102;
  },
  /*typed_data.Int32x4.zyzz*/get zyzz() {
    return 166;
  },
  /*typed_data.Int32x4.zyzw*/get zyzw() {
    return 230;
  },
  /*typed_data.Int32x4.zywx*/get zywx() {
    return 54;
  },
  /*typed_data.Int32x4.zywy*/get zywy() {
    return 118;
  },
  /*typed_data.Int32x4.zywz*/get zywz() {
    return 182;
  },
  /*typed_data.Int32x4.zyww*/get zyww() {
    return 246;
  },
  /*typed_data.Int32x4.zzxx*/get zzxx() {
    return 10;
  },
  /*typed_data.Int32x4.zzxy*/get zzxy() {
    return 74;
  },
  /*typed_data.Int32x4.zzxz*/get zzxz() {
    return 138;
  },
  /*typed_data.Int32x4.zzxw*/get zzxw() {
    return 202;
  },
  /*typed_data.Int32x4.zzyx*/get zzyx() {
    return 26;
  },
  /*typed_data.Int32x4.zzyy*/get zzyy() {
    return 90;
  },
  /*typed_data.Int32x4.zzyz*/get zzyz() {
    return 154;
  },
  /*typed_data.Int32x4.zzyw*/get zzyw() {
    return 218;
  },
  /*typed_data.Int32x4.zzzx*/get zzzx() {
    return 42;
  },
  /*typed_data.Int32x4.zzzy*/get zzzy() {
    return 106;
  },
  /*typed_data.Int32x4.zzzz*/get zzzz() {
    return 170;
  },
  /*typed_data.Int32x4.zzzw*/get zzzw() {
    return 234;
  },
  /*typed_data.Int32x4.zzwx*/get zzwx() {
    return 58;
  },
  /*typed_data.Int32x4.zzwy*/get zzwy() {
    return 122;
  },
  /*typed_data.Int32x4.zzwz*/get zzwz() {
    return 186;
  },
  /*typed_data.Int32x4.zzww*/get zzww() {
    return 250;
  },
  /*typed_data.Int32x4.zwxx*/get zwxx() {
    return 14;
  },
  /*typed_data.Int32x4.zwxy*/get zwxy() {
    return 78;
  },
  /*typed_data.Int32x4.zwxz*/get zwxz() {
    return 142;
  },
  /*typed_data.Int32x4.zwxw*/get zwxw() {
    return 206;
  },
  /*typed_data.Int32x4.zwyx*/get zwyx() {
    return 30;
  },
  /*typed_data.Int32x4.zwyy*/get zwyy() {
    return 94;
  },
  /*typed_data.Int32x4.zwyz*/get zwyz() {
    return 158;
  },
  /*typed_data.Int32x4.zwyw*/get zwyw() {
    return 222;
  },
  /*typed_data.Int32x4.zwzx*/get zwzx() {
    return 46;
  },
  /*typed_data.Int32x4.zwzy*/get zwzy() {
    return 110;
  },
  /*typed_data.Int32x4.zwzz*/get zwzz() {
    return 174;
  },
  /*typed_data.Int32x4.zwzw*/get zwzw() {
    return 238;
  },
  /*typed_data.Int32x4.zwwx*/get zwwx() {
    return 62;
  },
  /*typed_data.Int32x4.zwwy*/get zwwy() {
    return 126;
  },
  /*typed_data.Int32x4.zwwz*/get zwwz() {
    return 190;
  },
  /*typed_data.Int32x4.zwww*/get zwww() {
    return 254;
  },
  /*typed_data.Int32x4.wxxx*/get wxxx() {
    return 3;
  },
  /*typed_data.Int32x4.wxxy*/get wxxy() {
    return 67;
  },
  /*typed_data.Int32x4.wxxz*/get wxxz() {
    return 131;
  },
  /*typed_data.Int32x4.wxxw*/get wxxw() {
    return 195;
  },
  /*typed_data.Int32x4.wxyx*/get wxyx() {
    return 19;
  },
  /*typed_data.Int32x4.wxyy*/get wxyy() {
    return 83;
  },
  /*typed_data.Int32x4.wxyz*/get wxyz() {
    return 147;
  },
  /*typed_data.Int32x4.wxyw*/get wxyw() {
    return 211;
  },
  /*typed_data.Int32x4.wxzx*/get wxzx() {
    return 35;
  },
  /*typed_data.Int32x4.wxzy*/get wxzy() {
    return 99;
  },
  /*typed_data.Int32x4.wxzz*/get wxzz() {
    return 163;
  },
  /*typed_data.Int32x4.wxzw*/get wxzw() {
    return 227;
  },
  /*typed_data.Int32x4.wxwx*/get wxwx() {
    return 51;
  },
  /*typed_data.Int32x4.wxwy*/get wxwy() {
    return 115;
  },
  /*typed_data.Int32x4.wxwz*/get wxwz() {
    return 179;
  },
  /*typed_data.Int32x4.wxww*/get wxww() {
    return 243;
  },
  /*typed_data.Int32x4.wyxx*/get wyxx() {
    return 7;
  },
  /*typed_data.Int32x4.wyxy*/get wyxy() {
    return 71;
  },
  /*typed_data.Int32x4.wyxz*/get wyxz() {
    return 135;
  },
  /*typed_data.Int32x4.wyxw*/get wyxw() {
    return 199;
  },
  /*typed_data.Int32x4.wyyx*/get wyyx() {
    return 23;
  },
  /*typed_data.Int32x4.wyyy*/get wyyy() {
    return 87;
  },
  /*typed_data.Int32x4.wyyz*/get wyyz() {
    return 151;
  },
  /*typed_data.Int32x4.wyyw*/get wyyw() {
    return 215;
  },
  /*typed_data.Int32x4.wyzx*/get wyzx() {
    return 39;
  },
  /*typed_data.Int32x4.wyzy*/get wyzy() {
    return 103;
  },
  /*typed_data.Int32x4.wyzz*/get wyzz() {
    return 167;
  },
  /*typed_data.Int32x4.wyzw*/get wyzw() {
    return 231;
  },
  /*typed_data.Int32x4.wywx*/get wywx() {
    return 55;
  },
  /*typed_data.Int32x4.wywy*/get wywy() {
    return 119;
  },
  /*typed_data.Int32x4.wywz*/get wywz() {
    return 183;
  },
  /*typed_data.Int32x4.wyww*/get wyww() {
    return 247;
  },
  /*typed_data.Int32x4.wzxx*/get wzxx() {
    return 11;
  },
  /*typed_data.Int32x4.wzxy*/get wzxy() {
    return 75;
  },
  /*typed_data.Int32x4.wzxz*/get wzxz() {
    return 139;
  },
  /*typed_data.Int32x4.wzxw*/get wzxw() {
    return 203;
  },
  /*typed_data.Int32x4.wzyx*/get wzyx() {
    return 27;
  },
  /*typed_data.Int32x4.wzyy*/get wzyy() {
    return 91;
  },
  /*typed_data.Int32x4.wzyz*/get wzyz() {
    return 155;
  },
  /*typed_data.Int32x4.wzyw*/get wzyw() {
    return 219;
  },
  /*typed_data.Int32x4.wzzx*/get wzzx() {
    return 43;
  },
  /*typed_data.Int32x4.wzzy*/get wzzy() {
    return 107;
  },
  /*typed_data.Int32x4.wzzz*/get wzzz() {
    return 171;
  },
  /*typed_data.Int32x4.wzzw*/get wzzw() {
    return 235;
  },
  /*typed_data.Int32x4.wzwx*/get wzwx() {
    return 59;
  },
  /*typed_data.Int32x4.wzwy*/get wzwy() {
    return 123;
  },
  /*typed_data.Int32x4.wzwz*/get wzwz() {
    return 187;
  },
  /*typed_data.Int32x4.wzww*/get wzww() {
    return 251;
  },
  /*typed_data.Int32x4.wwxx*/get wwxx() {
    return 15;
  },
  /*typed_data.Int32x4.wwxy*/get wwxy() {
    return 79;
  },
  /*typed_data.Int32x4.wwxz*/get wwxz() {
    return 143;
  },
  /*typed_data.Int32x4.wwxw*/get wwxw() {
    return 207;
  },
  /*typed_data.Int32x4.wwyx*/get wwyx() {
    return 31;
  },
  /*typed_data.Int32x4.wwyy*/get wwyy() {
    return 95;
  },
  /*typed_data.Int32x4.wwyz*/get wwyz() {
    return 159;
  },
  /*typed_data.Int32x4.wwyw*/get wwyw() {
    return 223;
  },
  /*typed_data.Int32x4.wwzx*/get wwzx() {
    return 47;
  },
  /*typed_data.Int32x4.wwzy*/get wwzy() {
    return 111;
  },
  /*typed_data.Int32x4.wwzz*/get wwzz() {
    return 175;
  },
  /*typed_data.Int32x4.wwzw*/get wwzw() {
    return 239;
  },
  /*typed_data.Int32x4.wwwx*/get wwwx() {
    return 63;
  },
  /*typed_data.Int32x4.wwwy*/get wwwy() {
    return 127;
  },
  /*typed_data.Int32x4.wwwz*/get wwwz() {
    return 191;
  },
  /*typed_data.Int32x4.wwww*/get wwww() {
    return 255;
  }
});
const Object_ListMixin$36$ = class Object_ListMixin extends core.Object {};
(Object_ListMixin$36$.new = function() {
}).prototype = Object_ListMixin$36$.prototype;
dart.applyMixin(Object_ListMixin$36$, collection.ListMixin$(typed_data.Int32x4));
const Object_FixedLengthListMixin$36$ = class Object_FixedLengthListMixin extends Object_ListMixin$36$ {};
(Object_FixedLengthListMixin$36$.new = function() {
}).prototype = Object_FixedLengthListMixin$36$.prototype;
dart.applyMixin(Object_FixedLengthListMixin$36$, _internal.FixedLengthListMixin$(typed_data.Int32x4));
_native_typed_data.NativeInt32x4List = class NativeInt32x4List extends Object_FixedLengthListMixin$36$ {
  get runtimeType() {
    return dart.wrapType(typed_data.Int32x4List);
  }
  static fromList(list) {
    if (_native_typed_data.NativeInt32x4List.is(list)) {
      return new _native_typed_data.NativeInt32x4List._externalStorage(_native_typed_data.NativeInt32List.fromList(list[_storage$]));
    } else {
      return new _native_typed_data.NativeInt32x4List._slowFromList(list);
    }
  }
  get buffer() {
    return this[_storage$][$buffer];
  }
  get lengthInBytes() {
    return this[_storage$][$lengthInBytes];
  }
  get offsetInBytes() {
    return this[_storage$][$offsetInBytes];
  }
  get elementSizeInBytes() {
    return 16;
  }
  get length() {
    return (dart.notNull(this[_storage$][$length]) / 4)[$truncate]();
  }
  set length(value) {
    super.length = value;
  }
  _get(index) {
    _native_typed_data._checkValidIndex(index, this, this.length);
    let _x = this[_storage$][$_get](dart.notNull(index) * 4 + 0);
    let _y = this[_storage$][$_get](dart.notNull(index) * 4 + 1);
    let _z = this[_storage$][$_get](dart.notNull(index) * 4 + 2);
    let _w = this[_storage$][$_get](dart.notNull(index) * 4 + 3);
    return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
  }
  _set(index, value$) {
    let value = value$;
    typed_data.Int32x4._check(value);
    _native_typed_data._checkValidIndex(index, this, this.length);
    this[_storage$][$_set](dart.notNull(index) * 4 + 0, value.x);
    this[_storage$][$_set](dart.notNull(index) * 4 + 1, value.y);
    this[_storage$][$_set](dart.notNull(index) * 4 + 2, value.z);
    this[_storage$][$_set](dart.notNull(index) * 4 + 3, value.w);
    return value$;
  }
  sublist(start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this.length);
    return new _native_typed_data.NativeInt32x4List._externalStorage(this[_storage$][$sublist](dart.notNull(start) * 4, dart.notNull(end) * 4));
  }
};
(_native_typed_data.NativeInt32x4List.new = function(length) {
  this[_storage$] = _native_typed_data.NativeInt32List.new(dart.notNull(length) * 4);
  ;
}).prototype = _native_typed_data.NativeInt32x4List.prototype;
(_native_typed_data.NativeInt32x4List._externalStorage = function(storage) {
  this[_storage$] = storage;
  ;
}).prototype = _native_typed_data.NativeInt32x4List.prototype;
(_native_typed_data.NativeInt32x4List._slowFromList = function(list) {
  this[_storage$] = _native_typed_data.NativeInt32List.new(dart.notNull(list[$length]) * 4);
  for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
    let e = list[$_get](i);
    this[_storage$][$_set](i * 4 + 0, e.x);
    this[_storage$][$_set](i * 4 + 1, e.y);
    this[_storage$][$_set](i * 4 + 2, e.z);
    this[_storage$][$_set](i * 4 + 3, e.w);
  }
}).prototype = _native_typed_data.NativeInt32x4List.prototype;
;
_native_typed_data.NativeInt32x4List[dart.implements] = () => [typed_data.Int32x4List];
;
dart.setGetterSignature(_native_typed_data.NativeInt32x4List, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeInt32x4List.__proto__),
  buffer: typed_data.ByteBuffer,
  [$buffer]: typed_data.ByteBuffer,
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int,
  offsetInBytes: core.int,
  [$offsetInBytes]: core.int,
  elementSizeInBytes: core.int,
  [$elementSizeInBytes]: core.int,
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeInt32x4List, "dart:_native_typed_data");
;
dart.defineExtensionMethods(_native_typed_data.NativeInt32x4List, ['_get', '_set', 'sublist']);
dart.defineExtensionAccessors(_native_typed_data.NativeInt32x4List, [
  'runtimeType',
  'buffer',
  'lengthInBytes',
  'offsetInBytes',
  'elementSizeInBytes',
  'length'
]);
typed_data.Float64x2 = class Float64x2 extends core.Object {};
(typed_data.Float64x2[dart.mixinNew] = function() {
}).prototype = typed_data.Float64x2.prototype;
;
dart.setLibraryUri(typed_data.Float64x2, "dart:typed_data");
const Object_ListMixin$36$0 = class Object_ListMixin extends core.Object {};
(Object_ListMixin$36$0.new = function() {
}).prototype = Object_ListMixin$36$0.prototype;
dart.applyMixin(Object_ListMixin$36$0, collection.ListMixin$(typed_data.Float64x2));
const Object_FixedLengthListMixin$36$0 = class Object_FixedLengthListMixin extends Object_ListMixin$36$0 {};
(Object_FixedLengthListMixin$36$0.new = function() {
}).prototype = Object_FixedLengthListMixin$36$0.prototype;
dart.applyMixin(Object_FixedLengthListMixin$36$0, _internal.FixedLengthListMixin$(typed_data.Float64x2));
_native_typed_data.NativeFloat64x2List = class NativeFloat64x2List extends Object_FixedLengthListMixin$36$0 {
  static fromList(list) {
    if (_native_typed_data.NativeFloat64x2List.is(list)) {
      return new _native_typed_data.NativeFloat64x2List._externalStorage(_native_typed_data.NativeFloat64List.fromList(list[_storage$]));
    } else {
      return new _native_typed_data.NativeFloat64x2List._slowFromList(list);
    }
  }
  get runtimeType() {
    return dart.wrapType(typed_data.Float64x2List);
  }
  get buffer() {
    return this[_storage$].buffer;
  }
  get lengthInBytes() {
    return this[_storage$][$lengthInBytes];
  }
  get offsetInBytes() {
    return this[_storage$][$offsetInBytes];
  }
  get elementSizeInBytes() {
    return 16;
  }
  get length() {
    return (dart.notNull(this[_storage$][$length]) / 2)[$truncate]();
  }
  set length(value) {
    super.length = value;
  }
  _get(index) {
    _native_typed_data._checkValidIndex(index, this, this.length);
    let _x = this[_storage$][$_get](dart.notNull(index) * 2 + 0);
    let _y = this[_storage$][$_get](dart.notNull(index) * 2 + 1);
    return new _native_typed_data.NativeFloat64x2.new(_x, _y);
  }
  _set(index, value$) {
    let value = value$;
    typed_data.Float64x2._check(value);
    _native_typed_data._checkValidIndex(index, this, this.length);
    this[_storage$][$_set](dart.notNull(index) * 2 + 0, value.x);
    this[_storage$][$_set](dart.notNull(index) * 2 + 1, value.y);
    return value$;
  }
  sublist(start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this.length);
    return new _native_typed_data.NativeFloat64x2List._externalStorage(_native_typed_data.NativeFloat64List._check(this[_storage$][$sublist](dart.notNull(start) * 2, dart.notNull(end) * 2)));
  }
};
(_native_typed_data.NativeFloat64x2List.new = function(length) {
  this[_storage$] = _native_typed_data.NativeFloat64List.new(dart.notNull(length) * 2);
  ;
}).prototype = _native_typed_data.NativeFloat64x2List.prototype;
(_native_typed_data.NativeFloat64x2List._externalStorage = function(_storage) {
  this[_storage$] = _storage;
  ;
}).prototype = _native_typed_data.NativeFloat64x2List.prototype;
(_native_typed_data.NativeFloat64x2List._slowFromList = function(list) {
  this[_storage$] = _native_typed_data.NativeFloat64List.new(dart.notNull(list[$length]) * 2);
  for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
    let e = list[$_get](i);
    this[_storage$][$_set](i * 2 + 0, e.x);
    this[_storage$][$_set](i * 2 + 1, e.y);
  }
}).prototype = _native_typed_data.NativeFloat64x2List.prototype;
;
_native_typed_data.NativeFloat64x2List[dart.implements] = () => [typed_data.Float64x2List];
;
dart.setGetterSignature(_native_typed_data.NativeFloat64x2List, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeFloat64x2List.__proto__),
  buffer: typed_data.ByteBuffer,
  [$buffer]: typed_data.ByteBuffer,
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int,
  offsetInBytes: core.int,
  [$offsetInBytes]: core.int,
  elementSizeInBytes: core.int,
  [$elementSizeInBytes]: core.int,
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeFloat64x2List, "dart:_native_typed_data");
;
dart.defineExtensionMethods(_native_typed_data.NativeFloat64x2List, ['_get', '_set', 'sublist']);
dart.defineExtensionAccessors(_native_typed_data.NativeFloat64x2List, [
  'runtimeType',
  'buffer',
  'lengthInBytes',
  'offsetInBytes',
  'elementSizeInBytes',
  'length'
]);
const _invalidPosition = dart.privateName(_native_typed_data, "_invalidPosition");
const _checkPosition = dart.privateName(_native_typed_data, "_checkPosition");
_native_typed_data.NativeTypedData = class NativeTypedData extends core.Object {
  get [$buffer]() {
    return this.buffer;
  }
  get [$lengthInBytes]() {
    return this.byteLength;
  }
  get [$offsetInBytes]() {
    return this.byteOffset;
  }
  get [$elementSizeInBytes]() {
    return this.BYTES_PER_ELEMENT;
  }
  [_invalidPosition](position, length, name) {
    if (!core.int.is(position)) {
      dart.throw(new core.ArgumentError.value(position, name, "Invalid list position"));
    } else {
      dart.throw(new core.RangeError.range(position, 0, length, name));
    }
  }
  [_checkPosition](position, length, name) {
    if (position >>> 0 !== position || position > dart.notNull(length)) {
      this[_invalidPosition](position, length, name);
    }
  }
};
(_native_typed_data.NativeTypedData.new = function() {
  ;
}).prototype = _native_typed_data.NativeTypedData.prototype;
;
_native_typed_data.NativeTypedData[dart.implements] = () => [typed_data.TypedData];
;
dart.setGetterSignature(_native_typed_data.NativeTypedData, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeTypedData.__proto__),
  [$buffer]: typed_data.ByteBuffer,
  [$lengthInBytes]: core.int,
  [$offsetInBytes]: core.int,
  [$elementSizeInBytes]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeTypedData, "dart:_native_typed_data");
dart.registerExtension("ArrayBufferView", _native_typed_data.NativeTypedData);
const Endian__littleEndian = dart.privateName(typed_data, "Endian._littleEndian");
let C97;
const _getFloat32 = dart.privateName(_native_typed_data, "_getFloat32");
const _getFloat64 = dart.privateName(_native_typed_data, "_getFloat64");
const _getInt16 = dart.privateName(_native_typed_data, "_getInt16");
const _getInt32 = dart.privateName(_native_typed_data, "_getInt32");
const _getUint16 = dart.privateName(_native_typed_data, "_getUint16");
const _getUint32 = dart.privateName(_native_typed_data, "_getUint32");
const _setFloat32 = dart.privateName(_native_typed_data, "_setFloat32");
const _setFloat64 = dart.privateName(_native_typed_data, "_setFloat64");
const _setInt16 = dart.privateName(_native_typed_data, "_setInt16");
const _setInt32 = dart.privateName(_native_typed_data, "_setInt32");
const _setUint16 = dart.privateName(_native_typed_data, "_setUint16");
const _setUint32 = dart.privateName(_native_typed_data, "_setUint32");
_native_typed_data.NativeByteData = class NativeByteData extends _native_typed_data.NativeTypedData {
  static new(length) {
    return _native_typed_data.NativeByteData._create1(_native_typed_data._checkLength(length));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeByteData._create2(buffer, offsetInBytes) : _native_typed_data.NativeByteData._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.ByteData);
  }
  get [$elementSizeInBytes]() {
    return 1;
  }
  [$getFloat32](byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_getFloat32](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getFloat32](...args) {
    return this.getFloat32.apply(this, args);
  }
  [$getFloat64](byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_getFloat64](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getFloat64](...args) {
    return this.getFloat64.apply(this, args);
  }
  [$getInt16](byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_getInt16](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getInt16](...args) {
    return this.getInt16.apply(this, args);
  }
  [$getInt32](byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_getInt32](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getInt32](...args) {
    return this.getInt32.apply(this, args);
  }
  [$getInt64](byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    dart.throw(new core.UnsupportedError.new("Int64 accessor not supported by dart2js."));
  }
  [$getInt8](...args) {
    return this.getInt8.apply(this, args);
  }
  [$getUint16](byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_getUint16](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getUint16](...args) {
    return this.getUint16.apply(this, args);
  }
  [$getUint32](byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_getUint32](byteOffset, dart.equals(typed_data.Endian.little, endian));
  }
  [_getUint32](...args) {
    return this.getUint32.apply(this, args);
  }
  [$getUint64](byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    dart.throw(new core.UnsupportedError.new("Uint64 accessor not supported by dart2js."));
  }
  [$getUint8](...args) {
    return this.getUint8.apply(this, args);
  }
  [$setFloat32](byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_setFloat32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setFloat32](...args) {
    return this.setFloat32.apply(this, args);
  }
  [$setFloat64](byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_setFloat64](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setFloat64](...args) {
    return this.setFloat64.apply(this, args);
  }
  [$setInt16](byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_setInt16](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setInt16](...args) {
    return this.setInt16.apply(this, args);
  }
  [$setInt32](byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_setInt32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setInt32](...args) {
    return this.setInt32.apply(this, args);
  }
  [$setInt64](byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    dart.throw(new core.UnsupportedError.new("Int64 accessor not supported by dart2js."));
  }
  [$setInt8](...args) {
    return this.setInt8.apply(this, args);
  }
  [$setUint16](byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_setUint16](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setUint16](...args) {
    return this.setUint16.apply(this, args);
  }
  [$setUint32](byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_setUint32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
  }
  [_setUint32](...args) {
    return this.setUint32.apply(this, args);
  }
  [$setUint64](byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    dart.throw(new core.UnsupportedError.new("Uint64 accessor not supported by dart2js."));
  }
  [$setUint8](...args) {
    return this.setUint8.apply(this, args);
  }
  static _create1(arg) {
    return new DataView(new ArrayBuffer(arg));
  }
  static _create2(arg1, arg2) {
    return new DataView(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new DataView(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeByteData[dart.implements] = () => [typed_data.ByteData];
;
dart.setLibraryUri(_native_typed_data.NativeByteData, "dart:_native_typed_data");
dart.registerExtension("DataView", _native_typed_data.NativeByteData);
const _setRangeFast = dart.privateName(_native_typed_data, "_setRangeFast");
_native_typed_data.NativeTypedArray = class NativeTypedArray extends _native_typed_data.NativeTypedData {
  [_setRangeFast](start, end, source, skipCount) {
    let targetLength = this[$length];
    this[_checkPosition](start, targetLength, "start");
    this[_checkPosition](end, targetLength, "end");
    if (dart.notNull(start) > dart.notNull(end)) dart.throw(new core.RangeError.range(start, 0, end));
    let count = dart.notNull(end) - dart.notNull(start);
    if (dart.notNull(skipCount) < 0) dart.throw(new core.ArgumentError.new(skipCount));
    let sourceLength = source[$length];
    if (dart.notNull(sourceLength) - dart.notNull(skipCount) < count) {
      dart.throw(new core.StateError.new("Not enough elements"));
    }
    if (skipCount !== 0 || sourceLength !== count) {
      source = source.subarray(skipCount, dart.notNull(skipCount) + count);
    }
    this.set(source, start);
  }
};
(_native_typed_data.NativeTypedArray.new = function() {
  ;
}).prototype = _native_typed_data.NativeTypedArray.prototype;
;
_native_typed_data.NativeTypedArray[dart.implements] = () => [_js_helper.JavaScriptIndexingBehavior];
;
dart.setLibraryUri(_native_typed_data.NativeTypedArray, "dart:_native_typed_data");
core.double = class double extends core.num {
  static is(o) {
    return typeof o == "number";
  }
  static as(o) {
    if (typeof o == "number" || o == null) return o;
    return dart.as(o, core.double, false);
  }
  static _check(o) {
    if (typeof o == "number" || o == null) return o;
    return dart.as(o, core.double, true);
  }
  static parse(source, onError) {
    if (onError === void 0) onError = null;
    return _js_helper.Primitives.parseDouble(source, onError);
  }
  static tryParse(source) {
    return _js_helper.Primitives.parseDouble(source, C20 || CT.C20);
  }
};
(core.double.new = function() {
  ;
}).prototype = core.double.prototype;
dart.setLibraryUri(core.double, "dart:core");
dart.defineLazy(core.double, {
  /*core.double.nan*/get nan() {
    return 0 / 0;
  },
  /*core.double.infinity*/get infinity() {
    return 1 / 0;
  },
  /*core.double.negativeInfinity*/get negativeInfinity() {
    return -1 / 0;
  },
  /*core.double.minPositive*/get minPositive() {
    return 5e-324;
  },
  /*core.double.maxFinite*/get maxFinite() {
    return 1.7976931348623157e+308;
  }
});
const NativeTypedArray_ListMixin$36 = class NativeTypedArray_ListMixin extends _native_typed_data.NativeTypedArray {};
(NativeTypedArray_ListMixin$36.new = function() {
}).prototype = NativeTypedArray_ListMixin$36.prototype;
dart.applyMixin(NativeTypedArray_ListMixin$36, collection.ListMixin$(core.double));
const NativeTypedArray_FixedLengthListMixin$36 = class NativeTypedArray_FixedLengthListMixin extends NativeTypedArray_ListMixin$36 {};
(NativeTypedArray_FixedLengthListMixin$36.new = function() {
}).prototype = NativeTypedArray_FixedLengthListMixin$36.prototype;
dart.applyMixin(NativeTypedArray_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(core.double));
_native_typed_data.NativeTypedArrayOfDouble = class NativeTypedArrayOfDouble extends NativeTypedArray_FixedLengthListMixin$36 {
  get length() {
    return this.length;
  }
  set length(value) {
    super.length = value;
  }
  _get(index) {
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  _set(index, value$) {
    let value = value$;
    core.num._check(value);
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    this[index] = value;
    return value$;
  }
  setRange(start, end, iterable, skipCount) {
    IterableOfdouble()._check(iterable);
    if (skipCount === void 0) skipCount = 0;
    if (_native_typed_data.NativeTypedArrayOfDouble.is(iterable)) {
      this[_setRangeFast](start, end, iterable, skipCount);
      return;
    }
    super[$setRange](start, end, iterable, skipCount);
  }
};
(_native_typed_data.NativeTypedArrayOfDouble.new = function() {
  ;
}).prototype = _native_typed_data.NativeTypedArrayOfDouble.prototype;
;
;
dart.setGetterSignature(_native_typed_data.NativeTypedArrayOfDouble, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeTypedArrayOfDouble.__proto__),
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeTypedArrayOfDouble, "dart:_native_typed_data");
dart.defineExtensionMethods(_native_typed_data.NativeTypedArrayOfDouble, ['_get', '_set', 'setRange']);
dart.defineExtensionAccessors(_native_typed_data.NativeTypedArrayOfDouble, ['length']);
const NativeTypedArray_ListMixin$36$ = class NativeTypedArray_ListMixin extends _native_typed_data.NativeTypedArray {};
(NativeTypedArray_ListMixin$36$.new = function() {
}).prototype = NativeTypedArray_ListMixin$36$.prototype;
dart.applyMixin(NativeTypedArray_ListMixin$36$, collection.ListMixin$(core.int));
const NativeTypedArray_FixedLengthListMixin$36$ = class NativeTypedArray_FixedLengthListMixin extends NativeTypedArray_ListMixin$36$ {};
(NativeTypedArray_FixedLengthListMixin$36$.new = function() {
}).prototype = NativeTypedArray_FixedLengthListMixin$36$.prototype;
dart.applyMixin(NativeTypedArray_FixedLengthListMixin$36$, _internal.FixedLengthListMixin$(core.int));
_native_typed_data.NativeTypedArrayOfInt = class NativeTypedArrayOfInt extends NativeTypedArray_FixedLengthListMixin$36$ {
  get length() {
    return this.length;
  }
  set length(value) {
    super.length = value;
  }
  _set(index, value$) {
    let value = value$;
    core.int._check(value);
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    this[index] = value;
    return value$;
  }
  setRange(start, end, iterable, skipCount) {
    IterableOfint()._check(iterable);
    if (skipCount === void 0) skipCount = 0;
    if (_native_typed_data.NativeTypedArrayOfInt.is(iterable)) {
      this[_setRangeFast](start, end, iterable, skipCount);
      return;
    }
    super[$setRange](start, end, iterable, skipCount);
  }
};
(_native_typed_data.NativeTypedArrayOfInt.new = function() {
  ;
}).prototype = _native_typed_data.NativeTypedArrayOfInt.prototype;
_native_typed_data.NativeTypedArrayOfInt.prototype[dart.isList] = true;
;
_native_typed_data.NativeTypedArrayOfInt[dart.implements] = () => [core.List$(core.int)];
;
dart.setGetterSignature(_native_typed_data.NativeTypedArrayOfInt, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeTypedArrayOfInt.__proto__),
  length: core.int,
  [$length]: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeTypedArrayOfInt, "dart:_native_typed_data");
dart.defineExtensionMethods(_native_typed_data.NativeTypedArrayOfInt, ['_set', 'setRange']);
dart.defineExtensionAccessors(_native_typed_data.NativeTypedArrayOfInt, ['length']);
_native_typed_data.NativeFloat32List = class NativeFloat32List extends _native_typed_data.NativeTypedArrayOfDouble {
  static new(length) {
    return _native_typed_data.NativeFloat32List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    return _native_typed_data.NativeFloat32List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeFloat32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeFloat32List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Float32List);
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeFloat32List._create1(source);
  }
  static _create1(arg) {
    return new Float32Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Float32Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Float32Array(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeFloat32List[dart.implements] = () => [typed_data.Float32List];
;
dart.setLibraryUri(_native_typed_data.NativeFloat32List, "dart:_native_typed_data");
dart.registerExtension("Float32Array", _native_typed_data.NativeFloat32List);
_native_typed_data.NativeFloat64List = class NativeFloat64List extends _native_typed_data.NativeTypedArrayOfDouble {
  static new(length) {
    return _native_typed_data.NativeFloat64List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    return _native_typed_data.NativeFloat64List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeFloat64List._create2(buffer, offsetInBytes) : _native_typed_data.NativeFloat64List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Float64List);
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeFloat64List._create1(source);
  }
  static _create1(arg) {
    return new Float64Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Float64Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Float64Array(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeFloat64List[dart.implements] = () => [typed_data.Float64List];
;
dart.setLibraryUri(_native_typed_data.NativeFloat64List, "dart:_native_typed_data");
dart.registerExtension("Float64Array", _native_typed_data.NativeFloat64List);
_native_typed_data.NativeInt16List = class NativeInt16List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    return _native_typed_data.NativeInt16List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    return _native_typed_data.NativeInt16List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeInt16List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt16List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Int16List);
  }
  [$_get](index) {
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeInt16List._create1(source);
  }
  static _create1(arg) {
    return new Int16Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Int16Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Int16Array(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeInt16List[dart.implements] = () => [typed_data.Int16List];
;
dart.setLibraryUri(_native_typed_data.NativeInt16List, "dart:_native_typed_data");
dart.registerExtension("Int16Array", _native_typed_data.NativeInt16List);
_native_typed_data.NativeInt32List = class NativeInt32List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    return _native_typed_data.NativeInt32List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    return _native_typed_data.NativeInt32List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeInt32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt32List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Int32List);
  }
  [$_get](index) {
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeInt32List._create1(source);
  }
  static _create1(arg) {
    return new Int32Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Int32Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Int32Array(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeInt32List[dart.implements] = () => [typed_data.Int32List];
;
dart.setLibraryUri(_native_typed_data.NativeInt32List, "dart:_native_typed_data");
dart.registerExtension("Int32Array", _native_typed_data.NativeInt32List);
_native_typed_data.NativeInt8List = class NativeInt8List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    return _native_typed_data.NativeInt8List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    return _native_typed_data.NativeInt8List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return _native_typed_data.NativeInt8List._check(length == null ? _native_typed_data.NativeInt8List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt8List._create3(buffer, offsetInBytes, length));
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Int8List);
  }
  [$_get](index) {
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeInt8List._create1(source);
  }
  static _create1(arg) {
    return new Int8Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Int8Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Int8Array(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeInt8List[dart.implements] = () => [typed_data.Int8List];
;
dart.setLibraryUri(_native_typed_data.NativeInt8List, "dart:_native_typed_data");
dart.registerExtension("Int8Array", _native_typed_data.NativeInt8List);
_native_typed_data.NativeUint16List = class NativeUint16List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    return _native_typed_data.NativeUint16List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(list) {
    return _native_typed_data.NativeUint16List._create1(_native_typed_data._ensureNativeList(list));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeUint16List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint16List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Uint16List);
  }
  [$_get](index) {
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeUint16List._create1(source);
  }
  static _create1(arg) {
    return new Uint16Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Uint16Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Uint16Array(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeUint16List[dart.implements] = () => [typed_data.Uint16List];
;
dart.setLibraryUri(_native_typed_data.NativeUint16List, "dart:_native_typed_data");
dart.registerExtension("Uint16Array", _native_typed_data.NativeUint16List);
_native_typed_data.NativeUint32List = class NativeUint32List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    return _native_typed_data.NativeUint32List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    return _native_typed_data.NativeUint32List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeUint32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint32List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Uint32List);
  }
  [$_get](index) {
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeUint32List._create1(source);
  }
  static _create1(arg) {
    return new Uint32Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Uint32Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Uint32Array(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeUint32List[dart.implements] = () => [typed_data.Uint32List];
;
dart.setLibraryUri(_native_typed_data.NativeUint32List, "dart:_native_typed_data");
dart.registerExtension("Uint32Array", _native_typed_data.NativeUint32List);
_native_typed_data.NativeUint8ClampedList = class NativeUint8ClampedList extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    return _native_typed_data.NativeUint8ClampedList._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    return _native_typed_data.NativeUint8ClampedList._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeUint8ClampedList._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint8ClampedList._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Uint8ClampedList);
  }
  get [$length]() {
    return this.length;
  }
  set [$length](value) {
    super[$length] = value;
  }
  [$_get](index) {
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeUint8ClampedList._create1(source);
  }
  static _create1(arg) {
    return new Uint8ClampedArray(arg);
  }
  static _create2(arg1, arg2) {
    return new Uint8ClampedArray(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Uint8ClampedArray(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeUint8ClampedList[dart.implements] = () => [typed_data.Uint8ClampedList];
;
dart.setLibraryUri(_native_typed_data.NativeUint8ClampedList, "dart:_native_typed_data");
dart.registerExtension("Uint8ClampedArray", _native_typed_data.NativeUint8ClampedList);
dart.registerExtension("CanvasPixelArray", _native_typed_data.NativeUint8ClampedList);
_native_typed_data.NativeUint8List = class NativeUint8List extends _native_typed_data.NativeTypedArrayOfInt {
  static new(length) {
    return _native_typed_data.NativeUint8List._create1(_native_typed_data._checkLength(length));
  }
  static fromList(elements) {
    return _native_typed_data.NativeUint8List._create1(_native_typed_data._ensureNativeList(elements));
  }
  static view(buffer, offsetInBytes, length) {
    _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
    return length == null ? _native_typed_data.NativeUint8List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint8List._create3(buffer, offsetInBytes, length);
  }
  get [$runtimeType]() {
    return dart.wrapType(typed_data.Uint8List);
  }
  get [$length]() {
    return this.length;
  }
  set [$length](value) {
    super[$length] = value;
  }
  [$_get](index) {
    _native_typed_data._checkValidIndex(index, this, this[$length]);
    return this[index];
  }
  [$sublist](start, end) {
    if (end === void 0) end = null;
    end = _native_typed_data._checkValidRange(start, end, this[$length]);
    let source = this.subarray(start, end);
    return _native_typed_data.NativeUint8List._create1(source);
  }
  static _create1(arg) {
    return new Uint8Array(arg);
  }
  static _create2(arg1, arg2) {
    return new Uint8Array(arg1, arg2);
  }
  static _create3(arg1, arg2, arg3) {
    return new Uint8Array(arg1, arg2, arg3);
  }
};
;
_native_typed_data.NativeUint8List[dart.implements] = () => [typed_data.Uint8List];
;
dart.setLibraryUri(_native_typed_data.NativeUint8List, "dart:_native_typed_data");
dart.registerExtension("Uint8Array", _native_typed_data.NativeUint8List);
const x$ = dart.privateName(_native_typed_data, "NativeFloat32x4.x");
const y$ = dart.privateName(_native_typed_data, "NativeFloat32x4.y");
const z$ = dart.privateName(_native_typed_data, "NativeFloat32x4.z");
const w$ = dart.privateName(_native_typed_data, "NativeFloat32x4.w");
_native_typed_data.NativeFloat32x4 = class NativeFloat32x4 extends core.Object {
  get x() {
    return this[x$];
  }
  set x(value) {
    super.x = value;
  }
  get y() {
    return this[y$];
  }
  set y(value) {
    super.y = value;
  }
  get z() {
    return this[z$];
  }
  set z(value) {
    super.z = value;
  }
  get w() {
    return this[w$];
  }
  set w(value) {
    super.w = value;
  }
  static _truncate(x) {
    _native_typed_data.NativeFloat32x4._list[$_set](0, core.num._check(x));
    return _native_typed_data.NativeFloat32x4._list[$_get](0);
  }
  static fromInt32x4Bits(i) {
    _native_typed_data.NativeFloat32x4._uint32view[$_set](0, i.x);
    _native_typed_data.NativeFloat32x4._uint32view[$_set](1, i.y);
    _native_typed_data.NativeFloat32x4._uint32view[$_set](2, i.z);
    _native_typed_data.NativeFloat32x4._uint32view[$_set](3, i.w);
    return new _native_typed_data.NativeFloat32x4._truncated(_native_typed_data.NativeFloat32x4._list[$_get](0), _native_typed_data.NativeFloat32x4._list[$_get](1), _native_typed_data.NativeFloat32x4._list[$_get](2), _native_typed_data.NativeFloat32x4._list[$_get](3));
  }
  toString() {
    return "[" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.z) + ", " + dart.str(this.w) + "]";
  }
  ['+'](other) {
    let _x = dart.notNull(this.x) + dart.notNull(other.x);
    let _y = dart.notNull(this.y) + dart.notNull(other.y);
    let _z = dart.notNull(this.z) + dart.notNull(other.z);
    let _w = dart.notNull(this.w) + dart.notNull(other.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  _negate() {
    return new _native_typed_data.NativeFloat32x4._truncated(-dart.notNull(this.x), -dart.notNull(this.y), -dart.notNull(this.z), -dart.notNull(this.w));
  }
  ['-'](other) {
    let _x = dart.notNull(this.x) - dart.notNull(other.x);
    let _y = dart.notNull(this.y) - dart.notNull(other.y);
    let _z = dart.notNull(this.z) - dart.notNull(other.z);
    let _w = dart.notNull(this.w) - dart.notNull(other.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  ['*'](other) {
    let _x = dart.notNull(this.x) * dart.notNull(other.x);
    let _y = dart.notNull(this.y) * dart.notNull(other.y);
    let _z = dart.notNull(this.z) * dart.notNull(other.z);
    let _w = dart.notNull(this.w) * dart.notNull(other.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  ['/'](other) {
    let _x = dart.notNull(this.x) / dart.notNull(other.x);
    let _y = dart.notNull(this.y) / dart.notNull(other.y);
    let _z = dart.notNull(this.z) / dart.notNull(other.z);
    let _w = dart.notNull(this.w) / dart.notNull(other.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  lessThan(other) {
    let _cx = dart.notNull(this.x) < dart.notNull(other.x);
    let _cy = dart.notNull(this.y) < dart.notNull(other.y);
    let _cz = dart.notNull(this.z) < dart.notNull(other.z);
    let _cw = dart.notNull(this.w) < dart.notNull(other.w);
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  lessThanOrEqual(other) {
    let _cx = dart.notNull(this.x) <= dart.notNull(other.x);
    let _cy = dart.notNull(this.y) <= dart.notNull(other.y);
    let _cz = dart.notNull(this.z) <= dart.notNull(other.z);
    let _cw = dart.notNull(this.w) <= dart.notNull(other.w);
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  greaterThan(other) {
    let _cx = dart.notNull(this.x) > dart.notNull(other.x);
    let _cy = dart.notNull(this.y) > dart.notNull(other.y);
    let _cz = dart.notNull(this.z) > dart.notNull(other.z);
    let _cw = dart.notNull(this.w) > dart.notNull(other.w);
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  greaterThanOrEqual(other) {
    let _cx = dart.notNull(this.x) >= dart.notNull(other.x);
    let _cy = dart.notNull(this.y) >= dart.notNull(other.y);
    let _cz = dart.notNull(this.z) >= dart.notNull(other.z);
    let _cw = dart.notNull(this.w) >= dart.notNull(other.w);
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  equal(other) {
    let _cx = this.x == other.x;
    let _cy = this.y == other.y;
    let _cz = this.z == other.z;
    let _cw = this.w == other.w;
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  notEqual(other) {
    let _cx = this.x != other.x;
    let _cy = this.y != other.y;
    let _cz = this.z != other.z;
    let _cw = this.w != other.w;
    return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
  }
  scale(s) {
    let _x = dart.notNull(s) * dart.notNull(this.x);
    let _y = dart.notNull(s) * dart.notNull(this.y);
    let _z = dart.notNull(s) * dart.notNull(this.z);
    let _w = dart.notNull(s) * dart.notNull(this.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  abs() {
    let _x = this.x[$abs]();
    let _y = this.y[$abs]();
    let _z = this.z[$abs]();
    let _w = this.w[$abs]();
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  clamp(lowerLimit, upperLimit) {
    let _lx = lowerLimit.x;
    let _ly = lowerLimit.y;
    let _lz = lowerLimit.z;
    let _lw = lowerLimit.w;
    let _ux = upperLimit.x;
    let _uy = upperLimit.y;
    let _uz = upperLimit.z;
    let _uw = upperLimit.w;
    let _x = this.x;
    let _y = this.y;
    let _z = this.z;
    let _w = this.w;
    _x = dart.notNull(_x) > dart.notNull(_ux) ? _ux : _x;
    _y = dart.notNull(_y) > dart.notNull(_uy) ? _uy : _y;
    _z = dart.notNull(_z) > dart.notNull(_uz) ? _uz : _z;
    _w = dart.notNull(_w) > dart.notNull(_uw) ? _uw : _w;
    _x = dart.notNull(_x) < dart.notNull(_lx) ? _lx : _x;
    _y = dart.notNull(_y) < dart.notNull(_ly) ? _ly : _y;
    _z = dart.notNull(_z) < dart.notNull(_lz) ? _lz : _z;
    _w = dart.notNull(_w) < dart.notNull(_lw) ? _lw : _w;
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  get signMask() {
    let view = _native_typed_data.NativeFloat32x4._uint32view;
    let mx = null;
    let my = null;
    let mz = null;
    let mw = null;
    _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
    _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
    _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
    _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
    mx = (dart.notNull(view[$_get](0)) & 2147483648) >>> 31;
    my = (dart.notNull(view[$_get](1)) & 2147483648) >>> 30;
    mz = (dart.notNull(view[$_get](2)) & 2147483648) >>> 29;
    mw = (dart.notNull(view[$_get](3)) & 2147483648) >>> 28;
    return core.int._check(dart.dsend(dart.dsend(dart.dsend(mx, '|', [my]), '|', [mz]), '|', [mw]));
  }
  shuffle(mask) {
    if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
      dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
    }
    _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
    _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
    _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
    _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
    let _x = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) & 3);
    let _y = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
    let _z = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
    let _w = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  shuffleMix(other, mask) {
    if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
      dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
    }
    _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
    _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
    _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
    _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
    let _x = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) & 3);
    let _y = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
    _native_typed_data.NativeFloat32x4._list[$_set](0, other.x);
    _native_typed_data.NativeFloat32x4._list[$_set](1, other.y);
    _native_typed_data.NativeFloat32x4._list[$_set](2, other.z);
    _native_typed_data.NativeFloat32x4._list[$_set](3, other.w);
    let _z = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
    let _w = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  withX(newX) {
    return new _native_typed_data.NativeFloat32x4._truncated(core.double._check(_native_typed_data.NativeFloat32x4._truncate(newX)), this.y, this.z, this.w);
  }
  withY(newY) {
    return new _native_typed_data.NativeFloat32x4._truncated(this.x, core.double._check(_native_typed_data.NativeFloat32x4._truncate(newY)), this.z, this.w);
  }
  withZ(newZ) {
    return new _native_typed_data.NativeFloat32x4._truncated(this.x, this.y, core.double._check(_native_typed_data.NativeFloat32x4._truncate(newZ)), this.w);
  }
  withW(newW) {
    return new _native_typed_data.NativeFloat32x4._truncated(this.x, this.y, this.z, core.double._check(_native_typed_data.NativeFloat32x4._truncate(newW)));
  }
  min(other) {
    let _x = dart.notNull(this.x) < dart.notNull(other.x) ? this.x : other.x;
    let _y = dart.notNull(this.y) < dart.notNull(other.y) ? this.y : other.y;
    let _z = dart.notNull(this.z) < dart.notNull(other.z) ? this.z : other.z;
    let _w = dart.notNull(this.w) < dart.notNull(other.w) ? this.w : other.w;
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  max(other) {
    let _x = dart.notNull(this.x) > dart.notNull(other.x) ? this.x : other.x;
    let _y = dart.notNull(this.y) > dart.notNull(other.y) ? this.y : other.y;
    let _z = dart.notNull(this.z) > dart.notNull(other.z) ? this.z : other.z;
    let _w = dart.notNull(this.w) > dart.notNull(other.w) ? this.w : other.w;
    return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
  }
  sqrt() {
    let _x = math.sqrt(this.x);
    let _y = math.sqrt(this.y);
    let _z = math.sqrt(this.z);
    let _w = math.sqrt(this.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  reciprocal() {
    let _x = 1.0 / dart.notNull(this.x);
    let _y = 1.0 / dart.notNull(this.y);
    let _z = 1.0 / dart.notNull(this.z);
    let _w = 1.0 / dart.notNull(this.w);
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
  reciprocalSqrt() {
    let _x = math.sqrt(1.0 / dart.notNull(this.x));
    let _y = math.sqrt(1.0 / dart.notNull(this.y));
    let _z = math.sqrt(1.0 / dart.notNull(this.z));
    let _w = math.sqrt(1.0 / dart.notNull(this.w));
    return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
  }
};
(_native_typed_data.NativeFloat32x4.new = function(x, y, z, w) {
  this[x$] = core.double._check(_native_typed_data.NativeFloat32x4._truncate(x));
  this[y$] = core.double._check(_native_typed_data.NativeFloat32x4._truncate(y));
  this[z$] = core.double._check(_native_typed_data.NativeFloat32x4._truncate(z));
  this[w$] = core.double._check(_native_typed_data.NativeFloat32x4._truncate(w));
  if (!(typeof x == 'number')) dart.throw(new core.ArgumentError.new(x));
  if (!(typeof y == 'number')) dart.throw(new core.ArgumentError.new(y));
  if (!(typeof z == 'number')) dart.throw(new core.ArgumentError.new(z));
  if (!(typeof w == 'number')) dart.throw(new core.ArgumentError.new(w));
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4.splat = function(v) {
  _native_typed_data.NativeFloat32x4.new.call(this, v, v, v, v);
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4.zero = function() {
  _native_typed_data.NativeFloat32x4._truncated.call(this, 0.0, 0.0, 0.0, 0.0);
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4.fromFloat64x2 = function(v) {
  _native_typed_data.NativeFloat32x4._truncated.call(this, core.double._check(_native_typed_data.NativeFloat32x4._truncate(v.x)), core.double._check(_native_typed_data.NativeFloat32x4._truncate(v.y)), 0.0, 0.0);
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4._doubles = function(x, y, z, w) {
  this[x$] = core.double._check(_native_typed_data.NativeFloat32x4._truncate(x));
  this[y$] = core.double._check(_native_typed_data.NativeFloat32x4._truncate(y));
  this[z$] = core.double._check(_native_typed_data.NativeFloat32x4._truncate(z));
  this[w$] = core.double._check(_native_typed_data.NativeFloat32x4._truncate(w));
  ;
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
(_native_typed_data.NativeFloat32x4._truncated = function(x, y, z, w) {
  this[x$] = x;
  this[y$] = y;
  this[z$] = z;
  this[w$] = w;
  ;
}).prototype = _native_typed_data.NativeFloat32x4.prototype;
;
_native_typed_data.NativeFloat32x4[dart.implements] = () => [typed_data.Float32x4];
;
dart.setGetterSignature(_native_typed_data.NativeFloat32x4, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeFloat32x4.__proto__),
  signMask: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeFloat32x4, "dart:_native_typed_data");
;
dart.defineExtensionMethods(_native_typed_data.NativeFloat32x4, ['toString']);
dart.defineLazy(_native_typed_data.NativeFloat32x4, {
  /*_native_typed_data.NativeFloat32x4._list*/get _list() {
    return _native_typed_data.NativeFloat32List.new(4);
  },
  /*_native_typed_data.NativeFloat32x4._uint32view*/get _uint32view() {
    return _native_typed_data.NativeFloat32x4._list.buffer[$asUint32List]();
  }
});
const x$0 = dart.privateName(_native_typed_data, "NativeInt32x4.x");
const y$0 = dart.privateName(_native_typed_data, "NativeInt32x4.y");
const z$0 = dart.privateName(_native_typed_data, "NativeInt32x4.z");
const w$0 = dart.privateName(_native_typed_data, "NativeInt32x4.w");
_native_typed_data.NativeInt32x4 = class NativeInt32x4 extends core.Object {
  get x() {
    return this[x$0];
  }
  set x(value) {
    super.x = value;
  }
  get y() {
    return this[y$0];
  }
  set y(value) {
    super.y = value;
  }
  get z() {
    return this[z$0];
  }
  set z(value) {
    super.z = value;
  }
  get w() {
    return this[w$0];
  }
  set w(value) {
    super.w = value;
  }
  static _truncate(x) {
    _native_typed_data.NativeInt32x4._list[$_set](0, core.int._check(x));
    return _native_typed_data.NativeInt32x4._list[$_get](0);
  }
  static fromFloat32x4Bits(f) {
    let floatList = _native_typed_data.NativeFloat32x4._list;
    floatList[$_set](0, f.x);
    floatList[$_set](1, f.y);
    floatList[$_set](2, f.z);
    floatList[$_set](3, f.w);
    let view = _native_typed_data.NativeInt32List._check(floatList.buffer[$asInt32List]());
    return new _native_typed_data.NativeInt32x4._truncated(view[$_get](0), view[$_get](1), view[$_get](2), view[$_get](3));
  }
  toString() {
    return "[" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.z) + ", " + dart.str(this.w) + "]";
  }
  ['|'](other) {
    return new _native_typed_data.NativeInt32x4._truncated(this.x | other.x, this.y | other.y, this.z | other.z, this.w | other.w);
  }
  ['&'](other) {
    return new _native_typed_data.NativeInt32x4._truncated(this.x & other.x, this.y & other.y, this.z & other.z, this.w & other.w);
  }
  ['^'](other) {
    return new _native_typed_data.NativeInt32x4._truncated(this.x ^ other.x, this.y ^ other.y, this.z ^ other.z, this.w ^ other.w);
  }
  ['+'](other) {
    return new _native_typed_data.NativeInt32x4._truncated(this.x + other.x | 0, this.y + other.y | 0, this.z + other.z | 0, this.w + other.w | 0);
  }
  ['-'](other) {
    return new _native_typed_data.NativeInt32x4._truncated(this.x - other.x | 0, this.y - other.y | 0, this.z - other.z | 0, this.w - other.w | 0);
  }
  _negate() {
    return new _native_typed_data.NativeInt32x4._truncated(-this.x | 0, -this.y | 0, -this.z | 0, -this.w | 0);
  }
  get signMask() {
    let mx = (dart.notNull(this.x) & 2147483648) >>> 31;
    let my = (dart.notNull(this.y) & 2147483648) >>> 31;
    let mz = (dart.notNull(this.z) & 2147483648) >>> 31;
    let mw = (dart.notNull(this.w) & 2147483648) >>> 31;
    return (mx | my << 1 >>> 0 | mz << 2 >>> 0 | mw << 3 >>> 0) >>> 0;
  }
  shuffle(mask) {
    if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
      dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
    }
    _native_typed_data.NativeInt32x4._list[$_set](0, this.x);
    _native_typed_data.NativeInt32x4._list[$_set](1, this.y);
    _native_typed_data.NativeInt32x4._list[$_set](2, this.z);
    _native_typed_data.NativeInt32x4._list[$_set](3, this.w);
    let _x = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) & 3);
    let _y = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
    let _z = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
    let _w = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
    return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
  }
  shuffleMix(other, mask) {
    if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
      dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
    }
    _native_typed_data.NativeInt32x4._list[$_set](0, this.x);
    _native_typed_data.NativeInt32x4._list[$_set](1, this.y);
    _native_typed_data.NativeInt32x4._list[$_set](2, this.z);
    _native_typed_data.NativeInt32x4._list[$_set](3, this.w);
    let _x = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) & 3);
    let _y = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
    _native_typed_data.NativeInt32x4._list[$_set](0, other.x);
    _native_typed_data.NativeInt32x4._list[$_set](1, other.y);
    _native_typed_data.NativeInt32x4._list[$_set](2, other.z);
    _native_typed_data.NativeInt32x4._list[$_set](3, other.w);
    let _z = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
    let _w = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
    return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
  }
  withX(x) {
    let _x = core.int._check(_native_typed_data.NativeInt32x4._truncate(x));
    return new _native_typed_data.NativeInt32x4._truncated(_x, this.y, this.z, this.w);
  }
  withY(y) {
    let _y = core.int._check(_native_typed_data.NativeInt32x4._truncate(y));
    return new _native_typed_data.NativeInt32x4._truncated(this.x, _y, this.z, this.w);
  }
  withZ(z) {
    let _z = core.int._check(_native_typed_data.NativeInt32x4._truncate(z));
    return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, _z, this.w);
  }
  withW(w) {
    let _w = core.int._check(_native_typed_data.NativeInt32x4._truncate(w));
    return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, this.z, _w);
  }
  get flagX() {
    return this.x !== 0;
  }
  get flagY() {
    return this.y !== 0;
  }
  get flagZ() {
    return this.z !== 0;
  }
  get flagW() {
    return this.w !== 0;
  }
  withFlagX(flagX) {
    let _x = dart.test(flagX) ? -1 : 0;
    return new _native_typed_data.NativeInt32x4._truncated(_x, this.y, this.z, this.w);
  }
  withFlagY(flagY) {
    let _y = dart.test(flagY) ? -1 : 0;
    return new _native_typed_data.NativeInt32x4._truncated(this.x, _y, this.z, this.w);
  }
  withFlagZ(flagZ) {
    let _z = dart.test(flagZ) ? -1 : 0;
    return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, _z, this.w);
  }
  withFlagW(flagW) {
    let _w = dart.test(flagW) ? -1 : 0;
    return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, this.z, _w);
  }
  select(trueValue, falseValue) {
    let floatList = _native_typed_data.NativeFloat32x4._list;
    let intView = _native_typed_data.NativeFloat32x4._uint32view;
    floatList[$_set](0, trueValue.x);
    floatList[$_set](1, trueValue.y);
    floatList[$_set](2, trueValue.z);
    floatList[$_set](3, trueValue.w);
    let stx = intView[$_get](0);
    let sty = intView[$_get](1);
    let stz = intView[$_get](2);
    let stw = intView[$_get](3);
    floatList[$_set](0, falseValue.x);
    floatList[$_set](1, falseValue.y);
    floatList[$_set](2, falseValue.z);
    floatList[$_set](3, falseValue.w);
    let sfx = intView[$_get](0);
    let sfy = intView[$_get](1);
    let sfz = intView[$_get](2);
    let sfw = intView[$_get](3);
    let _x = (dart.notNull(this.x) & dart.notNull(stx) | (~dart.notNull(this.x) & dart.notNull(sfx)) >>> 0) >>> 0;
    let _y = (dart.notNull(this.y) & dart.notNull(sty) | (~dart.notNull(this.y) & dart.notNull(sfy)) >>> 0) >>> 0;
    let _z = (dart.notNull(this.z) & dart.notNull(stz) | (~dart.notNull(this.z) & dart.notNull(sfz)) >>> 0) >>> 0;
    let _w = (dart.notNull(this.w) & dart.notNull(stw) | (~dart.notNull(this.w) & dart.notNull(sfw)) >>> 0) >>> 0;
    intView[$_set](0, _x);
    intView[$_set](1, _y);
    intView[$_set](2, _z);
    intView[$_set](3, _w);
    return new _native_typed_data.NativeFloat32x4._truncated(floatList[$_get](0), floatList[$_get](1), floatList[$_get](2), floatList[$_get](3));
  }
};
(_native_typed_data.NativeInt32x4.new = function(x, y, z, w) {
  this[x$0] = core.int._check(_native_typed_data.NativeInt32x4._truncate(x));
  this[y$0] = core.int._check(_native_typed_data.NativeInt32x4._truncate(y));
  this[z$0] = core.int._check(_native_typed_data.NativeInt32x4._truncate(z));
  this[w$0] = core.int._check(_native_typed_data.NativeInt32x4._truncate(w));
  if (x != this.x && !core.int.is(x)) dart.throw(new core.ArgumentError.new(x));
  if (y != this.y && !core.int.is(y)) dart.throw(new core.ArgumentError.new(y));
  if (z != this.z && !core.int.is(z)) dart.throw(new core.ArgumentError.new(z));
  if (w != this.w && !core.int.is(w)) dart.throw(new core.ArgumentError.new(w));
}).prototype = _native_typed_data.NativeInt32x4.prototype;
(_native_typed_data.NativeInt32x4.bool = function(x, y, z, w) {
  this[x$0] = dart.test(x) ? -1 : 0;
  this[y$0] = dart.test(y) ? -1 : 0;
  this[z$0] = dart.test(z) ? -1 : 0;
  this[w$0] = dart.test(w) ? -1 : 0;
  ;
}).prototype = _native_typed_data.NativeInt32x4.prototype;
(_native_typed_data.NativeInt32x4._truncated = function(x, y, z, w) {
  this[x$0] = x;
  this[y$0] = y;
  this[z$0] = z;
  this[w$0] = w;
  ;
}).prototype = _native_typed_data.NativeInt32x4.prototype;
;
_native_typed_data.NativeInt32x4[dart.implements] = () => [typed_data.Int32x4];
;
dart.setGetterSignature(_native_typed_data.NativeInt32x4, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeInt32x4.__proto__),
  signMask: core.int,
  flagX: core.bool,
  flagY: core.bool,
  flagZ: core.bool,
  flagW: core.bool
}));
dart.setLibraryUri(_native_typed_data.NativeInt32x4, "dart:_native_typed_data");
;
dart.defineExtensionMethods(_native_typed_data.NativeInt32x4, ['toString']);
dart.defineLazy(_native_typed_data.NativeInt32x4, {
  /*_native_typed_data.NativeInt32x4._list*/get _list() {
    return _native_typed_data.NativeInt32List.new(4);
  }
});
const x$1 = dart.privateName(_native_typed_data, "NativeFloat64x2.x");
const y$1 = dart.privateName(_native_typed_data, "NativeFloat64x2.y");
_native_typed_data.NativeFloat64x2 = class NativeFloat64x2 extends core.Object {
  get x() {
    return this[x$1];
  }
  set x(value) {
    super.x = value;
  }
  get y() {
    return this[y$1];
  }
  set y(value) {
    super.y = value;
  }
  toString() {
    return "[" + dart.str(this.x) + ", " + dart.str(this.y) + "]";
  }
  ['+'](other) {
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
  }
  _negate() {
    return new _native_typed_data.NativeFloat64x2._doubles(-dart.notNull(this.x), -dart.notNull(this.y));
  }
  ['-'](other) {
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
  }
  ['*'](other) {
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) * dart.notNull(other.x), dart.notNull(this.y) * dart.notNull(other.y));
  }
  ['/'](other) {
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) / dart.notNull(other.x), dart.notNull(this.y) / dart.notNull(other.y));
  }
  scale(s) {
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) * dart.notNull(s), dart.notNull(this.y) * dart.notNull(s));
  }
  abs() {
    return new _native_typed_data.NativeFloat64x2._doubles(this.x[$abs](), this.y[$abs]());
  }
  clamp(lowerLimit, upperLimit) {
    let _lx = lowerLimit.x;
    let _ly = lowerLimit.y;
    let _ux = upperLimit.x;
    let _uy = upperLimit.y;
    let _x = this.x;
    let _y = this.y;
    _x = dart.notNull(_x) > dart.notNull(_ux) ? _ux : _x;
    _y = dart.notNull(_y) > dart.notNull(_uy) ? _uy : _y;
    _x = dart.notNull(_x) < dart.notNull(_lx) ? _lx : _x;
    _y = dart.notNull(_y) < dart.notNull(_ly) ? _ly : _y;
    return new _native_typed_data.NativeFloat64x2._doubles(_x, _y);
  }
  get signMask() {
    let view = _native_typed_data.NativeFloat64x2._uint32View;
    _native_typed_data.NativeFloat64x2._list[$_set](0, this.x);
    _native_typed_data.NativeFloat64x2._list[$_set](1, this.y);
    let mx = (dart.notNull(view[$_get](1)) & 2147483648) >>> 31;
    let my = (dart.notNull(view[$_get](3)) & 2147483648) >>> 31;
    return (mx | my << 1 >>> 0) >>> 0;
  }
  withX(x) {
    if (!(typeof x == 'number')) dart.throw(new core.ArgumentError.new(x));
    return new _native_typed_data.NativeFloat64x2._doubles(x, this.y);
  }
  withY(y) {
    if (!(typeof y == 'number')) dart.throw(new core.ArgumentError.new(y));
    return new _native_typed_data.NativeFloat64x2._doubles(this.x, y);
  }
  min(other) {
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) < dart.notNull(other.x) ? this.x : other.x, dart.notNull(this.y) < dart.notNull(other.y) ? this.y : other.y);
  }
  max(other) {
    return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) > dart.notNull(other.x) ? this.x : other.x, dart.notNull(this.y) > dart.notNull(other.y) ? this.y : other.y);
  }
  sqrt() {
    return new _native_typed_data.NativeFloat64x2._doubles(math.sqrt(this.x), math.sqrt(this.y));
  }
};
(_native_typed_data.NativeFloat64x2.new = function(x, y) {
  this[x$1] = x;
  this[y$1] = y;
  if (!(typeof this.x == 'number')) dart.throw(new core.ArgumentError.new(this.x));
  if (!(typeof this.y == 'number')) dart.throw(new core.ArgumentError.new(this.y));
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
(_native_typed_data.NativeFloat64x2.splat = function(v) {
  _native_typed_data.NativeFloat64x2.new.call(this, v, v);
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
(_native_typed_data.NativeFloat64x2.zero = function() {
  _native_typed_data.NativeFloat64x2.splat.call(this, 0.0);
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
(_native_typed_data.NativeFloat64x2.fromFloat32x4 = function(v) {
  _native_typed_data.NativeFloat64x2.new.call(this, v.x, v.y);
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
(_native_typed_data.NativeFloat64x2._doubles = function(x, y) {
  this[x$1] = x;
  this[y$1] = y;
  ;
}).prototype = _native_typed_data.NativeFloat64x2.prototype;
;
_native_typed_data.NativeFloat64x2[dart.implements] = () => [typed_data.Float64x2];
;
dart.setGetterSignature(_native_typed_data.NativeFloat64x2, () => ({
  __proto__: dart.getGetters(_native_typed_data.NativeFloat64x2.__proto__),
  signMask: core.int
}));
dart.setLibraryUri(_native_typed_data.NativeFloat64x2, "dart:_native_typed_data");
;
dart.defineExtensionMethods(_native_typed_data.NativeFloat64x2, ['toString']);
dart.defineLazy(_native_typed_data.NativeFloat64x2, {
  /*_native_typed_data.NativeFloat64x2._list*/get _list() {
    return _native_typed_data.NativeFloat64List.new(2);
  },
  set _list(_) {},
  /*_native_typed_data.NativeFloat64x2._uint32View*/get _uint32View() {
    return _native_typed_data.NativeUint32List._check(_native_typed_data.NativeFloat64x2._list.buffer[$asUint32List]());
  },
  set _uint32View(_) {}
});
_native_typed_data._checkLength = function _checkLength(length) {
  if (!core.int.is(length)) dart.throw(new core.ArgumentError.new("Invalid length " + dart.str(length)));
  return core.int._check(length);
};
_native_typed_data._checkViewArguments = function _checkViewArguments(buffer, offsetInBytes, length) {
  if (!_native_typed_data.NativeByteBuffer.is(buffer)) {
    dart.throw(new core.ArgumentError.new("Invalid view buffer"));
  }
  if (!core.int.is(offsetInBytes)) {
    dart.throw(new core.ArgumentError.new("Invalid view offsetInBytes " + dart.str(offsetInBytes)));
  }
  if (length != null && !core.int.is(length)) {
    dart.throw(new core.ArgumentError.new("Invalid view length " + dart.str(length)));
  }
};
_native_typed_data._ensureNativeList = function _ensureNativeList(list) {
  if (_interceptors.JSIndexable.is(list)) return list;
  let result = core.List.new(list[$length]);
  for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
    result[$_set](i, list[$_get](i));
  }
  return result;
};
_native_typed_data._isInvalidArrayIndex = function _isInvalidArrayIndex(index) {
  return index >>> 0 !== index;
};
_native_typed_data._checkValidIndex = function _checkValidIndex(index, list, length) {
  if (dart.test(_native_typed_data._isInvalidArrayIndex(index)) || index >= dart.notNull(length)) {
    dart.throw(_js_helper.diagnoseIndexError(list, index));
  }
};
_native_typed_data._checkValidRange = function _checkValidRange(start, end, length) {
  if (dart.test(_native_typed_data._isInvalidArrayIndex(start)) || (end == null ? dart.notNull(start) > dart.notNull(length) : dart.test(_native_typed_data._isInvalidArrayIndex(end)) || dart.notNull(start) > dart.notNull(end) || dart.notNull(end) > dart.notNull(length))) {
    dart.throw(_js_helper.diagnoseRangeError(start, end, length));
  }
  if (end == null) return length;
  return end;
};
const _handleErrorCallback = dart.privateName(async, "_handleErrorCallback");
const _runBodyCallback = dart.privateName(async, "_runBodyCallback");
const _thenAwait = dart.privateName(async, "_thenAwait");
const _fatal = dart.privateName(async, "_fatal");
const _is__AsyncStarImpl_default = Symbol('_is__AsyncStarImpl_default');
const controller = dart.privateName(async, "_AsyncStarImpl.controller");
async._AsyncStarImpl$ = dart.generic(T => {
  let StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  class _AsyncStarImpl extends core.Object {
    get controller() {
      return this[controller];
    }
    set controller(value) {
      this[controller] = StreamControllerOfT()._check(value);
    }
    get stream() {
      return this.controller.stream;
    }
    get handleError() {
      if (this[_handleErrorCallback] == null) {
        this[_handleErrorCallback] = dart.fn((error, stackTrace) => {
          try {
            this.jsIterator.throw(dart.createErrorWithStack(error, stackTrace));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let newStack = dart.stackTrace(e$);
            this.addError(e, newStack);
          }
        }, ObjectAndStackTraceToNull());
        let zone = async.Zone.current;
        if (zone != async.Zone.root) {
          this[_handleErrorCallback] = zone.bindBinaryCallback(core.Null, core.Object, core.StackTrace, this[_handleErrorCallback]);
        }
      }
      return this[_handleErrorCallback];
    }
    scheduleGenerator() {
      if (this.isScheduled || dart.test(this.controller.isPaused) || this.isSuspendedAtYieldStar || this.isSuspendedAtAwait) {
        return;
      }
      this.isScheduled = true;
      let zone = async.Zone.current;
      if (this[_runBodyCallback] == null) {
        this[_runBodyCallback] = this.runBody.bind(this);
        if (zone != async.Zone.root) {
          let registered = zone.registerUnaryCallback(dart.void, core.Object, this[_runBodyCallback]);
          this[_runBodyCallback] = dart.fn(arg => {
            if (arg === void 0) arg = null;
            return zone.runUnaryGuarded(core.Object, registered, arg);
          }, ObjectTovoid());
        }
      }
      zone.scheduleMicrotask(this[_runBodyCallback]);
    }
    runBody(awaitValue) {
      this.isScheduled = false;
      this.isSuspendedAtYield = false;
      this.isSuspendedAtAwait = false;
      let iterResult = null;
      try {
        iterResult = this.jsIterator.next(awaitValue);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        this.addError(e, s);
        return null;
      }
      if (iterResult.done) {
        this.close();
        return null;
      }
      if (this.isSuspendedAtYield || this.isSuspendedAtYieldStar) return null;
      this.isSuspendedAtAwait = true;
      let value = iterResult.value;
      let f = null;
      if (async._Future.is(value)) {
        f = value;
      } else if (async.Future.is(value)) {
        f = new async._Future.new();
        async._Future._chainForeignFuture(value, f);
      } else {
        f = new async._Future.value(value);
      }
      f[_thenAwait](dart.void, this[_runBodyCallback], this.handleError);
    }
    add(event) {
      T._check(event);
      if (!this.onListenReceived) this[_fatal]("yield before stream is listened to");
      if (this.isSuspendedAtYield) this[_fatal]("unexpected yield");
      if (!dart.test(this.controller.hasListener)) {
        return true;
      }
      this.controller.add(event);
      this.scheduleGenerator();
      this.isSuspendedAtYield = true;
      return false;
    }
    addStream(stream) {
      StreamOfT()._check(stream);
      if (!this.onListenReceived) this[_fatal]("yield* before stream is listened to");
      if (!dart.test(this.controller.hasListener)) return true;
      this.isSuspendedAtYieldStar = true;
      let whenDoneAdding = this.controller.addStream(stream, {cancelOnError: false});
      whenDoneAdding.then(core.Null, dart.fn(_ => {
        this.isSuspendedAtYieldStar = false;
        this.scheduleGenerator();
        if (!this.isScheduled) this.isSuspendedAtYield = true;
      }, dynamicToNull()), {onError: this.handleError});
      return false;
    }
    addError(error, stackTrace) {
      if (this.cancellationCompleter != null && !dart.test(this.cancellationCompleter.isCompleted)) {
        this.cancellationCompleter.completeError(error, stackTrace);
      } else if (dart.test(this.controller.hasListener)) {
        this.controller.addError(error, stackTrace);
      }
      this.close();
    }
    close() {
      if (this.cancellationCompleter != null && !dart.test(this.cancellationCompleter.isCompleted)) {
        this.cancellationCompleter.complete();
      }
      this.controller.close();
    }
    onListen() {
      if (!!this.onListenReceived) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/async_patch.dart", 446, 12, "!onListenReceived");
      this.onListenReceived = true;
      this.scheduleGenerator();
    }
    onResume() {
      if (this.isSuspendedAtYield) {
        this.scheduleGenerator();
      }
    }
    onCancel() {
      if (dart.test(this.controller.isClosed)) {
        return null;
      }
      if (this.cancellationCompleter == null) {
        this.cancellationCompleter = async.Completer.new();
        if (this.isSuspendedAtYield) {
          this.scheduleGenerator();
        }
      }
      return this.cancellationCompleter.future;
    }
    [_fatal](message) {
      return dart.throw(new core.StateError.new(message));
    }
  }
  (_AsyncStarImpl.new = function(initGenerator) {
    this[controller] = null;
    this.isSuspendedAtYieldStar = false;
    this.onListenReceived = false;
    this.isScheduled = false;
    this.isSuspendedAtYield = false;
    this.isSuspendedAtAwait = false;
    this.cancellationCompleter = null;
    this.jsIterator = null;
    this[_handleErrorCallback] = null;
    this[_runBodyCallback] = null;
    this.initGenerator = initGenerator;
    this.controller = StreamControllerOfT().new({onListen: this.onListen.bind(this), onResume: this.onResume.bind(this), onCancel: this.onCancel.bind(this)});
    this.jsIterator = this.initGenerator(this)[Symbol.iterator]();
  }).prototype = _AsyncStarImpl.prototype;
  ;
  _AsyncStarImpl.prototype[_is__AsyncStarImpl_default] = true;
  ;
  dart.setGetterSignature(_AsyncStarImpl, () => ({
    __proto__: dart.getGetters(_AsyncStarImpl.__proto__),
    stream: async.Stream$(T),
    handleError: dart.fnType(core.Null, [core.Object, core.StackTrace])
  }));
  dart.setLibraryUri(_AsyncStarImpl, "dart:async");
  ;
  return _AsyncStarImpl;
});
async._AsyncStarImpl = async._AsyncStarImpl$();
;
const _controller$ = dart.privateName(async, "_controller");
const _subscribe = dart.privateName(async, "_subscribe");
const _createSubscription = dart.privateName(async, "_createSubscription");
const _onListen$ = dart.privateName(async, "_onListen");
const _is__StreamImpl_default = Symbol('_is__StreamImpl_default');
async._StreamImpl$ = dart.generic(T => {
  let _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
  class _StreamImpl extends async.Stream$(T) {
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      cancelOnError = true === cancelOnError;
      let subscription = this[_createSubscription](onData, onError, onDone, cancelOnError);
      this[_onListen$](subscription);
      return subscription;
    }
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      return new (_BufferingStreamSubscriptionOfT()).new(onData, onError, onDone, cancelOnError);
    }
    [_onListen$](subscription) {
    }
  }
  (_StreamImpl.new = function() {
    _StreamImpl.__proto__.new.call(this);
    ;
  }).prototype = _StreamImpl.prototype;
  ;
  _StreamImpl.prototype[_is__StreamImpl_default] = true;
  ;
  dart.setLibraryUri(_StreamImpl, "dart:async");
  return _StreamImpl;
});
async._StreamImpl = async._StreamImpl$();
;
const _is__ControllerStream_default = Symbol('_is__ControllerStream_default');
async._ControllerStream$ = dart.generic(T => {
  class _ControllerStream extends async._StreamImpl$(T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      return this[_controller$][_subscribe](onData, onError, onDone, cancelOnError);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this[_controller$])) ^ 892482866) >>> 0;
    }
    _equals(other) {
      if (this === other) return true;
      return async._ControllerStream.is(other) && other[_controller$] == this[_controller$];
    }
  }
  (_ControllerStream.new = function(_controller) {
    this[_controller$] = _controller;
    _ControllerStream.__proto__.new.call(this);
    ;
  }).prototype = _ControllerStream.prototype;
  ;
  _ControllerStream.prototype[_is__ControllerStream_default] = true;
  ;
  dart.setLibraryUri(_ControllerStream, "dart:async");
  ;
  dart.defineExtensionMethods(_ControllerStream, ['_equals']);
  dart.defineExtensionAccessors(_ControllerStream, ['hashCode']);
  return _ControllerStream;
});
async._ControllerStream = async._ControllerStream$();
;
const _is__BroadcastStream_default = Symbol('_is__BroadcastStream_default');
async._BroadcastStream$ = dart.generic(T => {
  class _BroadcastStream extends async._ControllerStream$(T) {
    get isBroadcast() {
      return true;
    }
  }
  (_BroadcastStream.new = function(controller) {
    _BroadcastStream.__proto__.new.call(this, controller);
    ;
  }).prototype = _BroadcastStream.prototype;
  ;
  _BroadcastStream.prototype[_is__BroadcastStream_default] = true;
  dart.setLibraryUri(_BroadcastStream, "dart:async");
  return _BroadcastStream;
});
async._BroadcastStream = async._BroadcastStream$();
;
const _eventState = dart.privateName(async, "_eventState");
const _next$0 = dart.privateName(async, "_next");
const _previous$0 = dart.privateName(async, "_previous");
const _expectsEvent = dart.privateName(async, "_expectsEvent");
const _toggleEventId = dart.privateName(async, "_toggleEventId");
const _isFiring = dart.privateName(async, "_isFiring");
const _setRemoveAfterFiring = dart.privateName(async, "_setRemoveAfterFiring");
const _removeAfterFiring = dart.privateName(async, "_removeAfterFiring");
const _onPause = dart.privateName(async, "_onPause");
const _onResume = dart.privateName(async, "_onResume");
const _recordCancel = dart.privateName(async, "_recordCancel");
const _onCancel = dart.privateName(async, "_onCancel");
const _recordPause = dart.privateName(async, "_recordPause");
const _recordResume = dart.privateName(async, "_recordResume");
const _onData$ = dart.privateName(async, "_onData");
const _onError = dart.privateName(async, "_onError");
const _onDone$ = dart.privateName(async, "_onDone");
const _zone$ = dart.privateName(async, "_zone");
const _cancelFuture = dart.privateName(async, "_cancelFuture");
const _pending$ = dart.privateName(async, "_pending");
const _state = dart.privateName(async, "_state");
const _setPendingEvents = dart.privateName(async, "_setPendingEvents");
let C98;
let C99;
let C100;
const _isCanceled = dart.privateName(async, "_isCanceled");
const _isPaused = dart.privateName(async, "_isPaused");
const _isInputPaused = dart.privateName(async, "_isInputPaused");
const _inCallback = dart.privateName(async, "_inCallback");
const _guardCallback = dart.privateName(async, "_guardCallback");
const _decrementPauseCount = dart.privateName(async, "_decrementPauseCount");
const _hasPending = dart.privateName(async, "_hasPending");
const _mayResumeInput = dart.privateName(async, "_mayResumeInput");
const _cancel = dart.privateName(async, "_cancel");
const _isClosed = dart.privateName(async, "_isClosed");
const _waitsForCancel = dart.privateName(async, "_waitsForCancel");
const _canFire = dart.privateName(async, "_canFire");
const _cancelOnError = dart.privateName(async, "_cancelOnError");
const _sendData = dart.privateName(async, "_sendData");
const _addPending = dart.privateName(async, "_addPending");
const _sendError = dart.privateName(async, "_sendError");
const _sendDone = dart.privateName(async, "_sendDone");
let C101;
const _close = dart.privateName(async, "_close");
const _checkState = dart.privateName(async, "_checkState");
const _is__BufferingStreamSubscription_default = Symbol('_is__BufferingStreamSubscription_default');
async._BufferingStreamSubscription$ = dart.generic(T => {
  let _PendingEventsOfT = () => (_PendingEventsOfT = dart.constFn(async._PendingEvents$(T)))();
  let _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  let _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
  class _BufferingStreamSubscription extends core.Object {
    [_setPendingEvents](pendingEvents) {
      _PendingEventsOfT()._check(pendingEvents);
      if (!(this[_pending$] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 126, 12, "_pending == null");
      if (pendingEvents == null) return;
      this[_pending$] = pendingEvents;
      if (!dart.test(pendingEvents.isEmpty)) {
        this[_state] = (dart.notNull(this[_state]) | 64) >>> 0;
        this[_pending$].schedule(this);
      }
    }
    onData(handleData) {
      handleData == null ? handleData = C98 || CT.C98 : null;
      this[_onData$] = this[_zone$].registerUnaryCallback(dart.dynamic, T, handleData);
    }
    onError(handleError) {
      handleError == null ? handleError = C99 || CT.C99 : null;
      if (ObjectAndStackTraceTovoid$().is(handleError)) {
        this[_onError] = this[_zone$].registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, handleError);
      } else if (ObjectTovoid$().is(handleError)) {
        this[_onError] = this[_zone$].registerUnaryCallback(dart.dynamic, core.Object, handleError);
      } else {
        dart.throw(new core.ArgumentError.new("handleError callback must take either an Object " + "(the error), or both an Object (the error) and a StackTrace."));
      }
    }
    onDone(handleDone) {
      handleDone == null ? handleDone = C100 || CT.C100 : null;
      this[_onDone$] = this[_zone$].registerCallback(dart.void, handleDone);
    }
    pause(resumeSignal) {
      if (resumeSignal === void 0) resumeSignal = null;
      if (dart.test(this[_isCanceled])) return;
      let wasPaused = this[_isPaused];
      let wasInputPaused = this[_isInputPaused];
      this[_state] = (dart.notNull(this[_state]) + 128 | 4) >>> 0;
      if (resumeSignal != null) resumeSignal.whenComplete(dart.bind(this, 'resume'));
      if (!dart.test(wasPaused) && this[_pending$] != null) this[_pending$].cancelSchedule();
      if (!dart.test(wasInputPaused) && !dart.test(this[_inCallback])) this[_guardCallback](dart.bind(this, _onPause));
    }
    resume() {
      if (dart.test(this[_isCanceled])) return;
      if (dart.test(this[_isPaused])) {
        this[_decrementPauseCount]();
        if (!dart.test(this[_isPaused])) {
          if (dart.test(this[_hasPending]) && !dart.test(this[_pending$].isEmpty)) {
            this[_pending$].schedule(this);
          } else {
            if (!dart.test(this[_mayResumeInput])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 182, 18, "_mayResumeInput");
            this[_state] = (dart.notNull(this[_state]) & ~4 >>> 0) >>> 0;
            if (!dart.test(this[_inCallback])) this[_guardCallback](dart.bind(this, _onResume));
          }
        }
      }
    }
    cancel() {
      let t30;
      this[_state] = (dart.notNull(this[_state]) & ~16 >>> 0) >>> 0;
      if (!dart.test(this[_isCanceled])) {
        this[_cancel]();
      }
      t30 = this[_cancelFuture];
      return t30 == null ? async.Future._nullFuture : t30;
    }
    asFuture(E, futureValue) {
      if (futureValue === void 0) futureValue = null;
      let result = new (async._Future$(E)).new();
      this[_onDone$] = dart.fn(() => {
        result[_complete](futureValue);
      }, VoidToNull());
      this[_onError] = dart.fn((error, stackTrace) => {
        let cancelFuture = this.cancel();
        if (cancelFuture != async.Future._nullFuture) {
          cancelFuture.whenComplete(dart.fn(() => {
            result[_completeError](error, stackTrace);
          }, VoidToNull()));
        } else {
          result[_completeError](error, stackTrace);
        }
      }, dynamicAndStackTraceToNull());
      return result;
    }
    get [_isInputPaused]() {
      return (dart.notNull(this[_state]) & 4) !== 0;
    }
    get [_isClosed]() {
      return (dart.notNull(this[_state]) & 2) !== 0;
    }
    get [_isCanceled]() {
      return (dart.notNull(this[_state]) & 8) !== 0;
    }
    get [_waitsForCancel]() {
      return (dart.notNull(this[_state]) & 16) !== 0;
    }
    get [_inCallback]() {
      return (dart.notNull(this[_state]) & 32) !== 0;
    }
    get [_hasPending]() {
      return (dart.notNull(this[_state]) & 64) !== 0;
    }
    get [_isPaused]() {
      return dart.notNull(this[_state]) >= 128;
    }
    get [_canFire]() {
      return dart.notNull(this[_state]) < 32;
    }
    get [_mayResumeInput]() {
      return !dart.test(this[_isPaused]) && (this[_pending$] == null || dart.test(this[_pending$].isEmpty));
    }
    get [_cancelOnError]() {
      return (dart.notNull(this[_state]) & 1) !== 0;
    }
    get isPaused() {
      return this[_isPaused];
    }
    [_cancel]() {
      this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
      if (dart.test(this[_hasPending])) {
        this[_pending$].cancelSchedule();
      }
      if (!dart.test(this[_inCallback])) this[_pending$] = null;
      this[_cancelFuture] = this[_onCancel]();
    }
    [_decrementPauseCount]() {
      if (!dart.test(this[_isPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 255, 12, "_isPaused");
      this[_state] = dart.notNull(this[_state]) - 128;
    }
    [_add](data) {
      T._check(data);
      if (!!dart.test(this[_isClosed])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 262, 12, "!_isClosed");
      if (dart.test(this[_isCanceled])) return;
      if (dart.test(this[_canFire])) {
        this[_sendData](data);
      } else {
        this[_addPending](new (_DelayedDataOfT()).new(data));
      }
    }
    [_addError](error, stackTrace) {
      if (dart.test(this[_isCanceled])) return;
      if (dart.test(this[_canFire])) {
        this[_sendError](error, stackTrace);
      } else {
        this[_addPending](new async._DelayedError.new(error, stackTrace));
      }
    }
    [_close]() {
      if (!!dart.test(this[_isClosed])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 281, 12, "!_isClosed");
      if (dart.test(this[_isCanceled])) return;
      this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
      if (dart.test(this[_canFire])) {
        this[_sendDone]();
      } else {
        this[_addPending](C101 || CT.C101);
      }
    }
    [_onPause]() {
      if (!dart.test(this[_isInputPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 296, 12, "_isInputPaused");
    }
    [_onResume]() {
      if (!!dart.test(this[_isInputPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 300, 12, "!_isInputPaused");
    }
    [_onCancel]() {
      if (!dart.test(this[_isCanceled])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 304, 12, "_isCanceled");
      return null;
    }
    [_addPending](event) {
      let pending = _StreamImplEventsOfT()._check(this[_pending$]);
      if (this[_pending$] == null) {
        pending = this[_pending$] = new (_StreamImplEventsOfT()).new();
      }
      pending.add(event);
      if (!dart.test(this[_hasPending])) {
        this[_state] = (dart.notNull(this[_state]) | 64) >>> 0;
        if (!dart.test(this[_isPaused])) {
          this[_pending$].schedule(this);
        }
      }
    }
    [_sendData](data) {
      if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 333, 12, "!_isCanceled");
      if (!!dart.test(this[_isPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 334, 12, "!_isPaused");
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 335, 12, "!_inCallback");
      let wasInputPaused = this[_isInputPaused];
      this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
      this[_zone$].runUnaryGuarded(T, this[_onData$], data);
      this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
      this[_checkState](wasInputPaused);
    }
    [_sendError](error, stackTrace) {
      if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 344, 12, "!_isCanceled");
      if (!!dart.test(this[_isPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 345, 12, "!_isPaused");
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 346, 12, "!_inCallback");
      let wasInputPaused = this[_isInputPaused];
      const sendError = () => {
        if (dart.test(this[_isCanceled]) && !dart.test(this[_waitsForCancel])) return;
        this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
        let onError = this[_onError];
        if (ObjectAndStackTraceTovoid$().is(onError)) {
          this[_zone$].runBinaryGuarded(core.Object, core.StackTrace, onError, error, stackTrace);
        } else {
          if (!ObjectTovoid$().is(this[_onError])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 359, 16, "_onError is void Function(Object)");
          this[_zone$].runUnaryGuarded(core.Object, ObjectTovoid$()._check(this[_onError]), error);
        }
        this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
      };
      dart.fn(sendError, VoidTovoid());
      if (dart.test(this[_cancelOnError])) {
        this[_state] = (dart.notNull(this[_state]) | 16) >>> 0;
        this[_cancel]();
        if (this[_cancelFuture] != null && this[_cancelFuture] != async.Future._nullFuture) {
          this[_cancelFuture].whenComplete(sendError);
        } else {
          sendError();
        }
      } else {
        sendError();
        this[_checkState](wasInputPaused);
      }
    }
    [_sendDone]() {
      if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 382, 12, "!_isCanceled");
      if (!!dart.test(this[_isPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 383, 12, "!_isPaused");
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 384, 12, "!_inCallback");
      const sendDone = () => {
        if (!dart.test(this[_waitsForCancel])) return;
        this[_state] = (dart.notNull(this[_state]) | (8 | 2 | 32) >>> 0) >>> 0;
        this[_zone$].runGuarded(this[_onDone$]);
        this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
      };
      dart.fn(sendDone, VoidTovoid());
      this[_cancel]();
      this[_state] = (dart.notNull(this[_state]) | 16) >>> 0;
      if (this[_cancelFuture] != null && this[_cancelFuture] != async.Future._nullFuture) {
        this[_cancelFuture].whenComplete(sendDone);
      } else {
        sendDone();
      }
    }
    [_guardCallback](callback) {
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 413, 12, "!_inCallback");
      let wasInputPaused = this[_isInputPaused];
      this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
      callback();
      this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
      this[_checkState](wasInputPaused);
    }
    [_checkState](wasInputPaused) {
      if (!!dart.test(this[_inCallback])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 432, 12, "!_inCallback");
      if (dart.test(this[_hasPending]) && dart.test(this[_pending$].isEmpty)) {
        this[_state] = (dart.notNull(this[_state]) & ~64 >>> 0) >>> 0;
        if (dart.test(this[_isInputPaused]) && dart.test(this[_mayResumeInput])) {
          this[_state] = (dart.notNull(this[_state]) & ~4 >>> 0) >>> 0;
        }
      }
      while (true) {
        if (dart.test(this[_isCanceled])) {
          this[_pending$] = null;
          return;
        }
        let isInputPaused = this[_isInputPaused];
        if (dart.equals(wasInputPaused, isInputPaused)) break;
        this[_state] = (dart.notNull(this[_state]) ^ 32) >>> 0;
        if (dart.test(isInputPaused)) {
          this[_onPause]();
        } else {
          this[_onResume]();
        }
        this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
        wasInputPaused = isInputPaused;
      }
      if (dart.test(this[_hasPending]) && !dart.test(this[_isPaused])) {
        this[_pending$].schedule(this);
      }
    }
  }
  (_BufferingStreamSubscription.new = function(onData, onError, onDone, cancelOnError) {
    this[_onData$] = null;
    this[_onError] = null;
    this[_onDone$] = null;
    this[_zone$] = async.Zone.current;
    this[_cancelFuture] = null;
    this[_pending$] = null;
    this[_state] = dart.test(cancelOnError) ? 1 : 0;
    this.onData(onData);
    this.onError(onError);
    this.onDone(onDone);
  }).prototype = _BufferingStreamSubscription.prototype;
  _BufferingStreamSubscription.prototype[dart.isStreamSubscription] = true;
  ;
  _BufferingStreamSubscription.prototype[_is__BufferingStreamSubscription_default] = true;
  _BufferingStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T), async._EventSink$(T), async._EventDispatch$(T)];
  ;
  dart.setGetterSignature(_BufferingStreamSubscription, () => ({
    __proto__: dart.getGetters(_BufferingStreamSubscription.__proto__),
    [_isInputPaused]: core.bool,
    [_isClosed]: core.bool,
    [_isCanceled]: core.bool,
    [_waitsForCancel]: core.bool,
    [_inCallback]: core.bool,
    [_hasPending]: core.bool,
    [_isPaused]: core.bool,
    [_canFire]: core.bool,
    [_mayResumeInput]: core.bool,
    [_cancelOnError]: core.bool,
    isPaused: core.bool
  }));
  dart.setLibraryUri(_BufferingStreamSubscription, "dart:async");
  ;
  return _BufferingStreamSubscription;
});
async._BufferingStreamSubscription = async._BufferingStreamSubscription$();
dart.defineLazy(async._BufferingStreamSubscription, {
  /*async._BufferingStreamSubscription._STATE_CANCEL_ON_ERROR*/get _STATE_CANCEL_ON_ERROR() {
    return 1;
  },
  /*async._BufferingStreamSubscription._STATE_CLOSED*/get _STATE_CLOSED() {
    return 2;
  },
  /*async._BufferingStreamSubscription._STATE_INPUT_PAUSED*/get _STATE_INPUT_PAUSED() {
    return 4;
  },
  /*async._BufferingStreamSubscription._STATE_CANCELED*/get _STATE_CANCELED() {
    return 8;
  },
  /*async._BufferingStreamSubscription._STATE_WAIT_FOR_CANCEL*/get _STATE_WAIT_FOR_CANCEL() {
    return 16;
  },
  /*async._BufferingStreamSubscription._STATE_IN_CALLBACK*/get _STATE_IN_CALLBACK() {
    return 32;
  },
  /*async._BufferingStreamSubscription._STATE_HAS_PENDING*/get _STATE_HAS_PENDING() {
    return 64;
  },
  /*async._BufferingStreamSubscription._STATE_PAUSE_COUNT*/get _STATE_PAUSE_COUNT() {
    return 128;
  }
});
;
const _is__ControllerSubscription_default = Symbol('_is__ControllerSubscription_default');
async._ControllerSubscription$ = dart.generic(T => {
  class _ControllerSubscription extends async._BufferingStreamSubscription$(T) {
    [_onCancel]() {
      return this[_controller$][_recordCancel](this);
    }
    [_onPause]() {
      this[_controller$][_recordPause](this);
    }
    [_onResume]() {
      this[_controller$][_recordResume](this);
    }
  }
  (_ControllerSubscription.new = function(_controller, onData, onError, onDone, cancelOnError) {
    this[_controller$] = _controller;
    _ControllerSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
    ;
  }).prototype = _ControllerSubscription.prototype;
  ;
  _ControllerSubscription.prototype[_is__ControllerSubscription_default] = true;
  dart.setLibraryUri(_ControllerSubscription, "dart:async");
  ;
  return _ControllerSubscription;
});
async._ControllerSubscription = async._ControllerSubscription$();
;
const _is__BroadcastSubscription_default = Symbol('_is__BroadcastSubscription_default');
const _next$1 = dart.privateName(async, "_BroadcastSubscription._next");
const _previous$1 = dart.privateName(async, "_BroadcastSubscription._previous");
async._BroadcastSubscription$ = dart.generic(T => {
  let _BroadcastSubscriptionOfT = () => (_BroadcastSubscriptionOfT = dart.constFn(async._BroadcastSubscription$(T)))();
  class _BroadcastSubscription extends async._ControllerSubscription$(T) {
    get [_next$0]() {
      return this[_next$1];
    }
    set [_next$0](value) {
      this[_next$1] = _BroadcastSubscriptionOfT()._check(value);
    }
    get [_previous$0]() {
      return this[_previous$1];
    }
    set [_previous$0](value) {
      this[_previous$1] = _BroadcastSubscriptionOfT()._check(value);
    }
    [_expectsEvent](eventId) {
      return (dart.notNull(this[_eventState]) & 1) >>> 0 === eventId;
    }
    [_toggleEventId]() {
      this[_eventState] = (dart.notNull(this[_eventState]) ^ 1) >>> 0;
    }
    get [_isFiring]() {
      return (dart.notNull(this[_eventState]) & 2) !== 0;
    }
    [_setRemoveAfterFiring]() {
      if (!dart.test(this[_isFiring])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 43, 12, "_isFiring");
      this[_eventState] = (dart.notNull(this[_eventState]) | 4) >>> 0;
    }
    get [_removeAfterFiring]() {
      return (dart.notNull(this[_eventState]) & 4) !== 0;
    }
    [_onPause]() {
    }
    [_onResume]() {
    }
  }
  (_BroadcastSubscription.new = function(controller, onData, onError, onDone, cancelOnError) {
    this[_eventState] = 0;
    this[_next$1] = null;
    this[_previous$1] = null;
    _BroadcastSubscription.__proto__.new.call(this, controller, onData, onError, onDone, cancelOnError);
    this[_next$0] = this[_previous$0] = this;
  }).prototype = _BroadcastSubscription.prototype;
  ;
  _BroadcastSubscription.prototype[_is__BroadcastSubscription_default] = true;
  ;
  dart.setGetterSignature(_BroadcastSubscription, () => ({
    __proto__: dart.getGetters(_BroadcastSubscription.__proto__),
    [_isFiring]: core.bool,
    [_removeAfterFiring]: core.bool
  }));
  dart.setLibraryUri(_BroadcastSubscription, "dart:async");
  ;
  return _BroadcastSubscription;
});
async._BroadcastSubscription = async._BroadcastSubscription$();
dart.defineLazy(async._BroadcastSubscription, {
  /*async._BroadcastSubscription._STATE_EVENT_ID*/get _STATE_EVENT_ID() {
    return 1;
  },
  /*async._BroadcastSubscription._STATE_FIRING*/get _STATE_FIRING() {
    return 2;
  },
  /*async._BroadcastSubscription._STATE_REMOVE_AFTER_FIRING*/get _STATE_REMOVE_AFTER_FIRING() {
    return 4;
  }
});
;
const _firstSubscription = dart.privateName(async, "_firstSubscription");
const _lastSubscription = dart.privateName(async, "_lastSubscription");
const _addStreamState = dart.privateName(async, "_addStreamState");
const _doneFuture = dart.privateName(async, "_doneFuture");
const _isEmpty = dart.privateName(async, "_isEmpty");
const _hasOneListener = dart.privateName(async, "_hasOneListener");
const _isAddingStream = dart.privateName(async, "_isAddingStream");
const _mayAddEvent = dart.privateName(async, "_mayAddEvent");
const _ensureDoneFuture = dart.privateName(async, "_ensureDoneFuture");
const _addListener = dart.privateName(async, "_addListener");
const _removeListener = dart.privateName(async, "_removeListener");
const _callOnCancel = dart.privateName(async, "_callOnCancel");
const _addEventError = dart.privateName(async, "_addEventError");
const _forEachListener = dart.privateName(async, "_forEachListener");
const _mayComplete = dart.privateName(async, "_mayComplete");
const _asyncComplete = dart.privateName(async, "_asyncComplete");
const _is__BroadcastStreamController_default = Symbol('_is__BroadcastStreamController_default');
async._BroadcastStreamController$ = dart.generic(T => {
  let _BroadcastStreamOfT = () => (_BroadcastStreamOfT = dart.constFn(async._BroadcastStream$(T)))();
  let _StreamSinkWrapperOfT = () => (_StreamSinkWrapperOfT = dart.constFn(async._StreamSinkWrapper$(T)))();
  let _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
  let _BroadcastSubscriptionOfT = () => (_BroadcastSubscriptionOfT = dart.constFn(async._BroadcastSubscription$(T)))();
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  let _AddStreamStateOfT = () => (_AddStreamStateOfT = dart.constFn(async._AddStreamState$(T)))();
  class _BroadcastStreamController extends core.Object {
    get onPause() {
      dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
    }
    set onPause(onPauseHandler) {
      dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
    }
    get onResume() {
      dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
    }
    set onResume(onResumeHandler) {
      dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
    }
    get stream() {
      return new (_BroadcastStreamOfT()).new(this);
    }
    get sink() {
      return new (_StreamSinkWrapperOfT()).new(this);
    }
    get isClosed() {
      return (dart.notNull(this[_state]) & 4) !== 0;
    }
    get isPaused() {
      return false;
    }
    get hasListener() {
      return !dart.test(this[_isEmpty]);
    }
    get [_hasOneListener]() {
      if (!!dart.test(this[_isEmpty])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 145, 12, "!_isEmpty");
      return this[_firstSubscription] == this[_lastSubscription];
    }
    get [_isFiring]() {
      return (dart.notNull(this[_state]) & 2) !== 0;
    }
    get [_isAddingStream]() {
      return (dart.notNull(this[_state]) & 8) !== 0;
    }
    get [_mayAddEvent]() {
      return dart.notNull(this[_state]) < 4;
    }
    [_ensureDoneFuture]() {
      if (this[_doneFuture] != null) return this[_doneFuture];
      return this[_doneFuture] = new async._Future.new();
    }
    get [_isEmpty]() {
      return this[_firstSubscription] == null;
    }
    [_addListener](subscription) {
      if (!(subscription[_next$0] == subscription)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 167, 12, "identical(subscription._next, subscription)");
      subscription[_eventState] = (dart.notNull(this[_state]) & 1) >>> 0;
      let oldLast = this[_lastSubscription];
      this[_lastSubscription] = subscription;
      subscription[_next$0] = null;
      subscription[_previous$0] = oldLast;
      if (oldLast == null) {
        this[_firstSubscription] = subscription;
      } else {
        oldLast[_next$0] = subscription;
      }
    }
    [_removeListener](subscription) {
      if (!(subscription[_controller$] === this)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 182, 12, "identical(subscription._controller, this)");
      if (!(subscription[_next$0] != subscription)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 183, 12, "!identical(subscription._next, subscription)");
      let previous = subscription[_previous$0];
      let next = subscription[_next$0];
      if (previous == null) {
        this[_firstSubscription] = next;
      } else {
        previous[_next$0] = next;
      }
      if (next == null) {
        this[_lastSubscription] = previous;
      } else {
        next[_previous$0] = previous;
      }
      subscription[_next$0] = subscription[_previous$0] = subscription;
    }
    [_subscribe](onData, onError, onDone, cancelOnError) {
      if (dart.test(this.isClosed)) {
        onDone == null ? onDone = C100 || CT.C100 : null;
        return new (_DoneStreamSubscriptionOfT()).new(onDone);
      }
      let subscription = new (_BroadcastSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError);
      this[_addListener](_BroadcastSubscriptionOfT()._check(subscription));
      if (this[_firstSubscription] == this[_lastSubscription]) {
        async._runGuarded(this.onListen);
      }
      return subscription;
    }
    [_recordCancel](sub) {
      let subscription = _BroadcastSubscriptionOfT()._check(sub);
      if (subscription[_next$0] == subscription) return null;
      if (dart.test(subscription[_isFiring])) {
        subscription[_setRemoveAfterFiring]();
      } else {
        this[_removeListener](subscription);
        if (!dart.test(this[_isFiring]) && dart.test(this[_isEmpty])) {
          this[_callOnCancel]();
        }
      }
      return null;
    }
    [_recordPause](subscription) {
    }
    [_recordResume](subscription) {
    }
    [_addEventError]() {
      if (dart.test(this.isClosed)) {
        return new core.StateError.new("Cannot add new events after calling close");
      }
      if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 246, 12, "_isAddingStream");
      return new core.StateError.new("Cannot add new events while doing an addStream");
    }
    add(data) {
      T._check(data);
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      this[_sendData](data);
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      error = async._nonNullError(error);
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      let replacement = async.Zone.current.errorCallback(error, stackTrace);
      if (replacement != null) {
        error = async._nonNullError(replacement.error);
        stackTrace = replacement.stackTrace;
      }
      this[_sendError](error, stackTrace);
    }
    close() {
      if (dart.test(this.isClosed)) {
        if (!(this[_doneFuture] != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 268, 14, "_doneFuture != null");
        return this[_doneFuture];
      }
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
      let doneFuture = this[_ensureDoneFuture]();
      this[_sendDone]();
      return doneFuture;
    }
    get done() {
      return this[_ensureDoneFuture]();
    }
    addStream(stream, opts) {
      let t30;
      StreamOfT()._check(stream);
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
      this[_addStreamState] = new (_AddStreamStateOfT()).new(this, stream, (t30 = cancelOnError, t30 == null ? false : t30));
      return this[_addStreamState].addStreamFuture;
    }
    [_add](data) {
      this[_sendData](data);
    }
    [_addError](error, stackTrace) {
      this[_sendError](error, stackTrace);
    }
    [_close]() {
      if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 297, 12, "_isAddingStream");
      let addState = this[_addStreamState];
      this[_addStreamState] = null;
      this[_state] = (dart.notNull(this[_state]) & ~8 >>> 0) >>> 0;
      addState.complete();
    }
    [_forEachListener](action) {
      let t30, t30$;
      if (dart.test(this[_isFiring])) {
        dart.throw(new core.StateError.new("Cannot fire new event. Controller is already firing an event"));
      }
      if (dart.test(this[_isEmpty])) return;
      let id = (dart.notNull(this[_state]) & 1) >>> 0;
      this[_state] = (dart.notNull(this[_state]) ^ (1 | 2) >>> 0) >>> 0;
      let subscription = this[_firstSubscription];
      while (subscription != null) {
        if (dart.test(subscription[_expectsEvent](id))) {
          t30 = subscription;
          t30[_eventState] = (dart.notNull(t30[_eventState]) | 2) >>> 0;
          action(subscription);
          subscription[_toggleEventId]();
          let next = subscription[_next$0];
          if (dart.test(subscription[_removeAfterFiring])) {
            this[_removeListener](subscription);
          }
          t30$ = subscription;
          t30$[_eventState] = (dart.notNull(t30$[_eventState]) & ~2 >>> 0) >>> 0;
          subscription = next;
        } else {
          subscription = subscription[_next$0];
        }
      }
      this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
      if (dart.test(this[_isEmpty])) {
        this[_callOnCancel]();
      }
    }
    [_callOnCancel]() {
      if (!dart.test(this[_isEmpty])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 346, 12, "_isEmpty");
      if (dart.test(this.isClosed) && dart.test(this[_doneFuture][_mayComplete])) {
        this[_doneFuture][_asyncComplete](null);
      }
      async._runGuarded(this.onCancel);
    }
  }
  (_BroadcastStreamController.new = function(onListen, onCancel) {
    this[_firstSubscription] = null;
    this[_lastSubscription] = null;
    this[_addStreamState] = null;
    this[_doneFuture] = null;
    this.onListen = onListen;
    this.onCancel = onCancel;
    this[_state] = 0;
    ;
  }).prototype = _BroadcastStreamController.prototype;
  ;
  _BroadcastStreamController.prototype[_is__BroadcastStreamController_default] = true;
  _BroadcastStreamController[dart.implements] = () => [async._StreamControllerBase$(T)];
  ;
  dart.setGetterSignature(_BroadcastStreamController, () => ({
    __proto__: dart.getGetters(_BroadcastStreamController.__proto__),
    onPause: dart.fnType(dart.void, []),
    onResume: dart.fnType(dart.void, []),
    stream: async.Stream$(T),
    sink: async.StreamSink$(T),
    isClosed: core.bool,
    isPaused: core.bool,
    hasListener: core.bool,
    [_hasOneListener]: core.bool,
    [_isFiring]: core.bool,
    [_isAddingStream]: core.bool,
    [_mayAddEvent]: core.bool,
    [_isEmpty]: core.bool,
    done: async.Future
  }));
  dart.setSetterSignature(_BroadcastStreamController, () => ({
    __proto__: dart.getSetters(_BroadcastStreamController.__proto__),
    onPause: dart.fnType(dart.void, []),
    onResume: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_BroadcastStreamController, "dart:async");
  ;
  return _BroadcastStreamController;
});
async._BroadcastStreamController = async._BroadcastStreamController$();
dart.defineLazy(async._BroadcastStreamController, {
  /*async._BroadcastStreamController._STATE_INITIAL*/get _STATE_INITIAL() {
    return 0;
  },
  /*async._BroadcastStreamController._STATE_EVENT_ID*/get _STATE_EVENT_ID() {
    return 1;
  },
  /*async._BroadcastStreamController._STATE_FIRING*/get _STATE_FIRING() {
    return 2;
  },
  /*async._BroadcastStreamController._STATE_CLOSED*/get _STATE_CLOSED() {
    return 4;
  },
  /*async._BroadcastStreamController._STATE_ADDSTREAM*/get _STATE_ADDSTREAM() {
    return 8;
  }
});
;
const _is__SyncBroadcastStreamController_default = Symbol('_is__SyncBroadcastStreamController_default');
async._SyncBroadcastStreamController$ = dart.generic(T => {
  let _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
  let _BufferingStreamSubscriptionOfTToNull = () => (_BufferingStreamSubscriptionOfTToNull = dart.constFn(dart.fnType(core.Null, [_BufferingStreamSubscriptionOfT()])))();
  class _SyncBroadcastStreamController extends async._BroadcastStreamController$(T) {
    get [_mayAddEvent]() {
      return dart.test(super[_mayAddEvent]) && !dart.test(this[_isFiring]);
    }
    [_addEventError]() {
      if (dart.test(this[_isFiring])) {
        return new core.StateError.new("Cannot fire new event. Controller is already firing an event");
      }
      return super[_addEventError]();
    }
    [_sendData](data) {
      if (dart.test(this[_isEmpty])) return;
      if (dart.test(this[_hasOneListener])) {
        this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
        let subscription = this[_firstSubscription];
        subscription[_add](data);
        this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
        if (dart.test(this[_isEmpty])) {
          this[_callOnCancel]();
        }
        return;
      }
      this[_forEachListener](dart.fn(subscription => {
        subscription[_add](data);
      }, _BufferingStreamSubscriptionOfTToNull()));
    }
    [_sendError](error, stackTrace) {
      if (dart.test(this[_isEmpty])) return;
      this[_forEachListener](dart.fn(subscription => {
        subscription[_addError](error, stackTrace);
      }, _BufferingStreamSubscriptionOfTToNull()));
    }
    [_sendDone]() {
      if (!dart.test(this[_isEmpty])) {
        this[_forEachListener](dart.fn(subscription => {
          subscription[_close]();
        }, _BufferingStreamSubscriptionOfTToNull()));
      } else {
        if (!(this[_doneFuture] != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 402, 14, "_doneFuture != null");
        if (!dart.test(this[_doneFuture][_mayComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 403, 14, "_doneFuture._mayComplete");
        this[_doneFuture][_asyncComplete](null);
      }
    }
  }
  (_SyncBroadcastStreamController.new = function(onListen, onCancel) {
    _SyncBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
    ;
  }).prototype = _SyncBroadcastStreamController.prototype;
  ;
  _SyncBroadcastStreamController.prototype[_is__SyncBroadcastStreamController_default] = true;
  _SyncBroadcastStreamController[dart.implements] = () => [async.SynchronousStreamController$(T)];
  ;
  dart.setLibraryUri(_SyncBroadcastStreamController, "dart:async");
  return _SyncBroadcastStreamController;
});
async._SyncBroadcastStreamController = async._SyncBroadcastStreamController$();
;
const _is__AsyncBroadcastStreamController_default = Symbol('_is__AsyncBroadcastStreamController_default');
async._AsyncBroadcastStreamController$ = dart.generic(T => {
  let _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  class _AsyncBroadcastStreamController extends async._BroadcastStreamController$(T) {
    [_sendData](data) {
      for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$0]) {
        subscription[_addPending](new (_DelayedDataOfT()).new(data));
      }
    }
    [_sendError](error, stackTrace) {
      for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$0]) {
        subscription[_addPending](new async._DelayedError.new(error, stackTrace));
      }
    }
    [_sendDone]() {
      if (!dart.test(this[_isEmpty])) {
        for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$0]) {
          subscription[_addPending](C101 || CT.C101);
        }
      } else {
        if (!(this[_doneFuture] != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 439, 14, "_doneFuture != null");
        if (!dart.test(this[_doneFuture][_mayComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 440, 14, "_doneFuture._mayComplete");
        this[_doneFuture][_asyncComplete](null);
      }
    }
  }
  (_AsyncBroadcastStreamController.new = function(onListen, onCancel) {
    _AsyncBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
    ;
  }).prototype = _AsyncBroadcastStreamController.prototype;
  ;
  _AsyncBroadcastStreamController.prototype[_is__AsyncBroadcastStreamController_default] = true;
  ;
  dart.setLibraryUri(_AsyncBroadcastStreamController, "dart:async");
  return _AsyncBroadcastStreamController;
});
async._AsyncBroadcastStreamController = async._AsyncBroadcastStreamController$();
;
const _addPendingEvent = dart.privateName(async, "_addPendingEvent");
const _is__AsBroadcastStreamController_default = Symbol('_is__AsBroadcastStreamController_default');
async._AsBroadcastStreamController$ = dart.generic(T => {
  let _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
  let _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  class _AsBroadcastStreamController extends async._SyncBroadcastStreamController$(T) {
    get [_hasPending]() {
      return this[_pending$] != null && !dart.test(this[_pending$].isEmpty);
    }
    [_addPendingEvent](event) {
      this[_pending$] == null ? this[_pending$] = new (_StreamImplEventsOfT()).new() : null;
      this[_pending$].add(event);
    }
    add(data) {
      T._check(data);
      if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
        this[_addPendingEvent](new (_DelayedDataOfT()).new(data));
        return;
      }
      super.add(data);
      while (dart.test(this[_hasPending])) {
        this[_pending$].handleNext(this);
      }
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
        this[_addPendingEvent](new async._DelayedError.new(error, stackTrace));
        return;
      }
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
      this[_sendError](error, stackTrace);
      while (dart.test(this[_hasPending])) {
        this[_pending$].handleNext(this);
      }
    }
    close() {
      if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
        this[_addPendingEvent](C101 || CT.C101);
        this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
        return super.done;
      }
      let result = super.close();
      if (!!dart.test(this[_hasPending])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart", 501, 12, "!_hasPending");
      return result;
    }
    [_callOnCancel]() {
      if (dart.test(this[_hasPending])) {
        this[_pending$].clear();
        this[_pending$] = null;
      }
      super[_callOnCancel]();
    }
  }
  (_AsBroadcastStreamController.new = function(onListen, onCancel) {
    this[_pending$] = null;
    _AsBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
    ;
  }).prototype = _AsBroadcastStreamController.prototype;
  ;
  _AsBroadcastStreamController.prototype[_is__AsBroadcastStreamController_default] = true;
  _AsBroadcastStreamController[dart.implements] = () => [async._EventDispatch$(T)];
  ;
  dart.setGetterSignature(_AsBroadcastStreamController, () => ({
    __proto__: dart.getGetters(_AsBroadcastStreamController.__proto__),
    [_hasPending]: core.bool
  }));
  dart.setLibraryUri(_AsBroadcastStreamController, "dart:async");
  ;
  return _AsBroadcastStreamController;
});
async._AsBroadcastStreamController = async._AsBroadcastStreamController$();
;
const libraryName$ = dart.privateName(async, "DeferredLibrary.libraryName");
const uri$ = dart.privateName(async, "DeferredLibrary.uri");
async.DeferredLibrary = class DeferredLibrary extends core.Object {
  get libraryName() {
    return this[libraryName$];
  }
  set libraryName(value) {
    super.libraryName = value;
  }
  get uri() {
    return this[uri$];
  }
  set uri(value) {
    super.uri = value;
  }
  load() {
    dart.throw("DeferredLibrary not supported. " + "please use the `import \"lib.dart\" deferred as lib` syntax.");
  }
};
(async.DeferredLibrary.new = function(libraryName, opts) {
  let uri = opts && 'uri' in opts ? opts.uri : null;
  this[libraryName$] = libraryName;
  this[uri$] = uri;
  ;
}).prototype = async.DeferredLibrary.prototype;
;
;
dart.setLibraryUri(async.DeferredLibrary, "dart:async");
;
const _s$ = dart.privateName(async, "_s");
async.DeferredLoadException = class DeferredLoadException extends core.Object {
  toString() {
    return "DeferredLoadException: '" + dart.str(this[_s$]) + "'";
  }
};
(async.DeferredLoadException.new = function(_s) {
  this[_s$] = _s;
  ;
}).prototype = async.DeferredLoadException.prototype;
;
async.DeferredLoadException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(async.DeferredLoadException, "dart:async");
;
dart.defineExtensionMethods(async.DeferredLoadException, ['toString']);
async.FutureOr$ = dart.generic(T => {
  let FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
  class FutureOr extends core.Object {}
  (FutureOr.__ = function() {
    dart.throw(new core.UnsupportedError.new("FutureOr can't be instantiated"));
  }).prototype = FutureOr.prototype;
  FutureOr.is = function is_FutureOr(o) {
    return T.is(o) || FutureOfT().is(o);
  };
  FutureOr.as = function as_FutureOr(o) {
    if (o == null || T.is(o) || FutureOfT().is(o)) return o;
    return dart.as(o, this, false);
  };
  FutureOr._check = function check_FutureOr(o) {
    if (o == null || T.is(o) || FutureOfT().is(o)) return o;
    return dart.as(o, this, true);
  };
  dart.setLibraryUri(FutureOr, "dart:async");
  return FutureOr;
});
async.FutureOr = async.FutureOr$();
const _asyncCompleteError = dart.privateName(async, "_asyncCompleteError");
const _completeWithValue = dart.privateName(async, "_completeWithValue");
let C102;
let C103;
async.Future$ = dart.generic(T => {
  class Future extends core.Object {
    static new(computation) {
      let result = new (async._Future$(T)).new();
      async.Timer.run(dart.fn(() => {
        try {
          result[_complete](computation());
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          async._completeWithErrorCallback(result, e, s);
        }
      }, VoidToNull()));
      return result;
    }
    static microtask(computation) {
      let result = new (async._Future$(T)).new();
      async.scheduleMicrotask(dart.fn(() => {
        try {
          result[_complete](computation());
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          async._completeWithErrorCallback(result, e, s);
        }
      }, VoidToNull()));
      return result;
    }
    static sync(computation) {
      try {
        let result = computation();
        if (async.Future$(T).is(result)) {
          return result;
        } else {
          return new (async._Future$(T)).value(T._check(result));
        }
      } catch (e) {
        let error = dart.getThrown(e);
        let stackTrace = dart.stackTrace(e);
        let future = new (async._Future$(T)).new();
        let replacement = async.Zone.current.errorCallback(error, stackTrace);
        if (replacement != null) {
          future[_asyncCompleteError](async._nonNullError(replacement.error), replacement.stackTrace);
        } else {
          future[_asyncCompleteError](error, stackTrace);
        }
        return future;
      }
    }
    static value(value) {
      if (value === void 0) value = null;
      return new (async._Future$(T)).immediate(value);
    }
    static error(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      error = async._nonNullError(error);
      if (async.Zone.current != async._rootZone) {
        let replacement = async.Zone.current.errorCallback(error, stackTrace);
        if (replacement != null) {
          error = async._nonNullError(replacement.error);
          stackTrace = replacement.stackTrace;
        }
      }
      return new (async._Future$(T)).immediateError(error, stackTrace);
    }
    static delayed(duration, computation) {
      if (computation === void 0) computation = null;
      let result = new (async._Future$(T)).new();
      async.Timer.new(duration, dart.fn(() => {
        if (computation == null) {
          result[_complete](null);
        } else {
          try {
            result[_complete](computation());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            async._completeWithErrorCallback(result, e, s);
          }
        }
      }, VoidToNull()));
      return result;
    }
    static wait(T, futures, opts) {
      let eagerError = opts && 'eagerError' in opts ? opts.eagerError : false;
      let cleanUp = opts && 'cleanUp' in opts ? opts.cleanUp : null;
      let result = new (async._Future$(core.List$(T))).new();
      let values = null;
      let remaining = 0;
      let error = null;
      let stackTrace = null;
      function handleError(theError, theStackTrace) {
        remaining = remaining - 1;
        if (values != null) {
          if (cleanUp != null) {
            for (let value of values) {
              if (value != null) {
                FutureOfNull().sync(dart.fn(() => {
                  cleanUp(value);
                }, VoidToNull()));
              }
            }
          }
          values = null;
          if (remaining === 0 || dart.test(eagerError)) {
            result[_completeError](theError, theStackTrace);
          } else {
            error = theError;
            stackTrace = theStackTrace;
          }
        } else if (remaining === 0 && !dart.test(eagerError)) {
          result[_completeError](error, stackTrace);
        }
      }
      dart.fn(handleError, dynamicAndStackTraceToNull());
      try {
        for (let future of futures) {
          let pos = remaining;
          future.then(core.Null, dart.fn(value => {
            remaining = remaining - 1;
            if (values != null) {
              values[$_set](pos, value);
              if (remaining === 0) {
                result[_completeWithValue](values);
              }
            } else {
              if (cleanUp != null && value != null) {
                FutureOfNull().sync(dart.fn(() => {
                  cleanUp(value);
                }, VoidToNull()));
              }
              if (remaining === 0 && !dart.test(eagerError)) {
                result[_completeError](error, stackTrace);
              }
            }
          }, dart.fnType(core.Null, [T])), {onError: handleError});
          remaining = remaining + 1;
        }
        if (remaining === 0) {
          return async.Future$(core.List$(T)).value(C102 || CT.C102);
        }
        values = core.List$(T).new(remaining);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let st = dart.stackTrace(e$);
        if (remaining === 0 || dart.test(eagerError)) {
          return async.Future$(core.List$(T)).error(e, st);
        } else {
          error = e;
          stackTrace = st;
        }
      }
      return result;
    }
    static any(T, futures) {
      let completer = async.Completer$(T).sync();
      let onValue = dart.fn(value => {
        if (!dart.test(completer.isCompleted)) completer.complete(value);
      }, dart.fnType(core.Null, [T]));
      let onError = dart.fn((error, stack) => {
        if (!dart.test(completer.isCompleted)) completer.completeError(error, stack);
      }, dynamicAndStackTraceToNull());
      for (let future of futures) {
        future.then(core.Null, onValue, {onError: onError});
      }
      return completer.future;
    }
    static forEach(T, elements, action) {
      let iterator = elements[$iterator];
      return async.Future.doWhile(dart.fn(() => {
        if (!dart.test(iterator.moveNext())) return false;
        let result = action(iterator.current);
        if (async.Future.is(result)) return result.then(core.bool, C103 || CT.C103);
        return true;
      }, VoidToFutureOrOfbool()));
    }
    static _kTrue(_) {
      return true;
    }
    static doWhile(action) {
      let doneSignal = new async._Future.new();
      let nextIteration = null;
      nextIteration = async.Zone.current.bindUnaryCallbackGuarded(core.bool, dart.fn(keepGoing => {
        while (dart.test(keepGoing)) {
          let result = null;
          try {
            result = action();
          } catch (e) {
            let error = dart.getThrown(e);
            let stackTrace = dart.stackTrace(e);
            async._asyncCompleteWithErrorCallback(doneSignal, error, stackTrace);
            return;
          }
          if (FutureOfbool().is(result)) {
            result.then(dart.void, nextIteration, {onError: dart.bind(doneSignal, _completeError)});
            return;
          }
          keepGoing = core.bool._check(result);
        }
        doneSignal[_complete](null);
      }, boolToNull()));
      nextIteration(true);
      return doneSignal;
    }
  }
  (Future[dart.mixinNew] = function() {
  }).prototype = Future.prototype;
  ;
  Future.prototype[dart.isFuture] = true;
  dart.setLibraryUri(Future, "dart:async");
  return Future;
});
async.Future = async.Future$();
dart.defineLazy(async.Future, {
  /*async.Future._nullFuture*/get _nullFuture() {
    return new (_FutureOfNull()).zoneValue(null, async.Zone.root);
  },
  /*async.Future._falseFuture*/get _falseFuture() {
    return new (_FutureOfbool()).zoneValue(false, async.Zone.root);
  }
});
;
const message$3 = dart.privateName(async, "TimeoutException.message");
const duration$ = dart.privateName(async, "TimeoutException.duration");
async.TimeoutException = class TimeoutException extends core.Object {
  get message() {
    return this[message$3];
  }
  set message(value) {
    super.message = value;
  }
  get duration() {
    return this[duration$];
  }
  set duration(value) {
    super.duration = value;
  }
  toString() {
    let result = "TimeoutException";
    if (this.duration != null) result = "TimeoutException after " + dart.str(this.duration);
    if (this.message != null) result = result + ": " + dart.str(this.message);
    return result;
  }
};
(async.TimeoutException.new = function(message, duration) {
  if (duration === void 0) duration = null;
  this[message$3] = message;
  this[duration$] = duration;
  ;
}).prototype = async.TimeoutException.prototype;
;
async.TimeoutException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(async.TimeoutException, "dart:async");
;
dart.defineExtensionMethods(async.TimeoutException, ['toString']);
const _is_Completer_default = Symbol('_is_Completer_default');
async.Completer$ = dart.generic(T => {
  class Completer extends core.Object {
    static new() {
      return new (async._AsyncCompleter$(T)).new();
    }
    static sync() {
      return new (async._SyncCompleter$(T)).new();
    }
  }
  (Completer[dart.mixinNew] = function() {
  }).prototype = Completer.prototype;
  ;
  Completer.prototype[_is_Completer_default] = true;
  dart.setLibraryUri(Completer, "dart:async");
  return Completer;
});
async.Completer = async.Completer$();
;
const _is__Completer_default = Symbol('_is__Completer_default');
async._Completer$ = dart.generic(T => {
  let _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
  class _Completer extends core.Object {
    completeError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      error = async._nonNullError(error);
      if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
      let replacement = async.Zone.current.errorCallback(error, stackTrace);
      if (replacement != null) {
        error = async._nonNullError(replacement.error);
        stackTrace = replacement.stackTrace;
      }
      this[_completeError](error, stackTrace);
    }
    get isCompleted() {
      return !dart.test(this.future[_mayComplete]);
    }
  }
  (_Completer.new = function() {
    this.future = new (_FutureOfT()).new();
    ;
  }).prototype = _Completer.prototype;
  ;
  _Completer.prototype[_is__Completer_default] = true;
  _Completer[dart.implements] = () => [async.Completer$(T)];
  ;
  dart.setGetterSignature(_Completer, () => ({
    __proto__: dart.getGetters(_Completer.__proto__),
    isCompleted: core.bool
  }));
  dart.setLibraryUri(_Completer, "dart:async");
  ;
  return _Completer;
});
async._Completer = async._Completer$();
;
const _is__AsyncCompleter_default = Symbol('_is__AsyncCompleter_default');
async._AsyncCompleter$ = dart.generic(T => {
  let FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
  class _AsyncCompleter extends async._Completer$(T) {
    complete(value) {
      if (value === void 0) value = null;
      FutureOrOfT()._check(value);
      if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
      this.future[_asyncComplete](value);
    }
    [_completeError](error, stackTrace) {
      this.future[_asyncCompleteError](error, stackTrace);
    }
  }
  (_AsyncCompleter.new = function() {
    _AsyncCompleter.__proto__.new.call(this);
    ;
  }).prototype = _AsyncCompleter.prototype;
  ;
  _AsyncCompleter.prototype[_is__AsyncCompleter_default] = true;
  ;
  dart.setLibraryUri(_AsyncCompleter, "dart:async");
  return _AsyncCompleter;
});
async._AsyncCompleter = async._AsyncCompleter$();
;
const _is__SyncCompleter_default = Symbol('_is__SyncCompleter_default');
async._SyncCompleter$ = dart.generic(T => {
  let FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
  class _SyncCompleter extends async._Completer$(T) {
    complete(value) {
      if (value === void 0) value = null;
      FutureOrOfT()._check(value);
      if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
      this.future[_complete](value);
    }
    [_completeError](error, stackTrace) {
      this.future[_completeError](error, stackTrace);
    }
  }
  (_SyncCompleter.new = function() {
    _SyncCompleter.__proto__.new.call(this);
    ;
  }).prototype = _SyncCompleter.prototype;
  ;
  _SyncCompleter.prototype[_is__SyncCompleter_default] = true;
  ;
  dart.setLibraryUri(_SyncCompleter, "dart:async");
  return _SyncCompleter;
});
async._SyncCompleter = async._SyncCompleter$();
;
const _nextListener = dart.privateName(async, "_nextListener");
const _onValue = dart.privateName(async, "_onValue");
const _errorTest = dart.privateName(async, "_errorTest");
const _whenCompleteAction = dart.privateName(async, "_whenCompleteAction");
const _is__FutureListener_default = Symbol('_is__FutureListener_default');
async._FutureListener$ = dart.generic((S, T) => {
  let SToFutureOrOfT = () => (SToFutureOrOfT = dart.constFn(dart.fnType(FutureOrOfT(), [S])))();
  let FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
  class _FutureListener extends core.Object {
    get [_zone$]() {
      return this.result[_zone$];
    }
    get handlesValue() {
      return (dart.notNull(this.state) & 1) !== 0;
    }
    get handlesError() {
      return (dart.notNull(this.state) & 2) !== 0;
    }
    get hasErrorTest() {
      return (dart.notNull(this.state) & 15) >>> 0 === 6;
    }
    get handlesComplete() {
      return (dart.notNull(this.state) & 15) >>> 0 === 8;
    }
    get isAwait() {
      return (dart.notNull(this.state) & 16) !== 0;
    }
    get [_onValue]() {
      if (!dart.test(this.handlesValue)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 115, 12, "handlesValue");
      return SToFutureOrOfT()._check(this.callback);
    }
    get [_onError]() {
      return this.errorCallback;
    }
    get [_errorTest]() {
      if (!dart.test(this.hasErrorTest)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 121, 12, "hasErrorTest");
      return ObjectTobool()._check(this.callback);
    }
    get [_whenCompleteAction]() {
      if (!dart.test(this.handlesComplete)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 126, 12, "handlesComplete");
      return VoidTodynamic()._check(this.callback);
    }
    get hasErrorCallback() {
      if (!dart.test(this.handlesError)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 134, 12, "handlesError");
      return this[_onError] != null;
    }
    handleValue(sourceResult) {
      S._check(sourceResult);
      return this[_zone$].runUnary(FutureOrOfT(), S, this[_onValue], sourceResult);
    }
    matchesErrorTest(asyncError) {
      if (!dart.test(this.hasErrorTest)) return true;
      return this[_zone$].runUnary(core.bool, core.Object, this[_errorTest], asyncError.error);
    }
    handleError(asyncError) {
      if (!(dart.test(this.handlesError) && dart.test(this.hasErrorCallback))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 148, 12, "handlesError && hasErrorCallback");
      let errorCallback = this.errorCallback;
      if (ObjectAndStackTraceTodynamic().is(errorCallback)) {
        return FutureOrOfT()._check(this[_zone$].runBinary(dart.dynamic, core.Object, core.StackTrace, errorCallback, asyncError.error, asyncError.stackTrace));
      } else {
        if (!ObjectTodynamic().is(errorCallback)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 156, 14, "errorCallback is dynamic Function(Object)");
        return FutureOrOfT()._check(this[_zone$].runUnary(dart.dynamic, core.Object, ObjectTodynamic()._check(errorCallback), asyncError.error));
      }
    }
    handleWhenComplete() {
      if (!!dart.test(this.handlesError)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 162, 12, "!handlesError");
      return this[_zone$].run(dart.dynamic, this[_whenCompleteAction]);
    }
  }
  (_FutureListener.then = function(result, onValue, errorCallback) {
    this[_nextListener] = null;
    this.result = result;
    this.callback = onValue;
    this.errorCallback = errorCallback;
    this.state = errorCallback == null ? 1 : 3;
    ;
  }).prototype = _FutureListener.prototype;
  (_FutureListener.thenAwait = function(result, onValue, errorCallback) {
    this[_nextListener] = null;
    this.result = result;
    this.callback = onValue;
    this.errorCallback = errorCallback;
    this.state = ((errorCallback == null ? 1 : 3) | 16) >>> 0;
    ;
  }).prototype = _FutureListener.prototype;
  (_FutureListener.catchError = function(result, errorCallback, callback) {
    this[_nextListener] = null;
    this.result = result;
    this.errorCallback = errorCallback;
    this.callback = callback;
    this.state = callback == null ? 2 : 6;
    ;
  }).prototype = _FutureListener.prototype;
  (_FutureListener.whenComplete = function(result, callback) {
    this[_nextListener] = null;
    this.result = result;
    this.callback = callback;
    this.errorCallback = null;
    this.state = 8;
    ;
  }).prototype = _FutureListener.prototype;
  ;
  _FutureListener.prototype[_is__FutureListener_default] = true;
  ;
  dart.setGetterSignature(_FutureListener, () => ({
    __proto__: dart.getGetters(_FutureListener.__proto__),
    [_zone$]: async.Zone,
    handlesValue: core.bool,
    handlesError: core.bool,
    hasErrorTest: core.bool,
    handlesComplete: core.bool,
    isAwait: core.bool,
    [_onValue]: dart.fnType(async.FutureOr$(T), [S]),
    [_onError]: core.Function,
    [_errorTest]: dart.fnType(core.bool, [core.Object]),
    [_whenCompleteAction]: dart.fnType(dart.dynamic, []),
    hasErrorCallback: core.bool
  }));
  dart.setLibraryUri(_FutureListener, "dart:async");
  ;
  return _FutureListener;
});
async._FutureListener = async._FutureListener$();
dart.defineLazy(async._FutureListener, {
  /*async._FutureListener.maskValue*/get maskValue() {
    return 1;
  },
  /*async._FutureListener.maskError*/get maskError() {
    return 2;
  },
  /*async._FutureListener.maskTestError*/get maskTestError() {
    return 4;
  },
  /*async._FutureListener.maskWhencomplete*/get maskWhencomplete() {
    return 8;
  },
  /*async._FutureListener.stateChain*/get stateChain() {
    return 0;
  },
  /*async._FutureListener.stateThen*/get stateThen() {
    return 1;
  },
  /*async._FutureListener.stateThenOnerror*/get stateThenOnerror() {
    return 3;
  },
  /*async._FutureListener.stateCatcherror*/get stateCatcherror() {
    return 2;
  },
  /*async._FutureListener.stateCatcherrorTest*/get stateCatcherrorTest() {
    return 6;
  },
  /*async._FutureListener.stateWhencomplete*/get stateWhencomplete() {
    return 8;
  },
  /*async._FutureListener.maskType*/get maskType() {
    return 15;
  },
  /*async._FutureListener.stateIsAwait*/get stateIsAwait() {
    return 16;
  }
});
;
const _resultOrListeners = dart.privateName(async, "_resultOrListeners");
const _setValue = dart.privateName(async, "_setValue");
const _isPendingComplete = dart.privateName(async, "_isPendingComplete");
const _mayAddListener = dart.privateName(async, "_mayAddListener");
const _isChained = dart.privateName(async, "_isChained");
const _isComplete = dart.privateName(async, "_isComplete");
const _hasError = dart.privateName(async, "_hasError");
const _setChained = dart.privateName(async, "_setChained");
const _setPendingComplete = dart.privateName(async, "_setPendingComplete");
const _clearPendingComplete = dart.privateName(async, "_clearPendingComplete");
const _error = dart.privateName(async, "_error");
const _chainSource = dart.privateName(async, "_chainSource");
const _setErrorObject = dart.privateName(async, "_setErrorObject");
const _setError = dart.privateName(async, "_setError");
const _cloneResult = dart.privateName(async, "_cloneResult");
const _prependListeners = dart.privateName(async, "_prependListeners");
const _reverseListeners = dart.privateName(async, "_reverseListeners");
const _removeListeners = dart.privateName(async, "_removeListeners");
const _chainFuture = dart.privateName(async, "_chainFuture");
const _is__Future_default = Symbol('_is__Future_default');
async._Future$ = dart.generic(T => {
  let _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
  let _FutureListenerOfT$T = () => (_FutureListenerOfT$T = dart.constFn(async._FutureListener$(T, T)))();
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  let FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
  let FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
  let VoidToFutureOrOfT = () => (VoidToFutureOrOfT = dart.constFn(dart.fnType(FutureOrOfT(), [])))();
  let TToNull = () => (TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
  class _Future extends core.Object {
    get [_mayComplete]() {
      return this[_state] === 0;
    }
    get [_isPendingComplete]() {
      return this[_state] === 1;
    }
    get [_mayAddListener]() {
      return dart.notNull(this[_state]) <= 1;
    }
    get [_isChained]() {
      return this[_state] === 2;
    }
    get [_isComplete]() {
      return dart.notNull(this[_state]) >= 4;
    }
    get [_hasError]() {
      return this[_state] === 8;
    }
    static _continuationFunctions(future) {
      let t36;
      let result = null;
      while (true) {
        if (dart.test(future[_mayAddListener])) return result;
        if (!!dart.test(future[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 249, 14, "!future._isComplete");
        if (!!dart.test(future[_isChained])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 250, 14, "!future._isChained");
        let listener = _FutureListenerOfObject$Object()._check(future[_resultOrListeners]);
        if (listener != null && listener[_nextListener] == null && dart.test(listener.isAwait)) {
          (t36 = result, t36 == null ? result = JSArrayOfFunction().of([]) : t36)[$add](dart.bind(listener, 'handleValue'));
          future = listener.result;
          if (!!dart.test(future[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 258, 16, "!future._isComplete");
        } else {
          break;
        }
      }
      return result;
    }
    [_setChained](source) {
      if (!dart.test(this[_mayAddListener])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 267, 12, "_mayAddListener");
      this[_state] = 2;
      this[_resultOrListeners] = source;
    }
    then(R, f, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let currentZone = async.Zone.current;
      if (currentZone != async._rootZone) {
        f = currentZone.registerUnaryCallback(async.FutureOr$(R), T, f);
        if (onError != null) {
          onError = async._registerErrorHandler(onError, currentZone);
        }
      }
      let result = new (async._Future$(R)).new();
      this[_addListener](new (async._FutureListener$(T, R)).then(result, f, onError));
      return result;
    }
    [_thenAwait](E, f, onError) {
      let result = new (async._Future$(E)).new();
      this[_addListener](new (async._FutureListener$(T, E)).thenAwait(result, f, onError));
      return result;
    }
    catchError(onError, opts) {
      let test = opts && 'test' in opts ? opts.test : null;
      let result = new (_FutureOfT()).new();
      if (result[_zone$] != async._rootZone) {
        onError = async._registerErrorHandler(onError, result[_zone$]);
        if (test != null) test = result[_zone$].registerUnaryCallback(core.bool, dart.dynamic, test);
      }
      this[_addListener](new (_FutureListenerOfT$T()).catchError(result, onError, test));
      return result;
    }
    whenComplete(action) {
      let result = new (_FutureOfT()).new();
      if (result[_zone$] != async._rootZone) {
        action = result[_zone$].registerCallback(dart.dynamic, action);
      }
      this[_addListener](new (_FutureListenerOfT$T()).whenComplete(result, action));
      return result;
    }
    asStream() {
      return StreamOfT().fromFuture(this);
    }
    [_setPendingComplete]() {
      if (!dart.test(this[_mayComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 323, 12, "_mayComplete");
      this[_state] = 1;
    }
    [_clearPendingComplete]() {
      if (!dart.test(this[_isPendingComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 328, 12, "_isPendingComplete");
      this[_state] = 0;
    }
    get [_error]() {
      if (!dart.test(this[_hasError])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 333, 12, "_hasError");
      return async.AsyncError._check(this[_resultOrListeners]);
    }
    get [_chainSource]() {
      if (!dart.test(this[_isChained])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 338, 12, "_isChained");
      return async._Future._check(this[_resultOrListeners]);
    }
    [_setValue](value) {
      T._check(value);
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 344, 12, "!_isComplete");
      this[_state] = 4;
      this[_resultOrListeners] = value;
    }
    [_setErrorObject](error) {
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 350, 12, "!_isComplete");
      this[_state] = 8;
      this[_resultOrListeners] = error;
    }
    [_setError](error, stackTrace) {
      this[_setErrorObject](new async.AsyncError.new(error, stackTrace));
    }
    [_cloneResult](source) {
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 363, 12, "!_isComplete");
      if (!dart.test(source[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 364, 12, "source._isComplete");
      this[_state] = source[_state];
      this[_resultOrListeners] = source[_resultOrListeners];
    }
    [_addListener](listener) {
      if (!(listener[_nextListener] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 370, 12, "listener._nextListener == null");
      if (dart.test(this[_mayAddListener])) {
        listener[_nextListener] = async._FutureListener._check(this[_resultOrListeners]);
        this[_resultOrListeners] = listener;
      } else {
        if (dart.test(this[_isChained])) {
          let source = this[_chainSource];
          if (!dart.test(source[_isComplete])) {
            source[_addListener](listener);
            return;
          }
          this[_cloneResult](source);
        }
        if (!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 386, 14, "_isComplete");
        this[_zone$].scheduleMicrotask(dart.fn(() => {
          async._Future._propagateToListeners(this, listener);
        }, VoidToNull()));
      }
    }
    [_prependListeners](listeners) {
      if (listeners == null) return;
      if (dart.test(this[_mayAddListener])) {
        let existingListeners = async._FutureListener._check(this[_resultOrListeners]);
        this[_resultOrListeners] = listeners;
        if (existingListeners != null) {
          let cursor = listeners;
          while (cursor[_nextListener] != null) {
            cursor = cursor[_nextListener];
          }
          cursor[_nextListener] = existingListeners;
        }
      } else {
        if (dart.test(this[_isChained])) {
          let source = this[_chainSource];
          if (!dart.test(source[_isComplete])) {
            source[_prependListeners](listeners);
            return;
          }
          this[_cloneResult](source);
        }
        if (!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 418, 14, "_isComplete");
        listeners = this[_reverseListeners](listeners);
        this[_zone$].scheduleMicrotask(dart.fn(() => {
          async._Future._propagateToListeners(this, listeners);
        }, VoidToNull()));
      }
    }
    [_removeListeners]() {
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 429, 12, "!_isComplete");
      let current = async._FutureListener._check(this[_resultOrListeners]);
      this[_resultOrListeners] = null;
      return this[_reverseListeners](current);
    }
    [_reverseListeners](listeners) {
      let prev = null;
      let current = listeners;
      while (current != null) {
        let next = current[_nextListener];
        current[_nextListener] = prev;
        prev = current;
        current = next;
      }
      return prev;
    }
    static _chainForeignFuture(source, target) {
      if (!!dart.test(target[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 452, 12, "!target._isComplete");
      if (!!async._Future.is(source)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 453, 12, "source is! _Future");
      target[_setPendingComplete]();
      try {
        source.then(core.Null, dart.fn(value => {
          if (!dart.test(target[_isPendingComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 459, 16, "target._isPendingComplete");
          target[_clearPendingComplete]();
          target[_complete](value);
        }, dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
            if (stackTrace === void 0) stackTrace = null;
            if (!dart.test(target[_isPendingComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 471, 16, "target._isPendingComplete");
            target[_completeError](error, stackTrace);
          }, dynamicAndStackTraceToNull$())});
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        async.scheduleMicrotask(dart.fn(() => {
          target[_completeError](e, s);
        }, VoidToNull()));
      }
    }
    static _chainCoreFuture(source, target) {
      if (!dart.test(target[_mayAddListener])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 488, 12, "target._mayAddListener");
      while (dart.test(source[_isChained])) {
        source = source[_chainSource];
      }
      if (dart.test(source[_isComplete])) {
        let listeners = target[_removeListeners]();
        target[_cloneResult](source);
        async._Future._propagateToListeners(target, listeners);
      } else {
        let listeners = async._FutureListener._check(target[_resultOrListeners]);
        target[_setChained](source);
        source[_prependListeners](listeners);
      }
    }
    [_complete](value) {
      FutureOrOfT()._check(value);
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 504, 12, "!_isComplete");
      if (FutureOfT().is(value)) {
        if (_FutureOfT().is(value)) {
          async._Future._chainCoreFuture(value, this);
        } else {
          async._Future._chainForeignFuture(value, this);
        }
      } else {
        let listeners = this[_removeListeners]();
        this[_setValue](T._check(value));
        async._Future._propagateToListeners(this, listeners);
      }
    }
    [_completeWithValue](value) {
      T._check(value);
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 519, 12, "!_isComplete");
      if (!!FutureOfT().is(value)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 520, 12, "value is! Future<T>");
      let listeners = this[_removeListeners]();
      this[_setValue](value);
      async._Future._propagateToListeners(this, listeners);
    }
    [_completeError](error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 528, 12, "!_isComplete");
      let listeners = this[_removeListeners]();
      this[_setError](error, stackTrace);
      async._Future._propagateToListeners(this, listeners);
    }
    [_asyncComplete](value) {
      FutureOrOfT()._check(value);
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 536, 12, "!_isComplete");
      if (FutureOfT().is(value)) {
        this[_chainFuture](value);
        return;
      }
      this[_setPendingComplete]();
      this[_zone$].scheduleMicrotask(dart.fn(() => {
        this[_completeWithValue](T._check(value));
      }, VoidToNull()));
    }
    [_chainFuture](value) {
      if (_FutureOfT().is(value)) {
        if (dart.test(value[_hasError])) {
          this[_setPendingComplete]();
          this[_zone$].scheduleMicrotask(dart.fn(() => {
            async._Future._chainCoreFuture(value, this);
          }, VoidToNull()));
        } else {
          async._Future._chainCoreFuture(value, this);
        }
        return;
      }
      async._Future._chainForeignFuture(value, this);
    }
    [_asyncCompleteError](error, stackTrace) {
      if (!!dart.test(this[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 576, 12, "!_isComplete");
      this[_setPendingComplete]();
      this[_zone$].scheduleMicrotask(dart.fn(() => {
        this[_completeError](error, stackTrace);
      }, VoidToNull()));
    }
    static _propagateToListeners(source, listeners) {
      while (true) {
        if (!dart.test(source[_isComplete])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 590, 14, "source._isComplete");
        let hasError = source[_hasError];
        if (listeners == null) {
          if (dart.test(hasError)) {
            let asyncError = source[_error];
            source[_zone$].handleUncaughtError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        while (listeners[_nextListener] != null) {
          let listener = listeners;
          listeners = listener[_nextListener];
          listener[_nextListener] = null;
          async._Future._propagateToListeners(source, listener);
        }
        let listener = listeners;
        let sourceResult = source[_resultOrListeners];
        let listenerHasError = hasError;
        let listenerValueOrError = sourceResult;
        if (dart.test(hasError) || dart.test(listener.handlesValue) || dart.test(listener.handlesComplete)) {
          let zone = listener[_zone$];
          if (dart.test(hasError) && !dart.test(source[_zone$].inSameErrorZone(zone))) {
            let asyncError = source[_error];
            source[_zone$].handleUncaughtError(asyncError.error, asyncError.stackTrace);
            return;
          }
          let oldZone = null;
          if (async.Zone.current != zone) {
            oldZone = async.Zone._enter(zone);
          }
          function handleWhenCompleteCallback() {
            if (!!dart.test(listener.handlesValue)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 646, 18, "!listener.handlesValue");
            if (!!dart.test(listener.handlesError)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart", 647, 18, "!listener.handlesError");
            let completeResult = null;
            try {
              completeResult = listener.handleWhenComplete();
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (dart.test(hasError) && core.identical(source[_error].error, e)) {
                listenerValueOrError = source[_error];
              } else {
                listenerValueOrError = new async.AsyncError.new(e, s);
              }
              listenerHasError = true;
              return;
            }
            if (async.Future.is(completeResult)) {
              if (async._Future.is(completeResult) && dart.test(completeResult[_isComplete])) {
                if (dart.test(completeResult[_hasError])) {
                  listenerValueOrError = completeResult[_error];
                  listenerHasError = true;
                }
                return;
              }
              let originalSource = source;
              listenerValueOrError = completeResult.then(dart.dynamic, dart.fn(_ => originalSource, dynamicTo_Future()));
              listenerHasError = false;
            }
          }
          dart.fn(handleWhenCompleteCallback, VoidTovoid());
          function handleValueCallback() {
            try {
              listenerValueOrError = listener.handleValue(sourceResult);
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              listenerValueOrError = new async.AsyncError.new(e, s);
              listenerHasError = true;
            }
          }
          dart.fn(handleValueCallback, VoidTovoid());
          function handleError() {
            try {
              let asyncError = source[_error];
              if (dart.test(listener.matchesErrorTest(asyncError)) && dart.test(listener.hasErrorCallback)) {
                listenerValueOrError = listener.handleError(asyncError);
                listenerHasError = false;
              }
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.identical(source[_error].error, e)) {
                listenerValueOrError = source[_error];
              } else {
                listenerValueOrError = new async.AsyncError.new(e, s);
              }
              listenerHasError = true;
            }
          }
          dart.fn(handleError, VoidTovoid());
          if (dart.test(listener.handlesComplete)) {
            handleWhenCompleteCallback();
          } else if (!dart.test(hasError)) {
            if (dart.test(listener.handlesValue)) {
              handleValueCallback();
            }
          } else {
            if (dart.test(listener.handlesError)) {
              handleError();
            }
          }
          if (oldZone != null) async.Zone._leave(oldZone);
          if (async.Future.is(listenerValueOrError)) {
            let chainSource = async.Future._check(listenerValueOrError);
            let result = listener.result;
            if (async._Future.is(chainSource)) {
              if (dart.test(chainSource[_isComplete])) {
                listeners = result[_removeListeners]();
                result[_cloneResult](chainSource);
                source = chainSource;
                continue;
              } else {
                async._Future._chainCoreFuture(chainSource, result);
              }
            } else {
              async._Future._chainForeignFuture(chainSource, result);
            }
            return;
          }
        }
        let result = listener.result;
        listeners = result[_removeListeners]();
        if (!dart.test(listenerHasError)) {
          result[_setValue](listenerValueOrError);
        } else {
          let asyncError = async.AsyncError._check(listenerValueOrError);
          result[_setErrorObject](asyncError);
        }
        source = result;
      }
    }
    timeout(timeLimit, opts) {
      let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
      VoidToFutureOrOfT()._check(onTimeout);
      if (dart.test(this[_isComplete])) return new (_FutureOfT()).immediate(this);
      let result = new (_FutureOfT()).new();
      let timer = null;
      if (onTimeout == null) {
        timer = async.Timer.new(timeLimit, dart.fn(() => {
          result[_completeError](new async.TimeoutException.new("Future not completed", timeLimit));
        }, VoidToNull()));
      } else {
        let zone = async.Zone.current;
        onTimeout = zone.registerCallback(FutureOrOfT(), onTimeout);
        timer = async.Timer.new(timeLimit, dart.fn(() => {
          try {
            result[_complete](zone.run(FutureOrOfT(), onTimeout));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            result[_completeError](e, s);
          }
        }, VoidToNull()));
      }
      this.then(core.Null, dart.fn(v => {
        if (dart.test(timer.isActive)) {
          timer.cancel();
          result[_completeWithValue](v);
        }
      }, TToNull()), {onError: dart.fn((e, s) => {
          if (dart.test(timer.isActive)) {
            timer.cancel();
            result[_completeError](e, s);
          }
        }, dynamicAndStackTraceToNull())});
      return result;
    }
  }
  (_Future.new = function() {
    this[_state] = 0;
    this[_resultOrListeners] = null;
    this[_zone$] = async.Zone.current;
    ;
  }).prototype = _Future.prototype;
  (_Future.immediate = function(result) {
    this[_state] = 0;
    this[_resultOrListeners] = null;
    this[_zone$] = async.Zone.current;
    this[_asyncComplete](result);
  }).prototype = _Future.prototype;
  (_Future.zoneValue = function(value, _zone) {
    this[_state] = 0;
    this[_resultOrListeners] = null;
    this[_zone$] = _zone;
    this[_setValue](value);
  }).prototype = _Future.prototype;
  (_Future.immediateError = function(error, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    this[_state] = 0;
    this[_resultOrListeners] = null;
    this[_zone$] = async.Zone.current;
    this[_asyncCompleteError](error, stackTrace);
  }).prototype = _Future.prototype;
  (_Future.value = function(value) {
    _Future.zoneValue.call(this, value, async.Zone.current);
  }).prototype = _Future.prototype;
  _Future.prototype[dart.isFuture] = true;
  ;
  _Future.prototype[_is__Future_default] = true;
  _Future[dart.implements] = () => [async.Future$(T)];
  ;
  dart.setGetterSignature(_Future, () => ({
    __proto__: dart.getGetters(_Future.__proto__),
    [_mayComplete]: core.bool,
    [_isPendingComplete]: core.bool,
    [_mayAddListener]: core.bool,
    [_isChained]: core.bool,
    [_isComplete]: core.bool,
    [_hasError]: core.bool,
    [_error]: async.AsyncError,
    [_chainSource]: async._Future
  }));
  dart.setLibraryUri(_Future, "dart:async");
  ;
  return _Future;
});
async._Future = async._Future$();
dart.defineLazy(async._Future, {
  /*async._Future._stateIncomplete*/get _stateIncomplete() {
    return 0;
  },
  /*async._Future._statePendingComplete*/get _statePendingComplete() {
    return 1;
  },
  /*async._Future._stateChained*/get _stateChained() {
    return 2;
  },
  /*async._Future._stateValue*/get _stateValue() {
    return 4;
  },
  /*async._Future._stateError*/get _stateError() {
    return 8;
  }
});
;
async._AsyncCallbackEntry = class _AsyncCallbackEntry extends core.Object {};
(async._AsyncCallbackEntry.new = function(callback) {
  this.next = null;
  this.callback = callback;
  ;
}).prototype = async._AsyncCallbackEntry.prototype;
;
dart.setLibraryUri(async._AsyncCallbackEntry, "dart:async");
;
let C104;
let C105;
async._AsyncRun = class _AsyncRun extends core.Object {
  static _initializeScheduleImmediate() {
    if (dart.global.scheduleImmediate != null) {
      return C104 || CT.C104;
    }
    return C105 || CT.C105;
  }
  static _scheduleImmediateJSOverride(callback) {
    dart.addAsyncCallback();
    dart.global.scheduleImmediate(() => {
      dart.removeAsyncCallback();
      callback();
    });
  }
  static _scheduleImmediateWithPromise(callback) {
    dart.addAsyncCallback();
    dart.global.Promise.resolve(null).then(() => {
      dart.removeAsyncCallback();
      callback();
    });
  }
  static _scheduleImmediate(callback) {
    async._AsyncRun._scheduleImmediateClosure(callback);
  }
};
(async._AsyncRun.new = function() {
  ;
}).prototype = async._AsyncRun.prototype;
;
dart.setLibraryUri(async._AsyncRun, "dart:async");
dart.defineLazy(async._AsyncRun, {
  /*async._AsyncRun._scheduleImmediateClosure*/get _scheduleImmediateClosure() {
    return async._AsyncRun._initializeScheduleImmediate();
  }
});
async.StreamSubscription$ = dart.generic(T => {
  class StreamSubscription extends core.Object {}
  (StreamSubscription.new = function() {
    ;
  }).prototype = StreamSubscription.prototype;
  ;
  StreamSubscription.prototype[dart.isStreamSubscription] = true;
  dart.setLibraryUri(StreamSubscription, "dart:async");
  return StreamSubscription;
});
async.StreamSubscription = async.StreamSubscription$();
;
const _is_EventSink_default = Symbol('_is_EventSink_default');
async.EventSink$ = dart.generic(T => {
  class EventSink extends core.Object {}
  (EventSink.new = function() {
    ;
  }).prototype = EventSink.prototype;
  ;
  EventSink.prototype[_is_EventSink_default] = true;
  EventSink[dart.implements] = () => [core.Sink$(T)];
  dart.setLibraryUri(EventSink, "dart:async");
  return EventSink;
});
async.EventSink = async.EventSink$();
;
const _stream$ = dart.privateName(async, "_stream");
const _is_StreamView_default = Symbol('_is_StreamView_default');
const _stream = dart.privateName(async, "StreamView._stream");
async.StreamView$ = dart.generic(T => {
  class StreamView extends async.Stream$(T) {
    get [_stream$]() {
      return this[_stream];
    }
    set [_stream$](value) {
      super[_stream$] = value;
    }
    get isBroadcast() {
      return this[_stream$].isBroadcast;
    }
    asBroadcastStream(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      return this[_stream$].asBroadcastStream({onListen: onListen, onCancel: onCancel});
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_stream$].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
  }
  (StreamView.new = function(stream) {
    this[_stream] = stream;
    StreamView.__proto__._internal.call(this);
    ;
  }).prototype = StreamView.prototype;
  ;
  StreamView.prototype[_is_StreamView_default] = true;
  ;
  dart.setLibraryUri(StreamView, "dart:async");
  ;
  return StreamView;
});
async.StreamView = async.StreamView$();
;
const _is_StreamConsumer_default = Symbol('_is_StreamConsumer_default');
async.StreamConsumer$ = dart.generic(S => {
  class StreamConsumer extends core.Object {}
  (StreamConsumer.new = function() {
    ;
  }).prototype = StreamConsumer.prototype;
  ;
  StreamConsumer.prototype[_is_StreamConsumer_default] = true;
  dart.setLibraryUri(StreamConsumer, "dart:async");
  return StreamConsumer;
});
async.StreamConsumer = async.StreamConsumer$();
;
const _is_StreamSink_default = Symbol('_is_StreamSink_default');
async.StreamSink$ = dart.generic(S => {
  class StreamSink extends core.Object {}
  (StreamSink.new = function() {
    ;
  }).prototype = StreamSink.prototype;
  ;
  StreamSink.prototype[_is_StreamSink_default] = true;
  StreamSink[dart.implements] = () => [async.EventSink$(S), async.StreamConsumer$(S)];
  dart.setLibraryUri(StreamSink, "dart:async");
  return StreamSink;
});
async.StreamSink = async.StreamSink$();
;
const _is_StreamTransformer_default = Symbol('_is_StreamTransformer_default');
async.StreamTransformer$ = dart.generic((S, T) => {
  class StreamTransformer extends core.Object {
    static castFrom(SS, ST, TS, TT, source) {
      return new (_internal.CastStreamTransformer$(SS, ST, TS, TT)).new(source);
    }
  }
  (StreamTransformer[dart.mixinNew] = function() {
  }).prototype = StreamTransformer.prototype;
  ;
  StreamTransformer.prototype[_is_StreamTransformer_default] = true;
  dart.setLibraryUri(StreamTransformer, "dart:async");
  return StreamTransformer;
});
async.StreamTransformer = async.StreamTransformer$();
;
const _is_StreamIterator_default = Symbol('_is_StreamIterator_default');
async.StreamIterator$ = dart.generic(T => {
  class StreamIterator extends core.Object {
    static new(stream) {
      return new (async._StreamIterator$(T)).new(stream);
    }
  }
  (StreamIterator[dart.mixinNew] = function() {
  }).prototype = StreamIterator.prototype;
  ;
  StreamIterator.prototype[_is_StreamIterator_default] = true;
  dart.setLibraryUri(StreamIterator, "dart:async");
  return StreamIterator;
});
async.StreamIterator = async.StreamIterator$();
;
const _is__ControllerEventSinkWrapper_default = Symbol('_is__ControllerEventSinkWrapper_default');
async._ControllerEventSinkWrapper$ = dart.generic(T => {
  class _ControllerEventSinkWrapper extends core.Object {
    add(data) {
      T._check(data);
      this[_sink$].add(data);
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      this[_sink$].addError(error, stackTrace);
    }
    close() {
      this[_sink$].close();
    }
  }
  (_ControllerEventSinkWrapper.new = function(_sink) {
    this[_sink$] = _sink;
    ;
  }).prototype = _ControllerEventSinkWrapper.prototype;
  ;
  _ControllerEventSinkWrapper.prototype[_is__ControllerEventSinkWrapper_default] = true;
  _ControllerEventSinkWrapper[dart.implements] = () => [async.EventSink$(T)];
  ;
  dart.setLibraryUri(_ControllerEventSinkWrapper, "dart:async");
  ;
  return _ControllerEventSinkWrapper;
});
async._ControllerEventSinkWrapper = async._ControllerEventSinkWrapper$();
;
const _is_StreamController_default = Symbol('_is_StreamController_default');
async.StreamController$ = dart.generic(T => {
  class StreamController extends core.Object {
    static new(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onPause = opts && 'onPause' in opts ? opts.onPause : null;
      let onResume = opts && 'onResume' in opts ? opts.onResume : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let sync = opts && 'sync' in opts ? opts.sync : false;
      return dart.test(sync) ? new (async._SyncStreamController$(T)).new(onListen, onPause, onResume, onCancel) : new (async._AsyncStreamController$(T)).new(onListen, onPause, onResume, onCancel);
    }
    static broadcast(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let sync = opts && 'sync' in opts ? opts.sync : false;
      return dart.test(sync) ? new (async._SyncBroadcastStreamController$(T)).new(onListen, onCancel) : new (async._AsyncBroadcastStreamController$(T)).new(onListen, onCancel);
    }
  }
  (StreamController[dart.mixinNew] = function() {
  }).prototype = StreamController.prototype;
  ;
  StreamController.prototype[_is_StreamController_default] = true;
  StreamController[dart.implements] = () => [async.StreamSink$(T)];
  dart.setLibraryUri(StreamController, "dart:async");
  return StreamController;
});
async.StreamController = async.StreamController$();
;
const _is_SynchronousStreamController_default = Symbol('_is_SynchronousStreamController_default');
async.SynchronousStreamController$ = dart.generic(T => {
  class SynchronousStreamController extends core.Object {}
  (SynchronousStreamController.new = function() {
    ;
  }).prototype = SynchronousStreamController.prototype;
  ;
  SynchronousStreamController.prototype[_is_SynchronousStreamController_default] = true;
  SynchronousStreamController[dart.implements] = () => [async.StreamController$(T)];
  dart.setLibraryUri(SynchronousStreamController, "dart:async");
  return SynchronousStreamController;
});
async.SynchronousStreamController = async.SynchronousStreamController$();
;
const _is__StreamControllerLifecycle_default = Symbol('_is__StreamControllerLifecycle_default');
async._StreamControllerLifecycle$ = dart.generic(T => {
  let StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
  class _StreamControllerLifecycle extends core.Object {
    [_recordPause](subscription) {
      StreamSubscriptionOfT()._check(subscription);
    }
    [_recordResume](subscription) {
      StreamSubscriptionOfT()._check(subscription);
    }
    [_recordCancel](subscription) {
      StreamSubscriptionOfT()._check(subscription);
      return null;
    }
  }
  (_StreamControllerLifecycle.new = function() {
    ;
  }).prototype = _StreamControllerLifecycle.prototype;
  ;
  _StreamControllerLifecycle.prototype[_is__StreamControllerLifecycle_default] = true;
  ;
  dart.setLibraryUri(_StreamControllerLifecycle, "dart:async");
  return _StreamControllerLifecycle;
});
async._StreamControllerLifecycle = async._StreamControllerLifecycle$();
;
const _is__StreamControllerBase_default = Symbol('_is__StreamControllerBase_default');
async._StreamControllerBase$ = dart.generic(T => {
  class _StreamControllerBase extends core.Object {}
  (_StreamControllerBase.new = function() {
    ;
  }).prototype = _StreamControllerBase.prototype;
  ;
  _StreamControllerBase.prototype[_is__StreamControllerBase_default] = true;
  _StreamControllerBase[dart.implements] = () => [async.StreamController$(T), async._StreamControllerLifecycle$(T), async._EventSink$(T), async._EventDispatch$(T)];
  dart.setLibraryUri(_StreamControllerBase, "dart:async");
  return _StreamControllerBase;
});
async._StreamControllerBase = async._StreamControllerBase$();
;
const _varData = dart.privateName(async, "_varData");
const _isInitialState = dart.privateName(async, "_isInitialState");
const _subscription = dart.privateName(async, "_subscription");
const _pendingEvents = dart.privateName(async, "_pendingEvents");
const _ensurePendingEvents = dart.privateName(async, "_ensurePendingEvents");
const _badEventState = dart.privateName(async, "_badEventState");
const _is__StreamController_default = Symbol('_is__StreamController_default');
async._StreamController$ = dart.generic(T => {
  let _ControllerStreamOfT = () => (_ControllerStreamOfT = dart.constFn(async._ControllerStream$(T)))();
  let _StreamSinkWrapperOfT = () => (_StreamSinkWrapperOfT = dart.constFn(async._StreamSinkWrapper$(T)))();
  let _PendingEventsOfT = () => (_PendingEventsOfT = dart.constFn(async._PendingEvents$(T)))();
  let _StreamControllerAddStreamStateOfT = () => (_StreamControllerAddStreamStateOfT = dart.constFn(async._StreamControllerAddStreamState$(T)))();
  let _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
  let _ControllerSubscriptionOfT = () => (_ControllerSubscriptionOfT = dart.constFn(async._ControllerSubscription$(T)))();
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  let _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  class _StreamController extends core.Object {
    get stream() {
      return new (_ControllerStreamOfT()).new(this);
    }
    get sink() {
      return new (_StreamSinkWrapperOfT()).new(this);
    }
    get [_isCanceled]() {
      return (dart.notNull(this[_state]) & 2) !== 0;
    }
    get hasListener() {
      return (dart.notNull(this[_state]) & 1) !== 0;
    }
    get [_isInitialState]() {
      return (dart.notNull(this[_state]) & 3) >>> 0 === 0;
    }
    get isClosed() {
      return (dart.notNull(this[_state]) & 4) !== 0;
    }
    get isPaused() {
      return dart.test(this.hasListener) ? this[_subscription][_isInputPaused] : !dart.test(this[_isCanceled]);
    }
    get [_isAddingStream]() {
      return (dart.notNull(this[_state]) & 8) !== 0;
    }
    get [_mayAddEvent]() {
      return dart.notNull(this[_state]) < 4;
    }
    get [_pendingEvents]() {
      if (!dart.test(this[_isInitialState])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_controller.dart", 512, 12, "_isInitialState");
      if (!dart.test(this[_isAddingStream])) {
        return _PendingEventsOfT()._check(this[_varData]);
      }
      let state = _StreamControllerAddStreamStateOfT()._check(this[_varData]);
      return _PendingEventsOfT()._check(state.varData);
    }
    [_ensurePendingEvents]() {
      if (!dart.test(this[_isInitialState])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_controller.dart", 522, 12, "_isInitialState");
      if (!dart.test(this[_isAddingStream])) {
        this[_varData] == null ? this[_varData] = new (_StreamImplEventsOfT()).new() : null;
        return _StreamImplEventsOfT()._check(this[_varData]);
      }
      let state = _StreamControllerAddStreamStateOfT()._check(this[_varData]);
      if (state.varData == null) state.varData = new (_StreamImplEventsOfT()).new();
      return _StreamImplEventsOfT()._check(state.varData);
    }
    get [_subscription]() {
      if (!dart.test(this.hasListener)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_controller.dart", 536, 12, "hasListener");
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT()._check(this[_varData]);
        return _ControllerSubscriptionOfT()._check(addState.varData);
      }
      return _ControllerSubscriptionOfT()._check(this[_varData]);
    }
    [_badEventState]() {
      if (dart.test(this.isClosed)) {
        return new core.StateError.new("Cannot add event after closing");
      }
      if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_controller.dart", 553, 12, "_isAddingStream");
      return new core.StateError.new("Cannot add event while adding a stream");
    }
    addStream(source, opts) {
      let t41;
      StreamOfT()._check(source);
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      if (dart.test(this[_isCanceled])) return new async._Future.immediate(null);
      let addState = new (_StreamControllerAddStreamStateOfT()).new(this, this[_varData], source, (t41 = cancelOnError, t41 == null ? false : t41));
      this[_varData] = addState;
      this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
      return addState.addStreamFuture;
    }
    get done() {
      return this[_ensureDoneFuture]();
    }
    [_ensureDoneFuture]() {
      this[_doneFuture] == null ? this[_doneFuture] = dart.test(this[_isCanceled]) ? async.Future._nullFuture : new async._Future.new() : null;
      return this[_doneFuture];
    }
    add(value) {
      T._check(value);
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      this[_add](value);
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      error = async._nonNullError(error);
      let replacement = async.Zone.current.errorCallback(error, stackTrace);
      if (replacement != null) {
        error = async._nonNullError(replacement.error);
        stackTrace = replacement.stackTrace;
      }
      this[_addError](error, stackTrace);
    }
    close() {
      if (dart.test(this.isClosed)) {
        return this[_ensureDoneFuture]();
      }
      if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
      this[_closeUnchecked]();
      return this[_ensureDoneFuture]();
    }
    [_closeUnchecked]() {
      this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
      if (dart.test(this.hasListener)) {
        this[_sendDone]();
      } else if (dart.test(this[_isInitialState])) {
        this[_ensurePendingEvents]().add(C101 || CT.C101);
      }
    }
    [_add](value) {
      T._check(value);
      if (dart.test(this.hasListener)) {
        this[_sendData](value);
      } else if (dart.test(this[_isInitialState])) {
        this[_ensurePendingEvents]().add(new (_DelayedDataOfT()).new(value));
      }
    }
    [_addError](error, stackTrace) {
      if (dart.test(this.hasListener)) {
        this[_sendError](error, stackTrace);
      } else if (dart.test(this[_isInitialState])) {
        this[_ensurePendingEvents]().add(new async._DelayedError.new(error, stackTrace));
      }
    }
    [_close]() {
      if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_controller.dart", 658, 12, "_isAddingStream");
      let addState = _StreamControllerAddStreamStateOfT()._check(this[_varData]);
      this[_varData] = addState.varData;
      this[_state] = (dart.notNull(this[_state]) & ~8 >>> 0) >>> 0;
      addState.complete();
    }
    [_subscribe](onData, onError, onDone, cancelOnError) {
      if (!dart.test(this[_isInitialState])) {
        dart.throw(new core.StateError.new("Stream has already been listened to."));
      }
      let subscription = new (_ControllerSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError);
      let pendingEvents = this[_pendingEvents];
      this[_state] = (dart.notNull(this[_state]) | 1) >>> 0;
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT()._check(this[_varData]);
        addState.varData = subscription;
        addState.resume();
      } else {
        this[_varData] = subscription;
      }
      subscription[_setPendingEvents](pendingEvents);
      subscription[_guardCallback](dart.fn(() => {
        async._runGuarded(this.onListen);
      }, VoidToNull()));
      return subscription;
    }
    [_recordCancel](subscription) {
      let t42;
      let result = null;
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT()._check(this[_varData]);
        result = addState.cancel();
      }
      this[_varData] = null;
      this[_state] = (dart.notNull(this[_state]) & ~(1 | 8) >>> 0 | 2) >>> 0;
      if (this.onCancel != null) {
        if (result == null) {
          try {
            result = async.Future._check(this.onCancel());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            result = (t42 = new async._Future.new(), t42[_asyncCompleteError](e, s), t42);
          }
        } else {
          result = result.whenComplete(this.onCancel);
        }
      }
      const complete = () => {
        if (this[_doneFuture] != null && dart.test(this[_doneFuture][_mayComplete])) {
          this[_doneFuture][_asyncComplete](null);
        }
      };
      dart.fn(complete, VoidTovoid());
      if (result != null) {
        result = result.whenComplete(complete);
      } else {
        complete();
      }
      return result;
    }
    [_recordPause](subscription) {
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT()._check(this[_varData]);
        addState.pause();
      }
      async._runGuarded(this.onPause);
    }
    [_recordResume](subscription) {
      if (dart.test(this[_isAddingStream])) {
        let addState = _StreamControllerAddStreamStateOfT()._check(this[_varData]);
        addState.resume();
      }
      async._runGuarded(this.onResume);
    }
  }
  (_StreamController.new = function(onListen, onPause, onResume, onCancel) {
    this[_varData] = null;
    this[_state] = 0;
    this[_doneFuture] = null;
    this.onListen = onListen;
    this.onPause = onPause;
    this.onResume = onResume;
    this.onCancel = onCancel;
    ;
  }).prototype = _StreamController.prototype;
  ;
  _StreamController.prototype[_is__StreamController_default] = true;
  _StreamController[dart.implements] = () => [async._StreamControllerBase$(T)];
  ;
  dart.setGetterSignature(_StreamController, () => ({
    __proto__: dart.getGetters(_StreamController.__proto__),
    stream: async.Stream$(T),
    sink: async.StreamSink$(T),
    [_isCanceled]: core.bool,
    hasListener: core.bool,
    [_isInitialState]: core.bool,
    isClosed: core.bool,
    isPaused: core.bool,
    [_isAddingStream]: core.bool,
    [_mayAddEvent]: core.bool,
    [_pendingEvents]: async._PendingEvents$(T),
    [_subscription]: async._ControllerSubscription$(T),
    done: async.Future
  }));
  dart.setLibraryUri(_StreamController, "dart:async");
  ;
  return _StreamController;
});
async._StreamController = async._StreamController$();
dart.defineLazy(async._StreamController, {
  /*async._StreamController._STATE_INITIAL*/get _STATE_INITIAL() {
    return 0;
  },
  /*async._StreamController._STATE_SUBSCRIBED*/get _STATE_SUBSCRIBED() {
    return 1;
  },
  /*async._StreamController._STATE_CANCELED*/get _STATE_CANCELED() {
    return 2;
  },
  /*async._StreamController._STATE_SUBSCRIPTION_MASK*/get _STATE_SUBSCRIPTION_MASK() {
    return 3;
  },
  /*async._StreamController._STATE_CLOSED*/get _STATE_CLOSED() {
    return 4;
  },
  /*async._StreamController._STATE_ADDSTREAM*/get _STATE_ADDSTREAM() {
    return 8;
  }
});
;
const _is__SyncStreamControllerDispatch_default = Symbol('_is__SyncStreamControllerDispatch_default');
async._SyncStreamControllerDispatch$ = dart.generic(T => {
  class _SyncStreamControllerDispatch extends core.Object {
    [_sendData](data) {
      this[_subscription][_add](data);
    }
    [_sendError](error, stackTrace) {
      this[_subscription][_addError](error, stackTrace);
    }
    [_sendDone]() {
      this[_subscription][_close]();
    }
  }
  (_SyncStreamControllerDispatch.new = function() {
    ;
  }).prototype = _SyncStreamControllerDispatch.prototype;
  ;
  _SyncStreamControllerDispatch.prototype[_is__SyncStreamControllerDispatch_default] = true;
  _SyncStreamControllerDispatch[dart.implements] = () => [async._StreamController$(T), async.SynchronousStreamController$(T)];
  ;
  dart.setLibraryUri(_SyncStreamControllerDispatch, "dart:async");
  return _SyncStreamControllerDispatch;
});
async._SyncStreamControllerDispatch = async._SyncStreamControllerDispatch$();
;
const _is__AsyncStreamControllerDispatch_default = Symbol('_is__AsyncStreamControllerDispatch_default');
async._AsyncStreamControllerDispatch$ = dart.generic(T => {
  let _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
  class _AsyncStreamControllerDispatch extends core.Object {
    [_sendData](data) {
      this[_subscription][_addPending](new (_DelayedDataOfT()).new(data));
    }
    [_sendError](error, stackTrace) {
      this[_subscription][_addPending](new async._DelayedError.new(error, stackTrace));
    }
    [_sendDone]() {
      this[_subscription][_addPending](C101 || CT.C101);
    }
  }
  (_AsyncStreamControllerDispatch.new = function() {
    ;
  }).prototype = _AsyncStreamControllerDispatch.prototype;
  ;
  _AsyncStreamControllerDispatch.prototype[_is__AsyncStreamControllerDispatch_default] = true;
  _AsyncStreamControllerDispatch[dart.implements] = () => [async._StreamController$(T)];
  ;
  dart.setLibraryUri(_AsyncStreamControllerDispatch, "dart:async");
  return _AsyncStreamControllerDispatch;
});
async._AsyncStreamControllerDispatch = async._AsyncStreamControllerDispatch$();
;
const _is__AsyncStreamController_default = Symbol('_is__AsyncStreamController_default');
async._AsyncStreamController$ = dart.generic(T => {
  const _StreamController__AsyncStreamControllerDispatch$36 = class _StreamController__AsyncStreamControllerDispatch extends async._StreamController$(T) {};
  (_StreamController__AsyncStreamControllerDispatch$36.new = function(onListen, onPause, onResume, onCancel) {
    _StreamController__AsyncStreamControllerDispatch$36.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
  }).prototype = _StreamController__AsyncStreamControllerDispatch$36.prototype;
  dart.applyMixin(_StreamController__AsyncStreamControllerDispatch$36, async._AsyncStreamControllerDispatch$(T));
  class _AsyncStreamController extends _StreamController__AsyncStreamControllerDispatch$36 {}
  (_AsyncStreamController.new = function(onListen, onPause, onResume, onCancel) {
    _AsyncStreamController.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
    ;
  }).prototype = _AsyncStreamController.prototype;
  ;
  _AsyncStreamController.prototype[_is__AsyncStreamController_default] = true;
  dart.setLibraryUri(_AsyncStreamController, "dart:async");
  return _AsyncStreamController;
});
async._AsyncStreamController = async._AsyncStreamController$();
;
const _is__SyncStreamController_default = Symbol('_is__SyncStreamController_default');
async._SyncStreamController$ = dart.generic(T => {
  const _StreamController__SyncStreamControllerDispatch$36 = class _StreamController__SyncStreamControllerDispatch extends async._StreamController$(T) {};
  (_StreamController__SyncStreamControllerDispatch$36.new = function(onListen, onPause, onResume, onCancel) {
    _StreamController__SyncStreamControllerDispatch$36.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
  }).prototype = _StreamController__SyncStreamControllerDispatch$36.prototype;
  dart.applyMixin(_StreamController__SyncStreamControllerDispatch$36, async._SyncStreamControllerDispatch$(T));
  class _SyncStreamController extends _StreamController__SyncStreamControllerDispatch$36 {}
  (_SyncStreamController.new = function(onListen, onPause, onResume, onCancel) {
    _SyncStreamController.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
    ;
  }).prototype = _SyncStreamController.prototype;
  ;
  _SyncStreamController.prototype[_is__SyncStreamController_default] = true;
  dart.setLibraryUri(_SyncStreamController, "dart:async");
  return _SyncStreamController;
});
async._SyncStreamController = async._SyncStreamController$();
;
const _target$ = dart.privateName(async, "_target");
const _is__StreamSinkWrapper_default = Symbol('_is__StreamSinkWrapper_default');
async._StreamSinkWrapper$ = dart.generic(T => {
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  class _StreamSinkWrapper extends core.Object {
    add(data) {
      T._check(data);
      this[_target$].add(data);
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      this[_target$].addError(error, stackTrace);
    }
    close() {
      return this[_target$].close();
    }
    addStream(source) {
      StreamOfT()._check(source);
      return this[_target$].addStream(source);
    }
    get done() {
      return this[_target$].done;
    }
  }
  (_StreamSinkWrapper.new = function(_target) {
    this[_target$] = _target;
    ;
  }).prototype = _StreamSinkWrapper.prototype;
  ;
  _StreamSinkWrapper.prototype[_is__StreamSinkWrapper_default] = true;
  _StreamSinkWrapper[dart.implements] = () => [async.StreamSink$(T)];
  ;
  dart.setGetterSignature(_StreamSinkWrapper, () => ({
    __proto__: dart.getGetters(_StreamSinkWrapper.__proto__),
    done: async.Future
  }));
  dart.setLibraryUri(_StreamSinkWrapper, "dart:async");
  ;
  return _StreamSinkWrapper;
});
async._StreamSinkWrapper = async._StreamSinkWrapper$();
;
const _is__AddStreamState_default = Symbol('_is__AddStreamState_default');
async._AddStreamState$ = dart.generic(T => {
  class _AddStreamState extends core.Object {
    static makeErrorHandler(controller) {
      return dart.fn((e, s) => {
        controller[_addError](e, s);
        controller[_close]();
      }, dynamicAndStackTraceToNull());
    }
    pause() {
      this.addSubscription.pause();
    }
    resume() {
      this.addSubscription.resume();
    }
    cancel() {
      let cancel = this.addSubscription.cancel();
      if (cancel == null) {
        this.addStreamFuture[_asyncComplete](null);
        return null;
      }
      return cancel.whenComplete(dart.fn(() => {
        this.addStreamFuture[_asyncComplete](null);
      }, VoidToNull()));
    }
    complete() {
      this.addStreamFuture[_asyncComplete](null);
    }
  }
  (_AddStreamState.new = function(controller, source, cancelOnError) {
    this.addStreamFuture = new async._Future.new();
    this.addSubscription = source.listen(dart.bind(controller, _add), {onError: core.Function._check(dart.test(cancelOnError) ? async._AddStreamState.makeErrorHandler(controller) : dart.bind(controller, _addError)), onDone: dart.bind(controller, _close), cancelOnError: cancelOnError});
    ;
  }).prototype = _AddStreamState.prototype;
  ;
  _AddStreamState.prototype[_is__AddStreamState_default] = true;
  ;
  dart.setLibraryUri(_AddStreamState, "dart:async");
  ;
  return _AddStreamState;
});
async._AddStreamState = async._AddStreamState$();
;
const _is__StreamControllerAddStreamState_default = Symbol('_is__StreamControllerAddStreamState_default');
async._StreamControllerAddStreamState$ = dart.generic(T => {
  class _StreamControllerAddStreamState extends async._AddStreamState$(T) {}
  (_StreamControllerAddStreamState.new = function(controller, varData, source, cancelOnError) {
    this.varData = varData;
    _StreamControllerAddStreamState.__proto__.new.call(this, controller, source, cancelOnError);
    if (dart.test(controller.isPaused)) {
      this.addSubscription.pause();
    }
  }).prototype = _StreamControllerAddStreamState.prototype;
  ;
  _StreamControllerAddStreamState.prototype[_is__StreamControllerAddStreamState_default] = true;
  dart.setLibraryUri(_StreamControllerAddStreamState, "dart:async");
  ;
  return _StreamControllerAddStreamState;
});
async._StreamControllerAddStreamState = async._StreamControllerAddStreamState$();
;
const _is__EventSink_default = Symbol('_is__EventSink_default');
async._EventSink$ = dart.generic(T => {
  class _EventSink extends core.Object {}
  (_EventSink.new = function() {
    ;
  }).prototype = _EventSink.prototype;
  ;
  _EventSink.prototype[_is__EventSink_default] = true;
  dart.setLibraryUri(_EventSink, "dart:async");
  return _EventSink;
});
async._EventSink = async._EventSink$();
;
const _is__EventDispatch_default = Symbol('_is__EventDispatch_default');
async._EventDispatch$ = dart.generic(T => {
  class _EventDispatch extends core.Object {}
  (_EventDispatch.new = function() {
    ;
  }).prototype = _EventDispatch.prototype;
  ;
  _EventDispatch.prototype[_is__EventDispatch_default] = true;
  dart.setLibraryUri(_EventDispatch, "dart:async");
  return _EventDispatch;
});
async._EventDispatch = async._EventDispatch$();
;
const _isUsed = dart.privateName(async, "_isUsed");
const _is__GeneratedStreamImpl_default = Symbol('_is__GeneratedStreamImpl_default');
async._GeneratedStreamImpl$ = dart.generic(T => {
  let _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
  class _GeneratedStreamImpl extends async._StreamImpl$(T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      let t42;
      if (dart.test(this[_isUsed])) dart.throw(new core.StateError.new("Stream has already been listened to."));
      this[_isUsed] = true;
      t42 = new (_BufferingStreamSubscriptionOfT()).new(onData, onError, onDone, cancelOnError);
      t42[_setPendingEvents](this[_pending$]());
      return t42;
    }
  }
  (_GeneratedStreamImpl.new = function(_pending) {
    this[_isUsed] = false;
    this[_pending$] = _pending;
    _GeneratedStreamImpl.__proto__.new.call(this);
    ;
  }).prototype = _GeneratedStreamImpl.prototype;
  ;
  _GeneratedStreamImpl.prototype[_is__GeneratedStreamImpl_default] = true;
  dart.setLibraryUri(_GeneratedStreamImpl, "dart:async");
  ;
  return _GeneratedStreamImpl;
});
async._GeneratedStreamImpl = async._GeneratedStreamImpl$();
;
const _iterator = dart.privateName(async, "_iterator");
const _eventScheduled = dart.privateName(async, "_eventScheduled");
const _is__PendingEvents_default = Symbol('_is__PendingEvents_default');
async._PendingEvents$ = dart.generic(T => {
  let _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
  class _PendingEvents extends core.Object {
    get isScheduled() {
      return this[_state] === 1;
    }
    get [_eventScheduled]() {
      return dart.notNull(this[_state]) >= 1;
    }
    schedule(dispatch) {
      _EventDispatchOfT()._check(dispatch);
      if (dart.test(this.isScheduled)) return;
      if (!!dart.test(this.isEmpty)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 659, 12, "!isEmpty");
      if (dart.test(this[_eventScheduled])) {
        if (!(this[_state] === 3)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 661, 14, "_state == _STATE_CANCELED");
        this[_state] = 1;
        return;
      }
      async.scheduleMicrotask(dart.fn(() => {
        let oldState = this[_state];
        this[_state] = 0;
        if (oldState === 3) return;
        this.handleNext(dispatch);
      }, VoidToNull()));
      this[_state] = 1;
    }
    cancelSchedule() {
      if (dart.test(this.isScheduled)) this[_state] = 3;
    }
  }
  (_PendingEvents.new = function() {
    this[_state] = 0;
    ;
  }).prototype = _PendingEvents.prototype;
  ;
  _PendingEvents.prototype[_is__PendingEvents_default] = true;
  ;
  dart.setGetterSignature(_PendingEvents, () => ({
    __proto__: dart.getGetters(_PendingEvents.__proto__),
    isScheduled: core.bool,
    [_eventScheduled]: core.bool
  }));
  dart.setLibraryUri(_PendingEvents, "dart:async");
  ;
  return _PendingEvents;
});
async._PendingEvents = async._PendingEvents$();
dart.defineLazy(async._PendingEvents, {
  /*async._PendingEvents._STATE_UNSCHEDULED*/get _STATE_UNSCHEDULED() {
    return 0;
  },
  /*async._PendingEvents._STATE_SCHEDULED*/get _STATE_SCHEDULED() {
    return 1;
  },
  /*async._PendingEvents._STATE_CANCELED*/get _STATE_CANCELED() {
    return 3;
  }
});
;
const _is__IterablePendingEvents_default = Symbol('_is__IterablePendingEvents_default');
async._IterablePendingEvents$ = dart.generic(T => {
  let _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
  class _IterablePendingEvents extends async._PendingEvents$(T) {
    get isEmpty() {
      return this[_iterator] == null;
    }
    handleNext(dispatch) {
      _EventDispatchOfT()._check(dispatch);
      if (this[_iterator] == null) {
        dart.throw(new core.StateError.new("No events pending."));
      }
      let hasMore = null;
      try {
        hasMore = this[_iterator].moveNext();
        if (dart.test(hasMore)) {
          dispatch[_sendData](this[_iterator].current);
        } else {
          this[_iterator] = null;
          dispatch[_sendDone]();
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (hasMore == null) {
          this[_iterator] = C22 || CT.C22;
          dispatch[_sendError](e, s);
        } else {
          dispatch[_sendError](e, s);
        }
      }
    }
    clear() {
      if (dart.test(this.isScheduled)) this.cancelSchedule();
      this[_iterator] = null;
    }
  }
  (_IterablePendingEvents.new = function(data) {
    this[_iterator] = data[$iterator];
    _IterablePendingEvents.__proto__.new.call(this);
    ;
  }).prototype = _IterablePendingEvents.prototype;
  ;
  _IterablePendingEvents.prototype[_is__IterablePendingEvents_default] = true;
  ;
  dart.setGetterSignature(_IterablePendingEvents, () => ({
    __proto__: dart.getGetters(_IterablePendingEvents.__proto__),
    isEmpty: core.bool
  }));
  dart.setLibraryUri(_IterablePendingEvents, "dart:async");
  ;
  return _IterablePendingEvents;
});
async._IterablePendingEvents = async._IterablePendingEvents$();
;
const _is__DelayedEvent_default = Symbol('_is__DelayedEvent_default');
async._DelayedEvent$ = dart.generic(T => {
  class _DelayedEvent extends core.Object {}
  (_DelayedEvent.new = function() {
    this.next = null;
    ;
  }).prototype = _DelayedEvent.prototype;
  ;
  _DelayedEvent.prototype[_is__DelayedEvent_default] = true;
  dart.setLibraryUri(_DelayedEvent, "dart:async");
  ;
  return _DelayedEvent;
});
async._DelayedEvent = async._DelayedEvent$();
;
const _is__DelayedData_default = Symbol('_is__DelayedData_default');
async._DelayedData$ = dart.generic(T => {
  let _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
  class _DelayedData extends async._DelayedEvent$(T) {
    perform(dispatch) {
      _EventDispatchOfT()._check(dispatch);
      dispatch[_sendData](this.value);
    }
  }
  (_DelayedData.new = function(value) {
    this.value = value;
    _DelayedData.__proto__.new.call(this);
    ;
  }).prototype = _DelayedData.prototype;
  ;
  _DelayedData.prototype[_is__DelayedData_default] = true;
  ;
  dart.setLibraryUri(_DelayedData, "dart:async");
  ;
  return _DelayedData;
});
async._DelayedData = async._DelayedData$();
;
async._DelayedError = class _DelayedError extends async._DelayedEvent {
  perform(dispatch) {
    async._EventDispatch._check(dispatch);
    dispatch[_sendError](this.error, this.stackTrace);
  }
};
(async._DelayedError.new = function(error, stackTrace) {
  this.error = error;
  this.stackTrace = stackTrace;
  async._DelayedError.__proto__.new.call(this);
  ;
}).prototype = async._DelayedError.prototype;
;
;
dart.setLibraryUri(async._DelayedError, "dart:async");
;
async._DelayedDone = class _DelayedDone extends core.Object {
  perform(dispatch) {
    async._EventDispatch._check(dispatch);
    dispatch[_sendDone]();
  }
  get next() {
    return null;
  }
  set next(_) {
    dart.throw(new core.StateError.new("No events after a done."));
  }
};
(async._DelayedDone.new = function() {
  ;
}).prototype = async._DelayedDone.prototype;
;
async._DelayedDone[dart.implements] = () => [async._DelayedEvent];
;
dart.setGetterSignature(async._DelayedDone, () => ({
  __proto__: dart.getGetters(async._DelayedDone.__proto__),
  next: async._DelayedEvent
}));
dart.setSetterSignature(async._DelayedDone, () => ({
  __proto__: dart.getSetters(async._DelayedDone.__proto__),
  next: async._DelayedEvent
}));
dart.setLibraryUri(async._DelayedDone, "dart:async");
const _is__StreamImplEvents_default = Symbol('_is__StreamImplEvents_default');
async._StreamImplEvents$ = dart.generic(T => {
  let _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
  class _StreamImplEvents extends async._PendingEvents$(T) {
    get isEmpty() {
      return this.lastPendingEvent == null;
    }
    add(event) {
      if (this.lastPendingEvent == null) {
        this.firstPendingEvent = this.lastPendingEvent = event;
      } else {
        this.lastPendingEvent = this.lastPendingEvent.next = event;
      }
    }
    handleNext(dispatch) {
      _EventDispatchOfT()._check(dispatch);
      if (!!dart.test(this.isScheduled)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 703, 12, "!isScheduled");
      let event = this.firstPendingEvent;
      this.firstPendingEvent = event.next;
      if (this.firstPendingEvent == null) {
        this.lastPendingEvent = null;
      }
      event.perform(dispatch);
    }
    clear() {
      if (dart.test(this.isScheduled)) this.cancelSchedule();
      this.firstPendingEvent = this.lastPendingEvent = null;
    }
  }
  (_StreamImplEvents.new = function() {
    this.firstPendingEvent = null;
    this.lastPendingEvent = null;
    _StreamImplEvents.__proto__.new.call(this);
    ;
  }).prototype = _StreamImplEvents.prototype;
  ;
  _StreamImplEvents.prototype[_is__StreamImplEvents_default] = true;
  ;
  dart.setGetterSignature(_StreamImplEvents, () => ({
    __proto__: dart.getGetters(_StreamImplEvents.__proto__),
    isEmpty: core.bool
  }));
  dart.setLibraryUri(_StreamImplEvents, "dart:async");
  ;
  return _StreamImplEvents;
});
async._StreamImplEvents = async._StreamImplEvents$();
;
const _schedule = dart.privateName(async, "_schedule");
const _isSent = dart.privateName(async, "_isSent");
const _isScheduled = dart.privateName(async, "_isScheduled");
const _is__DoneStreamSubscription_default = Symbol('_is__DoneStreamSubscription_default');
async._DoneStreamSubscription$ = dart.generic(T => {
  class _DoneStreamSubscription extends core.Object {
    get [_isSent]() {
      return (dart.notNull(this[_state]) & 1) !== 0;
    }
    get [_isScheduled]() {
      return (dart.notNull(this[_state]) & 2) !== 0;
    }
    get isPaused() {
      return dart.notNull(this[_state]) >= 4;
    }
    [_schedule]() {
      if (dart.test(this[_isScheduled])) return;
      this[_zone$].scheduleMicrotask(dart.bind(this, _sendDone));
      this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
    }
    onData(handleData) {
    }
    onError(handleError) {
    }
    onDone(handleDone) {
      this[_onDone$] = handleDone;
    }
    pause(resumeSignal) {
      if (resumeSignal === void 0) resumeSignal = null;
      this[_state] = dart.notNull(this[_state]) + 4;
      if (resumeSignal != null) resumeSignal.whenComplete(dart.bind(this, 'resume'));
    }
    resume() {
      if (dart.test(this.isPaused)) {
        this[_state] = dart.notNull(this[_state]) - 4;
        if (!dart.test(this.isPaused) && !dart.test(this[_isSent])) {
          this[_schedule]();
        }
      }
    }
    cancel() {
      return async.Future._nullFuture;
    }
    asFuture(E, futureValue) {
      if (futureValue === void 0) futureValue = null;
      let result = new (async._Future$(E)).new();
      this[_onDone$] = dart.fn(() => {
        result[_completeWithValue](futureValue);
      }, VoidToNull());
      return result;
    }
    [_sendDone]() {
      this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
      if (dart.test(this.isPaused)) return;
      this[_state] = (dart.notNull(this[_state]) | 1) >>> 0;
      if (this[_onDone$] != null) this[_zone$].runGuarded(this[_onDone$]);
    }
  }
  (_DoneStreamSubscription.new = function(_onDone) {
    this[_state] = 0;
    this[_onDone$] = _onDone;
    this[_zone$] = async.Zone.current;
    this[_schedule]();
  }).prototype = _DoneStreamSubscription.prototype;
  _DoneStreamSubscription.prototype[dart.isStreamSubscription] = true;
  ;
  _DoneStreamSubscription.prototype[_is__DoneStreamSubscription_default] = true;
  _DoneStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T)];
  ;
  dart.setGetterSignature(_DoneStreamSubscription, () => ({
    __proto__: dart.getGetters(_DoneStreamSubscription.__proto__),
    [_isSent]: core.bool,
    [_isScheduled]: core.bool,
    isPaused: core.bool
  }));
  dart.setLibraryUri(_DoneStreamSubscription, "dart:async");
  ;
  return _DoneStreamSubscription;
});
async._DoneStreamSubscription = async._DoneStreamSubscription$();
dart.defineLazy(async._DoneStreamSubscription, {
  /*async._DoneStreamSubscription._DONE_SENT*/get _DONE_SENT() {
    return 1;
  },
  /*async._DoneStreamSubscription._SCHEDULED*/get _SCHEDULED() {
    return 2;
  },
  /*async._DoneStreamSubscription._PAUSED*/get _PAUSED() {
    return 4;
  }
});
;
const _source$4 = dart.privateName(async, "_source");
const _onListenHandler = dart.privateName(async, "_onListenHandler");
const _onCancelHandler = dart.privateName(async, "_onCancelHandler");
const _cancelSubscription = dart.privateName(async, "_cancelSubscription");
const _pauseSubscription = dart.privateName(async, "_pauseSubscription");
const _resumeSubscription = dart.privateName(async, "_resumeSubscription");
const _isSubscriptionPaused = dart.privateName(async, "_isSubscriptionPaused");
const _is__AsBroadcastStream_default = Symbol('_is__AsBroadcastStream_default');
async._AsBroadcastStream$ = dart.generic(T => {
  let StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
  let _AsBroadcastStreamControllerOfT = () => (_AsBroadcastStreamControllerOfT = dart.constFn(async._AsBroadcastStreamController$(T)))();
  let _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
  let _BroadcastSubscriptionWrapperOfT = () => (_BroadcastSubscriptionWrapperOfT = dart.constFn(async._BroadcastSubscriptionWrapper$(T)))();
  class _AsBroadcastStream extends async.Stream$(T) {
    get isBroadcast() {
      return true;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      if (this[_controller$] == null || dart.test(this[_controller$].isClosed)) {
        return new (_DoneStreamSubscriptionOfT()).new(onDone);
      }
      this[_subscription] == null ? this[_subscription] = this[_source$4].listen(dart.bind(this[_controller$], 'add'), {onError: dart.bind(this[_controller$], 'addError'), onDone: dart.bind(this[_controller$], 'close')}) : null;
      cancelOnError = true === cancelOnError;
      return this[_controller$][_subscribe](onData, onError, onDone, cancelOnError);
    }
    [_onCancel]() {
      let shutdown = this[_controller$] == null || dart.test(this[_controller$].isClosed);
      if (this[_onCancelHandler] != null) {
        this[_zone$].runUnary(dart.void, _BroadcastSubscriptionWrapperOfT(), this[_onCancelHandler], new (_BroadcastSubscriptionWrapperOfT()).new(this));
      }
      if (shutdown) {
        if (this[_subscription] != null) {
          this[_subscription].cancel();
          this[_subscription] = null;
        }
      }
    }
    [_onListen$]() {
      if (this[_onListenHandler] != null) {
        this[_zone$].runUnary(dart.void, _BroadcastSubscriptionWrapperOfT(), this[_onListenHandler], new (_BroadcastSubscriptionWrapperOfT()).new(this));
      }
    }
    [_cancelSubscription]() {
      if (this[_subscription] == null) return;
      let subscription = this[_subscription];
      this[_subscription] = null;
      this[_controller$] = null;
      subscription.cancel();
    }
    [_pauseSubscription](resumeSignal) {
      if (this[_subscription] == null) return;
      this[_subscription].pause(resumeSignal);
    }
    [_resumeSubscription]() {
      if (this[_subscription] == null) return;
      this[_subscription].resume();
    }
    get [_isSubscriptionPaused]() {
      if (this[_subscription] == null) return false;
      return this[_subscription].isPaused;
    }
  }
  (_AsBroadcastStream.new = function(_source, onListenHandler, onCancelHandler) {
    this[_controller$] = null;
    this[_subscription] = null;
    this[_source$4] = _source;
    this[_onListenHandler] = async.Zone.current.registerUnaryCallback(dart.dynamic, StreamSubscriptionOfT(), onListenHandler);
    this[_onCancelHandler] = async.Zone.current.registerUnaryCallback(dart.dynamic, StreamSubscriptionOfT(), onCancelHandler);
    this[_zone$] = async.Zone.current;
    _AsBroadcastStream.__proto__.new.call(this);
    this[_controller$] = new (_AsBroadcastStreamControllerOfT()).new(dart.bind(this, _onListen$), dart.bind(this, _onCancel));
  }).prototype = _AsBroadcastStream.prototype;
  ;
  _AsBroadcastStream.prototype[_is__AsBroadcastStream_default] = true;
  ;
  dart.setGetterSignature(_AsBroadcastStream, () => ({
    __proto__: dart.getGetters(_AsBroadcastStream.__proto__),
    [_isSubscriptionPaused]: core.bool
  }));
  dart.setLibraryUri(_AsBroadcastStream, "dart:async");
  ;
  return _AsBroadcastStream;
});
async._AsBroadcastStream = async._AsBroadcastStream$();
;
const _is__BroadcastSubscriptionWrapper_default = Symbol('_is__BroadcastSubscriptionWrapper_default');
async._BroadcastSubscriptionWrapper$ = dart.generic(T => {
  class _BroadcastSubscriptionWrapper extends core.Object {
    onData(handleData) {
      dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
    }
    onError(handleError) {
      dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
    }
    onDone(handleDone) {
      dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
    }
    pause(resumeSignal) {
      if (resumeSignal === void 0) resumeSignal = null;
      this[_stream$][_pauseSubscription](resumeSignal);
    }
    resume() {
      this[_stream$][_resumeSubscription]();
    }
    cancel() {
      this[_stream$][_cancelSubscription]();
      return async.Future._nullFuture;
    }
    get isPaused() {
      return this[_stream$][_isSubscriptionPaused];
    }
    asFuture(E, futureValue) {
      if (futureValue === void 0) futureValue = null;
      dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
    }
  }
  (_BroadcastSubscriptionWrapper.new = function(_stream) {
    this[_stream$] = _stream;
    ;
  }).prototype = _BroadcastSubscriptionWrapper.prototype;
  _BroadcastSubscriptionWrapper.prototype[dart.isStreamSubscription] = true;
  ;
  _BroadcastSubscriptionWrapper.prototype[_is__BroadcastSubscriptionWrapper_default] = true;
  _BroadcastSubscriptionWrapper[dart.implements] = () => [async.StreamSubscription$(T)];
  ;
  dart.setGetterSignature(_BroadcastSubscriptionWrapper, () => ({
    __proto__: dart.getGetters(_BroadcastSubscriptionWrapper.__proto__),
    isPaused: core.bool
  }));
  dart.setLibraryUri(_BroadcastSubscriptionWrapper, "dart:async");
  ;
  return _BroadcastSubscriptionWrapper;
});
async._BroadcastSubscriptionWrapper = async._BroadcastSubscriptionWrapper$();
;
const _stateData = dart.privateName(async, "_stateData");
const _initializeOrDone = dart.privateName(async, "_initializeOrDone");
const _is__StreamIterator_default = Symbol('_is__StreamIterator_default');
async._StreamIterator$ = dart.generic(T => {
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  let StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
  class _StreamIterator extends core.Object {
    get current() {
      if (this[_subscription] != null && dart.test(this[_isPaused])) {
        return T._check(this[_stateData]);
      }
      return null;
    }
    moveNext() {
      if (this[_subscription] != null) {
        if (dart.test(this[_isPaused])) {
          let future = new (_FutureOfbool()).new();
          this[_stateData] = future;
          this[_isPaused] = false;
          this[_subscription].resume();
          return future;
        }
        dart.throw(new core.StateError.new("Already waiting for next."));
      }
      return this[_initializeOrDone]();
    }
    [_initializeOrDone]() {
      if (!(this[_subscription] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 1002, 12, "_subscription == null");
      let stateData = this[_stateData];
      if (stateData != null) {
        let stream = StreamOfT()._check(stateData);
        this[_subscription] = stream.listen(dart.bind(this, _onData$), {onError: dart.bind(this, _onError), onDone: dart.bind(this, _onDone$), cancelOnError: true});
        let future = new (_FutureOfbool()).new();
        this[_stateData] = future;
        return future;
      }
      return async.Future._falseFuture;
    }
    cancel() {
      let subscription = StreamSubscriptionOfT()._check(this[_subscription]);
      let stateData = this[_stateData];
      this[_stateData] = null;
      if (subscription != null) {
        this[_subscription] = null;
        if (!dart.test(this[_isPaused])) {
          let future = _FutureOfbool()._check(stateData);
          future[_asyncComplete](false);
        }
        return subscription.cancel();
      }
      return async.Future._nullFuture;
    }
    [_onData$](data) {
      T._check(data);
      if (!(this[_subscription] != null && !dart.test(this[_isPaused]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 1031, 12, "_subscription != null && !_isPaused");
      let moveNextFuture = _FutureOfbool()._check(this[_stateData]);
      this[_stateData] = data;
      this[_isPaused] = true;
      moveNextFuture[_complete](true);
      if (this[_subscription] != null && dart.test(this[_isPaused])) this[_subscription].pause();
    }
    [_onError](error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      if (!(this[_subscription] != null && !dart.test(this[_isPaused]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 1040, 12, "_subscription != null && !_isPaused");
      let moveNextFuture = _FutureOfbool()._check(this[_stateData]);
      this[_subscription] = null;
      this[_stateData] = null;
      moveNextFuture[_completeError](error, stackTrace);
    }
    [_onDone$]() {
      if (!(this[_subscription] != null && !dart.test(this[_isPaused]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart", 1048, 12, "_subscription != null && !_isPaused");
      let moveNextFuture = _FutureOfbool()._check(this[_stateData]);
      this[_subscription] = null;
      this[_stateData] = null;
      moveNextFuture[_complete](false);
    }
  }
  (_StreamIterator.new = function(stream) {
    let t43;
    this[_subscription] = null;
    this[_isPaused] = false;
    this[_stateData] = (t43 = stream, t43 == null ? dart.throw(new core.ArgumentError.notNull("stream")) : t43);
    ;
  }).prototype = _StreamIterator.prototype;
  ;
  _StreamIterator.prototype[_is__StreamIterator_default] = true;
  _StreamIterator[dart.implements] = () => [async.StreamIterator$(T)];
  ;
  dart.setGetterSignature(_StreamIterator, () => ({
    __proto__: dart.getGetters(_StreamIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(_StreamIterator, "dart:async");
  ;
  return _StreamIterator;
});
async._StreamIterator = async._StreamIterator$();
;
const _is__EmptyStream_default = Symbol('_is__EmptyStream_default');
async._EmptyStream$ = dart.generic(T => {
  let _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
  class _EmptyStream extends async.Stream$(T) {
    get isBroadcast() {
      return true;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return new (_DoneStreamSubscriptionOfT()).new(onDone);
    }
  }
  (_EmptyStream.new = function() {
    _EmptyStream.__proto__._internal.call(this);
    ;
  }).prototype = _EmptyStream.prototype;
  ;
  _EmptyStream.prototype[_is__EmptyStream_default] = true;
  ;
  dart.setLibraryUri(_EmptyStream, "dart:async");
  return _EmptyStream;
});
async._EmptyStream = async._EmptyStream$();
;
const _handleData$ = dart.privateName(async, "_handleData");
const _handleError$ = dart.privateName(async, "_handleError");
const _handleDone$ = dart.privateName(async, "_handleDone");
const _is__ForwardingStream_default = Symbol('_is__ForwardingStream_default');
async._ForwardingStream$ = dart.generic((S, T) => {
  let _ForwardingStreamSubscriptionOfS$T = () => (_ForwardingStreamSubscriptionOfS$T = dart.constFn(async._ForwardingStreamSubscription$(S, T)))();
  let _EventSinkOfT = () => (_EventSinkOfT = dart.constFn(async._EventSink$(T)))();
  class _ForwardingStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[_source$4].isBroadcast;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      cancelOnError = true === cancelOnError;
      return this[_createSubscription](onData, onError, onDone, cancelOnError);
    }
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      return new (_ForwardingStreamSubscriptionOfS$T()).new(this, onData, onError, onDone, cancelOnError);
    }
    [_handleData$](data, sink) {
      S._check(data);
      _EventSinkOfT()._check(sink);
      sink[_add](T._check(data));
    }
    [_handleError$](error, stackTrace, sink) {
      _EventSinkOfT()._check(sink);
      sink[_addError](error, stackTrace);
    }
    [_handleDone$](sink) {
      _EventSinkOfT()._check(sink);
      sink[_close]();
    }
  }
  (_ForwardingStream.new = function(_source) {
    this[_source$4] = _source;
    _ForwardingStream.__proto__.new.call(this);
    ;
  }).prototype = _ForwardingStream.prototype;
  ;
  _ForwardingStream.prototype[_is__ForwardingStream_default] = true;
  ;
  dart.setLibraryUri(_ForwardingStream, "dart:async");
  ;
  return _ForwardingStream;
});
async._ForwardingStream = async._ForwardingStream$();
;
const _is__ForwardingStreamSubscription_default = Symbol('_is__ForwardingStreamSubscription_default');
async._ForwardingStreamSubscription$ = dart.generic((S, T) => {
  class _ForwardingStreamSubscription extends async._BufferingStreamSubscription$(T) {
    [_add](data) {
      if (dart.test(this[_isClosed])) return;
      super[_add](data);
    }
    [_addError](error, stackTrace) {
      if (dart.test(this[_isClosed])) return;
      super[_addError](error, stackTrace);
    }
    [_onPause]() {
      if (this[_subscription] == null) return;
      this[_subscription].pause();
    }
    [_onResume]() {
      if (this[_subscription] == null) return;
      this[_subscription].resume();
    }
    [_onCancel]() {
      if (this[_subscription] != null) {
        let subscription = this[_subscription];
        this[_subscription] = null;
        return subscription.cancel();
      }
      return null;
    }
    [_handleData$](data) {
      S._check(data);
      this[_stream$][_handleData$](data, this);
    }
    [_handleError$](error, stackTrace) {
      this[_stream$][_handleError$](error, stackTrace, this);
    }
    [_handleDone$]() {
      this[_stream$][_handleDone$](this);
    }
  }
  (_ForwardingStreamSubscription.new = function(_stream, onData, onError, onDone, cancelOnError) {
    this[_subscription] = null;
    this[_stream$] = _stream;
    _ForwardingStreamSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
    this[_subscription] = this[_stream$][_source$4].listen(dart.bind(this, _handleData$), {onError: dart.bind(this, _handleError$), onDone: dart.bind(this, _handleDone$)});
  }).prototype = _ForwardingStreamSubscription.prototype;
  ;
  _ForwardingStreamSubscription.prototype[_is__ForwardingStreamSubscription_default] = true;
  ;
  dart.setLibraryUri(_ForwardingStreamSubscription, "dart:async");
  ;
  return _ForwardingStreamSubscription;
});
async._ForwardingStreamSubscription = async._ForwardingStreamSubscription$();
;
const _test = dart.privateName(async, "_test");
const _is__WhereStream_default = Symbol('_is__WhereStream_default');
async._WhereStream$ = dart.generic(T => {
  class _WhereStream extends async._ForwardingStream$(T, T) {
    [_handleData$](inputEvent, sink) {
      let satisfies = null;
      try {
        satisfies = this[_test](inputEvent);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        async._addErrorWithReplacement(sink, e, s);
        return;
      }
      if (dart.test(satisfies)) {
        sink[_add](inputEvent);
      }
    }
  }
  (_WhereStream.new = function(source, test) {
    this[_test] = test;
    _WhereStream.__proto__.new.call(this, source);
    ;
  }).prototype = _WhereStream.prototype;
  ;
  _WhereStream.prototype[_is__WhereStream_default] = true;
  ;
  dart.setLibraryUri(_WhereStream, "dart:async");
  ;
  return _WhereStream;
});
async._WhereStream = async._WhereStream$();
;
const _transform = dart.privateName(async, "_transform");
const _is__MapStream_default = Symbol('_is__MapStream_default');
async._MapStream$ = dart.generic((S, T) => {
  class _MapStream extends async._ForwardingStream$(S, T) {
    [_handleData$](inputEvent, sink) {
      let outputEvent = null;
      try {
        outputEvent = this[_transform](inputEvent);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        async._addErrorWithReplacement(sink, e, s);
        return;
      }
      sink[_add](outputEvent);
    }
  }
  (_MapStream.new = function(source, transform) {
    this[_transform] = transform;
    _MapStream.__proto__.new.call(this, source);
    ;
  }).prototype = _MapStream.prototype;
  ;
  _MapStream.prototype[_is__MapStream_default] = true;
  ;
  dart.setLibraryUri(_MapStream, "dart:async");
  ;
  return _MapStream;
});
async._MapStream = async._MapStream$();
;
const _expand = dart.privateName(async, "_expand");
const _is__ExpandStream_default = Symbol('_is__ExpandStream_default');
async._ExpandStream$ = dart.generic((S, T) => {
  class _ExpandStream extends async._ForwardingStream$(S, T) {
    [_handleData$](inputEvent, sink) {
      try {
        for (let value of this[_expand](inputEvent)) {
          sink[_add](value);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        async._addErrorWithReplacement(sink, e, s);
      }
    }
  }
  (_ExpandStream.new = function(source, expand) {
    this[_expand] = expand;
    _ExpandStream.__proto__.new.call(this, source);
    ;
  }).prototype = _ExpandStream.prototype;
  ;
  _ExpandStream.prototype[_is__ExpandStream_default] = true;
  ;
  dart.setLibraryUri(_ExpandStream, "dart:async");
  ;
  return _ExpandStream;
});
async._ExpandStream = async._ExpandStream$();
;
const _is__HandleErrorStream_default = Symbol('_is__HandleErrorStream_default');
async._HandleErrorStream$ = dart.generic(T => {
  class _HandleErrorStream extends async._ForwardingStream$(T, T) {
    [_handleError$](error, stackTrace, sink) {
      let matches = true;
      if (this[_test] != null) {
        try {
          matches = this[_test](error);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          async._addErrorWithReplacement(sink, e, s);
          return;
        }
      }
      if (dart.test(matches)) {
        try {
          async._invokeErrorHandler(this[_transform], error, stackTrace);
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          if (core.identical(e, error)) {
            sink[_addError](error, stackTrace);
          } else {
            async._addErrorWithReplacement(sink, e, s);
          }
          return;
        }
      } else {
        sink[_addError](error, stackTrace);
      }
    }
  }
  (_HandleErrorStream.new = function(source, onError, test) {
    this[_transform] = onError;
    this[_test] = test;
    _HandleErrorStream.__proto__.new.call(this, source);
    ;
  }).prototype = _HandleErrorStream.prototype;
  ;
  _HandleErrorStream.prototype[_is__HandleErrorStream_default] = true;
  ;
  dart.setLibraryUri(_HandleErrorStream, "dart:async");
  ;
  return _HandleErrorStream;
});
async._HandleErrorStream = async._HandleErrorStream$();
;
const _count = dart.privateName(async, "_count");
const _is__TakeStream_default = Symbol('_is__TakeStream_default');
async._TakeStream$ = dart.generic(T => {
  let _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
  let _StateStreamSubscriptionOfT = () => (_StateStreamSubscriptionOfT = dart.constFn(async._StateStreamSubscription$(T)))();
  class _TakeStream extends async._ForwardingStream$(T, T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      if (this[_count] === 0) {
        this[_source$4].listen(null).cancel();
        return new (_DoneStreamSubscriptionOfT()).new(onDone);
      }
      return new (_StateStreamSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError, this[_count]);
    }
    [_handleData$](inputEvent, sink) {
      let subscription = _StateStreamSubscriptionOfT()._check(sink);
      let count = subscription[_count];
      if (dart.notNull(count) > 0) {
        sink[_add](inputEvent);
        count = dart.notNull(count) - 1;
        subscription[_count] = count;
        if (count === 0) {
          sink[_close]();
        }
      }
    }
  }
  (_TakeStream.new = function(source, count) {
    this[_count] = count;
    _TakeStream.__proto__.new.call(this, source);
    core.ArgumentError.checkNotNull(count, "count");
  }).prototype = _TakeStream.prototype;
  ;
  _TakeStream.prototype[_is__TakeStream_default] = true;
  ;
  dart.setLibraryUri(_TakeStream, "dart:async");
  ;
  return _TakeStream;
});
async._TakeStream = async._TakeStream$();
;
const _sharedState$ = dart.privateName(async, "_sharedState");
const _flag = dart.privateName(async, "_flag");
const _value = dart.privateName(async, "_value");
const _is__StateStreamSubscription_default = Symbol('_is__StateStreamSubscription_default');
async._StateStreamSubscription$ = dart.generic(T => {
  class _StateStreamSubscription extends async._ForwardingStreamSubscription$(T, T) {
    get [_flag]() {
      return core.bool._check(this[_sharedState$]);
    }
    set [_flag](flag) {
      this[_sharedState$] = flag;
    }
    get [_count]() {
      return core.int._check(this[_sharedState$]);
    }
    set [_count](count) {
      this[_sharedState$] = count;
    }
    get [_value]() {
      return this[_sharedState$];
    }
    set [_value](value) {
      this[_sharedState$] = value;
    }
  }
  (_StateStreamSubscription.new = function(stream, onData, onError, onDone, cancelOnError, _sharedState) {
    this[_sharedState$] = _sharedState;
    _StateStreamSubscription.__proto__.new.call(this, stream, onData, onError, onDone, cancelOnError);
    ;
  }).prototype = _StateStreamSubscription.prototype;
  ;
  _StateStreamSubscription.prototype[_is__StateStreamSubscription_default] = true;
  dart.setGetterSignature(_StateStreamSubscription, () => ({
    __proto__: dart.getGetters(_StateStreamSubscription.__proto__),
    [_flag]: core.bool,
    [_count]: core.int,
    [_value]: core.Object
  }));
  dart.setSetterSignature(_StateStreamSubscription, () => ({
    __proto__: dart.getSetters(_StateStreamSubscription.__proto__),
    [_flag]: core.bool,
    [_count]: core.int,
    [_value]: core.Object
  }));
  dart.setLibraryUri(_StateStreamSubscription, "dart:async");
  ;
  return _StateStreamSubscription;
});
async._StateStreamSubscription = async._StateStreamSubscription$();
;
const _is__TakeWhileStream_default = Symbol('_is__TakeWhileStream_default');
async._TakeWhileStream$ = dart.generic(T => {
  class _TakeWhileStream extends async._ForwardingStream$(T, T) {
    [_handleData$](inputEvent, sink) {
      let satisfies = null;
      try {
        satisfies = this[_test](inputEvent);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        async._addErrorWithReplacement(sink, e, s);
        sink[_close]();
        return;
      }
      if (dart.test(satisfies)) {
        sink[_add](inputEvent);
      } else {
        sink[_close]();
      }
    }
  }
  (_TakeWhileStream.new = function(source, test) {
    this[_test] = test;
    _TakeWhileStream.__proto__.new.call(this, source);
    ;
  }).prototype = _TakeWhileStream.prototype;
  ;
  _TakeWhileStream.prototype[_is__TakeWhileStream_default] = true;
  ;
  dart.setLibraryUri(_TakeWhileStream, "dart:async");
  ;
  return _TakeWhileStream;
});
async._TakeWhileStream = async._TakeWhileStream$();
;
const _is__SkipStream_default = Symbol('_is__SkipStream_default');
async._SkipStream$ = dart.generic(T => {
  let _StateStreamSubscriptionOfT = () => (_StateStreamSubscriptionOfT = dart.constFn(async._StateStreamSubscription$(T)))();
  class _SkipStream extends async._ForwardingStream$(T, T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      return new (_StateStreamSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError, this[_count]);
    }
    [_handleData$](inputEvent, sink) {
      let subscription = _StateStreamSubscriptionOfT()._check(sink);
      let count = subscription[_count];
      if (dart.notNull(count) > 0) {
        subscription[_count] = dart.notNull(count) - 1;
        return;
      }
      sink[_add](inputEvent);
    }
  }
  (_SkipStream.new = function(source, count) {
    this[_count] = count;
    _SkipStream.__proto__.new.call(this, source);
    core.ArgumentError.checkNotNull(count, "count");
    core.RangeError.checkNotNegative(count, "count");
  }).prototype = _SkipStream.prototype;
  ;
  _SkipStream.prototype[_is__SkipStream_default] = true;
  ;
  dart.setLibraryUri(_SkipStream, "dart:async");
  ;
  return _SkipStream;
});
async._SkipStream = async._SkipStream$();
;
const _is__SkipWhileStream_default = Symbol('_is__SkipWhileStream_default');
async._SkipWhileStream$ = dart.generic(T => {
  let _StateStreamSubscriptionOfT = () => (_StateStreamSubscriptionOfT = dart.constFn(async._StateStreamSubscription$(T)))();
  class _SkipWhileStream extends async._ForwardingStream$(T, T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      return new (_StateStreamSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError, false);
    }
    [_handleData$](inputEvent, sink) {
      let subscription = _StateStreamSubscriptionOfT()._check(sink);
      let hasFailed = subscription[_flag];
      if (dart.test(hasFailed)) {
        sink[_add](inputEvent);
        return;
      }
      let satisfies = null;
      try {
        satisfies = this[_test](inputEvent);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        async._addErrorWithReplacement(sink, e, s);
        subscription[_flag] = true;
        return;
      }
      if (!dart.test(satisfies)) {
        subscription[_flag] = true;
        sink[_add](inputEvent);
      }
    }
  }
  (_SkipWhileStream.new = function(source, test) {
    this[_test] = test;
    _SkipWhileStream.__proto__.new.call(this, source);
    ;
  }).prototype = _SkipWhileStream.prototype;
  ;
  _SkipWhileStream.prototype[_is__SkipWhileStream_default] = true;
  ;
  dart.setLibraryUri(_SkipWhileStream, "dart:async");
  ;
  return _SkipWhileStream;
});
async._SkipWhileStream = async._SkipWhileStream$();
;
const _equals = dart.privateName(async, "_equals");
const _is__DistinctStream_default = Symbol('_is__DistinctStream_default');
async._DistinctStream$ = dart.generic(T => {
  let _StateStreamSubscriptionOfT = () => (_StateStreamSubscriptionOfT = dart.constFn(async._StateStreamSubscription$(T)))();
  class _DistinctStream extends async._ForwardingStream$(T, T) {
    [_createSubscription](onData, onError, onDone, cancelOnError) {
      return new (_StateStreamSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError, async._DistinctStream._SENTINEL);
    }
    [_handleData$](inputEvent, sink) {
      let subscription = _StateStreamSubscriptionOfT()._check(sink);
      let previous = subscription[_value];
      if (core.identical(previous, async._DistinctStream._SENTINEL)) {
        subscription[_value] = inputEvent;
        sink[_add](inputEvent);
      } else {
        let previousEvent = T._check(previous);
        let isEqual = null;
        try {
          if (this[_equals] == null) {
            isEqual = dart.equals(previousEvent, inputEvent);
          } else {
            isEqual = this[_equals](previousEvent, inputEvent);
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          async._addErrorWithReplacement(sink, e, s);
          return;
        }
        if (!dart.test(isEqual)) {
          sink[_add](inputEvent);
          subscription[_value] = inputEvent;
        }
      }
    }
  }
  (_DistinctStream.new = function(source, equals) {
    this[_equals] = equals;
    _DistinctStream.__proto__.new.call(this, source);
    ;
  }).prototype = _DistinctStream.prototype;
  ;
  _DistinctStream.prototype[_is__DistinctStream_default] = true;
  ;
  dart.setLibraryUri(_DistinctStream, "dart:async");
  ;
  return _DistinctStream;
});
async._DistinctStream = async._DistinctStream$();
dart.defineLazy(async._DistinctStream, {
  /*async._DistinctStream._SENTINEL*/get _SENTINEL() {
    return new core.Object.new();
  }
});
;
const _is__EventSinkWrapper_default = Symbol('_is__EventSinkWrapper_default');
async._EventSinkWrapper$ = dart.generic(T => {
  class _EventSinkWrapper extends core.Object {
    add(data) {
      T._check(data);
      this[_sink$][_add](data);
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      this[_sink$][_addError](error, stackTrace);
    }
    close() {
      this[_sink$][_close]();
    }
  }
  (_EventSinkWrapper.new = function(_sink) {
    this[_sink$] = _sink;
    ;
  }).prototype = _EventSinkWrapper.prototype;
  ;
  _EventSinkWrapper.prototype[_is__EventSinkWrapper_default] = true;
  _EventSinkWrapper[dart.implements] = () => [async.EventSink$(T)];
  ;
  dart.setLibraryUri(_EventSinkWrapper, "dart:async");
  ;
  return _EventSinkWrapper;
});
async._EventSinkWrapper = async._EventSinkWrapper$();
;
const _transformerSink = dart.privateName(async, "_transformerSink");
const _isSubscribed = dart.privateName(async, "_isSubscribed");
const _is__SinkTransformerStreamSubscription_default = Symbol('_is__SinkTransformerStreamSubscription_default');
async._SinkTransformerStreamSubscription$ = dart.generic((S, T) => {
  let _EventSinkWrapperOfT = () => (_EventSinkWrapperOfT = dart.constFn(async._EventSinkWrapper$(T)))();
  class _SinkTransformerStreamSubscription extends async._BufferingStreamSubscription$(T) {
    get [_isSubscribed]() {
      return this[_subscription] != null;
    }
    [_add](data) {
      if (dart.test(this[_isClosed])) {
        dart.throw(new core.StateError.new("Stream is already closed"));
      }
      super[_add](data);
    }
    [_addError](error, stackTrace) {
      if (dart.test(this[_isClosed])) {
        dart.throw(new core.StateError.new("Stream is already closed"));
      }
      super[_addError](error, stackTrace);
    }
    [_close]() {
      if (dart.test(this[_isClosed])) {
        dart.throw(new core.StateError.new("Stream is already closed"));
      }
      super[_close]();
    }
    [_onPause]() {
      if (dart.test(this[_isSubscribed])) this[_subscription].pause();
    }
    [_onResume]() {
      if (dart.test(this[_isSubscribed])) this[_subscription].resume();
    }
    [_onCancel]() {
      if (dart.test(this[_isSubscribed])) {
        let subscription = this[_subscription];
        this[_subscription] = null;
        return subscription.cancel();
      }
      return null;
    }
    [_handleData$](data) {
      S._check(data);
      try {
        this[_transformerSink].add(data);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        this[_addError](e, s);
      }
    }
    [_handleError$](error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      try {
        this[_transformerSink].addError(error, stackTrace);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.identical(e, error)) {
          this[_addError](error, stackTrace);
        } else {
          this[_addError](e, s);
        }
      }
    }
    [_handleDone$]() {
      try {
        this[_subscription] = null;
        this[_transformerSink].close();
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        this[_addError](e, s);
      }
    }
  }
  (_SinkTransformerStreamSubscription.new = function(source, mapper, onData, onError, onDone, cancelOnError) {
    this[_transformerSink] = null;
    this[_subscription] = null;
    _SinkTransformerStreamSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
    let eventSink = new (_EventSinkWrapperOfT()).new(this);
    this[_transformerSink] = mapper(eventSink);
    this[_subscription] = source.listen(dart.bind(this, _handleData$), {onError: dart.bind(this, _handleError$), onDone: dart.bind(this, _handleDone$)});
  }).prototype = _SinkTransformerStreamSubscription.prototype;
  ;
  _SinkTransformerStreamSubscription.prototype[_is__SinkTransformerStreamSubscription_default] = true;
  ;
  dart.setGetterSignature(_SinkTransformerStreamSubscription, () => ({
    __proto__: dart.getGetters(_SinkTransformerStreamSubscription.__proto__),
    [_isSubscribed]: core.bool
  }));
  dart.setLibraryUri(_SinkTransformerStreamSubscription, "dart:async");
  ;
  return _SinkTransformerStreamSubscription;
});
async._SinkTransformerStreamSubscription = async._SinkTransformerStreamSubscription$();
;
const _sinkMapper$ = dart.privateName(async, "_sinkMapper");
const _is__StreamSinkTransformer_default = Symbol('_is__StreamSinkTransformer_default');
const _sinkMapper$0 = dart.privateName(async, "_StreamSinkTransformer._sinkMapper");
async._StreamSinkTransformer$ = dart.generic((S, T) => {
  let StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  let _BoundSinkStreamOfS$T = () => (_BoundSinkStreamOfS$T = dart.constFn(async._BoundSinkStream$(S, T)))();
  class _StreamSinkTransformer extends async.StreamTransformerBase$(S, T) {
    get [_sinkMapper$]() {
      return this[_sinkMapper$0];
    }
    set [_sinkMapper$](value) {
      super[_sinkMapper$] = value;
    }
    bind(stream) {
      StreamOfS()._check(stream);
      return new (_BoundSinkStreamOfS$T()).new(stream, this[_sinkMapper$]);
    }
  }
  (_StreamSinkTransformer.new = function(_sinkMapper) {
    this[_sinkMapper$0] = _sinkMapper;
    _StreamSinkTransformer.__proto__.new.call(this);
    ;
  }).prototype = _StreamSinkTransformer.prototype;
  ;
  _StreamSinkTransformer.prototype[_is__StreamSinkTransformer_default] = true;
  ;
  dart.setLibraryUri(_StreamSinkTransformer, "dart:async");
  ;
  return _StreamSinkTransformer;
});
async._StreamSinkTransformer = async._StreamSinkTransformer$();
;
const _is__BoundSinkStream_default = Symbol('_is__BoundSinkStream_default');
async._BoundSinkStream$ = dart.generic((S, T) => {
  let _SinkTransformerStreamSubscriptionOfS$T = () => (_SinkTransformerStreamSubscriptionOfS$T = dart.constFn(async._SinkTransformerStreamSubscription$(S, T)))();
  class _BoundSinkStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[_stream$].isBroadcast;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      cancelOnError = true === cancelOnError;
      let subscription = new (_SinkTransformerStreamSubscriptionOfS$T()).new(this[_stream$], this[_sinkMapper$], onData, onError, onDone, cancelOnError);
      return subscription;
    }
  }
  (_BoundSinkStream.new = function(_stream, _sinkMapper) {
    this[_stream$] = _stream;
    this[_sinkMapper$] = _sinkMapper;
    _BoundSinkStream.__proto__.new.call(this);
    ;
  }).prototype = _BoundSinkStream.prototype;
  ;
  _BoundSinkStream.prototype[_is__BoundSinkStream_default] = true;
  ;
  dart.setLibraryUri(_BoundSinkStream, "dart:async");
  ;
  return _BoundSinkStream;
});
async._BoundSinkStream = async._BoundSinkStream$();
;
const _is__HandlerEventSink_default = Symbol('_is__HandlerEventSink_default');
async._HandlerEventSink$ = dart.generic((S, T) => {
  class _HandlerEventSink extends core.Object {
    get [_isClosed]() {
      return this[_sink$] == null;
    }
    add(data) {
      S._check(data);
      if (dart.test(this[_isClosed])) {
        dart.throw(new core.StateError.new("Sink is closed"));
      }
      if (this[_handleData$] != null) {
        this[_handleData$](data, this[_sink$]);
      } else {
        this[_sink$].add(T.as(data));
      }
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      if (dart.test(this[_isClosed])) {
        dart.throw(new core.StateError.new("Sink is closed"));
      }
      if (this[_handleError$] != null) {
        this[_handleError$](error, stackTrace, this[_sink$]);
      } else {
        this[_sink$].addError(error, stackTrace);
      }
    }
    close() {
      if (dart.test(this[_isClosed])) return;
      let sink = this[_sink$];
      this[_sink$] = null;
      if (this[_handleDone$] != null) {
        this[_handleDone$](sink);
      } else {
        sink.close();
      }
    }
  }
  (_HandlerEventSink.new = function(_handleData, _handleError, _handleDone, _sink) {
    this[_handleData$] = _handleData;
    this[_handleError$] = _handleError;
    this[_handleDone$] = _handleDone;
    this[_sink$] = _sink;
    if (this[_sink$] == null) {
      dart.throw(new core.ArgumentError.new("The provided sink must not be null."));
    }
  }).prototype = _HandlerEventSink.prototype;
  ;
  _HandlerEventSink.prototype[_is__HandlerEventSink_default] = true;
  _HandlerEventSink[dart.implements] = () => [async.EventSink$(S)];
  ;
  dart.setGetterSignature(_HandlerEventSink, () => ({
    __proto__: dart.getGetters(_HandlerEventSink.__proto__),
    [_isClosed]: core.bool
  }));
  dart.setLibraryUri(_HandlerEventSink, "dart:async");
  ;
  return _HandlerEventSink;
});
async._HandlerEventSink = async._HandlerEventSink$();
;
const _is__StreamHandlerTransformer_default = Symbol('_is__StreamHandlerTransformer_default');
async._StreamHandlerTransformer$ = dart.generic((S, T) => {
  let _HandlerEventSinkOfS$T = () => (_HandlerEventSinkOfS$T = dart.constFn(async._HandlerEventSink$(S, T)))();
  let EventSinkOfTTo_HandlerEventSinkOfS$T = () => (EventSinkOfTTo_HandlerEventSinkOfS$T = dart.constFn(dart.fnType(_HandlerEventSinkOfS$T(), [EventSinkOfT()])))();
  let StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  let EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
  class _StreamHandlerTransformer extends async._StreamSinkTransformer$(S, T) {
    bind(stream) {
      StreamOfS()._check(stream);
      return super.bind(stream);
    }
  }
  (_StreamHandlerTransformer.new = function(opts) {
    let handleData = opts && 'handleData' in opts ? opts.handleData : null;
    let handleError = opts && 'handleError' in opts ? opts.handleError : null;
    let handleDone = opts && 'handleDone' in opts ? opts.handleDone : null;
    _StreamHandlerTransformer.__proto__.new.call(this, dart.fn(outputSink => new (_HandlerEventSinkOfS$T()).new(handleData, handleError, handleDone, outputSink), EventSinkOfTTo_HandlerEventSinkOfS$T()));
    ;
  }).prototype = _StreamHandlerTransformer.prototype;
  ;
  _StreamHandlerTransformer.prototype[_is__StreamHandlerTransformer_default] = true;
  dart.setLibraryUri(_StreamHandlerTransformer, "dart:async");
  return _StreamHandlerTransformer;
});
async._StreamHandlerTransformer = async._StreamHandlerTransformer$();
;
const _bind$ = dart.privateName(async, "_bind");
const _is__StreamBindTransformer_default = Symbol('_is__StreamBindTransformer_default');
async._StreamBindTransformer$ = dart.generic((S, T) => {
  let StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  class _StreamBindTransformer extends async.StreamTransformerBase$(S, T) {
    bind(stream) {
      StreamOfS()._check(stream);
      return this[_bind$](stream);
    }
  }
  (_StreamBindTransformer.new = function(_bind) {
    this[_bind$] = _bind;
    _StreamBindTransformer.__proto__.new.call(this);
    ;
  }).prototype = _StreamBindTransformer.prototype;
  ;
  _StreamBindTransformer.prototype[_is__StreamBindTransformer_default] = true;
  ;
  dart.setLibraryUri(_StreamBindTransformer, "dart:async");
  ;
  return _StreamBindTransformer;
});
async._StreamBindTransformer = async._StreamBindTransformer$();
;
const _is__StreamSubscriptionTransformer_default = Symbol('_is__StreamSubscriptionTransformer_default');
const _onListen$0 = dart.privateName(async, "_StreamSubscriptionTransformer._onListen");
async._StreamSubscriptionTransformer$ = dart.generic((S, T) => {
  let StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
  let _BoundSubscriptionStreamOfS$T = () => (_BoundSubscriptionStreamOfS$T = dart.constFn(async._BoundSubscriptionStream$(S, T)))();
  class _StreamSubscriptionTransformer extends async.StreamTransformerBase$(S, T) {
    get [_onListen$]() {
      return this[_onListen$0];
    }
    set [_onListen$](value) {
      super[_onListen$] = value;
    }
    bind(stream) {
      StreamOfS()._check(stream);
      return new (_BoundSubscriptionStreamOfS$T()).new(stream, this[_onListen$]);
    }
  }
  (_StreamSubscriptionTransformer.new = function(_onListen) {
    this[_onListen$0] = _onListen;
    _StreamSubscriptionTransformer.__proto__.new.call(this);
    ;
  }).prototype = _StreamSubscriptionTransformer.prototype;
  ;
  _StreamSubscriptionTransformer.prototype[_is__StreamSubscriptionTransformer_default] = true;
  ;
  dart.setLibraryUri(_StreamSubscriptionTransformer, "dart:async");
  ;
  return _StreamSubscriptionTransformer;
});
async._StreamSubscriptionTransformer = async._StreamSubscriptionTransformer$();
;
const _is__BoundSubscriptionStream_default = Symbol('_is__BoundSubscriptionStream_default');
async._BoundSubscriptionStream$ = dart.generic((S, T) => {
  class _BoundSubscriptionStream extends async.Stream$(T) {
    get isBroadcast() {
      return this[_stream$].isBroadcast;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      cancelOnError = true === cancelOnError;
      let result = this[_onListen$](this[_stream$], cancelOnError);
      result.onData(onData);
      result.onError(onError);
      result.onDone(onDone);
      return result;
    }
  }
  (_BoundSubscriptionStream.new = function(_stream, _onListen) {
    this[_stream$] = _stream;
    this[_onListen$] = _onListen;
    _BoundSubscriptionStream.__proto__.new.call(this);
    ;
  }).prototype = _BoundSubscriptionStream.prototype;
  ;
  _BoundSubscriptionStream.prototype[_is__BoundSubscriptionStream_default] = true;
  ;
  dart.setLibraryUri(_BoundSubscriptionStream, "dart:async");
  ;
  return _BoundSubscriptionStream;
});
async._BoundSubscriptionStream = async._BoundSubscriptionStream$();
;
async.Timer = class Timer extends core.Object {
  static new(duration, callback) {
    if (dart.equals(async.Zone.current, async.Zone.root)) {
      return async.Zone.current.createTimer(duration, callback);
    }
    return async.Zone.current.createTimer(duration, async.Zone.current.bindCallbackGuarded(callback));
  }
  static periodic(duration, callback) {
    if (dart.equals(async.Zone.current, async.Zone.root)) {
      return async.Zone.current.createPeriodicTimer(duration, callback);
    }
    let boundCallback = async.Zone.current.bindUnaryCallbackGuarded(async.Timer, callback);
    return async.Zone.current.createPeriodicTimer(duration, boundCallback);
  }
  static run(callback) {
    async.Timer.new(core.Duration.zero, callback);
  }
  static _createTimer(duration, callback) {
    let milliseconds = duration.inMilliseconds;
    if (dart.notNull(milliseconds) < 0) milliseconds = 0;
    return new _isolate_helper.TimerImpl.new(milliseconds, callback);
  }
  static _createPeriodicTimer(duration, callback) {
    let milliseconds = duration.inMilliseconds;
    if (dart.notNull(milliseconds) < 0) milliseconds = 0;
    return new _isolate_helper.TimerImpl.periodic(milliseconds, callback);
  }
};
(async.Timer[dart.mixinNew] = function() {
}).prototype = async.Timer.prototype;
;
dart.setLibraryUri(async.Timer, "dart:async");
const error$ = dart.privateName(async, "AsyncError.error");
const stackTrace$ = dart.privateName(async, "AsyncError.stackTrace");
async.AsyncError = class AsyncError extends core.Object {
  get error() {
    return this[error$];
  }
  set error(value) {
    super.error = value;
  }
  get stackTrace() {
    return this[stackTrace$];
  }
  set stackTrace(value) {
    super.stackTrace = value;
  }
  toString() {
    return dart.str(this.error);
  }
};
(async.AsyncError.new = function(error, stackTrace) {
  this[error$] = error;
  this[stackTrace$] = stackTrace;
  ;
}).prototype = async.AsyncError.prototype;
;
async.AsyncError[dart.implements] = () => [core.Error];
dart.setLibraryUri(async.AsyncError, "dart:async");
;
dart.defineExtensionMethods(async.AsyncError, ['toString']);
dart.defineExtensionAccessors(async.AsyncError, ['stackTrace']);
const _is__ZoneFunction_default = Symbol('_is__ZoneFunction_default');
const zone$ = dart.privateName(async, "_ZoneFunction.zone");
const func = dart.privateName(async, "_ZoneFunction.function");
async._ZoneFunction$ = dart.generic(T => {
  class _ZoneFunction extends core.Object {
    get zone() {
      return this[zone$];
    }
    set zone(value) {
      super.zone = value;
    }
    get function() {
      return this[func];
    }
    set function(value) {
      super.function = value;
    }
  }
  (_ZoneFunction.new = function(zone, $function) {
    this[zone$] = zone;
    this[func] = $function;
    ;
  }).prototype = _ZoneFunction.prototype;
  ;
  _ZoneFunction.prototype[_is__ZoneFunction_default] = true;
  dart.setLibraryUri(_ZoneFunction, "dart:async");
  ;
  return _ZoneFunction;
});
async._ZoneFunction = async._ZoneFunction$();
;
async.ZoneSpecification = class ZoneSpecification extends core.Object {
  static from(other, opts) {
    let t54, t54$, t54$0, t54$1, t54$2, t54$3, t54$4, t54$5, t54$6, t54$7, t54$8, t54$9, t54$10;
    let handleUncaughtError = opts && 'handleUncaughtError' in opts ? opts.handleUncaughtError : null;
    let run = opts && 'run' in opts ? opts.run : null;
    let runUnary = opts && 'runUnary' in opts ? opts.runUnary : null;
    let runBinary = opts && 'runBinary' in opts ? opts.runBinary : null;
    let registerCallback = opts && 'registerCallback' in opts ? opts.registerCallback : null;
    let registerUnaryCallback = opts && 'registerUnaryCallback' in opts ? opts.registerUnaryCallback : null;
    let registerBinaryCallback = opts && 'registerBinaryCallback' in opts ? opts.registerBinaryCallback : null;
    let errorCallback = opts && 'errorCallback' in opts ? opts.errorCallback : null;
    let scheduleMicrotask = opts && 'scheduleMicrotask' in opts ? opts.scheduleMicrotask : null;
    let createTimer = opts && 'createTimer' in opts ? opts.createTimer : null;
    let createPeriodicTimer = opts && 'createPeriodicTimer' in opts ? opts.createPeriodicTimer : null;
    let print = opts && 'print' in opts ? opts.print : null;
    let fork = opts && 'fork' in opts ? opts.fork : null;
    return new async._ZoneSpecification.new({handleUncaughtError: (t54 = handleUncaughtError, t54 == null ? other.handleUncaughtError : t54), run: (t54$ = run, t54$ == null ? other.run : t54$), runUnary: (t54$0 = runUnary, t54$0 == null ? other.runUnary : t54$0), runBinary: (t54$1 = runBinary, t54$1 == null ? other.runBinary : t54$1), registerCallback: (t54$2 = registerCallback, t54$2 == null ? other.registerCallback : t54$2), registerUnaryCallback: (t54$3 = registerUnaryCallback, t54$3 == null ? other.registerUnaryCallback : t54$3), registerBinaryCallback: (t54$4 = registerBinaryCallback, t54$4 == null ? other.registerBinaryCallback : t54$4), errorCallback: (t54$5 = errorCallback, t54$5 == null ? other.errorCallback : t54$5), scheduleMicrotask: (t54$6 = scheduleMicrotask, t54$6 == null ? other.scheduleMicrotask : t54$6), createTimer: (t54$7 = createTimer, t54$7 == null ? other.createTimer : t54$7), createPeriodicTimer: (t54$8 = createPeriodicTimer, t54$8 == null ? other.createPeriodicTimer : t54$8), print: (t54$9 = print, t54$9 == null ? other.print : t54$9), fork: (t54$10 = fork, t54$10 == null ? other.fork : t54$10)});
  }
};
(async.ZoneSpecification[dart.mixinNew] = function() {
}).prototype = async.ZoneSpecification.prototype;
;
dart.setLibraryUri(async.ZoneSpecification, "dart:async");
const handleUncaughtError$ = dart.privateName(async, "_ZoneSpecification.handleUncaughtError");
const run$ = dart.privateName(async, "_ZoneSpecification.run");
const runUnary$ = dart.privateName(async, "_ZoneSpecification.runUnary");
const runBinary$ = dart.privateName(async, "_ZoneSpecification.runBinary");
const registerCallback$ = dart.privateName(async, "_ZoneSpecification.registerCallback");
const registerUnaryCallback$ = dart.privateName(async, "_ZoneSpecification.registerUnaryCallback");
const registerBinaryCallback$ = dart.privateName(async, "_ZoneSpecification.registerBinaryCallback");
const errorCallback$ = dart.privateName(async, "_ZoneSpecification.errorCallback");
const scheduleMicrotask$ = dart.privateName(async, "_ZoneSpecification.scheduleMicrotask");
const createTimer$ = dart.privateName(async, "_ZoneSpecification.createTimer");
const createPeriodicTimer$ = dart.privateName(async, "_ZoneSpecification.createPeriodicTimer");
const print$ = dart.privateName(async, "_ZoneSpecification.print");
const fork$ = dart.privateName(async, "_ZoneSpecification.fork");
async._ZoneSpecification = class _ZoneSpecification extends core.Object {
  get handleUncaughtError() {
    return this[handleUncaughtError$];
  }
  set handleUncaughtError(value) {
    super.handleUncaughtError = value;
  }
  get run() {
    return this[run$];
  }
  set run(value) {
    super.run = value;
  }
  get runUnary() {
    return this[runUnary$];
  }
  set runUnary(value) {
    super.runUnary = value;
  }
  get runBinary() {
    return this[runBinary$];
  }
  set runBinary(value) {
    super.runBinary = value;
  }
  get registerCallback() {
    return this[registerCallback$];
  }
  set registerCallback(value) {
    super.registerCallback = value;
  }
  get registerUnaryCallback() {
    return this[registerUnaryCallback$];
  }
  set registerUnaryCallback(value) {
    super.registerUnaryCallback = value;
  }
  get registerBinaryCallback() {
    return this[registerBinaryCallback$];
  }
  set registerBinaryCallback(value) {
    super.registerBinaryCallback = value;
  }
  get errorCallback() {
    return this[errorCallback$];
  }
  set errorCallback(value) {
    super.errorCallback = value;
  }
  get scheduleMicrotask() {
    return this[scheduleMicrotask$];
  }
  set scheduleMicrotask(value) {
    super.scheduleMicrotask = value;
  }
  get createTimer() {
    return this[createTimer$];
  }
  set createTimer(value) {
    super.createTimer = value;
  }
  get createPeriodicTimer() {
    return this[createPeriodicTimer$];
  }
  set createPeriodicTimer(value) {
    super.createPeriodicTimer = value;
  }
  get print() {
    return this[print$];
  }
  set print(value) {
    super.print = value;
  }
  get fork() {
    return this[fork$];
  }
  set fork(value) {
    super.fork = value;
  }
};
(async._ZoneSpecification.new = function(opts) {
  let handleUncaughtError = opts && 'handleUncaughtError' in opts ? opts.handleUncaughtError : null;
  let run = opts && 'run' in opts ? opts.run : null;
  let runUnary = opts && 'runUnary' in opts ? opts.runUnary : null;
  let runBinary = opts && 'runBinary' in opts ? opts.runBinary : null;
  let registerCallback = opts && 'registerCallback' in opts ? opts.registerCallback : null;
  let registerUnaryCallback = opts && 'registerUnaryCallback' in opts ? opts.registerUnaryCallback : null;
  let registerBinaryCallback = opts && 'registerBinaryCallback' in opts ? opts.registerBinaryCallback : null;
  let errorCallback = opts && 'errorCallback' in opts ? opts.errorCallback : null;
  let scheduleMicrotask = opts && 'scheduleMicrotask' in opts ? opts.scheduleMicrotask : null;
  let createTimer = opts && 'createTimer' in opts ? opts.createTimer : null;
  let createPeriodicTimer = opts && 'createPeriodicTimer' in opts ? opts.createPeriodicTimer : null;
  let print = opts && 'print' in opts ? opts.print : null;
  let fork = opts && 'fork' in opts ? opts.fork : null;
  this[handleUncaughtError$] = handleUncaughtError;
  this[run$] = run;
  this[runUnary$] = runUnary;
  this[runBinary$] = runBinary;
  this[registerCallback$] = registerCallback;
  this[registerUnaryCallback$] = registerUnaryCallback;
  this[registerBinaryCallback$] = registerBinaryCallback;
  this[errorCallback$] = errorCallback;
  this[scheduleMicrotask$] = scheduleMicrotask;
  this[createTimer$] = createTimer;
  this[createPeriodicTimer$] = createPeriodicTimer;
  this[print$] = print;
  this[fork$] = fork;
  ;
}).prototype = async._ZoneSpecification.prototype;
;
async._ZoneSpecification[dart.implements] = () => [async.ZoneSpecification];
dart.setLibraryUri(async._ZoneSpecification, "dart:async");
;
async.ZoneDelegate = class ZoneDelegate extends core.Object {};
(async.ZoneDelegate.new = function() {
  ;
}).prototype = async.ZoneDelegate.prototype;
;
dart.setLibraryUri(async.ZoneDelegate, "dart:async");
let C106;
async.Zone = class Zone extends core.Object {
  static get current() {
    return async.Zone._current;
  }
  static _enter(zone) {
    if (!(zone != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 660, 12, "zone != null");
    if (!(zone != async.Zone._current)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 661, 12, "!identical(zone, _current)");
    let previous = async.Zone._current;
    async.Zone._current = zone;
    return previous;
  }
  static _leave(previous) {
    if (!(previous != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 673, 12, "previous != null");
    async.Zone._current = previous;
  }
};
(async.Zone.__ = function() {
  ;
}).prototype = async.Zone.prototype;
;
dart.setLibraryUri(async.Zone, "dart:async");
dart.defineLazy(async.Zone, {
  /*async.Zone.root*/get root() {
    return C106 || CT.C106;
  },
  /*async.Zone._current*/get _current() {
    return async._rootZone;
  },
  set _current(_) {}
});
const _delegationTarget$ = dart.privateName(async, "_delegationTarget");
const _handleUncaughtError = dart.privateName(async, "_handleUncaughtError");
const _run = dart.privateName(async, "_run");
const _runUnary = dart.privateName(async, "_runUnary");
const _runBinary = dart.privateName(async, "_runBinary");
const _registerCallback = dart.privateName(async, "_registerCallback");
const _registerUnaryCallback = dart.privateName(async, "_registerUnaryCallback");
const _registerBinaryCallback = dart.privateName(async, "_registerBinaryCallback");
const _errorCallback = dart.privateName(async, "_errorCallback");
const _scheduleMicrotask = dart.privateName(async, "_scheduleMicrotask");
const _createTimer = dart.privateName(async, "_createTimer");
const _createPeriodicTimer = dart.privateName(async, "_createPeriodicTimer");
const _print = dart.privateName(async, "_print");
const _fork = dart.privateName(async, "_fork");
async._ZoneDelegate = class _ZoneDelegate extends core.Object {
  handleUncaughtError(zone, error, stackTrace) {
    let implementation = this[_delegationTarget$][_handleUncaughtError];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(implZone, async._parentDelegate(implZone), zone, error, stackTrace);
  }
  run(R, zone, f) {
    let implementation = this[_delegationTarget$][_run];
    let implZone = implementation.zone;
    let handler = ZoneAndZoneDelegateAndZone__ToR()._check(implementation.function);
    return handler(R, implZone, async._parentDelegate(implZone), zone, f);
  }
  runUnary(R, T, zone, f, arg) {
    let implementation = this[_delegationTarget$][_runUnary];
    let implZone = implementation.zone;
    let handler = ZoneAndZoneDelegateAndZone__ToR$()._check(implementation.function);
    return handler(R, T, implZone, async._parentDelegate(implZone), zone, f, arg);
  }
  runBinary(R, T1, T2, zone, f, arg1, arg2) {
    let implementation = this[_delegationTarget$][_runBinary];
    let implZone = implementation.zone;
    let handler = ZoneAndZoneDelegateAndZone__ToR$0()._check(implementation.function);
    return handler(R, T1, T2, implZone, async._parentDelegate(implZone), zone, f, arg1, arg2);
  }
  registerCallback(R, zone, f) {
    let implementation = this[_delegationTarget$][_registerCallback];
    let implZone = implementation.zone;
    let handler = ZoneAndZoneDelegateAndZone__ToFn()._check(implementation.function);
    return handler(R, implZone, async._parentDelegate(implZone), zone, f);
  }
  registerUnaryCallback(R, T, zone, f) {
    let implementation = this[_delegationTarget$][_registerUnaryCallback];
    let implZone = implementation.zone;
    let handler = ZoneAndZoneDelegateAndZone__ToFn$()._check(implementation.function);
    return handler(R, T, implZone, async._parentDelegate(implZone), zone, f);
  }
  registerBinaryCallback(R, T1, T2, zone, f) {
    let implementation = this[_delegationTarget$][_registerBinaryCallback];
    let implZone = implementation.zone;
    let handler = ZoneAndZoneDelegateAndZone__ToFn$0()._check(implementation.function);
    return handler(R, T1, T2, implZone, async._parentDelegate(implZone), zone, f);
  }
  errorCallback(zone, error, stackTrace) {
    let implementation = this[_delegationTarget$][_errorCallback];
    let implZone = implementation.zone;
    if (implZone == async._rootZone) return null;
    let handler = implementation.function;
    return handler(implZone, async._parentDelegate(implZone), zone, error, stackTrace);
  }
  scheduleMicrotask(zone, f) {
    let implementation = this[_delegationTarget$][_scheduleMicrotask];
    let implZone = implementation.zone;
    let handler = implementation.function;
    handler(implZone, async._parentDelegate(implZone), zone, f);
  }
  createTimer(zone, duration, f) {
    let implementation = this[_delegationTarget$][_createTimer];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(implZone, async._parentDelegate(implZone), zone, duration, f);
  }
  createPeriodicTimer(zone, period, f) {
    let implementation = this[_delegationTarget$][_createPeriodicTimer];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(implZone, async._parentDelegate(implZone), zone, period, f);
  }
  print(zone, line) {
    let implementation = this[_delegationTarget$][_print];
    let implZone = implementation.zone;
    let handler = implementation.function;
    handler(implZone, async._parentDelegate(implZone), zone, line);
  }
  fork(zone, specification, zoneValues) {
    let implementation = this[_delegationTarget$][_fork];
    let implZone = implementation.zone;
    let handler = implementation.function;
    return handler(implZone, async._parentDelegate(implZone), zone, specification, zoneValues);
  }
};
(async._ZoneDelegate.new = function(_delegationTarget) {
  this[_delegationTarget$] = _delegationTarget;
  ;
}).prototype = async._ZoneDelegate.prototype;
;
async._ZoneDelegate[dart.implements] = () => [async.ZoneDelegate];
;
dart.setLibraryUri(async._ZoneDelegate, "dart:async");
;
async._Zone = class _Zone extends core.Object {
  inSameErrorZone(otherZone) {
    return this === otherZone || this.errorZone == otherZone.errorZone;
  }
};
(async._Zone.new = function() {
  ;
}).prototype = async._Zone.prototype;
;
async._Zone[dart.implements] = () => [async.Zone];
;
dart.setLibraryUri(async._Zone, "dart:async");
const _delegateCache = dart.privateName(async, "_delegateCache");
const _map$2 = dart.privateName(async, "_map");
const _delegate = dart.privateName(async, "_delegate");
const _run$ = dart.privateName(async, "_CustomZone._run");
const _runUnary$ = dart.privateName(async, "_CustomZone._runUnary");
const _runBinary$ = dart.privateName(async, "_CustomZone._runBinary");
const _registerCallback$ = dart.privateName(async, "_CustomZone._registerCallback");
const _registerUnaryCallback$ = dart.privateName(async, "_CustomZone._registerUnaryCallback");
const _registerBinaryCallback$ = dart.privateName(async, "_CustomZone._registerBinaryCallback");
const _errorCallback$ = dart.privateName(async, "_CustomZone._errorCallback");
const _scheduleMicrotask$ = dart.privateName(async, "_CustomZone._scheduleMicrotask");
const _createTimer$ = dart.privateName(async, "_CustomZone._createTimer");
const _createPeriodicTimer$ = dart.privateName(async, "_CustomZone._createPeriodicTimer");
const _print$ = dart.privateName(async, "_CustomZone._print");
const _fork$ = dart.privateName(async, "_CustomZone._fork");
const _handleUncaughtError$ = dart.privateName(async, "_CustomZone._handleUncaughtError");
const parent$ = dart.privateName(async, "_CustomZone.parent");
const _map$3 = dart.privateName(async, "_CustomZone._map");
async._CustomZone = class _CustomZone extends async._Zone {
  get [_run]() {
    return this[_run$];
  }
  set [_run](value) {
    this[_run$] = value;
  }
  get [_runUnary]() {
    return this[_runUnary$];
  }
  set [_runUnary](value) {
    this[_runUnary$] = value;
  }
  get [_runBinary]() {
    return this[_runBinary$];
  }
  set [_runBinary](value) {
    this[_runBinary$] = value;
  }
  get [_registerCallback]() {
    return this[_registerCallback$];
  }
  set [_registerCallback](value) {
    this[_registerCallback$] = value;
  }
  get [_registerUnaryCallback]() {
    return this[_registerUnaryCallback$];
  }
  set [_registerUnaryCallback](value) {
    this[_registerUnaryCallback$] = value;
  }
  get [_registerBinaryCallback]() {
    return this[_registerBinaryCallback$];
  }
  set [_registerBinaryCallback](value) {
    this[_registerBinaryCallback$] = value;
  }
  get [_errorCallback]() {
    return this[_errorCallback$];
  }
  set [_errorCallback](value) {
    this[_errorCallback$] = value;
  }
  get [_scheduleMicrotask]() {
    return this[_scheduleMicrotask$];
  }
  set [_scheduleMicrotask](value) {
    this[_scheduleMicrotask$] = value;
  }
  get [_createTimer]() {
    return this[_createTimer$];
  }
  set [_createTimer](value) {
    this[_createTimer$] = value;
  }
  get [_createPeriodicTimer]() {
    return this[_createPeriodicTimer$];
  }
  set [_createPeriodicTimer](value) {
    this[_createPeriodicTimer$] = value;
  }
  get [_print]() {
    return this[_print$];
  }
  set [_print](value) {
    this[_print$] = value;
  }
  get [_fork]() {
    return this[_fork$];
  }
  set [_fork](value) {
    this[_fork$] = value;
  }
  get [_handleUncaughtError]() {
    return this[_handleUncaughtError$];
  }
  set [_handleUncaughtError](value) {
    this[_handleUncaughtError$] = value;
  }
  get parent() {
    return this[parent$];
  }
  set parent(value) {
    super.parent = value;
  }
  get [_map$2]() {
    return this[_map$3];
  }
  set [_map$2](value) {
    super[_map$2] = value;
  }
  get [_delegate]() {
    if (this[_delegateCache] != null) return this[_delegateCache];
    this[_delegateCache] = new async._ZoneDelegate.new(this);
    return this[_delegateCache];
  }
  get errorZone() {
    return this[_handleUncaughtError].zone;
  }
  runGuarded(f) {
    try {
      this.run(dart.void, f);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      this.handleUncaughtError(e, s);
    }
  }
  runUnaryGuarded(T, f, arg) {
    try {
      this.runUnary(dart.void, T, f, arg);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      this.handleUncaughtError(e, s);
    }
  }
  runBinaryGuarded(T1, T2, f, arg1, arg2) {
    try {
      this.runBinary(dart.void, T1, T2, f, arg1, arg2);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      this.handleUncaughtError(e, s);
    }
  }
  bindCallback(R, f) {
    let registered = this.registerCallback(R, f);
    return dart.fn(() => this.run(R, registered), dart.fnType(R, []));
  }
  bindUnaryCallback(R, T, f) {
    let registered = this.registerUnaryCallback(R, T, f);
    return dart.fn(arg => this.runUnary(R, T, registered, arg), dart.fnType(R, [T]));
  }
  bindBinaryCallback(R, T1, T2, f) {
    let registered = this.registerBinaryCallback(R, T1, T2, f);
    return dart.fn((arg1, arg2) => this.runBinary(R, T1, T2, registered, arg1, arg2), dart.fnType(R, [T1, T2]));
  }
  bindCallbackGuarded(f) {
    let registered = this.registerCallback(dart.void, f);
    return dart.fn(() => this.runGuarded(registered), VoidTovoid());
  }
  bindUnaryCallbackGuarded(T, f) {
    let registered = this.registerUnaryCallback(dart.void, T, f);
    return dart.fn(arg => this.runUnaryGuarded(T, registered, arg), dart.fnType(dart.void, [T]));
  }
  bindBinaryCallbackGuarded(T1, T2, f) {
    let registered = this.registerBinaryCallback(dart.void, T1, T2, f);
    return dart.fn((arg1, arg2) => this.runBinaryGuarded(T1, T2, registered, arg1, arg2), dart.fnType(dart.void, [T1, T2]));
  }
  _get(key) {
    let result = this[_map$2][$_get](key);
    if (result != null || dart.test(this[_map$2][$containsKey](key))) return result;
    if (this.parent != null) {
      let value = this.parent._get(key);
      if (value != null) {
        this[_map$2][$_set](key, value);
      }
      return value;
    }
    if (!this[$_equals](async._rootZone)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 994, 12, "this == _rootZone");
    return null;
  }
  handleUncaughtError(error, stackTrace) {
    let implementation = this[_handleUncaughtError];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1002, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, error, stackTrace);
  }
  fork(opts) {
    let specification = opts && 'specification' in opts ? opts.specification : null;
    let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
    let implementation = this[_fork];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1011, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, specification, zoneValues);
  }
  run(R, f) {
    let implementation = this[_run];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1020, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = ZoneAndZoneDelegateAndZone__ToR()._check(implementation.function);
    return handler(R, implementation.zone, parentDelegate, this, f);
  }
  runUnary(R, T, f, arg) {
    let implementation = this[_runUnary];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1028, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = ZoneAndZoneDelegateAndZone__ToR$()._check(implementation.function);
    return handler(R, T, implementation.zone, parentDelegate, this, f, arg);
  }
  runBinary(R, T1, T2, f, arg1, arg2) {
    let implementation = this[_runBinary];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1036, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = ZoneAndZoneDelegateAndZone__ToR$0()._check(implementation.function);
    return handler(R, T1, T2, implementation.zone, parentDelegate, this, f, arg1, arg2);
  }
  registerCallback(R, callback) {
    let implementation = this[_registerCallback];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1044, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = ZoneAndZoneDelegateAndZone__ToFn()._check(implementation.function);
    return handler(R, implementation.zone, parentDelegate, this, callback);
  }
  registerUnaryCallback(R, T, callback) {
    let implementation = this[_registerUnaryCallback];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1052, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = ZoneAndZoneDelegateAndZone__ToFn$()._check(implementation.function);
    return handler(R, T, implementation.zone, parentDelegate, this, callback);
  }
  registerBinaryCallback(R, T1, T2, callback) {
    let implementation = this[_registerBinaryCallback];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1061, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = ZoneAndZoneDelegateAndZone__ToFn$0()._check(implementation.function);
    return handler(R, T1, T2, implementation.zone, parentDelegate, this, callback);
  }
  errorCallback(error, stackTrace) {
    let implementation = this[_errorCallback];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1069, 12, "implementation != null");
    let implementationZone = implementation.zone;
    if (implementationZone == async._rootZone) return null;
    let parentDelegate = async._parentDelegate(async._Zone._check(implementationZone));
    let handler = implementation.function;
    return handler(implementationZone, parentDelegate, this, error, stackTrace);
  }
  scheduleMicrotask(f) {
    let implementation = this[_scheduleMicrotask];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1079, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, f);
  }
  createTimer(duration, f) {
    let implementation = this[_createTimer];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1087, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, duration, f);
  }
  createPeriodicTimer(duration, f) {
    let implementation = this[_createPeriodicTimer];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1095, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, duration, f);
  }
  print(line) {
    let implementation = this[_print];
    if (!(implementation != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1103, 12, "implementation != null");
    let parentDelegate = async._parentDelegate(implementation.zone);
    let handler = implementation.function;
    return handler(implementation.zone, parentDelegate, this, line);
  }
};
(async._CustomZone.new = function(parent, specification, _map) {
  this[_run$] = null;
  this[_runUnary$] = null;
  this[_runBinary$] = null;
  this[_registerCallback$] = null;
  this[_registerUnaryCallback$] = null;
  this[_registerBinaryCallback$] = null;
  this[_errorCallback$] = null;
  this[_scheduleMicrotask$] = null;
  this[_createTimer$] = null;
  this[_createPeriodicTimer$] = null;
  this[_print$] = null;
  this[_fork$] = null;
  this[_handleUncaughtError$] = null;
  this[_delegateCache] = null;
  this[parent$] = parent;
  this[_map$3] = _map;
  async._CustomZone.__proto__.new.call(this);
  this[_run] = specification.run != null ? new (_ZoneFunctionOfFunction()).new(this, specification.run) : this.parent[_run];
  this[_runUnary] = specification.runUnary != null ? new (_ZoneFunctionOfFunction()).new(this, specification.runUnary) : this.parent[_runUnary];
  this[_runBinary] = specification.runBinary != null ? new (_ZoneFunctionOfFunction()).new(this, specification.runBinary) : this.parent[_runBinary];
  this[_registerCallback] = specification.registerCallback != null ? new (_ZoneFunctionOfFunction()).new(this, specification.registerCallback) : this.parent[_registerCallback];
  this[_registerUnaryCallback] = specification.registerUnaryCallback != null ? new (_ZoneFunctionOfFunction()).new(this, specification.registerUnaryCallback) : this.parent[_registerUnaryCallback];
  this[_registerBinaryCallback] = specification.registerBinaryCallback != null ? new (_ZoneFunctionOfFunction()).new(this, specification.registerBinaryCallback) : this.parent[_registerBinaryCallback];
  this[_errorCallback] = specification.errorCallback != null ? new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncError()).new(this, specification.errorCallback) : this.parent[_errorCallback];
  this[_scheduleMicrotask] = specification.scheduleMicrotask != null ? new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid()).new(this, specification.scheduleMicrotask) : this.parent[_scheduleMicrotask];
  this[_createTimer] = specification.createTimer != null ? new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer()).new(this, specification.createTimer) : this.parent[_createTimer];
  this[_createPeriodicTimer] = specification.createPeriodicTimer != null ? new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$()).new(this, specification.createPeriodicTimer) : this.parent[_createPeriodicTimer];
  this[_print] = specification.print != null ? new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$()).new(this, specification.print) : this.parent[_print];
  this[_fork] = specification.fork != null ? new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone()).new(this, specification.fork) : this.parent[_fork];
  this[_handleUncaughtError] = specification.handleUncaughtError != null ? new (_ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$0()).new(this, specification.handleUncaughtError) : this.parent[_handleUncaughtError];
}).prototype = async._CustomZone.prototype;
;
;
dart.setGetterSignature(async._CustomZone, () => ({
  __proto__: dart.getGetters(async._CustomZone.__proto__),
  [_delegate]: async.ZoneDelegate,
  errorZone: async.Zone
}));
dart.setLibraryUri(async._CustomZone, "dart:async");
;
let C108;
let C107;
let C110;
let C109;
let C112;
let C111;
let C114;
let C113;
let C116;
let C115;
let C118;
let C117;
let C120;
let C119;
let C122;
let C121;
let C124;
let C123;
let C126;
let C125;
let C128;
let C127;
let C130;
let C129;
let C132;
let C131;
async._RootZone = class _RootZone extends async._Zone {
  get [_run]() {
    return C107 || CT.C107;
  }
  get [_runUnary]() {
    return C109 || CT.C109;
  }
  get [_runBinary]() {
    return C111 || CT.C111;
  }
  get [_registerCallback]() {
    return C113 || CT.C113;
  }
  get [_registerUnaryCallback]() {
    return C115 || CT.C115;
  }
  get [_registerBinaryCallback]() {
    return C117 || CT.C117;
  }
  get [_errorCallback]() {
    return C119 || CT.C119;
  }
  get [_scheduleMicrotask]() {
    return C121 || CT.C121;
  }
  get [_createTimer]() {
    return C123 || CT.C123;
  }
  get [_createPeriodicTimer]() {
    return C125 || CT.C125;
  }
  get [_print]() {
    return C127 || CT.C127;
  }
  get [_fork]() {
    return C129 || CT.C129;
  }
  get [_handleUncaughtError]() {
    return C131 || CT.C131;
  }
  get parent() {
    return null;
  }
  get [_map$2]() {
    return async._RootZone._rootMap;
  }
  get [_delegate]() {
    if (async._RootZone._rootDelegate != null) return async._RootZone._rootDelegate;
    return async._RootZone._rootDelegate = new async._ZoneDelegate.new(this);
  }
  get errorZone() {
    return this;
  }
  runGuarded(f) {
    try {
      if (async._rootZone == async.Zone._current) {
        f();
        return;
      }
      async._rootRun(dart.void, null, null, this, f);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      this.handleUncaughtError(e, s);
    }
  }
  runUnaryGuarded(T, f, arg) {
    try {
      if (async._rootZone == async.Zone._current) {
        f(arg);
        return;
      }
      async._rootRunUnary(dart.void, T, null, null, this, f, arg);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      this.handleUncaughtError(e, s);
    }
  }
  runBinaryGuarded(T1, T2, f, arg1, arg2) {
    try {
      if (async._rootZone == async.Zone._current) {
        f(arg1, arg2);
        return;
      }
      async._rootRunBinary(dart.void, T1, T2, null, null, this, f, arg1, arg2);
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      this.handleUncaughtError(e, s);
    }
  }
  bindCallback(R, f) {
    return dart.fn(() => this.run(R, f), dart.fnType(R, []));
  }
  bindUnaryCallback(R, T, f) {
    return dart.fn(arg => this.runUnary(R, T, f, arg), dart.fnType(R, [T]));
  }
  bindBinaryCallback(R, T1, T2, f) {
    return dart.fn((arg1, arg2) => this.runBinary(R, T1, T2, f, arg1, arg2), dart.fnType(R, [T1, T2]));
  }
  bindCallbackGuarded(f) {
    return dart.fn(() => this.runGuarded(f), VoidTovoid());
  }
  bindUnaryCallbackGuarded(T, f) {
    return dart.fn(arg => this.runUnaryGuarded(T, f, arg), dart.fnType(dart.void, [T]));
  }
  bindBinaryCallbackGuarded(T1, T2, f) {
    return dart.fn((arg1, arg2) => this.runBinaryGuarded(T1, T2, f, arg1, arg2), dart.fnType(dart.void, [T1, T2]));
  }
  _get(key) {
    return null;
  }
  handleUncaughtError(error, stackTrace) {
    async._rootHandleUncaughtError(null, null, this, error, stackTrace);
  }
  fork(opts) {
    let specification = opts && 'specification' in opts ? opts.specification : null;
    let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
    return async._rootFork(null, null, this, specification, zoneValues);
  }
  run(R, f) {
    if (async.Zone._current == async._rootZone) return f();
    return async._rootRun(R, null, null, this, f);
  }
  runUnary(R, T, f, arg) {
    if (async.Zone._current == async._rootZone) return f(arg);
    return async._rootRunUnary(R, T, null, null, this, f, arg);
  }
  runBinary(R, T1, T2, f, arg1, arg2) {
    if (async.Zone._current == async._rootZone) return f(arg1, arg2);
    return async._rootRunBinary(R, T1, T2, null, null, this, f, arg1, arg2);
  }
  registerCallback(R, f) {
    return f;
  }
  registerUnaryCallback(R, T, f) {
    return f;
  }
  registerBinaryCallback(R, T1, T2, f) {
    return f;
  }
  errorCallback(error, stackTrace) {
    return null;
  }
  scheduleMicrotask(f) {
    async._rootScheduleMicrotask(null, null, this, f);
  }
  createTimer(duration, f) {
    return async.Timer._createTimer(duration, f);
  }
  createPeriodicTimer(duration, f) {
    return async.Timer._createPeriodicTimer(duration, f);
  }
  print(line) {
    _internal.printToConsole(line);
  }
};
(async._RootZone.new = function() {
  async._RootZone.__proto__.new.call(this);
  ;
}).prototype = async._RootZone.prototype;
;
;
dart.setGetterSignature(async._RootZone, () => ({
  __proto__: dart.getGetters(async._RootZone.__proto__),
  [_run]: async._ZoneFunction$(core.Function),
  [_runUnary]: async._ZoneFunction$(core.Function),
  [_runBinary]: async._ZoneFunction$(core.Function),
  [_registerCallback]: async._ZoneFunction$(core.Function),
  [_registerUnaryCallback]: async._ZoneFunction$(core.Function),
  [_registerBinaryCallback]: async._ZoneFunction$(core.Function),
  [_errorCallback]: async._ZoneFunction$(dart.fnType(async.AsyncError, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])),
  [_scheduleMicrotask]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(dart.void, [])])),
  [_createTimer]: async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [])])),
  [_createPeriodicTimer]: async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])])),
  [_print]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])),
  [_fork]: async._ZoneFunction$(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, async.ZoneSpecification, core.Map])),
  [_handleUncaughtError]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])),
  parent: async._Zone,
  [_map$2]: core.Map,
  [_delegate]: async.ZoneDelegate,
  errorZone: async.Zone
}));
dart.setLibraryUri(async._RootZone, "dart:async");
dart.defineLazy(async._RootZone, {
  /*async._RootZone._rootMap*/get _rootMap() {
    return new _js_helper.LinkedMap.new();
  },
  /*async._RootZone._rootDelegate*/get _rootDelegate() {
    return null;
  },
  set _rootDelegate(_) {}
});
let C133;
let C134;
let C135;
async.async = function _async(T, initGenerator) {
  let iter = null;
  let onValue = null;
  let onError = null;
  function onAwait(value) {
    let f = null;
    if (async._Future.is(value)) {
      f = value;
    } else if (async.Future.is(value)) {
      f = new async._Future.new();
      async._Future._chainForeignFuture(value, f);
    } else {
      f = new async._Future.value(value);
    }
    f = f[_thenAwait](core.Object, onValue, onError);
    return f;
  }
  onValue = value => {
    let iteratorResult = iter.next(value);
    value = iteratorResult.value;
    return iteratorResult.done ? value : onAwait(value);
  };
  onError = (value, stackTrace) => {
    let iteratorResult = iter.throw(dart.createErrorWithStack(value, stackTrace));
    value = iteratorResult.value;
    return iteratorResult.done ? value : onAwait(value);
  };
  let zone = async.Zone.current;
  if (zone != async._rootZone) {
    onValue = zone.registerUnaryCallback(core.Object, core.Object, onValue);
    onError = zone.registerBinaryCallback(core.Object, core.Object, core.StackTrace, onError);
  }
  let asyncFuture = new (async._Future$(T)).new();
  let isRunningAsEvent = false;
  function runBody() {
    try {
      iter = initGenerator()[Symbol.iterator]();
      let iteratorValue = iter.next(null);
      let value = iteratorValue.value;
      if (iteratorValue.done) {
        if (async.Future.is(value)) {
          if (async._Future.is(value)) {
            async._Future._chainCoreFuture(value, asyncFuture);
          } else {
            async._Future._chainForeignFuture(value, asyncFuture);
          }
        } else if (isRunningAsEvent) {
          asyncFuture[_completeWithValue](value);
        } else {
          asyncFuture[_asyncComplete](value);
        }
      } else {
        async._Future._chainCoreFuture(onAwait(value), asyncFuture);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (isRunningAsEvent) {
        async._completeWithErrorCallback(asyncFuture, e, s);
      } else {
        async._asyncCompleteWithErrorCallback(asyncFuture, e, s);
      }
    }
  }
  if (dart.test(dart.startAsyncSynchronously)) {
    runBody();
    isRunningAsEvent = true;
  } else {
    isRunningAsEvent = true;
    async.scheduleMicrotask(runBody);
  }
  return asyncFuture;
};
async._invokeErrorHandler = function _invokeErrorHandler(errorHandler, error, stackTrace) {
  if (NullAndNullTodynamic().is(errorHandler)) {
    return dart.dcall(errorHandler, [error, stackTrace]);
  } else {
    let unaryErrorHandler = dynamicTodynamic()._check(errorHandler);
    return unaryErrorHandler(error);
  }
};
async._completeWithErrorCallback = function _completeWithErrorCallback(result, error, stackTrace) {
  let replacement = async.Zone.current.errorCallback(error, stackTrace);
  if (replacement != null) {
    error = async._nonNullError(replacement.error);
    stackTrace = replacement.stackTrace;
  }
  result[_completeError](error, stackTrace);
};
async._asyncCompleteWithErrorCallback = function _asyncCompleteWithErrorCallback(result, error, stackTrace) {
  let replacement = async.Zone.current.errorCallback(error, stackTrace);
  if (replacement != null) {
    error = async._nonNullError(replacement.error);
    stackTrace = replacement.stackTrace;
  }
  result[_asyncCompleteError](error, stackTrace);
};
async._nonNullError = function _nonNullError(error) {
  let t61;
  t61 = error;
  return t61 == null ? new core.NullThrownError.new() : t61;
};
async._registerErrorHandler = function _registerErrorHandler(errorHandler, zone) {
  if (ObjectAndStackTraceTodynamic().is(errorHandler)) {
    return zone.registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, errorHandler);
  }
  if (ObjectTodynamic().is(errorHandler)) {
    return zone.registerUnaryCallback(dart.dynamic, core.Object, errorHandler);
  }
  dart.throw(new core.ArgumentError.value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace" + " as arguments, and return a a valid result"));
};
async._microtaskLoop = function _microtaskLoop() {
  while (async._nextCallback != null) {
    async._lastPriorityCallback = null;
    let entry = async._nextCallback;
    async._nextCallback = entry.next;
    if (async._nextCallback == null) async._lastCallback = null;
    entry.callback();
  }
};
async._startMicrotaskLoop = function _startMicrotaskLoop() {
  async._isInCallbackLoop = true;
  try {
    async._microtaskLoop();
  } finally {
    async._lastPriorityCallback = null;
    async._isInCallbackLoop = false;
    if (async._nextCallback != null) {
      async._AsyncRun._scheduleImmediate(C133 || CT.C133);
    }
  }
};
async._scheduleAsyncCallback = function _scheduleAsyncCallback(callback) {
  let newEntry = new async._AsyncCallbackEntry.new(callback);
  if (async._nextCallback == null) {
    async._nextCallback = async._lastCallback = newEntry;
    if (!dart.test(async._isInCallbackLoop)) {
      async._AsyncRun._scheduleImmediate(C133 || CT.C133);
    }
  } else {
    async._lastCallback.next = newEntry;
    async._lastCallback = newEntry;
  }
};
async._schedulePriorityAsyncCallback = function _schedulePriorityAsyncCallback(callback) {
  if (async._nextCallback == null) {
    async._scheduleAsyncCallback(callback);
    async._lastPriorityCallback = async._lastCallback;
    return;
  }
  let entry = new async._AsyncCallbackEntry.new(callback);
  if (async._lastPriorityCallback == null) {
    entry.next = async._nextCallback;
    async._nextCallback = async._lastPriorityCallback = entry;
  } else {
    entry.next = async._lastPriorityCallback.next;
    async._lastPriorityCallback.next = entry;
    async._lastPriorityCallback = entry;
    if (entry.next == null) {
      async._lastCallback = entry;
    }
  }
};
async.scheduleMicrotask = function scheduleMicrotask(callback) {
  let currentZone = async._Zone._check(async.Zone.current);
  if (async._rootZone == currentZone) {
    async._rootScheduleMicrotask(null, null, async._rootZone, callback);
    return;
  }
  let implementation = currentZone[_scheduleMicrotask];
  if (async._rootZone == implementation.zone && dart.test(async._rootZone.inSameErrorZone(currentZone))) {
    async._rootScheduleMicrotask(null, null, currentZone, currentZone.registerCallback(dart.void, callback));
    return;
  }
  async.Zone.current.scheduleMicrotask(async.Zone.current.bindCallbackGuarded(callback));
};
async._runGuarded = function _runGuarded(notificationHandler) {
  if (notificationHandler == null) return;
  try {
    notificationHandler();
  } catch (e$) {
    let e = dart.getThrown(e$);
    let s = dart.stackTrace(e$);
    async.Zone.current.handleUncaughtError(e, s);
  }
};
async._nullDataHandler = function _nullDataHandler(value) {
};
async._nullErrorHandler = function _nullErrorHandler(error, stackTrace) {
  if (stackTrace === void 0) stackTrace = null;
  async.Zone.current.handleUncaughtError(error, stackTrace);
};
async._nullDoneHandler = function _nullDoneHandler() {
};
async._runUserCode = function _runUserCode(T, userCode, onSuccess, onError) {
  try {
    onSuccess(userCode());
  } catch (e$) {
    let e = dart.getThrown(e$);
    let s = dart.stackTrace(e$);
    let replacement = async.Zone.current.errorCallback(e, s);
    if (replacement == null) {
      onError(e, s);
    } else {
      let error = async._nonNullError(replacement.error);
      let stackTrace = replacement.stackTrace;
      onError(error, stackTrace);
    }
  }
};
async._cancelAndError = function _cancelAndError(subscription, future, error, stackTrace) {
  let cancelFuture = subscription.cancel();
  if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
    cancelFuture.whenComplete(dart.fn(() => future[_completeError](error, stackTrace), VoidTovoid()));
  } else {
    future[_completeError](error, stackTrace);
  }
};
async._cancelAndErrorWithReplacement = function _cancelAndErrorWithReplacement(subscription, future, error, stackTrace) {
  let replacement = async.Zone.current.errorCallback(error, stackTrace);
  if (replacement != null) {
    error = async._nonNullError(replacement.error);
    stackTrace = replacement.stackTrace;
  }
  async._cancelAndError(subscription, future, error, stackTrace);
};
async._cancelAndErrorClosure = function _cancelAndErrorClosure(subscription, future) {
  return dart.fn((error, stackTrace) => {
    async._cancelAndError(subscription, future, error, stackTrace);
  }, dynamicAndStackTraceToNull());
};
async._cancelAndValue = function _cancelAndValue(subscription, future, value) {
  let cancelFuture = subscription.cancel();
  if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
    cancelFuture.whenComplete(dart.fn(() => future[_complete](value), VoidTovoid()));
  } else {
    future[_complete](value);
  }
};
async._addErrorWithReplacement = function _addErrorWithReplacement(sink, error, stackTrace) {
  let replacement = async.Zone.current.errorCallback(error, stackTrace);
  if (replacement != null) {
    error = async._nonNullError(replacement.error);
    stackTrace = replacement.stackTrace;
  }
  sink[_addError](error, stackTrace);
};
async._parentDelegate = function _parentDelegate(zone) {
  if (zone.parent == null) return null;
  return zone.parent[_delegate];
};
async._rootHandleUncaughtError = function _rootHandleUncaughtError(self, parent, zone, error, stackTrace) {
  async._schedulePriorityAsyncCallback(dart.fn(() => {
    error == null ? error = new core.NullThrownError.new() : null;
    if (stackTrace == null) dart.throw(error);
    async._rethrow(error, stackTrace);
  }, VoidToNull()));
};
async._rethrow = function _rethrow(error, stackTrace) {
  throw dart.createErrorWithStack(error, stackTrace);
};
async._rootRun = function _rootRun(R, self, parent, zone, f) {
  if (dart.equals(async.Zone._current, zone)) return f();
  let old = async.Zone._enter(zone);
  try {
    return f();
  } finally {
    async.Zone._leave(old);
  }
};
async._rootRunUnary = function _rootRunUnary(R, T, self, parent, zone, f, arg) {
  if (dart.equals(async.Zone._current, zone)) return f(arg);
  let old = async.Zone._enter(zone);
  try {
    return f(arg);
  } finally {
    async.Zone._leave(old);
  }
};
async._rootRunBinary = function _rootRunBinary(R, T1, T2, self, parent, zone, f, arg1, arg2) {
  if (dart.equals(async.Zone._current, zone)) return f(arg1, arg2);
  let old = async.Zone._enter(zone);
  try {
    return f(arg1, arg2);
  } finally {
    async.Zone._leave(old);
  }
};
async._rootRegisterCallback = function _rootRegisterCallback(R, self, parent, zone, f) {
  return f;
};
async._rootRegisterUnaryCallback = function _rootRegisterUnaryCallback(R, T, self, parent, zone, f) {
  return f;
};
async._rootRegisterBinaryCallback = function _rootRegisterBinaryCallback(R, T1, T2, self, parent, zone, f) {
  return f;
};
async._rootErrorCallback = function _rootErrorCallback(self, parent, zone, error, stackTrace) {
  return null;
};
async._rootScheduleMicrotask = function _rootScheduleMicrotask(self, parent, zone, f) {
  if (async._rootZone != zone) {
    let hasErrorHandler = !dart.test(async._rootZone.inSameErrorZone(zone));
    if (hasErrorHandler) {
      f = zone.bindCallbackGuarded(f);
    } else {
      f = zone.bindCallback(dart.void, f);
    }
    zone = async._rootZone;
  }
  async._scheduleAsyncCallback(f);
};
async._rootCreateTimer = function _rootCreateTimer(self, parent, zone, duration, callback) {
  if (async._rootZone != zone) {
    callback = zone.bindCallback(dart.void, callback);
  }
  return async.Timer._createTimer(duration, callback);
};
async._rootCreatePeriodicTimer = function _rootCreatePeriodicTimer(self, parent, zone, duration, callback) {
  if (async._rootZone != zone) {
    callback = zone.bindUnaryCallback(dart.dynamic, async.Timer, callback);
  }
  return async.Timer._createPeriodicTimer(duration, callback);
};
async._rootPrint = function _rootPrint(self, parent, zone, line) {
  _internal.printToConsole(line);
};
async._printToZone = function _printToZone(line) {
  async.Zone.current.print(line);
};
async._rootFork = function _rootFork(self, parent, zone, specification, zoneValues) {
  _internal.printToZone = C134 || CT.C134;
  if (specification == null) {
    specification = C135 || CT.C135;
  } else if (!async._ZoneSpecification.is(specification)) {
    dart.throw(new core.ArgumentError.new("ZoneSpecifications must be instantiated" + " with the provided constructor."));
  }
  let valueMap = null;
  if (zoneValues == null) {
    if (async._Zone.is(zone)) {
      valueMap = zone[_map$2];
    } else {
      valueMap = new _js_helper.LinkedMap.new();
    }
  } else {
    valueMap = collection.HashMap.from(zoneValues);
  }
  return new async._CustomZone.new(async._Zone._check(zone), specification, valueMap);
};
async.runZoned = function runZoned(R, body, opts) {
  let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
  let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
  let onError = opts && 'onError' in opts ? opts.onError : null;
  if (onError == null) {
    return async._runZoned(R, body, zoneValues, zoneSpecification);
  }
  let unaryOnError = null;
  let binaryOnError = null;
  if (ObjectAndStackTraceTovoid$().is(onError)) {
    binaryOnError = onError;
  } else if (ObjectTovoid$().is(onError)) {
    unaryOnError = onError;
  } else {
    dart.throw(new core.ArgumentError.new("onError callback must take either an Object " + "(the error), or both an Object (the error) and a StackTrace."));
  }
  let errorHandler = dart.fn((self, parent, zone, error, stackTrace) => {
    try {
      if (binaryOnError != null) {
        self.parent.runBinary(dart.void, core.Object, core.StackTrace, binaryOnError, error, stackTrace);
      } else {
        if (!(unaryOnError != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1483, 16, "unaryOnError != null");
        self.parent.runUnary(dart.void, core.Object, unaryOnError, error);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.identical(e, error)) {
        parent.handleUncaughtError(zone, error, stackTrace);
      } else {
        parent.handleUncaughtError(zone, e, s);
      }
    }
  }, ZoneAndZoneDelegateAndZone__ToNull());
  if (zoneSpecification == null) {
    zoneSpecification = new async._ZoneSpecification.new({handleUncaughtError: errorHandler});
  } else {
    zoneSpecification = async.ZoneSpecification.from(zoneSpecification, {handleUncaughtError: errorHandler});
  }
  try {
    return async._runZoned(R, body, zoneValues, zoneSpecification);
  } catch (e$) {
    let e = dart.getThrown(e$);
    let stackTrace = dart.stackTrace(e$);
    if (binaryOnError != null) {
      binaryOnError(e, stackTrace);
    } else {
      if (!(unaryOnError != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart", 1507, 14, "unaryOnError != null");
      unaryOnError(e);
    }
  }
  return null;
};
async._runZoned = function _runZoned(R, body, zoneValues, specification) {
  return async.Zone.current.fork({specification: specification, zoneValues: zoneValues}).run(R, body);
};
dart.defineLazy(async, {
  /*async._nextCallback*/get _nextCallback() {
    return null;
  },
  set _nextCallback(_) {},
  /*async._lastCallback*/get _lastCallback() {
    return null;
  },
  set _lastCallback(_) {},
  /*async._lastPriorityCallback*/get _lastPriorityCallback() {
    return null;
  },
  set _lastPriorityCallback(_) {},
  /*async._isInCallbackLoop*/get _isInCallbackLoop() {
    return false;
  },
  set _isInCallbackLoop(_) {},
  /*async._rootZone*/get _rootZone() {
    return C106 || CT.C106;
  }
});
const _keyMap$ = dart.privateName(collection, "_keyMap");
const _map$4 = dart.privateName(collection, "_map");
const _modifications$2 = dart.privateName(collection, "_modifications");
const _newSet = dart.privateName(collection, "_newSet");
const _newSimilarSet = dart.privateName(collection, "_newSimilarSet");
const _is__SetBase_default = Symbol('_is__SetBase_default');
collection._SetBase$ = dart.generic(E => {
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  let SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
  let JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  let EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  let TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
  let TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  let SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  let SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  let VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  class _SetBase extends core.Object {
    cast(R) {
      return core.Set.castFrom(E, R, this, {newSet: dart.bind(this, _newSimilarSet)});
    }
    difference(other) {
      let result = this[_newSet]();
      for (let element of this) {
        if (!dart.test(other.contains(element))) result.add(element);
      }
      return result;
    }
    intersection(other) {
      let result = this[_newSet]();
      for (let element of this) {
        if (dart.test(other.contains(element))) result.add(element);
      }
      return result;
    }
    toSet() {
      let t65;
      t65 = this[_newSet]();
      t65.addAll(this);
      return t65;
    }
    get isEmpty() {
      return this[$length] === 0;
    }
    get isNotEmpty() {
      return this[$length] !== 0;
    }
    followedBy(other) {
      IterableOfE()._check(other);
      return FollowedByIterableOfE().firstEfficient(this, other);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    clear() {
      this.removeAll(this.toList());
    }
    addAll(elements) {
      IterableOfE()._check(elements);
      for (let element of elements)
        this.add(element);
    }
    removeAll(elements) {
      for (let element of elements)
        this.remove(element);
    }
    retainAll(elements) {
      let toRemove = this.toSet();
      for (let o of elements) {
        toRemove.remove(o);
      }
      this.removeAll(toRemove);
    }
    removeWhere(test) {
      let toRemove = [];
      for (let element of this) {
        if (dart.test(test(element))) toRemove[$add](element);
      }
      this.removeAll(toRemove);
    }
    retainWhere(test) {
      let toRemove = [];
      for (let element of this) {
        if (!dart.test(test(element))) toRemove[$add](element);
      }
      this.removeAll(toRemove);
    }
    containsAll(other) {
      for (let o of other) {
        if (!dart.test(this.contains(o))) return false;
      }
      return true;
    }
    union(other) {
      let t65;
      SetOfE()._check(other);
      t65 = this.toSet();
      t65.addAll(other);
      return t65;
    }
    toList(opts) {
      let t65, t65$;
      let growable = opts && 'growable' in opts ? opts.growable : true;
      let result = dart.test(growable) ? (t65 = JSArrayOfE().of([]), t65[$length] = this[$length], t65) : ListOfE().new(this[$length]);
      let i = 0;
      for (let element of this)
        result[$_set]((t65$ = i, i = t65$ + 1, t65$), element);
      return result;
    }
    map(T, f) {
      return new (_internal.EfficientLengthMappedIterable$(E, T)).new(this, f);
    }
    get single() {
      if (dart.notNull(this[$length]) > 1) dart.throw(_internal.IterableElementError.tooMany());
      let it = this.iterator;
      if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
      let result = it.current;
      return result;
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
    where(f) {
      return new (WhereIterableOfE()).new(this, f);
    }
    expand(T, f) {
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    forEach(f) {
      for (let element of this)
        f(element);
    }
    reduce(combine) {
      EAndEToE()._check(combine);
      let iterator = this.iterator;
      if (!dart.test(iterator.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let value = iterator.current;
      while (dart.test(iterator.moveNext())) {
        value = combine(value, iterator.current);
      }
      return value;
    }
    fold(T, initialValue, combine) {
      let value = initialValue;
      for (let element of this)
        value = combine(value, element);
      return value;
    }
    every(f) {
      for (let element of this) {
        if (!dart.test(f(element))) return false;
      }
      return true;
    }
    join(separator) {
      if (separator === void 0) separator = "";
      let iterator = this.iterator;
      if (!dart.test(iterator.moveNext())) return "";
      let buffer = new core.StringBuffer.new();
      if (separator == null || separator === "") {
        do {
          buffer.write(iterator.current);
        } while (dart.test(iterator.moveNext()));
      } else {
        buffer.write(iterator.current);
        while (dart.test(iterator.moveNext())) {
          buffer.write(separator);
          buffer.write(iterator.current);
        }
      }
      return buffer.toString();
    }
    any(test) {
      for (let element of this) {
        if (dart.test(test(element))) return true;
      }
      return false;
    }
    take(n) {
      return TakeIterableOfE().new(this, n);
    }
    takeWhile(test) {
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    skip(n) {
      return SkipIterableOfE().new(this, n);
    }
    skipWhile(test) {
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    get first() {
      let it = this.iterator;
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      return it.current;
    }
    get last() {
      let it = this.iterator;
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = null;
      do {
        result = it.current;
      } while (dart.test(it.moveNext()));
      return result;
    }
    firstWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      for (let element of this) {
        if (dart.test(test(element))) return element;
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let result = null;
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching) return result;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let result = null;
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          if (foundMatching) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching) return result;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      core.ArgumentError.checkNotNull(index, "index");
      core.RangeError.checkNotNegative(index, "index");
      let elementIndex = 0;
      for (let element of this) {
        if (index === elementIndex) return element;
        elementIndex = elementIndex + 1;
      }
      dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (_SetBase.new = function() {
    ;
  }).prototype = _SetBase.prototype;
  ;
  _SetBase.prototype[_is__SetBase_default] = true;
  _SetBase[dart.implements] = () => [core.Set$(E)];
  ;
  dart.setGetterSignature(_SetBase, () => ({
    __proto__: dart.getGetters(_SetBase.__proto__),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    single: E,
    [$single]: E,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E
  }));
  dart.setLibraryUri(_SetBase, "dart:collection");
  dart.defineExtensionMethods(_SetBase, [
    'cast',
    'toSet',
    'followedBy',
    'whereType',
    'toList',
    'map',
    'toString',
    'where',
    'expand',
    'forEach',
    'reduce',
    'fold',
    'every',
    'join',
    'any',
    'take',
    'takeWhile',
    'skip',
    'skipWhile',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'elementAt'
  ]);
  dart.defineExtensionAccessors(_SetBase, [
    'isEmpty',
    'isNotEmpty',
    'single',
    'first',
    'last'
  ]);
  return _SetBase;
});
collection._SetBase = collection._SetBase$();
;
const _is__InternalSet_default = Symbol('_is__InternalSet_default');
collection._InternalSet$ = dart.generic(E => {
  let DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
  class _InternalSet extends collection._SetBase$(E) {
    get length() {
      return this[_map$4].size;
    }
    get isEmpty() {
      return this[_map$4].size == 0;
    }
    get isNotEmpty() {
      return this[_map$4].size != 0;
    }
    get iterator() {
      return new (DartIteratorOfE()).new(this[Symbol.iterator]());
    }
    [Symbol.iterator]() {
      let self = this;
      let iterator = self[_map$4].values();
      let modifications = self[_modifications$2];
      return {
        next() {
          if (modifications != self[_modifications$2]) {
            throw new core.ConcurrentModificationError.new(self);
          }
          return iterator.next();
        }
      };
    }
  }
  (_InternalSet.new = function() {
    _InternalSet.__proto__.new.call(this);
    ;
  }).prototype = _InternalSet.prototype;
  ;
  _InternalSet.prototype[_is__InternalSet_default] = true;
  ;
  dart.setGetterSignature(_InternalSet, () => ({
    __proto__: dart.getGetters(_InternalSet.__proto__),
    length: core.int,
    [$length]: core.int,
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(_InternalSet, "dart:collection");
  dart.defineExtensionAccessors(_InternalSet, ['length', 'isEmpty', 'isNotEmpty', 'iterator']);
  return _InternalSet;
});
collection._InternalSet = collection._InternalSet$();
;
const _is__HashSet_default = Symbol('_is__HashSet_default');
const _map$5 = dart.privateName(collection, "_HashSet._map");
const _modifications$3 = dart.privateName(collection, "_HashSet._modifications");
collection._HashSet$ = dart.generic(E => {
  let _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _HashSet extends collection._InternalSet$(E) {
    get [_map$4]() {
      return this[_map$5];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    get [_modifications$2]() {
      return this[_modifications$3];
    }
    set [_modifications$2](value) {
      this[_modifications$3] = value;
    }
    [_newSet]() {
      return new (_HashSetOfE()).new();
    }
    [_newSimilarSet](R) {
      return new (collection._HashSet$(R)).new();
    }
    contains(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let buckets = this[_keyMap$].get(dart.hashCode(k) & 0x3ffffff);
        if (buckets != null) {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return true;
          }
        }
        return false;
      }
      return this[_map$4].has(key);
    }
    lookup(key) {
      if (key == null) return null;
      if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let buckets = this[_keyMap$].get(dart.hashCode(k) & 0x3ffffff);
        if (buckets != null) {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return k;
          }
        }
        return null;
      }
      return this[_map$4].has(key) ? key : null;
    }
    add(key) {
      E._check(key);
      let map = this[_map$4];
      if (key == null) {
        if (dart.test(map.has(null))) return false;
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let keyMap = this[_keyMap$];
        let k = key;
        let hash = dart.hashCode(k) & 0x3ffffff;
        let buckets = keyMap.get(hash);
        if (buckets == null) {
          keyMap.set(hash, [key]);
        } else {
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            k = buckets[i];
            if (dart.equals(k, key)) return false;
          }
          buckets.push(key);
        }
      } else if (dart.test(map.has(key))) {
        return false;
      }
      map.add(key);
      this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      return true;
    }
    addAll(objects) {
      IterableOfE()._check(objects);
      let map = this[_map$4];
      let length = map.size;
      for (let key of objects) {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          key = _js_helper.putLinkedMapKey(key, this[_keyMap$]);
        }
        map.add(key);
      }
      if (length !== map.size) {
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
    remove(key) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        let k = key;
        let hash = dart.hashCode(k) & 0x3ffffff;
        let buckets = this[_keyMap$].get(hash);
        if (buckets == null) return false;
        for (let i = 0, n = buckets.length;;) {
          k = buckets[i];
          if (dart.equals(k, key)) {
            key = k;
            if (n === 1) {
              this[_keyMap$].delete(hash);
            } else {
              buckets.splice(i, 1);
            }
            break;
          }
          if ((i = i + 1) >= n) return false;
        }
      }
      let map = this[_map$4];
      if (map.delete(key)) {
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
        return true;
      }
      return false;
    }
    clear() {
      let map = this[_map$4];
      if (map.size > 0) {
        map.clear();
        this[_keyMap$].clear();
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
  }
  (_HashSet.new = function() {
    this[_map$5] = new Set();
    this[_keyMap$] = new Map();
    this[_modifications$3] = 0;
    _HashSet.__proto__.new.call(this);
    ;
  }).prototype = _HashSet.prototype;
  ;
  _HashSet.prototype[_is__HashSet_default] = true;
  _HashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
  ;
  dart.setLibraryUri(_HashSet, "dart:collection");
  ;
  dart.defineExtensionMethods(_HashSet, ['contains']);
  return _HashSet;
});
collection._HashSet = collection._HashSet$();
;
const _is__ImmutableSet_default = Symbol('_is__ImmutableSet_default');
collection._ImmutableSet$ = dart.generic(E => {
  class _ImmutableSet extends collection._HashSet$(E) {
    add(other) {
      return dart.throw(collection._ImmutableSet._unsupported());
    }
    addAll(other) {
      return dart.throw(collection._ImmutableSet._unsupported());
    }
    clear() {
      return dart.throw(collection._ImmutableSet._unsupported());
    }
    remove(key) {
      return dart.throw(collection._ImmutableSet._unsupported());
    }
    static _unsupported() {
      return new core.UnsupportedError.new("Cannot modify unmodifiable set");
    }
  }
  (_ImmutableSet.from = function(entries) {
    _ImmutableSet.__proto__.new.call(this);
    let map = this[_map$4];
    for (let key of entries) {
      if (key == null) {
        key = null;
      } else if (key[$_equals] !== dart.identityEquals) {
        key = _js_helper.putLinkedMapKey(key, this[_keyMap$]);
      }
      map.add(key);
    }
  }).prototype = _ImmutableSet.prototype;
  ;
  _ImmutableSet.prototype[_is__ImmutableSet_default] = true;
  dart.setLibraryUri(_ImmutableSet, "dart:collection");
  return _ImmutableSet;
});
collection._ImmutableSet = collection._ImmutableSet$();
;
const _is__IdentityHashSet_default = Symbol('_is__IdentityHashSet_default');
const _map$6 = dart.privateName(collection, "_IdentityHashSet._map");
const _modifications$4 = dart.privateName(collection, "_IdentityHashSet._modifications");
collection._IdentityHashSet$ = dart.generic(E => {
  let _IdentityHashSetOfE = () => (_IdentityHashSetOfE = dart.constFn(collection._IdentityHashSet$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _IdentityHashSet extends collection._InternalSet$(E) {
    get [_map$4]() {
      return this[_map$6];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    get [_modifications$2]() {
      return this[_modifications$4];
    }
    set [_modifications$2](value) {
      this[_modifications$4] = value;
    }
    [_newSet]() {
      return new (_IdentityHashSetOfE()).new();
    }
    [_newSimilarSet](R) {
      return new (collection._IdentityHashSet$(R)).new();
    }
    contains(element) {
      return this[_map$4].has(element);
    }
    lookup(element) {
      return E._check(dart.test(this[_map$4].has(element)) ? element : null);
    }
    add(element) {
      E._check(element);
      let map = this[_map$4];
      if (map.has(element)) return false;
      map.add(element);
      this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      return true;
    }
    addAll(objects) {
      IterableOfE()._check(objects);
      let map = this[_map$4];
      let length = map.size;
      for (let key of objects) {
        map.add(key);
      }
      if (length !== map.size) {
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
    remove(element) {
      if (this[_map$4].delete(element)) {
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
        return true;
      }
      return false;
    }
    clear() {
      let map = this[_map$4];
      if (map.size > 0) {
        map.clear();
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
  }
  (_IdentityHashSet.new = function() {
    this[_map$6] = new Set();
    this[_modifications$4] = 0;
    _IdentityHashSet.__proto__.new.call(this);
    ;
  }).prototype = _IdentityHashSet.prototype;
  ;
  _IdentityHashSet.prototype[_is__IdentityHashSet_default] = true;
  _IdentityHashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
  ;
  dart.setLibraryUri(_IdentityHashSet, "dart:collection");
  ;
  dart.defineExtensionMethods(_IdentityHashSet, ['contains']);
  return _IdentityHashSet;
});
collection._IdentityHashSet = collection._IdentityHashSet$();
;
const _validKey$0 = dart.privateName(collection, "_validKey");
const _equals$0 = dart.privateName(collection, "_equals");
const _hashCode$0 = dart.privateName(collection, "_hashCode");
const _is__CustomHashSet_default = Symbol('_is__CustomHashSet_default');
const _modifications$5 = dart.privateName(collection, "_CustomHashSet._modifications");
const _map$7 = dart.privateName(collection, "_CustomHashSet._map");
collection._CustomHashSet$ = dart.generic(E => {
  let _CustomHashSetOfE = () => (_CustomHashSetOfE = dart.constFn(collection._CustomHashSet$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _CustomHashSet extends collection._InternalSet$(E) {
    get [_modifications$2]() {
      return this[_modifications$5];
    }
    set [_modifications$2](value) {
      this[_modifications$5] = value;
    }
    get [_map$4]() {
      return this[_map$7];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    [_newSet]() {
      return new (_CustomHashSetOfE()).new(this[_equals$0], this[_hashCode$0]);
    }
    [_newSimilarSet](R) {
      return new (collection._HashSet$(R)).new();
    }
    contains(key) {
      if (E.is(key)) {
        let buckets = this[_keyMap$].get(this[_hashCode$0](key) & 0x3ffffff);
        if (buckets != null) {
          let equals = this[_equals$0];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) return true;
          }
        }
      }
      return false;
    }
    lookup(key) {
      if (E.is(key)) {
        let buckets = this[_keyMap$].get(this[_hashCode$0](key) & 0x3ffffff);
        if (buckets != null) {
          let equals = this[_equals$0];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) return k;
          }
        }
      }
      return null;
    }
    add(key) {
      E._check(key);
      let keyMap = this[_keyMap$];
      let hash = this[_hashCode$0](key) & 0x3ffffff;
      let buckets = keyMap.get(hash);
      if (buckets == null) {
        keyMap.set(hash, [key]);
      } else {
        let equals = this[_equals$0];
        for (let i = 0, n = buckets.length; i < n; i = i + 1) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) return false;
        }
        buckets.push(key);
      }
      this[_map$4].add(key);
      this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      return true;
    }
    addAll(objects) {
      IterableOfE()._check(objects);
      for (let element of objects)
        this.add(element);
    }
    remove(key) {
      if (E.is(key)) {
        let hash = this[_hashCode$0](key) & 0x3ffffff;
        let keyMap = this[_keyMap$];
        let buckets = keyMap.get(hash);
        if (buckets == null) return false;
        let equals = this[_equals$0];
        for (let i = 0, n = buckets.length; i < n; i = i + 1) {
          let k = buckets[i];
          if (dart.test(equals(k, key))) {
            if (n === 1) {
              keyMap.delete(hash);
            } else {
              buckets.splice(i, 1);
            }
            this[_map$4].delete(k);
            this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
            return true;
          }
        }
      }
      return false;
    }
    clear() {
      let map = this[_map$4];
      if (map.size > 0) {
        map.clear();
        this[_keyMap$].clear();
        this[_modifications$2] = this[_modifications$2] + 1 & 67108863;
      }
    }
  }
  (_CustomHashSet.new = function(_equals, _hashCode) {
    this[_modifications$5] = 0;
    this[_map$7] = new Set();
    this[_keyMap$] = new Map();
    this[_equals$0] = _equals;
    this[_hashCode$0] = _hashCode;
    _CustomHashSet.__proto__.new.call(this);
    ;
  }).prototype = _CustomHashSet.prototype;
  ;
  _CustomHashSet.prototype[_is__CustomHashSet_default] = true;
  _CustomHashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
  ;
  dart.setLibraryUri(_CustomHashSet, "dart:collection");
  ;
  dart.defineExtensionMethods(_CustomHashSet, ['contains']);
  return _CustomHashSet;
});
collection._CustomHashSet = collection._CustomHashSet$();
;
const _is__CustomKeyHashSet_default = Symbol('_is__CustomKeyHashSet_default');
collection._CustomKeyHashSet$ = dart.generic(E => {
  let _CustomKeyHashSetOfE = () => (_CustomKeyHashSetOfE = dart.constFn(collection._CustomKeyHashSet$(E)))();
  class _CustomKeyHashSet extends collection._CustomHashSet$(E) {
    [_newSet]() {
      return new (_CustomKeyHashSetOfE()).new(this[_equals$0], this[_hashCode$0], this[_validKey$0]);
    }
    [_newSimilarSet](R) {
      return new (collection._HashSet$(R)).new();
    }
    contains(element) {
      if (!dart.test(this[_validKey$0](element))) return false;
      return super.contains(element);
    }
    lookup(element) {
      if (!dart.test(this[_validKey$0](element))) return null;
      return super.lookup(element);
    }
    remove(element) {
      if (!dart.test(this[_validKey$0](element))) return false;
      return super.remove(element);
    }
  }
  (_CustomKeyHashSet.new = function(equals, hashCode, _validKey) {
    this[_validKey$0] = _validKey;
    _CustomKeyHashSet.__proto__.new.call(this, equals, hashCode);
    ;
  }).prototype = _CustomKeyHashSet.prototype;
  ;
  _CustomKeyHashSet.prototype[_is__CustomKeyHashSet_default] = true;
  dart.setLibraryUri(_CustomKeyHashSet, "dart:collection");
  ;
  dart.defineExtensionMethods(_CustomKeyHashSet, ['contains']);
  return _CustomKeyHashSet;
});
collection._CustomKeyHashSet = collection._CustomKeyHashSet$();
;
const _source = dart.privateName(collection, "_source");
const _is_UnmodifiableListView_default = Symbol('_is_UnmodifiableListView_default');
collection.UnmodifiableListView$ = dart.generic(E => {
  class UnmodifiableListView extends _internal.UnmodifiableListBase$(E) {
    cast(R) {
      return new (collection.UnmodifiableListView$(R)).new(this[_source][$cast](R));
    }
    get length() {
      return this[_source][$length];
    }
    set length(value) {
      super.length = value;
    }
    _get(index) {
      return this[_source][$elementAt](index);
    }
  }
  (UnmodifiableListView.new = function(source) {
    this[_source] = source;
    ;
  }).prototype = UnmodifiableListView.prototype;
  ;
  UnmodifiableListView.prototype[_is_UnmodifiableListView_default] = true;
  ;
  dart.setGetterSignature(UnmodifiableListView, () => ({
    __proto__: dart.getGetters(UnmodifiableListView.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(UnmodifiableListView, "dart:collection");
  ;
  dart.defineExtensionMethods(UnmodifiableListView, ['cast', '_get']);
  dart.defineExtensionAccessors(UnmodifiableListView, ['length']);
  return UnmodifiableListView;
});
collection.UnmodifiableListView = collection.UnmodifiableListView$();
;
let C136;
let C137;
let C138;
let C139;
const _is_HashMap_default = Symbol('_is_HashMap_default');
collection.HashMap$ = dart.generic((K, V) => {
  class HashMap extends core.Object {
    static new(opts) {
      let t65, t65$, t65$0;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      if (isValidKey == null) {
        if (hashCode == null) {
          if (equals == null) {
            if (dart.wrapType(K) === dart.wrapType(core.String) || dart.wrapType(K) === dart.wrapType(core.int)) {
              return new (_js_helper.IdentityMap$(K, V)).new();
            }
            return new (_js_helper.LinkedMap$(K, V)).new();
          }
          hashCode = C136 || CT.C136;
        } else if ((C137 || CT.C137) === hashCode && (C138 || CT.C138) === equals) {
          return new (_js_helper.IdentityMap$(K, V)).new();
        }
        return new (_js_helper.CustomHashMap$(K, V)).new((t65 = equals, t65 == null ? C139 || CT.C139 : t65), hashCode);
      }
      return new (_js_helper.CustomKeyHashMap$(K, V)).new((t65$ = equals, t65$ == null ? C139 || CT.C139 : t65$), (t65$0 = hashCode, t65$0 == null ? C136 || CT.C136 : t65$0), isValidKey);
    }
    static from(other) {
      let result = new (_js_helper.LinkedMap$(K, V)).new();
      other[$forEach](dart.fn((k, v) => {
        result[$_set](K._check(k), V._check(v));
      }, dynamicAnddynamicToNull()));
      return collection.HashMap$(K, V)._check(result);
    }
    static of(other) {
      let t65;
      t65 = new (_js_helper.LinkedMap$(K, V)).new();
      t65[$addAll](other);
      return t65;
    }
    static fromIterable(iterable, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let map = new (_js_helper.LinkedMap$(K, V)).new();
      collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
      return collection.HashMap$(K, V)._check(map);
    }
    static fromIterables(keys, values) {
      let map = new (_js_helper.LinkedMap$(K, V)).new();
      collection.MapBase._fillMapWithIterables(map, keys, values);
      return collection.HashMap$(K, V)._check(map);
    }
    static fromEntries(entries) {
      let t65;
      t65 = new (_js_helper.LinkedMap$(K, V)).new();
      t65[$addEntries](entries);
      return t65;
    }
  }
  (HashMap[dart.mixinNew] = function() {
  }).prototype = HashMap.prototype;
  HashMap.prototype[dart.isMap] = true;
  ;
  HashMap.prototype[_is_HashMap_default] = true;
  HashMap[dart.implements] = () => [core.Map$(K, V)];
  dart.setLibraryUri(HashMap, "dart:collection");
  return HashMap;
});
collection.HashMap = collection.HashMap$();
;
const _is_HashSet_default = Symbol('_is_HashSet_default');
collection.HashSet$ = dart.generic(E => {
  class HashSet extends core.Object {
    static new(opts) {
      let t65, t65$, t65$0, t65$1;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      if (isValidKey == null) {
        if (hashCode == null) {
          if (equals == null) {
            if (dart.wrapType(E) === dart.wrapType(core.String) || dart.wrapType(E) === dart.wrapType(core.int)) {
              return new (collection._IdentityHashSet$(E)).new();
            }
            return new (collection._HashSet$(E)).new();
          }
          hashCode = C136 || CT.C136;
        } else if ((C137 || CT.C137) === hashCode && (C138 || CT.C138) === equals) {
          return new (collection._IdentityHashSet$(E)).new();
        }
        return new (collection._CustomHashSet$(E)).new((t65 = equals, t65 == null ? C139 || CT.C139 : t65), (t65$ = hashCode, t65$ == null ? C136 || CT.C136 : t65$));
      }
      return new (collection._CustomKeyHashSet$(E)).new((t65$0 = equals, t65$0 == null ? C139 || CT.C139 : t65$0), (t65$1 = hashCode, t65$1 == null ? C136 || CT.C136 : t65$1), isValidKey);
    }
    static from(elements) {
      let result = new (collection._HashSet$(E)).new();
      for (let e of elements) {
        result.add(E._check(e));
      }
      return result;
    }
    static of(elements) {
      let t65;
      t65 = new (collection._HashSet$(E)).new();
      t65.addAll(elements);
      return t65;
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (HashSet[dart.mixinNew] = function() {
  }).prototype = HashSet.prototype;
  ;
  HashSet.prototype[_is_HashSet_default] = true;
  HashSet[dart.implements] = () => [core.Set$(E)];
  dart.setLibraryUri(HashSet, "dart:collection");
  return HashSet;
});
collection.HashSet = collection.HashSet$();
;
const _is_IterableMixin_default = Symbol('_is_IterableMixin_default');
collection.IterableMixin$ = dart.generic(E => {
  let WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let EfficientLengthIterableOfE = () => (EfficientLengthIterableOfE = dart.constFn(_internal.EfficientLengthIterable$(E)))();
  let FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  let EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
  let TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
  let TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  let SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  let SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  let VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  class IterableMixin extends core.Object {
    cast(R) {
      return core.Iterable.castFrom(E, R, this);
    }
    map(T, f) {
      return _internal.MappedIterable$(E, T).new(this, f);
    }
    where(f) {
      return new (WhereIterableOfE()).new(this, f);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    expand(T, f) {
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    followedBy(other) {
      IterableOfE()._check(other);
      let self = this;
      if (EfficientLengthIterableOfE().is(self)) {
        return FollowedByIterableOfE().firstEfficient(self, other);
      }
      return new (FollowedByIterableOfE()).new(this, other);
    }
    contains(element) {
      for (let e of this) {
        if (dart.equals(e, element)) return true;
      }
      return false;
    }
    forEach(f) {
      for (let element of this)
        f(element);
    }
    reduce(combine) {
      EAndEToE()._check(combine);
      let iterator = this[$iterator];
      if (!dart.test(iterator.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let value = iterator.current;
      while (dart.test(iterator.moveNext())) {
        value = combine(value, iterator.current);
      }
      return value;
    }
    fold(T, initialValue, combine) {
      let value = initialValue;
      for (let element of this)
        value = combine(value, element);
      return value;
    }
    every(f) {
      for (let element of this) {
        if (!dart.test(f(element))) return false;
      }
      return true;
    }
    join(separator) {
      if (separator === void 0) separator = "";
      let iterator = this[$iterator];
      if (!dart.test(iterator.moveNext())) return "";
      let buffer = new core.StringBuffer.new();
      if (separator == null || separator === "") {
        do {
          buffer.write(dart.str(iterator.current));
        } while (dart.test(iterator.moveNext()));
      } else {
        buffer.write(dart.str(iterator.current));
        while (dart.test(iterator.moveNext())) {
          buffer.write(separator);
          buffer.write(dart.str(iterator.current));
        }
      }
      return buffer.toString();
    }
    any(test) {
      for (let element of this) {
        if (dart.test(test(element))) return true;
      }
      return false;
    }
    toList(opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      return ListOfE().from(this, {growable: growable});
    }
    toSet() {
      return LinkedHashSetOfE().from(this);
    }
    get length() {
      if (!!_internal.EfficientLengthIterable.is(this)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/iterable.dart", 105, 12, "this is! EfficientLengthIterable");
      let count = 0;
      let it = this[$iterator];
      while (dart.test(it.moveNext())) {
        count = count + 1;
      }
      return count;
    }
    get isEmpty() {
      return !dart.test(this[$iterator].moveNext());
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    take(count) {
      return TakeIterableOfE().new(this, count);
    }
    takeWhile(test) {
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    skip(count) {
      return SkipIterableOfE().new(this, count);
    }
    skipWhile(test) {
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    get first() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      return it.current;
    }
    get last() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = null;
      do {
        result = it.current;
      } while (dart.test(it.moveNext()));
      return result;
    }
    get single() {
      let it = this[$iterator];
      if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
      let result = it.current;
      if (dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.tooMany());
      return result;
    }
    firstWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      for (let element of this) {
        if (dart.test(test(element))) return element;
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let result = null;
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching) return result;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let result = null;
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          if (foundMatching) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching) return result;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      core.ArgumentError.checkNotNull(index, "index");
      core.RangeError.checkNotNegative(index, "index");
      let elementIndex = 0;
      for (let element of this) {
        if (index === elementIndex) return element;
        elementIndex = elementIndex + 1;
      }
      dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
    }
    toString() {
      return collection.IterableBase.iterableToShortString(this, "(", ")");
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (IterableMixin.new = function() {
    ;
  }).prototype = IterableMixin.prototype;
  IterableMixin.prototype[dart.isIterable] = true;
  ;
  IterableMixin.prototype[_is_IterableMixin_default] = true;
  IterableMixin[dart.implements] = () => [core.Iterable$(E)];
  ;
  dart.setGetterSignature(IterableMixin, () => ({
    __proto__: dart.getGetters(IterableMixin.__proto__),
    length: core.int,
    [$length]: core.int,
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E,
    single: E,
    [$single]: E
  }));
  dart.setLibraryUri(IterableMixin, "dart:collection");
  dart.defineExtensionMethods(IterableMixin, [
    'cast',
    'map',
    'where',
    'whereType',
    'expand',
    'followedBy',
    'contains',
    'forEach',
    'reduce',
    'fold',
    'every',
    'join',
    'any',
    'toList',
    'toSet',
    'take',
    'takeWhile',
    'skip',
    'skipWhile',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'elementAt',
    'toString'
  ]);
  dart.defineExtensionAccessors(IterableMixin, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single'
  ]);
  return IterableMixin;
});
collection.IterableMixin = collection.IterableMixin$();
;
const _state$ = dart.privateName(collection, "_state");
const _iterator$0 = dart.privateName(collection, "_iterator");
const _move = dart.privateName(collection, "_move");
const _is_HasNextIterator_default = Symbol('_is_HasNextIterator_default');
collection.HasNextIterator$ = dart.generic(E => {
  class HasNextIterator extends core.Object {
    get hasNext() {
      if (this[_state$] === 2) this[_move]();
      return this[_state$] === 0;
    }
    next() {
      if (!dart.test(this.hasNext)) dart.throw(new core.StateError.new("No more elements"));
      if (!(this[_state$] === 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/iterator.dart", 32, 12, "_state == _HAS_NEXT_AND_NEXT_IN_CURRENT");
      let result = this[_iterator$0].current;
      this[_move]();
      return result;
    }
    [_move]() {
      if (dart.test(this[_iterator$0].moveNext())) {
        this[_state$] = 0;
      } else {
        this[_state$] = 1;
      }
    }
  }
  (HasNextIterator.new = function(_iterator) {
    this[_state$] = 2;
    this[_iterator$0] = _iterator;
    ;
  }).prototype = HasNextIterator.prototype;
  ;
  HasNextIterator.prototype[_is_HasNextIterator_default] = true;
  ;
  dart.setGetterSignature(HasNextIterator, () => ({
    __proto__: dart.getGetters(HasNextIterator.__proto__),
    hasNext: core.bool
  }));
  dart.setLibraryUri(HasNextIterator, "dart:collection");
  ;
  return HasNextIterator;
});
collection.HasNextIterator = collection.HasNextIterator$();
dart.defineLazy(collection.HasNextIterator, {
  /*collection.HasNextIterator._HAS_NEXT_AND_NEXT_IN_CURRENT*/get _HAS_NEXT_AND_NEXT_IN_CURRENT() {
    return 0;
  },
  /*collection.HasNextIterator._NO_NEXT*/get _NO_NEXT() {
    return 1;
  },
  /*collection.HasNextIterator._NOT_MOVED_YET*/get _NOT_MOVED_YET() {
    return 2;
  }
});
;
const _is_LinkedHashMap_default = Symbol('_is_LinkedHashMap_default');
collection.LinkedHashMap$ = dart.generic((K, V) => {
  class LinkedHashMap extends core.Object {
    static new(opts) {
      let t65, t65$, t65$0;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      if (isValidKey == null) {
        if (hashCode == null) {
          if (equals == null) {
            if (dart.wrapType(K) === dart.wrapType(core.String) || dart.wrapType(K) === dart.wrapType(core.int)) {
              return new (_js_helper.IdentityMap$(K, V)).new();
            }
            return new (_js_helper.LinkedMap$(K, V)).new();
          }
          hashCode = C136 || CT.C136;
        } else if ((C137 || CT.C137) === hashCode && (C138 || CT.C138) === equals) {
          return new (_js_helper.IdentityMap$(K, V)).new();
        }
        return new (_js_helper.CustomHashMap$(K, V)).new((t65 = equals, t65 == null ? C139 || CT.C139 : t65), hashCode);
      }
      return new (_js_helper.CustomKeyHashMap$(K, V)).new((t65$ = equals, t65$ == null ? C139 || CT.C139 : t65$), (t65$0 = hashCode, t65$0 == null ? C136 || CT.C136 : t65$0), isValidKey);
    }
    static from(other) {
      let result = new (_js_helper.LinkedMap$(K, V)).new();
      other[$forEach](dart.fn((k, v) => {
        result[$_set](K._check(k), V._check(v));
      }, dynamicAnddynamicToNull()));
      return result;
    }
    static of(other) {
      let t65;
      t65 = new (_js_helper.LinkedMap$(K, V)).new();
      t65[$addAll](other);
      return t65;
    }
    static fromIterable(iterable, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let map = new (_js_helper.LinkedMap$(K, V)).new();
      collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
      return map;
    }
    static fromIterables(keys, values) {
      let map = new (_js_helper.LinkedMap$(K, V)).new();
      collection.MapBase._fillMapWithIterables(map, keys, values);
      return map;
    }
    static fromEntries(entries) {
      let t65;
      return collection.LinkedHashMap$(K, V)._check((t65 = new (_js_helper.LinkedMap$(K, V)).new(), t65[$addEntries](entries), t65));
    }
  }
  (LinkedHashMap[dart.mixinNew] = function() {
  }).prototype = LinkedHashMap.prototype;
  LinkedHashMap.prototype[dart.isMap] = true;
  ;
  LinkedHashMap.prototype[_is_LinkedHashMap_default] = true;
  LinkedHashMap[dart.implements] = () => [core.Map$(K, V)];
  dart.setLibraryUri(LinkedHashMap, "dart:collection");
  return LinkedHashMap;
});
collection.LinkedHashMap = collection.LinkedHashMap$();
;
const _is_LinkedHashSet_default = Symbol('_is_LinkedHashSet_default');
collection.LinkedHashSet$ = dart.generic(E => {
  class LinkedHashSet extends core.Object {
    static new(opts) {
      let t65, t65$, t65$0, t65$1;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      if (isValidKey == null) {
        if (hashCode == null) {
          if (equals == null) {
            if (dart.wrapType(E) === dart.wrapType(core.String) || dart.wrapType(E) === dart.wrapType(core.int)) {
              return new (collection._IdentityHashSet$(E)).new();
            }
            return new (collection._HashSet$(E)).new();
          }
          hashCode = C136 || CT.C136;
        } else if ((C137 || CT.C137) === hashCode && (C138 || CT.C138) === equals) {
          return new (collection._IdentityHashSet$(E)).new();
        }
        return new (collection._CustomHashSet$(E)).new((t65 = equals, t65 == null ? C139 || CT.C139 : t65), (t65$ = hashCode, t65$ == null ? C136 || CT.C136 : t65$));
      }
      return new (collection._CustomKeyHashSet$(E)).new((t65$0 = equals, t65$0 == null ? C139 || CT.C139 : t65$0), (t65$1 = hashCode, t65$1 == null ? C136 || CT.C136 : t65$1), isValidKey);
    }
    static from(elements) {
      let result = new (collection._HashSet$(E)).new();
      for (let element of elements) {
        result.add(E._check(element));
      }
      return result;
    }
    static of(elements) {
      let t65;
      t65 = new (collection._HashSet$(E)).new();
      t65.addAll(elements);
      return t65;
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (LinkedHashSet[dart.mixinNew] = function() {
  }).prototype = LinkedHashSet.prototype;
  ;
  LinkedHashSet.prototype[_is_LinkedHashSet_default] = true;
  LinkedHashSet[dart.implements] = () => [core.Set$(E)];
  dart.setLibraryUri(LinkedHashSet, "dart:collection");
  return LinkedHashSet;
});
collection.LinkedHashSet = collection.LinkedHashSet$();
;
const _modificationCount = dart.privateName(collection, "_modificationCount");
const _length$0 = dart.privateName(collection, "_length");
const _first = dart.privateName(collection, "_first");
const _insertBefore = dart.privateName(collection, "_insertBefore");
const _list$0 = dart.privateName(collection, "_list");
const _unlink = dart.privateName(collection, "_unlink");
const _next$2 = dart.privateName(collection, "_next");
const _previous$2 = dart.privateName(collection, "_previous");
const _is_LinkedList_default$ = Symbol('_is_LinkedList_default');
collection.LinkedList$ = dart.generic(E => {
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let _LinkedListIteratorOfE = () => (_LinkedListIteratorOfE = dart.constFn(collection._LinkedListIterator$(E)))();
  class LinkedList extends core.Iterable$(E) {
    addFirst(entry) {
      E._check(entry);
      this[_insertBefore](this[_first], entry, {updateFirst: true});
      this[_first] = entry;
    }
    add(entry) {
      E._check(entry);
      this[_insertBefore](this[_first], entry, {updateFirst: false});
    }
    addAll(entries) {
      IterableOfE()._check(entries);
      entries[$forEach](dart.bind(this, 'add'));
    }
    remove(entry) {
      E._check(entry);
      if (!dart.equals(entry[_list$0], this)) return false;
      this[_unlink](entry);
      return true;
    }
    get iterator() {
      return new (_LinkedListIteratorOfE()).new(this);
    }
    get length() {
      return this[_length$0];
    }
    clear() {
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      if (dart.test(this.isEmpty)) return;
      let next = this[_first];
      do {
        let entry = next;
        next = entry[_next$2];
        entry[_next$2] = entry[_previous$2] = entry[_list$0] = null;
      } while (next != this[_first]);
      this[_first] = null;
      this[_length$0] = 0;
    }
    get first() {
      if (dart.test(this.isEmpty)) {
        dart.throw(new core.StateError.new("No such element"));
      }
      return this[_first];
    }
    get last() {
      if (dart.test(this.isEmpty)) {
        dart.throw(new core.StateError.new("No such element"));
      }
      return this[_first][_previous$2];
    }
    get single() {
      if (dart.test(this.isEmpty)) {
        dart.throw(new core.StateError.new("No such element"));
      }
      if (dart.notNull(this[_length$0]) > 1) {
        dart.throw(new core.StateError.new("Too many elements"));
      }
      return this[_first];
    }
    forEach(action) {
      let modificationCount = this[_modificationCount];
      if (dart.test(this.isEmpty)) return;
      let current = this[_first];
      do {
        action(current);
        if (modificationCount != this[_modificationCount]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        current = current[_next$2];
      } while (current != this[_first]);
    }
    get isEmpty() {
      return this[_length$0] === 0;
    }
    [_insertBefore](entry, newEntry, opts) {
      E._check(entry);
      E._check(newEntry);
      let updateFirst = opts && 'updateFirst' in opts ? opts.updateFirst : null;
      if (newEntry.list != null) {
        dart.throw(new core.StateError.new("LinkedListEntry is already in a LinkedList"));
      }
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      newEntry[_list$0] = this;
      if (dart.test(this.isEmpty)) {
        if (!(entry == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/linked_list.dart", 141, 14, "entry == null");
        newEntry[_previous$2] = newEntry[_next$2] = newEntry;
        this[_first] = newEntry;
        this[_length$0] = dart.notNull(this[_length$0]) + 1;
        return;
      }
      let predecessor = entry[_previous$2];
      let successor = entry;
      newEntry[_previous$2] = predecessor;
      newEntry[_next$2] = successor;
      predecessor[_next$2] = newEntry;
      successor[_previous$2] = newEntry;
      if (dart.test(updateFirst) && entry == this[_first]) {
        this[_first] = newEntry;
      }
      this[_length$0] = dart.notNull(this[_length$0]) + 1;
    }
    [_unlink](entry) {
      E._check(entry);
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      entry[_next$2][_previous$2] = entry[_previous$2];
      let next = entry[_previous$2][_next$2] = entry[_next$2];
      this[_length$0] = dart.notNull(this[_length$0]) - 1;
      entry[_list$0] = entry[_next$2] = entry[_previous$2] = null;
      if (dart.test(this.isEmpty)) {
        this[_first] = null;
      } else if (entry == this[_first]) {
        this[_first] = next;
      }
    }
  }
  (LinkedList.new = function() {
    this[_modificationCount] = 0;
    this[_length$0] = 0;
    this[_first] = null;
    LinkedList.__proto__.new.call(this);
    ;
  }).prototype = LinkedList.prototype;
  ;
  LinkedList.prototype[_is_LinkedList_default$] = true;
  ;
  dart.setGetterSignature(LinkedList, () => ({
    __proto__: dart.getGetters(LinkedList.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(LinkedList, "dart:collection");
  ;
  dart.defineExtensionMethods(LinkedList, ['forEach']);
  dart.defineExtensionAccessors(LinkedList, [
    'iterator',
    'length',
    'first',
    'last',
    'single',
    'isEmpty'
  ]);
  return LinkedList;
});
collection.LinkedList = collection.LinkedList$();
;
const _current$1 = dart.privateName(collection, "_current");
const _visitedFirst = dart.privateName(collection, "_visitedFirst");
const _is__LinkedListIterator_default$ = Symbol('_is__LinkedListIterator_default');
collection._LinkedListIterator$ = dart.generic(E => {
  class _LinkedListIterator extends core.Object {
    get current() {
      return this[_current$1];
    }
    moveNext() {
      if (this[_modificationCount] != this[_list$0][_modificationCount]) {
        dart.throw(new core.ConcurrentModificationError.new(this));
      }
      if (dart.test(this[_list$0].isEmpty) || dart.test(this[_visitedFirst]) && this[_next$2] == this[_list$0].first) {
        this[_current$1] = null;
        return false;
      }
      this[_visitedFirst] = true;
      this[_current$1] = E._check(this[_next$2]);
      this[_next$2] = this[_next$2][_next$2];
      return true;
    }
  }
  (_LinkedListIterator.new = function(list) {
    this[_current$1] = null;
    this[_list$0] = list;
    this[_modificationCount] = list[_modificationCount];
    this[_next$2] = list[_first];
    this[_visitedFirst] = false;
    ;
  }).prototype = _LinkedListIterator.prototype;
  ;
  _LinkedListIterator.prototype[_is__LinkedListIterator_default$] = true;
  _LinkedListIterator[dart.implements] = () => [core.Iterator$(E)];
  ;
  dart.setGetterSignature(_LinkedListIterator, () => ({
    __proto__: dart.getGetters(_LinkedListIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(_LinkedListIterator, "dart:collection");
  ;
  return _LinkedListIterator;
});
collection._LinkedListIterator = collection._LinkedListIterator$();
;
const _is_LinkedListEntry_default$ = Symbol('_is_LinkedListEntry_default');
const _list$1 = dart.privateName(collection, "LinkedListEntry._list");
const _next$3 = dart.privateName(collection, "LinkedListEntry._next");
const _previous$3 = dart.privateName(collection, "LinkedListEntry._previous");
collection.LinkedListEntry$ = dart.generic(E => {
  let LinkedListOfE = () => (LinkedListOfE = dart.constFn(collection.LinkedList$(E)))();
  class LinkedListEntry extends core.Object {
    get [_list$0]() {
      return this[_list$1];
    }
    set [_list$0](value) {
      this[_list$1] = LinkedListOfE()._check(value);
    }
    get [_next$2]() {
      return this[_next$3];
    }
    set [_next$2](value) {
      this[_next$3] = E._check(value);
    }
    get [_previous$2]() {
      return this[_previous$3];
    }
    set [_previous$2](value) {
      this[_previous$3] = E._check(value);
    }
    get list() {
      return this[_list$0];
    }
    unlink() {
      this[_list$0][_unlink](E._check(this));
    }
    get next() {
      if (this[_list$0] == null || this[_list$0].first == this[_next$2]) return null;
      return this[_next$2];
    }
    get previous() {
      if (this[_list$0] == null || this === this[_list$0].first) return null;
      return this[_previous$2];
    }
    insertAfter(entry) {
      E._check(entry);
      this[_list$0][_insertBefore](this[_next$2], entry, {updateFirst: false});
    }
    insertBefore(entry) {
      E._check(entry);
      this[_list$0][_insertBefore](E._check(this), entry, {updateFirst: true});
    }
  }
  (LinkedListEntry.new = function() {
    this[_list$1] = null;
    this[_next$3] = null;
    this[_previous$3] = null;
    ;
  }).prototype = LinkedListEntry.prototype;
  ;
  LinkedListEntry.prototype[_is_LinkedListEntry_default$] = true;
  ;
  dart.setGetterSignature(LinkedListEntry, () => ({
    __proto__: dart.getGetters(LinkedListEntry.__proto__),
    list: collection.LinkedList$(E),
    next: E,
    previous: E
  }));
  dart.setLibraryUri(LinkedListEntry, "dart:collection");
  ;
  return LinkedListEntry;
});
collection.LinkedListEntry = collection.LinkedListEntry$();
;
const _is__MapBaseValueIterable_default = Symbol('_is__MapBaseValueIterable_default');
collection._MapBaseValueIterable$ = dart.generic((K, V) => {
  let _MapBaseValueIteratorOfK$V = () => (_MapBaseValueIteratorOfK$V = dart.constFn(collection._MapBaseValueIterator$(K, V)))();
  class _MapBaseValueIterable extends _internal.EfficientLengthIterable$(V) {
    get length() {
      return this[_map$4][$length];
    }
    get isEmpty() {
      return this[_map$4][$isEmpty];
    }
    get isNotEmpty() {
      return this[_map$4][$isNotEmpty];
    }
    get first() {
      return this[_map$4][$_get](this[_map$4][$keys][$first]);
    }
    get single() {
      return this[_map$4][$_get](this[_map$4][$keys][$single]);
    }
    get last() {
      return this[_map$4][$_get](this[_map$4][$keys][$last]);
    }
    get iterator() {
      return new (_MapBaseValueIteratorOfK$V()).new(this[_map$4]);
    }
  }
  (_MapBaseValueIterable.new = function(_map) {
    this[_map$4] = _map;
    _MapBaseValueIterable.__proto__.new.call(this);
    ;
  }).prototype = _MapBaseValueIterable.prototype;
  ;
  _MapBaseValueIterable.prototype[_is__MapBaseValueIterable_default] = true;
  dart.setGetterSignature(_MapBaseValueIterable, () => ({
    __proto__: dart.getGetters(_MapBaseValueIterable.__proto__),
    iterator: core.Iterator$(V),
    [$iterator]: core.Iterator$(V)
  }));
  dart.setLibraryUri(_MapBaseValueIterable, "dart:collection");
  ;
  dart.defineExtensionAccessors(_MapBaseValueIterable, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'single',
    'last',
    'iterator'
  ]);
  return _MapBaseValueIterable;
});
collection._MapBaseValueIterable = collection._MapBaseValueIterable$();
;
const _keys = dart.privateName(collection, "_keys");
const _is__MapBaseValueIterator_default = Symbol('_is__MapBaseValueIterator_default');
collection._MapBaseValueIterator$ = dart.generic((K, V) => {
  class _MapBaseValueIterator extends core.Object {
    moveNext() {
      if (dart.test(this[_keys].moveNext())) {
        this[_current$1] = this[_map$4][$_get](this[_keys].current);
        return true;
      }
      this[_current$1] = null;
      return false;
    }
    get current() {
      return this[_current$1];
    }
  }
  (_MapBaseValueIterator.new = function(map) {
    this[_current$1] = null;
    this[_map$4] = map;
    this[_keys] = map[$keys][$iterator];
    ;
  }).prototype = _MapBaseValueIterator.prototype;
  ;
  _MapBaseValueIterator.prototype[_is__MapBaseValueIterator_default] = true;
  _MapBaseValueIterator[dart.implements] = () => [core.Iterator$(V)];
  ;
  dart.setGetterSignature(_MapBaseValueIterator, () => ({
    __proto__: dart.getGetters(_MapBaseValueIterator.__proto__),
    current: V
  }));
  dart.setLibraryUri(_MapBaseValueIterator, "dart:collection");
  ;
  return _MapBaseValueIterator;
});
collection._MapBaseValueIterator = collection._MapBaseValueIterator$();
;
const _is_MapView_default = Symbol('_is_MapView_default');
const _map$8 = dart.privateName(collection, "MapView._map");
collection.MapView$ = dart.generic((K, V) => {
  let MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  let MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
  let IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
  let KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  let VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  class MapView extends core.Object {
    get [_map$4]() {
      return this[_map$8];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    cast(RK, RV) {
      return this[_map$4][$cast](RK, RV);
    }
    _get(key) {
      return this[_map$4][$_get](key);
    }
    _set(key, value$) {
      let value = value$;
      K._check(key);
      V._check(value);
      this[_map$4][$_set](key, value);
      return value$;
    }
    addAll(other) {
      MapOfK$V()._check(other);
      this[_map$4][$addAll](other);
    }
    clear() {
      this[_map$4][$clear]();
    }
    putIfAbsent(key, ifAbsent) {
      K._check(key);
      VoidToV()._check(ifAbsent);
      return this[_map$4][$putIfAbsent](key, ifAbsent);
    }
    containsKey(key) {
      return this[_map$4][$containsKey](key);
    }
    containsValue(value) {
      return this[_map$4][$containsValue](value);
    }
    forEach(action) {
      this[_map$4][$forEach](action);
    }
    get isEmpty() {
      return this[_map$4][$isEmpty];
    }
    get isNotEmpty() {
      return this[_map$4][$isNotEmpty];
    }
    get length() {
      return this[_map$4][$length];
    }
    get keys() {
      return this[_map$4][$keys];
    }
    remove(key) {
      return this[_map$4][$remove](key);
    }
    toString() {
      return dart.toString(this[_map$4]);
    }
    get values() {
      return this[_map$4][$values];
    }
    get entries() {
      return this[_map$4][$entries];
    }
    addEntries(entries) {
      IterableOfMapEntryOfK$V()._check(entries);
      this[_map$4][$addEntries](entries);
    }
    map(K2, V2, transform) {
      return this[_map$4][$map](K2, V2, transform);
    }
    update(key, update, opts) {
      K._check(key);
      VToV()._check(update);
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToV()._check(ifAbsent);
      return this[_map$4][$update](key, update, {ifAbsent: ifAbsent});
    }
    updateAll(update) {
      KAndVToV()._check(update);
      this[_map$4][$updateAll](update);
    }
    removeWhere(test) {
      this[_map$4][$removeWhere](test);
    }
  }
  (MapView.new = function(map) {
    this[_map$8] = map;
    ;
  }).prototype = MapView.prototype;
  MapView.prototype[dart.isMap] = true;
  ;
  MapView.prototype[_is_MapView_default] = true;
  MapView[dart.implements] = () => [core.Map$(K, V)];
  ;
  dart.setGetterSignature(MapView, () => ({
    __proto__: dart.getGetters(MapView.__proto__),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    length: core.int,
    [$length]: core.int,
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K),
    values: core.Iterable$(V),
    [$values]: core.Iterable$(V),
    entries: core.Iterable$(core.MapEntry$(K, V)),
    [$entries]: core.Iterable$(core.MapEntry$(K, V))
  }));
  dart.setLibraryUri(MapView, "dart:collection");
  ;
  dart.defineExtensionMethods(MapView, [
    'cast',
    '_get',
    '_set',
    'addAll',
    'clear',
    'putIfAbsent',
    'containsKey',
    'containsValue',
    'forEach',
    'remove',
    'toString',
    'addEntries',
    'map',
    'update',
    'updateAll',
    'removeWhere'
  ]);
  dart.defineExtensionAccessors(MapView, [
    'isEmpty',
    'isNotEmpty',
    'length',
    'keys',
    'values',
    'entries'
  ]);
  return MapView;
});
collection.MapView = collection.MapView$();
;
const _is_UnmodifiableMapView_default = Symbol('_is_UnmodifiableMapView_default');
collection.UnmodifiableMapView$ = dart.generic((K, V) => {
  const MapView__UnmodifiableMapMixin$36 = class MapView__UnmodifiableMapMixin extends collection.MapView$(K, V) {};
  (MapView__UnmodifiableMapMixin$36.new = function(map) {
    MapView__UnmodifiableMapMixin$36.__proto__.new.call(this, map);
  }).prototype = MapView__UnmodifiableMapMixin$36.prototype;
  dart.applyMixin(MapView__UnmodifiableMapMixin$36, collection._UnmodifiableMapMixin$(K, V));
  class UnmodifiableMapView extends MapView__UnmodifiableMapMixin$36 {
    cast(RK, RV) {
      return new (collection.UnmodifiableMapView$(RK, RV)).new(this[_map$4][$cast](RK, RV));
    }
  }
  (UnmodifiableMapView.new = function(map) {
    UnmodifiableMapView.__proto__.new.call(this, map);
    ;
  }).prototype = UnmodifiableMapView.prototype;
  ;
  UnmodifiableMapView.prototype[_is_UnmodifiableMapView_default] = true;
  dart.setLibraryUri(UnmodifiableMapView, "dart:collection");
  dart.defineExtensionMethods(UnmodifiableMapView, ['cast']);
  return UnmodifiableMapView;
});
collection.UnmodifiableMapView = collection.UnmodifiableMapView$();
;
const _is_Queue_default = Symbol('_is_Queue_default');
collection.Queue$ = dart.generic(E => {
  class Queue extends core.Object {
    static castFrom(S, T, source) {
      return new (_internal.CastQueue$(S, T)).new(source);
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (Queue[dart.mixinNew] = function() {
  }).prototype = Queue.prototype;
  ;
  Queue.prototype[_is_Queue_default] = true;
  Queue[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(Queue, "dart:collection");
  return Queue;
});
collection.Queue = collection.Queue$();
;
const _previousLink = dart.privateName(collection, "_previousLink");
const _nextLink = dart.privateName(collection, "_nextLink");
const _link = dart.privateName(collection, "_link");
const _is__DoubleLink_default = Symbol('_is__DoubleLink_default');
const _previousLink$ = dart.privateName(collection, "_DoubleLink._previousLink");
const _nextLink$ = dart.privateName(collection, "_DoubleLink._nextLink");
collection._DoubleLink$ = dart.generic(Link => {
  class _DoubleLink extends core.Object {
    get [_previousLink]() {
      return this[_previousLink$];
    }
    set [_previousLink](value) {
      this[_previousLink$] = Link._check(value);
    }
    get [_nextLink]() {
      return this[_nextLink$];
    }
    set [_nextLink](value) {
      this[_nextLink$] = Link._check(value);
    }
    [_link](previous, next) {
      this[_nextLink] = next;
      this[_previousLink] = previous;
      if (previous != null) previous[_nextLink] = Link._check(this);
      if (next != null) next[_previousLink] = Link._check(this);
    }
    [_unlink]() {
      if (this[_previousLink] != null) this[_previousLink][_nextLink] = this[_nextLink];
      if (this[_nextLink] != null) this[_nextLink][_previousLink] = this[_previousLink];
      this[_nextLink] = null;
      this[_previousLink] = null;
    }
  }
  (_DoubleLink.new = function() {
    this[_previousLink$] = null;
    this[_nextLink$] = null;
    ;
  }).prototype = _DoubleLink.prototype;
  ;
  _DoubleLink.prototype[_is__DoubleLink_default] = true;
  ;
  dart.setLibraryUri(_DoubleLink, "dart:collection");
  ;
  return _DoubleLink;
});
collection._DoubleLink = collection._DoubleLink$();
;
const _is_DoubleLinkedQueueEntry_default = Symbol('_is_DoubleLinkedQueueEntry_default');
const element$ = dart.privateName(collection, "DoubleLinkedQueueEntry.element");
collection.DoubleLinkedQueueEntry$ = dart.generic(E => {
  let DoubleLinkedQueueEntryOfE = () => (DoubleLinkedQueueEntryOfE = dart.constFn(collection.DoubleLinkedQueueEntry$(E)))();
  class DoubleLinkedQueueEntry extends collection._DoubleLink {
    get element() {
      return this[element$];
    }
    set element(value) {
      this[element$] = E._check(value);
    }
    append(e) {
      E._check(e);
      new (DoubleLinkedQueueEntryOfE()).new(e)[_link](this, this[_nextLink]);
    }
    prepend(e) {
      E._check(e);
      new (DoubleLinkedQueueEntryOfE()).new(e)[_link](this[_previousLink], this);
    }
    remove() {
      this[_unlink]();
      return this.element;
    }
    previousEntry() {
      return this[_previousLink];
    }
    nextEntry() {
      return this[_nextLink];
    }
  }
  (DoubleLinkedQueueEntry.new = function(element) {
    this[element$] = element;
    DoubleLinkedQueueEntry.__proto__.new.call(this);
    ;
  }).prototype = DoubleLinkedQueueEntry.prototype;
  ;
  DoubleLinkedQueueEntry.prototype[_is_DoubleLinkedQueueEntry_default] = true;
  ;
  dart.setLibraryUri(DoubleLinkedQueueEntry, "dart:collection");
  ;
  return DoubleLinkedQueueEntry;
}, E => {
  dart.setBaseClass(collection.DoubleLinkedQueueEntry$(E), collection._DoubleLink$(collection.DoubleLinkedQueueEntry$(E)));
});
collection.DoubleLinkedQueueEntry = collection.DoubleLinkedQueueEntry$();
;
const _queue$ = dart.privateName(collection, "_queue");
const _append = dart.privateName(collection, "_append");
const _prepend = dart.privateName(collection, "_prepend");
const _element = dart.privateName(collection, "_element");
const _asNonSentinelEntry = dart.privateName(collection, "_asNonSentinelEntry");
const _is__DoubleLinkedQueueEntry_default = Symbol('_is__DoubleLinkedQueueEntry_default');
collection._DoubleLinkedQueueEntry$ = dart.generic(E => {
  let _DoubleLinkedQueueElementOfE = () => (_DoubleLinkedQueueElementOfE = dart.constFn(collection._DoubleLinkedQueueElement$(E)))();
  let _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
  class _DoubleLinkedQueueEntry extends collection.DoubleLinkedQueueEntry$(E) {
    [_append](e) {
      E._check(e);
      new (_DoubleLinkedQueueElementOfE()).new(e, this[_queue$])[_link](this, this[_nextLink]);
    }
    [_prepend](e) {
      E._check(e);
      new (_DoubleLinkedQueueElementOfE()).new(e, this[_queue$])[_link](this[_previousLink], this);
    }
    get [_element]() {
      return this.element;
    }
    nextEntry() {
      let entry = _DoubleLinkedQueueEntryOfE()._check(this[_nextLink]);
      return entry[_asNonSentinelEntry]();
    }
    previousEntry() {
      let entry = _DoubleLinkedQueueEntryOfE()._check(this[_previousLink]);
      return entry[_asNonSentinelEntry]();
    }
  }
  (_DoubleLinkedQueueEntry.new = function(element, _queue) {
    this[_queue$] = _queue;
    _DoubleLinkedQueueEntry.__proto__.new.call(this, element);
    ;
  }).prototype = _DoubleLinkedQueueEntry.prototype;
  ;
  _DoubleLinkedQueueEntry.prototype[_is__DoubleLinkedQueueEntry_default] = true;
  ;
  dart.setGetterSignature(_DoubleLinkedQueueEntry, () => ({
    __proto__: dart.getGetters(_DoubleLinkedQueueEntry.__proto__),
    [_element]: E
  }));
  dart.setLibraryUri(_DoubleLinkedQueueEntry, "dart:collection");
  ;
  return _DoubleLinkedQueueEntry;
});
collection._DoubleLinkedQueueEntry = collection._DoubleLinkedQueueEntry$();
;
const _elementCount = dart.privateName(collection, "_elementCount");
const _remove = dart.privateName(collection, "_remove");
const _is__DoubleLinkedQueueElement_default = Symbol('_is__DoubleLinkedQueueElement_default');
collection._DoubleLinkedQueueElement$ = dart.generic(E => {
  class _DoubleLinkedQueueElement extends collection._DoubleLinkedQueueEntry$(E) {
    append(e) {
      let t65;
      E._check(e);
      this[_append](e);
      if (this[_queue$] != null) {
        t65 = this[_queue$];
        t65[_elementCount] = dart.notNull(t65[_elementCount]) + 1;
      }
    }
    prepend(e) {
      let t65;
      E._check(e);
      this[_prepend](e);
      if (this[_queue$] != null) {
        t65 = this[_queue$];
        t65[_elementCount] = dart.notNull(t65[_elementCount]) + 1;
      }
    }
    [_remove]() {
      this[_queue$] = null;
      this[_unlink]();
      return this.element;
    }
    remove() {
      let t65;
      if (this[_queue$] != null) {
        t65 = this[_queue$];
        t65[_elementCount] = dart.notNull(t65[_elementCount]) - 1;
      }
      return this[_remove]();
    }
    [_asNonSentinelEntry]() {
      return this;
    }
  }
  (_DoubleLinkedQueueElement.new = function(element, queue) {
    _DoubleLinkedQueueElement.__proto__.new.call(this, element, queue);
    ;
  }).prototype = _DoubleLinkedQueueElement.prototype;
  ;
  _DoubleLinkedQueueElement.prototype[_is__DoubleLinkedQueueElement_default] = true;
  ;
  dart.setLibraryUri(_DoubleLinkedQueueElement, "dart:collection");
  return _DoubleLinkedQueueElement;
});
collection._DoubleLinkedQueueElement = collection._DoubleLinkedQueueElement$();
;
const _is__DoubleLinkedQueueSentinel_default = Symbol('_is__DoubleLinkedQueueSentinel_default');
collection._DoubleLinkedQueueSentinel$ = dart.generic(E => {
  class _DoubleLinkedQueueSentinel extends collection._DoubleLinkedQueueEntry$(E) {
    [_asNonSentinelEntry]() {
      return null;
    }
    [_remove]() {
      dart.throw(_internal.IterableElementError.noElement());
    }
    get [_element]() {
      dart.throw(_internal.IterableElementError.noElement());
    }
  }
  (_DoubleLinkedQueueSentinel.new = function(queue) {
    _DoubleLinkedQueueSentinel.__proto__.new.call(this, null, queue);
    this[_previousLink] = this;
    this[_nextLink] = this;
  }).prototype = _DoubleLinkedQueueSentinel.prototype;
  ;
  _DoubleLinkedQueueSentinel.prototype[_is__DoubleLinkedQueueSentinel_default] = true;
  ;
  dart.setLibraryUri(_DoubleLinkedQueueSentinel, "dart:collection");
  return _DoubleLinkedQueueSentinel;
});
collection._DoubleLinkedQueueSentinel = collection._DoubleLinkedQueueSentinel$();
;
const _sentinel = dart.privateName(collection, "_sentinel");
const _is_DoubleLinkedQueue_default = Symbol('_is_DoubleLinkedQueue_default');
collection.DoubleLinkedQueue$ = dart.generic(E => {
  let _DoubleLinkedQueueSentinelOfE = () => (_DoubleLinkedQueueSentinelOfE = dart.constFn(collection._DoubleLinkedQueueSentinel$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
  let _DoubleLinkedQueueElementOfE = () => (_DoubleLinkedQueueElementOfE = dart.constFn(collection._DoubleLinkedQueueElement$(E)))();
  let _DoubleLinkedQueueIteratorOfE = () => (_DoubleLinkedQueueIteratorOfE = dart.constFn(collection._DoubleLinkedQueueIterator$(E)))();
  class DoubleLinkedQueue extends core.Iterable$(E) {
    static from(elements) {
      let list = new (collection.DoubleLinkedQueue$(E)).new();
      for (let e of elements) {
        list.addLast(E._check(e));
      }
      return collection.DoubleLinkedQueue$(E)._check(list);
    }
    static of(elements) {
      let t65;
      t65 = new (collection.DoubleLinkedQueue$(E)).new();
      t65.addAll(elements);
      return t65;
    }
    cast(R) {
      return collection.Queue.castFrom(E, R, this);
    }
    get length() {
      return this[_elementCount];
    }
    addLast(value) {
      E._check(value);
      this[_sentinel][_prepend](value);
      this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
    }
    addFirst(value) {
      E._check(value);
      this[_sentinel][_append](value);
      this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
    }
    add(value) {
      E._check(value);
      this[_sentinel][_prepend](value);
      this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
    }
    addAll(iterable) {
      IterableOfE()._check(iterable);
      for (let value of iterable) {
        this[_sentinel][_prepend](value);
        this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
      }
    }
    removeLast() {
      let lastEntry = _DoubleLinkedQueueEntryOfE()._check(this[_sentinel][_previousLink]);
      let result = lastEntry[_remove]();
      this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
      return result;
    }
    removeFirst() {
      let firstEntry = _DoubleLinkedQueueEntryOfE()._check(this[_sentinel][_nextLink]);
      let result = firstEntry[_remove]();
      this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
      return result;
    }
    remove(o) {
      let entry = _DoubleLinkedQueueEntryOfE()._check(this[_sentinel][_nextLink]);
      while (entry != this[_sentinel]) {
        let equals = dart.equals(entry[_element], o);
        if (this !== entry[_queue$]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (equals) {
          entry[_remove]();
          this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
          return true;
        }
        entry = _DoubleLinkedQueueEntryOfE()._check(entry[_nextLink]);
      }
      return false;
    }
    [_filter](test, removeMatching) {
      let entry = _DoubleLinkedQueueEntryOfE()._check(this[_sentinel][_nextLink]);
      while (entry != this[_sentinel]) {
        let matches = test(entry[_element]);
        if (this !== entry[_queue$]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        let next = _DoubleLinkedQueueEntryOfE()._check(entry[_nextLink]);
        if (removeMatching == matches) {
          entry[_remove]();
          this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
        }
        entry = next;
      }
    }
    removeWhere(test) {
      this[_filter](test, true);
    }
    retainWhere(test) {
      this[_filter](test, false);
    }
    get first() {
      let firstEntry = _DoubleLinkedQueueEntryOfE()._check(this[_sentinel][_nextLink]);
      return firstEntry[_element];
    }
    get last() {
      let lastEntry = _DoubleLinkedQueueEntryOfE()._check(this[_sentinel][_previousLink]);
      return lastEntry[_element];
    }
    get single() {
      if (this[_sentinel][_nextLink] == this[_sentinel][_previousLink]) {
        let entry = _DoubleLinkedQueueEntryOfE()._check(this[_sentinel][_nextLink]);
        return entry[_element];
      }
      dart.throw(_internal.IterableElementError.tooMany());
    }
    firstEntry() {
      return this[_sentinel].nextEntry();
    }
    lastEntry() {
      return this[_sentinel].previousEntry();
    }
    get isEmpty() {
      return this[_sentinel][_nextLink] == this[_sentinel];
    }
    clear() {
      this[_sentinel][_nextLink] = this[_sentinel];
      this[_sentinel][_previousLink] = this[_sentinel];
      this[_elementCount] = 0;
    }
    forEachEntry(action) {
      let entry = _DoubleLinkedQueueEntryOfE()._check(this[_sentinel][_nextLink]);
      while (entry != this[_sentinel]) {
        let element = _DoubleLinkedQueueElementOfE()._check(entry);
        let next = _DoubleLinkedQueueEntryOfE()._check(element[_nextLink]);
        action(element);
        if (this === entry[_queue$]) {
          next = _DoubleLinkedQueueEntryOfE()._check(entry[_nextLink]);
        } else if (this !== next[_queue$]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        entry = next;
      }
    }
    get iterator() {
      return new (_DoubleLinkedQueueIteratorOfE()).new(this[_sentinel]);
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
  }
  (DoubleLinkedQueue.new = function() {
    this[_sentinel] = null;
    this[_elementCount] = 0;
    DoubleLinkedQueue.__proto__.new.call(this);
    this[_sentinel] = new (_DoubleLinkedQueueSentinelOfE()).new(this);
  }).prototype = DoubleLinkedQueue.prototype;
  ;
  DoubleLinkedQueue.prototype[_is_DoubleLinkedQueue_default] = true;
  DoubleLinkedQueue[dart.implements] = () => [collection.Queue$(E)];
  ;
  dart.setGetterSignature(DoubleLinkedQueue, () => ({
    __proto__: dart.getGetters(DoubleLinkedQueue.__proto__),
    iterator: collection._DoubleLinkedQueueIterator$(E),
    [$iterator]: collection._DoubleLinkedQueueIterator$(E)
  }));
  dart.setLibraryUri(DoubleLinkedQueue, "dart:collection");
  ;
  dart.defineExtensionMethods(DoubleLinkedQueue, ['cast', 'toString']);
  dart.defineExtensionAccessors(DoubleLinkedQueue, [
    'length',
    'first',
    'last',
    'single',
    'isEmpty',
    'iterator'
  ]);
  return DoubleLinkedQueue;
});
collection.DoubleLinkedQueue = collection.DoubleLinkedQueue$();
;
const _nextEntry = dart.privateName(collection, "_nextEntry");
const _is__DoubleLinkedQueueIterator_default = Symbol('_is__DoubleLinkedQueueIterator_default');
collection._DoubleLinkedQueueIterator$ = dart.generic(E => {
  let _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
  let _DoubleLinkedQueueElementOfE = () => (_DoubleLinkedQueueElementOfE = dart.constFn(collection._DoubleLinkedQueueElement$(E)))();
  class _DoubleLinkedQueueIterator extends core.Object {
    moveNext() {
      if (this[_nextEntry] == this[_sentinel]) {
        this[_current$1] = null;
        this[_nextEntry] = null;
        this[_sentinel] = null;
        return false;
      }
      let elementEntry = _DoubleLinkedQueueElementOfE()._check(this[_nextEntry]);
      if (this[_sentinel][_queue$] != elementEntry[_queue$]) {
        dart.throw(new core.ConcurrentModificationError.new(this[_sentinel][_queue$]));
      }
      this[_current$1] = elementEntry[_element];
      this[_nextEntry] = _DoubleLinkedQueueEntryOfE()._check(elementEntry[_nextLink]);
      return true;
    }
    get current() {
      return this[_current$1];
    }
  }
  (_DoubleLinkedQueueIterator.new = function(sentinel) {
    this[_current$1] = null;
    this[_sentinel] = sentinel;
    this[_nextEntry] = _DoubleLinkedQueueEntryOfE()._check(sentinel[_nextLink]);
    ;
  }).prototype = _DoubleLinkedQueueIterator.prototype;
  ;
  _DoubleLinkedQueueIterator.prototype[_is__DoubleLinkedQueueIterator_default] = true;
  _DoubleLinkedQueueIterator[dart.implements] = () => [core.Iterator$(E)];
  ;
  dart.setGetterSignature(_DoubleLinkedQueueIterator, () => ({
    __proto__: dart.getGetters(_DoubleLinkedQueueIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(_DoubleLinkedQueueIterator, "dart:collection");
  ;
  return _DoubleLinkedQueueIterator;
});
collection._DoubleLinkedQueueIterator = collection._DoubleLinkedQueueIterator$();
;
const _table = dart.privateName(collection, "_table");
const _head = dart.privateName(collection, "_head");
const _tail = dart.privateName(collection, "_tail");
const _checkModification = dart.privateName(collection, "_checkModification");
const _writeToList = dart.privateName(collection, "_writeToList");
const _add$ = dart.privateName(collection, "_add");
const _preGrow = dart.privateName(collection, "_preGrow");
const _filterWhere = dart.privateName(collection, "_filterWhere");
const _grow = dart.privateName(collection, "_grow");
const _is_ListQueue_default = Symbol('_is_ListQueue_default');
collection.ListQueue$ = dart.generic(E => {
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let _ListQueueIteratorOfE = () => (_ListQueueIteratorOfE = dart.constFn(collection._ListQueueIterator$(E)))();
  let JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class ListQueue extends _internal.ListIterable$(E) {
    static from(elements) {
      if (core.List.is(elements)) {
        let length = elements[$length];
        let queue = new (collection.ListQueue$(E)).new(dart.notNull(length) + 1);
        if (!(dart.notNull(queue[_table][$length]) > dart.notNull(length))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/queue.dart", 551, 14, "queue._table.length > length");
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          queue[_table][$_set](i, E._check(elements[$_get](i)));
        }
        queue[_tail] = length;
        return queue;
      } else {
        let capacity = 8;
        if (_internal.EfficientLengthIterable.is(elements)) {
          capacity = elements[$length];
        }
        let result = new (collection.ListQueue$(E)).new(capacity);
        for (let element of elements) {
          result.addLast(E._check(element));
        }
        return result;
      }
    }
    static of(elements) {
      let t65;
      t65 = new (collection.ListQueue$(E)).new();
      t65.addAll(elements);
      return t65;
    }
    cast(R) {
      return collection.Queue.castFrom(E, R, this);
    }
    get iterator() {
      return new (_ListQueueIteratorOfE()).new(this);
    }
    forEach(f) {
      let modificationCount = this[_modificationCount];
      for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
        f(this[_table][$_get](i));
        this[_checkModification](modificationCount);
      }
    }
    get isEmpty() {
      return this[_head] == this[_tail];
    }
    get length() {
      return (dart.notNull(this[_tail]) - dart.notNull(this[_head]) & dart.notNull(this[_table][$length]) - 1) >>> 0;
    }
    get first() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      return this[_table][$_get](this[_head]);
    }
    get last() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      return this[_table][$_get]((dart.notNull(this[_tail]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0);
    }
    get single() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
      return this[_table][$_get](this[_head]);
    }
    elementAt(index) {
      core.RangeError.checkValidIndex(index, this);
      return this[_table][$_get]((dart.notNull(this[_head]) + dart.notNull(index) & dart.notNull(this[_table][$length]) - 1) >>> 0);
    }
    toList(opts) {
      let t65;
      let growable = opts && 'growable' in opts ? opts.growable : true;
      let list = null;
      if (dart.test(growable)) {
        list = (t65 = JSArrayOfE().of([]), t65[$length] = this.length, t65);
      } else {
        list = ListOfE().new(this.length);
      }
      this[_writeToList](list);
      return list;
    }
    add(value) {
      E._check(value);
      this[_add$](value);
    }
    addAll(elements) {
      IterableOfE()._check(elements);
      if (ListOfE().is(elements)) {
        let list = elements;
        let addCount = list[$length];
        let length = this.length;
        if (dart.notNull(length) + dart.notNull(addCount) >= dart.notNull(this[_table][$length])) {
          this[_preGrow](dart.notNull(length) + dart.notNull(addCount));
          this[_table][$setRange](length, dart.notNull(length) + dart.notNull(addCount), list, 0);
          this[_tail] = dart.notNull(this[_tail]) + dart.notNull(addCount);
        } else {
          let endSpace = dart.notNull(this[_table][$length]) - dart.notNull(this[_tail]);
          if (dart.notNull(addCount) < endSpace) {
            this[_table][$setRange](this[_tail], dart.notNull(this[_tail]) + dart.notNull(addCount), list, 0);
            this[_tail] = dart.notNull(this[_tail]) + dart.notNull(addCount);
          } else {
            let preSpace = dart.notNull(addCount) - endSpace;
            this[_table][$setRange](this[_tail], dart.notNull(this[_tail]) + endSpace, list, 0);
            this[_table][$setRange](0, preSpace, list, endSpace);
            this[_tail] = preSpace;
          }
        }
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      } else {
        for (let element of elements)
          this[_add$](element);
      }
    }
    remove(value) {
      for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
        let element = this[_table][$_get](i);
        if (dart.equals(element, value)) {
          this[_remove](i);
          this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
          return true;
        }
      }
      return false;
    }
    [_filterWhere](test, removeMatching) {
      let modificationCount = this[_modificationCount];
      let i = this[_head];
      while (i != this[_tail]) {
        let element = this[_table][$_get](i);
        let remove = removeMatching == test(element);
        this[_checkModification](modificationCount);
        if (remove) {
          i = this[_remove](i);
          modificationCount = this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        } else {
          i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        }
      }
    }
    removeWhere(test) {
      this[_filterWhere](test, true);
    }
    retainWhere(test) {
      this[_filterWhere](test, false);
    }
    clear() {
      if (this[_head] != this[_tail]) {
        for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
          this[_table][$_set](i, null);
        }
        this[_head] = this[_tail] = 0;
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      }
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
    addLast(value) {
      E._check(value);
      this[_add$](value);
    }
    addFirst(value) {
      E._check(value);
      this[_head] = (dart.notNull(this[_head]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
      this[_table][$_set](this[_head], value);
      if (this[_head] == this[_tail]) this[_grow]();
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
    }
    removeFirst() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      let result = this[_table][$_get](this[_head]);
      this[_table][$_set](this[_head], null);
      this[_head] = (dart.notNull(this[_head]) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
      return result;
    }
    removeLast() {
      if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      this[_tail] = (dart.notNull(this[_tail]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
      let result = this[_table][$_get](this[_tail]);
      this[_table][$_set](this[_tail], null);
      return result;
    }
    static _isPowerOf2(number) {
      return (dart.notNull(number) & dart.notNull(number) - 1) === 0;
    }
    static _nextPowerOf2(number) {
      if (!(dart.notNull(number) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/queue.dart", 761, 12, "number > 0");
      number = (dart.notNull(number) << 1 >>> 0) - 1;
      for (;;) {
        let nextNumber = (dart.notNull(number) & dart.notNull(number) - 1) >>> 0;
        if (nextNumber === 0) return number;
        number = nextNumber;
      }
    }
    [_checkModification](expectedModificationCount) {
      if (expectedModificationCount != this[_modificationCount]) {
        dart.throw(new core.ConcurrentModificationError.new(this));
      }
    }
    [_add$](element) {
      this[_table][$_set](this[_tail], element);
      this[_tail] = (dart.notNull(this[_tail]) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
      if (this[_head] == this[_tail]) this[_grow]();
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
    }
    [_remove](offset) {
      let mask = dart.notNull(this[_table][$length]) - 1;
      let startDistance = (dart.notNull(offset) - dart.notNull(this[_head]) & mask) >>> 0;
      let endDistance = (dart.notNull(this[_tail]) - dart.notNull(offset) & mask) >>> 0;
      if (startDistance < endDistance) {
        let i = offset;
        while (i != this[_head]) {
          let prevOffset = (dart.notNull(i) - 1 & mask) >>> 0;
          this[_table][$_set](i, this[_table][$_get](prevOffset));
          i = prevOffset;
        }
        this[_table][$_set](this[_head], null);
        this[_head] = (dart.notNull(this[_head]) + 1 & mask) >>> 0;
        return (dart.notNull(offset) + 1 & mask) >>> 0;
      } else {
        this[_tail] = (dart.notNull(this[_tail]) - 1 & mask) >>> 0;
        let i = offset;
        while (i != this[_tail]) {
          let nextOffset = (dart.notNull(i) + 1 & mask) >>> 0;
          this[_table][$_set](i, this[_table][$_get](nextOffset));
          i = nextOffset;
        }
        this[_table][$_set](this[_tail], null);
        return offset;
      }
    }
    [_grow]() {
      let newTable = ListOfE().new(dart.notNull(this[_table][$length]) * 2);
      let split = dart.notNull(this[_table][$length]) - dart.notNull(this[_head]);
      newTable[$setRange](0, split, this[_table], this[_head]);
      newTable[$setRange](split, split + dart.notNull(this[_head]), this[_table], 0);
      this[_head] = 0;
      this[_tail] = this[_table][$length];
      this[_table] = newTable;
    }
    [_writeToList](target) {
      if (!(dart.notNull(target[$length]) >= dart.notNull(this.length))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/queue.dart", 833, 12, "target.length >= length");
      if (dart.notNull(this[_head]) <= dart.notNull(this[_tail])) {
        let length = dart.notNull(this[_tail]) - dart.notNull(this[_head]);
        target[$setRange](0, length, this[_table], this[_head]);
        return length;
      } else {
        let firstPartSize = dart.notNull(this[_table][$length]) - dart.notNull(this[_head]);
        target[$setRange](0, firstPartSize, this[_table], this[_head]);
        target[$setRange](firstPartSize, firstPartSize + dart.notNull(this[_tail]), this[_table], 0);
        return dart.notNull(this[_tail]) + firstPartSize;
      }
    }
    [_preGrow](newElementCount) {
      if (!(dart.notNull(newElementCount) >= dart.notNull(this.length))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/queue.dart", 848, 12, "newElementCount >= length");
      newElementCount = dart.notNull(newElementCount) + newElementCount[$rightShift](1);
      let newCapacity = collection.ListQueue._nextPowerOf2(newElementCount);
      let newTable = ListOfE().new(newCapacity);
      this[_tail] = this[_writeToList](newTable);
      this[_table] = newTable;
      this[_head] = 0;
    }
  }
  (ListQueue.new = function(initialCapacity) {
    if (initialCapacity === void 0) initialCapacity = null;
    this[_table] = null;
    this[_modificationCount] = 0;
    this[_head] = 0;
    this[_tail] = 0;
    ListQueue.__proto__.new.call(this);
    if (initialCapacity == null || dart.notNull(initialCapacity) < 8) {
      initialCapacity = 8;
    } else if (!dart.test(collection.ListQueue._isPowerOf2(initialCapacity))) {
      initialCapacity = collection.ListQueue._nextPowerOf2(initialCapacity);
    }
    if (!dart.test(collection.ListQueue._isPowerOf2(initialCapacity))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/queue.dart", 530, 12, "_isPowerOf2(initialCapacity)");
    this[_table] = ListOfE().new(initialCapacity);
  }).prototype = ListQueue.prototype;
  ;
  ListQueue.prototype[_is_ListQueue_default] = true;
  ListQueue[dart.implements] = () => [collection.Queue$(E)];
  ;
  dart.setLibraryUri(ListQueue, "dart:collection");
  ;
  dart.defineExtensionMethods(ListQueue, [
    'cast',
    'forEach',
    'elementAt',
    'toList',
    'toString'
  ]);
  dart.defineExtensionAccessors(ListQueue, [
    'iterator',
    'isEmpty',
    'length',
    'first',
    'last',
    'single'
  ]);
  return ListQueue;
});
collection.ListQueue = collection.ListQueue$();
dart.defineLazy(collection.ListQueue, {
  /*collection.ListQueue._INITIAL_CAPACITY*/get _INITIAL_CAPACITY() {
    return 8;
  }
});
;
const _end = dart.privateName(collection, "_end");
const _position = dart.privateName(collection, "_position");
const _is__ListQueueIterator_default = Symbol('_is__ListQueueIterator_default');
collection._ListQueueIterator$ = dart.generic(E => {
  class _ListQueueIterator extends core.Object {
    get current() {
      return this[_current$1];
    }
    moveNext() {
      this[_queue$][_checkModification](this[_modificationCount]);
      if (this[_position] == this[_end]) {
        this[_current$1] = null;
        return false;
      }
      this[_current$1] = this[_queue$][_table][$_get](this[_position]);
      this[_position] = (dart.notNull(this[_position]) + 1 & dart.notNull(this[_queue$][_table][$length]) - 1) >>> 0;
      return true;
    }
  }
  (_ListQueueIterator.new = function(queue) {
    this[_current$1] = null;
    this[_queue$] = queue;
    this[_end] = queue[_tail];
    this[_modificationCount] = queue[_modificationCount];
    this[_position] = queue[_head];
    ;
  }).prototype = _ListQueueIterator.prototype;
  ;
  _ListQueueIterator.prototype[_is__ListQueueIterator_default] = true;
  _ListQueueIterator[dart.implements] = () => [core.Iterator$(E)];
  ;
  dart.setGetterSignature(_ListQueueIterator, () => ({
    __proto__: dart.getGetters(_ListQueueIterator.__proto__),
    current: E
  }));
  dart.setLibraryUri(_ListQueueIterator, "dart:collection");
  ;
  return _ListQueueIterator;
});
collection._ListQueueIterator = collection._ListQueueIterator$();
;
const _is_SetMixin_default = Symbol('_is_SetMixin_default');
collection.SetMixin$ = dart.generic(E => {
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
  let SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
  let JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
  let ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
  let WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
  let EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
  let TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
  let TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
  let SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
  let SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
  let VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
  class SetMixin extends core.Object {
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
    get isEmpty() {
      return this.length === 0;
    }
    get isNotEmpty() {
      return this.length !== 0;
    }
    cast(R) {
      return core.Set.castFrom(E, R, this);
    }
    followedBy(other) {
      IterableOfE()._check(other);
      return FollowedByIterableOfE().firstEfficient(this, other);
    }
    whereType(T) {
      return new (_internal.WhereTypeIterable$(T)).new(this);
    }
    clear() {
      this.removeAll(this.toList());
    }
    addAll(elements) {
      IterableOfE()._check(elements);
      for (let element of elements)
        this.add(element);
    }
    removeAll(elements) {
      for (let element of elements)
        this.remove(element);
    }
    retainAll(elements) {
      let toRemove = this.toSet();
      for (let o of elements) {
        toRemove.remove(o);
      }
      this.removeAll(toRemove);
    }
    removeWhere(test) {
      let toRemove = [];
      for (let element of this) {
        if (dart.test(test(element))) toRemove[$add](element);
      }
      this.removeAll(toRemove);
    }
    retainWhere(test) {
      let toRemove = [];
      for (let element of this) {
        if (!dart.test(test(element))) toRemove[$add](element);
      }
      this.removeAll(toRemove);
    }
    containsAll(other) {
      for (let o of other) {
        if (!dart.test(this.contains(o))) return false;
      }
      return true;
    }
    union(other) {
      let t65;
      SetOfE()._check(other);
      t65 = this.toSet();
      t65.addAll(other);
      return t65;
    }
    intersection(other) {
      let result = this.toSet();
      for (let element of this) {
        if (!dart.test(other.contains(element))) result.remove(element);
      }
      return result;
    }
    difference(other) {
      let result = this.toSet();
      for (let element of this) {
        if (dart.test(other.contains(element))) result.remove(element);
      }
      return result;
    }
    toList(opts) {
      let t65, t65$;
      let growable = opts && 'growable' in opts ? opts.growable : true;
      let result = dart.test(growable) ? (t65 = JSArrayOfE().of([]), t65[$length] = this.length, t65) : ListOfE().new(this.length);
      let i = 0;
      for (let element of this)
        result[$_set]((t65$ = i, i = t65$ + 1, t65$), element);
      return result;
    }
    map(T, f) {
      return new (_internal.EfficientLengthMappedIterable$(E, T)).new(this, f);
    }
    get single() {
      if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
      let it = this.iterator;
      if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
      let result = it.current;
      return result;
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
    where(f) {
      return new (WhereIterableOfE()).new(this, f);
    }
    expand(T, f) {
      return new (_internal.ExpandIterable$(E, T)).new(this, f);
    }
    forEach(f) {
      for (let element of this)
        f(element);
    }
    reduce(combine) {
      EAndEToE()._check(combine);
      let iterator = this.iterator;
      if (!dart.test(iterator.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let value = iterator.current;
      while (dart.test(iterator.moveNext())) {
        value = combine(value, iterator.current);
      }
      return value;
    }
    fold(T, initialValue, combine) {
      let value = initialValue;
      for (let element of this)
        value = combine(value, element);
      return value;
    }
    every(f) {
      for (let element of this) {
        if (!dart.test(f(element))) return false;
      }
      return true;
    }
    join(separator) {
      if (separator === void 0) separator = "";
      let iterator = this.iterator;
      if (!dart.test(iterator.moveNext())) return "";
      let buffer = new core.StringBuffer.new();
      if (separator == null || separator === "") {
        do {
          buffer.write(iterator.current);
        } while (dart.test(iterator.moveNext()));
      } else {
        buffer.write(iterator.current);
        while (dart.test(iterator.moveNext())) {
          buffer.write(separator);
          buffer.write(iterator.current);
        }
      }
      return buffer.toString();
    }
    any(test) {
      for (let element of this) {
        if (dart.test(test(element))) return true;
      }
      return false;
    }
    take(n) {
      return TakeIterableOfE().new(this, n);
    }
    takeWhile(test) {
      return new (TakeWhileIterableOfE()).new(this, test);
    }
    skip(n) {
      return SkipIterableOfE().new(this, n);
    }
    skipWhile(test) {
      return new (SkipWhileIterableOfE()).new(this, test);
    }
    get first() {
      let it = this.iterator;
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      return it.current;
    }
    get last() {
      let it = this.iterator;
      if (!dart.test(it.moveNext())) {
        dart.throw(_internal.IterableElementError.noElement());
      }
      let result = null;
      do {
        result = it.current;
      } while (dart.test(it.moveNext()));
      return result;
    }
    firstWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      for (let element of this) {
        if (dart.test(test(element))) return element;
      }
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    lastWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let result = null;
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching) return result;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    singleWhere(test, opts) {
      let orElse = opts && 'orElse' in opts ? opts.orElse : null;
      VoidToE()._check(orElse);
      let result = null;
      let foundMatching = false;
      for (let element of this) {
        if (dart.test(test(element))) {
          if (foundMatching) {
            dart.throw(_internal.IterableElementError.tooMany());
          }
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching) return result;
      if (orElse != null) return orElse();
      dart.throw(_internal.IterableElementError.noElement());
    }
    elementAt(index) {
      core.ArgumentError.checkNotNull(index, "index");
      core.RangeError.checkNotNegative(index, "index");
      let elementIndex = 0;
      for (let element of this) {
        if (index === elementIndex) return element;
        elementIndex = elementIndex + 1;
      }
      dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
    }
  }
  (SetMixin.new = function() {
    ;
  }).prototype = SetMixin.prototype;
  ;
  SetMixin.prototype[_is_SetMixin_default] = true;
  SetMixin[dart.implements] = () => [core.Set$(E)];
  ;
  dart.setGetterSignature(SetMixin, () => ({
    __proto__: dart.getGetters(SetMixin.__proto__),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    single: E,
    [$single]: E,
    first: E,
    [$first]: E,
    last: E,
    [$last]: E
  }));
  dart.setLibraryUri(SetMixin, "dart:collection");
  dart.defineExtensionMethods(SetMixin, [
    'cast',
    'followedBy',
    'whereType',
    'toList',
    'map',
    'toString',
    'where',
    'expand',
    'forEach',
    'reduce',
    'fold',
    'every',
    'join',
    'any',
    'take',
    'takeWhile',
    'skip',
    'skipWhile',
    'firstWhere',
    'lastWhere',
    'singleWhere',
    'elementAt'
  ]);
  dart.defineExtensionAccessors(SetMixin, [
    'isEmpty',
    'isNotEmpty',
    'single',
    'first',
    'last'
  ]);
  return SetMixin;
});
collection.SetMixin = collection.SetMixin$();
;
const _is_SetBase_default = Symbol('_is_SetBase_default');
collection.SetBase$ = dart.generic(E => {
  const Object_SetMixin$36 = class Object_SetMixin extends core.Object {};
  (Object_SetMixin$36.new = function() {
  }).prototype = Object_SetMixin$36.prototype;
  dart.applyMixin(Object_SetMixin$36, collection.SetMixin$(E));
  class SetBase extends Object_SetMixin$36 {
    static setToString(set) {
      return collection.IterableBase.iterableToFullString(set, "{", "}");
    }
  }
  (SetBase.new = function() {
    ;
  }).prototype = SetBase.prototype;
  ;
  SetBase.prototype[_is_SetBase_default] = true;
  dart.setLibraryUri(SetBase, "dart:collection");
  return SetBase;
});
collection.SetBase = collection.SetBase$();
;
const _is__UnmodifiableSet_default = Symbol('_is__UnmodifiableSet_default');
const _map$9 = dart.privateName(collection, "_UnmodifiableSet._map");
collection._UnmodifiableSet$ = dart.generic(E => {
  let _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  class _UnmodifiableSet extends collection._SetBase$(E) {
    get [_map$4]() {
      return this[_map$9];
    }
    set [_map$4](value) {
      super[_map$4] = value;
    }
    [_newSet]() {
      return new (_HashSetOfE()).new();
    }
    [_newSimilarSet](R) {
      return new (collection._HashSet$(R)).new();
    }
    contains(element) {
      return this[_map$4][$containsKey](element);
    }
    get iterator() {
      return this[_map$4][$keys][$iterator];
    }
    get length() {
      return this[_map$4][$length];
    }
    lookup(element) {
      for (let key of this[_map$4][$keys]) {
        if (dart.equals(key, element)) return key;
      }
      return null;
    }
    add(value) {
      E._check(value);
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    addAll(elements) {
      IterableOfE()._check(elements);
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    removeAll(elements) {
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    retainAll(elements) {
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    removeWhere(test) {
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    retainWhere(test) {
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
    remove(value) {
      dart.throw(new core.UnsupportedError.new("Cannot change unmodifiable set"));
    }
  }
  (_UnmodifiableSet.new = function(_map) {
    this[_map$9] = _map;
    _UnmodifiableSet.__proto__.new.call(this);
    ;
  }).prototype = _UnmodifiableSet.prototype;
  ;
  _UnmodifiableSet.prototype[_is__UnmodifiableSet_default] = true;
  ;
  dart.setGetterSignature(_UnmodifiableSet, () => ({
    __proto__: dart.getGetters(_UnmodifiableSet.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_UnmodifiableSet, "dart:collection");
  ;
  dart.defineExtensionMethods(_UnmodifiableSet, ['contains']);
  dart.defineExtensionAccessors(_UnmodifiableSet, ['iterator', 'length']);
  return _UnmodifiableSet;
});
collection._UnmodifiableSet = collection._UnmodifiableSet$();
;
const _is__SplayTreeNode_default = Symbol('_is__SplayTreeNode_default');
const left = dart.privateName(collection, "_SplayTreeNode.left");
const right = dart.privateName(collection, "_SplayTreeNode.right");
collection._SplayTreeNode$ = dart.generic(K => {
  let _SplayTreeNodeOfK = () => (_SplayTreeNodeOfK = dart.constFn(collection._SplayTreeNode$(K)))();
  class _SplayTreeNode extends core.Object {
    get left() {
      return this[left];
    }
    set left(value) {
      this[left] = _SplayTreeNodeOfK()._check(value);
    }
    get right() {
      return this[right];
    }
    set right(value) {
      this[right] = _SplayTreeNodeOfK()._check(value);
    }
  }
  (_SplayTreeNode.new = function(key) {
    this[left] = null;
    this[right] = null;
    this.key = key;
    ;
  }).prototype = _SplayTreeNode.prototype;
  ;
  _SplayTreeNode.prototype[_is__SplayTreeNode_default] = true;
  dart.setLibraryUri(_SplayTreeNode, "dart:collection");
  ;
  return _SplayTreeNode;
});
collection._SplayTreeNode = collection._SplayTreeNode$();
;
const _is__SplayTreeMapNode_default = Symbol('_is__SplayTreeMapNode_default');
const value$2 = dart.privateName(collection, "_SplayTreeMapNode.value");
collection._SplayTreeMapNode$ = dart.generic((K, V) => {
  class _SplayTreeMapNode extends collection._SplayTreeNode$(K) {
    get value() {
      return this[value$2];
    }
    set value(value) {
      this[value$2] = V._check(value);
    }
  }
  (_SplayTreeMapNode.new = function(key, value) {
    this[value$2] = value;
    _SplayTreeMapNode.__proto__.new.call(this, key);
    ;
  }).prototype = _SplayTreeMapNode.prototype;
  ;
  _SplayTreeMapNode.prototype[_is__SplayTreeMapNode_default] = true;
  dart.setLibraryUri(_SplayTreeMapNode, "dart:collection");
  ;
  return _SplayTreeMapNode;
});
collection._SplayTreeMapNode = collection._SplayTreeMapNode$();
;
const _count$ = dart.privateName(collection, "_count");
const _splayCount = dart.privateName(collection, "_splayCount");
const _root = dart.privateName(collection, "_root");
const _dummy = dart.privateName(collection, "_dummy");
const _compare = dart.privateName(collection, "_compare");
const _splay = dart.privateName(collection, "_splay");
const _splayMin = dart.privateName(collection, "_splayMin");
const _splayMax = dart.privateName(collection, "_splayMax");
const _addNewRoot = dart.privateName(collection, "_addNewRoot");
const _last = dart.privateName(collection, "_last");
const _clear = dart.privateName(collection, "_clear");
const _is__SplayTree_default = Symbol('_is__SplayTree_default');
collection._SplayTree$ = dart.generic((K, Node) => {
  class _SplayTree extends core.Object {
    [_splay](key) {
      K._check(key);
      if (this[_root] == null) return -1;
      let left = this[_dummy];
      let right = this[_dummy];
      let current = this[_root];
      let comp = null;
      while (true) {
        comp = this[_compare](current.key, key);
        if (dart.notNull(comp) > 0) {
          if (current.left == null) break;
          comp = this[_compare](current.left.key, key);
          if (dart.notNull(comp) > 0) {
            let tmp = current.left;
            current.left = tmp.right;
            tmp.right = current;
            current = Node._check(tmp);
            if (current.left == null) break;
          }
          right.left = current;
          right = current;
          current = Node._check(current.left);
        } else if (dart.notNull(comp) < 0) {
          if (current.right == null) break;
          comp = this[_compare](current.right.key, key);
          if (dart.notNull(comp) < 0) {
            let tmp = Node._check(current.right);
            current.right = tmp.left;
            tmp.left = current;
            current = tmp;
            if (current.right == null) break;
          }
          left.right = current;
          left = current;
          current = Node._check(current.right);
        } else {
          break;
        }
      }
      left.right = current.left;
      right.left = current.right;
      current.left = this[_dummy].right;
      current.right = this[_dummy].left;
      this[_root] = current;
      this[_dummy].right = null;
      this[_dummy].left = null;
      this[_splayCount] = dart.notNull(this[_splayCount]) + 1;
      return comp;
    }
    [_splayMin](node) {
      let current = node;
      while (current.left != null) {
        let left = Node._check(current.left);
        current.left = left.right;
        left.right = current;
        current = left;
      }
      return current;
    }
    [_splayMax](node) {
      let current = node;
      while (current.right != null) {
        let right = Node._check(current.right);
        current.right = right.left;
        right.left = current;
        current = right;
      }
      return current;
    }
    [_remove](key) {
      if (this[_root] == null) return null;
      let comp = this[_splay](key);
      if (comp !== 0) return null;
      let result = this[_root];
      this[_count$] = dart.notNull(this[_count$]) - 1;
      if (this[_root].left == null) {
        this[_root] = Node._check(this[_root].right);
      } else {
        let right = Node._check(this[_root].right);
        this[_root] = this[_splayMax](Node._check(this[_root].left));
        this[_root].right = right;
      }
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      return result;
    }
    [_addNewRoot](node, comp) {
      this[_count$] = dart.notNull(this[_count$]) + 1;
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      if (this[_root] == null) {
        this[_root] = node;
        return;
      }
      if (dart.notNull(comp) < 0) {
        node.left = this[_root];
        node.right = this[_root].right;
        this[_root].right = null;
      } else {
        node.right = this[_root];
        node.left = this[_root].left;
        this[_root].left = null;
      }
      this[_root] = node;
    }
    get [_first]() {
      if (this[_root] == null) return null;
      this[_root] = this[_splayMin](this[_root]);
      return this[_root];
    }
    get [_last]() {
      if (this[_root] == null) return null;
      this[_root] = this[_splayMax](this[_root]);
      return this[_root];
    }
    [_clear]() {
      this[_root] = null;
      this[_count$] = 0;
      this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
    }
  }
  (_SplayTree.new = function() {
    this[_count$] = 0;
    this[_modificationCount] = 0;
    this[_splayCount] = 0;
    ;
  }).prototype = _SplayTree.prototype;
  ;
  _SplayTree.prototype[_is__SplayTree_default] = true;
  ;
  dart.setGetterSignature(_SplayTree, () => ({
    __proto__: dart.getGetters(_SplayTree.__proto__),
    [_first]: Node,
    [_last]: Node
  }));
  dart.setLibraryUri(_SplayTree, "dart:collection");
  ;
  return _SplayTree;
});
collection._SplayTree = collection._SplayTree$();
;
const _is__TypeTest_default = Symbol('_is__TypeTest_default');
collection._TypeTest$ = dart.generic(T => {
  class _TypeTest extends core.Object {
    test(v) {
      return T.is(v);
    }
  }
  (_TypeTest.new = function() {
    ;
  }).prototype = _TypeTest.prototype;
  ;
  _TypeTest.prototype[_is__TypeTest_default] = true;
  ;
  dart.setLibraryUri(_TypeTest, "dart:collection");
  return _TypeTest;
});
collection._TypeTest = collection._TypeTest$();
;
const _comparator = dart.privateName(collection, "_comparator");
const _is_SplayTreeMap_default = Symbol('_is_SplayTreeMap_default');
const _root$ = dart.privateName(collection, "SplayTreeMap._root");
const _dummy$ = dart.privateName(collection, "SplayTreeMap._dummy");
const _comparator$ = dart.privateName(collection, "SplayTreeMap._comparator");
const _validKey = dart.privateName(collection, "SplayTreeMap._validKey");
collection.SplayTreeMap$ = dart.generic((K, V) => {
  let _SplayTreeMapNodeOfK$V = () => (_SplayTreeMapNodeOfK$V = dart.constFn(collection._SplayTreeMapNode$(K, V)))();
  let MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
  let KAndVToNull = () => (KAndVToNull = dart.constFn(dart.fnType(core.Null, [K, V])))();
  let _SplayTreeNodeIteratorOfK = () => (_SplayTreeNodeIteratorOfK = dart.constFn(collection._SplayTreeNodeIterator$(K)))();
  let _SplayTreeKeyIterableOfK = () => (_SplayTreeKeyIterableOfK = dart.constFn(collection._SplayTreeKeyIterable$(K)))();
  let _SplayTreeValueIterableOfK$V = () => (_SplayTreeValueIterableOfK$V = dart.constFn(collection._SplayTreeValueIterable$(K, V)))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  const _SplayTree_MapMixin$36 = class _SplayTree_MapMixin extends collection._SplayTree$(K, collection._SplayTreeMapNode$(K, V)) {};
  (_SplayTree_MapMixin$36.new = function() {
    _SplayTree_MapMixin$36.__proto__.new.call(this);
  }).prototype = _SplayTree_MapMixin$36.prototype;
  dart.applyMixin(_SplayTree_MapMixin$36, collection.MapMixin$(K, V));
  class SplayTreeMap extends _SplayTree_MapMixin$36 {
    get [_root]() {
      return this[_root$];
    }
    set [_root](value) {
      this[_root$] = value;
    }
    get [_dummy]() {
      return this[_dummy$];
    }
    set [_dummy](value) {
      super[_dummy] = value;
    }
    get [_comparator]() {
      return this[_comparator$];
    }
    set [_comparator](value) {
      this[_comparator$] = value;
    }
    get [_validKey$0]() {
      return this[_validKey];
    }
    set [_validKey$0](value) {
      this[_validKey] = value;
    }
    static from(other, compare, isValidKey) {
      if (compare === void 0) compare = null;
      if (isValidKey === void 0) isValidKey = null;
      let result = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
      other[$forEach](dart.fn((k, v) => {
        result._set(K._check(k), V._check(v));
      }, dynamicAnddynamicToNull()));
      return result;
    }
    static of(other, compare, isValidKey) {
      let t65;
      if (compare === void 0) compare = null;
      if (isValidKey === void 0) isValidKey = null;
      t65 = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
      t65.addAll(other);
      return t65;
    }
    static fromIterable(iterable, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let compare = opts && 'compare' in opts ? opts.compare : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      let map = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
      collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
      return map;
    }
    static fromIterables(keys, values, compare, isValidKey) {
      if (compare === void 0) compare = null;
      if (isValidKey === void 0) isValidKey = null;
      let map = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
      collection.MapBase._fillMapWithIterables(map, keys, values);
      return map;
    }
    [_compare](key1, key2) {
      return this[_comparator](key1, key2);
    }
    _get(key) {
      if (!dart.test(this[_validKey$0](key))) return null;
      if (this[_root] != null) {
        let comp = this[_splay](K._check(key));
        if (comp === 0) {
          return this[_root].value;
        }
      }
      return null;
    }
    remove(key) {
      if (!dart.test(this[_validKey$0](key))) return null;
      let mapRoot = this[_remove](K._check(key));
      if (mapRoot != null) return mapRoot.value;
      return null;
    }
    _set(key, value$) {
      let value = value$;
      K._check(key);
      V._check(value);
      if (key == null) dart.throw(new core.ArgumentError.new(key));
      let comp = this[_splay](key);
      if (comp === 0) {
        this[_root].value = value;
        return value$;
      }
      this[_addNewRoot](new (_SplayTreeMapNodeOfK$V()).new(key, value), comp);
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      K._check(key);
      VoidToV()._check(ifAbsent);
      if (key == null) dart.throw(new core.ArgumentError.new(key));
      let comp = this[_splay](key);
      if (comp === 0) {
        return this[_root].value;
      }
      let modificationCount = this[_modificationCount];
      let splayCount = this[_splayCount];
      let value = ifAbsent();
      if (modificationCount != this[_modificationCount]) {
        dart.throw(new core.ConcurrentModificationError.new(this));
      }
      if (splayCount != this[_splayCount]) {
        comp = this[_splay](key);
        if (!(comp !== 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/splay_tree.dart", 367, 14, "comp != 0");
      }
      this[_addNewRoot](new (_SplayTreeMapNodeOfK$V()).new(key, value), comp);
      return value;
    }
    addAll(other) {
      MapOfK$V()._check(other);
      other[$forEach](dart.fn((key, value) => {
        this._set(key, value);
      }, KAndVToNull()));
    }
    get isEmpty() {
      return this[_root] == null;
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    forEach(f) {
      let nodes = new (_SplayTreeNodeIteratorOfK()).new(this);
      while (dart.test(nodes.moveNext())) {
        let node = _SplayTreeMapNodeOfK$V()._check(nodes.current);
        f(node.key, node.value);
      }
    }
    get length() {
      return this[_count$];
    }
    clear() {
      this[_clear]();
    }
    containsKey(key) {
      return dart.test(this[_validKey$0](key)) && this[_splay](K._check(key)) === 0;
    }
    containsValue(value) {
      let initialSplayCount = this[_splayCount];
      const visit = node => {
        while (node != null) {
          if (dart.equals(node.value, value)) return true;
          if (initialSplayCount != this[_splayCount]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
          if (node.right != null && dart.test(visit(collection._SplayTreeMapNode._check(node.right)))) return true;
          node = collection._SplayTreeMapNode._check(node.left);
        }
        return false;
      };
      dart.fn(visit, _SplayTreeMapNodeTobool());
      return visit(this[_root]);
    }
    get keys() {
      return new (_SplayTreeKeyIterableOfK()).new(this);
    }
    get values() {
      return new (_SplayTreeValueIterableOfK$V()).new(this);
    }
    firstKey() {
      if (this[_root] == null) return null;
      return this[_first].key;
    }
    lastKey() {
      if (this[_root] == null) return null;
      return this[_last].key;
    }
    lastKeyBefore(key) {
      K._check(key);
      if (key == null) dart.throw(new core.ArgumentError.new(key));
      if (this[_root] == null) return null;
      let comp = this[_splay](key);
      if (dart.notNull(comp) < 0) return this[_root].key;
      let node = this[_root].left;
      if (node == null) return null;
      while (node.right != null) {
        node = node.right;
      }
      return node.key;
    }
    firstKeyAfter(key) {
      K._check(key);
      if (key == null) dart.throw(new core.ArgumentError.new(key));
      if (this[_root] == null) return null;
      let comp = this[_splay](key);
      if (dart.notNull(comp) > 0) return this[_root].key;
      let node = this[_root].right;
      if (node == null) return null;
      while (node.left != null) {
        node = node.left;
      }
      return node.key;
    }
  }
  (SplayTreeMap.new = function(compare, isValidKey) {
    let t65, t65$;
    if (compare === void 0) compare = null;
    if (isValidKey === void 0) isValidKey = null;
    this[_root$] = null;
    this[_dummy$] = new (_SplayTreeMapNodeOfK$V()).new(null, null);
    this[_comparator$] = (t65 = compare, t65 == null ? collection._defaultCompare(K) : t65);
    this[_validKey] = (t65$ = isValidKey, t65$ == null ? dart.fn(v => K.is(v), dynamicTobool()) : t65$);
    SplayTreeMap.__proto__.new.call(this);
    ;
  }).prototype = SplayTreeMap.prototype;
  (SplayTreeMap._internal = function() {
    this[_root$] = null;
    this[_dummy$] = new (_SplayTreeMapNodeOfK$V()).new(null, null);
    this[_validKey] = null;
    this[_comparator$] = null;
    SplayTreeMap.__proto__.new.call(this);
    ;
  }).prototype = SplayTreeMap.prototype;
  ;
  SplayTreeMap.prototype[_is_SplayTreeMap_default] = true;
  ;
  dart.setGetterSignature(SplayTreeMap, () => ({
    __proto__: dart.getGetters(SplayTreeMap.__proto__),
    keys: core.Iterable$(K),
    [$keys]: core.Iterable$(K)
  }));
  dart.setLibraryUri(SplayTreeMap, "dart:collection");
  ;
  dart.defineExtensionMethods(SplayTreeMap, [
    '_get',
    'remove',
    '_set',
    'putIfAbsent',
    'addAll',
    'forEach',
    'clear',
    'containsKey',
    'containsValue'
  ]);
  dart.defineExtensionAccessors(SplayTreeMap, [
    'isEmpty',
    'isNotEmpty',
    'length',
    'keys',
    'values'
  ]);
  return SplayTreeMap;
});
collection.SplayTreeMap = collection.SplayTreeMap$();
;
const _workList = dart.privateName(collection, "_workList");
const _currentNode = dart.privateName(collection, "_currentNode");
const _tree$ = dart.privateName(collection, "_tree");
const _findLeftMostDescendent = dart.privateName(collection, "_findLeftMostDescendent");
const _getValue = dart.privateName(collection, "_getValue");
const _rebuildWorkList = dart.privateName(collection, "_rebuildWorkList");
const _is__SplayTreeIterator_default = Symbol('_is__SplayTreeIterator_default');
collection._SplayTreeIterator$ = dart.generic((K, T) => {
  let _SplayTreeNodeOfK = () => (_SplayTreeNodeOfK = dart.constFn(collection._SplayTreeNode$(K)))();
  let JSArrayOf_SplayTreeNodeOfK = () => (JSArrayOf_SplayTreeNodeOfK = dart.constFn(_interceptors.JSArray$(_SplayTreeNodeOfK())))();
  class _SplayTreeIterator extends core.Object {
    get current() {
      if (this[_currentNode] == null) return null;
      return this[_getValue](this[_currentNode]);
    }
    [_findLeftMostDescendent](node) {
      while (node != null) {
        this[_workList][$add](node);
        node = node.left;
      }
    }
    [_rebuildWorkList](currentNode) {
      if (!dart.test(this[_workList][$isNotEmpty])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/splay_tree.dart", 539, 12, "_workList.isNotEmpty");
      this[_workList][$clear]();
      if (currentNode == null) {
        this[_findLeftMostDescendent](this[_tree$][_root]);
      } else {
        this[_tree$][_splay](currentNode.key);
        this[_findLeftMostDescendent](this[_tree$][_root].right);
        if (!dart.test(this[_workList][$isNotEmpty])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/splay_tree.dart", 546, 14, "_workList.isNotEmpty");
      }
    }
    moveNext() {
      if (this[_modificationCount] != this[_tree$][_modificationCount]) {
        dart.throw(new core.ConcurrentModificationError.new(this[_tree$]));
      }
      if (dart.test(this[_workList][$isEmpty])) {
        this[_currentNode] = null;
        return false;
      }
      if (this[_tree$][_splayCount] != this[_splayCount] && this[_currentNode] != null) {
        this[_rebuildWorkList](this[_currentNode]);
      }
      this[_currentNode] = this[_workList][$removeLast]();
      this[_findLeftMostDescendent](this[_currentNode].right);
      return true;
    }
  }
  (_SplayTreeIterator.new = function(tree) {
    this[_workList] = JSArrayOf_SplayTreeNodeOfK().of([]);
    this[_currentNode] = null;
    this[_tree$] = tree;
    this[_modificationCount] = tree[_modificationCount];
    this[_splayCount] = tree[_splayCount];
    this[_findLeftMostDescendent](tree[_root]);
  }).prototype = _SplayTreeIterator.prototype;
  (_SplayTreeIterator.startAt = function(tree, startKey) {
    this[_workList] = JSArrayOf_SplayTreeNodeOfK().of([]);
    this[_currentNode] = null;
    this[_splayCount] = null;
    this[_tree$] = tree;
    this[_modificationCount] = tree[_modificationCount];
    if (tree[_root] == null) return;
    let compare = tree[_splay](startKey);
    this[_splayCount] = tree[_splayCount];
    if (dart.notNull(compare) < 0) {
      this[_findLeftMostDescendent](tree[_root].right);
    } else {
      this[_workList][$add](tree[_root]);
    }
  }).prototype = _SplayTreeIterator.prototype;
  ;
  _SplayTreeIterator.prototype[_is__SplayTreeIterator_default] = true;
  _SplayTreeIterator[dart.implements] = () => [core.Iterator$(T)];
  ;
  dart.setGetterSignature(_SplayTreeIterator, () => ({
    __proto__: dart.getGetters(_SplayTreeIterator.__proto__),
    current: T
  }));
  dart.setLibraryUri(_SplayTreeIterator, "dart:collection");
  ;
  return _SplayTreeIterator;
});
collection._SplayTreeIterator = collection._SplayTreeIterator$();
;
const _copyNode = dart.privateName(collection, "_copyNode");
const _is__SplayTreeKeyIterable_default = Symbol('_is__SplayTreeKeyIterable_default');
collection._SplayTreeKeyIterable$ = dart.generic(K => {
  let _SplayTreeKeyIteratorOfK = () => (_SplayTreeKeyIteratorOfK = dart.constFn(collection._SplayTreeKeyIterator$(K)))();
  let SplayTreeSetOfK = () => (SplayTreeSetOfK = dart.constFn(collection.SplayTreeSet$(K)))();
  let KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
  class _SplayTreeKeyIterable extends _internal.EfficientLengthIterable$(K) {
    get length() {
      return this[_tree$][_count$];
    }
    get isEmpty() {
      return this[_tree$][_count$] === 0;
    }
    get iterator() {
      return new (_SplayTreeKeyIteratorOfK()).new(this[_tree$]);
    }
    toSet() {
      let set = new (SplayTreeSetOfK()).new(KAndKToint()._check(this[_tree$][_comparator]), this[_tree$][_validKey$0]);
      set[_count$] = this[_tree$][_count$];
      set[_root] = set[_copyNode](this[_tree$][_root]);
      return set;
    }
  }
  (_SplayTreeKeyIterable.new = function(_tree) {
    this[_tree$] = _tree;
    _SplayTreeKeyIterable.__proto__.new.call(this);
    ;
  }).prototype = _SplayTreeKeyIterable.prototype;
  ;
  _SplayTreeKeyIterable.prototype[_is__SplayTreeKeyIterable_default] = true;
  dart.setGetterSignature(_SplayTreeKeyIterable, () => ({
    __proto__: dart.getGetters(_SplayTreeKeyIterable.__proto__),
    iterator: core.Iterator$(K),
    [$iterator]: core.Iterator$(K)
  }));
  dart.setLibraryUri(_SplayTreeKeyIterable, "dart:collection");
  ;
  dart.defineExtensionMethods(_SplayTreeKeyIterable, ['toSet']);
  dart.defineExtensionAccessors(_SplayTreeKeyIterable, ['length', 'isEmpty', 'iterator']);
  return _SplayTreeKeyIterable;
});
collection._SplayTreeKeyIterable = collection._SplayTreeKeyIterable$();
;
const _is__SplayTreeValueIterable_default = Symbol('_is__SplayTreeValueIterable_default');
collection._SplayTreeValueIterable$ = dart.generic((K, V) => {
  let _SplayTreeValueIteratorOfK$V = () => (_SplayTreeValueIteratorOfK$V = dart.constFn(collection._SplayTreeValueIterator$(K, V)))();
  class _SplayTreeValueIterable extends _internal.EfficientLengthIterable$(V) {
    get length() {
      return this[_map$4][_count$];
    }
    get isEmpty() {
      return this[_map$4][_count$] === 0;
    }
    get iterator() {
      return new (_SplayTreeValueIteratorOfK$V()).new(this[_map$4]);
    }
  }
  (_SplayTreeValueIterable.new = function(_map) {
    this[_map$4] = _map;
    _SplayTreeValueIterable.__proto__.new.call(this);
    ;
  }).prototype = _SplayTreeValueIterable.prototype;
  ;
  _SplayTreeValueIterable.prototype[_is__SplayTreeValueIterable_default] = true;
  dart.setGetterSignature(_SplayTreeValueIterable, () => ({
    __proto__: dart.getGetters(_SplayTreeValueIterable.__proto__),
    iterator: core.Iterator$(V),
    [$iterator]: core.Iterator$(V)
  }));
  dart.setLibraryUri(_SplayTreeValueIterable, "dart:collection");
  ;
  dart.defineExtensionAccessors(_SplayTreeValueIterable, ['length', 'isEmpty', 'iterator']);
  return _SplayTreeValueIterable;
});
collection._SplayTreeValueIterable = collection._SplayTreeValueIterable$();
;
const _is__SplayTreeKeyIterator_default = Symbol('_is__SplayTreeKeyIterator_default');
collection._SplayTreeKeyIterator$ = dart.generic(K => {
  class _SplayTreeKeyIterator extends collection._SplayTreeIterator$(K, K) {
    [_getValue](node) {
      return node.key;
    }
  }
  (_SplayTreeKeyIterator.new = function(map) {
    _SplayTreeKeyIterator.__proto__.new.call(this, map);
    ;
  }).prototype = _SplayTreeKeyIterator.prototype;
  ;
  _SplayTreeKeyIterator.prototype[_is__SplayTreeKeyIterator_default] = true;
  ;
  dart.setLibraryUri(_SplayTreeKeyIterator, "dart:collection");
  return _SplayTreeKeyIterator;
});
collection._SplayTreeKeyIterator = collection._SplayTreeKeyIterator$();
;
const _is__SplayTreeValueIterator_default = Symbol('_is__SplayTreeValueIterator_default');
collection._SplayTreeValueIterator$ = dart.generic((K, V) => {
  let _SplayTreeMapNodeOfK$V = () => (_SplayTreeMapNodeOfK$V = dart.constFn(collection._SplayTreeMapNode$(K, V)))();
  class _SplayTreeValueIterator extends collection._SplayTreeIterator$(K, V) {
    [_getValue](node) {
      let mapNode = _SplayTreeMapNodeOfK$V()._check(node);
      return mapNode.value;
    }
  }
  (_SplayTreeValueIterator.new = function(map) {
    _SplayTreeValueIterator.__proto__.new.call(this, map);
    ;
  }).prototype = _SplayTreeValueIterator.prototype;
  ;
  _SplayTreeValueIterator.prototype[_is__SplayTreeValueIterator_default] = true;
  ;
  dart.setLibraryUri(_SplayTreeValueIterator, "dart:collection");
  return _SplayTreeValueIterator;
});
collection._SplayTreeValueIterator = collection._SplayTreeValueIterator$();
;
const _is__SplayTreeNodeIterator_default = Symbol('_is__SplayTreeNodeIterator_default');
collection._SplayTreeNodeIterator$ = dart.generic(K => {
  class _SplayTreeNodeIterator extends collection._SplayTreeIterator$(K, collection._SplayTreeNode$(K)) {
    [_getValue](node) {
      return node;
    }
  }
  (_SplayTreeNodeIterator.new = function(tree) {
    _SplayTreeNodeIterator.__proto__.new.call(this, tree);
    ;
  }).prototype = _SplayTreeNodeIterator.prototype;
  (_SplayTreeNodeIterator.startAt = function(tree, startKey) {
    _SplayTreeNodeIterator.__proto__.startAt.call(this, tree, startKey);
    ;
  }).prototype = _SplayTreeNodeIterator.prototype;
  ;
  _SplayTreeNodeIterator.prototype[_is__SplayTreeNodeIterator_default] = true;
  ;
  dart.setLibraryUri(_SplayTreeNodeIterator, "dart:collection");
  return _SplayTreeNodeIterator;
});
collection._SplayTreeNodeIterator = collection._SplayTreeNodeIterator$();
;
const _clone$ = dart.privateName(collection, "_clone");
const _is_SplayTreeSet_default = Symbol('_is_SplayTreeSet_default');
const _root$0 = dart.privateName(collection, "SplayTreeSet._root");
const _dummy$0 = dart.privateName(collection, "SplayTreeSet._dummy");
const _comparator$0 = dart.privateName(collection, "SplayTreeSet._comparator");
const _validKey$1 = dart.privateName(collection, "SplayTreeSet._validKey");
collection.SplayTreeSet$ = dart.generic(E => {
  let _SplayTreeNodeOfE = () => (_SplayTreeNodeOfE = dart.constFn(collection._SplayTreeNode$(E)))();
  let _SplayTreeKeyIteratorOfE = () => (_SplayTreeKeyIteratorOfE = dart.constFn(collection._SplayTreeKeyIterator$(E)))();
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  let SplayTreeSetOfE = () => (SplayTreeSetOfE = dart.constFn(collection.SplayTreeSet$(E)))();
  let SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
  const _SplayTree_IterableMixin$36 = class _SplayTree_IterableMixin extends collection._SplayTree$(E, collection._SplayTreeNode$(E)) {};
  (_SplayTree_IterableMixin$36.new = function() {
    _SplayTree_IterableMixin$36.__proto__.new.call(this);
  }).prototype = _SplayTree_IterableMixin$36.prototype;
  dart.applyMixin(_SplayTree_IterableMixin$36, collection.IterableMixin$(E));
  const _SplayTree_SetMixin$36 = class _SplayTree_SetMixin extends _SplayTree_IterableMixin$36 {};
  (_SplayTree_SetMixin$36.new = function() {
    _SplayTree_SetMixin$36.__proto__.new.call(this);
  }).prototype = _SplayTree_SetMixin$36.prototype;
  dart.applyMixin(_SplayTree_SetMixin$36, collection.SetMixin$(E));
  class SplayTreeSet extends _SplayTree_SetMixin$36 {
    get [_root]() {
      return this[_root$0];
    }
    set [_root](value) {
      this[_root$0] = _SplayTreeNodeOfE()._check(value);
    }
    get [_dummy]() {
      return this[_dummy$0];
    }
    set [_dummy](value) {
      super[_dummy] = value;
    }
    get [_comparator]() {
      return this[_comparator$0];
    }
    set [_comparator](value) {
      this[_comparator$0] = value;
    }
    get [_validKey$0]() {
      return this[_validKey$1];
    }
    set [_validKey$0](value) {
      this[_validKey$1] = value;
    }
    static from(elements, compare, isValidKey) {
      if (compare === void 0) compare = null;
      if (isValidKey === void 0) isValidKey = null;
      let result = new (collection.SplayTreeSet$(E)).new(compare, isValidKey);
      for (let element of elements) {
        let e = E._check(element);
        result.add(e);
      }
      return result;
    }
    static of(elements, compare, isValidKey) {
      let t65;
      if (compare === void 0) compare = null;
      if (isValidKey === void 0) isValidKey = null;
      t65 = new (collection.SplayTreeSet$(E)).new(compare, isValidKey);
      t65.addAll(elements);
      return t65;
    }
    [_newSet](T) {
      return new (collection.SplayTreeSet$(T)).new(dart.fn((a, b) => this[_comparator](E.as(a), E.as(b)), dart.fnType(core.int, [T, T])), this[_validKey$0]);
    }
    cast(R) {
      return core.Set.castFrom(E, R, this, {newSet: dart.bind(this, _newSet)});
    }
    [_compare](e1, e2) {
      return this[_comparator](e1, e2);
    }
    get iterator() {
      return new (_SplayTreeKeyIteratorOfE()).new(this);
    }
    get length() {
      return this[_count$];
    }
    get isEmpty() {
      return this[_root] == null;
    }
    get isNotEmpty() {
      return this[_root] != null;
    }
    get first() {
      if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
      return this[_first].key;
    }
    get last() {
      if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
      return this[_last].key;
    }
    get single() {
      if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
      if (dart.notNull(this[_count$]) > 1) dart.throw(_internal.IterableElementError.tooMany());
      return this[_root].key;
    }
    contains(element) {
      return dart.test(this[_validKey$0](element)) && this[_splay](E._check(element)) === 0;
    }
    add(element) {
      E._check(element);
      let compare = this[_splay](element);
      if (compare === 0) return false;
      this[_addNewRoot](new (_SplayTreeNodeOfE()).new(element), compare);
      return true;
    }
    remove(object) {
      if (!dart.test(this[_validKey$0](object))) return false;
      return this[_remove](E._check(object)) != null;
    }
    addAll(elements) {
      IterableOfE()._check(elements);
      for (let element of elements) {
        let compare = this[_splay](element);
        if (compare !== 0) {
          this[_addNewRoot](new (_SplayTreeNodeOfE()).new(element), compare);
        }
      }
    }
    removeAll(elements) {
      for (let element of elements) {
        if (dart.test(this[_validKey$0](element))) this[_remove](E._check(element));
      }
    }
    retainAll(elements) {
      let retainSet = new (SplayTreeSetOfE()).new(this[_comparator], this[_validKey$0]);
      let modificationCount = this[_modificationCount];
      for (let object of elements) {
        if (modificationCount != this[_modificationCount]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (dart.test(this[_validKey$0](object)) && this[_splay](E._check(object)) === 0) {
          retainSet.add(this[_root].key);
        }
      }
      if (retainSet[_count$] != this[_count$]) {
        this[_root] = retainSet[_root];
        this[_count$] = retainSet[_count$];
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      }
    }
    lookup(object) {
      if (!dart.test(this[_validKey$0](object))) return null;
      let comp = this[_splay](E._check(object));
      if (comp !== 0) return null;
      return this[_root].key;
    }
    intersection(other) {
      let result = new (SplayTreeSetOfE()).new(this[_comparator], this[_validKey$0]);
      for (let element of this) {
        if (dart.test(other.contains(element))) result.add(element);
      }
      return result;
    }
    difference(other) {
      let result = new (SplayTreeSetOfE()).new(this[_comparator], this[_validKey$0]);
      for (let element of this) {
        if (!dart.test(other.contains(element))) result.add(element);
      }
      return result;
    }
    union(other) {
      let t65;
      SetOfE()._check(other);
      t65 = this[_clone$]();
      t65.addAll(other);
      return t65;
    }
    [_clone$]() {
      let set = new (SplayTreeSetOfE()).new(this[_comparator], this[_validKey$0]);
      set[_count$] = this[_count$];
      set[_root] = this[_copyNode](this[_root]);
      return set;
    }
    [_copyNode](node) {
      let t65;
      _SplayTreeNodeOfE()._check(node);
      if (node == null) return null;
      t65 = new (_SplayTreeNodeOfE()).new(node.key);
      t65.left = this[_copyNode](node.left);
      t65.right = this[_copyNode](node.right);
      return t65;
    }
    clear() {
      this[_clear]();
    }
    toSet() {
      return this[_clone$]();
    }
    toString() {
      return collection.IterableBase.iterableToFullString(this, "{", "}");
    }
  }
  (SplayTreeSet.new = function(compare, isValidKey) {
    let t65, t65$;
    if (compare === void 0) compare = null;
    if (isValidKey === void 0) isValidKey = null;
    this[_root$0] = null;
    this[_dummy$0] = new (_SplayTreeNodeOfE()).new(null);
    this[_comparator$0] = (t65 = compare, t65 == null ? collection._defaultCompare(E) : t65);
    this[_validKey$1] = (t65$ = isValidKey, t65$ == null ? dart.fn(v => E.is(v), dynamicTobool()) : t65$);
    SplayTreeSet.__proto__.new.call(this);
    ;
  }).prototype = SplayTreeSet.prototype;
  ;
  SplayTreeSet.prototype[_is_SplayTreeSet_default] = true;
  ;
  dart.setGetterSignature(SplayTreeSet, () => ({
    __proto__: dart.getGetters(SplayTreeSet.__proto__),
    iterator: core.Iterator$(E),
    [$iterator]: core.Iterator$(E)
  }));
  dart.setLibraryUri(SplayTreeSet, "dart:collection");
  ;
  dart.defineExtensionMethods(SplayTreeSet, ['cast', 'contains', 'toSet', 'toString']);
  dart.defineExtensionAccessors(SplayTreeSet, [
    'iterator',
    'length',
    'isEmpty',
    'isNotEmpty',
    'first',
    'last',
    'single'
  ]);
  return SplayTreeSet;
});
collection.SplayTreeSet = collection.SplayTreeSet$();
;
let C140;
let C141;
collection._defaultEquals = function _defaultEquals(a, b) {
  return dart.equals(a, b);
};
collection._defaultHashCode = function _defaultHashCode(a) {
  return dart.hashCode(a);
};
collection._isToStringVisiting = function _isToStringVisiting(o) {
  for (let i = 0; i < dart.notNull(collection._toStringVisiting[$length]); i = i + 1) {
    if (core.identical(o, collection._toStringVisiting[$_get](i))) return true;
  }
  return false;
};
collection._iterablePartsToStrings = function _iterablePartsToStrings(iterable, parts) {
  let length = 0;
  let count = 0;
  let it = iterable[$iterator];
  while (length < 80 || count < 3) {
    if (!dart.test(it.moveNext())) return;
    let next = dart.str(it.current);
    parts[$add](next);
    length = length + (next.length + 2);
    count = count + 1;
  }
  let penultimateString = null;
  let ultimateString = null;
  let penultimate = null;
  let ultimate = null;
  if (!dart.test(it.moveNext())) {
    if (count <= 3 + 2) return;
    ultimateString = parts[$removeLast]();
    penultimateString = parts[$removeLast]();
  } else {
    penultimate = it.current;
    count = count + 1;
    if (!dart.test(it.moveNext())) {
      if (count <= 3 + 1) {
        parts[$add](dart.str(penultimate));
        return;
      }
      ultimateString = dart.str(penultimate);
      penultimateString = parts[$removeLast]();
      length = length + (ultimateString.length + 2);
    } else {
      ultimate = it.current;
      count = count + 1;
      if (!(count < 100)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/collection/iterable.dart", 353, 14, "count < maxCount");
      while (dart.test(it.moveNext())) {
        penultimate = ultimate;
        ultimate = it.current;
        count = count + 1;
        if (count > 100) {
          while (length > 80 - 3 - 2 && count > 3) {
            length = length - (parts[$removeLast]().length + 2);
            count = count - 1;
          }
          parts[$add]("...");
          return;
        }
      }
      penultimateString = dart.str(penultimate);
      ultimateString = dart.str(ultimate);
      length = length + (ultimateString.length + penultimateString.length + 2 * 2);
    }
  }
  let elision = null;
  if (count > dart.notNull(parts[$length]) + 2) {
    elision = "...";
    length = length + (3 + 2);
  }
  while (length > 80 && dart.notNull(parts[$length]) > 3) {
    length = length - (parts[$removeLast]().length + 2);
    if (elision == null) {
      elision = "...";
      length = length + (3 + 2);
    }
  }
  if (elision != null) {
    parts[$add](elision);
  }
  parts[$add](penultimateString);
  parts[$add](ultimateString);
};
collection._dynamicCompare = function _dynamicCompare(a, b) {
  return core.Comparable.compare(core.Comparable._check(a), core.Comparable._check(b));
};
collection._defaultCompare = function _defaultCompare(K) {
  let compare = C140 || CT.C140;
  if (dart.fnType(core.int, [K, K]).is(compare)) {
    return compare;
  }
  return C141 || CT.C141;
};
dart.defineLazy(collection, {
  /*collection._toStringVisiting*/get _toStringVisiting() {
    return [];
  }
});
const _processed = dart.privateName(convert, "_processed");
const _data = dart.privateName(convert, "_data");
const _original$ = dart.privateName(convert, "_original");
const _isUpgraded = dart.privateName(convert, "_isUpgraded");
const _upgradedMap = dart.privateName(convert, "_upgradedMap");
const _process$ = dart.privateName(convert, "_process");
const _computeKeys = dart.privateName(convert, "_computeKeys");
const _upgrade = dart.privateName(convert, "_upgrade");
core.String = class String extends core.Object {
  static _stringFromJSArray(list, start, endOrNull) {
    let len = core.int._check(dart.dload(list, 'length'));
    let end = core.RangeError.checkValidRange(start, endOrNull, len);
    if (dart.notNull(start) > 0 || dart.notNull(end) < dart.notNull(len)) {
      list = dart.dsend(list, 'sublist', [start, end]);
    }
    return _js_helper.Primitives.stringFromCharCodes(JSArrayOfint()._check(list));
  }
  static _stringFromUint8List(charCodes, start, endOrNull) {
    let len = charCodes[$length];
    let end = core.RangeError.checkValidRange(start, endOrNull, len);
    return _js_helper.Primitives.stringFromNativeUint8List(charCodes, start, end);
  }
  static _stringFromIterable(charCodes, start, end) {
    if (dart.notNull(start) < 0) dart.throw(new core.RangeError.range(start, 0, charCodes[$length]));
    if (end != null && dart.notNull(end) < dart.notNull(start)) {
      dart.throw(new core.RangeError.range(end, start, charCodes[$length]));
    }
    let it = charCodes[$iterator];
    for (let i = 0; i < dart.notNull(start); i = i + 1) {
      if (!dart.test(it.moveNext())) {
        dart.throw(new core.RangeError.range(start, 0, i));
      }
    }
    let list = JSArrayOfint().of([]);
    if (end == null) {
      while (dart.test(it.moveNext()))
        list[$add](it.current);
    } else {
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        if (!dart.test(it.moveNext())) {
          dart.throw(new core.RangeError.range(end, start, i));
        }
        list[$add](it.current);
      }
    }
    return _js_helper.Primitives.stringFromCharCodes(JSArrayOfint()._check(list));
  }
  static is(o) {
    return typeof o == "string";
  }
  static as(o) {
    if (typeof o == "string" || o == null) return o;
    return dart.as(o, core.String, false);
  }
  static _check(o) {
    if (typeof o == "string" || o == null) return o;
    return dart.as(o, core.String, true);
  }
  static fromCharCodes(charCodes, start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    if (_interceptors.JSArray.is(charCodes)) {
      return core.String._stringFromJSArray(charCodes, start, end);
    }
    if (_native_typed_data.NativeUint8List.is(charCodes)) {
      return core.String._stringFromUint8List(charCodes, start, end);
    }
    return core.String._stringFromIterable(charCodes, start, end);
  }
  static fromCharCode(charCode) {
    return _js_helper.Primitives.stringFromCharCode(charCode);
  }
  static fromEnvironment(name, opts) {
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    dart.throw(new core.UnsupportedError.new("String.fromEnvironment can only be used as a const constructor"));
  }
};
(core.String[dart.mixinNew] = function() {
}).prototype = core.String.prototype;
core.String[dart.implements] = () => [core.Comparable$(core.String), core.Pattern];
dart.setLibraryUri(core.String, "dart:core");
convert._JsonMap = class _JsonMap extends collection.MapBase$(core.String, dart.dynamic) {
  _get(key) {
    if (dart.test(this[_isUpgraded])) {
      return this[_upgradedMap][$_get](key);
    } else if (!(typeof key == 'string')) {
      return null;
    } else {
      let result = convert._JsonMap._getProperty(this[_processed], core.String._check(key));
      if (dart.test(convert._JsonMap._isUnprocessed(result))) result = this[_process$](core.String._check(key));
      return result;
    }
  }
  get length() {
    return dart.test(this[_isUpgraded]) ? this[_upgradedMap][$length] : this[_computeKeys]()[$length];
  }
  get isEmpty() {
    return this.length === 0;
  }
  get isNotEmpty() {
    return dart.notNull(this.length) > 0;
  }
  get keys() {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$keys];
    return new convert._JsonMapKeyIterable.new(this);
  }
  get values() {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$values];
    return MappedIterableOfString$dynamic().new(this[_computeKeys](), dart.fn(each => this._get(each), dynamicTodynamic()));
  }
  _set(key, value$) {
    let value = value$;
    core.String._check(key);
    if (dart.test(this[_isUpgraded])) {
      this[_upgradedMap][$_set](key, value);
    } else if (dart.test(this.containsKey(key))) {
      let processed = this[_processed];
      convert._JsonMap._setProperty(processed, key, value);
      let original = this[_original$];
      if (!core.identical(original, processed)) {
        convert._JsonMap._setProperty(original, key, null);
      }
    } else {
      this[_upgrade]()[$_set](key, value);
    }
    return value$;
  }
  addAll(other) {
    MapOfString$dynamic()._check(other);
    other[$forEach](dart.fn((key, value) => {
      this._set(key, value);
    }, StringAnddynamicToNull()));
  }
  containsValue(value) {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$containsValue](value);
    let keys = this[_computeKeys]();
    for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
      let key = keys[$_get](i);
      if (dart.equals(this._get(key), value)) return true;
    }
    return false;
  }
  containsKey(key) {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$containsKey](key);
    if (!(typeof key == 'string')) return false;
    return convert._JsonMap._hasProperty(this[_original$], core.String._check(key));
  }
  putIfAbsent(key, ifAbsent) {
    core.String._check(key);
    VoidTodynamic()._check(ifAbsent);
    if (dart.test(this.containsKey(key))) return this._get(key);
    let value = ifAbsent();
    this._set(key, value);
    return value;
  }
  remove(key) {
    if (!dart.test(this[_isUpgraded]) && !dart.test(this.containsKey(key))) return null;
    return this[_upgrade]()[$remove](key);
  }
  clear() {
    if (dart.test(this[_isUpgraded])) {
      this[_upgradedMap][$clear]();
    } else {
      if (this[_data] != null) {
        dart.dsend(this[_data], 'clear', []);
      }
      this[_original$] = this[_processed] = null;
      this[_data] = new _js_helper.LinkedMap.new();
    }
  }
  forEach(f) {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$forEach](f);
    let keys = this[_computeKeys]();
    for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
      let key = keys[$_get](i);
      let value = convert._JsonMap._getProperty(this[_processed], key);
      if (dart.test(convert._JsonMap._isUnprocessed(value))) {
        value = convert._convertJsonToDartLazy(convert._JsonMap._getProperty(this[_original$], key));
        convert._JsonMap._setProperty(this[_processed], key, value);
      }
      f(key, value);
      if (!core.identical(keys, this[_data])) {
        dart.throw(new core.ConcurrentModificationError.new(this));
      }
    }
  }
  get [_isUpgraded]() {
    return this[_processed] == null;
  }
  get [_upgradedMap]() {
    if (!dart.test(this[_isUpgraded])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/convert_patch.dart", 269, 12, "_isUpgraded");
    return this[_data];
  }
  [_computeKeys]() {
    if (!!dart.test(this[_isUpgraded])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/convert_patch.dart", 277, 12, "!_isUpgraded");
    let keys = core.List._check(this[_data]);
    if (keys == null) {
      keys = this[_data] = convert._JsonMap._getPropertyNames(this[_original$]);
    }
    return keys;
  }
  [_upgrade]() {
    if (dart.test(this[_isUpgraded])) return this[_upgradedMap];
    let result = new (IdentityMapOfString$dynamic()).new();
    let keys = this[_computeKeys]();
    for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
      let key = keys[$_get](i);
      result[$_set](key, this._get(key));
    }
    if (dart.test(keys[$isEmpty])) {
      keys[$add](null);
    } else {
      keys[$clear]();
    }
    this[_original$] = this[_processed] = null;
    this[_data] = result;
    if (!dart.test(this[_isUpgraded])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/convert_patch.dart", 310, 12, "_isUpgraded");
    return result;
  }
  [_process$](key) {
    if (!dart.test(convert._JsonMap._hasProperty(this[_original$], key))) return null;
    let result = convert._convertJsonToDartLazy(convert._JsonMap._getProperty(this[_original$], key));
    return convert._JsonMap._setProperty(this[_processed], key, result);
  }
  static _hasProperty(object, key) {
    return Object.prototype.hasOwnProperty.call(object, key);
  }
  static _getProperty(object, key) {
    return object[key];
  }
  static _setProperty(object, key, value) {
    return object[key] = value;
  }
  static _getPropertyNames(object) {
    return Object.keys(object);
  }
  static _isUnprocessed(object) {
    return typeof object == "undefined";
  }
  static _newJavaScriptObject() {
    return Object.create(null);
  }
};
(convert._JsonMap.new = function(_original) {
  this[_processed] = convert._JsonMap._newJavaScriptObject();
  this[_data] = null;
  this[_original$] = _original;
  ;
}).prototype = convert._JsonMap.prototype;
;
;
dart.setGetterSignature(convert._JsonMap, () => ({
  __proto__: dart.getGetters(convert._JsonMap.__proto__),
  keys: core.Iterable$(core.String),
  [$keys]: core.Iterable$(core.String),
  [_isUpgraded]: core.bool,
  [_upgradedMap]: core.Map$(core.String, dart.dynamic)
}));
dart.setLibraryUri(convert._JsonMap, "dart:convert");
;
dart.defineExtensionMethods(convert._JsonMap, [
  '_get',
  '_set',
  'addAll',
  'containsValue',
  'containsKey',
  'putIfAbsent',
  'remove',
  'clear',
  'forEach'
]);
dart.defineExtensionAccessors(convert._JsonMap, [
  'length',
  'isEmpty',
  'isNotEmpty',
  'keys',
  'values'
]);
const _parent$ = dart.privateName(convert, "_parent");
convert._JsonMapKeyIterable = class _JsonMapKeyIterable extends _internal.ListIterable$(core.String) {
  get length() {
    return this[_parent$].length;
  }
  elementAt(index) {
    return dart.test(this[_parent$][_isUpgraded]) ? this[_parent$].keys[$elementAt](index) : this[_parent$][_computeKeys]()[$_get](index);
  }
  get iterator() {
    return dart.test(this[_parent$][_isUpgraded]) ? this[_parent$].keys[$iterator] : this[_parent$][_computeKeys]()[$iterator];
  }
  contains(key) {
    return this[_parent$].containsKey(key);
  }
};
(convert._JsonMapKeyIterable.new = function(_parent) {
  this[_parent$] = _parent;
  convert._JsonMapKeyIterable.__proto__.new.call(this);
  ;
}).prototype = convert._JsonMapKeyIterable.prototype;
;
dart.setLibraryUri(convert._JsonMapKeyIterable, "dart:convert");
;
dart.defineExtensionMethods(convert._JsonMapKeyIterable, ['elementAt', 'contains']);
dart.defineExtensionAccessors(convert._JsonMapKeyIterable, ['length', 'iterator']);
const _reviver$ = dart.privateName(convert, "_reviver");
const _sink$0 = dart.privateName(convert, "_sink");
const _stringSink$ = dart.privateName(convert, "_stringSink");
convert.StringConversionSinkMixin = class StringConversionSinkMixin extends core.Object {
  add(str) {
    core.String._check(str);
    this.addSlice(str, 0, str.length, false);
  }
  asUtf8Sink(allowMalformed) {
    return new convert._Utf8ConversionSink.new(this, allowMalformed);
  }
  asStringSink() {
    return new convert._StringConversionSinkAsStringSinkAdapter.new(this);
  }
};
(convert.StringConversionSinkMixin.new = function() {
  ;
}).prototype = convert.StringConversionSinkMixin.prototype;
;
convert.StringConversionSinkMixin[dart.implements] = () => [convert.StringConversionSink];
;
dart.setLibraryUri(convert.StringConversionSinkMixin, "dart:convert");
convert.StringConversionSinkBase = class StringConversionSinkBase extends convert.StringConversionSinkMixin {};
(convert.StringConversionSinkBase.new = function() {
  ;
}).prototype = convert.StringConversionSinkBase.prototype;
;
dart.setLibraryUri(convert.StringConversionSinkBase, "dart:convert");
const _is__StringSinkConversionSink_default = Symbol('_is__StringSinkConversionSink_default');
convert._StringSinkConversionSink$ = dart.generic(TStringSink => {
  class _StringSinkConversionSink extends convert.StringConversionSinkBase {
    close() {
    }
    addSlice(str, start, end, isLast) {
      if (start !== 0 || end !== str.length) {
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          this[_stringSink$].writeCharCode(str[$codeUnitAt](i));
        }
      } else {
        this[_stringSink$].write(str);
      }
      if (dart.test(isLast)) this.close();
    }
    add(str) {
      core.String._check(str);
      this[_stringSink$].write(str);
    }
    asUtf8Sink(allowMalformed) {
      return new convert._Utf8StringSinkAdapter.new(this, this[_stringSink$], allowMalformed);
    }
    asStringSink() {
      return new convert._ClosableStringSink.new(this[_stringSink$], dart.bind(this, 'close'));
    }
  }
  (_StringSinkConversionSink.new = function(_stringSink) {
    this[_stringSink$] = _stringSink;
    ;
  }).prototype = _StringSinkConversionSink.prototype;
  ;
  _StringSinkConversionSink.prototype[_is__StringSinkConversionSink_default] = true;
  ;
  dart.setLibraryUri(_StringSinkConversionSink, "dart:convert");
  ;
  return _StringSinkConversionSink;
});
convert._StringSinkConversionSink = convert._StringSinkConversionSink$();
;
core.StringSink = class StringSink extends core.Object {};
(core.StringSink.new = function() {
  ;
}).prototype = core.StringSink.prototype;
;
dart.setLibraryUri(core.StringSink, "dart:core");
convert._JsonDecoderSink = class _JsonDecoderSink extends convert._StringSinkConversionSink$(core.StringSink) {
  close() {
    super.close();
    let buffer = core.StringBuffer._check(this[_stringSink$]);
    let accumulated = dart.toString(buffer);
    buffer.clear();
    let decoded = convert._parseJson(accumulated, this[_reviver$]);
    this[_sink$0].add(decoded);
    this[_sink$0].close();
  }
};
(convert._JsonDecoderSink.new = function(_reviver, _sink) {
  this[_reviver$] = _reviver;
  this[_sink$0] = _sink;
  convert._JsonDecoderSink.__proto__.new.call(this, new core.StringBuffer.new(""));
  ;
}).prototype = convert._JsonDecoderSink.prototype;
;
dart.setLibraryUri(convert._JsonDecoderSink, "dart:convert");
;
const _allowInvalid = dart.privateName(convert, "_allowInvalid");
const _UnicodeSubsetDecoder__subsetMask = dart.privateName(convert, "_UnicodeSubsetDecoder._subsetMask");
const _UnicodeSubsetDecoder__allowInvalid = dart.privateName(convert, "_UnicodeSubsetDecoder._allowInvalid");
let C142;
let C143;
const _UnicodeSubsetEncoder__subsetMask = dart.privateName(convert, "_UnicodeSubsetEncoder._subsetMask");
let C144;
const _is_Codec_default = Symbol('_is_Codec_default');
convert.Codec$ = dart.generic((S, T) => {
  let _InvertedCodecOfT$S = () => (_InvertedCodecOfT$S = dart.constFn(convert._InvertedCodec$(T, S)))();
  class Codec extends core.Object {
    encode(input) {
      S._check(input);
      return this.encoder.convert(input);
    }
    decode(encoded) {
      T._check(encoded);
      return this.decoder.convert(encoded);
    }
    fuse(R, other) {
      convert.Codec$(T, R)._check(other);
      return new (convert._FusedCodec$(S, T, R)).new(this, other);
    }
    get inverted() {
      return new (_InvertedCodecOfT$S()).new(this);
    }
  }
  (Codec.new = function() {
    ;
  }).prototype = Codec.prototype;
  ;
  Codec.prototype[_is_Codec_default] = true;
  ;
  dart.setGetterSignature(Codec, () => ({
    __proto__: dart.getGetters(Codec.__proto__),
    inverted: convert.Codec$(T, S)
  }));
  dart.setLibraryUri(Codec, "dart:convert");
  return Codec;
});
convert.Codec = convert.Codec$();
;
core.List$ = dart.generic(E => {
  class List extends core.Object {
    static new(_length) {
      let list = null;
      if (_length === void 0) {
        list = [];
      } else {
        let length = _length;
        if (_length == null || length < 0) {
          dart.throw(new core.ArgumentError.new("Length must be a non-negative integer: " + dart.str(_length)));
        }
        list = new Array(length);
        list.fill(null);
        _interceptors.JSArray.markFixedList(list);
      }
      return _interceptors.JSArray$(E).of(list);
    }
    static filled(length, fill, opts) {
      if (length == null) dart.argumentError(length);
      let growable = opts && 'growable' in opts ? opts.growable : false;
      let list = _interceptors.JSArray$(E).of(new Array(length));
      list.fill(fill);
      if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
      return list;
    }
    static from(elements, opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      let list = _interceptors.JSArray$(E).of([]);
      if (core.Iterable$(E).is(elements)) {
        for (let e of elements) {
          list[$add](e);
        }
      } else {
        for (let e of elements) {
          list[$add](E.as(e));
        }
      }
      if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
      return list;
    }
    static of(elements, opts) {
      let growable = opts && 'growable' in opts ? opts.growable : true;
      return core.List$(E).from(elements, {growable: growable});
    }
    static generate(length, generator, opts) {
      let t65;
      let growable = opts && 'growable' in opts ? opts.growable : true;
      let result = null;
      if (dart.test(growable)) {
        result = (t65 = _interceptors.JSArray$(E).of([]), t65[$length] = length, t65);
      } else {
        result = core.List$(E).new(length);
      }
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        result[$_set](i, generator(i));
      }
      return result;
    }
    static unmodifiable(elements) {
      let list = core.List$(E).from(elements);
      _interceptors.JSArray.markUnmodifiableList(list);
      return list;
    }
    static castFrom(S, T, source) {
      return new (_internal.CastList$(S, T)).new(source);
    }
    static copyRange(T, target, at, source, start, end) {
      if (start === void 0) start = null;
      if (end === void 0) end = null;
      start == null ? start = 0 : null;
      end = core.RangeError.checkValidRange(start, end, source[$length]);
      let length = dart.notNull(end) - dart.notNull(start);
      if (dart.notNull(target[$length]) < dart.notNull(at) + length) {
        dart.throw(new core.ArgumentError.value(target, "target", "Not big enough to hold " + dart.str(length) + " elements at position " + dart.str(at)));
      }
      if (source != target || dart.notNull(start) >= dart.notNull(at)) {
        for (let i = 0; i < length; i = i + 1) {
          target[$_set](dart.notNull(at) + i, source[$_get](dart.notNull(start) + i));
        }
      } else {
        for (let i = length; (i = i - 1) >= 0;) {
          target[$_set](dart.notNull(at) + i, source[$_get](dart.notNull(start) + i));
        }
      }
    }
    static writeIterable(T, target, at, source) {
      core.RangeError.checkValueInInterval(at, 0, target[$length], "at");
      let index = at;
      let targetLength = target[$length];
      for (let element of source) {
        if (index == targetLength) {
          dart.throw(new core.IndexError.new(targetLength, target));
        }
        target[$_set](index, element);
        index = dart.notNull(index) + 1;
      }
    }
    [Symbol.iterator]() {
      return new dart.JsIterator(this[$iterator]);
    }
  }
  (List[dart.mixinNew] = function() {
  }).prototype = List.prototype;
  ;
  List.prototype[dart.isList] = true;
  List[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
  dart.setLibraryUri(List, "dart:core");
  return List;
});
core.List = core.List$();
;
convert.Encoding = class Encoding extends convert.Codec$(core.String, core.List$(core.int)) {
  decodeStream(byteStream) {
    return this.decoder.bind(byteStream).fold(core.StringBuffer, new core.StringBuffer.new(), dart.fn((buffer, string) => {
      let t65;
      t65 = buffer;
      t65.write(string);
      return t65;
    }, StringBufferAndStringToStringBuffer())).then(core.String, dart.fn(buffer => dart.toString(buffer), StringBufferToString()));
  }
  static getByName(name) {
    if (name == null) return null;
    name = name[$toLowerCase]();
    return convert.Encoding._nameToEncoding[$_get](name);
  }
};
(convert.Encoding.new = function() {
  convert.Encoding.__proto__.new.call(this);
  ;
}).prototype = convert.Encoding.prototype;
;
;
dart.setLibraryUri(convert.Encoding, "dart:convert");
dart.defineLazy(convert.Encoding, {
  /*convert.Encoding._nameToEncoding*/get _nameToEncoding() {
    return new (IdentityMapOfString$Encoding()).from(["iso_8859-1:1987", convert.latin1, "iso-ir-100", convert.latin1, "iso_8859-1", convert.latin1, "iso-8859-1", convert.latin1, "latin1", convert.latin1, "l1", convert.latin1, "ibm819", convert.latin1, "cp819", convert.latin1, "csisolatin1", convert.latin1, "iso-ir-6", convert.ascii, "ansi_x3.4-1968", convert.ascii, "ansi_x3.4-1986", convert.ascii, "iso_646.irv:1991", convert.ascii, "iso646-us", convert.ascii, "us-ascii", convert.ascii, "us", convert.ascii, "ibm367", convert.ascii, "cp367", convert.ascii, "csascii", convert.ascii, "ascii", convert.ascii, "csutf8", convert.utf8, "utf-8", convert.utf8]);
  }
});
const _allowInvalid$ = dart.privateName(convert, "AsciiCodec._allowInvalid");
convert.AsciiCodec = class AsciiCodec extends convert.Encoding {
  get [_allowInvalid]() {
    return this[_allowInvalid$];
  }
  set [_allowInvalid](value) {
    super[_allowInvalid] = value;
  }
  get name() {
    return "us-ascii";
  }
  encode(source) {
    core.String._check(source);
    return this.encoder.convert(source);
  }
  decode(bytes, opts) {
    ListOfint()._check(bytes);
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
    allowInvalid == null ? allowInvalid = this[_allowInvalid] : null;
    if (dart.test(allowInvalid)) {
      return (C142 || CT.C142).convert(bytes);
    } else {
      return (C143 || CT.C143).convert(bytes);
    }
  }
  get encoder() {
    return C144 || CT.C144;
  }
  get decoder() {
    return dart.test(this[_allowInvalid]) ? C142 || CT.C142 : C143 || CT.C143;
  }
};
(convert.AsciiCodec.new = function(opts) {
  let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
  this[_allowInvalid$] = allowInvalid;
  convert.AsciiCodec.__proto__.new.call(this);
  ;
}).prototype = convert.AsciiCodec.prototype;
;
;
dart.setGetterSignature(convert.AsciiCodec, () => ({
  __proto__: dart.getGetters(convert.AsciiCodec.__proto__),
  name: core.String,
  encoder: convert.AsciiEncoder,
  decoder: convert.AsciiDecoder
}));
dart.setLibraryUri(convert.AsciiCodec, "dart:convert");
;
const _subsetMask$ = dart.privateName(convert, "_subsetMask");
convert._UnicodeSubsetEncoder = class _UnicodeSubsetEncoder extends convert.Converter$(core.String, core.List$(core.int)) {
  get [_subsetMask$]() {
    return this[_subsetMask$0];
  }
  set [_subsetMask$](value) {
    super[_subsetMask$] = value;
  }
  convert(string, start, end) {
    core.String._check(string);
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    let stringLength = string.length;
    end = core.RangeError.checkValidRange(start, end, stringLength);
    let length = dart.notNull(end) - dart.notNull(start);
    let result = _native_typed_data.NativeUint8List.new(length);
    for (let i = 0; i < length; i = i + 1) {
      let codeUnit = string[$codeUnitAt](dart.notNull(start) + i);
      if ((codeUnit & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
        dart.throw(new core.ArgumentError.value(string, "string", "Contains invalid characters."));
      }
      result[$_set](i, codeUnit);
    }
    return result;
  }
  startChunkedConversion(sink) {
    SinkOfListOfint()._check(sink);
    return new convert._UnicodeSubsetEncoderSink.new(this[_subsetMask$], convert.ByteConversionSink.is(sink) ? sink : new convert._ByteAdapterSink.new(sink));
  }
  bind(stream) {
    StreamOfString()._check(stream);
    return super.bind(stream);
  }
};
(convert._UnicodeSubsetEncoder.new = function(_subsetMask) {
  this[_subsetMask$0] = _subsetMask;
  convert._UnicodeSubsetEncoder.__proto__.new.call(this);
  ;
}).prototype = convert._UnicodeSubsetEncoder.prototype;
;
const _subsetMask$0 = _UnicodeSubsetEncoder__subsetMask;
;
dart.setLibraryUri(convert._UnicodeSubsetEncoder, "dart:convert");
;
convert.AsciiEncoder = class AsciiEncoder extends convert._UnicodeSubsetEncoder {};
(convert.AsciiEncoder.new = function() {
  convert.AsciiEncoder.__proto__.new.call(this, 127);
  ;
}).prototype = convert.AsciiEncoder.prototype;
;
dart.setLibraryUri(convert.AsciiEncoder, "dart:convert");
convert._UnicodeSubsetEncoderSink = class _UnicodeSubsetEncoderSink extends convert.StringConversionSinkBase {
  close() {
    this[_sink$0].close();
  }
  addSlice(source, start, end, isLast) {
    core.RangeError.checkValidRange(start, end, source.length);
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let codeUnit = source[$codeUnitAt](i);
      if ((codeUnit & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
        dart.throw(new core.ArgumentError.new("Source contains invalid character with code point: " + dart.str(codeUnit) + "."));
      }
    }
    this[_sink$0].add(source[$codeUnits][$sublist](start, end));
    if (dart.test(isLast)) {
      this.close();
    }
  }
};
(convert._UnicodeSubsetEncoderSink.new = function(_subsetMask, _sink) {
  this[_subsetMask$] = _subsetMask;
  this[_sink$0] = _sink;
  ;
}).prototype = convert._UnicodeSubsetEncoderSink.prototype;
;
;
dart.setLibraryUri(convert._UnicodeSubsetEncoderSink, "dart:convert");
;
const _convertInvalid = dart.privateName(convert, "_convertInvalid");
convert._UnicodeSubsetDecoder = class _UnicodeSubsetDecoder extends convert.Converter$(core.List$(core.int), core.String) {
  get [_allowInvalid]() {
    return this[_allowInvalid$0];
  }
  set [_allowInvalid](value) {
    super[_allowInvalid] = value;
  }
  get [_subsetMask$]() {
    return this[_subsetMask$1];
  }
  set [_subsetMask$](value) {
    super[_subsetMask$] = value;
  }
  convert(bytes, start, end) {
    ListOfint()._check(bytes);
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    let byteCount = bytes[$length];
    core.RangeError.checkValidRange(start, end, byteCount);
    end == null ? end = byteCount : null;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let byte = bytes[$_get](i);
      if ((dart.notNull(byte) & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
        if (!dart.test(this[_allowInvalid])) {
          dart.throw(new core.FormatException.new("Invalid value in input: " + dart.str(byte)));
        }
        return this[_convertInvalid](bytes, start, end);
      }
    }
    return core.String.fromCharCodes(bytes, start, end);
  }
  [_convertInvalid](bytes, start, end) {
    let buffer = new core.StringBuffer.new();
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let value = bytes[$_get](i);
      if ((dart.notNull(value) & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) value = 65533;
      buffer.writeCharCode(value);
    }
    return buffer.toString();
  }
  bind(stream) {
    StreamOfListOfint()._check(stream);
    return super.bind(stream);
  }
};
(convert._UnicodeSubsetDecoder.new = function(_allowInvalid, _subsetMask) {
  this[_allowInvalid$0] = _allowInvalid;
  this[_subsetMask$1] = _subsetMask;
  convert._UnicodeSubsetDecoder.__proto__.new.call(this);
  ;
}).prototype = convert._UnicodeSubsetDecoder.prototype;
;
const _allowInvalid$0 = _UnicodeSubsetDecoder__allowInvalid;
const _subsetMask$1 = _UnicodeSubsetDecoder__subsetMask;
;
dart.setLibraryUri(convert._UnicodeSubsetDecoder, "dart:convert");
;
convert.AsciiDecoder = class AsciiDecoder extends convert._UnicodeSubsetDecoder {
  startChunkedConversion(sink) {
    SinkOfString()._check(sink);
    let stringSink = null;
    if (convert.StringConversionSink.is(sink)) {
      stringSink = sink;
    } else {
      stringSink = new convert._StringAdapterSink.new(sink);
    }
    if (dart.test(this[_allowInvalid])) {
      return new convert._ErrorHandlingAsciiDecoderSink.new(stringSink.asUtf8Sink(false));
    } else {
      return new convert._SimpleAsciiDecoderSink.new(stringSink);
    }
  }
};
(convert.AsciiDecoder.new = function(opts) {
  let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
  convert.AsciiDecoder.__proto__.new.call(this, allowInvalid, 127);
  ;
}).prototype = convert.AsciiDecoder.prototype;
;
;
dart.setLibraryUri(convert.AsciiDecoder, "dart:convert");
const _utf8Sink$ = dart.privateName(convert, "_utf8Sink");
let C145;
const _is_ChunkedConversionSink_default = Symbol('_is_ChunkedConversionSink_default');
convert.ChunkedConversionSink$ = dart.generic(T => {
  class ChunkedConversionSink extends core.Object {}
  (ChunkedConversionSink.new = function() {
    ;
  }).prototype = ChunkedConversionSink.prototype;
  ;
  ChunkedConversionSink.prototype[_is_ChunkedConversionSink_default] = true;
  ChunkedConversionSink[dart.implements] = () => [core.Sink$(T)];
  dart.setLibraryUri(ChunkedConversionSink, "dart:convert");
  return ChunkedConversionSink;
});
convert.ChunkedConversionSink = convert.ChunkedConversionSink$();
;
convert.ByteConversionSink = class ByteConversionSink extends convert.ChunkedConversionSink$(core.List$(core.int)) {};
(convert.ByteConversionSink.new = function() {
  convert.ByteConversionSink.__proto__.new.call(this);
  ;
}).prototype = convert.ByteConversionSink.prototype;
;
dart.setLibraryUri(convert.ByteConversionSink, "dart:convert");
convert.ByteConversionSinkBase = class ByteConversionSinkBase extends convert.ByteConversionSink {
  addSlice(chunk, start, end, isLast) {
    this.add(chunk[$sublist](start, end));
    if (dart.test(isLast)) this.close();
  }
};
(convert.ByteConversionSinkBase.new = function() {
  convert.ByteConversionSinkBase.__proto__.new.call(this);
  ;
}).prototype = convert.ByteConversionSinkBase.prototype;
;
;
dart.setLibraryUri(convert.ByteConversionSinkBase, "dart:convert");
convert._ErrorHandlingAsciiDecoderSink = class _ErrorHandlingAsciiDecoderSink extends convert.ByteConversionSinkBase {
  close() {
    this[_utf8Sink$].close();
  }
  add(source) {
    ListOfint()._check(source);
    this.addSlice(source, 0, source[$length], false);
  }
  addSlice(source, start, end, isLast) {
    core.RangeError.checkValidRange(start, end, source[$length]);
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      if ((dart.notNull(source[$_get](i)) & ~127 >>> 0) !== 0) {
        if (dart.notNull(i) > dart.notNull(start)) this[_utf8Sink$].addSlice(source, start, i, false);
        this[_utf8Sink$].add(C145 || CT.C145);
        start = dart.notNull(i) + 1;
      }
    }
    if (dart.notNull(start) < dart.notNull(end)) {
      this[_utf8Sink$].addSlice(source, start, end, isLast);
    } else if (dart.test(isLast)) {
      this.close();
    }
  }
};
(convert._ErrorHandlingAsciiDecoderSink.new = function(_utf8Sink) {
  this[_utf8Sink$] = _utf8Sink;
  convert._ErrorHandlingAsciiDecoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._ErrorHandlingAsciiDecoderSink.prototype;
;
;
dart.setLibraryUri(convert._ErrorHandlingAsciiDecoderSink, "dart:convert");
;
convert._SimpleAsciiDecoderSink = class _SimpleAsciiDecoderSink extends convert.ByteConversionSinkBase {
  close() {
    this[_sink$0].close();
  }
  add(source) {
    ListOfint()._check(source);
    for (let i = 0; i < dart.notNull(source[$length]); i = i + 1) {
      if ((dart.notNull(source[$_get](i)) & ~127 >>> 0) !== 0) {
        dart.throw(new core.FormatException.new("Source contains non-ASCII bytes."));
      }
    }
    this[_sink$0].add(core.String.fromCharCodes(source));
  }
  addSlice(source, start, end, isLast) {
    let length = source[$length];
    core.RangeError.checkValidRange(start, end, length);
    if (dart.notNull(start) < dart.notNull(end)) {
      if (start !== 0 || end != length) {
        source = source[$sublist](start, end);
      }
      this.add(source);
    }
    if (dart.test(isLast)) this.close();
  }
};
(convert._SimpleAsciiDecoderSink.new = function(_sink) {
  this[_sink$0] = _sink;
  convert._SimpleAsciiDecoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._SimpleAsciiDecoderSink.prototype;
;
;
dart.setLibraryUri(convert._SimpleAsciiDecoderSink, "dart:convert");
;
const Base64Encoder__urlSafe = dart.privateName(convert, "Base64Encoder._urlSafe");
let C146;
let C147;
const _encoder = dart.privateName(convert, "_encoder");
let C148;
const _encoder$ = dart.privateName(convert, "Base64Codec._encoder");
convert.Base64Codec = class Base64Codec extends convert.Codec$(core.List$(core.int), core.String) {
  get [_encoder]() {
    return this[_encoder$];
  }
  set [_encoder](value) {
    super[_encoder] = value;
  }
  get encoder() {
    return this[_encoder];
  }
  get decoder() {
    return C148 || CT.C148;
  }
  decode(encoded) {
    core.String._check(encoded);
    return this.decoder.convert(encoded);
  }
  normalize(source, start, end) {
    let t65, t65$, t65$0;
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    end = core.RangeError.checkValidRange(start, end, source.length);
    let buffer = null;
    let sliceStart = start;
    let alphabet = convert._Base64Encoder._base64Alphabet;
    let inverseAlphabet = convert._Base64Decoder._inverseAlphabet;
    let firstPadding = -1;
    let firstPaddingSourceIndex = -1;
    let paddingCount = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end);) {
      let sliceEnd = i;
      let char = source[$codeUnitAt]((t65 = i, i = dart.notNull(t65) + 1, t65));
      let originalChar = char;
      if (char === 37) {
        if (dart.notNull(i) + 2 <= dart.notNull(end)) {
          char = _internal.parseHexByte(source, i);
          i = dart.notNull(i) + 2;
          if (char === 37) char = -1;
        } else {
          char = -1;
        }
      }
      if (0 <= dart.notNull(char) && dart.notNull(char) <= 127) {
        let value = inverseAlphabet[$_get](char);
        if (dart.notNull(value) >= 0) {
          char = alphabet[$codeUnitAt](value);
          if (char == originalChar) continue;
        } else if (value === -1) {
          if (firstPadding < 0) {
            firstPadding = dart.notNull((t65$0 = (t65$ = buffer, t65$ == null ? null : t65$.length), t65$0 == null ? 0 : t65$0)) + (dart.notNull(sliceEnd) - dart.notNull(sliceStart));
            firstPaddingSourceIndex = sliceEnd;
          }
          paddingCount = paddingCount + 1;
          if (originalChar === 61) continue;
        }
        if (value !== -2) {
          buffer == null ? buffer = new core.StringBuffer.new() : null;
          buffer.write(source[$substring](sliceStart, sliceEnd));
          buffer.writeCharCode(char);
          sliceStart = i;
          continue;
        }
      }
      dart.throw(new core.FormatException.new("Invalid base64 data", source, sliceEnd));
    }
    if (buffer != null) {
      buffer.write(source[$substring](sliceStart, end));
      if (firstPadding >= 0) {
        convert.Base64Codec._checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, buffer.length);
      } else {
        let endLength = (dart.notNull(buffer.length) - 1)[$modulo](4) + 1;
        if (endLength === 1) {
          dart.throw(new core.FormatException.new("Invalid base64 encoding length ", source, end));
        }
        while (endLength < 4) {
          buffer.write("=");
          endLength = endLength + 1;
        }
      }
      return source[$replaceRange](start, end, dart.toString(buffer));
    }
    let length = dart.notNull(end) - dart.notNull(start);
    if (firstPadding >= 0) {
      convert.Base64Codec._checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, length);
    } else {
      let endLength = length[$modulo](4);
      if (endLength === 1) {
        dart.throw(new core.FormatException.new("Invalid base64 encoding length ", source, end));
      }
      if (endLength > 1) {
        source = source[$replaceRange](end, end, endLength === 2 ? "==" : "=");
      }
    }
    return source;
  }
  static _checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, length) {
    if (length[$modulo](4) !== 0) {
      dart.throw(new core.FormatException.new("Invalid base64 padding, padded length must be multiple of four, " + "is " + dart.str(length), source, sourceEnd));
    }
    if (dart.notNull(firstPadding) + dart.notNull(paddingCount) !== length) {
      dart.throw(new core.FormatException.new("Invalid base64 padding, '=' not at the end", source, sourceIndex));
    }
    if (dart.notNull(paddingCount) > 2) {
      dart.throw(new core.FormatException.new("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    }
  }
};
(convert.Base64Codec.new = function() {
  this[_encoder$] = C146 || CT.C146;
  convert.Base64Codec.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Codec.prototype;
(convert.Base64Codec.urlSafe = function() {
  this[_encoder$] = C147 || CT.C147;
  convert.Base64Codec.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Codec.prototype;
;
;
dart.setGetterSignature(convert.Base64Codec, () => ({
  __proto__: dart.getGetters(convert.Base64Codec.__proto__),
  encoder: convert.Base64Encoder,
  decoder: convert.Base64Decoder
}));
dart.setLibraryUri(convert.Base64Codec, "dart:convert");
;
const _urlSafe = dart.privateName(convert, "_urlSafe");
convert.Base64Encoder = class Base64Encoder extends convert.Converter$(core.List$(core.int), core.String) {
  get [_urlSafe]() {
    return this[_urlSafe$];
  }
  set [_urlSafe](value) {
    super[_urlSafe] = value;
  }
  convert(input) {
    ListOfint()._check(input);
    if (dart.test(input[$isEmpty])) return "";
    let encoder = new convert._Base64Encoder.new(this[_urlSafe]);
    let buffer = encoder.encode(input, 0, input[$length], true);
    return core.String.fromCharCodes(buffer);
  }
  startChunkedConversion(sink) {
    SinkOfString()._check(sink);
    if (convert.StringConversionSink.is(sink)) {
      return new convert._Utf8Base64EncoderSink.new(sink.asUtf8Sink(false), this[_urlSafe]);
    }
    return new convert._AsciiBase64EncoderSink.new(sink, this[_urlSafe]);
  }
};
(convert.Base64Encoder.new = function() {
  this[_urlSafe$] = false;
  convert.Base64Encoder.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Encoder.prototype;
(convert.Base64Encoder.urlSafe = function() {
  this[_urlSafe$] = true;
  convert.Base64Encoder.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Encoder.prototype;
;
const _urlSafe$ = Base64Encoder__urlSafe;
;
dart.setLibraryUri(convert.Base64Encoder, "dart:convert");
;
const _state$0 = dart.privateName(convert, "_state");
const _alphabet = dart.privateName(convert, "_alphabet");
convert._Base64Encoder = class _Base64Encoder extends core.Object {
  static _encodeState(count, bits) {
    if (!(dart.notNull(count) <= 3)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 281, 12, "count <= _countMask");
    return (bits[$leftShift](2) | dart.notNull(count)) >>> 0;
  }
  static _stateBits(state) {
    return state[$rightShift](2);
  }
  static _stateCount(state) {
    return (dart.notNull(state) & 3) >>> 0;
  }
  createBuffer(bufferLength) {
    return _native_typed_data.NativeUint8List.new(bufferLength);
  }
  encode(bytes, start, end, isLast) {
    if (!(0 <= dart.notNull(start))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 306, 12, "0 <= start");
    if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 307, 12, "start <= end");
    if (!(bytes == null || dart.notNull(end) <= dart.notNull(bytes[$length]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 308, 12, "bytes == null || end <= bytes.length");
    let length = dart.notNull(end) - dart.notNull(start);
    let count = convert._Base64Encoder._stateCount(this[_state$0]);
    let byteCount = dart.notNull(count) + length;
    let fullChunks = (byteCount / 3)[$truncate]();
    let partialChunkLength = byteCount - fullChunks * 3;
    let bufferLength = fullChunks * 4;
    if (dart.test(isLast) && partialChunkLength > 0) {
      bufferLength = bufferLength + 4;
    }
    let output = this.createBuffer(bufferLength);
    this[_state$0] = convert._Base64Encoder.encodeChunk(this[_alphabet], bytes, start, end, isLast, output, 0, this[_state$0]);
    if (bufferLength > 0) return output;
    return null;
  }
  static encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
    let t65, t65$, t65$0, t65$1;
    let bits = convert._Base64Encoder._stateBits(state);
    let expectedChars = 3 - dart.notNull(convert._Base64Encoder._stateCount(state));
    let byteOr = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let byte = bytes[$_get](i);
      byteOr = (byteOr | dart.notNull(byte)) >>> 0;
      bits = (dart.notNull(bits) << 8 | dart.notNull(byte)) & 16777215;
      expectedChars = expectedChars - 1;
      if (expectedChars === 0) {
        output[$_set]((t65 = outputIndex, outputIndex = dart.notNull(t65) + 1, t65), alphabet[$codeUnitAt]((bits[$rightShift](18) & 63) >>> 0));
        output[$_set]((t65$ = outputIndex, outputIndex = dart.notNull(t65$) + 1, t65$), alphabet[$codeUnitAt]((bits[$rightShift](12) & 63) >>> 0));
        output[$_set]((t65$0 = outputIndex, outputIndex = dart.notNull(t65$0) + 1, t65$0), alphabet[$codeUnitAt]((bits[$rightShift](6) & 63) >>> 0));
        output[$_set]((t65$1 = outputIndex, outputIndex = dart.notNull(t65$1) + 1, t65$1), alphabet[$codeUnitAt]((dart.notNull(bits) & 63) >>> 0));
        expectedChars = 3;
        bits = 0;
      }
    }
    if (byteOr >= 0 && byteOr <= 255) {
      if (dart.test(isLast) && expectedChars < 3) {
        convert._Base64Encoder.writeFinalChunk(alphabet, output, outputIndex, 3 - expectedChars, bits);
        return 0;
      }
      return convert._Base64Encoder._encodeState(3 - expectedChars, bits);
    }
    let i = start;
    while (dart.notNull(i) < dart.notNull(end)) {
      let byte = bytes[$_get](i);
      if (dart.notNull(byte) < 0 || dart.notNull(byte) > 255) break;
      i = dart.notNull(i) + 1;
    }
    dart.throw(new core.ArgumentError.value(bytes, "Not a byte value at index " + dart.str(i) + ": 0x" + bytes[$_get](i)[$toRadixString](16)));
  }
  static writeFinalChunk(alphabet, output, outputIndex, count, bits) {
    let t65, t65$, t65$0, t65$1, t65$2, t65$3, t65$4, t65$5;
    if (!(dart.notNull(count) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 377, 12, "count > 0");
    if (count === 1) {
      output[$_set]((t65 = outputIndex, outputIndex = dart.notNull(t65) + 1, t65), alphabet[$codeUnitAt]((bits[$rightShift](2) & 63) >>> 0));
      output[$_set]((t65$ = outputIndex, outputIndex = dart.notNull(t65$) + 1, t65$), alphabet[$codeUnitAt]((dart.notNull(bits) << 4 & 63) >>> 0));
      output[$_set]((t65$0 = outputIndex, outputIndex = dart.notNull(t65$0) + 1, t65$0), 61);
      output[$_set]((t65$1 = outputIndex, outputIndex = dart.notNull(t65$1) + 1, t65$1), 61);
    } else {
      if (!(count === 2)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 384, 14, "count == 2");
      output[$_set]((t65$2 = outputIndex, outputIndex = dart.notNull(t65$2) + 1, t65$2), alphabet[$codeUnitAt]((bits[$rightShift](10) & 63) >>> 0));
      output[$_set]((t65$3 = outputIndex, outputIndex = dart.notNull(t65$3) + 1, t65$3), alphabet[$codeUnitAt]((bits[$rightShift](4) & 63) >>> 0));
      output[$_set]((t65$4 = outputIndex, outputIndex = dart.notNull(t65$4) + 1, t65$4), alphabet[$codeUnitAt]((dart.notNull(bits) << 2 & 63) >>> 0));
      output[$_set]((t65$5 = outputIndex, outputIndex = dart.notNull(t65$5) + 1, t65$5), 61);
    }
  }
};
(convert._Base64Encoder.new = function(urlSafe) {
  this[_state$0] = 0;
  this[_alphabet] = dart.test(urlSafe) ? convert._Base64Encoder._base64UrlAlphabet : convert._Base64Encoder._base64Alphabet;
  ;
}).prototype = convert._Base64Encoder.prototype;
;
;
dart.setLibraryUri(convert._Base64Encoder, "dart:convert");
;
dart.defineLazy(convert._Base64Encoder, {
  /*convert._Base64Encoder._base64Alphabet*/get _base64Alphabet() {
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  },
  /*convert._Base64Encoder._base64UrlAlphabet*/get _base64UrlAlphabet() {
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  },
  /*convert._Base64Encoder._valueShift*/get _valueShift() {
    return 2;
  },
  /*convert._Base64Encoder._countMask*/get _countMask() {
    return 3;
  },
  /*convert._Base64Encoder._sixBitMask*/get _sixBitMask() {
    return 63;
  }
});
convert._BufferCachingBase64Encoder = class _BufferCachingBase64Encoder extends convert._Base64Encoder {
  createBuffer(bufferLength) {
    if (this.bufferCache == null || dart.notNull(this.bufferCache[$length]) < dart.notNull(bufferLength)) {
      this.bufferCache = _native_typed_data.NativeUint8List.new(bufferLength);
    }
    return typed_data.Uint8List.view(this.bufferCache[$buffer], 0, bufferLength);
  }
};
(convert._BufferCachingBase64Encoder.new = function(urlSafe) {
  this.bufferCache = null;
  convert._BufferCachingBase64Encoder.__proto__.new.call(this, urlSafe);
  ;
}).prototype = convert._BufferCachingBase64Encoder.prototype;
;
dart.setLibraryUri(convert._BufferCachingBase64Encoder, "dart:convert");
;
const _add$0 = dart.privateName(convert, "_add");
convert._Base64EncoderSink = class _Base64EncoderSink extends convert.ByteConversionSinkBase {
  add(source) {
    ListOfint()._check(source);
    this[_add$0](source, 0, source[$length], false);
  }
  close() {
    this[_add$0](null, 0, 0, true);
  }
  addSlice(source, start, end, isLast) {
    if (end == null) dart.throw(new core.ArgumentError.notNull("end"));
    core.RangeError.checkValidRange(start, end, source[$length]);
    this[_add$0](source, start, end, isLast);
  }
};
(convert._Base64EncoderSink.new = function() {
  convert._Base64EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._Base64EncoderSink.prototype;
;
;
dart.setLibraryUri(convert._Base64EncoderSink, "dart:convert");
convert._AsciiBase64EncoderSink = class _AsciiBase64EncoderSink extends convert._Base64EncoderSink {
  [_add$0](source, start, end, isLast) {
    let buffer = this[_encoder].encode(source, start, end, isLast);
    if (buffer != null) {
      let string = core.String.fromCharCodes(buffer);
      this[_sink$0].add(string);
    }
    if (dart.test(isLast)) {
      this[_sink$0].close();
    }
  }
};
(convert._AsciiBase64EncoderSink.new = function(_sink, urlSafe) {
  this[_sink$0] = _sink;
  this[_encoder] = new convert._BufferCachingBase64Encoder.new(urlSafe);
  convert._AsciiBase64EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._AsciiBase64EncoderSink.prototype;
;
;
dart.setLibraryUri(convert._AsciiBase64EncoderSink, "dart:convert");
;
convert._Utf8Base64EncoderSink = class _Utf8Base64EncoderSink extends convert._Base64EncoderSink {
  [_add$0](source, start, end, isLast) {
    let buffer = this[_encoder].encode(source, start, end, isLast);
    if (buffer != null) {
      this[_sink$0].addSlice(buffer, 0, buffer[$length], isLast);
    }
  }
};
(convert._Utf8Base64EncoderSink.new = function(_sink, urlSafe) {
  this[_sink$0] = _sink;
  this[_encoder] = new convert._Base64Encoder.new(urlSafe);
  convert._Utf8Base64EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._Utf8Base64EncoderSink.prototype;
;
;
dart.setLibraryUri(convert._Utf8Base64EncoderSink, "dart:convert");
;
convert.Base64Decoder = class Base64Decoder extends convert.Converter$(core.String, core.List$(core.int)) {
  convert(input, start, end) {
    core.String._check(input);
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    end = core.RangeError.checkValidRange(start, end, input.length);
    if (start == end) return _native_typed_data.NativeUint8List.new(0);
    let decoder = new convert._Base64Decoder.new();
    let buffer = decoder.decode(input, start, end);
    decoder.close(input, end);
    return buffer;
  }
  startChunkedConversion(sink) {
    SinkOfListOfint()._check(sink);
    return new convert._Base64DecoderSink.new(sink);
  }
};
(convert.Base64Decoder.new = function() {
  convert.Base64Decoder.__proto__.new.call(this);
  ;
}).prototype = convert.Base64Decoder.prototype;
;
;
dart.setLibraryUri(convert.Base64Decoder, "dart:convert");
convert._Base64Decoder = class _Base64Decoder extends core.Object {
  static _encodeCharacterState(count, bits) {
    if (!(count === (dart.notNull(count) & 3) >>> 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 561, 12, "count == (count & _countMask)");
    return (bits[$leftShift](2) | dart.notNull(count)) >>> 0;
  }
  static _stateCount(state) {
    if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 567, 12, "state >= 0");
    return (dart.notNull(state) & 3) >>> 0;
  }
  static _stateBits(state) {
    if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 573, 12, "state >= 0");
    return state[$rightShift](2);
  }
  static _encodePaddingState(expectedPadding) {
    if (!(dart.notNull(expectedPadding) >= 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 579, 12, "expectedPadding >= 0");
    if (!(dart.notNull(expectedPadding) <= 5)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 580, 12, "expectedPadding <= 5");
    return -dart.notNull(expectedPadding) - 1;
  }
  static _statePadding(state) {
    if (!(dart.notNull(state) < 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 586, 12, "state < 0");
    return -dart.notNull(state) - 1;
  }
  static _hasSeenPadding(state) {
    return dart.notNull(state) < 0;
  }
  decode(input, start, end) {
    if (!(0 <= dart.notNull(start))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 598, 12, "0 <= start");
    if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 599, 12, "start <= end");
    if (!(dart.notNull(end) <= input.length)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 600, 12, "end <= input.length");
    if (dart.test(convert._Base64Decoder._hasSeenPadding(this[_state$0]))) {
      this[_state$0] = convert._Base64Decoder._checkPadding(input, start, end, this[_state$0]);
      return null;
    }
    if (start == end) return _native_typed_data.NativeUint8List.new(0);
    let buffer = convert._Base64Decoder._allocateBuffer(input, start, end, this[_state$0]);
    this[_state$0] = convert._Base64Decoder.decodeChunk(input, start, end, buffer, 0, this[_state$0]);
    return buffer;
  }
  close(input, end) {
    if (dart.notNull(this[_state$0]) < dart.notNull(convert._Base64Decoder._encodePaddingState(0))) {
      dart.throw(new core.FormatException.new("Missing padding character", input, end));
    }
    if (dart.notNull(this[_state$0]) > 0) {
      dart.throw(new core.FormatException.new("Invalid length, must be multiple of four", input, end));
    }
    this[_state$0] = convert._Base64Decoder._encodePaddingState(0);
  }
  static decodeChunk(input, start, end, output, outIndex, state) {
    let t65, t65$, t65$0, t65$1, t65$2, t65$3;
    if (!!dart.test(convert._Base64Decoder._hasSeenPadding(state))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 630, 12, "!_hasSeenPadding(state)");
    let bits = convert._Base64Decoder._stateBits(state);
    let count = convert._Base64Decoder._stateCount(state);
    let charOr = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = input[$codeUnitAt](i);
      charOr = (charOr | char) >>> 0;
      let code = convert._Base64Decoder._inverseAlphabet[$_get]((char & 127) >>> 0);
      if (dart.notNull(code) >= 0) {
        bits = (bits[$leftShift](6) | dart.notNull(code)) & 16777215;
        count = dart.notNull(count) + 1 & 3;
        if (count === 0) {
          if (!(dart.notNull(outIndex) + 3 <= dart.notNull(output[$length]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 651, 18, "outIndex + 3 <= output.length");
          output[$_set]((t65 = outIndex, outIndex = dart.notNull(t65) + 1, t65), (bits[$rightShift](16) & 255) >>> 0);
          output[$_set]((t65$ = outIndex, outIndex = dart.notNull(t65$) + 1, t65$), (bits[$rightShift](8) & 255) >>> 0);
          output[$_set]((t65$0 = outIndex, outIndex = dart.notNull(t65$0) + 1, t65$0), (dart.notNull(bits) & 255) >>> 0);
          bits = 0;
        }
        continue;
      } else if (code === -1 && dart.notNull(count) > 1) {
        if (charOr < 0 || charOr > 127) break;
        if (count === 3) {
          if ((dart.notNull(bits) & 3) !== 0) {
            dart.throw(new core.FormatException.new("Invalid encoding before padding", input, i));
          }
          output[$_set]((t65$1 = outIndex, outIndex = dart.notNull(t65$1) + 1, t65$1), bits[$rightShift](10));
          output[$_set]((t65$2 = outIndex, outIndex = dart.notNull(t65$2) + 1, t65$2), bits[$rightShift](2));
        } else {
          if ((dart.notNull(bits) & 15) !== 0) {
            dart.throw(new core.FormatException.new("Invalid encoding before padding", input, i));
          }
          output[$_set]((t65$3 = outIndex, outIndex = dart.notNull(t65$3) + 1, t65$3), bits[$rightShift](4));
        }
        let expectedPadding = (3 - dart.notNull(count)) * 3;
        if (char === 37) expectedPadding = expectedPadding + 2;
        state = convert._Base64Decoder._encodePaddingState(expectedPadding);
        return convert._Base64Decoder._checkPadding(input, dart.notNull(i) + 1, end, state);
      }
      dart.throw(new core.FormatException.new("Invalid character", input, i));
    }
    if (charOr >= 0 && charOr <= 127) {
      return convert._Base64Decoder._encodeCharacterState(count, bits);
    }
    let i = null;
    for (let t65$4 = i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = input[$codeUnitAt](i);
      if (char < 0 || char > 127) break;
    }
    dart.throw(new core.FormatException.new("Invalid character", input, i));
  }
  static _allocateBuffer(input, start, end, state) {
    if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 701, 12, "state >= 0");
    let paddingStart = convert._Base64Decoder._trimPaddingChars(input, start, end);
    let length = dart.notNull(convert._Base64Decoder._stateCount(state)) + (dart.notNull(paddingStart) - dart.notNull(start));
    let bufferLength = length[$rightShift](2) * 3;
    let remainderLength = length & 3;
    if (remainderLength !== 0 && dart.notNull(paddingStart) < dart.notNull(end)) {
      bufferLength = bufferLength + (remainderLength - 1);
    }
    if (bufferLength > 0) return _native_typed_data.NativeUint8List.new(bufferLength);
    return null;
  }
  static _trimPaddingChars(input, start, end) {
    let padding = 0;
    let index = end;
    let newEnd = end;
    while (dart.notNull(index) > dart.notNull(start) && padding < 2) {
      index = dart.notNull(index) - 1;
      let char = input[$codeUnitAt](index);
      if (char === 61) {
        padding = padding + 1;
        newEnd = index;
        continue;
      }
      if ((char | 32) >>> 0 === 100) {
        if (index == start) break;
        index = dart.notNull(index) - 1;
        char = input[$codeUnitAt](index);
      }
      if (char === 51) {
        if (index == start) break;
        index = dart.notNull(index) - 1;
        char = input[$codeUnitAt](index);
      }
      if (char === 37) {
        padding = padding + 1;
        newEnd = index;
        continue;
      }
      break;
    }
    return newEnd;
  }
  static _checkPadding(input, start, end, state) {
    if (!dart.test(convert._Base64Decoder._hasSeenPadding(state))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 782, 12, "_hasSeenPadding(state)");
    if (start == end) return state;
    let expectedPadding = convert._Base64Decoder._statePadding(state);
    if (!(dart.notNull(expectedPadding) >= 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 785, 12, "expectedPadding >= 0");
    if (!(dart.notNull(expectedPadding) < 6)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart", 786, 12, "expectedPadding < 6");
    while (dart.notNull(expectedPadding) > 0) {
      let char = input[$codeUnitAt](start);
      if (expectedPadding === 3) {
        if (char === 61) {
          expectedPadding = dart.notNull(expectedPadding) - 3;
          start = dart.notNull(start) + 1;
          break;
        }
        if (char === 37) {
          expectedPadding = dart.notNull(expectedPadding) - 1;
          start = dart.notNull(start) + 1;
          if (start == end) break;
          char = input[$codeUnitAt](start);
        } else {
          break;
        }
      }
      let expectedPartialPadding = expectedPadding;
      if (dart.notNull(expectedPartialPadding) > 3) expectedPartialPadding = dart.notNull(expectedPartialPadding) - 3;
      if (expectedPartialPadding === 2) {
        if (char !== 51) break;
        start = dart.notNull(start) + 1;
        expectedPadding = dart.notNull(expectedPadding) - 1;
        if (start == end) break;
        char = input[$codeUnitAt](start);
      }
      if ((char | 32) >>> 0 !== 100) break;
      start = dart.notNull(start) + 1;
      expectedPadding = dart.notNull(expectedPadding) - 1;
      if (start == end) break;
    }
    if (start != end) {
      dart.throw(new core.FormatException.new("Invalid padding character", input, start));
    }
    return convert._Base64Decoder._encodePaddingState(expectedPadding);
  }
};
(convert._Base64Decoder.new = function() {
  this[_state$0] = 0;
  ;
}).prototype = convert._Base64Decoder.prototype;
;
;
dart.setLibraryUri(convert._Base64Decoder, "dart:convert");
;
dart.defineLazy(convert._Base64Decoder, {
  /*convert._Base64Decoder._valueShift*/get _valueShift() {
    return 2;
  },
  /*convert._Base64Decoder._countMask*/get _countMask() {
    return 3;
  },
  /*convert._Base64Decoder._invalid*/get _invalid() {
    return -2;
  },
  /*convert._Base64Decoder._padding*/get _padding() {
    return -1;
  },
  /*convert._Base64Decoder.___*/get ___() {
    return -2;
  },
  /*convert._Base64Decoder._p*/get _p() {
    return -1;
  },
  /*convert._Base64Decoder._inverseAlphabet*/get _inverseAlphabet() {
    return _native_typed_data.NativeInt8List.fromList(JSArrayOfint().of([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2]));
  },
  /*convert._Base64Decoder._char_percent*/get _char_percent() {
    return 37;
  },
  /*convert._Base64Decoder._char_3*/get _char_3() {
    return 51;
  },
  /*convert._Base64Decoder._char_d*/get _char_d() {
    return 100;
  }
});
const _decoder = dart.privateName(convert, "_decoder");
convert._Base64DecoderSink = class _Base64DecoderSink extends convert.StringConversionSinkBase {
  add(string) {
    core.String._check(string);
    if (string[$isEmpty]) return;
    let buffer = this[_decoder].decode(string, 0, string.length);
    if (buffer != null) this[_sink$0].add(buffer);
  }
  close() {
    this[_decoder].close(null, null);
    this[_sink$0].close();
  }
  addSlice(string, start, end, isLast) {
    end = core.RangeError.checkValidRange(start, end, string.length);
    if (start == end) return;
    let buffer = this[_decoder].decode(string, start, end);
    if (buffer != null) this[_sink$0].add(buffer);
    if (dart.test(isLast)) {
      this[_decoder].close(string, end);
      this[_sink$0].close();
    }
  }
};
(convert._Base64DecoderSink.new = function(_sink) {
  this[_decoder] = new convert._Base64Decoder.new();
  this[_sink$0] = _sink;
  ;
}).prototype = convert._Base64DecoderSink.prototype;
;
;
dart.setLibraryUri(convert._Base64DecoderSink, "dart:convert");
;
convert._ByteAdapterSink = class _ByteAdapterSink extends convert.ByteConversionSinkBase {
  add(chunk) {
    ListOfint()._check(chunk);
    this[_sink$0].add(chunk);
  }
  close() {
    this[_sink$0].close();
  }
};
(convert._ByteAdapterSink.new = function(_sink) {
  this[_sink$0] = _sink;
  convert._ByteAdapterSink.__proto__.new.call(this);
  ;
}).prototype = convert._ByteAdapterSink.prototype;
;
;
dart.setLibraryUri(convert._ByteAdapterSink, "dart:convert");
;
const _buffer = dart.privateName(convert, "_buffer");
const _bufferIndex = dart.privateName(convert, "_bufferIndex");
const _callback$ = dart.privateName(convert, "_callback");
convert._ByteCallbackSink = class _ByteCallbackSink extends convert.ByteConversionSinkBase {
  add(chunk) {
    IterableOfint()._check(chunk);
    let freeCount = dart.notNull(this[_buffer][$length]) - dart.notNull(this[_bufferIndex]);
    if (dart.notNull(chunk[$length]) > freeCount) {
      let oldLength = this[_buffer][$length];
      let newLength = dart.notNull(convert._ByteCallbackSink._roundToPowerOf2(dart.notNull(chunk[$length]) + dart.notNull(oldLength))) * 2;
      let grown = _native_typed_data.NativeUint8List.new(newLength);
      grown[$setRange](0, this[_buffer][$length], this[_buffer]);
      this[_buffer] = grown;
    }
    this[_buffer][$setRange](this[_bufferIndex], dart.notNull(this[_bufferIndex]) + dart.notNull(chunk[$length]), chunk);
    this[_bufferIndex] = dart.notNull(this[_bufferIndex]) + dart.notNull(chunk[$length]);
  }
  static _roundToPowerOf2(v) {
    if (!(dart.notNull(v) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/byte_conversion.dart", 97, 12, "v > 0");
    v = dart.notNull(v) - 1;
    v = (dart.notNull(v) | v[$rightShift](1)) >>> 0;
    v = (dart.notNull(v) | v[$rightShift](2)) >>> 0;
    v = (dart.notNull(v) | v[$rightShift](4)) >>> 0;
    v = (dart.notNull(v) | v[$rightShift](8)) >>> 0;
    v = (dart.notNull(v) | v[$rightShift](16)) >>> 0;
    v = dart.notNull(v) + 1;
    return v;
  }
  close() {
    this[_callback$](this[_buffer][$sublist](0, this[_bufferIndex]));
  }
};
(convert._ByteCallbackSink.new = function(callback) {
  this[_buffer] = _native_typed_data.NativeUint8List.new(1024);
  this[_bufferIndex] = 0;
  this[_callback$] = callback;
  convert._ByteCallbackSink.__proto__.new.call(this);
  ;
}).prototype = convert._ByteCallbackSink.prototype;
;
;
dart.setLibraryUri(convert._ByteCallbackSink, "dart:convert");
;
dart.defineLazy(convert._ByteCallbackSink, {
  /*convert._ByteCallbackSink._INITIAL_BUFFER_SIZE*/get _INITIAL_BUFFER_SIZE() {
    return 1024;
  }
});
const _accumulated = dart.privateName(convert, "_accumulated");
const _is__SimpleCallbackSink_default = Symbol('_is__SimpleCallbackSink_default');
convert._SimpleCallbackSink$ = dart.generic(T => {
  let JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
  class _SimpleCallbackSink extends convert.ChunkedConversionSink$(T) {
    add(chunk) {
      T._check(chunk);
      this[_accumulated][$add](chunk);
    }
    close() {
      this[_callback$](this[_accumulated]);
    }
  }
  (_SimpleCallbackSink.new = function(_callback) {
    this[_accumulated] = JSArrayOfT().of([]);
    this[_callback$] = _callback;
    _SimpleCallbackSink.__proto__.new.call(this);
    ;
  }).prototype = _SimpleCallbackSink.prototype;
  ;
  _SimpleCallbackSink.prototype[_is__SimpleCallbackSink_default] = true;
  ;
  dart.setLibraryUri(_SimpleCallbackSink, "dart:convert");
  ;
  return _SimpleCallbackSink;
});
convert._SimpleCallbackSink = convert._SimpleCallbackSink$();
;
const _eventSink = dart.privateName(convert, "_eventSink");
const _chunkedSink$ = dart.privateName(convert, "_chunkedSink");
const _is__ConverterStreamEventSink_default = Symbol('_is__ConverterStreamEventSink_default');
convert._ConverterStreamEventSink$ = dart.generic((S, T) => {
  class _ConverterStreamEventSink extends core.Object {
    add(o) {
      S._check(o);
      this[_chunkedSink$].add(o);
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      this[_eventSink].addError(error, stackTrace);
    }
    close() {
      this[_chunkedSink$].close();
    }
  }
  (_ConverterStreamEventSink.new = function(converter, sink) {
    this[_eventSink] = sink;
    this[_chunkedSink$] = converter.startChunkedConversion(sink);
    ;
  }).prototype = _ConverterStreamEventSink.prototype;
  ;
  _ConverterStreamEventSink.prototype[_is__ConverterStreamEventSink_default] = true;
  _ConverterStreamEventSink[dart.implements] = () => [async.EventSink$(S)];
  ;
  dart.setLibraryUri(_ConverterStreamEventSink, "dart:convert");
  ;
  return _ConverterStreamEventSink;
});
convert._ConverterStreamEventSink = convert._ConverterStreamEventSink$();
;
const _first$0 = dart.privateName(convert, "_first");
const _second$0 = dart.privateName(convert, "_second");
const _is__FusedCodec_default = Symbol('_is__FusedCodec_default');
convert._FusedCodec$ = dart.generic((S, M, T) => {
  class _FusedCodec extends convert.Codec$(S, T) {
    get encoder() {
      return this[_first$0].encoder.fuse(T, this[_second$0].encoder);
    }
    get decoder() {
      return this[_second$0].decoder.fuse(S, this[_first$0].decoder);
    }
  }
  (_FusedCodec.new = function(_first, _second) {
    this[_first$0] = _first;
    this[_second$0] = _second;
    _FusedCodec.__proto__.new.call(this);
    ;
  }).prototype = _FusedCodec.prototype;
  ;
  _FusedCodec.prototype[_is__FusedCodec_default] = true;
  dart.setGetterSignature(_FusedCodec, () => ({
    __proto__: dart.getGetters(_FusedCodec.__proto__),
    encoder: convert.Converter$(S, T),
    decoder: convert.Converter$(T, S)
  }));
  dart.setLibraryUri(_FusedCodec, "dart:convert");
  ;
  return _FusedCodec;
});
convert._FusedCodec = convert._FusedCodec$();
;
const _codec = dart.privateName(convert, "_codec");
const _is__InvertedCodec_default = Symbol('_is__InvertedCodec_default');
convert._InvertedCodec$ = dart.generic((T, S) => {
  class _InvertedCodec extends convert.Codec$(T, S) {
    get encoder() {
      return this[_codec].decoder;
    }
    get decoder() {
      return this[_codec].encoder;
    }
    get inverted() {
      return this[_codec];
    }
  }
  (_InvertedCodec.new = function(codec) {
    this[_codec] = codec;
    _InvertedCodec.__proto__.new.call(this);
    ;
  }).prototype = _InvertedCodec.prototype;
  ;
  _InvertedCodec.prototype[_is__InvertedCodec_default] = true;
  dart.setGetterSignature(_InvertedCodec, () => ({
    __proto__: dart.getGetters(_InvertedCodec.__proto__),
    encoder: convert.Converter$(T, S),
    decoder: convert.Converter$(S, T)
  }));
  dart.setLibraryUri(_InvertedCodec, "dart:convert");
  ;
  return _InvertedCodec;
});
convert._InvertedCodec = convert._InvertedCodec$();
;
const _is__FusedConverter_default = Symbol('_is__FusedConverter_default');
convert._FusedConverter$ = dart.generic((S, M, T) => {
  let SinkOfT = () => (SinkOfT = dart.constFn(core.Sink$(T)))();
  class _FusedConverter extends convert.Converter$(S, T) {
    convert(input) {
      S._check(input);
      return this[_second$0].convert(this[_first$0].convert(input));
    }
    startChunkedConversion(sink) {
      SinkOfT()._check(sink);
      return this[_first$0].startChunkedConversion(this[_second$0].startChunkedConversion(sink));
    }
  }
  (_FusedConverter.new = function(_first, _second) {
    this[_first$0] = _first;
    this[_second$0] = _second;
    _FusedConverter.__proto__.new.call(this);
    ;
  }).prototype = _FusedConverter.prototype;
  ;
  _FusedConverter.prototype[_is__FusedConverter_default] = true;
  ;
  dart.setLibraryUri(_FusedConverter, "dart:convert");
  ;
  return _FusedConverter;
});
convert._FusedConverter = convert._FusedConverter$();
;
const _name$3 = dart.privateName(convert, "_name");
const _name$4 = dart.privateName(convert, "HtmlEscapeMode._name");
const escapeLtGt$ = dart.privateName(convert, "HtmlEscapeMode.escapeLtGt");
const escapeQuot$ = dart.privateName(convert, "HtmlEscapeMode.escapeQuot");
const escapeApos$ = dart.privateName(convert, "HtmlEscapeMode.escapeApos");
const escapeSlash$ = dart.privateName(convert, "HtmlEscapeMode.escapeSlash");
let C149;
let C150;
let C151;
let C152;
convert.HtmlEscapeMode = class HtmlEscapeMode extends core.Object {
  get [_name$3]() {
    return this[_name$4];
  }
  set [_name$3](value) {
    super[_name$3] = value;
  }
  get escapeLtGt() {
    return this[escapeLtGt$];
  }
  set escapeLtGt(value) {
    super.escapeLtGt = value;
  }
  get escapeQuot() {
    return this[escapeQuot$];
  }
  set escapeQuot(value) {
    super.escapeQuot = value;
  }
  get escapeApos() {
    return this[escapeApos$];
  }
  set escapeApos(value) {
    super.escapeApos = value;
  }
  get escapeSlash() {
    return this[escapeSlash$];
  }
  set escapeSlash(value) {
    super.escapeSlash = value;
  }
  toString() {
    return this[_name$3];
  }
};
(convert.HtmlEscapeMode.__ = function(_name, escapeLtGt, escapeQuot, escapeApos, escapeSlash) {
  this[_name$4] = _name;
  this[escapeLtGt$] = escapeLtGt;
  this[escapeQuot$] = escapeQuot;
  this[escapeApos$] = escapeApos;
  this[escapeSlash$] = escapeSlash;
  ;
}).prototype = convert.HtmlEscapeMode.prototype;
(convert.HtmlEscapeMode.new = function(opts) {
  let name = opts && 'name' in opts ? opts.name : "custom";
  let escapeLtGt = opts && 'escapeLtGt' in opts ? opts.escapeLtGt : false;
  let escapeQuot = opts && 'escapeQuot' in opts ? opts.escapeQuot : false;
  let escapeApos = opts && 'escapeApos' in opts ? opts.escapeApos : false;
  let escapeSlash = opts && 'escapeSlash' in opts ? opts.escapeSlash : false;
  this[escapeLtGt$] = escapeLtGt;
  this[escapeQuot$] = escapeQuot;
  this[escapeApos$] = escapeApos;
  this[escapeSlash$] = escapeSlash;
  this[_name$4] = name;
  ;
}).prototype = convert.HtmlEscapeMode.prototype;
;
dart.setLibraryUri(convert.HtmlEscapeMode, "dart:convert");
;
dart.defineExtensionMethods(convert.HtmlEscapeMode, ['toString']);
dart.defineLazy(convert.HtmlEscapeMode, {
  /*convert.HtmlEscapeMode.unknown*/get unknown() {
    return C149 || CT.C149;
  },
  /*convert.HtmlEscapeMode.attribute*/get attribute() {
    return C150 || CT.C150;
  },
  /*convert.HtmlEscapeMode.sqAttribute*/get sqAttribute() {
    return C151 || CT.C151;
  },
  /*convert.HtmlEscapeMode.element*/get element() {
    return C152 || CT.C152;
  }
});
const _convert = dart.privateName(convert, "_convert");
const mode$ = dart.privateName(convert, "HtmlEscape.mode");
convert.HtmlEscape = class HtmlEscape extends convert.Converter$(core.String, core.String) {
  get mode() {
    return this[mode$];
  }
  set mode(value) {
    super.mode = value;
  }
  convert(text) {
    core.String._check(text);
    let val = this[_convert](text, 0, text.length);
    return val == null ? text : val;
  }
  [_convert](text, start, end) {
    let result = null;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let ch = text[$_get](i);
      let replacement = null;
      switch (ch) {
        case "&":
        {
          replacement = "&amp;";
          break;
        }
        case "\"":
        {
          if (dart.test(this.mode.escapeQuot)) replacement = "&quot;";
          break;
        }
        case "'":
        {
          if (dart.test(this.mode.escapeApos)) replacement = "&#39;";
          break;
        }
        case "<":
        {
          if (dart.test(this.mode.escapeLtGt)) replacement = "&lt;";
          break;
        }
        case ">":
        {
          if (dart.test(this.mode.escapeLtGt)) replacement = "&gt;";
          break;
        }
        case "/":
        {
          if (dart.test(this.mode.escapeSlash)) replacement = "&#47;";
          break;
        }
      }
      if (replacement != null) {
        result == null ? result = new core.StringBuffer.new() : null;
        if (dart.notNull(i) > dart.notNull(start)) result.write(text[$substring](start, i));
        result.write(replacement);
        start = dart.notNull(i) + 1;
      }
    }
    if (result == null) return null;
    if (dart.notNull(end) > dart.notNull(start)) result.write(text[$substring](start, end));
    return dart.toString(result);
  }
  startChunkedConversion(sink) {
    SinkOfString()._check(sink);
    return new convert._HtmlEscapeSink.new(this, convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink));
  }
};
(convert.HtmlEscape.new = function(mode) {
  if (mode === void 0) mode = C149 || CT.C149;
  this[mode$] = mode;
  convert.HtmlEscape.__proto__.new.call(this);
  ;
}).prototype = convert.HtmlEscape.prototype;
;
;
dart.setLibraryUri(convert.HtmlEscape, "dart:convert");
;
const _escape$ = dart.privateName(convert, "_escape");
convert._HtmlEscapeSink = class _HtmlEscapeSink extends convert.StringConversionSinkBase {
  addSlice(chunk, start, end, isLast) {
    let val = this[_escape$][_convert](chunk, start, end);
    if (val == null) {
      this[_sink$0].addSlice(chunk, start, end, isLast);
    } else {
      this[_sink$0].add(val);
      if (dart.test(isLast)) this[_sink$0].close();
    }
  }
  close() {
    this[_sink$0].close();
  }
};
(convert._HtmlEscapeSink.new = function(_escape, _sink) {
  this[_escape$] = _escape;
  this[_sink$0] = _sink;
  ;
}).prototype = convert._HtmlEscapeSink.prototype;
;
;
dart.setLibraryUri(convert._HtmlEscapeSink, "dart:convert");
;
const unsupportedObject$ = dart.privateName(convert, "JsonUnsupportedObjectError.unsupportedObject");
const cause$ = dart.privateName(convert, "JsonUnsupportedObjectError.cause");
const partialResult$ = dart.privateName(convert, "JsonUnsupportedObjectError.partialResult");
convert.JsonUnsupportedObjectError = class JsonUnsupportedObjectError extends core.Error {
  get unsupportedObject() {
    return this[unsupportedObject$];
  }
  set unsupportedObject(value) {
    super.unsupportedObject = value;
  }
  get cause() {
    return this[cause$];
  }
  set cause(value) {
    super.cause = value;
  }
  get partialResult() {
    return this[partialResult$];
  }
  set partialResult(value) {
    super.partialResult = value;
  }
  toString() {
    let safeString = core.Error.safeToString(this.unsupportedObject);
    let prefix = null;
    if (this.cause != null) {
      prefix = "Converting object to an encodable object failed:";
    } else {
      prefix = "Converting object did not return an encodable object:";
    }
    return dart.str(prefix) + " " + dart.str(safeString);
  }
};
(convert.JsonUnsupportedObjectError.new = function(unsupportedObject, opts) {
  let cause = opts && 'cause' in opts ? opts.cause : null;
  let partialResult = opts && 'partialResult' in opts ? opts.partialResult : null;
  this[unsupportedObject$] = unsupportedObject;
  this[cause$] = cause;
  this[partialResult$] = partialResult;
  convert.JsonUnsupportedObjectError.__proto__.new.call(this);
  ;
}).prototype = convert.JsonUnsupportedObjectError.prototype;
;
dart.setLibraryUri(convert.JsonUnsupportedObjectError, "dart:convert");
;
dart.defineExtensionMethods(convert.JsonUnsupportedObjectError, ['toString']);
convert.JsonCyclicError = class JsonCyclicError extends convert.JsonUnsupportedObjectError {
  toString() {
    return "Cyclic error in JSON stringify";
  }
};
(convert.JsonCyclicError.new = function(object) {
  convert.JsonCyclicError.__proto__.new.call(this, object);
  ;
}).prototype = convert.JsonCyclicError.prototype;
;
dart.setLibraryUri(convert.JsonCyclicError, "dart:convert");
dart.defineExtensionMethods(convert.JsonCyclicError, ['toString']);
const _toEncodable$ = dart.privateName(convert, "_toEncodable");
const JsonEncoder__toEncodable = dart.privateName(convert, "JsonEncoder._toEncodable");
const JsonEncoder_indent = dart.privateName(convert, "JsonEncoder.indent");
let C153;
const JsonDecoder__reviver = dart.privateName(convert, "JsonDecoder._reviver");
let C154;
const _reviver = dart.privateName(convert, "JsonCodec._reviver");
const _toEncodable = dart.privateName(convert, "JsonCodec._toEncodable");
convert.JsonCodec = class JsonCodec extends convert.Codec$(core.Object, core.String) {
  get [_reviver$]() {
    return this[_reviver];
  }
  set [_reviver$](value) {
    super[_reviver$] = value;
  }
  get [_toEncodable$]() {
    return this[_toEncodable];
  }
  set [_toEncodable$](value) {
    super[_toEncodable$] = value;
  }
  decode(source, opts) {
    core.String._check(source);
    let reviver = opts && 'reviver' in opts ? opts.reviver : null;
    reviver == null ? reviver = this[_reviver$] : null;
    if (reviver == null) return this.decoder.convert(source);
    return new convert.JsonDecoder.new(reviver).convert(source);
  }
  encode(value, opts) {
    let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
    toEncodable == null ? toEncodable = this[_toEncodable$] : null;
    if (toEncodable == null) return this.encoder.convert(value);
    return new convert.JsonEncoder.new(toEncodable).convert(value);
  }
  get encoder() {
    if (this[_toEncodable$] == null) return C153 || CT.C153;
    return new convert.JsonEncoder.new(this[_toEncodable$]);
  }
  get decoder() {
    if (this[_reviver$] == null) return C154 || CT.C154;
    return new convert.JsonDecoder.new(this[_reviver$]);
  }
};
(convert.JsonCodec.new = function(opts) {
  let reviver = opts && 'reviver' in opts ? opts.reviver : null;
  let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
  this[_reviver] = reviver;
  this[_toEncodable] = toEncodable;
  convert.JsonCodec.__proto__.new.call(this);
  ;
}).prototype = convert.JsonCodec.prototype;
(convert.JsonCodec.withReviver = function(reviver) {
  convert.JsonCodec.new.call(this, {reviver: reviver});
}).prototype = convert.JsonCodec.prototype;
;
;
dart.setGetterSignature(convert.JsonCodec, () => ({
  __proto__: dart.getGetters(convert.JsonCodec.__proto__),
  encoder: convert.JsonEncoder,
  decoder: convert.JsonDecoder
}));
dart.setLibraryUri(convert.JsonCodec, "dart:convert");
;
convert.JsonEncoder = class JsonEncoder extends convert.Converter$(core.Object, core.String) {
  get indent() {
    return this[indent$];
  }
  set indent(value) {
    super.indent = value;
  }
  get [_toEncodable$]() {
    return this[_toEncodable$0];
  }
  set [_toEncodable$](value) {
    super[_toEncodable$] = value;
  }
  convert(object) {
    return convert._JsonStringStringifier.stringify(object, this[_toEncodable$], this.indent);
  }
  startChunkedConversion(sink) {
    SinkOfString()._check(sink);
    if (convert._Utf8EncoderSink.is(sink)) {
      return new convert._JsonUtf8EncoderSink.new(sink[_sink$0], this[_toEncodable$], convert.JsonUtf8Encoder._utf8Encode(this.indent), 256);
    }
    return new convert._JsonEncoderSink.new(convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink), this[_toEncodable$], this.indent);
  }
  bind(stream) {
    StreamOfObject()._check(stream);
    return super.bind(stream);
  }
  fuse(T, other) {
    convert.Converter$(core.String, T)._check(other);
    if (convert.Utf8Encoder.is(other)) {
      return convert.Converter$(core.Object, T)._check(new convert.JsonUtf8Encoder.new(this.indent, this[_toEncodable$]));
    }
    return super.fuse(T, other);
  }
};
(convert.JsonEncoder.new = function(toEncodable) {
  if (toEncodable === void 0) toEncodable = null;
  this[indent$] = null;
  this[_toEncodable$0] = toEncodable;
  convert.JsonEncoder.__proto__.new.call(this);
  ;
}).prototype = convert.JsonEncoder.prototype;
(convert.JsonEncoder.withIndent = function(indent, toEncodable) {
  if (toEncodable === void 0) toEncodable = null;
  this[indent$] = indent;
  this[_toEncodable$0] = toEncodable;
  convert.JsonEncoder.__proto__.new.call(this);
  ;
}).prototype = convert.JsonEncoder.prototype;
;
const indent$ = JsonEncoder_indent;
const _toEncodable$0 = JsonEncoder__toEncodable;
;
dart.setLibraryUri(convert.JsonEncoder, "dart:convert");
;
const _indent$ = dart.privateName(convert, "_indent");
const _bufferSize$ = dart.privateName(convert, "_bufferSize");
convert.JsonUtf8Encoder = class JsonUtf8Encoder extends convert.Converter$(core.Object, core.List$(core.int)) {
  static _utf8Encode(string) {
    if (string == null) return null;
    if (string[$isEmpty]) return _native_typed_data.NativeUint8List.new(0);
    L0: {
      for (let i = 0; i < string.length; i = i + 1) {
        if (string[$codeUnitAt](i) >= 128) break L0;
      }
      return string[$codeUnits];
    }
    return convert.utf8.encode(string);
  }
  convert(object) {
    let bytes = JSArrayOfListOfint().of([]);
    function addChunk(chunk, start, end) {
      if (dart.notNull(start) > 0 || dart.notNull(end) < dart.notNull(chunk[$length])) {
        let length = dart.notNull(end) - dart.notNull(start);
        chunk = typed_data.Uint8List.view(chunk[$buffer], dart.notNull(chunk[$offsetInBytes]) + dart.notNull(start), length);
      }
      bytes[$add](chunk);
    }
    dart.fn(addChunk, Uint8ListAndintAndintTovoid());
    convert._JsonUtf8Stringifier.stringify(object, this[_indent$], this[_toEncodable$], this[_bufferSize$], addChunk);
    if (bytes[$length] === 1) return bytes[$_get](0);
    let length = 0;
    for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      length = length + dart.notNull(bytes[$_get](i)[$length]);
    }
    let result = _native_typed_data.NativeUint8List.new(length);
    for (let i = 0, offset = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      let byteList = bytes[$_get](i);
      let end = offset + dart.notNull(byteList[$length]);
      result[$setRange](offset, end, byteList);
      offset = end;
    }
    return result;
  }
  startChunkedConversion(sink) {
    SinkOfListOfint()._check(sink);
    let byteSink = null;
    if (convert.ByteConversionSink.is(sink)) {
      byteSink = sink;
    } else {
      byteSink = new convert._ByteAdapterSink.new(sink);
    }
    return new convert._JsonUtf8EncoderSink.new(byteSink, this[_toEncodable$], this[_indent$], this[_bufferSize$]);
  }
  bind(stream) {
    StreamOfObject()._check(stream);
    return super.bind(stream);
  }
};
(convert.JsonUtf8Encoder.new = function(indent, toEncodable, bufferSize) {
  if (indent === void 0) indent = null;
  if (toEncodable === void 0) toEncodable = null;
  if (bufferSize === void 0) bufferSize = 256;
  this[_indent$] = convert.JsonUtf8Encoder._utf8Encode(indent);
  this[_toEncodable$] = toEncodable;
  this[_bufferSize$] = bufferSize;
  convert.JsonUtf8Encoder.__proto__.new.call(this);
  ;
}).prototype = convert.JsonUtf8Encoder.prototype;
;
;
dart.setLibraryUri(convert.JsonUtf8Encoder, "dart:convert");
;
dart.defineLazy(convert.JsonUtf8Encoder, {
  /*convert.JsonUtf8Encoder._defaultBufferSize*/get _defaultBufferSize() {
    return 256;
  },
  /*convert.JsonUtf8Encoder.DEFAULT_BUFFER_SIZE*/get DEFAULT_BUFFER_SIZE() {
    return 256;
  }
});
const _isDone = dart.privateName(convert, "_isDone");
convert._JsonEncoderSink = class _JsonEncoderSink extends convert.ChunkedConversionSink$(core.Object) {
  add(o) {
    if (dart.test(this[_isDone])) {
      dart.throw(new core.StateError.new("Only one call to add allowed"));
    }
    this[_isDone] = true;
    let stringSink = this[_sink$0].asStringSink();
    convert._JsonStringStringifier.printOn(o, stringSink, this[_toEncodable$], this[_indent$]);
    stringSink.close();
  }
  close() {
  }
};
(convert._JsonEncoderSink.new = function(_sink, _toEncodable, _indent) {
  this[_isDone] = false;
  this[_sink$0] = _sink;
  this[_toEncodable$] = _toEncodable;
  this[_indent$] = _indent;
  convert._JsonEncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._JsonEncoderSink.prototype;
;
;
dart.setLibraryUri(convert._JsonEncoderSink, "dart:convert");
;
const _addChunk = dart.privateName(convert, "_addChunk");
convert._JsonUtf8EncoderSink = class _JsonUtf8EncoderSink extends convert.ChunkedConversionSink$(core.Object) {
  [_addChunk](chunk, start, end) {
    this[_sink$0].addSlice(chunk, start, end, false);
  }
  add(object) {
    if (dart.test(this[_isDone])) {
      dart.throw(new core.StateError.new("Only one call to add allowed"));
    }
    this[_isDone] = true;
    convert._JsonUtf8Stringifier.stringify(object, this[_indent$], this[_toEncodable$], this[_bufferSize$], dart.bind(this, _addChunk));
    this[_sink$0].close();
  }
  close() {
    if (!dart.test(this[_isDone])) {
      this[_isDone] = true;
      this[_sink$0].close();
    }
  }
};
(convert._JsonUtf8EncoderSink.new = function(_sink, _toEncodable, _indent, _bufferSize) {
  this[_isDone] = false;
  this[_sink$0] = _sink;
  this[_toEncodable$] = _toEncodable;
  this[_indent$] = _indent;
  this[_bufferSize$] = _bufferSize;
  convert._JsonUtf8EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._JsonUtf8EncoderSink.prototype;
;
;
dart.setLibraryUri(convert._JsonUtf8EncoderSink, "dart:convert");
;
convert.JsonDecoder = class JsonDecoder extends convert.Converter$(core.String, core.Object) {
  get [_reviver$]() {
    return this[_reviver$0];
  }
  set [_reviver$](value) {
    super[_reviver$] = value;
  }
  convert(input) {
    core.String._check(input);
    return convert._parseJson(input, this[_reviver$]);
  }
  startChunkedConversion(sink) {
    return new convert._JsonDecoderSink.new(this[_reviver$], sink);
  }
  bind(stream) {
    StreamOfString()._check(stream);
    return super.bind(stream);
  }
};
(convert.JsonDecoder.new = function(reviver) {
  if (reviver === void 0) reviver = null;
  this[_reviver$0] = reviver;
  convert.JsonDecoder.__proto__.new.call(this);
  ;
}).prototype = convert.JsonDecoder.prototype;
;
const _reviver$0 = JsonDecoder__reviver;
;
dart.setLibraryUri(convert.JsonDecoder, "dart:convert");
;
const _seen = dart.privateName(convert, "_seen");
let C155;
const _checkCycle = dart.privateName(convert, "_checkCycle");
const _removeSeen = dart.privateName(convert, "_removeSeen");
const _partialResult = dart.privateName(convert, "_partialResult");
convert._JsonStringifier = class _JsonStringifier extends core.Object {
  static hexDigit(x) {
    return dart.notNull(x) < 10 ? 48 + dart.notNull(x) : 87 + dart.notNull(x);
  }
  writeStringContent(s) {
    let offset = 0;
    let length = s.length;
    for (let i = 0; i < length; i = i + 1) {
      let charCode = s[$codeUnitAt](i);
      if (charCode > 92) continue;
      if (charCode < 32) {
        if (i > offset) this.writeStringSlice(s, offset, i);
        offset = i + 1;
        this.writeCharCode(92);
        switch (charCode) {
          case 8:
          {
            this.writeCharCode(98);
            break;
          }
          case 9:
          {
            this.writeCharCode(116);
            break;
          }
          case 10:
          {
            this.writeCharCode(110);
            break;
          }
          case 12:
          {
            this.writeCharCode(102);
            break;
          }
          case 13:
          {
            this.writeCharCode(114);
            break;
          }
          default:
          {
            this.writeCharCode(117);
            this.writeCharCode(48);
            this.writeCharCode(48);
            this.writeCharCode(convert._JsonStringifier.hexDigit(charCode >> 4 & 15));
            this.writeCharCode(convert._JsonStringifier.hexDigit(charCode & 15));
            break;
          }
        }
      } else if (charCode === 34 || charCode === 92) {
        if (i > offset) this.writeStringSlice(s, offset, i);
        offset = i + 1;
        this.writeCharCode(92);
        this.writeCharCode(charCode);
      }
    }
    if (offset === 0) {
      this.writeString(s);
    } else if (offset < length) {
      this.writeStringSlice(s, offset, length);
    }
  }
  [_checkCycle](object) {
    for (let i = 0; i < dart.notNull(this[_seen][$length]); i = i + 1) {
      if (core.identical(object, this[_seen][$_get](i))) {
        dart.throw(new convert.JsonCyclicError.new(object));
      }
    }
    this[_seen][$add](object);
  }
  [_removeSeen](object) {
    if (!dart.test(this[_seen][$isNotEmpty])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/json.dart", 627, 12, "_seen.isNotEmpty");
    if (!core.identical(this[_seen][$last], object)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/json.dart", 628, 12, "identical(_seen.last, object)");
    this[_seen][$removeLast]();
  }
  writeObject(object) {
    if (dart.test(this.writeJsonValue(object))) return;
    this[_checkCycle](object);
    try {
      let customJson = this[_toEncodable$](object);
      if (!dart.test(this.writeJsonValue(customJson))) {
        dart.throw(new convert.JsonUnsupportedObjectError.new(object, {partialResult: this[_partialResult]}));
      }
      this[_removeSeen](object);
    } catch (e$) {
      let e = dart.getThrown(e$);
      dart.throw(new convert.JsonUnsupportedObjectError.new(object, {cause: e, partialResult: this[_partialResult]}));
    }
  }
  writeJsonValue(object) {
    if (typeof object == 'number') {
      if (!object[$isFinite]) return false;
      this.writeNumber(object);
      return true;
    } else if (object === true) {
      this.writeString("true");
      return true;
    } else if (object === false) {
      this.writeString("false");
      return true;
    } else if (object == null) {
      this.writeString("null");
      return true;
    } else if (typeof object == 'string') {
      this.writeString("\"");
      this.writeStringContent(object);
      this.writeString("\"");
      return true;
    } else if (core.List.is(object)) {
      this[_checkCycle](object);
      this.writeList(object);
      this[_removeSeen](object);
      return true;
    } else if (core.Map.is(object)) {
      this[_checkCycle](object);
      let success = this.writeMap(object);
      this[_removeSeen](object);
      return success;
    } else {
      return false;
    }
  }
  writeList(list) {
    this.writeString("[");
    if (dart.test(list[$isNotEmpty])) {
      this.writeObject(list[$_get](0));
      for (let i = 1; i < dart.notNull(list[$length]); i = i + 1) {
        this.writeString(",");
        this.writeObject(list[$_get](i));
      }
    }
    this.writeString("]");
  }
  writeMap(map) {
    if (dart.test(map[$isEmpty])) {
      this.writeString("{}");
      return true;
    }
    let keyValueList = core.List.new(dart.notNull(map[$length]) * 2);
    let i = 0;
    let allStringKeys = true;
    map[$forEach](dart.fn((key, value) => {
      let t67, t67$;
      if (!(typeof key == 'string')) {
        allStringKeys = false;
      }
      keyValueList[$_set]((t67 = i, i = t67 + 1, t67), key);
      keyValueList[$_set]((t67$ = i, i = t67$ + 1, t67$), value);
    }, dynamicAnddynamicToNull()));
    if (!allStringKeys) return false;
    this.writeString("{");
    let separator = "\"";
    for (let i = 0; i < dart.notNull(keyValueList[$length]); i = i + 2) {
      this.writeString(separator);
      separator = ",\"";
      this.writeStringContent(core.String._check(keyValueList[$_get](i)));
      this.writeString("\":");
      this.writeObject(keyValueList[$_get](i + 1));
    }
    this.writeString("}");
    return true;
  }
};
(convert._JsonStringifier.new = function(toEncodable) {
  let t66;
  this[_seen] = [];
  this[_toEncodable$] = (t66 = toEncodable, t66 == null ? C155 || CT.C155 : t66);
  ;
}).prototype = convert._JsonStringifier.prototype;
;
;
dart.setLibraryUri(convert._JsonStringifier, "dart:convert");
;
dart.defineLazy(convert._JsonStringifier, {
  /*convert._JsonStringifier.backspace*/get backspace() {
    return 8;
  },
  /*convert._JsonStringifier.tab*/get tab() {
    return 9;
  },
  /*convert._JsonStringifier.newline*/get newline() {
    return 10;
  },
  /*convert._JsonStringifier.carriageReturn*/get carriageReturn() {
    return 13;
  },
  /*convert._JsonStringifier.formFeed*/get formFeed() {
    return 12;
  },
  /*convert._JsonStringifier.quote*/get quote() {
    return 34;
  },
  /*convert._JsonStringifier.char_0*/get char_0() {
    return 48;
  },
  /*convert._JsonStringifier.backslash*/get backslash() {
    return 92;
  },
  /*convert._JsonStringifier.char_b*/get char_b() {
    return 98;
  },
  /*convert._JsonStringifier.char_f*/get char_f() {
    return 102;
  },
  /*convert._JsonStringifier.char_n*/get char_n() {
    return 110;
  },
  /*convert._JsonStringifier.char_r*/get char_r() {
    return 114;
  },
  /*convert._JsonStringifier.char_t*/get char_t() {
    return 116;
  },
  /*convert._JsonStringifier.char_u*/get char_u() {
    return 117;
  }
});
const _indentLevel = dart.privateName(convert, "_indentLevel");
convert._JsonPrettyPrintMixin = class _JsonPrettyPrintMixin extends core.Object {
  writeList(list) {
    if (dart.test(list[$isEmpty])) {
      this.writeString("[]");
    } else {
      this.writeString("[\n");
      this[_indentLevel] = dart.notNull(this[_indentLevel]) + 1;
      this.writeIndentation(this[_indentLevel]);
      this.writeObject(list[$_get](0));
      for (let i = 1; i < dart.notNull(list[$length]); i = i + 1) {
        this.writeString(",\n");
        this.writeIndentation(this[_indentLevel]);
        this.writeObject(list[$_get](i));
      }
      this.writeString("\n");
      this[_indentLevel] = dart.notNull(this[_indentLevel]) - 1;
      this.writeIndentation(this[_indentLevel]);
      this.writeString("]");
    }
  }
  writeMap(map) {
    if (dart.test(map[$isEmpty])) {
      this.writeString("{}");
      return true;
    }
    let keyValueList = core.List.new(dart.notNull(map[$length]) * 2);
    let i = 0;
    let allStringKeys = true;
    map[$forEach](dart.fn((key, value) => {
      let t67, t67$;
      if (!(typeof key == 'string')) {
        allStringKeys = false;
      }
      keyValueList[$_set]((t67 = i, i = t67 + 1, t67), key);
      keyValueList[$_set]((t67$ = i, i = t67$ + 1, t67$), value);
    }, dynamicAnddynamicToNull()));
    if (!allStringKeys) return false;
    this.writeString("{\n");
    this[_indentLevel] = dart.notNull(this[_indentLevel]) + 1;
    let separator = "";
    for (let i = 0; i < dart.notNull(keyValueList[$length]); i = i + 2) {
      this.writeString(separator);
      separator = ",\n";
      this.writeIndentation(this[_indentLevel]);
      this.writeString("\"");
      this.writeStringContent(core.String._check(keyValueList[$_get](i)));
      this.writeString("\": ");
      this.writeObject(keyValueList[$_get](i + 1));
    }
    this.writeString("\n");
    this[_indentLevel] = dart.notNull(this[_indentLevel]) - 1;
    this.writeIndentation(this[_indentLevel]);
    this.writeString("}");
    return true;
  }
};
(convert._JsonPrettyPrintMixin.new = function() {
  this[_indentLevel] = 0;
  ;
}).prototype = convert._JsonPrettyPrintMixin.prototype;
;
convert._JsonPrettyPrintMixin[dart.implements] = () => [convert._JsonStringifier];
;
dart.setLibraryUri(convert._JsonPrettyPrintMixin, "dart:convert");
;
convert._JsonStringStringifier = class _JsonStringStringifier extends convert._JsonStringifier {
  static stringify(object, toEncodable, indent) {
    let output = new core.StringBuffer.new();
    convert._JsonStringStringifier.printOn(object, output, toEncodable, indent);
    return output.toString();
  }
  static printOn(object, output, toEncodable, indent) {
    let stringifier = null;
    if (indent == null) {
      stringifier = new convert._JsonStringStringifier.new(output, toEncodable);
    } else {
      stringifier = new convert._JsonStringStringifierPretty.new(output, toEncodable, indent);
    }
    stringifier.writeObject(object);
  }
  get [_partialResult]() {
    return core.StringBuffer.is(this[_sink$0]) ? dart.toString(this[_sink$0]) : null;
  }
  writeNumber(number) {
    this[_sink$0].write(dart.toString(number));
  }
  writeString(string) {
    this[_sink$0].write(string);
  }
  writeStringSlice(string, start, end) {
    this[_sink$0].write(string[$substring](start, end));
  }
  writeCharCode(charCode) {
    this[_sink$0].writeCharCode(charCode);
  }
};
(convert._JsonStringStringifier.new = function(_sink, _toEncodable) {
  this[_sink$0] = _sink;
  convert._JsonStringStringifier.__proto__.new.call(this, _toEncodable);
  ;
}).prototype = convert._JsonStringStringifier.prototype;
;
;
dart.setGetterSignature(convert._JsonStringStringifier, () => ({
  __proto__: dart.getGetters(convert._JsonStringStringifier.__proto__),
  [_partialResult]: core.String
}));
dart.setLibraryUri(convert._JsonStringStringifier, "dart:convert");
;
const _JsonStringStringifier__JsonPrettyPrintMixin$36 = class _JsonStringStringifier__JsonPrettyPrintMixin extends convert._JsonStringStringifier {};
(_JsonStringStringifier__JsonPrettyPrintMixin$36.new = function(_sink, _toEncodable) {
  convert._JsonPrettyPrintMixin.new.call(this);
  _JsonStringStringifier__JsonPrettyPrintMixin$36.__proto__.new.call(this, _sink, _toEncodable);
}).prototype = _JsonStringStringifier__JsonPrettyPrintMixin$36.prototype;
dart.applyMixin(_JsonStringStringifier__JsonPrettyPrintMixin$36, convert._JsonPrettyPrintMixin);
convert._JsonStringStringifierPretty = class _JsonStringStringifierPretty extends _JsonStringStringifier__JsonPrettyPrintMixin$36 {
  writeIndentation(count) {
    for (let i = 0; i < dart.notNull(count); i = i + 1)
      this.writeString(this[_indent$]);
  }
};
(convert._JsonStringStringifierPretty.new = function(sink, toEncodable, _indent) {
  this[_indent$] = _indent;
  convert._JsonStringStringifierPretty.__proto__.new.call(this, sink, toEncodable);
  ;
}).prototype = convert._JsonStringStringifierPretty.prototype;
;
;
dart.setLibraryUri(convert._JsonStringStringifierPretty, "dart:convert");
;
convert._JsonUtf8Stringifier = class _JsonUtf8Stringifier extends convert._JsonStringifier {
  static stringify(object, indent, toEncodable, bufferSize, addChunk) {
    let stringifier = null;
    if (indent != null) {
      stringifier = new convert._JsonUtf8StringifierPretty.new(toEncodable, indent, bufferSize, addChunk);
    } else {
      stringifier = new convert._JsonUtf8Stringifier.new(toEncodable, bufferSize, addChunk);
    }
    stringifier.writeObject(object);
    stringifier.flush();
  }
  flush() {
    if (dart.notNull(this.index) > 0) {
      this.addChunk(this.buffer, 0, this.index);
    }
    this.buffer = null;
    this.index = 0;
  }
  get [_partialResult]() {
    return null;
  }
  writeNumber(number) {
    this.writeAsciiString(dart.toString(number));
  }
  writeAsciiString(string) {
    for (let i = 0; i < string.length; i = i + 1) {
      let char = string[$codeUnitAt](i);
      if (!(char <= 127)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/json.dart", 928, 14, "char <= 0x7f");
      this.writeByte(char);
    }
  }
  writeString(string) {
    this.writeStringSlice(string, 0, string.length);
  }
  writeStringSlice(string, start, end) {
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = string[$codeUnitAt](i);
      if (char <= 127) {
        this.writeByte(char);
      } else {
        if ((char & 64512) === 55296 && dart.notNull(i) + 1 < dart.notNull(end)) {
          let nextChar = string[$codeUnitAt](dart.notNull(i) + 1);
          if ((nextChar & 64512) === 56320) {
            char = 65536 + ((char & 1023) << 10) + (nextChar & 1023);
            this.writeFourByteCharCode(char);
            i = dart.notNull(i) + 1;
            continue;
          }
        }
        this.writeMultiByteCharCode(char);
      }
    }
  }
  writeCharCode(charCode) {
    if (dart.notNull(charCode) <= 127) {
      this.writeByte(charCode);
      return;
    }
    this.writeMultiByteCharCode(charCode);
  }
  writeMultiByteCharCode(charCode) {
    if (dart.notNull(charCode) <= 2047) {
      this.writeByte((192 | charCode[$rightShift](6)) >>> 0);
      this.writeByte(128 | dart.notNull(charCode) & 63);
      return;
    }
    if (dart.notNull(charCode) <= 65535) {
      this.writeByte((224 | charCode[$rightShift](12)) >>> 0);
      this.writeByte(128 | dart.notNull(charCode) >> 6 & 63);
      this.writeByte(128 | dart.notNull(charCode) & 63);
      return;
    }
    this.writeFourByteCharCode(charCode);
  }
  writeFourByteCharCode(charCode) {
    if (!(dart.notNull(charCode) <= 1114111)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/json.dart", 986, 12, "charCode <= 0x10ffff");
    this.writeByte((240 | charCode[$rightShift](18)) >>> 0);
    this.writeByte(128 | dart.notNull(charCode) >> 12 & 63);
    this.writeByte(128 | dart.notNull(charCode) >> 6 & 63);
    this.writeByte(128 | dart.notNull(charCode) & 63);
  }
  writeByte(byte) {
    let t67;
    if (!(dart.notNull(byte) <= 255)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/json.dart", 994, 12, "byte <= 0xff");
    if (this.index == this.buffer[$length]) {
      this.addChunk(this.buffer, 0, this.index);
      this.buffer = _native_typed_data.NativeUint8List.new(this.bufferSize);
      this.index = 0;
    }
    this.buffer[$_set]((t67 = this.index, this.index = dart.notNull(t67) + 1, t67), byte);
  }
};
(convert._JsonUtf8Stringifier.new = function(toEncodable, bufferSize, addChunk) {
  this.index = 0;
  this.bufferSize = bufferSize;
  this.addChunk = addChunk;
  this.buffer = _native_typed_data.NativeUint8List.new(bufferSize);
  convert._JsonUtf8Stringifier.__proto__.new.call(this, toEncodable);
  ;
}).prototype = convert._JsonUtf8Stringifier.prototype;
;
;
dart.setGetterSignature(convert._JsonUtf8Stringifier, () => ({
  __proto__: dart.getGetters(convert._JsonUtf8Stringifier.__proto__),
  [_partialResult]: core.String
}));
dart.setLibraryUri(convert._JsonUtf8Stringifier, "dart:convert");
;
const _JsonUtf8Stringifier__JsonPrettyPrintMixin$36 = class _JsonUtf8Stringifier__JsonPrettyPrintMixin extends convert._JsonUtf8Stringifier {};
(_JsonUtf8Stringifier__JsonPrettyPrintMixin$36.new = function(toEncodable, bufferSize, addChunk) {
  convert._JsonPrettyPrintMixin.new.call(this);
  _JsonUtf8Stringifier__JsonPrettyPrintMixin$36.__proto__.new.call(this, toEncodable, bufferSize, addChunk);
}).prototype = _JsonUtf8Stringifier__JsonPrettyPrintMixin$36.prototype;
dart.applyMixin(_JsonUtf8Stringifier__JsonPrettyPrintMixin$36, convert._JsonPrettyPrintMixin);
convert._JsonUtf8StringifierPretty = class _JsonUtf8StringifierPretty extends _JsonUtf8Stringifier__JsonPrettyPrintMixin$36 {
  writeIndentation(count) {
    let indent = this.indent;
    let indentLength = indent[$length];
    if (indentLength === 1) {
      let char = indent[$_get](0);
      while (dart.notNull(count) > 0) {
        this.writeByte(char);
        count = dart.notNull(count) - 1;
      }
      return;
    }
    while (dart.notNull(count) > 0) {
      count = dart.notNull(count) - 1;
      let end = dart.notNull(this.index) + dart.notNull(indentLength);
      if (end <= dart.notNull(this.buffer[$length])) {
        this.buffer[$setRange](this.index, end, indent);
        this.index = end;
      } else {
        for (let i = 0; i < dart.notNull(indentLength); i = i + 1) {
          this.writeByte(indent[$_get](i));
        }
      }
    }
  }
};
(convert._JsonUtf8StringifierPretty.new = function(toEncodable, indent, bufferSize, addChunk) {
  this.indent = indent;
  convert._JsonUtf8StringifierPretty.__proto__.new.call(this, toEncodable, bufferSize, addChunk);
  ;
}).prototype = convert._JsonUtf8StringifierPretty.prototype;
;
;
dart.setLibraryUri(convert._JsonUtf8StringifierPretty, "dart:convert");
;
let C156;
let C157;
let C158;
const _allowInvalid$1 = dart.privateName(convert, "Latin1Codec._allowInvalid");
convert.Latin1Codec = class Latin1Codec extends convert.Encoding {
  get [_allowInvalid]() {
    return this[_allowInvalid$1];
  }
  set [_allowInvalid](value) {
    super[_allowInvalid] = value;
  }
  get name() {
    return "iso-8859-1";
  }
  encode(source) {
    core.String._check(source);
    return this.encoder.convert(source);
  }
  decode(bytes, opts) {
    ListOfint()._check(bytes);
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
    allowInvalid == null ? allowInvalid = this[_allowInvalid] : null;
    if (dart.test(allowInvalid)) {
      return (C156 || CT.C156).convert(bytes);
    } else {
      return (C157 || CT.C157).convert(bytes);
    }
  }
  get encoder() {
    return C158 || CT.C158;
  }
  get decoder() {
    return dart.test(this[_allowInvalid]) ? C156 || CT.C156 : C157 || CT.C157;
  }
};
(convert.Latin1Codec.new = function(opts) {
  let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
  this[_allowInvalid$1] = allowInvalid;
  convert.Latin1Codec.__proto__.new.call(this);
  ;
}).prototype = convert.Latin1Codec.prototype;
;
;
dart.setGetterSignature(convert.Latin1Codec, () => ({
  __proto__: dart.getGetters(convert.Latin1Codec.__proto__),
  name: core.String,
  encoder: convert.Latin1Encoder,
  decoder: convert.Latin1Decoder
}));
dart.setLibraryUri(convert.Latin1Codec, "dart:convert");
;
convert.Latin1Encoder = class Latin1Encoder extends convert._UnicodeSubsetEncoder {};
(convert.Latin1Encoder.new = function() {
  convert.Latin1Encoder.__proto__.new.call(this, 255);
  ;
}).prototype = convert.Latin1Encoder.prototype;
;
dart.setLibraryUri(convert.Latin1Encoder, "dart:convert");
convert.Latin1Decoder = class Latin1Decoder extends convert._UnicodeSubsetDecoder {
  startChunkedConversion(sink) {
    SinkOfString()._check(sink);
    let stringSink = null;
    if (convert.StringConversionSink.is(sink)) {
      stringSink = sink;
    } else {
      stringSink = new convert._StringAdapterSink.new(sink);
    }
    if (!dart.test(this[_allowInvalid])) return new convert._Latin1DecoderSink.new(stringSink);
    return new convert._Latin1AllowInvalidDecoderSink.new(stringSink);
  }
};
(convert.Latin1Decoder.new = function(opts) {
  let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
  convert.Latin1Decoder.__proto__.new.call(this, allowInvalid, 255);
  ;
}).prototype = convert.Latin1Decoder.prototype;
;
;
dart.setLibraryUri(convert.Latin1Decoder, "dart:convert");
const _addSliceToSink = dart.privateName(convert, "_addSliceToSink");
convert._Latin1DecoderSink = class _Latin1DecoderSink extends convert.ByteConversionSinkBase {
  close() {
    this[_sink$0].close();
    this[_sink$0] = null;
  }
  add(source) {
    ListOfint()._check(source);
    this.addSlice(source, 0, source[$length], false);
  }
  [_addSliceToSink](source, start, end, isLast) {
    this[_sink$0].add(core.String.fromCharCodes(source, start, end));
    if (dart.test(isLast)) this.close();
  }
  addSlice(source, start, end, isLast) {
    end = core.RangeError.checkValidRange(start, end, source[$length]);
    if (start == end) return;
    if (!typed_data.Uint8List.is(source)) {
      convert._Latin1DecoderSink._checkValidLatin1(source, start, end);
    }
    this[_addSliceToSink](source, start, end, isLast);
  }
  static _checkValidLatin1(source, start, end) {
    let mask = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      mask = (mask | dart.notNull(source[$_get](i))) >>> 0;
    }
    if (mask >= 0 && mask <= 255) {
      return;
    }
    convert._Latin1DecoderSink._reportInvalidLatin1(source, start, end);
  }
  static _reportInvalidLatin1(source, start, end) {
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = source[$_get](i);
      if (dart.notNull(char) < 0 || dart.notNull(char) > 255) {
        dart.throw(new core.FormatException.new("Source contains non-Latin-1 characters.", source, i));
      }
    }
    if (!false) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/latin1.dart", 159, 12, "false");
  }
};
(convert._Latin1DecoderSink.new = function(_sink) {
  this[_sink$0] = _sink;
  convert._Latin1DecoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._Latin1DecoderSink.prototype;
;
;
dart.setLibraryUri(convert._Latin1DecoderSink, "dart:convert");
;
let C159;
convert._Latin1AllowInvalidDecoderSink = class _Latin1AllowInvalidDecoderSink extends convert._Latin1DecoderSink {
  addSlice(source, start, end, isLast) {
    core.RangeError.checkValidRange(start, end, source[$length]);
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = source[$_get](i);
      if (dart.notNull(char) > 255 || dart.notNull(char) < 0) {
        if (dart.notNull(i) > dart.notNull(start)) this[_addSliceToSink](source, start, i, false);
        this[_addSliceToSink](C159 || CT.C159, 0, 1, false);
        start = dart.notNull(i) + 1;
      }
    }
    if (dart.notNull(start) < dart.notNull(end)) {
      this[_addSliceToSink](source, start, end, isLast);
    }
    if (dart.test(isLast)) {
      this.close();
    }
  }
};
(convert._Latin1AllowInvalidDecoderSink.new = function(sink) {
  convert._Latin1AllowInvalidDecoderSink.__proto__.new.call(this, sink);
  ;
}).prototype = convert._Latin1AllowInvalidDecoderSink.prototype;
;
dart.setLibraryUri(convert._Latin1AllowInvalidDecoderSink, "dart:convert");
convert.LineSplitter = class LineSplitter extends async.StreamTransformerBase$(core.String, core.String) {
  static split(lines, start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    return new (SyncIterableOfString()).new(() => (function* split(end) {
      end = core.RangeError.checkValidRange(start, end, lines.length);
      let sliceStart = start;
      let char = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let previousChar = char;
        char = lines[$codeUnitAt](i);
        if (char !== 13) {
          if (char !== 10) continue;
          if (previousChar === 13) {
            sliceStart = dart.notNull(i) + 1;
            continue;
          }
        }
        yield lines[$substring](sliceStart, i);
        sliceStart = dart.notNull(i) + 1;
      }
      if (dart.notNull(sliceStart) < dart.notNull(end)) {
        yield lines[$substring](sliceStart, end);
      }
    })(end));
  }
  convert(data) {
    let lines = JSArrayOfString().of([]);
    let end = data.length;
    let sliceStart = 0;
    let char = 0;
    for (let i = 0; i < end; i = i + 1) {
      let previousChar = char;
      char = data[$codeUnitAt](i);
      if (char !== 13) {
        if (char !== 10) continue;
        if (previousChar === 13) {
          sliceStart = i + 1;
          continue;
        }
      }
      lines[$add](data[$substring](sliceStart, i));
      sliceStart = i + 1;
    }
    if (sliceStart < end) {
      lines[$add](data[$substring](sliceStart, end));
    }
    return lines;
  }
  startChunkedConversion(sink) {
    return new convert._LineSplitterSink.new(convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink));
  }
  bind(stream) {
    StreamOfString()._check(stream);
    return StreamOfString().eventTransformed(stream, dart.fn(sink => new convert._LineSplitterEventSink.new(sink), EventSinkOfStringTo_LineSplitterEventSink()));
  }
};
(convert.LineSplitter.new = function() {
  convert.LineSplitter.__proto__.new.call(this);
  ;
}).prototype = convert.LineSplitter.prototype;
;
;
dart.setLibraryUri(convert.LineSplitter, "dart:convert");
const _carry = dart.privateName(convert, "_carry");
const _skipLeadingLF = dart.privateName(convert, "_skipLeadingLF");
const _addLines = dart.privateName(convert, "_addLines");
convert._LineSplitterSink = class _LineSplitterSink extends convert.StringConversionSinkBase {
  addSlice(chunk, start, end, isLast) {
    end = core.RangeError.checkValidRange(start, end, chunk.length);
    if (dart.notNull(start) >= dart.notNull(end)) {
      if (dart.test(isLast)) this.close();
      return;
    }
    if (this[_carry] != null) {
      if (!!dart.test(this[_skipLeadingLF])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/line_splitter.dart", 116, 14, "!_skipLeadingLF");
      chunk = dart.notNull(this[_carry]) + chunk[$substring](start, end);
      start = 0;
      end = chunk.length;
      this[_carry] = null;
    } else if (dart.test(this[_skipLeadingLF])) {
      if (chunk[$codeUnitAt](start) === 10) {
        start = dart.notNull(start) + 1;
      }
      this[_skipLeadingLF] = false;
    }
    this[_addLines](chunk, start, end);
    if (dart.test(isLast)) this.close();
  }
  close() {
    if (this[_carry] != null) {
      this[_sink$0].add(this[_carry]);
      this[_carry] = null;
    }
    this[_sink$0].close();
  }
  [_addLines](lines, start, end) {
    let sliceStart = start;
    let char = 0;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let previousChar = char;
      char = lines[$codeUnitAt](i);
      if (char !== 13) {
        if (char !== 10) continue;
        if (previousChar === 13) {
          sliceStart = dart.notNull(i) + 1;
          continue;
        }
      }
      this[_sink$0].add(lines[$substring](sliceStart, i));
      sliceStart = dart.notNull(i) + 1;
    }
    if (dart.notNull(sliceStart) < dart.notNull(end)) {
      this[_carry] = lines[$substring](sliceStart, end);
    } else {
      this[_skipLeadingLF] = char === 13;
    }
  }
};
(convert._LineSplitterSink.new = function(_sink) {
  this[_carry] = null;
  this[_skipLeadingLF] = false;
  this[_sink$0] = _sink;
  ;
}).prototype = convert._LineSplitterSink.prototype;
;
;
dart.setLibraryUri(convert._LineSplitterSink, "dart:convert");
;
convert._LineSplitterEventSink = class _LineSplitterEventSink extends convert._LineSplitterSink {
  addError(o, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    this[_eventSink].addError(o, stackTrace);
  }
};
(convert._LineSplitterEventSink.new = function(eventSink) {
  this[_eventSink] = eventSink;
  convert._LineSplitterEventSink.__proto__.new.call(this, new convert._StringAdapterSink.new(eventSink));
  ;
}).prototype = convert._LineSplitterEventSink.prototype;
;
convert._LineSplitterEventSink[dart.implements] = () => [async.EventSink$(core.String)];
;
dart.setLibraryUri(convert._LineSplitterEventSink, "dart:convert");
;
convert.StringConversionSink = class StringConversionSink extends convert.ChunkedConversionSink$(core.String) {};
(convert.StringConversionSink.new = function() {
  convert.StringConversionSink.__proto__.new.call(this);
  ;
}).prototype = convert.StringConversionSink.prototype;
;
dart.setLibraryUri(convert.StringConversionSink, "dart:convert");
convert.ClosableStringSink = class ClosableStringSink extends core.StringSink {};
;
dart.setLibraryUri(convert.ClosableStringSink, "dart:convert");
convert._ClosableStringSink = class _ClosableStringSink extends core.Object {
  close() {
    this[_callback$]();
  }
  writeCharCode(charCode) {
    this[_sink$0].writeCharCode(charCode);
  }
  write(o) {
    this[_sink$0].write(o);
  }
  writeln(o) {
    if (o === void 0) o = "";
    this[_sink$0].writeln(o);
  }
  writeAll(objects, separator) {
    if (separator === void 0) separator = "";
    this[_sink$0].writeAll(objects, separator);
  }
};
(convert._ClosableStringSink.new = function(_sink, _callback) {
  this[_sink$0] = _sink;
  this[_callback$] = _callback;
  ;
}).prototype = convert._ClosableStringSink.prototype;
;
convert._ClosableStringSink[dart.implements] = () => [convert.ClosableStringSink];
;
dart.setLibraryUri(convert._ClosableStringSink, "dart:convert");
;
const _flush = dart.privateName(convert, "_flush");
convert._StringConversionSinkAsStringSinkAdapter = class _StringConversionSinkAsStringSinkAdapter extends core.Object {
  close() {
    if (dart.test(this[_buffer].isNotEmpty)) this[_flush]();
    this[_chunkedSink$].close();
  }
  writeCharCode(charCode) {
    this[_buffer].writeCharCode(charCode);
    if (dart.notNull(this[_buffer].length) > 16) this[_flush]();
  }
  write(o) {
    if (dart.test(this[_buffer].isNotEmpty)) this[_flush]();
    this[_chunkedSink$].add(dart.toString(o));
  }
  writeln(o) {
    if (o === void 0) o = "";
    this[_buffer].writeln(o);
    if (dart.notNull(this[_buffer].length) > 16) this[_flush]();
  }
  writeAll(objects, separator) {
    if (separator === void 0) separator = "";
    if (dart.test(this[_buffer].isNotEmpty)) this[_flush]();
    let iterator = objects[$iterator];
    if (!dart.test(iterator.moveNext())) return;
    if (separator[$isEmpty]) {
      do {
        this[_chunkedSink$].add(dart.toString(iterator.current));
      } while (dart.test(iterator.moveNext()));
    } else {
      this[_chunkedSink$].add(dart.toString(iterator.current));
      while (dart.test(iterator.moveNext())) {
        this.write(separator);
        this[_chunkedSink$].add(dart.toString(iterator.current));
      }
    }
  }
  [_flush]() {
    let accumulated = dart.toString(this[_buffer]);
    this[_buffer].clear();
    this[_chunkedSink$].add(accumulated);
  }
};
(convert._StringConversionSinkAsStringSinkAdapter.new = function(_chunkedSink) {
  this[_chunkedSink$] = _chunkedSink;
  this[_buffer] = new core.StringBuffer.new();
  ;
}).prototype = convert._StringConversionSinkAsStringSinkAdapter.prototype;
;
convert._StringConversionSinkAsStringSinkAdapter[dart.implements] = () => [convert.ClosableStringSink];
;
dart.setLibraryUri(convert._StringConversionSinkAsStringSinkAdapter, "dart:convert");
;
dart.defineLazy(convert._StringConversionSinkAsStringSinkAdapter, {
  /*convert._StringConversionSinkAsStringSinkAdapter._MIN_STRING_SIZE*/get _MIN_STRING_SIZE() {
    return 16;
  }
});
const _contents = dart.privateName(core, "_contents");
const _writeString = dart.privateName(core, "_writeString");
core.StringBuffer = class StringBuffer extends core.Object {
  [_writeString](str) {
    this[_contents] = _js_helper.Primitives.stringConcatUnchecked(this[_contents], core.String._check(str));
  }
  static _writeAll(string, objects, separator) {
    let iterator = objects[$iterator];
    if (!dart.test(iterator.moveNext())) return string;
    if (separator[$isEmpty]) {
      do {
        string = core.StringBuffer._writeOne(string, iterator.current);
      } while (dart.test(iterator.moveNext()));
    } else {
      string = core.StringBuffer._writeOne(string, iterator.current);
      while (dart.test(iterator.moveNext())) {
        string = core.StringBuffer._writeOne(string, separator);
        string = core.StringBuffer._writeOne(string, iterator.current);
      }
    }
    return string;
  }
  static _writeOne(string, obj) {
    return _js_helper.Primitives.stringConcatUnchecked(string, dart.str(obj));
  }
  get length() {
    return this[_contents].length;
  }
  get isEmpty() {
    return this.length === 0;
  }
  get isNotEmpty() {
    return !dart.test(this.isEmpty);
  }
  write(obj) {
    this[_writeString](dart.str(obj));
  }
  writeCharCode(charCode) {
    this[_writeString](core.String.fromCharCode(charCode));
  }
  writeAll(objects, separator) {
    if (separator === void 0) separator = "";
    this[_contents] = core.StringBuffer._writeAll(this[_contents], objects, separator);
  }
  writeln(obj) {
    if (obj === void 0) obj = "";
    this[_writeString](dart.str(obj) + "\n");
  }
  clear() {
    this[_contents] = "";
  }
  toString() {
    return _js_helper.Primitives.flattenString(this[_contents]);
  }
};
(core.StringBuffer.new = function(content) {
  if (content === void 0) content = "";
  this[_contents] = dart.str(content);
  ;
}).prototype = core.StringBuffer.prototype;
;
core.StringBuffer[dart.implements] = () => [core.StringSink];
;
dart.setGetterSignature(core.StringBuffer, () => ({
  __proto__: dart.getGetters(core.StringBuffer.__proto__),
  length: core.int,
  isEmpty: core.bool,
  isNotEmpty: core.bool
}));
dart.setLibraryUri(core.StringBuffer, "dart:core");
;
dart.defineExtensionMethods(core.StringBuffer, ['toString']);
convert._StringCallbackSink = class _StringCallbackSink extends convert._StringSinkConversionSink$(core.StringBuffer) {
  close() {
    let accumulated = dart.toString(this[_stringSink$]);
    this[_stringSink$].clear();
    this[_callback$](accumulated);
  }
  asUtf8Sink(allowMalformed) {
    return new convert._Utf8StringSinkAdapter.new(this, this[_stringSink$], allowMalformed);
  }
};
(convert._StringCallbackSink.new = function(_callback) {
  this[_callback$] = _callback;
  convert._StringCallbackSink.__proto__.new.call(this, new core.StringBuffer.new());
  ;
}).prototype = convert._StringCallbackSink.prototype;
;
dart.setLibraryUri(convert._StringCallbackSink, "dart:convert");
;
convert._StringAdapterSink = class _StringAdapterSink extends convert.StringConversionSinkBase {
  add(str) {
    core.String._check(str);
    this[_sink$0].add(str);
  }
  addSlice(str, start, end, isLast) {
    if (start === 0 && end === str.length) {
      this.add(str);
    } else {
      this.add(str[$substring](start, end));
    }
    if (dart.test(isLast)) this.close();
  }
  close() {
    this[_sink$0].close();
  }
};
(convert._StringAdapterSink.new = function(_sink) {
  this[_sink$0] = _sink;
  ;
}).prototype = convert._StringAdapterSink.prototype;
;
;
dart.setLibraryUri(convert._StringAdapterSink, "dart:convert");
;
convert._Utf8StringSinkAdapter = class _Utf8StringSinkAdapter extends convert.ByteConversionSink {
  close() {
    this[_decoder].close();
    if (this[_sink$0] != null) this[_sink$0].close();
  }
  add(chunk) {
    ListOfint()._check(chunk);
    this.addSlice(chunk, 0, chunk[$length], false);
  }
  addSlice(codeUnits, startIndex, endIndex, isLast) {
    this[_decoder].convert(codeUnits, startIndex, endIndex);
    if (dart.test(isLast)) this.close();
  }
};
(convert._Utf8StringSinkAdapter.new = function(_sink, stringSink, allowMalformed) {
  this[_sink$0] = _sink;
  this[_decoder] = new convert._Utf8Decoder.new(stringSink, allowMalformed);
  convert._Utf8StringSinkAdapter.__proto__.new.call(this);
  ;
}).prototype = convert._Utf8StringSinkAdapter.prototype;
;
;
dart.setLibraryUri(convert._Utf8StringSinkAdapter, "dart:convert");
;
convert._Utf8ConversionSink = class _Utf8ConversionSink extends convert.ByteConversionSink {
  close() {
    this[_decoder].close();
    if (dart.test(this[_buffer].isNotEmpty)) {
      let accumulated = dart.toString(this[_buffer]);
      this[_buffer].clear();
      this[_chunkedSink$].addSlice(accumulated, 0, accumulated.length, true);
    } else {
      this[_chunkedSink$].close();
    }
  }
  add(chunk) {
    ListOfint()._check(chunk);
    this.addSlice(chunk, 0, chunk[$length], false);
  }
  addSlice(chunk, startIndex, endIndex, isLast) {
    this[_decoder].convert(chunk, startIndex, endIndex);
    if (dart.test(this[_buffer].isNotEmpty)) {
      let accumulated = dart.toString(this[_buffer]);
      this[_chunkedSink$].addSlice(accumulated, 0, accumulated.length, isLast);
      this[_buffer].clear();
      return;
    }
    if (dart.test(isLast)) this.close();
  }
};
(convert._Utf8ConversionSink.new = function(sink, allowMalformed) {
  convert._Utf8ConversionSink.__.call(this, sink, new core.StringBuffer.new(), allowMalformed);
}).prototype = convert._Utf8ConversionSink.prototype;
(convert._Utf8ConversionSink.__ = function(_chunkedSink, stringBuffer, allowMalformed) {
  this[_chunkedSink$] = _chunkedSink;
  this[_decoder] = new convert._Utf8Decoder.new(stringBuffer, allowMalformed);
  this[_buffer] = stringBuffer;
  convert._Utf8ConversionSink.__proto__.new.call(this);
  ;
}).prototype = convert._Utf8ConversionSink.prototype;
;
;
dart.setLibraryUri(convert._Utf8ConversionSink, "dart:convert");
;
const _allowMalformed$ = dart.privateName(convert, "_allowMalformed");
let C160;
const _allowMalformed = dart.privateName(convert, "Utf8Codec._allowMalformed");
convert.Utf8Codec = class Utf8Codec extends convert.Encoding {
  get [_allowMalformed$]() {
    return this[_allowMalformed];
  }
  set [_allowMalformed$](value) {
    super[_allowMalformed$] = value;
  }
  get name() {
    return "utf-8";
  }
  decode(codeUnits, opts) {
    ListOfint()._check(codeUnits);
    let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : null;
    allowMalformed == null ? allowMalformed = this[_allowMalformed$] : null;
    return new convert.Utf8Decoder.new({allowMalformed: allowMalformed}).convert(codeUnits);
  }
  get encoder() {
    return C160 || CT.C160;
  }
  get decoder() {
    return new convert.Utf8Decoder.new({allowMalformed: this[_allowMalformed$]});
  }
};
(convert.Utf8Codec.new = function(opts) {
  let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : false;
  this[_allowMalformed] = allowMalformed;
  convert.Utf8Codec.__proto__.new.call(this);
  ;
}).prototype = convert.Utf8Codec.prototype;
;
;
dart.setGetterSignature(convert.Utf8Codec, () => ({
  __proto__: dart.getGetters(convert.Utf8Codec.__proto__),
  name: core.String,
  encoder: convert.Utf8Encoder,
  decoder: convert.Utf8Decoder
}));
dart.setLibraryUri(convert.Utf8Codec, "dart:convert");
;
const _fillBuffer = dart.privateName(convert, "_fillBuffer");
const _writeSurrogate = dart.privateName(convert, "_writeSurrogate");
convert.Utf8Encoder = class Utf8Encoder extends convert.Converter$(core.String, core.List$(core.int)) {
  convert(string, start, end) {
    core.String._check(string);
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    let stringLength = string.length;
    end = core.RangeError.checkValidRange(start, end, stringLength);
    let length = dart.notNull(end) - dart.notNull(start);
    if (length === 0) return _native_typed_data.NativeUint8List.new(0);
    let encoder = new convert._Utf8Encoder.withBufferSize(length * 3);
    let endPosition = encoder[_fillBuffer](string, start, end);
    if (!(dart.notNull(endPosition) >= dart.notNull(end) - 1)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 89, 12, "endPosition >= end - 1");
    if (endPosition != end) {
      let lastCodeUnit = string[$codeUnitAt](dart.notNull(end) - 1);
      if (!dart.test(convert._isLeadSurrogate(lastCodeUnit))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 95, 14, "_isLeadSurrogate(lastCodeUnit)");
      let wasCombined = encoder[_writeSurrogate](lastCodeUnit, 0);
      if (!!dart.test(wasCombined)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 99, 14, "!wasCombined");
    }
    return encoder[_buffer][$sublist](0, encoder[_bufferIndex]);
  }
  startChunkedConversion(sink) {
    SinkOfListOfint()._check(sink);
    return new convert._Utf8EncoderSink.new(convert.ByteConversionSink.is(sink) ? sink : new convert._ByteAdapterSink.new(sink));
  }
  bind(stream) {
    StreamOfString()._check(stream);
    return super.bind(stream);
  }
};
(convert.Utf8Encoder.new = function() {
  convert.Utf8Encoder.__proto__.new.call(this);
  ;
}).prototype = convert.Utf8Encoder.prototype;
;
;
dart.setLibraryUri(convert.Utf8Encoder, "dart:convert");
convert._Utf8Encoder = class _Utf8Encoder extends core.Object {
  static _createBuffer(size) {
    return _native_typed_data.NativeUint8List.new(size);
  }
  [_writeSurrogate](leadingSurrogate, nextCodeUnit) {
    let t67, t67$, t67$0, t67$1, t67$2, t67$3, t67$4;
    if (dart.test(convert._isTailSurrogate(nextCodeUnit))) {
      let rune = convert._combineSurrogatePair(leadingSurrogate, nextCodeUnit);
      if (!(dart.notNull(rune) > 65535)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 148, 14, "rune > _THREE_BYTE_LIMIT");
      if (!(dart.notNull(rune) <= 1114111)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 149, 14, "rune <= _FOUR_BYTE_LIMIT");
      this[_buffer][$_set]((t67 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t67) + 1, t67), (240 | rune[$rightShift](18)) >>> 0);
      this[_buffer][$_set]((t67$ = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t67$) + 1, t67$), 128 | dart.notNull(rune) >> 12 & 63);
      this[_buffer][$_set]((t67$0 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t67$0) + 1, t67$0), 128 | dart.notNull(rune) >> 6 & 63);
      this[_buffer][$_set]((t67$1 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t67$1) + 1, t67$1), 128 | dart.notNull(rune) & 63);
      return true;
    } else {
      this[_buffer][$_set]((t67$2 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t67$2) + 1, t67$2), (224 | leadingSurrogate[$rightShift](12)) >>> 0);
      this[_buffer][$_set]((t67$3 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t67$3) + 1, t67$3), 128 | dart.notNull(leadingSurrogate) >> 6 & 63);
      this[_buffer][$_set]((t67$4 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t67$4) + 1, t67$4), 128 | dart.notNull(leadingSurrogate) & 63);
      return false;
    }
  }
  [_fillBuffer](str, start, end) {
    let t68, t68$, t68$0, t68$1, t68$2, t68$3;
    if (start != end && dart.test(convert._isLeadSurrogate(str[$codeUnitAt](dart.notNull(end) - 1)))) {
      end = dart.notNull(end) - 1;
    }
    let stringIndex = null;
    for (let t67 = stringIndex = start; dart.notNull(stringIndex) < dart.notNull(end); stringIndex = dart.notNull(stringIndex) + 1) {
      let codeUnit = str[$codeUnitAt](stringIndex);
      if (codeUnit <= 127) {
        if (dart.notNull(this[_bufferIndex]) >= dart.notNull(this[_buffer][$length])) break;
        this[_buffer][$_set]((t68 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t68) + 1, t68), codeUnit);
      } else if (dart.test(convert._isLeadSurrogate(codeUnit))) {
        if (dart.notNull(this[_bufferIndex]) + 3 >= dart.notNull(this[_buffer][$length])) break;
        let nextCodeUnit = str[$codeUnitAt](dart.notNull(stringIndex) + 1);
        let wasCombined = this[_writeSurrogate](codeUnit, nextCodeUnit);
        if (dart.test(wasCombined)) stringIndex = dart.notNull(stringIndex) + 1;
      } else {
        let rune = codeUnit;
        if (rune <= 2047) {
          if (dart.notNull(this[_bufferIndex]) + 1 >= dart.notNull(this[_buffer][$length])) break;
          this[_buffer][$_set]((t68$ = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t68$) + 1, t68$), (192 | rune[$rightShift](6)) >>> 0);
          this[_buffer][$_set]((t68$0 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t68$0) + 1, t68$0), 128 | rune & 63);
        } else {
          if (!(rune <= 65535)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 202, 18, "rune <= _THREE_BYTE_LIMIT");
          if (dart.notNull(this[_bufferIndex]) + 2 >= dart.notNull(this[_buffer][$length])) break;
          this[_buffer][$_set]((t68$1 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t68$1) + 1, t68$1), (224 | rune[$rightShift](12)) >>> 0);
          this[_buffer][$_set]((t68$2 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t68$2) + 1, t68$2), 128 | rune >> 6 & 63);
          this[_buffer][$_set]((t68$3 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t68$3) + 1, t68$3), 128 | rune & 63);
        }
      }
    }
    return stringIndex;
  }
};
(convert._Utf8Encoder.new = function() {
  convert._Utf8Encoder.withBufferSize.call(this, 1024);
}).prototype = convert._Utf8Encoder.prototype;
(convert._Utf8Encoder.withBufferSize = function(bufferSize) {
  this[_carry] = 0;
  this[_bufferIndex] = 0;
  this[_buffer] = convert._Utf8Encoder._createBuffer(bufferSize);
  ;
}).prototype = convert._Utf8Encoder.prototype;
;
;
dart.setLibraryUri(convert._Utf8Encoder, "dart:convert");
;
dart.defineLazy(convert._Utf8Encoder, {
  /*convert._Utf8Encoder._DEFAULT_BYTE_BUFFER_SIZE*/get _DEFAULT_BYTE_BUFFER_SIZE() {
    return 1024;
  }
});
const _Utf8Encoder_StringConversionSinkMixin$36 = class _Utf8Encoder_StringConversionSinkMixin extends convert._Utf8Encoder {};
(_Utf8Encoder_StringConversionSinkMixin$36.new = function() {
  _Utf8Encoder_StringConversionSinkMixin$36.__proto__.new.call(this);
}).prototype = _Utf8Encoder_StringConversionSinkMixin$36.prototype;
(_Utf8Encoder_StringConversionSinkMixin$36.withBufferSize = function(bufferSize) {
  _Utf8Encoder_StringConversionSinkMixin$36.__proto__.withBufferSize.call(this, bufferSize);
}).prototype = _Utf8Encoder_StringConversionSinkMixin$36.prototype;
dart.applyMixin(_Utf8Encoder_StringConversionSinkMixin$36, convert.StringConversionSinkMixin);
convert._Utf8EncoderSink = class _Utf8EncoderSink extends _Utf8Encoder_StringConversionSinkMixin$36 {
  close() {
    if (this[_carry] !== 0) {
      this.addSlice("", 0, 0, true);
      return;
    }
    this[_sink$0].close();
  }
  addSlice(str, start, end, isLast) {
    this[_bufferIndex] = 0;
    if (start == end && !dart.test(isLast)) {
      return;
    }
    if (this[_carry] !== 0) {
      let nextCodeUnit = 0;
      if (start != end) {
        nextCodeUnit = str[$codeUnitAt](start);
      } else {
        if (!dart.test(isLast)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 242, 16, "isLast");
      }
      let wasCombined = this[_writeSurrogate](this[_carry], nextCodeUnit);
      if (!(!dart.test(wasCombined) || start != end)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 246, 14, "!wasCombined || start != end");
      if (dart.test(wasCombined)) start = dart.notNull(start) + 1;
      this[_carry] = 0;
    }
    do {
      start = this[_fillBuffer](str, start, end);
      let isLastSlice = dart.test(isLast) && start == end;
      if (start === dart.notNull(end) - 1 && dart.test(convert._isLeadSurrogate(str[$codeUnitAt](start)))) {
        if (dart.test(isLast) && dart.notNull(this[_bufferIndex]) < dart.notNull(this[_buffer][$length]) - 3) {
          let hasBeenCombined = this[_writeSurrogate](str[$codeUnitAt](start), 0);
          if (!!dart.test(hasBeenCombined)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 259, 18, "!hasBeenCombined");
        } else {
          this[_carry] = str[$codeUnitAt](start);
        }
        start = dart.notNull(start) + 1;
      }
      this[_sink$0].addSlice(this[_buffer], 0, this[_bufferIndex], isLastSlice);
      this[_bufferIndex] = 0;
    } while (dart.notNull(start) < dart.notNull(end));
    if (dart.test(isLast)) this.close();
  }
};
(convert._Utf8EncoderSink.new = function(_sink) {
  this[_sink$0] = _sink;
  convert._Utf8EncoderSink.__proto__.new.call(this);
  ;
}).prototype = convert._Utf8EncoderSink.prototype;
;
;
dart.setLibraryUri(convert._Utf8EncoderSink, "dart:convert");
;
const _isFirstCharacter = dart.privateName(convert, "_isFirstCharacter");
const _allowMalformed$0 = dart.privateName(convert, "Utf8Decoder._allowMalformed");
convert.Utf8Decoder = class Utf8Decoder extends convert.Converter$(core.List$(core.int), core.String) {
  get [_allowMalformed$]() {
    return this[_allowMalformed$0];
  }
  set [_allowMalformed$](value) {
    super[_allowMalformed$] = value;
  }
  static _convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
    if (dart.test(allowMalformed)) {
      return null;
    }
    let decoder = convert.Utf8Decoder._decoder;
    if (decoder == null) return null;
    if (0 === start && end == null) {
      return convert.Utf8Decoder._useTextDecoderChecked(decoder, codeUnits);
    }
    let length = codeUnits[$length];
    end = core.RangeError.checkValidRange(start, end, length);
    if (0 === start && end == codeUnits[$length]) {
      return convert.Utf8Decoder._useTextDecoderChecked(decoder, codeUnits);
    }
    return convert.Utf8Decoder._useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
  }
  static _useTextDecoderChecked(decoder, codeUnits) {
    if (dart.test(convert.Utf8Decoder._unsafe(codeUnits))) return null;
    return convert.Utf8Decoder._useTextDecoderUnchecked(decoder, codeUnits);
  }
  static _useTextDecoderUnchecked(decoder, codeUnits) {
    try {
      return decoder.decode(codeUnits);
    } catch (e$) {
      let e = dart.getThrown(e$);
    }
    return null;
  }
  static _unsafe(codeUnits) {
    let limit = dart.notNull(codeUnits[$length]) - 2;
    for (let i = 0; i < limit; i = i + 1) {
      let unit1 = codeUnits[$_get](i);
      if (unit1 === 237) {
        let unit2 = codeUnits[$_get](i + 1);
        if ((unit2 & 224) === 160) return true;
      }
    }
    return false;
  }
  convert(codeUnits, start, end) {
    ListOfint()._check(codeUnits);
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    let result = convert.Utf8Decoder._convertIntercepted(this[_allowMalformed$], codeUnits, start, end);
    if (result != null) {
      return result;
    }
    let length = codeUnits[$length];
    end = core.RangeError.checkValidRange(start, end, length);
    let oneBytes = convert._scanOneByteCharacters(codeUnits, start, end);
    let buffer = null;
    let isFirstCharacter = true;
    if (dart.notNull(oneBytes) > 0) {
      let firstPart = core.String.fromCharCodes(codeUnits, start, dart.notNull(start) + dart.notNull(oneBytes));
      start = dart.notNull(start) + dart.notNull(oneBytes);
      if (start == end) {
        return firstPart;
      }
      buffer = new core.StringBuffer.new(firstPart);
      isFirstCharacter = false;
    }
    buffer == null ? buffer = new core.StringBuffer.new() : null;
    let decoder = new convert._Utf8Decoder.new(buffer, this[_allowMalformed$]);
    decoder[_isFirstCharacter] = isFirstCharacter;
    decoder.convert(codeUnits, start, end);
    decoder.flush(codeUnits, end);
    return dart.toString(buffer);
  }
  startChunkedConversion(sink) {
    SinkOfString()._check(sink);
    let stringSink = null;
    if (convert.StringConversionSink.is(sink)) {
      stringSink = sink;
    } else {
      stringSink = new convert._StringAdapterSink.new(sink);
    }
    return stringSink.asUtf8Sink(this[_allowMalformed$]);
  }
  bind(stream) {
    StreamOfListOfint()._check(stream);
    return super.bind(stream);
  }
  fuse(T, next) {
    return super.fuse(T, next);
  }
  static _convertIntercepted(allowMalformed, codeUnits, start, end) {
    if (codeUnits instanceof Uint8Array) {
      let casted = codeUnits;
      return convert.Utf8Decoder._convertInterceptedUint8List(allowMalformed, casted, start, end);
    }
  }
};
(convert.Utf8Decoder.new = function(opts) {
  let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : false;
  this[_allowMalformed$0] = allowMalformed;
  convert.Utf8Decoder.__proto__.new.call(this);
  ;
}).prototype = convert.Utf8Decoder.prototype;
;
;
dart.setLibraryUri(convert.Utf8Decoder, "dart:convert");
;
dart.defineLazy(convert.Utf8Decoder, {
  /*convert.Utf8Decoder._decoder*/get _decoder() {
    return dart.fn(() => {
      try {
        return new TextDecoder("utf-8", {fatal: true});
      } catch (e$) {
        let e = dart.getThrown(e$);
      }
      return null;
    }, VoidToObject())();
  }
});
const _value$ = dart.privateName(convert, "_value");
const _expectedUnits = dart.privateName(convert, "_expectedUnits");
const _extraUnits = dart.privateName(convert, "_extraUnits");
let C161;
convert._Utf8Decoder = class _Utf8Decoder extends core.Object {
  get hasPartialInput() {
    return dart.notNull(this[_expectedUnits]) > 0;
  }
  close() {
    this.flush();
  }
  flush(source, offset) {
    if (source === void 0) source = null;
    if (offset === void 0) offset = null;
    if (dart.test(this.hasPartialInput)) {
      if (!dart.test(this[_allowMalformed$])) {
        dart.throw(new core.FormatException.new("Unfinished UTF-8 octet sequence", source, offset));
      }
      this[_stringSink$].writeCharCode(65533);
      this[_value$] = 0;
      this[_expectedUnits] = 0;
      this[_extraUnits] = 0;
    }
  }
  convert(codeUnits, startIndex, endIndex) {
    let t70;
    let value = this[_value$];
    let expectedUnits = this[_expectedUnits];
    let extraUnits = this[_extraUnits];
    this[_value$] = 0;
    this[_expectedUnits] = 0;
    this[_extraUnits] = 0;
    let i = startIndex;
    L1:
      while (true) {
        L2:
          if (dart.notNull(expectedUnits) > 0) {
            do {
              if (i == endIndex) {
                break L1;
              }
              let unit = codeUnits[$_get](i);
              if ((dart.notNull(unit) & 192) !== 128) {
                expectedUnits = 0;
                if (!dart.test(this[_allowMalformed$])) {
                  dart.throw(new core.FormatException.new("Bad UTF-8 encoding 0x" + unit[$toRadixString](16), codeUnits, i));
                }
                this[_isFirstCharacter] = false;
                this[_stringSink$].writeCharCode(65533);
                break L2;
              } else {
                value = (dart.notNull(value) << 6 | dart.notNull(unit) & 63) >>> 0;
                expectedUnits = dart.notNull(expectedUnits) - 1;
                i = dart.notNull(i) + 1;
              }
            } while (dart.notNull(expectedUnits) > 0);
            if (dart.notNull(value) <= dart.notNull(convert._Utf8Decoder._LIMITS[$_get](dart.notNull(extraUnits) - 1))) {
              if (!dart.test(this[_allowMalformed$])) {
                dart.throw(new core.FormatException.new("Overlong encoding of 0x" + value[$toRadixString](16), codeUnits, dart.notNull(i) - dart.notNull(extraUnits) - 1));
              }
              expectedUnits = extraUnits = 0;
              value = 65533;
            }
            if (dart.notNull(value) > 1114111) {
              if (!dart.test(this[_allowMalformed$])) {
                dart.throw(new core.FormatException.new("Character outside valid Unicode range: " + "0x" + value[$toRadixString](16), codeUnits, dart.notNull(i) - dart.notNull(extraUnits) - 1));
              }
              value = 65533;
            }
            if (!dart.test(this[_isFirstCharacter]) || value !== 65279) {
              this[_stringSink$].writeCharCode(value);
            }
            this[_isFirstCharacter] = false;
          }
        while (dart.notNull(i) < dart.notNull(endIndex)) {
          let oneBytes = convert._scanOneByteCharacters(codeUnits, i, endIndex);
          if (dart.notNull(oneBytes) > 0) {
            this[_isFirstCharacter] = false;
            if (!(dart.notNull(i) + dart.notNull(oneBytes) <= dart.notNull(endIndex))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 492, 18, "i + oneBytes <= endIndex");
            this[_stringSink$].write(core.String.fromCharCodes(codeUnits, i, dart.notNull(i) + dart.notNull(oneBytes)));
            i = dart.notNull(i) + dart.notNull(oneBytes);
            if (i == endIndex) break;
          }
          let unit = codeUnits[$_get]((t70 = i, i = dart.notNull(t70) + 1, t70));
          if (dart.notNull(unit) < 0) {
            if (!dart.test(this[_allowMalformed$])) {
              dart.throw(new core.FormatException.new("Negative UTF-8 code unit: -0x" + (-dart.notNull(unit))[$toRadixString](16), codeUnits, dart.notNull(i) - 1));
            }
            this[_stringSink$].writeCharCode(65533);
          } else {
            if (!(dart.notNull(unit) > 127)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart", 514, 18, "unit > _ONE_BYTE_LIMIT");
            if ((dart.notNull(unit) & 224) === 192) {
              value = dart.notNull(unit) & 31;
              expectedUnits = extraUnits = 1;
              continue L1;
            }
            if ((dart.notNull(unit) & 240) === 224) {
              value = dart.notNull(unit) & 15;
              expectedUnits = extraUnits = 2;
              continue L1;
            }
            if ((dart.notNull(unit) & 248) === 240 && dart.notNull(unit) < 245) {
              value = dart.notNull(unit) & 7;
              expectedUnits = extraUnits = 3;
              continue L1;
            }
            if (!dart.test(this[_allowMalformed$])) {
              dart.throw(new core.FormatException.new("Bad UTF-8 encoding 0x" + unit[$toRadixString](16), codeUnits, dart.notNull(i) - 1));
            }
            value = 65533;
            expectedUnits = extraUnits = 0;
            this[_isFirstCharacter] = false;
            this[_stringSink$].writeCharCode(value);
          }
        }
        break;
      }
    if (dart.notNull(expectedUnits) > 0) {
      this[_value$] = value;
      this[_expectedUnits] = expectedUnits;
      this[_extraUnits] = extraUnits;
    }
  }
};
(convert._Utf8Decoder.new = function(_stringSink, _allowMalformed) {
  this[_isFirstCharacter] = true;
  this[_value$] = 0;
  this[_expectedUnits] = 0;
  this[_extraUnits] = 0;
  this[_stringSink$] = _stringSink;
  this[_allowMalformed$] = _allowMalformed;
  ;
}).prototype = convert._Utf8Decoder.prototype;
;
;
dart.setGetterSignature(convert._Utf8Decoder, () => ({
  __proto__: dart.getGetters(convert._Utf8Decoder.__proto__),
  hasPartialInput: core.bool
}));
dart.setLibraryUri(convert._Utf8Decoder, "dart:convert");
;
dart.defineLazy(convert._Utf8Decoder, {
  /*convert._Utf8Decoder._LIMITS*/get _LIMITS() {
    return C161 || CT.C161;
  }
});
convert._convertJsonToDart = function _convertJsonToDart(json, reviver) {
  if (!(reviver != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/convert_patch.dart", 57, 10, "reviver != null");
  function walk(e) {
    if (e == null || typeof e != "object") {
      return e;
    }
    if (Object.getPrototypeOf(e) === Array.prototype) {
      for (let i = 0; i < e.length; i = i + 1) {
        let item = e[i];
        e[i] = reviver(i, walk(item));
      }
      return e;
    }
    let map = new convert._JsonMap.new(e);
    let processed = map[_processed];
    let keys = map[_computeKeys]();
    for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
      let key = keys[$_get](i);
      let revived = reviver(key, walk(e[key]));
      processed[key] = revived;
    }
    map[_original$] = processed;
    return map;
  }
  dart.fn(walk, dynamicTodynamic());
  return reviver(null, walk(json));
};
convert._convertJsonToDartLazy = function _convertJsonToDartLazy(object) {
  if (object == null) return null;
  if (typeof object != "object") {
    return object;
  }
  if (Object.getPrototypeOf(object) !== Array.prototype) {
    return new convert._JsonMap.new(object);
  }
  for (let i = 0; i < object.length; i = i + 1) {
    let item = object[i];
    object[i] = convert._convertJsonToDartLazy(item);
  }
  return object;
};
convert.base64Encode = function base64Encode(bytes) {
  return convert.base64.encode(bytes);
};
convert.base64UrlEncode = function base64UrlEncode(bytes) {
  return convert.base64Url.encode(bytes);
};
convert.base64Decode = function base64Decode(source) {
  return convert.base64.decode(source);
};
convert.jsonEncode = function jsonEncode(value, opts) {
  let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
  return convert.json.encode(value, {toEncodable: toEncodable});
};
convert.jsonDecode = function jsonDecode(source, opts) {
  let reviver = opts && 'reviver' in opts ? opts.reviver : null;
  return convert.json.decode(source, {reviver: reviver});
};
convert._parseJson = function _parseJson(source, reviver) {
  if (!(typeof source == 'string')) dart.throw(_js_helper.argumentErrorValue(source));
  let parsed = null;
  try {
    parsed = JSON.parse(source);
  } catch (e$) {
    let e = dart.getThrown(e$);
    dart.throw(new core.FormatException.new(String(e)));
  }
  if (reviver == null) {
    return convert._convertJsonToDartLazy(parsed);
  } else {
    return convert._convertJsonToDart(parsed, reviver);
  }
};
convert._defaultToEncodable = function _defaultToEncodable(object) {
  return dart.dsend(object, 'toJson', []);
};
convert._isLeadSurrogate = function _isLeadSurrogate(codeUnit) {
  return (dart.notNull(codeUnit) & 64512) >>> 0 === 55296;
};
convert._isTailSurrogate = function _isTailSurrogate(codeUnit) {
  return (dart.notNull(codeUnit) & 64512) >>> 0 === 56320;
};
convert._combineSurrogatePair = function _combineSurrogatePair(lead, tail) {
  return (65536 + ((dart.notNull(lead) & 1023) >>> 0 << 10 >>> 0) | (dart.notNull(tail) & 1023) >>> 0) >>> 0;
};
convert._scanOneByteCharacters = function _scanOneByteCharacters(units, from, endIndex) {
  let to = endIndex;
  for (let i = from; dart.notNull(i) < dart.notNull(to); i = dart.notNull(i) + 1) {
    let unit = units[$_get](i);
    if ((dart.notNull(unit) & 127) >>> 0 !== unit) return dart.notNull(i) - dart.notNull(from);
  }
  return dart.notNull(to) - dart.notNull(from);
};
let C162;
let C163;
let C164;
let C165;
let C166;
let C167;
let C168;
dart.defineLazy(convert, {
  /*convert.ascii*/get ascii() {
    return C162 || CT.C162;
  },
  /*convert._asciiMask*/get _asciiMask() {
    return 127;
  },
  /*convert.base64*/get base64() {
    return C163 || CT.C163;
  },
  /*convert.base64Url*/get base64Url() {
    return C164 || CT.C164;
  },
  /*convert._paddingChar*/get _paddingChar() {
    return 61;
  },
  /*convert.htmlEscape*/get htmlEscape() {
    return C165 || CT.C165;
  },
  /*convert.json*/get json() {
    return C166 || CT.C166;
  },
  /*convert.latin1*/get latin1() {
    return C167 || CT.C167;
  },
  /*convert._latin1Mask*/get _latin1Mask() {
    return 255;
  },
  /*convert._LF*/get _LF() {
    return 10;
  },
  /*convert._CR*/get _CR() {
    return 13;
  },
  /*convert.unicodeReplacementCharacterRune*/get unicodeReplacementCharacterRune() {
    return 65533;
  },
  /*convert.unicodeBomCharacterRune*/get unicodeBomCharacterRune() {
    return 65279;
  },
  /*convert.utf8*/get utf8() {
    return C168 || CT.C168;
  },
  /*convert._ONE_BYTE_LIMIT*/get _ONE_BYTE_LIMIT() {
    return 127;
  },
  /*convert._TWO_BYTE_LIMIT*/get _TWO_BYTE_LIMIT() {
    return 2047;
  },
  /*convert._THREE_BYTE_LIMIT*/get _THREE_BYTE_LIMIT() {
    return 65535;
  },
  /*convert._FOUR_BYTE_LIMIT*/get _FOUR_BYTE_LIMIT() {
    return 1114111;
  },
  /*convert._SURROGATE_TAG_MASK*/get _SURROGATE_TAG_MASK() {
    return 64512;
  },
  /*convert._SURROGATE_VALUE_MASK*/get _SURROGATE_VALUE_MASK() {
    return 1023;
  },
  /*convert._LEAD_SURROGATE_MIN*/get _LEAD_SURROGATE_MIN() {
    return 55296;
  },
  /*convert._TAIL_SURROGATE_MIN*/get _TAIL_SURROGATE_MIN() {
    return 56320;
  }
});
developer._FakeUserTag = class _FakeUserTag extends core.Object {
  static new(label) {
    let existingTag = developer._FakeUserTag._instances[$_get](label);
    if (existingTag != null) {
      return developer._FakeUserTag._check(existingTag);
    }
    if (developer._FakeUserTag._instances[$length] === 64) {
      dart.throw(new core.UnsupportedError.new("UserTag instance limit (" + dart.str(64) + ") reached."));
    }
    let instance = new developer._FakeUserTag.real(label);
    developer._FakeUserTag._instances[$_set](label, instance);
    return instance;
  }
  makeCurrent() {
    let old = developer._currentTag;
    developer._currentTag = this;
    return old;
  }
};
(developer._FakeUserTag.real = function(label) {
  this.label = label;
  ;
}).prototype = developer._FakeUserTag.prototype;
;
developer._FakeUserTag[dart.implements] = () => [developer.UserTag];
;
dart.setLibraryUri(developer._FakeUserTag, "dart:developer");
;
dart.defineLazy(developer._FakeUserTag, {
  /*developer._FakeUserTag._instances*/get _instances() {
    return new _js_helper.LinkedMap.new();
  },
  set _instances(_) {},
  /*developer._FakeUserTag._defaultTag*/get _defaultTag() {
    return developer._FakeUserTag.new("Default");
  }
});
const _toString$ = dart.privateName(developer, "_toString");
const result$ = dart.privateName(developer, "ServiceExtensionResponse.result");
const errorCode$ = dart.privateName(developer, "ServiceExtensionResponse.errorCode");
const errorDetail$ = dart.privateName(developer, "ServiceExtensionResponse.errorDetail");
developer.ServiceExtensionResponse = class ServiceExtensionResponse extends core.Object {
  get result() {
    return this[result$];
  }
  set result(value) {
    super.result = value;
  }
  get errorCode() {
    return this[errorCode$];
  }
  set errorCode(value) {
    super.errorCode = value;
  }
  get errorDetail() {
    return this[errorDetail$];
  }
  set errorDetail(value) {
    super.errorDetail = value;
  }
  static _errorCodeMessage(errorCode) {
    developer.ServiceExtensionResponse._validateErrorCode(errorCode);
    if (errorCode === -32602) {
      return "Invalid params";
    }
    return "Server error";
  }
  static _validateErrorCode(errorCode) {
    core.ArgumentError.checkNotNull(errorCode, "errorCode");
    if (errorCode === -32602) return;
    if (dart.notNull(errorCode) >= -32016 && dart.notNull(errorCode) <= -32000) {
      return;
    }
    dart.throw(new core.ArgumentError.value(errorCode, "errorCode", "Out of range"));
  }
  isError() {
    return this.errorCode != null && this.errorDetail != null;
  }
  [_toString$]() {
    if (this.result != null) {
      return this.result;
    } else {
      if (!(this.errorCode != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/developer/extension.dart", 101, 14, "errorCode != null");
      if (!(this.errorDetail != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/developer/extension.dart", 102, 14, "errorDetail != null");
      return convert.json.encode(new (IdentityMapOfString$Object()).from(["code", this.errorCode, "message", developer.ServiceExtensionResponse._errorCodeMessage(this.errorCode), "data", new (IdentityMapOfString$String()).from(["details", this.errorDetail])]));
    }
  }
};
(developer.ServiceExtensionResponse.result = function(result) {
  this[result$] = result;
  this[errorCode$] = null;
  this[errorDetail$] = null;
  core.ArgumentError.checkNotNull(result, "result");
}).prototype = developer.ServiceExtensionResponse.prototype;
(developer.ServiceExtensionResponse.error = function(errorCode, errorDetail) {
  this[result$] = null;
  this[errorCode$] = errorCode;
  this[errorDetail$] = errorDetail;
  developer.ServiceExtensionResponse._validateErrorCode(errorCode);
  core.ArgumentError.checkNotNull(errorDetail, "errorDetail");
}).prototype = developer.ServiceExtensionResponse.prototype;
;
;
dart.setLibraryUri(developer.ServiceExtensionResponse, "dart:developer");
;
dart.defineLazy(developer.ServiceExtensionResponse, {
  /*developer.ServiceExtensionResponse.kInvalidParams*/get kInvalidParams() {
    return -32602;
  },
  /*developer.ServiceExtensionResponse.kExtensionError*/get kExtensionError() {
    return -32000;
  },
  /*developer.ServiceExtensionResponse.kExtensionErrorMax*/get kExtensionErrorMax() {
    return -32000;
  },
  /*developer.ServiceExtensionResponse.kExtensionErrorMin*/get kExtensionErrorMin() {
    return -32016;
  },
  /*developer.ServiceExtensionResponse.invalidParams*/get invalidParams() {
    return -32602;
  },
  /*developer.ServiceExtensionResponse.extensionError*/get extensionError() {
    return -32000;
  },
  /*developer.ServiceExtensionResponse.extensionErrorMax*/get extensionErrorMax() {
    return -32000;
  },
  /*developer.ServiceExtensionResponse.extensionErrorMin*/get extensionErrorMin() {
    return -32016;
  }
});
developer.UserTag = class UserTag extends core.Object {
  static get defaultTag() {
    return developer._FakeUserTag._defaultTag;
  }
};
(developer.UserTag[dart.mixinNew] = function() {
}).prototype = developer.UserTag.prototype;
;
dart.setLibraryUri(developer.UserTag, "dart:developer");
dart.defineLazy(developer.UserTag, {
  /*developer.UserTag.MAX_USER_TAGS*/get MAX_USER_TAGS() {
    return 64;
  }
});
const name$9 = dart.privateName(developer, "Metric.name");
const description$ = dart.privateName(developer, "Metric.description");
developer.Metric = class Metric extends core.Object {
  get name() {
    return this[name$9];
  }
  set name(value) {
    super.name = value;
  }
  get description() {
    return this[description$];
  }
  set description(value) {
    super.description = value;
  }
};
(developer.Metric.new = function(name, description) {
  this[name$9] = name;
  this[description$] = description;
  if (this.name === "vm" || this.name[$contains]("/")) {
    dart.throw(new core.ArgumentError.new("Invalid Metric name."));
  }
}).prototype = developer.Metric.prototype;
;
dart.setLibraryUri(developer.Metric, "dart:developer");
;
const _value$0 = dart.privateName(developer, "_value");
const _toJSON = dart.privateName(developer, "_toJSON");
const min$ = dart.privateName(developer, "Gauge.min");
const max$ = dart.privateName(developer, "Gauge.max");
developer.Gauge = class Gauge extends developer.Metric {
  get min() {
    return this[min$];
  }
  set min(value) {
    super.min = value;
  }
  get max() {
    return this[max$];
  }
  set max(value) {
    super.max = value;
  }
  get value() {
    return this[_value$0];
  }
  set value(v) {
    if (dart.notNull(v) < dart.notNull(this.min)) {
      v = this.min;
    } else if (dart.notNull(v) > dart.notNull(this.max)) {
      v = this.max;
    }
    this[_value$0] = v;
  }
  [_toJSON]() {
    let map = new (IdentityMapOfString$Object()).from(["type", "Gauge", "id", "metrics/" + dart.str(this.name), "name", this.name, "description", this.description, "value", this.value, "min", this.min, "max", this.max]);
    return map;
  }
};
(developer.Gauge.new = function(name, description, min, max) {
  this[_value$0] = null;
  this[min$] = min;
  this[max$] = max;
  developer.Gauge.__proto__.new.call(this, name, description);
  core.ArgumentError.checkNotNull(this.min, "min");
  core.ArgumentError.checkNotNull(this.max, "max");
  if (!(dart.notNull(this.min) < dart.notNull(this.max))) dart.throw(new core.ArgumentError.new("min must be less than max"));
  this[_value$0] = this.min;
}).prototype = developer.Gauge.prototype;
;
;
dart.setGetterSignature(developer.Gauge, () => ({
  __proto__: dart.getGetters(developer.Gauge.__proto__),
  value: core.double
}));
dart.setSetterSignature(developer.Gauge, () => ({
  __proto__: dart.getSetters(developer.Gauge.__proto__),
  value: core.double
}));
dart.setLibraryUri(developer.Gauge, "dart:developer");
;
developer.Counter = class Counter extends developer.Metric {
  get value() {
    return this[_value$0];
  }
  set value(v) {
    this[_value$0] = v;
  }
  [_toJSON]() {
    let map = new (IdentityMapOfString$Object()).from(["type", "Counter", "id", "metrics/" + dart.str(this.name), "name", this.name, "description", this.description, "value", this.value]);
    return map;
  }
};
(developer.Counter.new = function(name, description) {
  this[_value$0] = 0.0;
  developer.Counter.__proto__.new.call(this, name, description);
  ;
}).prototype = developer.Counter.prototype;
;
;
dart.setGetterSignature(developer.Counter, () => ({
  __proto__: dart.getGetters(developer.Counter.__proto__),
  value: core.double
}));
dart.setSetterSignature(developer.Counter, () => ({
  __proto__: dart.getSetters(developer.Counter.__proto__),
  value: core.double
}));
dart.setLibraryUri(developer.Counter, "dart:developer");
;
developer.Metrics = class Metrics extends core.Object {
  static register(metric) {
    core.ArgumentError.checkNotNull(metric, "metric");
    if (developer.Metrics._metrics[$_get](metric.name) != null) {
      dart.throw(new core.ArgumentError.new("Registered metrics have unique names"));
    }
    developer.Metrics._metrics[$_set](metric.name, metric);
  }
  static deregister(metric) {
    core.ArgumentError.checkNotNull(metric, "metric");
    developer.Metrics._metrics[$remove](metric.name);
  }
  static _printMetric(id) {
    let metric = developer.Metrics._metrics[$_get](id);
    if (metric == null) {
      return null;
    }
    return convert.json.encode(metric[_toJSON]());
  }
  static _printMetrics() {
    let metrics = [];
    for (let metric of developer.Metrics._metrics[$values]) {
      metrics[$add](metric[_toJSON]());
    }
    let map = new (IdentityMapOfString$Object()).from(["type", "MetricList", "metrics", metrics]);
    return convert.json.encode(map);
  }
};
(developer.Metrics.new = function() {
  ;
}).prototype = developer.Metrics.prototype;
;
dart.setLibraryUri(developer.Metrics, "dart:developer");
dart.defineLazy(developer.Metrics, {
  /*developer.Metrics._metrics*/get _metrics() {
    return new (LinkedMapOfString$Metric()).new();
  }
});
const majorVersion = dart.privateName(developer, "ServiceProtocolInfo.majorVersion");
const minorVersion = dart.privateName(developer, "ServiceProtocolInfo.minorVersion");
const serverUri$ = dart.privateName(developer, "ServiceProtocolInfo.serverUri");
developer.ServiceProtocolInfo = class ServiceProtocolInfo extends core.Object {
  get majorVersion() {
    return this[majorVersion];
  }
  set majorVersion(value) {
    super.majorVersion = value;
  }
  get minorVersion() {
    return this[minorVersion];
  }
  set minorVersion(value) {
    super.minorVersion = value;
  }
  get serverUri() {
    return this[serverUri$];
  }
  set serverUri(value) {
    super.serverUri = value;
  }
  toString() {
    if (this.serverUri != null) {
      return "Dart VM Service Protocol v" + dart.str(this.majorVersion) + "." + dart.str(this.minorVersion) + " " + "listening on " + dart.str(this.serverUri);
    } else {
      return "Dart VM Service Protocol v" + dart.str(this.majorVersion) + "." + dart.str(this.minorVersion);
    }
  }
};
(developer.ServiceProtocolInfo.new = function(serverUri) {
  this[majorVersion] = developer._getServiceMajorVersion();
  this[minorVersion] = developer._getServiceMinorVersion();
  this[serverUri$] = serverUri;
  ;
}).prototype = developer.ServiceProtocolInfo.prototype;
;
dart.setLibraryUri(developer.ServiceProtocolInfo, "dart:developer");
;
dart.defineExtensionMethods(developer.ServiceProtocolInfo, ['toString']);
developer.Service = class Service extends core.Object {
  static getInfo() {
    return async.async(developer.ServiceProtocolInfo, function* getInfo() {
      let receivePort = isolate.RawReceivePort.new();
      let uriCompleter = CompleterOfUri().new();
      receivePort.handler = dart.fn(uri => uriCompleter.complete(uri), UriTovoid());
      developer._getServerInfo(receivePort.sendPort);
      let uri = (yield uriCompleter.future);
      receivePort.close();
      return new developer.ServiceProtocolInfo.new(uri);
    });
  }
  static controlWebServer(opts) {
    let enable = opts && 'enable' in opts ? opts.enable : false;
    return async.async(developer.ServiceProtocolInfo, function* controlWebServer() {
      core.ArgumentError.checkNotNull(enable, "enable");
      let receivePort = isolate.RawReceivePort.new();
      let uriCompleter = CompleterOfUri().new();
      receivePort.handler = dart.fn(uri => uriCompleter.complete(uri), UriTovoid());
      developer._webServerControl(receivePort.sendPort, enable);
      let uri = (yield uriCompleter.future);
      receivePort.close();
      return new developer.ServiceProtocolInfo.new(uri);
    });
  }
  static getIsolateID(isolate) {
    core.ArgumentError.checkNotNull(isolate, "isolate");
    return developer._getIsolateIDFromSendPort(isolate.controlPort);
  }
};
(developer.Service.new = function() {
  ;
}).prototype = developer.Service.prototype;
;
dart.setLibraryUri(developer.Service, "dart:developer");
const _type$0 = dart.privateName(developer, "_type");
const id$ = dart.privateName(developer, "Flow.id");
developer.Flow = class Flow extends core.Object {
  get id() {
    return this[id$];
  }
  set id(value) {
    super.id = value;
  }
  static begin(opts) {
    let t71;
    let id = opts && 'id' in opts ? opts.id : null;
    return new developer.Flow.__(9, (t71 = id, t71 == null ? developer._getNextAsyncId() : t71));
  }
  static step(id) {
    return new developer.Flow.__(10, id);
  }
  static end(id) {
    return new developer.Flow.__(11, id);
  }
};
(developer.Flow.__ = function(_type, id) {
  this[_type$0] = _type;
  this[id$] = id;
  ;
}).prototype = developer.Flow.prototype;
;
dart.setLibraryUri(developer.Flow, "dart:developer");
;
dart.defineLazy(developer.Flow, {
  /*developer.Flow._begin*/get _begin() {
    return 9;
  },
  /*developer.Flow._step*/get _step() {
    return 10;
  },
  /*developer.Flow._end*/get _end() {
    return 11;
  }
});
const _arguments$1 = dart.privateName(developer, "_arguments");
developer.Timeline = class Timeline extends core.Object {
  static startSync(name, opts) {
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let flow = opts && 'flow' in opts ? opts.flow : null;
    if (!true) return;
    core.ArgumentError.checkNotNull(name, "name");
    if (!dart.test(developer._isDartStreamEnabled())) {
      developer.Timeline._stack[$add](null);
      return;
    }
    let block = new developer._SyncBlock.__(name, developer._getTraceClock(), developer._getThreadCpuClock());
    if ($arguments != null) {
      block[_arguments$1] = $arguments;
    }
    if (flow != null) {
      block.flow = flow;
    }
    developer.Timeline._stack[$add](block);
  }
  static finishSync() {
    if (!true) {
      return;
    }
    if (developer.Timeline._stack[$length] === 0) {
      dart.throw(new core.StateError.new("Uneven calls to startSync and finishSync"));
    }
    let block = developer.Timeline._stack[$removeLast]();
    if (block == null) {
      return;
    }
    block.finish();
  }
  static instantSync(name, opts) {
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    if (!true) return;
    core.ArgumentError.checkNotNull(name, "name");
    if (!dart.test(developer._isDartStreamEnabled())) {
      return;
    }
    let instantArguments = null;
    if ($arguments != null) {
      instantArguments = collection.LinkedHashMap.from($arguments);
    }
    developer._reportInstantEvent(developer._getTraceClock(), "Dart", name, developer._argumentsAsJson(instantArguments));
  }
  static timeSync(T, name, $function, opts) {
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let flow = opts && 'flow' in opts ? opts.flow : null;
    developer.Timeline.startSync(name, {arguments: $arguments, flow: flow});
    try {
      return $function();
    } finally {
      developer.Timeline.finishSync();
    }
  }
  static get now() {
    return developer._getTraceClock();
  }
};
(developer.Timeline.new = function() {
  ;
}).prototype = developer.Timeline.prototype;
;
dart.setLibraryUri(developer.Timeline, "dart:developer");
dart.defineLazy(developer.Timeline, {
  /*developer.Timeline._stack*/get _stack() {
    return JSArrayOf_SyncBlock().of([]);
  }
});
const _stack = dart.privateName(developer, "_stack");
const _parent = dart.privateName(developer, "_parent");
const _taskId$ = dart.privateName(developer, "_taskId");
const _start$1 = dart.privateName(developer, "_start");
const _finish = dart.privateName(developer, "_finish");
developer.TimelineTask = class TimelineTask extends core.Object {
  start(name, opts) {
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    if (!true) return;
    core.ArgumentError.checkNotNull(name, "name");
    let block = new developer._AsyncBlock.__(name, this[_taskId$]);
    this[_stack][$add](block);
    block[_start$1]((() => {
      let t71 = new _js_helper.LinkedMap.new();
      if ($arguments != null) for (let t72 of $arguments[$entries])
        t71[$_set](t72.key, t72.value);
      if (this[_parent] != null) t71[$_set]("parentId", this[_parent][_taskId$][$toRadixString](16));
      return t71;
    })());
  }
  instant(name, opts) {
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    if (!true) return;
    core.ArgumentError.checkNotNull(name, "name");
    let instantArguments = null;
    if ($arguments != null) {
      instantArguments = collection.LinkedHashMap.from($arguments);
    }
    developer._reportTaskEvent(developer._getTraceClock(), this[_taskId$], "n", "Dart", name, developer._argumentsAsJson(instantArguments));
  }
  finish(opts) {
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    if (!true) {
      return;
    }
    if (this[_stack][$length] === 0) {
      dart.throw(new core.StateError.new("Uneven calls to start and finish"));
    }
    let block = this[_stack][$removeLast]();
    block[_finish]($arguments);
  }
  pass() {
    if (dart.notNull(this[_stack][$length]) > 0) {
      dart.throw(new core.StateError.new("You cannot pass a TimelineTask without finishing all started " + "operations"));
    }
    let r = this[_taskId$];
    return r;
  }
};
(developer.TimelineTask.new = function(opts) {
  let parent = opts && 'parent' in opts ? opts.parent : null;
  this[_stack] = JSArrayOf_AsyncBlock().of([]);
  this[_parent] = parent;
  this[_taskId$] = developer._getNextAsyncId();
}).prototype = developer.TimelineTask.prototype;
(developer.TimelineTask.withTaskId = function(taskId) {
  this[_stack] = JSArrayOf_AsyncBlock().of([]);
  this[_parent] = null;
  this[_taskId$] = taskId;
  core.ArgumentError.checkNotNull(taskId, "taskId");
}).prototype = developer.TimelineTask.prototype;
;
;
dart.setLibraryUri(developer.TimelineTask, "dart:developer");
;
developer._AsyncBlock = class _AsyncBlock extends core.Object {
  [_start$1]($arguments) {
    developer._reportTaskEvent(developer._getTraceClock(), this[_taskId$], "b", this.category, this.name, developer._argumentsAsJson($arguments));
  }
  [_finish]($arguments) {
    developer._reportTaskEvent(developer._getTraceClock(), this[_taskId$], "e", this.category, this.name, developer._argumentsAsJson($arguments));
  }
};
(developer._AsyncBlock.__ = function(name, _taskId) {
  this.category = "Dart";
  this.name = name;
  this[_taskId$] = _taskId;
  ;
}).prototype = developer._AsyncBlock.prototype;
;
;
dart.setLibraryUri(developer._AsyncBlock, "dart:developer");
;
const _flow = dart.privateName(developer, "_flow");
const _startCpu$ = dart.privateName(developer, "_startCpu");
developer._SyncBlock = class _SyncBlock extends core.Object {
  finish() {
    developer._reportCompleteEvent(this[_start$1], this[_startCpu$], this.category, this.name, developer._argumentsAsJson(this[_arguments$1]));
    if (this[_flow] != null) {
      developer._reportFlowEvent(this[_start$1], this[_startCpu$], this.category, dart.str(this[_flow].id), this[_flow][_type$0], this[_flow].id, developer._argumentsAsJson(null));
    }
  }
  set flow(f) {
    this[_flow] = f;
  }
};
(developer._SyncBlock.__ = function(name, _start, _startCpu) {
  this.category = "Dart";
  this[_arguments$1] = null;
  this[_flow] = null;
  this.name = name;
  this[_start$1] = _start;
  this[_startCpu$] = _startCpu;
  ;
}).prototype = developer._SyncBlock.prototype;
;
;
dart.setSetterSignature(developer._SyncBlock, () => ({
  __proto__: dart.getSetters(developer._SyncBlock.__proto__),
  flow: developer.Flow
}));
dart.setLibraryUri(developer._SyncBlock, "dart:developer");
;
developer.invokeExtension = function _invokeExtension(methodName, encodedJson) {
  return new dart.global.Promise((resolve, reject) => async.async(core.Null, function*() {
    try {
      let method = developer._lookupExtension(methodName);
      let parameters = core.Map.as(convert.json.decode(encodedJson))[$cast](core.String, core.String);
      let result = (yield method(methodName, parameters));
      resolve(result[_toString$]());
    } catch (e$) {
      let e = dart.getThrown(e$);
      reject(dart.str(e));
    }
  }));
};
developer.debugger = function $debugger(opts) {
  let when = opts && 'when' in opts ? opts.when : true;
  let message = opts && 'message' in opts ? opts.message : null;
  if (dart.test(when)) {
    debugger;
  }
  return when;
};
developer.inspect = function inspect(object) {
  console.debug("dart.developer.inspect", object);
  return object;
};
developer.log = function log(message, opts) {
  let time = opts && 'time' in opts ? opts.time : null;
  let sequenceNumber = opts && 'sequenceNumber' in opts ? opts.sequenceNumber : null;
  let level = opts && 'level' in opts ? opts.level : 0;
  let name = opts && 'name' in opts ? opts.name : "";
  let zone = opts && 'zone' in opts ? opts.zone : null;
  let error = opts && 'error' in opts ? opts.error : null;
  let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
  let items = {message: message, name: name, level: level};
  if (time != null) items.time = time;
  if (sequenceNumber != null) {
    items.sequenceNumber = sequenceNumber;
  }
  if (zone != null) items.zone = zone;
  if (error != null) items.error = error;
  if (stackTrace != null) items.stackTrace = stackTrace;
  console.debug("dart.developer.log", items);
};
developer.registerExtension = function registerExtension$(method, handler) {
  core.ArgumentError.checkNotNull(method, "method");
  if (!method[$startsWith]("ext.")) {
    dart.throw(new core.ArgumentError.value(method, "method", "Must begin with ext."));
  }
  if (developer._lookupExtension(method) != null) {
    dart.throw(new core.ArgumentError.new("Extension already registered: " + dart.str(method)));
  }
  core.ArgumentError.checkNotNull(handler, "handler");
  developer._registerExtension(method, handler);
};
developer.postEvent = function postEvent(eventKind, eventData) {
  core.ArgumentError.checkNotNull(eventKind, "eventKind");
  core.ArgumentError.checkNotNull(eventData, "eventData");
  let eventDataAsString = convert.json.encode(eventData);
  developer._postEvent(eventKind, eventDataAsString);
};
developer._postEvent = function _postEvent(eventKind, eventData) {
  console.debug("dart.developer.postEvent", eventKind, eventData);
};
developer._lookupExtension = function _lookupExtension(method) {
  return developer._extensions[$_get](method);
};
developer._registerExtension = function _registerExtension(method, handler) {
  developer._extensions[$_set](method, handler);
  console.debug("dart.developer.registerExtension", method);
};
developer.getCurrentTag = function getCurrentTag() {
  return developer._currentTag;
};
developer._getServerInfo = function _getServerInfo(sendPort) {
  sendPort.send(null);
};
developer._webServerControl = function _webServerControl(sendPort, enable) {
  sendPort.send(null);
};
developer._getServiceMajorVersion = function _getServiceMajorVersion() {
  return 0;
};
developer._getServiceMinorVersion = function _getServiceMinorVersion() {
  return 0;
};
developer._getIsolateIDFromSendPort = function _getIsolateIDFromSendPort(sendPort) {
  return null;
};
developer._argumentsAsJson = function _argumentsAsJson($arguments) {
  if ($arguments == null || $arguments[$length] === 0) {
    return "{}";
  }
  return convert.json.encode($arguments);
};
developer._isDartStreamEnabled = function _isDartStreamEnabled() {
  return false;
};
developer._getNextAsyncId = function _getNextAsyncId() {
  return 0;
};
developer._getTraceClock = function _getTraceClock() {
  let t74;
  t74 = developer._clockValue;
  developer._clockValue = dart.notNull(t74) + 1;
  return t74;
};
developer._getThreadCpuClock = function _getThreadCpuClock() {
  return -1;
};
developer._reportTaskEvent = function _reportTaskEvent(start, taskId, phase, category, name, argumentsAsJson) {
};
developer._reportCompleteEvent = function _reportCompleteEvent(start, startCpu, category, name, argumentsAsJson) {
};
developer._reportFlowEvent = function _reportFlowEvent(start, startCpu, category, name, type, id, argumentsAsJson) {
};
developer._reportInstantEvent = function _reportInstantEvent(start, category, name, argumentsAsJson) {
};
dart.defineLazy(developer, {
  /*developer._extensions*/get _extensions() {
    return new (LinkedMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse()).new();
  },
  /*developer._clockValue*/get _clockValue() {
    return 0;
  },
  set _clockValue(_) {},
  /*developer._currentTag*/get _currentTag() {
    return developer._FakeUserTag._defaultTag;
  },
  set _currentTag(_) {},
  /*developer._hasTimeline*/get _hasTimeline() {
    return true;
  }
});
io.BytesBuilder = class BytesBuilder extends core.Object {
  static new(opts) {
    let copy = opts && 'copy' in opts ? opts.copy : true;
    if (dart.test(copy)) {
      return new io._CopyingBytesBuilder.new();
    } else {
      return new io._BytesBuilder.new();
    }
  }
};
(io.BytesBuilder[dart.mixinNew] = function() {
}).prototype = io.BytesBuilder.prototype;
;
dart.setLibraryUri(io.BytesBuilder, "dart:io");
const _length$1 = dart.privateName(io, "_length");
const _buffer$ = dart.privateName(io, "_buffer");
const _grow$ = dart.privateName(io, "_grow");
io._CopyingBytesBuilder = class _CopyingBytesBuilder extends core.Object {
  add(bytes) {
    let bytesLength = bytes[$length];
    if (bytesLength === 0) return;
    let required = dart.notNull(this[_length$1]) + dart.notNull(bytesLength);
    if (dart.notNull(this[_buffer$][$length]) < required) {
      this[_grow$](required);
    }
    if (!(dart.notNull(this[_buffer$][$length]) >= required)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/bytes_builder.dart", 105, 12, "_buffer.length >= required");
    if (typed_data.Uint8List.is(bytes)) {
      this[_buffer$][$setRange](this[_length$1], required, bytes);
    } else {
      for (let i = 0; i < dart.notNull(bytesLength); i = i + 1) {
        this[_buffer$][$_set](dart.notNull(this[_length$1]) + i, bytes[$_get](i));
      }
    }
    this[_length$1] = required;
  }
  addByte(byte) {
    if (this[_buffer$][$length] == this[_length$1]) {
      this[_grow$](this[_length$1]);
    }
    if (!(dart.notNull(this[_buffer$][$length]) > dart.notNull(this[_length$1]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/bytes_builder.dart", 122, 12, "_buffer.length > _length");
    this[_buffer$][$_set](this[_length$1], byte);
    this[_length$1] = dart.notNull(this[_length$1]) + 1;
  }
  [_grow$](required) {
    let newSize = dart.notNull(required) * 2;
    if (dart.notNull(newSize) < 1024) {
      newSize = 1024;
    } else {
      newSize = io._CopyingBytesBuilder._pow2roundup(newSize);
    }
    let newBuffer = _native_typed_data.NativeUint8List.new(newSize);
    newBuffer[$setRange](0, this[_buffer$][$length], this[_buffer$]);
    this[_buffer$] = newBuffer;
  }
  takeBytes() {
    if (this[_length$1] === 0) return io._CopyingBytesBuilder._emptyList;
    let buffer = typed_data.Uint8List.view(this[_buffer$][$buffer], 0, this[_length$1]);
    this.clear();
    return buffer;
  }
  toBytes() {
    if (this[_length$1] === 0) return io._CopyingBytesBuilder._emptyList;
    return _native_typed_data.NativeUint8List.fromList(typed_data.Uint8List.view(this[_buffer$][$buffer], 0, this[_length$1]));
  }
  get length() {
    return this[_length$1];
  }
  get isEmpty() {
    return this[_length$1] === 0;
  }
  get isNotEmpty() {
    return this[_length$1] !== 0;
  }
  clear() {
    this[_length$1] = 0;
    this[_buffer$] = io._CopyingBytesBuilder._emptyList;
  }
  static _pow2roundup(x) {
    if (!(dart.notNull(x) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/bytes_builder.dart", 166, 12, "x > 0");
    x = dart.notNull(x) - 1;
    x = (dart.notNull(x) | x[$rightShift](1)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](2)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](4)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](8)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](16)) >>> 0;
    return dart.notNull(x) + 1;
  }
};
(io._CopyingBytesBuilder.new = function(initialCapacity) {
  if (initialCapacity === void 0) initialCapacity = 0;
  this[_length$1] = 0;
  this[_buffer$] = dart.notNull(initialCapacity) <= 0 ? io._CopyingBytesBuilder._emptyList : _native_typed_data.NativeUint8List.new(io._CopyingBytesBuilder._pow2roundup(initialCapacity));
  ;
}).prototype = io._CopyingBytesBuilder.prototype;
;
io._CopyingBytesBuilder[dart.implements] = () => [io.BytesBuilder];
;
dart.setGetterSignature(io._CopyingBytesBuilder, () => ({
  __proto__: dart.getGetters(io._CopyingBytesBuilder.__proto__),
  length: core.int,
  isEmpty: core.bool,
  isNotEmpty: core.bool
}));
dart.setLibraryUri(io._CopyingBytesBuilder, "dart:io");
;
dart.defineLazy(io._CopyingBytesBuilder, {
  /*io._CopyingBytesBuilder._initSize*/get _initSize() {
    return 1024;
  },
  /*io._CopyingBytesBuilder._emptyList*/get _emptyList() {
    return _native_typed_data.NativeUint8List.new(0);
  }
});
const _chunks = dart.privateName(io, "_chunks");
io._BytesBuilder = class _BytesBuilder extends core.Object {
  add(bytes) {
    let typedBytes = null;
    if (typed_data.Uint8List.is(bytes)) {
      typedBytes = bytes;
    } else {
      typedBytes = _native_typed_data.NativeUint8List.fromList(bytes);
    }
    this[_chunks][$add](typedBytes);
    this[_length$1] = dart.notNull(this[_length$1]) + dart.notNull(typedBytes[$length]);
  }
  addByte(byte) {
    let t74;
    this[_chunks][$add]((t74 = _native_typed_data.NativeUint8List.new(1), t74[$_set](0, byte), t74));
    this[_length$1] = dart.notNull(this[_length$1]) + 1;
  }
  takeBytes() {
    if (this[_length$1] === 0) return io._CopyingBytesBuilder._emptyList;
    if (this[_chunks][$length] === 1) {
      let buffer = this[_chunks][$_get](0);
      this.clear();
      return buffer;
    }
    let buffer = _native_typed_data.NativeUint8List.new(this[_length$1]);
    let offset = 0;
    for (let chunk of this[_chunks]) {
      buffer[$setRange](offset, offset + dart.notNull(chunk[$length]), chunk);
      offset = offset + dart.notNull(chunk[$length]);
    }
    this.clear();
    return buffer;
  }
  toBytes() {
    if (this[_length$1] === 0) return io._CopyingBytesBuilder._emptyList;
    let buffer = _native_typed_data.NativeUint8List.new(this[_length$1]);
    let offset = 0;
    for (let chunk of this[_chunks]) {
      buffer[$setRange](offset, offset + dart.notNull(chunk[$length]), chunk);
      offset = offset + dart.notNull(chunk[$length]);
    }
    return buffer;
  }
  get length() {
    return this[_length$1];
  }
  get isEmpty() {
    return this[_length$1] === 0;
  }
  get isNotEmpty() {
    return this[_length$1] !== 0;
  }
  clear() {
    this[_length$1] = 0;
    this[_chunks][$clear]();
  }
};
(io._BytesBuilder.new = function() {
  this[_length$1] = 0;
  this[_chunks] = JSArrayOfUint8List().of([]);
  ;
}).prototype = io._BytesBuilder.prototype;
;
io._BytesBuilder[dart.implements] = () => [io.BytesBuilder];
;
dart.setGetterSignature(io._BytesBuilder, () => ({
  __proto__: dart.getGetters(io._BytesBuilder.__proto__),
  length: core.int,
  isEmpty: core.bool,
  isNotEmpty: core.bool
}));
dart.setLibraryUri(io._BytesBuilder, "dart:io");
;
io.IOException = class IOException extends core.Object {
  toString() {
    return "IOException";
  }
};
(io.IOException.new = function() {
  ;
}).prototype = io.IOException.prototype;
;
io.IOException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(io.IOException, "dart:io");
dart.defineExtensionMethods(io.IOException, ['toString']);
const message$4 = dart.privateName(io, "OSError.message");
const errorCode$0 = dart.privateName(io, "OSError.errorCode");
io.OSError = class OSError extends core.Object {
  get message() {
    return this[message$4];
  }
  set message(value) {
    super.message = value;
  }
  get errorCode() {
    return this[errorCode$0];
  }
  set errorCode(value) {
    super.errorCode = value;
  }
  toString() {
    let t74, t74$, t74$0;
    let sb = new core.StringBuffer.new();
    sb.write("OS Error");
    if (this.message[$isNotEmpty]) {
      t74 = sb;
      t74.write(": ");
      t74.write(this.message);
      t74;
      if (this.errorCode !== -1) {
        t74$ = sb;
        t74$.write(", errno = ");
        t74$.write(dart.toString(this.errorCode));
        t74$;
      }
    } else if (this.errorCode !== -1) {
      t74$0 = sb;
      t74$0.write(": errno = ");
      t74$0.write(dart.toString(this.errorCode));
      t74$0;
    }
    return sb.toString();
  }
};
(io.OSError.new = function(message, errorCode) {
  if (message === void 0) message = "";
  if (errorCode === void 0) errorCode = -1;
  this[message$4] = message;
  this[errorCode$0] = errorCode;
  ;
}).prototype = io.OSError.prototype;
;
dart.setLibraryUri(io.OSError, "dart:io");
;
dart.defineExtensionMethods(io.OSError, ['toString']);
dart.defineLazy(io.OSError, {
  /*io.OSError.noErrorCode*/get noErrorCode() {
    return -1;
  }
});
io._BufferAndStart = class _BufferAndStart extends core.Object {};
(io._BufferAndStart.new = function(buffer, start) {
  this.buffer = buffer;
  this.start = start;
  ;
}).prototype = io._BufferAndStart.prototype;
;
dart.setLibraryUri(io._BufferAndStart, "dart:io");
;
io._IOCrypto = class _IOCrypto extends core.Object {
  static getRandomBytes(count) {
    dart.throw(new core.UnsupportedError.new("_IOCrypto.getRandomBytes"));
  }
};
(io._IOCrypto.new = function() {
  ;
}).prototype = io._IOCrypto.prototype;
;
dart.setLibraryUri(io._IOCrypto, "dart:io");
io.ZLibOption = class ZLibOption extends core.Object {};
(io.ZLibOption.new = function() {
  ;
}).prototype = io.ZLibOption.prototype;
;
dart.setLibraryUri(io.ZLibOption, "dart:io");
dart.defineLazy(io.ZLibOption, {
  /*io.ZLibOption.minWindowBits*/get minWindowBits() {
    return 8;
  },
  /*io.ZLibOption.MIN_WINDOW_BITS*/get MIN_WINDOW_BITS() {
    return 8;
  },
  /*io.ZLibOption.maxWindowBits*/get maxWindowBits() {
    return 15;
  },
  /*io.ZLibOption.MAX_WINDOW_BITS*/get MAX_WINDOW_BITS() {
    return 15;
  },
  /*io.ZLibOption.defaultWindowBits*/get defaultWindowBits() {
    return 15;
  },
  /*io.ZLibOption.DEFAULT_WINDOW_BITS*/get DEFAULT_WINDOW_BITS() {
    return 15;
  },
  /*io.ZLibOption.minLevel*/get minLevel() {
    return -1;
  },
  /*io.ZLibOption.MIN_LEVEL*/get MIN_LEVEL() {
    return -1;
  },
  /*io.ZLibOption.maxLevel*/get maxLevel() {
    return 9;
  },
  /*io.ZLibOption.MAX_LEVEL*/get MAX_LEVEL() {
    return 9;
  },
  /*io.ZLibOption.defaultLevel*/get defaultLevel() {
    return 6;
  },
  /*io.ZLibOption.DEFAULT_LEVEL*/get DEFAULT_LEVEL() {
    return 6;
  },
  /*io.ZLibOption.minMemLevel*/get minMemLevel() {
    return 1;
  },
  /*io.ZLibOption.MIN_MEM_LEVEL*/get MIN_MEM_LEVEL() {
    return 1;
  },
  /*io.ZLibOption.maxMemLevel*/get maxMemLevel() {
    return 9;
  },
  /*io.ZLibOption.MAX_MEM_LEVEL*/get MAX_MEM_LEVEL() {
    return 9;
  },
  /*io.ZLibOption.defaultMemLevel*/get defaultMemLevel() {
    return 8;
  },
  /*io.ZLibOption.DEFAULT_MEM_LEVEL*/get DEFAULT_MEM_LEVEL() {
    return 8;
  },
  /*io.ZLibOption.strategyFiltered*/get strategyFiltered() {
    return 1;
  },
  /*io.ZLibOption.STRATEGY_FILTERED*/get STRATEGY_FILTERED() {
    return 1;
  },
  /*io.ZLibOption.strategyHuffmanOnly*/get strategyHuffmanOnly() {
    return 2;
  },
  /*io.ZLibOption.STRATEGY_HUFFMAN_ONLY*/get STRATEGY_HUFFMAN_ONLY() {
    return 2;
  },
  /*io.ZLibOption.strategyRle*/get strategyRle() {
    return 3;
  },
  /*io.ZLibOption.STRATEGY_RLE*/get STRATEGY_RLE() {
    return 3;
  },
  /*io.ZLibOption.strategyFixed*/get strategyFixed() {
    return 4;
  },
  /*io.ZLibOption.STRATEGY_FIXED*/get STRATEGY_FIXED() {
    return 4;
  },
  /*io.ZLibOption.strategyDefault*/get strategyDefault() {
    return 0;
  },
  /*io.ZLibOption.STRATEGY_DEFAULT*/get STRATEGY_DEFAULT() {
    return 0;
  }
});
const gzip$ = dart.privateName(io, "ZLibCodec.gzip");
const level$ = dart.privateName(io, "ZLibCodec.level");
const memLevel$ = dart.privateName(io, "ZLibCodec.memLevel");
const strategy$ = dart.privateName(io, "ZLibCodec.strategy");
const windowBits$ = dart.privateName(io, "ZLibCodec.windowBits");
const raw$ = dart.privateName(io, "ZLibCodec.raw");
const dictionary$ = dart.privateName(io, "ZLibCodec.dictionary");
io.ZLibCodec = class ZLibCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
  get gzip() {
    return this[gzip$];
  }
  set gzip(value) {
    super.gzip = value;
  }
  get level() {
    return this[level$];
  }
  set level(value) {
    super.level = value;
  }
  get memLevel() {
    return this[memLevel$];
  }
  set memLevel(value) {
    super.memLevel = value;
  }
  get strategy() {
    return this[strategy$];
  }
  set strategy(value) {
    super.strategy = value;
  }
  get windowBits() {
    return this[windowBits$];
  }
  set windowBits(value) {
    super.windowBits = value;
  }
  get raw() {
    return this[raw$];
  }
  set raw(value) {
    super.raw = value;
  }
  get dictionary() {
    return this[dictionary$];
  }
  set dictionary(value) {
    super.dictionary = value;
  }
  get encoder() {
    return new io.ZLibEncoder.new({gzip: false, level: this.level, windowBits: this.windowBits, memLevel: this.memLevel, strategy: this.strategy, dictionary: this.dictionary, raw: this.raw});
  }
  get decoder() {
    return new io.ZLibDecoder.new({windowBits: this.windowBits, dictionary: this.dictionary, raw: this.raw});
  }
};
(io.ZLibCodec.new = function(opts) {
  let level = opts && 'level' in opts ? opts.level : 6;
  let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
  let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
  let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
  let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
  let raw = opts && 'raw' in opts ? opts.raw : false;
  let gzip = opts && 'gzip' in opts ? opts.gzip : false;
  this[level$] = level;
  this[windowBits$] = windowBits;
  this[memLevel$] = memLevel;
  this[strategy$] = strategy;
  this[dictionary$] = dictionary;
  this[raw$] = raw;
  this[gzip$] = gzip;
  io.ZLibCodec.__proto__.new.call(this);
  io._validateZLibeLevel(this.level);
  io._validateZLibMemLevel(this.memLevel);
  io._validateZLibStrategy(this.strategy);
  io._validateZLibWindowBits(this.windowBits);
}).prototype = io.ZLibCodec.prototype;
(io.ZLibCodec._default = function() {
  this[level$] = 6;
  this[windowBits$] = 15;
  this[memLevel$] = 8;
  this[strategy$] = 0;
  this[raw$] = false;
  this[gzip$] = false;
  this[dictionary$] = null;
  io.ZLibCodec.__proto__.new.call(this);
  ;
}).prototype = io.ZLibCodec.prototype;
;
dart.setGetterSignature(io.ZLibCodec, () => ({
  __proto__: dart.getGetters(io.ZLibCodec.__proto__),
  encoder: io.ZLibEncoder,
  decoder: io.ZLibDecoder
}));
dart.setLibraryUri(io.ZLibCodec, "dart:io");
;
const gzip$0 = dart.privateName(io, "GZipCodec.gzip");
const level$0 = dart.privateName(io, "GZipCodec.level");
const memLevel$0 = dart.privateName(io, "GZipCodec.memLevel");
const strategy$0 = dart.privateName(io, "GZipCodec.strategy");
const windowBits$0 = dart.privateName(io, "GZipCodec.windowBits");
const dictionary$0 = dart.privateName(io, "GZipCodec.dictionary");
const raw$0 = dart.privateName(io, "GZipCodec.raw");
io.GZipCodec = class GZipCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
  get gzip() {
    return this[gzip$0];
  }
  set gzip(value) {
    super.gzip = value;
  }
  get level() {
    return this[level$0];
  }
  set level(value) {
    super.level = value;
  }
  get memLevel() {
    return this[memLevel$0];
  }
  set memLevel(value) {
    super.memLevel = value;
  }
  get strategy() {
    return this[strategy$0];
  }
  set strategy(value) {
    super.strategy = value;
  }
  get windowBits() {
    return this[windowBits$0];
  }
  set windowBits(value) {
    super.windowBits = value;
  }
  get dictionary() {
    return this[dictionary$0];
  }
  set dictionary(value) {
    super.dictionary = value;
  }
  get raw() {
    return this[raw$0];
  }
  set raw(value) {
    super.raw = value;
  }
  get encoder() {
    return new io.ZLibEncoder.new({gzip: true, level: this.level, windowBits: this.windowBits, memLevel: this.memLevel, strategy: this.strategy, dictionary: this.dictionary, raw: this.raw});
  }
  get decoder() {
    return new io.ZLibDecoder.new({windowBits: this.windowBits, dictionary: this.dictionary, raw: this.raw});
  }
};
(io.GZipCodec.new = function(opts) {
  let level = opts && 'level' in opts ? opts.level : 6;
  let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
  let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
  let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
  let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
  let raw = opts && 'raw' in opts ? opts.raw : false;
  let gzip = opts && 'gzip' in opts ? opts.gzip : true;
  this[level$0] = level;
  this[windowBits$0] = windowBits;
  this[memLevel$0] = memLevel;
  this[strategy$0] = strategy;
  this[dictionary$0] = dictionary;
  this[raw$0] = raw;
  this[gzip$0] = gzip;
  io.GZipCodec.__proto__.new.call(this);
  io._validateZLibeLevel(this.level);
  io._validateZLibMemLevel(this.memLevel);
  io._validateZLibStrategy(this.strategy);
  io._validateZLibWindowBits(this.windowBits);
}).prototype = io.GZipCodec.prototype;
(io.GZipCodec._default = function() {
  this[level$0] = 6;
  this[windowBits$0] = 15;
  this[memLevel$0] = 8;
  this[strategy$0] = 0;
  this[raw$0] = false;
  this[gzip$0] = true;
  this[dictionary$0] = null;
  io.GZipCodec.__proto__.new.call(this);
  ;
}).prototype = io.GZipCodec.prototype;
;
dart.setGetterSignature(io.GZipCodec, () => ({
  __proto__: dart.getGetters(io.GZipCodec.__proto__),
  encoder: io.ZLibEncoder,
  decoder: io.ZLibDecoder
}));
dart.setLibraryUri(io.GZipCodec, "dart:io");
;
const gzip$1 = dart.privateName(io, "ZLibEncoder.gzip");
const level$1 = dart.privateName(io, "ZLibEncoder.level");
const memLevel$1 = dart.privateName(io, "ZLibEncoder.memLevel");
const strategy$1 = dart.privateName(io, "ZLibEncoder.strategy");
const windowBits$1 = dart.privateName(io, "ZLibEncoder.windowBits");
const dictionary$1 = dart.privateName(io, "ZLibEncoder.dictionary");
const raw$1 = dart.privateName(io, "ZLibEncoder.raw");
io.ZLibEncoder = class ZLibEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
  get gzip() {
    return this[gzip$1];
  }
  set gzip(value) {
    super.gzip = value;
  }
  get level() {
    return this[level$1];
  }
  set level(value) {
    super.level = value;
  }
  get memLevel() {
    return this[memLevel$1];
  }
  set memLevel(value) {
    super.memLevel = value;
  }
  get strategy() {
    return this[strategy$1];
  }
  set strategy(value) {
    super.strategy = value;
  }
  get windowBits() {
    return this[windowBits$1];
  }
  set windowBits(value) {
    super.windowBits = value;
  }
  get dictionary() {
    return this[dictionary$1];
  }
  set dictionary(value) {
    super.dictionary = value;
  }
  get raw() {
    return this[raw$1];
  }
  set raw(value) {
    super.raw = value;
  }
  convert(bytes) {
    let t74;
    ListOfint()._check(bytes);
    let sink = new io._BufferSink.new();
    t74 = this.startChunkedConversion(sink);
    t74.add(bytes);
    t74.close();
    t74;
    return sink.builder.takeBytes();
  }
  startChunkedConversion(sink) {
    SinkOfListOfint()._check(sink);
    if (!convert.ByteConversionSink.is(sink)) {
      sink = new convert._ByteAdapterSink.new(sink);
    }
    return new io._ZLibEncoderSink.__(convert.ByteConversionSink._check(sink), this.gzip, this.level, this.windowBits, this.memLevel, this.strategy, this.dictionary, this.raw);
  }
};
(io.ZLibEncoder.new = function(opts) {
  let gzip = opts && 'gzip' in opts ? opts.gzip : false;
  let level = opts && 'level' in opts ? opts.level : 6;
  let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
  let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
  let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
  let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
  let raw = opts && 'raw' in opts ? opts.raw : false;
  this[gzip$1] = gzip;
  this[level$1] = level;
  this[windowBits$1] = windowBits;
  this[memLevel$1] = memLevel;
  this[strategy$1] = strategy;
  this[dictionary$1] = dictionary;
  this[raw$1] = raw;
  io.ZLibEncoder.__proto__.new.call(this);
  io._validateZLibeLevel(this.level);
  io._validateZLibMemLevel(this.memLevel);
  io._validateZLibStrategy(this.strategy);
  io._validateZLibWindowBits(this.windowBits);
}).prototype = io.ZLibEncoder.prototype;
;
;
dart.setLibraryUri(io.ZLibEncoder, "dart:io");
;
const windowBits$2 = dart.privateName(io, "ZLibDecoder.windowBits");
const dictionary$2 = dart.privateName(io, "ZLibDecoder.dictionary");
const raw$2 = dart.privateName(io, "ZLibDecoder.raw");
io.ZLibDecoder = class ZLibDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
  get windowBits() {
    return this[windowBits$2];
  }
  set windowBits(value) {
    super.windowBits = value;
  }
  get dictionary() {
    return this[dictionary$2];
  }
  set dictionary(value) {
    super.dictionary = value;
  }
  get raw() {
    return this[raw$2];
  }
  set raw(value) {
    super.raw = value;
  }
  convert(bytes) {
    let t74;
    ListOfint()._check(bytes);
    let sink = new io._BufferSink.new();
    t74 = this.startChunkedConversion(sink);
    t74.add(bytes);
    t74.close();
    t74;
    return sink.builder.takeBytes();
  }
  startChunkedConversion(sink) {
    SinkOfListOfint()._check(sink);
    if (!convert.ByteConversionSink.is(sink)) {
      sink = new convert._ByteAdapterSink.new(sink);
    }
    return new io._ZLibDecoderSink.__(convert.ByteConversionSink._check(sink), this.windowBits, this.dictionary, this.raw);
  }
};
(io.ZLibDecoder.new = function(opts) {
  let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
  let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
  let raw = opts && 'raw' in opts ? opts.raw : false;
  this[windowBits$2] = windowBits;
  this[dictionary$2] = dictionary;
  this[raw$2] = raw;
  io.ZLibDecoder.__proto__.new.call(this);
  io._validateZLibWindowBits(this.windowBits);
}).prototype = io.ZLibDecoder.prototype;
;
;
dart.setLibraryUri(io.ZLibDecoder, "dart:io");
;
io.RawZLibFilter = class RawZLibFilter extends core.Object {
  static deflateFilter(opts) {
    let gzip = opts && 'gzip' in opts ? opts.gzip : false;
    let level = opts && 'level' in opts ? opts.level : 6;
    let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
    let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
    let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
    let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
    let raw = opts && 'raw' in opts ? opts.raw : false;
    return io.RawZLibFilter._makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw);
  }
  static inflateFilter(opts) {
    let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
    let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
    let raw = opts && 'raw' in opts ? opts.raw : false;
    return io.RawZLibFilter._makeZLibInflateFilter(windowBits, dictionary, raw);
  }
  static _makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw) {
    dart.throw(new core.UnsupportedError.new("_newZLibDeflateFilter"));
  }
  static _makeZLibInflateFilter(windowBits, dictionary, raw) {
    dart.throw(new core.UnsupportedError.new("_newZLibInflateFilter"));
  }
};
(io.RawZLibFilter[dart.mixinNew] = function() {
}).prototype = io.RawZLibFilter.prototype;
;
dart.setLibraryUri(io.RawZLibFilter, "dart:io");
io._BufferSink = class _BufferSink extends convert.ByteConversionSink {
  add(chunk) {
    ListOfint()._check(chunk);
    this.builder.add(chunk);
  }
  addSlice(chunk, start, end, isLast) {
    if (typed_data.Uint8List.is(chunk)) {
      let list = chunk;
      this.builder.add(typed_data.Uint8List.view(list[$buffer], start, dart.notNull(end) - dart.notNull(start)));
    } else {
      this.builder.add(chunk[$sublist](start, end));
    }
  }
  close() {
  }
};
(io._BufferSink.new = function() {
  this.builder = io.BytesBuilder.new({copy: false});
  io._BufferSink.__proto__.new.call(this);
  ;
}).prototype = io._BufferSink.prototype;
;
;
dart.setLibraryUri(io._BufferSink, "dart:io");
;
const _closed = dart.privateName(io, "_closed");
const _empty = dart.privateName(io, "_empty");
const _sink$1 = dart.privateName(io, "_sink");
const _filter$ = dart.privateName(io, "_filter");
let C169;
io._FilterSink = class _FilterSink extends convert.ByteConversionSink {
  add(data) {
    ListOfint()._check(data);
    this.addSlice(data, 0, data[$length], false);
  }
  addSlice(data, start, end, isLast) {
    if (dart.test(this[_closed])) return;
    if (end == null) dart.throw(new core.ArgumentError.notNull("end"));
    core.RangeError.checkValidRange(start, end, data[$length]);
    try {
      this[_empty] = false;
      let bufferAndStart = io._ensureFastAndSerializableByteData(data, start, end);
      this[_filter$].process(bufferAndStart.buffer, bufferAndStart.start, dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
      let out = null;
      while ((out = this[_filter$].processed({flush: false})) != null) {
        this[_sink$1].add(out);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      this[_closed] = true;
      dart.rethrow(e$);
    }
    if (dart.test(isLast)) this.close();
  }
  close() {
    if (dart.test(this[_closed])) return;
    if (dart.test(this[_empty])) this[_filter$].process(C169 || CT.C169, 0, 0);
    try {
      let out = null;
      while ((out = this[_filter$].processed({end: true})) != null) {
        this[_sink$1].add(out);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      this[_closed] = true;
      dart.throw(e);
    }
    this[_closed] = true;
    this[_sink$1].close();
  }
};
(io._FilterSink.new = function(_sink, _filter) {
  this[_closed] = false;
  this[_empty] = true;
  this[_sink$1] = _sink;
  this[_filter$] = _filter;
  io._FilterSink.__proto__.new.call(this);
  ;
}).prototype = io._FilterSink.prototype;
;
;
dart.setLibraryUri(io._FilterSink, "dart:io");
;
io._ZLibEncoderSink = class _ZLibEncoderSink extends io._FilterSink {};
(io._ZLibEncoderSink.__ = function(sink, gzip, level, windowBits, memLevel, strategy, dictionary, raw) {
  io._ZLibEncoderSink.__proto__.new.call(this, sink, io.RawZLibFilter._makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw));
  ;
}).prototype = io._ZLibEncoderSink.prototype;
;
dart.setLibraryUri(io._ZLibEncoderSink, "dart:io");
io._ZLibDecoderSink = class _ZLibDecoderSink extends io._FilterSink {};
(io._ZLibDecoderSink.__ = function(sink, windowBits, dictionary, raw) {
  io._ZLibDecoderSink.__proto__.new.call(this, sink, io.RawZLibFilter._makeZLibInflateFilter(windowBits, dictionary, raw));
  ;
}).prototype = io._ZLibDecoderSink.prototype;
;
dart.setLibraryUri(io._ZLibDecoderSink, "dart:io");
io.Directory = class Directory extends core.Object {
  static new(path) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return new io._Directory.new(path);
    }
    return overrides.createDirectory(path);
  }
  static fromRawPath(path) {
    return new io._Directory.fromRawPath(path);
  }
  static fromUri(uri) {
    return io.Directory.new(uri.toFilePath());
  }
  static get current() {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io._Directory.current;
    }
    return overrides.getCurrentDirectory();
  }
  static set current(path) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      io._Directory.current = path;
      return;
    }
    overrides.setCurrentDirectory(core.String._check(path));
  }
  static get systemTemp() {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io._Directory.systemTemp;
    }
    return overrides.getSystemTempDirectory();
  }
};
(io.Directory[dart.mixinNew] = function() {
}).prototype = io.Directory.prototype;
;
io.Directory[dart.implements] = () => [io.FileSystemEntity];
dart.setLibraryUri(io.Directory, "dart:io");
const _path$ = dart.privateName(io, "_path");
const _rawPath$ = dart.privateName(io, "_rawPath");
const _isErrorResponse = dart.privateName(io, "_isErrorResponse");
const _exceptionOrErrorFromResponse = dart.privateName(io, "_exceptionOrErrorFromResponse");
const _absolutePath = dart.privateName(io, "_absolutePath");
const _delete = dart.privateName(io, "_delete");
const _deleteSync = dart.privateName(io, "_deleteSync");
const _rawAbsolutePath = dart.privateName(io, "_rawAbsolutePath");
const _path = dart.privateName(io, "FileSystemEntity._path");
const _rawPath = dart.privateName(io, "FileSystemEntity._rawPath");
io.FileSystemEntity = class FileSystemEntity extends core.Object {
  get [_path$]() {
    return this[_path];
  }
  set [_path$](value) {
    this[_path] = value;
  }
  get [_rawPath$]() {
    return this[_rawPath];
  }
  set [_rawPath$](value) {
    this[_rawPath] = value;
  }
  get uri() {
    return core._Uri.file(this.path);
  }
  resolveSymbolicLinks() {
    return io._File._dispatchWithNamespace(6, [null, this[_rawPath$]]).then(core.String, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot resolve symbolic links", this.path));
      }
      return FutureOrOfString()._check(response);
    }, dynamicToFutureOrOfString()));
  }
  resolveSymbolicLinksSync() {
    let result = io.FileSystemEntity._resolveSymbolicLinks(io._Namespace._namespace, this[_rawPath$]);
    io.FileSystemEntity._throwIfError(result, "Cannot resolve symbolic links", this.path);
    return core.String._check(result);
  }
  stat() {
    return io.FileStat.stat(this.path);
  }
  statSync() {
    return io.FileStat.statSync(this.path);
  }
  delete(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    return this[_delete]({recursive: recursive});
  }
  deleteSync(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    return this[_deleteSync]({recursive: recursive});
  }
  watch(opts) {
    let events = opts && 'events' in opts ? opts.events : 15;
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    let trimmedPath = io.FileSystemEntity._trimTrailingPathSeparators(this.path);
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io._FileSystemWatcher._watch(trimmedPath, events, recursive);
    }
    return overrides.fsWatch(trimmedPath, events, recursive);
  }
  static _identical(path1, path2) {
    return io._File._dispatchWithNamespace(28, [null, path1, path2]).then(core.bool, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Error in FileSystemEntity.identical(" + dart.str(path1) + ", " + dart.str(path2) + ")", ""));
      }
      return FutureOrOfbool()._check(response);
    }, dynamicToFutureOrOfbool()));
  }
  static identical(path1, path2) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileSystemEntity._identical(path1, path2);
    }
    return overrides.fseIdentical(path1, path2);
  }
  get isAbsolute() {
    if (dart.test(io.Platform.isWindows)) {
      return this.path[$startsWith](io.FileSystemEntity._absoluteWindowsPathPattern);
    } else {
      return this.path[$startsWith]("/");
    }
  }
  get [_absolutePath]() {
    if (dart.test(this.isAbsolute)) return this.path;
    let current = io.Directory.current.path;
    if (current[$endsWith]("/") || dart.test(io.Platform.isWindows) && current[$endsWith]("\\")) {
      return dart.str(current) + dart.str(this.path);
    } else {
      return dart.str(current) + dart.str(io.Platform.pathSeparator) + dart.str(this.path);
    }
  }
  get [_rawAbsolutePath]() {
    if (dart.test(this.isAbsolute)) return this[_rawPath$];
    let current = io.Directory.current[_rawPath$][$toList]();
    if (!(current[$last] === 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/file_system_entity.dart", 591, 12, "current.last == 0");
    current[$removeLast]();
    if (current[$last] === "/"[$codeUnitAt](0) || dart.test(io.Platform.isWindows) && current[$last] === "\\"[$codeUnitAt](0)) {
      current[$addAll](this[_rawPath$]);
      return _native_typed_data.NativeUint8List.fromList(current);
    } else {
      current[$addAll](convert.utf8.encode(io.Platform.pathSeparator));
      current[$addAll](this[_rawPath$]);
      return _native_typed_data.NativeUint8List.fromList(current);
    }
  }
  static _identicalSync(path1, path2) {
    let result = io.FileSystemEntity._identicalNative(io._Namespace._namespace, path1, path2);
    io.FileSystemEntity._throwIfError(result, "Error in FileSystemEntity.identicalSync");
    return core.bool._check(result);
  }
  static identicalSync(path1, path2) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileSystemEntity._identicalSync(path1, path2);
    }
    return overrides.fseIdenticalSync(path1, path2);
  }
  static get isWatchSupported() {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io._FileSystemWatcher.isSupported;
    }
    return overrides.fsWatchIsSupported();
  }
  static _toUtf8Array(s) {
    return io.FileSystemEntity._toNullTerminatedUtf8Array(typed_data.Uint8List._check(convert.utf8.encode(s)));
  }
  static _toNullTerminatedUtf8Array(l) {
    if (l == null) {
      return null;
    }
    if (dart.test(l[$isNotEmpty]) && l[$last] !== 0) {
      let tmp = _native_typed_data.NativeUint8List.new(dart.notNull(l[$length]) + 1);
      tmp[$setRange](0, l[$length], l);
      return tmp;
    } else {
      return l;
    }
  }
  static _toStringFromUtf8Array(l) {
    if (l == null) {
      return "";
    }
    let nonNullTerminated = l;
    if (l[$last] === 0) {
      nonNullTerminated = typed_data.Uint8List.view(l[$buffer], 0, dart.notNull(l[$length]) - 1);
    }
    return convert.utf8.decode(nonNullTerminated, {allowMalformed: true});
  }
  static type(path, opts) {
    let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
    return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), followLinks);
  }
  static typeSync(path, opts) {
    let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
    return io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), followLinks);
  }
  static isLink(path) {
    return io.FileSystemEntity._isLinkRaw(io.FileSystemEntity._toUtf8Array(path));
  }
  static _isLinkRaw(rawPath) {
    return io.FileSystemEntity._getType(rawPath, false).then(core.bool, dart.fn(type => dart.equals(type, io.FileSystemEntityType.link), FileSystemEntityTypeTobool()));
  }
  static isFile(path) {
    return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), true).then(core.bool, dart.fn(type => dart.equals(type, io.FileSystemEntityType.file), FileSystemEntityTypeTobool()));
  }
  static isDirectory(path) {
    return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), true).then(core.bool, dart.fn(type => dart.equals(type, io.FileSystemEntityType.directory), FileSystemEntityTypeTobool()));
  }
  static isLinkSync(path) {
    return io.FileSystemEntity._isLinkRawSync(io.FileSystemEntity._toUtf8Array(path));
  }
  static _isLinkRawSync(rawPath) {
    return dart.equals(io.FileSystemEntity._getTypeSync(typed_data.Uint8List._check(rawPath), false), io.FileSystemEntityType.link);
  }
  static isFileSync(path) {
    return dart.equals(io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), true), io.FileSystemEntityType.file);
  }
  static isDirectorySync(path) {
    return dart.equals(io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), true), io.FileSystemEntityType.directory);
  }
  static _getTypeNative(namespace, rawPath, followLinks) {
    dart.throw(new core.UnsupportedError.new("FileSystemEntity._getType"));
  }
  static _identicalNative(namespace, path1, path2) {
    dart.throw(new core.UnsupportedError.new("FileSystemEntity._identical"));
  }
  static _resolveSymbolicLinks(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("FileSystemEntity._resolveSymbolicLinks"));
  }
  static parentOf(path) {
    let rootEnd = -1;
    if (dart.test(io.Platform.isWindows)) {
      if (path[$startsWith](io.FileSystemEntity._absoluteWindowsPathPattern)) {
        rootEnd = path[$indexOf](core.RegExp.new("[/\\\\]"), 2);
        if (rootEnd === -1) return path;
      } else if (path[$startsWith]("\\") || path[$startsWith]("/")) {
        rootEnd = 0;
      }
    } else if (path[$startsWith]("/")) {
      rootEnd = 0;
    }
    let pos = path[$lastIndexOf](io.FileSystemEntity._parentRegExp);
    if (pos > rootEnd) {
      return path[$substring](0, pos + 1);
    } else if (rootEnd > -1) {
      return path[$substring](0, rootEnd + 1);
    } else {
      return ".";
    }
  }
  get parent() {
    return io.Directory.new(io.FileSystemEntity.parentOf(this.path));
  }
  static _getTypeSyncHelper(rawPath, followLinks) {
    let result = io.FileSystemEntity._getTypeNative(io._Namespace._namespace, rawPath, followLinks);
    io.FileSystemEntity._throwIfError(result, "Error getting type of FileSystemEntity");
    return io.FileSystemEntityType._lookup(core.int._check(result));
  }
  static _getTypeSync(rawPath, followLinks) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileSystemEntity._getTypeSyncHelper(rawPath, followLinks);
    }
    return overrides.fseGetTypeSync(convert.utf8.decode(rawPath, {allowMalformed: true}), followLinks);
  }
  static _getTypeRequest(rawPath, followLinks) {
    return io._File._dispatchWithNamespace(27, [null, rawPath, followLinks]).then(io.FileSystemEntityType, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Error getting type", convert.utf8.decode(rawPath, {allowMalformed: true})));
      }
      return io.FileSystemEntityType._lookup(core.int._check(response));
    }, dynamicToFileSystemEntityType()));
  }
  static _getType(rawPath, followLinks) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileSystemEntity._getTypeRequest(rawPath, followLinks);
    }
    return overrides.fseGetType(convert.utf8.decode(rawPath, {allowMalformed: true}), followLinks);
  }
  static _throwIfError(result, msg, path) {
    if (path === void 0) path = null;
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new(msg, path, result));
    } else if (core.ArgumentError.is(result)) {
      dart.throw(result);
    }
  }
  static _trimTrailingPathSeparators(path) {
    if (path == null) return path;
    if (dart.test(io.Platform.isWindows)) {
      while (path.length > 1 && (path[$endsWith](io.Platform.pathSeparator) || path[$endsWith]("/"))) {
        path = path[$substring](0, path.length - 1);
      }
    } else {
      while (path.length > 1 && path[$endsWith](io.Platform.pathSeparator)) {
        path = path[$substring](0, path.length - 1);
      }
    }
    return path;
  }
  static _ensureTrailingPathSeparators(path) {
    if (path == null) return path;
    if (path[$isEmpty]) path = ".";
    if (dart.test(io.Platform.isWindows)) {
      while (!path[$endsWith](io.Platform.pathSeparator) && !path[$endsWith]("/")) {
        path = dart.str(path) + dart.str(io.Platform.pathSeparator);
      }
    } else {
      while (!path[$endsWith](io.Platform.pathSeparator)) {
        path = dart.str(path) + dart.str(io.Platform.pathSeparator);
      }
    }
    return path;
  }
};
(io.FileSystemEntity.new = function() {
  this[_path] = null;
  this[_rawPath] = null;
  ;
}).prototype = io.FileSystemEntity.prototype;
;
;
dart.setGetterSignature(io.FileSystemEntity, () => ({
  __proto__: dart.getGetters(io.FileSystemEntity.__proto__),
  uri: core.Uri,
  isAbsolute: core.bool,
  [_absolutePath]: core.String,
  [_rawAbsolutePath]: typed_data.Uint8List,
  parent: io.Directory
}));
dart.setLibraryUri(io.FileSystemEntity, "dart:io");
;
dart.defineLazy(io.FileSystemEntity, {
  /*io.FileSystemEntity._absoluteWindowsPathPattern*/get _absoluteWindowsPathPattern() {
    return core.RegExp.new("^(\\\\\\\\|[a-zA-Z]:[/\\\\])");
  },
  /*io.FileSystemEntity._parentRegExp*/get _parentRegExp() {
    return dart.test(io.Platform.isWindows) ? core.RegExp.new("[^/\\\\][/\\\\]+[^/\\\\]") : core.RegExp.new("[^/]/+[^/]");
  }
});
const _path$0 = dart.privateName(io, "_Directory._path");
const _rawPath$0 = dart.privateName(io, "_Directory._rawPath");
io._Directory = class _Directory extends io.FileSystemEntity {
  get [_path$]() {
    return this[_path$0];
  }
  set [_path$](value) {
    this[_path$0] = value;
  }
  get [_rawPath$]() {
    return this[_rawPath$0];
  }
  set [_rawPath$](value) {
    this[_rawPath$0] = value;
  }
  get path() {
    return this[_path$];
  }
  static _current(namespace) {
    dart.throw(new core.UnsupportedError.new("Directory._current"));
  }
  static _setCurrent(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("Directory_SetCurrent"));
  }
  static _createTemp(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("Directory._createTemp"));
  }
  static _systemTemp(namespace) {
    dart.throw(new core.UnsupportedError.new("Directory._systemTemp"));
  }
  static _exists(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("Directory._exists"));
  }
  static _create(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("Directory._create"));
  }
  static _deleteNative(namespace, rawPath, recursive) {
    dart.throw(new core.UnsupportedError.new("Directory._deleteNative"));
  }
  static _rename(namespace, rawPath, newPath) {
    dart.throw(new core.UnsupportedError.new("Directory._rename"));
  }
  static _fillWithDirectoryListing(namespace, list, rawPath, recursive, followLinks) {
    dart.throw(new core.UnsupportedError.new("Directory._fillWithDirectoryListing"));
  }
  static get current() {
    let result = io._Directory._current(io._Namespace._namespace);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Getting current working directory failed", "", result));
    }
    return new io._Directory.new(core.String._check(result));
  }
  static set current(path) {
    let _rawPath = null;
    if (io._Directory.is(path)) {
      _rawPath = path[_rawPath$];
    } else if (io.Directory.is(path)) {
      _rawPath = io.FileSystemEntity._toUtf8Array(path.path);
    } else if (typeof path == 'string') {
      _rawPath = io.FileSystemEntity._toUtf8Array(path);
    } else {
      dart.throw(new core.ArgumentError.new(dart.str(core.Error.safeToString(path)) + " is not a String or" + " Directory"));
    }
    if (!dart.test(io._EmbedderConfig._mayChdir)) {
      dart.throw(new core.UnsupportedError.new("This embedder disallows setting Directory.current"));
    }
    let result = io._Directory._setCurrent(io._Namespace._namespace, _rawPath);
    if (core.ArgumentError.is(result)) dart.throw(result);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Setting current working directory failed", core.String._check(path), result));
    }
  }
  get uri() {
    return core._Uri.directory(this.path);
  }
  exists() {
    return io._File._dispatchWithNamespace(36, [null, this[_rawPath$]]).then(core.bool, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionOrErrorFromResponse](response, "Exists failed"));
      }
      return dart.equals(response, 1);
    }, dynamicTobool()));
  }
  existsSync() {
    let result = io._Directory._exists(io._Namespace._namespace, this[_rawPath$]);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Exists failed", this.path, result));
    }
    return dart.equals(result, 1);
  }
  get absolute() {
    return io.Directory.new(this[_absolutePath]);
  }
  create(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (dart.test(recursive)) {
      return this.exists().then(io.Directory, dart.fn(exists => {
        if (dart.test(exists)) return this;
        if (this.path != this.parent.path) {
          return this.parent.create({recursive: true}).then(io.Directory, dart.fn(_ => this.create(), DirectoryToFutureOfDirectory()));
        } else {
          return this.create();
        }
      }, boolToFutureOrOfDirectory()));
    } else {
      return io._File._dispatchWithNamespace(34, [null, this[_rawPath$]]).then(io.Directory, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionOrErrorFromResponse](response, "Creation failed"));
        }
        return this;
      }, dynamicTo_Directory()));
    }
  }
  createSync(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (dart.test(recursive)) {
      if (dart.test(this.existsSync())) return;
      if (this.path != this.parent.path) {
        this.parent.createSync({recursive: true});
      }
    }
    let result = io._Directory._create(io._Namespace._namespace, this[_rawPath$]);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Creation failed", this.path, result));
    }
  }
  static get systemTemp() {
    return io.Directory.new(io._Directory._systemTemp(io._Namespace._namespace));
  }
  createTemp(prefix) {
    if (prefix === void 0) prefix = null;
    prefix == null ? prefix = "" : null;
    if (this.path === "") {
      dart.throw(new core.ArgumentError.new("Directory.createTemp called with an empty path. " + "To use the system temp directory, use Directory.systemTemp"));
    }
    let fullPrefix = null;
    if (this.path[$endsWith]("/") || dart.test(io.Platform.isWindows) && this.path[$endsWith]("\\")) {
      fullPrefix = dart.str(this.path) + dart.str(prefix);
    } else {
      fullPrefix = dart.str(this.path) + dart.str(io.Platform.pathSeparator) + dart.str(prefix);
    }
    return io._File._dispatchWithNamespace(37, [null, io.FileSystemEntity._toUtf8Array(fullPrefix)]).then(io.Directory, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionOrErrorFromResponse](response, "Creation of temporary directory failed"));
      }
      return io.Directory.new(core.String._check(response));
    }, dynamicToDirectory()));
  }
  createTempSync(prefix) {
    if (prefix === void 0) prefix = null;
    prefix == null ? prefix = "" : null;
    if (this.path === "") {
      dart.throw(new core.ArgumentError.new("Directory.createTemp called with an empty path. " + "To use the system temp directory, use Directory.systemTemp"));
    }
    let fullPrefix = null;
    if (this.path[$endsWith]("/") || dart.test(io.Platform.isWindows) && this.path[$endsWith]("\\")) {
      fullPrefix = dart.str(this.path) + dart.str(prefix);
    } else {
      fullPrefix = dart.str(this.path) + dart.str(io.Platform.pathSeparator) + dart.str(prefix);
    }
    let result = io._Directory._createTemp(io._Namespace._namespace, io.FileSystemEntity._toUtf8Array(fullPrefix));
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Creation of temporary directory failed", fullPrefix, result));
    }
    return io.Directory.new(core.String._check(result));
  }
  [_delete](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    return io._File._dispatchWithNamespace(35, [null, this[_rawPath$], recursive]).then(io.Directory, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionOrErrorFromResponse](response, "Deletion failed"));
      }
      return this;
    }, dynamicTo_Directory()));
  }
  [_deleteSync](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    let result = io._Directory._deleteNative(io._Namespace._namespace, this[_rawPath$], recursive);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Deletion failed", this.path, result));
    }
  }
  rename(newPath) {
    return io._File._dispatchWithNamespace(41, [null, this[_rawPath$], newPath]).then(io.Directory, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionOrErrorFromResponse](response, "Rename failed"));
      }
      return io.Directory.new(newPath);
    }, dynamicToDirectory()));
  }
  renameSync(newPath) {
    if (!(typeof newPath == 'string')) {
      dart.throw(new core.ArgumentError.new());
    }
    let result = io._Directory._rename(io._Namespace._namespace, this[_rawPath$], newPath);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Rename failed", this.path, result));
    }
    return io.Directory.new(newPath);
  }
  list(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
    return new io._AsyncDirectoryLister.new(io.FileSystemEntity._toUtf8Array(io.FileSystemEntity._ensureTrailingPathSeparators(this.path)), recursive, followLinks).stream;
  }
  listSync(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
    if (!(typeof recursive == 'boolean') || !(typeof followLinks == 'boolean')) {
      dart.throw(new core.ArgumentError.new());
    }
    let result = JSArrayOfFileSystemEntity().of([]);
    io._Directory._fillWithDirectoryListing(io._Namespace._namespace, result, io.FileSystemEntity._toUtf8Array(io.FileSystemEntity._ensureTrailingPathSeparators(this.path)), recursive, followLinks);
    return result;
  }
  toString() {
    return "Directory: '" + dart.str(this.path) + "'";
  }
  [_isErrorResponse](response) {
    return core.List.is(response) && !dart.equals(response[$_get](0), 0);
  }
  [_exceptionOrErrorFromResponse](response, message) {
    if (!dart.test(this[_isErrorResponse](response))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/directory_impl.dart", 269, 12, "_isErrorResponse(response)");
    switch (dart.dsend(response, '_get', [0])) {
      case 1:
      {
        return new core.ArgumentError.new();
      }
      case 2:
      {
        let err = new io.OSError.new(core.String._check(dart.dsend(response, '_get', [2])), core.int._check(dart.dsend(response, '_get', [1])));
        return new io.FileSystemException.new(message, this.path, err);
      }
      default:
      {
        return core.Exception.new("Unknown error");
      }
    }
  }
};
(io._Directory.new = function(path) {
  this[_path$0] = null;
  this[_rawPath$0] = null;
  io._Directory.__proto__.new.call(this);
  core.ArgumentError.checkNotNull(path, "path");
  this[_path$] = path;
  this[_rawPath$] = io.FileSystemEntity._toUtf8Array(this[_path$]);
}).prototype = io._Directory.prototype;
(io._Directory.fromRawPath = function(rawPath) {
  this[_path$0] = null;
  this[_rawPath$0] = null;
  io._Directory.__proto__.new.call(this);
  if (rawPath == null) {
    dart.throw(new core.ArgumentError.new("rawPath cannot be null"));
  }
  this[_rawPath$] = io.FileSystemEntity._toNullTerminatedUtf8Array(rawPath);
  this[_path$] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
}).prototype = io._Directory.prototype;
;
io._Directory[dart.implements] = () => [io.Directory];
;
dart.setGetterSignature(io._Directory, () => ({
  __proto__: dart.getGetters(io._Directory.__proto__),
  path: core.String,
  absolute: io.Directory
}));
dart.setLibraryUri(io._Directory, "dart:io");
;
dart.defineExtensionMethods(io._Directory, ['toString']);
io._AsyncDirectoryListerOps = class _AsyncDirectoryListerOps extends core.Object {
  static new(pointer) {
    dart.throw(new core.UnsupportedError.new("Directory._list"));
  }
};
(io._AsyncDirectoryListerOps[dart.mixinNew] = function() {
}).prototype = io._AsyncDirectoryListerOps.prototype;
;
dart.setLibraryUri(io._AsyncDirectoryListerOps, "dart:io");
const _ops = dart.privateName(io, "_ops");
const _pointer = dart.privateName(io, "_pointer");
const _cleanup = dart.privateName(io, "_cleanup");
io._AsyncDirectoryLister = class _AsyncDirectoryLister extends core.Object {
  [_pointer]() {
    return this[_ops] == null ? null : this[_ops].getPointer();
  }
  get stream() {
    return this.controller.stream;
  }
  onListen() {
    io._File._dispatchWithNamespace(38, [null, this.rawPath, this.recursive, this.followLinks]).then(core.Null, dart.fn(response => {
      if (core.int.is(response)) {
        this[_ops] = io._AsyncDirectoryListerOps.new(response);
        this.next();
      } else if (core.Error.is(response)) {
        this.controller.addError(response, response[$stackTrace]);
        this.close();
      } else {
        this.error(response);
        this.close();
      }
    }, dynamicToNull()));
  }
  onResume() {
    if (!dart.test(this.nextRunning)) {
      this.next();
    }
  }
  onCancel() {
    this.canceled = true;
    if (!dart.test(this.nextRunning)) {
      this.close();
    }
    return this.closeCompleter.future;
  }
  next() {
    if (dart.test(this.canceled)) {
      this.close();
      return;
    }
    if (dart.test(this.controller.isPaused) || dart.test(this.nextRunning)) {
      return;
    }
    let pointer = this[_pointer]();
    if (pointer == null) {
      return;
    }
    this.nextRunning = true;
    io._IOService._dispatch(39, [pointer]).then(core.Null, dart.fn(result => {
      let t76;
      this.nextRunning = false;
      if (core.List.is(result)) {
        this.next();
        if (!(result[$length][$modulo](2) === 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/directory_impl.dart", 378, 16, "result.length % 2 == 0");
        for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
          if (!(i[$modulo](2) === 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/directory_impl.dart", 380, 18, "i % 2 == 0");
          switch (result[$_get]((t76 = i, i = t76 + 1, t76))) {
            case 0:
            {
              this.controller.add(io.File.fromRawPath(typed_data.Uint8List._check(result[$_get](i))));
              break;
            }
            case 1:
            {
              this.controller.add(io.Directory.fromRawPath(typed_data.Uint8List._check(result[$_get](i))));
              break;
            }
            case 2:
            {
              this.controller.add(io.Link.fromRawPath(typed_data.Uint8List._check(result[$_get](i))));
              break;
            }
            case 3:
            {
              this.error(result[$_get](i));
              break;
            }
            case 4:
            {
              this.canceled = true;
              return;
            }
          }
        }
      } else {
        this.controller.addError(new io.FileSystemException.new("Internal error"));
      }
    }, dynamicToNull()));
  }
  [_cleanup]() {
    this.controller.close();
    this.closeCompleter.complete();
    this[_ops] = null;
  }
  close() {
    if (dart.test(this.closed)) {
      return;
    }
    if (dart.test(this.nextRunning)) {
      return;
    }
    this.closed = true;
    let pointer = this[_pointer]();
    if (pointer == null) {
      this[_cleanup]();
    } else {
      io._IOService._dispatch(40, [pointer]).whenComplete(dart.bind(this, _cleanup));
    }
  }
  error(message) {
    let errorType = dart.dsend(dart.dsend(message, '_get', [2]), '_get', [0]);
    if (dart.equals(errorType, 1)) {
      this.controller.addError(new core.ArgumentError.new());
    } else if (dart.equals(errorType, 2)) {
      let responseErrorInfo = dart.dsend(message, '_get', [2]);
      let err = new io.OSError.new(core.String._check(dart.dsend(responseErrorInfo, '_get', [2])), core.int._check(dart.dsend(responseErrorInfo, '_get', [1])));
      let errorPath = dart.dsend(message, '_get', [1]);
      if (errorPath == null) {
        errorPath = convert.utf8.decode(this.rawPath, {allowMalformed: true});
      } else if (typed_data.Uint8List.is(errorPath)) {
        errorPath = convert.utf8.decode(ListOfint()._check(dart.dsend(message, '_get', [1])), {allowMalformed: true});
      }
      this.controller.addError(new io.FileSystemException.new("Directory listing failed", core.String._check(errorPath), err));
    } else {
      this.controller.addError(new io.FileSystemException.new("Internal error"));
    }
  }
};
(io._AsyncDirectoryLister.new = function(rawPath, recursive, followLinks) {
  this.controller = null;
  this.canceled = false;
  this.nextRunning = false;
  this.closed = false;
  this[_ops] = null;
  this.closeCompleter = async.Completer.new();
  this.rawPath = rawPath;
  this.recursive = recursive;
  this.followLinks = followLinks;
  this.controller = StreamControllerOfFileSystemEntity().new({onListen: dart.bind(this, 'onListen'), onResume: dart.bind(this, 'onResume'), onCancel: dart.bind(this, 'onCancel'), sync: true});
}).prototype = io._AsyncDirectoryLister.prototype;
;
;
dart.setGetterSignature(io._AsyncDirectoryLister, () => ({
  __proto__: dart.getGetters(io._AsyncDirectoryLister.__proto__),
  stream: async.Stream$(io.FileSystemEntity)
}));
dart.setLibraryUri(io._AsyncDirectoryLister, "dart:io");
;
dart.defineLazy(io._AsyncDirectoryLister, {
  /*io._AsyncDirectoryLister.listFile*/get listFile() {
    return 0;
  },
  /*io._AsyncDirectoryLister.listDirectory*/get listDirectory() {
    return 1;
  },
  /*io._AsyncDirectoryLister.listLink*/get listLink() {
    return 2;
  },
  /*io._AsyncDirectoryLister.listError*/get listError() {
    return 3;
  },
  /*io._AsyncDirectoryLister.listDone*/get listDone() {
    return 4;
  },
  /*io._AsyncDirectoryLister.responseType*/get responseType() {
    return 0;
  },
  /*io._AsyncDirectoryLister.responsePath*/get responsePath() {
    return 1;
  },
  /*io._AsyncDirectoryLister.responseComplete*/get responseComplete() {
    return 1;
  },
  /*io._AsyncDirectoryLister.responseError*/get responseError() {
    return 2;
  }
});
io._EmbedderConfig = class _EmbedderConfig extends core.Object {};
(io._EmbedderConfig.new = function() {
  ;
}).prototype = io._EmbedderConfig.prototype;
;
dart.setLibraryUri(io._EmbedderConfig, "dart:io");
dart.defineLazy(io._EmbedderConfig, {
  /*io._EmbedderConfig._mayChdir*/get _mayChdir() {
    return true;
  },
  set _mayChdir(_) {},
  /*io._EmbedderConfig._mayExit*/get _mayExit() {
    return true;
  },
  set _mayExit(_) {},
  /*io._EmbedderConfig._maySetEchoMode*/get _maySetEchoMode() {
    return true;
  },
  set _maySetEchoMode(_) {},
  /*io._EmbedderConfig._maySetLineMode*/get _maySetLineMode() {
    return true;
  },
  set _maySetLineMode(_) {},
  /*io._EmbedderConfig._maySleep*/get _maySleep() {
    return true;
  },
  set _maySleep(_) {}
});
io._EventHandler = class _EventHandler extends core.Object {
  static _sendData(sender, sendPort, data) {
    dart.throw(new core.UnsupportedError.new("EventHandler._sendData"));
  }
};
(io._EventHandler.new = function() {
  ;
}).prototype = io._EventHandler.prototype;
;
dart.setLibraryUri(io._EventHandler, "dart:io");
const _mode = dart.privateName(io, "_mode");
const _mode$ = dart.privateName(io, "FileMode._mode");
let C170;
let C171;
let C172;
let C173;
let C174;
io.FileMode = class FileMode extends core.Object {
  get [_mode]() {
    return this[_mode$];
  }
  set [_mode](value) {
    super[_mode] = value;
  }
};
(io.FileMode._internal = function(_mode) {
  this[_mode$] = _mode;
  ;
}).prototype = io.FileMode.prototype;
;
dart.setLibraryUri(io.FileMode, "dart:io");
;
dart.defineLazy(io.FileMode, {
  /*io.FileMode.read*/get read() {
    return C170 || CT.C170;
  },
  /*io.FileMode.READ*/get READ() {
    return C170 || CT.C170;
  },
  /*io.FileMode.write*/get write() {
    return C171 || CT.C171;
  },
  /*io.FileMode.WRITE*/get WRITE() {
    return C171 || CT.C171;
  },
  /*io.FileMode.append*/get append() {
    return C172 || CT.C172;
  },
  /*io.FileMode.APPEND*/get APPEND() {
    return C172 || CT.C172;
  },
  /*io.FileMode.writeOnly*/get writeOnly() {
    return C173 || CT.C173;
  },
  /*io.FileMode.WRITE_ONLY*/get WRITE_ONLY() {
    return C173 || CT.C173;
  },
  /*io.FileMode.writeOnlyAppend*/get writeOnlyAppend() {
    return C174 || CT.C174;
  },
  /*io.FileMode.WRITE_ONLY_APPEND*/get WRITE_ONLY_APPEND() {
    return C174 || CT.C174;
  }
});
const _type = dart.privateName(io, "_type");
const _type$1 = dart.privateName(io, "FileLock._type");
let C175;
let C176;
let C177;
let C178;
io.FileLock = class FileLock extends core.Object {
  get [_type]() {
    return this[_type$1];
  }
  set [_type](value) {
    super[_type] = value;
  }
};
(io.FileLock._internal = function(_type) {
  this[_type$1] = _type;
  ;
}).prototype = io.FileLock.prototype;
;
dart.setLibraryUri(io.FileLock, "dart:io");
;
dart.defineLazy(io.FileLock, {
  /*io.FileLock.shared*/get shared() {
    return C175 || CT.C175;
  },
  /*io.FileLock.SHARED*/get SHARED() {
    return C175 || CT.C175;
  },
  /*io.FileLock.exclusive*/get exclusive() {
    return C176 || CT.C176;
  },
  /*io.FileLock.EXCLUSIVE*/get EXCLUSIVE() {
    return C176 || CT.C176;
  },
  /*io.FileLock.blockingShared*/get blockingShared() {
    return C177 || CT.C177;
  },
  /*io.FileLock.BLOCKING_SHARED*/get BLOCKING_SHARED() {
    return C177 || CT.C177;
  },
  /*io.FileLock.blockingExclusive*/get blockingExclusive() {
    return C178 || CT.C178;
  },
  /*io.FileLock.BLOCKING_EXCLUSIVE*/get BLOCKING_EXCLUSIVE() {
    return C178 || CT.C178;
  }
});
io.File = class File extends core.Object {
  static new(path) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return new io._File.new(path);
    }
    return overrides.createFile(path);
  }
  static fromUri(uri) {
    return io.File.new(uri.toFilePath());
  }
  static fromRawPath(rawPath) {
    return new io._File.fromRawPath(rawPath);
  }
};
(io.File[dart.mixinNew] = function() {
}).prototype = io.File.prototype;
;
io.File[dart.implements] = () => [io.FileSystemEntity];
dart.setLibraryUri(io.File, "dart:io");
io.RandomAccessFile = class RandomAccessFile extends core.Object {};
(io.RandomAccessFile.new = function() {
  ;
}).prototype = io.RandomAccessFile.prototype;
;
dart.setLibraryUri(io.RandomAccessFile, "dart:io");
const message$5 = dart.privateName(io, "FileSystemException.message");
const path$ = dart.privateName(io, "FileSystemException.path");
const osError$ = dart.privateName(io, "FileSystemException.osError");
io.FileSystemException = class FileSystemException extends core.Object {
  get message() {
    return this[message$5];
  }
  set message(value) {
    super.message = value;
  }
  get path() {
    return this[path$];
  }
  set path(value) {
    super.path = value;
  }
  get osError() {
    return this[osError$];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    let sb = new core.StringBuffer.new();
    sb.write("FileSystemException");
    if (this.message[$isNotEmpty]) {
      sb.write(": " + dart.str(this.message));
      if (this.path != null) {
        sb.write(", path = '" + dart.str(this.path) + "'");
      }
      if (this.osError != null) {
        sb.write(" (" + dart.str(this.osError) + ")");
      }
    } else if (this.osError != null) {
      sb.write(": " + dart.str(this.osError));
      if (this.path != null) {
        sb.write(", path = '" + dart.str(this.path) + "'");
      }
    } else if (this.path != null) {
      sb.write(": " + dart.str(this.path));
    }
    return sb.toString();
  }
};
(io.FileSystemException.new = function(message, path, osError) {
  if (message === void 0) message = "";
  if (path === void 0) path = "";
  if (osError === void 0) osError = null;
  this[message$5] = message;
  this[path$] = path;
  this[osError$] = osError;
  ;
}).prototype = io.FileSystemException.prototype;
;
io.FileSystemException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.FileSystemException, "dart:io");
;
dart.defineExtensionMethods(io.FileSystemException, ['toString']);
const _controller = dart.privateName(io, "_controller");
const _openedFile = dart.privateName(io, "_openedFile");
const _closeCompleter = dart.privateName(io, "_closeCompleter");
const _unsubscribed = dart.privateName(io, "_unsubscribed");
const _readInProgress = dart.privateName(io, "_readInProgress");
const _atEnd = dart.privateName(io, "_atEnd");
const _position$ = dart.privateName(io, "_position");
const _end$ = dart.privateName(io, "_end");
const _setupController = dart.privateName(io, "_setupController");
const _start = dart.privateName(io, "_start");
const _readBlock = dart.privateName(io, "_readBlock");
const _closeFile = dart.privateName(io, "_closeFile");
io._FileStream = class _FileStream extends async.Stream$(core.List$(core.int)) {
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    this[_setupController]();
    return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  [_setupController]() {
    this[_controller] = StreamControllerOfUint8List().new({sync: true, onListen: dart.bind(this, _start), onResume: dart.bind(this, _readBlock), onCancel: dart.fn(() => {
        this[_unsubscribed] = true;
        return this[_closeFile]();
      }, VoidToFuture())});
  }
  [_closeFile]() {
    if (dart.test(this[_readInProgress]) || dart.test(this[_closed])) {
      return this[_closeCompleter].future;
    }
    this[_closed] = true;
    const done = () => {
      this[_closeCompleter].complete();
      this[_controller].close();
    };
    dart.fn(done, VoidTovoid());
    this[_openedFile].close().catchError(dart.bind(this[_controller], 'addError')).whenComplete(done);
    return this[_closeCompleter].future;
  }
  [_readBlock]() {
    if (dart.test(this[_readInProgress])) return;
    if (dart.test(this[_atEnd])) {
      this[_closeFile]();
      return;
    }
    this[_readInProgress] = true;
    let readBytes = 65536;
    if (this[_end$] != null) {
      readBytes = math.min(core.int, readBytes, dart.notNull(this[_end$]) - dart.notNull(this[_position$]));
      if (readBytes < 0) {
        this[_readInProgress] = false;
        if (!dart.test(this[_unsubscribed])) {
          this[_controller].addError(new core.RangeError.new("Bad end position: " + dart.str(this[_end$])));
          this[_closeFile]();
          this[_unsubscribed] = true;
        }
        return;
      }
    }
    this[_openedFile].read(readBytes).then(core.Null, dart.fn(block => {
      this[_readInProgress] = false;
      if (dart.test(this[_unsubscribed])) {
        this[_closeFile]();
        return;
      }
      this[_position$] = dart.notNull(this[_position$]) + dart.notNull(block[$length]);
      if (dart.notNull(block[$length]) < readBytes || this[_end$] != null && this[_position$] == this[_end$]) {
        this[_atEnd] = true;
      }
      if (!dart.test(this[_atEnd]) && !dart.test(this[_controller].isPaused)) {
        this[_readBlock]();
      }
      this[_controller].add(block);
      if (dart.test(this[_atEnd])) {
        this[_closeFile]();
      }
    }, Uint8ListToNull())).catchError(dart.fn((e, s) => {
      if (!dart.test(this[_unsubscribed])) {
        this[_controller].addError(e, core.StackTrace._check(s));
        this[_closeFile]();
        this[_unsubscribed] = true;
      }
    }, dynamicAnddynamicToNull()));
  }
  [_start]() {
    if (dart.notNull(this[_position$]) < 0) {
      this[_controller].addError(new core.RangeError.new("Bad start position: " + dart.str(this[_position$])));
      this[_controller].close();
      this[_closeCompleter].complete();
      return;
    }
    const onReady = file => {
      this[_openedFile] = file;
      this[_readInProgress] = false;
      this[_readBlock]();
    };
    dart.fn(onReady, RandomAccessFileTovoid());
    const onOpenFile = file => {
      if (dart.notNull(this[_position$]) > 0) {
        file.setPosition(this[_position$]).then(dart.void, onReady, {onError: dart.fn((e, s) => {
            this[_controller].addError(e, core.StackTrace._check(s));
            this[_readInProgress] = false;
            this[_closeFile]();
          }, dynamicAnddynamicToNull())});
      } else {
        onReady(file);
      }
    };
    dart.fn(onOpenFile, RandomAccessFileTovoid());
    const openFailed = (error, stackTrace) => {
      this[_controller].addError(error, core.StackTrace._check(stackTrace));
      this[_controller].close();
      this[_closeCompleter].complete();
    };
    dart.fn(openFailed, dynamicAnddynamicTovoid());
    if (this[_path$] != null) {
      io.File.new(this[_path$]).open({mode: io.FileMode.read}).then(dart.void, onOpenFile, {onError: openFailed});
    } else {
      try {
        onOpenFile(io._File._openStdioSync(0));
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        openFailed(e, s);
      }
    }
  }
};
(io._FileStream.new = function(_path, _position, _end) {
  this[_controller] = null;
  this[_openedFile] = null;
  this[_closeCompleter] = async.Completer.new();
  this[_unsubscribed] = false;
  this[_readInProgress] = true;
  this[_closed] = false;
  this[_atEnd] = false;
  this[_path$] = _path;
  this[_position$] = _position;
  this[_end$] = _end;
  io._FileStream.__proto__.new.call(this);
  this[_position$] == null ? this[_position$] = 0 : null;
}).prototype = io._FileStream.prototype;
(io._FileStream.forStdin = function() {
  this[_controller] = null;
  this[_openedFile] = null;
  this[_closeCompleter] = async.Completer.new();
  this[_unsubscribed] = false;
  this[_readInProgress] = true;
  this[_closed] = false;
  this[_atEnd] = false;
  this[_end$] = null;
  this[_path$] = null;
  this[_position$] = 0;
  io._FileStream.__proto__.new.call(this);
  ;
}).prototype = io._FileStream.prototype;
;
;
dart.setLibraryUri(io._FileStream, "dart:io");
;
const _openFuture = dart.privateName(io, "_openFuture");
const _file$ = dart.privateName(io, "_file");
io._FileStreamConsumer = class _FileStreamConsumer extends async.StreamConsumer$(core.List$(core.int)) {
  addStream(stream) {
    StreamOfListOfint()._check(stream);
    let completer = CompleterOfFile().sync();
    this[_openFuture].then(core.Null, dart.fn(openedFile => {
      let _subscription = null;
      function error(e, stackTrace) {
        if (stackTrace === void 0) stackTrace = null;
        dart.dsend(_subscription, 'cancel', []);
        openedFile.close();
        completer.completeError(e, stackTrace);
      }
      dart.fn(error, dynamicAndStackTraceTovoid$());
      _subscription = stream.listen(dart.fn(d => {
        dart.dsend(_subscription, 'pause', []);
        try {
          openedFile.writeFrom(d, 0, d[$length]).then(dart.dynamic, dart.fn(_ => dart.dsend(_subscription, 'resume', []), RandomAccessFileTodynamic()), {onError: error});
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stackTrace = dart.stackTrace(e$);
          error(e, stackTrace);
        }
      }, ListOfintToNull()), {onDone: dart.fn(() => {
          completer.complete(this[_file$]);
        }, VoidToNull()), onError: error, cancelOnError: true});
    }, RandomAccessFileToNull())).catchError(dart.bind(completer, 'completeError'));
    return completer.future;
  }
  close() {
    return this[_openFuture].then(dart.void, dart.fn(openedFile => openedFile.close(), RandomAccessFileToFutureOfvoid())).then(io.File, dart.fn(_ => this[_file$], voidToFile()));
  }
};
(io._FileStreamConsumer.new = function(_file, mode) {
  this[_openFuture] = null;
  this[_file$] = _file;
  this[_openFuture] = this[_file$].open({mode: mode});
}).prototype = io._FileStreamConsumer.prototype;
(io._FileStreamConsumer.fromStdio = function(fd) {
  this[_openFuture] = null;
  this[_file$] = null;
  this[_openFuture] = FutureOfRandomAccessFile().value(io._File._openStdioSync(fd));
}).prototype = io._FileStreamConsumer.prototype;
;
;
dart.setLibraryUri(io._FileStreamConsumer, "dart:io");
;
const _tryDecode = dart.privateName(io, "_tryDecode");
let C179;
const _path$1 = dart.privateName(io, "_File._path");
const _rawPath$1 = dart.privateName(io, "_File._rawPath");
io._File = class _File extends io.FileSystemEntity {
  get [_path$]() {
    return this[_path$1];
  }
  set [_path$](value) {
    this[_path$1] = value;
  }
  get [_rawPath$]() {
    return this[_rawPath$1];
  }
  set [_rawPath$](value) {
    this[_rawPath$1] = value;
  }
  get path() {
    return this[_path$];
  }
  static _namespacePointer() {
    return io._Namespace._namespacePointer;
  }
  static _dispatchWithNamespace(request, data) {
    data[$_set](0, io._File._namespacePointer());
    return io._IOService._dispatch(request, data);
  }
  exists() {
    return io._File._dispatchWithNamespace(0, [null, this[_rawPath$]]).then(core.bool, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot check existence", this.path));
      }
      return FutureOrOfbool()._check(response);
    }, dynamicToFutureOrOfbool()));
  }
  static _exists(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("File._exists"));
  }
  existsSync() {
    let result = io._File._exists(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(result, "Cannot check existence of file", this.path);
    return core.bool._check(result);
  }
  get absolute() {
    return io.File.new(this[_absolutePath]);
  }
  create(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    let result = dart.test(recursive) ? this.parent.create({recursive: true}) : FutureOfNull().value(null);
    return result.then(dart.dynamic, dart.fn(_ => io._File._dispatchWithNamespace(1, [null, this[_rawPath$]]), DirectoryToFuture())).then(io.File, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot create file", this.path));
      }
      return this;
    }, dynamicTo_File()));
  }
  static _create(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("File._create"));
  }
  static _createLink(namespace, rawPath, target) {
    dart.throw(new core.UnsupportedError.new("File._createLink"));
  }
  static _linkTarget(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("File._linkTarget"));
  }
  createSync(opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (dart.test(recursive)) {
      this.parent.createSync({recursive: true});
    }
    let result = io._File._create(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(result, "Cannot create file", this.path);
  }
  [_delete](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (dart.test(recursive)) {
      return io.Directory.new(this.path).delete({recursive: true}).then(io.File, dart.fn(_ => this, FileSystemEntityTo_File()));
    }
    return io._File._dispatchWithNamespace(2, [null, this[_rawPath$]]).then(io.File, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot delete file", this.path));
      }
      return this;
    }, dynamicTo_File()));
  }
  static _deleteNative(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("File._deleteNative"));
  }
  static _deleteLinkNative(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("File._deleteLinkNative"));
  }
  [_deleteSync](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (dart.test(recursive)) {
      return io.Directory.fromRawPath(this[_rawPath$]).deleteSync({recursive: true});
    }
    let result = io._File._deleteNative(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(result, "Cannot delete file", this.path);
  }
  rename(newPath) {
    return io._File._dispatchWithNamespace(3, [null, this[_rawPath$], newPath]).then(io.File, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot rename file to '" + dart.str(newPath) + "'", this.path));
      }
      return io.File.new(newPath);
    }, dynamicToFile()));
  }
  static _rename(namespace, oldPath, newPath) {
    dart.throw(new core.UnsupportedError.new("File._rename"));
  }
  static _renameLink(namespace, oldPath, newPath) {
    dart.throw(new core.UnsupportedError.new("File._renameLink"));
  }
  renameSync(newPath) {
    let result = io._File._rename(io._Namespace._namespace, this[_rawPath$], newPath);
    io._File.throwIfError(result, "Cannot rename file to '" + dart.str(newPath) + "'", this.path);
    return io.File.new(newPath);
  }
  copy(newPath) {
    return io._File._dispatchWithNamespace(4, [null, this[_rawPath$], newPath]).then(io.File, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot copy file to '" + dart.str(newPath) + "'", this.path));
      }
      return io.File.new(newPath);
    }, dynamicToFile()));
  }
  static _copy(namespace, oldPath, newPath) {
    dart.throw(new core.UnsupportedError.new("File._copy"));
  }
  copySync(newPath) {
    let result = io._File._copy(io._Namespace._namespace, this[_rawPath$], newPath);
    io._File.throwIfError(result, "Cannot copy file to '" + dart.str(newPath) + "'", this.path);
    return io.File.new(newPath);
  }
  open(opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C170 || CT.C170;
    if (!dart.equals(mode, io.FileMode.read) && !dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
      return FutureOfRandomAccessFile().error(new core.ArgumentError.new("Invalid file mode for this operation"));
    }
    return io._File._dispatchWithNamespace(5, [null, this[_rawPath$], mode[_mode]]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot open file", this.path));
      }
      return new io._RandomAccessFile.new(core.int._check(response), this.path);
    }, dynamicTo_RandomAccessFile()));
  }
  length() {
    return io._File._dispatchWithNamespace(12, [null, this[_rawPath$]]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot retrieve length of file", this.path));
      }
      return FutureOrOfint()._check(response);
    }, dynamicToFutureOrOfint()));
  }
  static _lengthFromPath(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("File._lengthFromPath"));
  }
  lengthSync() {
    let result = io._File._lengthFromPath(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(result, "Cannot retrieve length of file", this.path);
    return core.int._check(result);
  }
  lastAccessed() {
    return io._File._dispatchWithNamespace(13, [null, this[_rawPath$]]).then(core.DateTime, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot retrieve access time", this.path));
      }
      return new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(response));
    }, dynamicToDateTime()));
  }
  static _lastAccessed(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("File._lastAccessed"));
  }
  lastAccessedSync() {
    let ms = io._File._lastAccessed(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(ms, "Cannot retrieve access time", this.path);
    return new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(ms));
  }
  setLastAccessed(time) {
    let millis = time.millisecondsSinceEpoch;
    return io._File._dispatchWithNamespace(14, [null, this[_rawPath$], millis]).then(dart.dynamic, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot set access time", this.path));
      }
      return null;
    }, dynamicToNull()));
  }
  static _setLastAccessed(namespace, rawPath, millis) {
    dart.throw(new core.UnsupportedError.new("File._setLastAccessed"));
  }
  setLastAccessedSync(time) {
    let millis = time.millisecondsSinceEpoch;
    let result = io._File._setLastAccessed(io._Namespace._namespace, this[_rawPath$], millis);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Failed to set file access time", this.path, result));
    }
  }
  lastModified() {
    return io._File._dispatchWithNamespace(15, [null, this[_rawPath$]]).then(core.DateTime, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot retrieve modification time", this.path));
      }
      return new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(response));
    }, dynamicToDateTime()));
  }
  static _lastModified(namespace, rawPath) {
    dart.throw(new core.UnsupportedError.new("File._lastModified"));
  }
  lastModifiedSync() {
    let ms = io._File._lastModified(io._Namespace._namespace, this[_rawPath$]);
    io._File.throwIfError(ms, "Cannot retrieve modification time", this.path);
    return new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(ms));
  }
  setLastModified(time) {
    let millis = time.millisecondsSinceEpoch;
    return io._File._dispatchWithNamespace(16, [null, this[_rawPath$], millis]).then(dart.dynamic, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "Cannot set modification time", this.path));
      }
      return null;
    }, dynamicToNull()));
  }
  static _setLastModified(namespace, rawPath, millis) {
    dart.throw(new core.UnsupportedError.new("File._setLastModified"));
  }
  setLastModifiedSync(time) {
    let millis = time.millisecondsSinceEpoch;
    let result = io._File._setLastModified(io._Namespace._namespace, this[_rawPath$], millis);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("Failed to set file modification time", this.path, result));
    }
  }
  static _open(namespace, rawPath, mode) {
    dart.throw(new core.UnsupportedError.new("File._open"));
  }
  openSync(opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C170 || CT.C170;
    if (!dart.equals(mode, io.FileMode.read) && !dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
      dart.throw(new core.ArgumentError.new("Invalid file mode for this operation"));
    }
    let id = io._File._open(io._Namespace._namespace, this[_rawPath$], mode[_mode]);
    io._File.throwIfError(id, "Cannot open file", this.path);
    return new io._RandomAccessFile.new(core.int._check(id), this[_path$]);
  }
  static _openStdio(fd) {
    dart.throw(new core.UnsupportedError.new("File._openStdio"));
  }
  static _openStdioSync(fd) {
    let id = io._File._openStdio(fd);
    if (id === 0) {
      dart.throw(new io.FileSystemException.new("Cannot open stdio file for: " + dart.str(fd)));
    }
    return new io._RandomAccessFile.new(id, "");
  }
  openRead(start, end) {
    if (start === void 0) start = null;
    if (end === void 0) end = null;
    return new io._FileStream.new(this.path, start, end);
  }
  openWrite(opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C171 || CT.C171;
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    if (!dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
      dart.throw(new core.ArgumentError.new("Invalid file mode for this operation"));
    }
    let consumer = new io._FileStreamConsumer.new(this, mode);
    return io.IOSink.new(consumer, {encoding: encoding});
  }
  readAsBytes() {
    function readDataChunked(file) {
      let builder = io.BytesBuilder.new({copy: false});
      let completer = CompleterOfUint8List().new();
      function read() {
        file.read(65536).then(core.Null, dart.fn(data => {
          if (dart.notNull(data[$length]) > 0) {
            builder.add(data);
            read();
          } else {
            completer.complete(builder.takeBytes());
          }
        }, Uint8ListToNull()), {onError: dart.bind(completer, 'completeError')});
      }
      dart.fn(read, VoidTovoid());
      read();
      return completer.future;
    }
    dart.fn(readDataChunked, RandomAccessFileToFutureOfUint8List());
    return this.open().then(typed_data.Uint8List, dart.fn(file => file.length().then(typed_data.Uint8List, dart.fn(length => {
      if (length === 0) {
        return readDataChunked(file);
      }
      return file.read(length);
    }, intToFutureOfUint8List())).whenComplete(dart.bind(file, 'close')), RandomAccessFileToFutureOfUint8List()));
  }
  readAsBytesSync() {
    let opened = this.openSync();
    try {
      let data = null;
      let length = opened.lengthSync();
      if (length === 0) {
        let builder = io.BytesBuilder.new({copy: false});
        do {
          data = opened.readSync(65536);
          if (dart.notNull(data[$length]) > 0) builder.add(data);
        } while (dart.notNull(data[$length]) > 0);
        data = builder.takeBytes();
      } else {
        data = opened.readSync(length);
      }
      return data;
    } finally {
      opened.closeSync();
    }
  }
  [_tryDecode](bytes, encoding) {
    try {
      return encoding.decode(bytes);
    } catch (e) {
      let _ = dart.getThrown(e);
      dart.throw(new io.FileSystemException.new("Failed to decode data using encoding '" + dart.str(encoding.name) + "'", this.path));
    }
  }
  readAsString(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    let stack = core.StackTrace.current;
    return this.readAsBytes().then(core.String, dart.fn(bytes => {
      try {
        return this[_tryDecode](bytes, encoding);
      } catch (e$) {
        let e = dart.getThrown(e$);
        return FutureOfString().error(e, stack);
      }
    }, Uint8ListToFutureOrOfString()));
  }
  readAsStringSync(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    return this[_tryDecode](this.readAsBytesSync(), encoding);
  }
  readAsLines(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    return this.readAsString({encoding: encoding}).then(ListOfString(), dart.bind(C179 || CT.C179, 'convert'));
  }
  readAsLinesSync(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    return (C179 || CT.C179).convert(this.readAsStringSync({encoding: encoding}));
  }
  writeAsBytes(bytes, opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C171 || CT.C171;
    let flush = opts && 'flush' in opts ? opts.flush : false;
    return this.open({mode: mode}).then(io.File, dart.fn(file => file.writeFrom(bytes, 0, bytes[$length]).then(io.File, dart.fn(_ => {
      if (dart.test(flush)) return file.flush().then(io.File, dart.fn(_ => this, RandomAccessFileTo_File()));
      return this;
    }, RandomAccessFileToFutureOrOfFile())).whenComplete(dart.bind(file, 'close')), RandomAccessFileToFutureOfFile()));
  }
  writeAsBytesSync(bytes, opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C171 || CT.C171;
    let flush = opts && 'flush' in opts ? opts.flush : false;
    let opened = this.openSync({mode: mode});
    try {
      opened.writeFromSync(bytes, 0, bytes[$length]);
      if (dart.test(flush)) opened.flushSync();
    } finally {
      opened.closeSync();
    }
  }
  writeAsString(contents, opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C171 || CT.C171;
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    let flush = opts && 'flush' in opts ? opts.flush : false;
    try {
      return this.writeAsBytes(encoding.encode(contents), {mode: mode, flush: flush});
    } catch (e$) {
      let e = dart.getThrown(e$);
      return FutureOfFile().error(e);
    }
  }
  writeAsStringSync(contents, opts) {
    let mode = opts && 'mode' in opts ? opts.mode : C171 || CT.C171;
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    let flush = opts && 'flush' in opts ? opts.flush : false;
    this.writeAsBytesSync(encoding.encode(contents), {mode: mode, flush: flush});
  }
  toString() {
    return "File: '" + dart.str(this.path) + "'";
  }
  static throwIfError(result, msg, path) {
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new(msg, path, result));
    }
  }
};
(io._File.new = function(path) {
  this[_path$1] = null;
  this[_rawPath$1] = null;
  io._File.__proto__.new.call(this);
  core.ArgumentError.checkNotNull(path, "path");
  this[_path$] = path;
  this[_rawPath$] = io.FileSystemEntity._toUtf8Array(path);
}).prototype = io._File.prototype;
(io._File.fromRawPath = function(rawPath) {
  this[_path$1] = null;
  this[_rawPath$1] = null;
  io._File.__proto__.new.call(this);
  core.ArgumentError.checkNotNull(rawPath, "rawPath");
  this[_rawPath$] = io.FileSystemEntity._toNullTerminatedUtf8Array(rawPath);
  this[_path$] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
}).prototype = io._File.prototype;
;
io._File[dart.implements] = () => [io.File];
;
dart.setGetterSignature(io._File, () => ({
  __proto__: dart.getGetters(io._File.__proto__),
  path: core.String,
  absolute: io.File
}));
dart.setLibraryUri(io._File, "dart:io");
;
dart.defineExtensionMethods(io._File, ['toString']);
io._RandomAccessFileOps = class _RandomAccessFileOps extends core.Object {
  static new(pointer) {
    dart.throw(new core.UnsupportedError.new("RandomAccessFile"));
  }
};
(io._RandomAccessFileOps[dart.mixinNew] = function() {
}).prototype = io._RandomAccessFileOps.prototype;
;
dart.setLibraryUri(io._RandomAccessFileOps, "dart:io");
const _asyncDispatched = dart.privateName(io, "_asyncDispatched");
const _fileService = dart.privateName(io, "_fileService");
const _resourceInfo = dart.privateName(io, "_resourceInfo");
const _maybeConnectHandler = dart.privateName(io, "_maybeConnectHandler");
const _maybePerformCleanup = dart.privateName(io, "_maybePerformCleanup");
let C180;
let C181;
const _dispatch = dart.privateName(io, "_dispatch");
const _checkAvailable = dart.privateName(io, "_checkAvailable");
const _fileLockValue = dart.privateName(io, "_fileLockValue");
io._RandomAccessFile = class _RandomAccessFile extends core.Object {
  [_maybePerformCleanup]() {
    if (dart.test(this.closed)) {
      io._FileResourceInfo.FileClosed(this[_resourceInfo]);
    }
  }
  [_maybeConnectHandler]() {
    if (!dart.test(io._RandomAccessFile._connectedResourceHandler)) {
      developer.registerExtension("ext.dart.io.getOpenFiles", C180 || CT.C180);
      developer.registerExtension("ext.dart.io.getFileByID", C181 || CT.C181);
      io._RandomAccessFile._connectedResourceHandler = true;
    }
  }
  close() {
    return this[_dispatch](7, [null], {markClosed: true}).then(dart.void, dart.fn(result => {
      if (dart.equals(result, -1)) {
        dart.throw(new io.FileSystemException.new("Cannot close file", this.path));
      }
      this.closed = dart.test(this.closed) || dart.equals(result, 0);
      this[_maybePerformCleanup]();
    }, dynamicToNull()));
  }
  closeSync() {
    this[_checkAvailable]();
    let id = this[_ops].close();
    if (id === -1) {
      dart.throw(new io.FileSystemException.new("Cannot close file", this.path));
    }
    this.closed = dart.test(this.closed) || id === 0;
    this[_maybePerformCleanup]();
  }
  readByte() {
    return this[_dispatch](18, [null]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "readByte failed", this.path));
      }
      this[_resourceInfo].addRead(1);
      return FutureOrOfint()._check(response);
    }, dynamicToFutureOrOfint()));
  }
  readByteSync() {
    this[_checkAvailable]();
    let result = this[_ops].readByte();
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("readByte failed", this.path, result));
    }
    this[_resourceInfo].addRead(1);
    return core.int._check(result);
  }
  read(bytes) {
    core.ArgumentError.checkNotNull(bytes, "bytes");
    return this[_dispatch](20, [null, bytes]).then(typed_data.Uint8List, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "read failed", this.path));
      }
      this[_resourceInfo].addRead(core.int._check(dart.dload(dart.dsend(response, '_get', [1]), 'length')));
      let result = typed_data.Uint8List._check(dart.dsend(response, '_get', [1]));
      return result;
    }, dynamicToUint8List()));
  }
  readSync(bytes) {
    this[_checkAvailable]();
    core.ArgumentError.checkNotNull(bytes, "bytes");
    let result = this[_ops].read(bytes);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("readSync failed", this.path, result));
    }
    this[_resourceInfo].addRead(core.int._check(dart.dload(result, 'length')));
    return typed_data.Uint8List._check(result);
  }
  readInto(buffer, start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    if (!core.List.is(buffer) || start != null && !core.int.is(start) || end != null && !core.int.is(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    end = core.RangeError.checkValidRange(start, end, buffer[$length]);
    if (end == start) {
      return FutureOfint().value(0);
    }
    let length = dart.notNull(end) - dart.notNull(start);
    return this[_dispatch](21, [null, length]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "readInto failed", this.path));
      }
      let read = core.int._check(dart.dsend(response, '_get', [1]));
      let data = ListOfint()._check(dart.dsend(response, '_get', [2]));
      buffer[$setRange](start, dart.notNull(start) + dart.notNull(read), data);
      this[_resourceInfo].addRead(read);
      return read;
    }, dynamicToint()));
  }
  readIntoSync(buffer, start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    this[_checkAvailable]();
    if (!core.List.is(buffer) || start != null && !core.int.is(start) || end != null && !core.int.is(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    end = core.RangeError.checkValidRange(start, end, buffer[$length]);
    if (end == start) {
      return 0;
    }
    let result = this[_ops].readInto(buffer, start, end);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("readInto failed", this.path, result));
    }
    this[_resourceInfo].addRead(core.int._check(result));
    return core.int._check(result);
  }
  writeByte(value) {
    core.ArgumentError.checkNotNull(value, "value");
    return this[_dispatch](19, [null, value]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "writeByte failed", this.path));
      }
      this[_resourceInfo].addWrite(1);
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  writeByteSync(value) {
    this[_checkAvailable]();
    core.ArgumentError.checkNotNull(value, "value");
    let result = this[_ops].writeByte(value);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("writeByte failed", this.path, result));
    }
    this[_resourceInfo].addWrite(1);
    return core.int._check(result);
  }
  writeFrom(buffer, start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    if (!core.List.is(buffer) || start != null && !core.int.is(start) || end != null && !core.int.is(end)) {
      dart.throw(new core.ArgumentError.new("Invalid arguments to writeFrom"));
    }
    end = core.RangeError.checkValidRange(start, end, buffer[$length]);
    if (end == start) {
      return FutureOfRandomAccessFile().value(this);
    }
    let result = null;
    try {
      result = io._ensureFastAndSerializableByteData(buffer, start, end);
    } catch (e$) {
      let e = dart.getThrown(e$);
      return FutureOfRandomAccessFile().error(e);
    }
    let request = core.List.new(4);
    request[$_set](0, null);
    request[$_set](1, result.buffer);
    request[$_set](2, result.start);
    request[$_set](3, dart.notNull(end) - (dart.notNull(start) - dart.notNull(result.start)));
    return this[_dispatch](22, request).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "writeFrom failed", this.path));
      }
      this[_resourceInfo].addWrite(dart.notNull(end) - (dart.notNull(start) - dart.notNull(result.start)));
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  writeFromSync(buffer, start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    this[_checkAvailable]();
    if (!core.List.is(buffer) || start != null && !core.int.is(start) || end != null && !core.int.is(end)) {
      dart.throw(new core.ArgumentError.new("Invalid arguments to writeFromSync"));
    }
    end = core.RangeError.checkValidRange(start, end, buffer[$length]);
    if (end == start) {
      return;
    }
    let bufferAndStart = io._ensureFastAndSerializableByteData(buffer, start, end);
    let result = this[_ops].writeFrom(bufferAndStart.buffer, bufferAndStart.start, dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("writeFrom failed", this.path, result));
    }
    this[_resourceInfo].addWrite(dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
  }
  writeString(string, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    core.ArgumentError.checkNotNull(encoding, "encoding");
    let data = encoding.encode(string);
    return this.writeFrom(data, 0, data[$length]);
  }
  writeStringSync(string, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    core.ArgumentError.checkNotNull(encoding, "encoding");
    let data = encoding.encode(string);
    this.writeFromSync(data, 0, data[$length]);
  }
  position() {
    return this[_dispatch](8, [null]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "position failed", this.path));
      }
      return FutureOrOfint()._check(response);
    }, dynamicToFutureOrOfint()));
  }
  positionSync() {
    this[_checkAvailable]();
    let result = this[_ops].position();
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("position failed", this.path, result));
    }
    return core.int._check(result);
  }
  setPosition(position) {
    return this[_dispatch](9, [null, position]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "setPosition failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  setPositionSync(position) {
    this[_checkAvailable]();
    let result = this[_ops].setPosition(position);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("setPosition failed", this.path, result));
    }
  }
  truncate(length) {
    return this[_dispatch](10, [null, length]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "truncate failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  truncateSync(length) {
    this[_checkAvailable]();
    let result = this[_ops].truncate(length);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("truncate failed", this.path, result));
    }
  }
  length() {
    return this[_dispatch](11, [null]).then(core.int, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "length failed", this.path));
      }
      return FutureOrOfint()._check(response);
    }, dynamicToFutureOrOfint()));
  }
  lengthSync() {
    this[_checkAvailable]();
    let result = this[_ops].length();
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("length failed", this.path, result));
    }
    return core.int._check(result);
  }
  flush() {
    return this[_dispatch](17, [null]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "flush failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  flushSync() {
    this[_checkAvailable]();
    let result = this[_ops].flush();
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("flush failed", this.path, result));
    }
  }
  [_fileLockValue](fl) {
    return fl[_type];
  }
  lock(mode, start, end) {
    if (mode === void 0) mode = C176 || CT.C176;
    if (start === void 0) start = 0;
    if (end === void 0) end = -1;
    if (!io.FileLock.is(mode) || !core.int.is(start) || !core.int.is(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    if (dart.notNull(start) < 0 || dart.notNull(end) < -1 || end !== -1 && dart.notNull(start) >= dart.notNull(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    let lock = this[_fileLockValue](mode);
    return this[_dispatch](30, [null, lock, start, end]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "lock failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  unlock(start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = -1;
    if (!core.int.is(start) || !core.int.is(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    if (start == end) {
      dart.throw(new core.ArgumentError.new());
    }
    return this[_dispatch](30, [null, 0, start, end]).then(io.RandomAccessFile, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        dart.throw(io._exceptionFromResponse(response, "unlock failed", this.path));
      }
      return this;
    }, dynamicTo_RandomAccessFile()));
  }
  lockSync(mode, start, end) {
    if (mode === void 0) mode = C176 || CT.C176;
    if (start === void 0) start = 0;
    if (end === void 0) end = -1;
    this[_checkAvailable]();
    if (!io.FileLock.is(mode) || !core.int.is(start) || !core.int.is(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    if (dart.notNull(start) < 0 || dart.notNull(end) < -1 || end !== -1 && dart.notNull(start) >= dart.notNull(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    let lock = this[_fileLockValue](mode);
    let result = this[_ops].lock(lock, start, end);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("lock failed", this.path, result));
    }
  }
  unlockSync(start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = -1;
    this[_checkAvailable]();
    if (!core.int.is(start) || !core.int.is(end)) {
      dart.throw(new core.ArgumentError.new());
    }
    if (start == end) {
      dart.throw(new core.ArgumentError.new());
    }
    let result = this[_ops].lock(0, start, end);
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new("unlock failed", this.path, result));
    }
  }
  [_pointer]() {
    return this[_ops].getPointer();
  }
  [_dispatch](request, data, opts) {
    let markClosed = opts && 'markClosed' in opts ? opts.markClosed : false;
    if (dart.test(this.closed)) {
      return async.Future.error(new io.FileSystemException.new("File closed", this.path));
    }
    if (dart.test(this[_asyncDispatched])) {
      let msg = "An async operation is currently pending";
      return async.Future.error(new io.FileSystemException.new(msg, this.path));
    }
    if (dart.test(markClosed)) {
      this.closed = true;
    }
    this[_asyncDispatched] = true;
    data[$_set](0, this[_pointer]());
    return io._IOService._dispatch(request, data).whenComplete(dart.fn(() => {
      this[_asyncDispatched] = false;
    }, VoidToNull()));
  }
  [_checkAvailable]() {
    if (dart.test(this[_asyncDispatched])) {
      dart.throw(new io.FileSystemException.new("An async operation is currently pending", this.path));
    }
    if (dart.test(this.closed)) {
      dart.throw(new io.FileSystemException.new("File closed", this.path));
    }
  }
};
(io._RandomAccessFile.new = function(pointer, path) {
  this[_asyncDispatched] = false;
  this[_fileService] = null;
  this[_resourceInfo] = null;
  this[_ops] = null;
  this.closed = false;
  this.path = path;
  this[_ops] = io._RandomAccessFileOps.new(pointer);
  this[_resourceInfo] = new io._FileResourceInfo.new(this);
  this[_maybeConnectHandler]();
}).prototype = io._RandomAccessFile.prototype;
;
io._RandomAccessFile[dart.implements] = () => [io.RandomAccessFile];
;
dart.setLibraryUri(io._RandomAccessFile, "dart:io");
;
dart.defineLazy(io._RandomAccessFile, {
  /*io._RandomAccessFile._connectedResourceHandler*/get _connectedResourceHandler() {
    return false;
  },
  set _connectedResourceHandler(_) {},
  /*io._RandomAccessFile.lockUnlock*/get lockUnlock() {
    return 0;
  }
});
let C182;
const _type$2 = dart.privateName(io, "FileSystemEntityType._type");
let C183;
let C184;
let C185;
let C186;
let C187;
io.FileSystemEntityType = class FileSystemEntityType extends core.Object {
  get [_type]() {
    return this[_type$2];
  }
  set [_type](value) {
    super[_type] = value;
  }
  static _lookup(type) {
    return io.FileSystemEntityType._typeList[$_get](type);
  }
  toString() {
    return (C182 || CT.C182)[$_get](this[_type]);
  }
};
(io.FileSystemEntityType._internal = function(_type) {
  this[_type$2] = _type;
  ;
}).prototype = io.FileSystemEntityType.prototype;
;
dart.setLibraryUri(io.FileSystemEntityType, "dart:io");
;
dart.defineExtensionMethods(io.FileSystemEntityType, ['toString']);
dart.defineLazy(io.FileSystemEntityType, {
  /*io.FileSystemEntityType.file*/get file() {
    return C183 || CT.C183;
  },
  /*io.FileSystemEntityType.FILE*/get FILE() {
    return C183 || CT.C183;
  },
  /*io.FileSystemEntityType.directory*/get directory() {
    return C184 || CT.C184;
  },
  /*io.FileSystemEntityType.DIRECTORY*/get DIRECTORY() {
    return C184 || CT.C184;
  },
  /*io.FileSystemEntityType.link*/get link() {
    return C185 || CT.C185;
  },
  /*io.FileSystemEntityType.LINK*/get LINK() {
    return C185 || CT.C185;
  },
  /*io.FileSystemEntityType.notFound*/get notFound() {
    return C186 || CT.C186;
  },
  /*io.FileSystemEntityType.NOT_FOUND*/get NOT_FOUND() {
    return C186 || CT.C186;
  },
  /*io.FileSystemEntityType._typeList*/get _typeList() {
    return C187 || CT.C187;
  }
});
let C188;
const changed$ = dart.privateName(io, "FileStat.changed");
const modified$ = dart.privateName(io, "FileStat.modified");
const accessed$ = dart.privateName(io, "FileStat.accessed");
const type$ = dart.privateName(io, "FileStat.type");
const mode$0 = dart.privateName(io, "FileStat.mode");
const size$ = dart.privateName(io, "FileStat.size");
let C189;
io.FileStat = class FileStat extends core.Object {
  get changed() {
    return this[changed$];
  }
  set changed(value) {
    super.changed = value;
  }
  get modified() {
    return this[modified$];
  }
  set modified(value) {
    super.modified = value;
  }
  get accessed() {
    return this[accessed$];
  }
  set accessed(value) {
    super.accessed = value;
  }
  get type() {
    return this[type$];
  }
  set type(value) {
    super.type = value;
  }
  get mode() {
    return this[mode$0];
  }
  set mode(value) {
    super.mode = value;
  }
  get size() {
    return this[size$];
  }
  set size(value) {
    super.size = value;
  }
  static _statSync(namespace, path) {
    dart.throw(new core.UnsupportedError.new("FileStat.stat"));
  }
  static statSync(path) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileStat._statSyncInternal(path);
    }
    return overrides.statSync(path);
  }
  static _statSyncInternal(path) {
    if (dart.test(io.Platform.isWindows)) {
      path = io.FileSystemEntity._trimTrailingPathSeparators(path);
    }
    let data = io.FileStat._statSync(io._Namespace._namespace, path);
    if (io.OSError.is(data)) return io.FileStat._notFound;
    return new io.FileStat._internal(new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(dart.dsend(data, '_get', [1]))), new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(dart.dsend(data, '_get', [2]))), new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(dart.dsend(data, '_get', [3]))), io.FileSystemEntityType._lookup(core.int._check(dart.dsend(data, '_get', [0]))), core.int._check(dart.dsend(data, '_get', [4])), core.int._check(dart.dsend(data, '_get', [5])));
  }
  static stat(path) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.FileStat._stat(path);
    }
    return overrides.stat(path);
  }
  static _stat(path) {
    if (dart.test(io.Platform.isWindows)) {
      path = io.FileSystemEntity._trimTrailingPathSeparators(path);
    }
    return io._File._dispatchWithNamespace(29, [null, path]).then(io.FileStat, dart.fn(response => {
      if (dart.test(io._isErrorResponse(response))) {
        return io.FileStat._notFound;
      }
      let data = core.List._check(dart.dsend(response, '_get', [1]));
      return new io.FileStat._internal(new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(data[$_get](1))), new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(data[$_get](2))), new core.DateTime.fromMillisecondsSinceEpoch(core.int._check(data[$_get](3))), io.FileSystemEntityType._lookup(core.int._check(data[$_get](0))), core.int._check(data[$_get](4)), core.int._check(data[$_get](5)));
    }, dynamicToFileStat()));
  }
  toString() {
    return "FileStat: type " + dart.str(this.type) + "\n          changed " + dart.str(this.changed) + "\n          modified " + dart.str(this.modified) + "\n          accessed " + dart.str(this.accessed) + "\n          mode " + dart.str(this.modeString()) + "\n          size " + dart.str(this.size);
  }
  modeString() {
    let t82;
    let permissions = dart.notNull(this.mode) & 4095;
    let codes = C188 || CT.C188;
    let result = [];
    if ((permissions & 2048) !== 0) result[$add]("(suid) ");
    if ((permissions & 1024) !== 0) result[$add]("(guid) ");
    if ((permissions & 512) !== 0) result[$add]("(sticky) ");
    t82 = result;
    t82[$add](codes[$_get](permissions >> 6 & 7));
    t82[$add](codes[$_get](permissions >> 3 & 7));
    t82[$add](codes[$_get](permissions & 7));
    t82;
    return result[$join]();
  }
};
(io.FileStat._internal = function(changed, modified, accessed, type, mode, size) {
  this[changed$] = changed;
  this[modified$] = modified;
  this[accessed$] = accessed;
  this[type$] = type;
  this[mode$0] = mode;
  this[size$] = size;
  ;
}).prototype = io.FileStat.prototype;
(io.FileStat._internalNotFound = function() {
  this[changed$] = null;
  this[modified$] = null;
  this[accessed$] = null;
  this[type$] = io.FileSystemEntityType.notFound;
  this[mode$0] = 0;
  this[size$] = -1;
  ;
}).prototype = io.FileStat.prototype;
;
;
dart.setLibraryUri(io.FileStat, "dart:io");
;
dart.defineExtensionMethods(io.FileStat, ['toString']);
dart.defineLazy(io.FileStat, {
  /*io.FileStat._type*/get _type() {
    return 0;
  },
  /*io.FileStat._changedTime*/get _changedTime() {
    return 1;
  },
  /*io.FileStat._modifiedTime*/get _modifiedTime() {
    return 2;
  },
  /*io.FileStat._accessedTime*/get _accessedTime() {
    return 3;
  },
  /*io.FileStat._mode*/get _mode() {
    return 4;
  },
  /*io.FileStat._size*/get _size() {
    return 5;
  },
  /*io.FileStat._notFound*/get _notFound() {
    return C189 || CT.C189;
  }
});
const type$0 = dart.privateName(io, "FileSystemEvent.type");
const path$0 = dart.privateName(io, "FileSystemEvent.path");
const isDirectory$ = dart.privateName(io, "FileSystemEvent.isDirectory");
io.FileSystemEvent = class FileSystemEvent extends core.Object {
  get type() {
    return this[type$0];
  }
  set type(value) {
    super.type = value;
  }
  get path() {
    return this[path$0];
  }
  set path(value) {
    super.path = value;
  }
  get isDirectory() {
    return this[isDirectory$];
  }
  set isDirectory(value) {
    super.isDirectory = value;
  }
};
(io.FileSystemEvent.__ = function(type, path, isDirectory) {
  this[type$0] = type;
  this[path$0] = path;
  this[isDirectory$] = isDirectory;
  ;
}).prototype = io.FileSystemEvent.prototype;
;
dart.setLibraryUri(io.FileSystemEvent, "dart:io");
;
dart.defineLazy(io.FileSystemEvent, {
  /*io.FileSystemEvent.create*/get create() {
    return 1;
  },
  /*io.FileSystemEvent.CREATE*/get CREATE() {
    return 1;
  },
  /*io.FileSystemEvent.modify*/get modify() {
    return 2;
  },
  /*io.FileSystemEvent.MODIFY*/get MODIFY() {
    return 2;
  },
  /*io.FileSystemEvent.delete*/get delete() {
    return 4;
  },
  /*io.FileSystemEvent.DELETE*/get DELETE() {
    return 4;
  },
  /*io.FileSystemEvent.move*/get move() {
    return 8;
  },
  /*io.FileSystemEvent.MOVE*/get MOVE() {
    return 8;
  },
  /*io.FileSystemEvent.all*/get all() {
    return 15;
  },
  /*io.FileSystemEvent.ALL*/get ALL() {
    return 15;
  },
  /*io.FileSystemEvent._modifyAttributes*/get _modifyAttributes() {
    return 16;
  },
  /*io.FileSystemEvent._deleteSelf*/get _deleteSelf() {
    return 32;
  },
  /*io.FileSystemEvent._isDir*/get _isDir() {
    return 64;
  }
});
io.FileSystemCreateEvent = class FileSystemCreateEvent extends io.FileSystemEvent {
  toString() {
    return "FileSystemCreateEvent('" + dart.str(this.path) + "')";
  }
};
(io.FileSystemCreateEvent.__ = function(path, isDirectory) {
  io.FileSystemCreateEvent.__proto__.__.call(this, 1, core.String._check(path), core.bool._check(isDirectory));
  ;
}).prototype = io.FileSystemCreateEvent.prototype;
;
dart.setLibraryUri(io.FileSystemCreateEvent, "dart:io");
dart.defineExtensionMethods(io.FileSystemCreateEvent, ['toString']);
const contentChanged$ = dart.privateName(io, "FileSystemModifyEvent.contentChanged");
io.FileSystemModifyEvent = class FileSystemModifyEvent extends io.FileSystemEvent {
  get contentChanged() {
    return this[contentChanged$];
  }
  set contentChanged(value) {
    super.contentChanged = value;
  }
  toString() {
    return "FileSystemModifyEvent('" + dart.str(this.path) + "', contentChanged=" + dart.str(this.contentChanged) + ")";
  }
};
(io.FileSystemModifyEvent.__ = function(path, isDirectory, contentChanged) {
  this[contentChanged$] = contentChanged;
  io.FileSystemModifyEvent.__proto__.__.call(this, 2, core.String._check(path), core.bool._check(isDirectory));
  ;
}).prototype = io.FileSystemModifyEvent.prototype;
;
dart.setLibraryUri(io.FileSystemModifyEvent, "dart:io");
;
dart.defineExtensionMethods(io.FileSystemModifyEvent, ['toString']);
io.FileSystemDeleteEvent = class FileSystemDeleteEvent extends io.FileSystemEvent {
  toString() {
    return "FileSystemDeleteEvent('" + dart.str(this.path) + "')";
  }
};
(io.FileSystemDeleteEvent.__ = function(path, isDirectory) {
  io.FileSystemDeleteEvent.__proto__.__.call(this, 4, core.String._check(path), core.bool._check(isDirectory));
  ;
}).prototype = io.FileSystemDeleteEvent.prototype;
;
dart.setLibraryUri(io.FileSystemDeleteEvent, "dart:io");
dart.defineExtensionMethods(io.FileSystemDeleteEvent, ['toString']);
const destination$ = dart.privateName(io, "FileSystemMoveEvent.destination");
io.FileSystemMoveEvent = class FileSystemMoveEvent extends io.FileSystemEvent {
  get destination() {
    return this[destination$];
  }
  set destination(value) {
    super.destination = value;
  }
  toString() {
    let buffer = new core.StringBuffer.new();
    buffer.write("FileSystemMoveEvent('" + dart.str(this.path) + "'");
    if (this.destination != null) buffer.write(", '" + dart.str(this.destination) + "'");
    buffer.write(")");
    return buffer.toString();
  }
};
(io.FileSystemMoveEvent.__ = function(path, isDirectory, destination) {
  this[destination$] = destination;
  io.FileSystemMoveEvent.__proto__.__.call(this, 8, core.String._check(path), core.bool._check(isDirectory));
  ;
}).prototype = io.FileSystemMoveEvent.prototype;
;
dart.setLibraryUri(io.FileSystemMoveEvent, "dart:io");
;
dart.defineExtensionMethods(io.FileSystemMoveEvent, ['toString']);
io._FileSystemWatcher = class _FileSystemWatcher extends core.Object {
  static _watch(path, events, recursive) {
    dart.throw(new core.UnsupportedError.new("_FileSystemWatcher.watch"));
  }
  static get isSupported() {
    dart.throw(new core.UnsupportedError.new("_FileSystemWatcher.isSupported"));
  }
};
(io._FileSystemWatcher.new = function() {
  ;
}).prototype = io._FileSystemWatcher.prototype;
;
dart.setLibraryUri(io._FileSystemWatcher, "dart:io");
io._IOResourceInfo = class _IOResourceInfo extends core.Object {
  static get timestamp() {
    return dart.notNull(io._IOResourceInfo._startTime) + dart.notNull(io._IOResourceInfo._sw.elapsedMicroseconds) / 1000;
  }
  get referenceValueMap() {
    return new (IdentityMapOfString$dynamic()).from(["type", "@" + dart.str(this.type), "id", this.id, "name", this.name]);
  }
  static getNextID() {
    let t82;
    t82 = io._IOResourceInfo._count;
    io._IOResourceInfo._count = dart.notNull(t82) + 1;
    return t82;
  }
};
(io._IOResourceInfo.new = function(type) {
  this.type = type;
  this.id = io._IOResourceInfo.getNextID();
  ;
}).prototype = io._IOResourceInfo.prototype;
;
dart.setGetterSignature(io._IOResourceInfo, () => ({
  __proto__: dart.getGetters(io._IOResourceInfo.__proto__),
  referenceValueMap: core.Map$(core.String, dart.dynamic)
}));
dart.setLibraryUri(io._IOResourceInfo, "dart:io");
;
dart.defineLazy(io._IOResourceInfo, {
  /*io._IOResourceInfo._count*/get _count() {
    return 0;
  },
  set _count(_) {},
  /*io._IOResourceInfo._sw*/get _sw() {
    let t82;
    return t82 = new core.Stopwatch.new(), t82.start(), t82;
  },
  /*io._IOResourceInfo._startTime*/get _startTime() {
    return new core.DateTime.now().millisecondsSinceEpoch;
  }
});
io._ReadWriteResourceInfo = class _ReadWriteResourceInfo extends io._IOResourceInfo {
  addRead(bytes) {
    this.totalRead = dart.notNull(this.totalRead) + dart.notNull(bytes);
    this.readCount = dart.notNull(this.readCount) + 1;
    this.lastRead = io._IOResourceInfo.timestamp;
  }
  didRead() {
    this.addRead(0);
  }
  addWrite(bytes) {
    this.totalWritten = dart.notNull(this.totalWritten) + dart.notNull(bytes);
    this.writeCount = dart.notNull(this.writeCount) + 1;
    this.lastWrite = io._IOResourceInfo.timestamp;
  }
  get fullValueMap() {
    return new (IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "totalRead", this.totalRead, "totalWritten", this.totalWritten, "readCount", this.readCount, "writeCount", this.writeCount, "lastRead", this.lastRead, "lastWrite", this.lastWrite]);
  }
};
(io._ReadWriteResourceInfo.new = function(type) {
  this.totalRead = 0;
  this.totalWritten = 0;
  this.readCount = 0;
  this.writeCount = 0;
  this.lastRead = 0.0;
  this.lastWrite = 0.0;
  io._ReadWriteResourceInfo.__proto__.new.call(this, type);
  ;
}).prototype = io._ReadWriteResourceInfo.prototype;
;
;
dart.setGetterSignature(io._ReadWriteResourceInfo, () => ({
  __proto__: dart.getGetters(io._ReadWriteResourceInfo.__proto__),
  fullValueMap: core.Map$(core.String, dart.dynamic)
}));
dart.setLibraryUri(io._ReadWriteResourceInfo, "dart:io");
;
io._FileResourceInfo = class _FileResourceInfo extends io._ReadWriteResourceInfo {
  static FileOpened(info) {
    if (!!dart.test(io._FileResourceInfo.openFiles[$containsKey](info.id))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 103, 12, "!openFiles.containsKey(info.id)");
    io._FileResourceInfo.openFiles[$_set](info.id, info);
  }
  static FileClosed(info) {
    if (!dart.test(io._FileResourceInfo.openFiles[$containsKey](info.id))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 108, 12, "openFiles.containsKey(info.id)");
    io._FileResourceInfo.openFiles[$remove](info.id);
  }
  static getOpenFilesList() {
    return ListOfMapOfString$dynamic().from(io._FileResourceInfo.openFiles[$values][$map](dart.dynamic, dart.fn(e => e.referenceValueMap, _FileResourceInfoToMapOfString$dynamic())));
  }
  static getOpenFiles($function, params) {
    if (!dart.equals($function, "ext.dart.io.getOpenFiles")) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 117, 12, "function == 'ext.dart.io.getOpenFiles'");
    let data = new (IdentityMapOfString$Object()).from(["type", "_openfiles", "data", io._FileResourceInfo.getOpenFilesList()]);
    let jsonValue = convert.json.encode(data);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  getFileInfoMap() {
    return this.fullValueMap;
  }
  static getFileInfoMapByID($function, params) {
    if (!dart.test(core.bool._check(dart.dsend(params, 'containsKey', ["id"])))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 128, 12, "params.containsKey('id')");
    let id = core.int.parse(core.String._check(dart.dsend(params, '_get', ["id"])));
    let result = dart.test(io._FileResourceInfo.openFiles[$containsKey](id)) ? io._FileResourceInfo.openFiles[$_get](id).getFileInfoMap() : new _js_helper.LinkedMap.new();
    let jsonValue = convert.json.encode(result);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  get name() {
    return dart.str(dart.dload(this.file, 'path'));
  }
};
(io._FileResourceInfo.new = function(file) {
  this.file = file;
  io._FileResourceInfo.__proto__.new.call(this, "_file");
  io._FileResourceInfo.FileOpened(this);
}).prototype = io._FileResourceInfo.prototype;
;
;
dart.setGetterSignature(io._FileResourceInfo, () => ({
  __proto__: dart.getGetters(io._FileResourceInfo.__proto__),
  name: core.String
}));
dart.setLibraryUri(io._FileResourceInfo, "dart:io");
;
dart.defineLazy(io._FileResourceInfo, {
  /*io._FileResourceInfo._type*/get _type() {
    return "_file";
  },
  /*io._FileResourceInfo.openFiles*/get openFiles() {
    return new (LinkedMapOfint$_FileResourceInfo()).new();
  },
  set openFiles(_) {}
});
const _arguments$2 = dart.privateName(io, "_arguments");
const _workingDirectory = dart.privateName(io, "_workingDirectory");
io._ProcessResourceInfo = class _ProcessResourceInfo extends io._IOResourceInfo {
  get name() {
    return core.String._check(dart.dload(this.process, _path$));
  }
  stopped() {
    io._ProcessResourceInfo.ProcessStopped(this);
  }
  get fullValueMap() {
    return new (IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "pid", dart.dload(this.process, 'pid'), "startedAt", this.startedAt, "arguments", dart.dload(this.process, _arguments$2), "workingDirectory", dart.dload(this.process, _workingDirectory) == null ? "." : dart.dload(this.process, _workingDirectory)]);
  }
  static ProcessStarted(info) {
    if (!!dart.test(io._ProcessResourceInfo.startedProcesses[$containsKey](info.id))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 173, 12, "!startedProcesses.containsKey(info.id)");
    io._ProcessResourceInfo.startedProcesses[$_set](info.id, info);
  }
  static ProcessStopped(info) {
    if (!dart.test(io._ProcessResourceInfo.startedProcesses[$containsKey](info.id))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 178, 12, "startedProcesses.containsKey(info.id)");
    io._ProcessResourceInfo.startedProcesses[$remove](info.id);
  }
  static getStartedProcessesList() {
    return ListOfMapOfString$dynamic().from(io._ProcessResourceInfo.startedProcesses[$values][$map](dart.dynamic, dart.fn(e => e.referenceValueMap, _ProcessResourceInfoToMapOfString$dynamic())));
  }
  static getStartedProcesses($function, params) {
    if (!($function === "ext.dart.io.getProcesses")) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 187, 12, "function == 'ext.dart.io.getProcesses'");
    let data = new (IdentityMapOfString$Object()).from(["type", "_startedprocesses", "data", io._ProcessResourceInfo.getStartedProcessesList()]);
    let jsonValue = convert.json.encode(data);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  static getProcessInfoMapById($function, params) {
    let id = core.int.parse(params[$_get]("id"));
    let result = dart.test(io._ProcessResourceInfo.startedProcesses[$containsKey](id)) ? io._ProcessResourceInfo.startedProcesses[$_get](id).fullValueMap : new _js_helper.LinkedMap.new();
    let jsonValue = convert.json.encode(result);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
};
(io._ProcessResourceInfo.new = function(process) {
  this.process = process;
  this.startedAt = io._IOResourceInfo.timestamp;
  io._ProcessResourceInfo.__proto__.new.call(this, "_process");
  io._ProcessResourceInfo.ProcessStarted(this);
}).prototype = io._ProcessResourceInfo.prototype;
;
;
dart.setGetterSignature(io._ProcessResourceInfo, () => ({
  __proto__: dart.getGetters(io._ProcessResourceInfo.__proto__),
  name: core.String,
  fullValueMap: core.Map$(core.String, dart.dynamic)
}));
dart.setLibraryUri(io._ProcessResourceInfo, "dart:io");
;
dart.defineLazy(io._ProcessResourceInfo, {
  /*io._ProcessResourceInfo._type*/get _type() {
    return "_process";
  },
  /*io._ProcessResourceInfo.startedProcesses*/get startedProcesses() {
    return new (LinkedMapOfint$_ProcessResourceInfo()).new();
  },
  set startedProcesses(_) {}
});
io._SocketResourceInfo = class _SocketResourceInfo extends io._ReadWriteResourceInfo {
  get name() {
    if (dart.dtest(dart.dload(this.socket, 'isListening'))) {
      return "listening:" + dart.str(dart.dload(dart.dload(this.socket, 'address'), 'host')) + ":" + dart.str(dart.dload(this.socket, 'port'));
    }
    let remote = "";
    try {
      let remoteHost = dart.dload(dart.dload(this.socket, 'remoteAddress'), 'host');
      let remotePort = dart.dload(this.socket, 'remotePort');
      remote = " -> " + dart.str(remoteHost) + ":" + dart.str(remotePort);
    } catch (e$) {
      let e = dart.getThrown(e$);
    }
    return dart.str(dart.dload(dart.dload(this.socket, 'address'), 'host')) + ":" + dart.str(dart.dload(this.socket, 'port')) + remote;
  }
  static getOpenSocketsList() {
    return ListOfMapOfString$dynamic().from(io._SocketResourceInfo.openSockets[$values][$map](dart.dynamic, dart.fn(e => e.referenceValueMap, _SocketResourceInfoToMapOfString$dynamic())));
  }
  getSocketInfoMap() {
    let result = this.fullValueMap;
    result[$_set]("socketType", dart.dtest(dart.dload(this.socket, 'isTcp')) ? "TCP" : "UDP");
    result[$_set]("listening", dart.dload(this.socket, 'isListening'));
    result[$_set]("host", dart.dload(dart.dload(this.socket, 'address'), 'host'));
    result[$_set]("port", dart.dload(this.socket, 'port'));
    if (!dart.dtest(dart.dload(this.socket, 'isListening'))) {
      try {
        result[$_set]("remoteHost", dart.dload(dart.dload(this.socket, 'remoteAddress'), 'host'));
        result[$_set]("remotePort", dart.dload(this.socket, 'remotePort'));
      } catch (e$) {
        let e = dart.getThrown(e$);
        result[$_set]("remotePort", "NA");
        result[$_set]("remoteHost", "NA");
      }
    } else {
      result[$_set]("remotePort", "NA");
      result[$_set]("remoteHost", "NA");
    }
    result[$_set]("addressType", dart.dload(dart.dload(dart.dload(this.socket, 'address'), 'type'), 'name'));
    return result;
  }
  static getSocketInfoMapByID($function, params) {
    if (!dart.test(params[$containsKey]("id"))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 260, 12, "params.containsKey('id')");
    let id = core.int.parse(params[$_get]("id"));
    let result = dart.test(io._SocketResourceInfo.openSockets[$containsKey](id)) ? io._SocketResourceInfo.openSockets[$_get](id).getSocketInfoMap() : new _js_helper.LinkedMap.new();
    let jsonValue = convert.json.encode(result);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  static getOpenSockets($function, params) {
    if (!dart.equals($function, "ext.dart.io.getOpenSockets")) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 269, 12, "function == 'ext.dart.io.getOpenSockets'");
    let data = new (IdentityMapOfString$Object()).from(["type", "_opensockets", "data", io._SocketResourceInfo.getOpenSocketsList()]);
    let jsonValue = convert.json.encode(data);
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
  }
  static SocketOpened(info) {
    if (!!dart.test(io._SocketResourceInfo.openSockets[$containsKey](info.id))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 276, 12, "!openSockets.containsKey(info.id)");
    io._SocketResourceInfo.openSockets[$_set](info.id, info);
  }
  static SocketClosed(info) {
    if (!dart.test(io._SocketResourceInfo.openSockets[$containsKey](info.id))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart", 281, 12, "openSockets.containsKey(info.id)");
    io._SocketResourceInfo.openSockets[$remove](info.id);
  }
};
(io._SocketResourceInfo.new = function(socket) {
  this.socket = socket;
  io._SocketResourceInfo.__proto__.new.call(this, "_socket");
  io._SocketResourceInfo.SocketOpened(this);
}).prototype = io._SocketResourceInfo.prototype;
;
;
dart.setGetterSignature(io._SocketResourceInfo, () => ({
  __proto__: dart.getGetters(io._SocketResourceInfo.__proto__),
  name: core.String
}));
dart.setLibraryUri(io._SocketResourceInfo, "dart:io");
;
dart.defineLazy(io._SocketResourceInfo, {
  /*io._SocketResourceInfo._tcpString*/get _tcpString() {
    return "TCP";
  },
  /*io._SocketResourceInfo._udpString*/get _udpString() {
    return "UDP";
  },
  /*io._SocketResourceInfo._type*/get _type() {
    return "_socket";
  },
  /*io._SocketResourceInfo.openSockets*/get openSockets() {
    return new (LinkedMapOfint$_SocketResourceInfo()).new();
  },
  set openSockets(_) {}
});
const encoding = dart.privateName(io, "IOSink.encoding");
io.IOSink = class IOSink extends core.Object {
  get encoding() {
    return this[encoding];
  }
  set encoding(value) {
    this[encoding] = value;
  }
  static new(target, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    return new io._IOSinkImpl.new(target, encoding);
  }
};
(io.IOSink[dart.mixinNew] = function() {
  this[encoding] = null;
}).prototype = io.IOSink.prototype;
;
io.IOSink[dart.implements] = () => [async.StreamSink$(core.List$(core.int)), core.StringSink];
dart.setLibraryUri(io.IOSink, "dart:io");
;
const _doneCompleter = dart.privateName(io, "_doneCompleter");
const _controllerInstance = dart.privateName(io, "_controllerInstance");
const _controllerCompleter = dart.privateName(io, "_controllerCompleter");
const _isClosed$ = dart.privateName(io, "_isClosed");
const _isBound = dart.privateName(io, "_isBound");
const _hasError$ = dart.privateName(io, "_hasError");
const _target$0 = dart.privateName(io, "_target");
const _closeTarget = dart.privateName(io, "_closeTarget");
const _completeDoneValue = dart.privateName(io, "_completeDoneValue");
const _completeDoneError = dart.privateName(io, "_completeDoneError");
const _is__StreamSinkImpl_default = Symbol('_is__StreamSinkImpl_default');
io._StreamSinkImpl$ = dart.generic(T => {
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  let StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
  class _StreamSinkImpl extends core.Object {
    add(data) {
      T._check(data);
      if (dart.test(this[_isClosed$])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      this[_controller].add(data);
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      if (dart.test(this[_isClosed$])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      this[_controller].addError(error, stackTrace);
    }
    addStream(stream) {
      let t84;
      StreamOfT()._check(stream);
      if (dart.test(this[_isBound])) {
        dart.throw(new core.StateError.new("StreamSink is already bound to a stream"));
      }
      if (dart.test(this[_hasError$])) return this.done;
      this[_isBound] = true;
      let future = this[_controllerCompleter] == null ? this[_target$0].addStream(stream) : this[_controllerCompleter].future.then(dart.dynamic, dart.fn(_ => this[_target$0].addStream(stream), dynamicToFuture()));
      t84 = this[_controllerInstance];
      t84 == null ? null : t84.close();
      return future.whenComplete(dart.fn(() => {
        this[_isBound] = false;
      }, VoidToNull()));
    }
    flush() {
      if (dart.test(this[_isBound])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (this[_controllerInstance] == null) return async.Future.value(this);
      this[_isBound] = true;
      let future = this[_controllerCompleter].future;
      this[_controllerInstance].close();
      return future.whenComplete(dart.fn(() => {
        this[_isBound] = false;
      }, VoidToNull()));
    }
    close() {
      if (dart.test(this[_isBound])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (!dart.test(this[_isClosed$])) {
        this[_isClosed$] = true;
        if (this[_controllerInstance] != null) {
          this[_controllerInstance].close();
        } else {
          this[_closeTarget]();
        }
      }
      return this.done;
    }
    [_closeTarget]() {
      this[_target$0].close().then(dart.void, dart.bind(this, _completeDoneValue), {onError: dart.bind(this, _completeDoneError)});
    }
    get done() {
      return this[_doneCompleter].future;
    }
    [_completeDoneValue](value) {
      if (!dart.test(this[_doneCompleter].isCompleted)) {
        this[_doneCompleter].complete(value);
      }
    }
    [_completeDoneError](error, stackTrace) {
      if (!dart.test(this[_doneCompleter].isCompleted)) {
        this[_hasError$] = true;
        this[_doneCompleter].completeError(error, stackTrace);
      }
    }
    get [_controller]() {
      if (dart.test(this[_isBound])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (dart.test(this[_isClosed$])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      if (this[_controllerInstance] == null) {
        this[_controllerInstance] = StreamControllerOfT().new({sync: true});
        this[_controllerCompleter] = async.Completer.new();
        this[_target$0].addStream(this[_controller].stream).then(core.Null, dart.fn(_ => {
          if (dart.test(this[_isBound])) {
            this[_controllerCompleter].complete(this);
            this[_controllerCompleter] = null;
            this[_controllerInstance] = null;
          } else {
            this[_closeTarget]();
          }
        }, dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
            if (dart.test(this[_isBound])) {
              this[_controllerCompleter].completeError(error, core.StackTrace._check(stackTrace));
              this[_controllerCompleter] = null;
              this[_controllerInstance] = null;
            } else {
              this[_completeDoneError](error, core.StackTrace._check(stackTrace));
            }
          }, dynamicAnddynamicToNull())});
      }
      return this[_controllerInstance];
    }
  }
  (_StreamSinkImpl.new = function(_target) {
    this[_doneCompleter] = async.Completer.new();
    this[_controllerInstance] = null;
    this[_controllerCompleter] = null;
    this[_isClosed$] = false;
    this[_isBound] = false;
    this[_hasError$] = false;
    this[_target$0] = _target;
    ;
  }).prototype = _StreamSinkImpl.prototype;
  ;
  _StreamSinkImpl.prototype[_is__StreamSinkImpl_default] = true;
  _StreamSinkImpl[dart.implements] = () => [async.StreamSink$(T)];
  ;
  dart.setGetterSignature(_StreamSinkImpl, () => ({
    __proto__: dart.getGetters(_StreamSinkImpl.__proto__),
    done: async.Future,
    [_controller]: async.StreamController$(T)
  }));
  dart.setLibraryUri(_StreamSinkImpl, "dart:io");
  ;
  return _StreamSinkImpl;
});
io._StreamSinkImpl = io._StreamSinkImpl$();
;
const _encodingMutable = dart.privateName(io, "_encodingMutable");
const _encoding$ = dart.privateName(io, "_encoding");
io._IOSinkImpl = class _IOSinkImpl extends io._StreamSinkImpl$(core.List$(core.int)) {
  get encoding() {
    return this[_encoding$];
  }
  set encoding(value) {
    if (!dart.test(this[_encodingMutable])) {
      dart.throw(new core.StateError.new("IOSink encoding is not mutable"));
    }
    this[_encoding$] = value;
  }
  write(obj) {
    let string = dart.str(obj);
    if (string[$isEmpty]) return;
    this.add(this[_encoding$].encode(string));
  }
  writeAll(objects, separator) {
    if (separator === void 0) separator = "";
    let iterator = objects[$iterator];
    if (!dart.test(iterator.moveNext())) return;
    if (separator[$isEmpty]) {
      do {
        this.write(iterator.current);
      } while (dart.test(iterator.moveNext()));
    } else {
      this.write(iterator.current);
      while (dart.test(iterator.moveNext())) {
        this.write(separator);
        this.write(iterator.current);
      }
    }
  }
  writeln(object) {
    if (object === void 0) object = "";
    this.write(object);
    this.write("\n");
  }
  writeCharCode(charCode) {
    this.write(core.String.fromCharCode(charCode));
  }
};
(io._IOSinkImpl.new = function(target, _encoding) {
  this[_encodingMutable] = true;
  this[_encoding$] = _encoding;
  io._IOSinkImpl.__proto__.new.call(this, target);
  ;
}).prototype = io._IOSinkImpl.prototype;
;
io._IOSinkImpl[dart.implements] = () => [io.IOSink];
;
dart.setGetterSignature(io._IOSinkImpl, () => ({
  __proto__: dart.getGetters(io._IOSinkImpl.__proto__),
  encoding: convert.Encoding
}));
dart.setSetterSignature(io._IOSinkImpl, () => ({
  __proto__: dart.getSetters(io._IOSinkImpl.__proto__),
  encoding: convert.Encoding
}));
dart.setLibraryUri(io._IOSinkImpl, "dart:io");
;
io._IOService = class _IOService extends core.Object {
  static _dispatch(request, data) {
    dart.throw(new core.UnsupportedError.new("_IOService._dispatch"));
  }
};
(io._IOService.new = function() {
  ;
}).prototype = io._IOService.prototype;
;
dart.setLibraryUri(io._IOService, "dart:io");
dart.defineLazy(io._IOService, {
  /*io._IOService.fileExists*/get fileExists() {
    return 0;
  },
  /*io._IOService.fileCreate*/get fileCreate() {
    return 1;
  },
  /*io._IOService.fileDelete*/get fileDelete() {
    return 2;
  },
  /*io._IOService.fileRename*/get fileRename() {
    return 3;
  },
  /*io._IOService.fileCopy*/get fileCopy() {
    return 4;
  },
  /*io._IOService.fileOpen*/get fileOpen() {
    return 5;
  },
  /*io._IOService.fileResolveSymbolicLinks*/get fileResolveSymbolicLinks() {
    return 6;
  },
  /*io._IOService.fileClose*/get fileClose() {
    return 7;
  },
  /*io._IOService.filePosition*/get filePosition() {
    return 8;
  },
  /*io._IOService.fileSetPosition*/get fileSetPosition() {
    return 9;
  },
  /*io._IOService.fileTruncate*/get fileTruncate() {
    return 10;
  },
  /*io._IOService.fileLength*/get fileLength() {
    return 11;
  },
  /*io._IOService.fileLengthFromPath*/get fileLengthFromPath() {
    return 12;
  },
  /*io._IOService.fileLastAccessed*/get fileLastAccessed() {
    return 13;
  },
  /*io._IOService.fileSetLastAccessed*/get fileSetLastAccessed() {
    return 14;
  },
  /*io._IOService.fileLastModified*/get fileLastModified() {
    return 15;
  },
  /*io._IOService.fileSetLastModified*/get fileSetLastModified() {
    return 16;
  },
  /*io._IOService.fileFlush*/get fileFlush() {
    return 17;
  },
  /*io._IOService.fileReadByte*/get fileReadByte() {
    return 18;
  },
  /*io._IOService.fileWriteByte*/get fileWriteByte() {
    return 19;
  },
  /*io._IOService.fileRead*/get fileRead() {
    return 20;
  },
  /*io._IOService.fileReadInto*/get fileReadInto() {
    return 21;
  },
  /*io._IOService.fileWriteFrom*/get fileWriteFrom() {
    return 22;
  },
  /*io._IOService.fileCreateLink*/get fileCreateLink() {
    return 23;
  },
  /*io._IOService.fileDeleteLink*/get fileDeleteLink() {
    return 24;
  },
  /*io._IOService.fileRenameLink*/get fileRenameLink() {
    return 25;
  },
  /*io._IOService.fileLinkTarget*/get fileLinkTarget() {
    return 26;
  },
  /*io._IOService.fileType*/get fileType() {
    return 27;
  },
  /*io._IOService.fileIdentical*/get fileIdentical() {
    return 28;
  },
  /*io._IOService.fileStat*/get fileStat() {
    return 29;
  },
  /*io._IOService.fileLock*/get fileLock() {
    return 30;
  },
  /*io._IOService.socketLookup*/get socketLookup() {
    return 31;
  },
  /*io._IOService.socketListInterfaces*/get socketListInterfaces() {
    return 32;
  },
  /*io._IOService.socketReverseLookup*/get socketReverseLookup() {
    return 33;
  },
  /*io._IOService.directoryCreate*/get directoryCreate() {
    return 34;
  },
  /*io._IOService.directoryDelete*/get directoryDelete() {
    return 35;
  },
  /*io._IOService.directoryExists*/get directoryExists() {
    return 36;
  },
  /*io._IOService.directoryCreateTemp*/get directoryCreateTemp() {
    return 37;
  },
  /*io._IOService.directoryListStart*/get directoryListStart() {
    return 38;
  },
  /*io._IOService.directoryListNext*/get directoryListNext() {
    return 39;
  },
  /*io._IOService.directoryListStop*/get directoryListStop() {
    return 40;
  },
  /*io._IOService.directoryRename*/get directoryRename() {
    return 41;
  },
  /*io._IOService.sslProcessFilter*/get sslProcessFilter() {
    return 42;
  }
});
io.Link = class Link extends core.Object {
  static new(path) {
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return new io._Link.new(path);
    }
    return overrides.createLink(path);
  }
  static fromRawPath(rawPath) {
    return new io._Link.fromRawPath(rawPath);
  }
  static fromUri(uri) {
    return io.Link.new(uri.toFilePath());
  }
};
(io.Link[dart.mixinNew] = function() {
}).prototype = io.Link.prototype;
;
io.Link[dart.implements] = () => [io.FileSystemEntity];
dart.setLibraryUri(io.Link, "dart:io");
const _exceptionFromResponse = dart.privateName(io, "_exceptionFromResponse");
const _path$2 = dart.privateName(io, "_Link._path");
const _rawPath$2 = dart.privateName(io, "_Link._rawPath");
io._Link = class _Link extends io.FileSystemEntity {
  get [_path$]() {
    return this[_path$2];
  }
  set [_path$](value) {
    this[_path$2] = value;
  }
  get [_rawPath$]() {
    return this[_rawPath$2];
  }
  set [_rawPath$](value) {
    this[_rawPath$2] = value;
  }
  get path() {
    return this[_path$];
  }
  toString() {
    return "Link: '" + dart.str(this.path) + "'";
  }
  exists() {
    return io.FileSystemEntity._isLinkRaw(this[_rawPath$]);
  }
  existsSync() {
    return io.FileSystemEntity._isLinkRawSync(this[_rawPath$]);
  }
  get absolute() {
    return io.Link.fromRawPath(this[_rawAbsolutePath]);
  }
  create(target, opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    let result = dart.test(recursive) ? this.parent.create({recursive: true}) : FutureOfNull().value(null);
    return result.then(dart.dynamic, dart.fn(_ => io._File._dispatchWithNamespace(23, [null, this[_rawPath$], target]), DirectoryToFuture())).then(io.Link, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionFromResponse](response, "Cannot create link to target '" + dart.str(target) + "'", this.path));
      }
      return this;
    }, dynamicTo_Link()));
  }
  createSync(target, opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (dart.test(recursive)) {
      this.parent.createSync({recursive: true});
    }
    let result = io._File._createLink(io._Namespace._namespace, this[_rawPath$], target);
    io._Link.throwIfError(result, "Cannot create link", this.path);
  }
  updateSync(target) {
    this.deleteSync();
    this.createSync(target);
  }
  update(target) {
    return this.delete().then(io.Link, dart.fn(_ => this.create(target), FileSystemEntityToFutureOfLink()));
  }
  [_delete](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (dart.test(recursive)) {
      return io.Directory.fromRawPath(this[_rawPath$]).delete({recursive: true}).then(io.Link, dart.fn(_ => this, FileSystemEntityTo_Link()));
    }
    return io._File._dispatchWithNamespace(24, [null, this[_rawPath$]]).then(io.Link, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionFromResponse](response, "Cannot delete link", this.path));
      }
      return this;
    }, dynamicTo_Link()));
  }
  [_deleteSync](opts) {
    let recursive = opts && 'recursive' in opts ? opts.recursive : false;
    if (dart.test(recursive)) {
      return io.Directory.fromRawPath(this[_rawPath$]).deleteSync({recursive: true});
    }
    let result = io._File._deleteLinkNative(io._Namespace._namespace, this[_rawPath$]);
    io._Link.throwIfError(result, "Cannot delete link", this.path);
  }
  rename(newPath) {
    return io._File._dispatchWithNamespace(25, [null, this[_rawPath$], newPath]).then(io.Link, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionFromResponse](response, "Cannot rename link to '" + dart.str(newPath) + "'", this.path));
      }
      return io.Link.new(newPath);
    }, dynamicToLink()));
  }
  renameSync(newPath) {
    let result = io._File._renameLink(io._Namespace._namespace, this[_rawPath$], newPath);
    io._Link.throwIfError(result, "Cannot rename link '" + dart.str(this.path) + "' to '" + dart.str(newPath) + "'");
    return io.Link.new(newPath);
  }
  target() {
    return io._File._dispatchWithNamespace(26, [null, this[_rawPath$]]).then(core.String, dart.fn(response => {
      if (dart.test(this[_isErrorResponse](response))) {
        dart.throw(this[_exceptionFromResponse](response, "Cannot get target of link", this.path));
      }
      return FutureOrOfString()._check(response);
    }, dynamicToFutureOrOfString()));
  }
  targetSync() {
    let result = io._File._linkTarget(io._Namespace._namespace, this[_rawPath$]);
    io._Link.throwIfError(result, "Cannot read link", this.path);
    return core.String._check(result);
  }
  static throwIfError(result, msg, path) {
    if (path === void 0) path = "";
    if (io.OSError.is(result)) {
      dart.throw(new io.FileSystemException.new(msg, path, result));
    }
  }
  [_isErrorResponse](response) {
    return core.List.is(response) && !dart.equals(response[$_get](0), 0);
  }
  [_exceptionFromResponse](response, message, path) {
    if (!dart.test(this[_isErrorResponse](response))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/link.dart", 290, 12, "_isErrorResponse(response)");
    switch (dart.dsend(response, '_get', [0])) {
      case 1:
      {
        return new core.ArgumentError.new();
      }
      case 2:
      {
        let err = new io.OSError.new(core.String._check(dart.dsend(response, '_get', [2])), core.int._check(dart.dsend(response, '_get', [1])));
        return new io.FileSystemException.new(message, path, err);
      }
      default:
      {
        return core.Exception.new("Unknown error");
      }
    }
  }
};
(io._Link.new = function(path) {
  this[_path$2] = null;
  this[_rawPath$2] = null;
  io._Link.__proto__.new.call(this);
  core.ArgumentError.checkNotNull(path, "path");
  this[_path$] = path;
  this[_rawPath$] = io.FileSystemEntity._toUtf8Array(path);
}).prototype = io._Link.prototype;
(io._Link.fromRawPath = function(rawPath) {
  this[_path$2] = null;
  this[_rawPath$2] = null;
  io._Link.__proto__.new.call(this);
  this[_rawPath$] = io.FileSystemEntity._toNullTerminatedUtf8Array(rawPath);
  this[_path$] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
}).prototype = io._Link.prototype;
;
io._Link[dart.implements] = () => [io.Link];
;
dart.setGetterSignature(io._Link, () => ({
  __proto__: dart.getGetters(io._Link.__proto__),
  path: core.String,
  absolute: io.Link
}));
dart.setLibraryUri(io._Link, "dart:io");
;
dart.defineExtensionMethods(io._Link, ['toString']);
io._Namespace = class _Namespace extends core.Object {
  static get _namespace() {
    dart.throw(new core.UnsupportedError.new("_Namespace"));
  }
  static get _namespacePointer() {
    dart.throw(new core.UnsupportedError.new("_Namespace"));
  }
  static _setupNamespace(namespace) {
    dart.throw(new core.UnsupportedError.new("_Namespace"));
  }
};
(io._Namespace.new = function() {
  ;
}).prototype = io._Namespace.prototype;
;
dart.setLibraryUri(io._Namespace, "dart:io");
let C190;
io._NetworkProfiling = class _NetworkProfiling extends core.Object {
  static _registerServiceExtension() {
    developer.registerExtension("ext.dart.io.getHttpProfile", C190 || CT.C190);
    developer.registerExtension("ext.dart.io.getSocketProfile", C190 || CT.C190);
  }
  static _serviceExtensionHandler(method, parameters) {
    let responseJson = null;
    switch (method) {
      case "ext.dart.io.getHttpProfile":
      {
        responseJson = io._HttpProfile.toJSON();
        break;
      }
      case "ext.dart.io.getSocketProfile":
      {
        responseJson = io._SocketProfile.toJSON();
        break;
      }
      default:
      {
        return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.error(-32000, "Method " + dart.str(method) + " does not exist"));
      }
    }
    return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(responseJson));
  }
};
(io._NetworkProfiling.new = function() {
  ;
}).prototype = io._NetworkProfiling.prototype;
;
dart.setLibraryUri(io._NetworkProfiling, "dart:io");
dart.defineLazy(io._NetworkProfiling, {
  /*io._NetworkProfiling._kGetHttpProfileRPC*/get _kGetHttpProfileRPC() {
    return "ext.dart.io.getHttpProfile";
  },
  /*io._NetworkProfiling._kGetSocketProfileRPC*/get _kGetSocketProfileRPC() {
    return "ext.dart.io.getSocketProfile";
  }
});
io._HttpProfile = class _HttpProfile extends core.Object {
  static toJSON() {
    let response = new (IdentityMapOfString$dynamic()).from(["type", "HttpProfile"]);
    return convert.json.encode(response);
  }
};
(io._HttpProfile.new = function() {
  ;
}).prototype = io._HttpProfile.prototype;
;
dart.setLibraryUri(io._HttpProfile, "dart:io");
dart.defineLazy(io._HttpProfile, {
  /*io._HttpProfile._kType*/get _kType() {
    return "HttpProfile";
  }
});
io._SocketProfile = class _SocketProfile extends core.Object {
  static toJSON() {
    let response = new (IdentityMapOfString$dynamic()).from(["type", "SocketProfile"]);
    return convert.json.encode(response);
  }
};
(io._SocketProfile.new = function() {
  ;
}).prototype = io._SocketProfile.prototype;
;
dart.setLibraryUri(io._SocketProfile, "dart:io");
dart.defineLazy(io._SocketProfile, {
  /*io._SocketProfile._kType*/get _kType() {
    return "SocketProfile";
  }
});
io.IOOverrides = class IOOverrides extends core.Object {
  static get current() {
    let t84;
    return io.IOOverrides._check((t84 = async.Zone.current._get(io._ioOverridesToken), t84 == null ? io.IOOverrides._global : t84));
  }
  static set global(overrides) {
    io.IOOverrides._global = overrides;
  }
  static runZoned(R, body, opts) {
    let createDirectory = opts && 'createDirectory' in opts ? opts.createDirectory : null;
    let getCurrentDirectory = opts && 'getCurrentDirectory' in opts ? opts.getCurrentDirectory : null;
    let setCurrentDirectory = opts && 'setCurrentDirectory' in opts ? opts.setCurrentDirectory : null;
    let getSystemTempDirectory = opts && 'getSystemTempDirectory' in opts ? opts.getSystemTempDirectory : null;
    let createFile = opts && 'createFile' in opts ? opts.createFile : null;
    let stat = opts && 'stat' in opts ? opts.stat : null;
    let statSync = opts && 'statSync' in opts ? opts.statSync : null;
    let fseIdentical = opts && 'fseIdentical' in opts ? opts.fseIdentical : null;
    let fseIdenticalSync = opts && 'fseIdenticalSync' in opts ? opts.fseIdenticalSync : null;
    let fseGetType = opts && 'fseGetType' in opts ? opts.fseGetType : null;
    let fseGetTypeSync = opts && 'fseGetTypeSync' in opts ? opts.fseGetTypeSync : null;
    let fsWatch = opts && 'fsWatch' in opts ? opts.fsWatch : null;
    let fsWatchIsSupported = opts && 'fsWatchIsSupported' in opts ? opts.fsWatchIsSupported : null;
    let createLink = opts && 'createLink' in opts ? opts.createLink : null;
    let socketConnect = opts && 'socketConnect' in opts ? opts.socketConnect : null;
    let socketStartConnect = opts && 'socketStartConnect' in opts ? opts.socketStartConnect : null;
    let serverSocketBind = opts && 'serverSocketBind' in opts ? opts.serverSocketBind : null;
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let overrides = new io._IOOverridesScope.new(createDirectory, getCurrentDirectory, setCurrentDirectory, getSystemTempDirectory, createFile, stat, statSync, fseIdentical, fseIdenticalSync, fseGetType, fseGetTypeSync, fsWatch, fsWatchIsSupported, createLink, socketConnect, socketStartConnect, serverSocketBind);
    return io._asyncRunZoned(R, body, {zoneValues: new _js_helper.LinkedMap.from([io._ioOverridesToken, overrides]), zoneSpecification: zoneSpecification, onError: onError});
  }
  static runWithIOOverrides(R, body, overrides, opts) {
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return io._asyncRunZoned(R, body, {zoneValues: new _js_helper.LinkedMap.from([io._ioOverridesToken, overrides]), zoneSpecification: zoneSpecification, onError: onError});
  }
  createDirectory(path) {
    return new io._Directory.new(path);
  }
  getCurrentDirectory() {
    return io._Directory.current;
  }
  setCurrentDirectory(path) {
    io._Directory.current = path;
  }
  getSystemTempDirectory() {
    return io._Directory.systemTemp;
  }
  createFile(path) {
    return new io._File.new(path);
  }
  stat(path) {
    return io.FileStat._stat(path);
  }
  statSync(path) {
    return io.FileStat._statSyncInternal(path);
  }
  fseIdentical(path1, path2) {
    return io.FileSystemEntity._identical(path1, path2);
  }
  fseIdenticalSync(path1, path2) {
    return io.FileSystemEntity._identicalSync(path1, path2);
  }
  fseGetType(path, followLinks) {
    return io.FileSystemEntity._getTypeRequest(typed_data.Uint8List._check(convert.utf8.encode(path)), followLinks);
  }
  fseGetTypeSync(path, followLinks) {
    return io.FileSystemEntity._getTypeSyncHelper(typed_data.Uint8List._check(convert.utf8.encode(path)), followLinks);
  }
  fsWatch(path, events, recursive) {
    return io._FileSystemWatcher._watch(path, events, recursive);
  }
  fsWatchIsSupported() {
    return io._FileSystemWatcher.isSupported;
  }
  createLink(path) {
    return new io._Link.new(path);
  }
  socketConnect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    return io.Socket._connect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
  }
  socketStartConnect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    return io.Socket._startConnect(host, port, {sourceAddress: sourceAddress});
  }
  serverSocketBind(address, port, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    return io.ServerSocket._bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
  }
};
(io.IOOverrides.new = function() {
  ;
}).prototype = io.IOOverrides.prototype;
;
;
dart.setLibraryUri(io.IOOverrides, "dart:io");
dart.defineLazy(io.IOOverrides, {
  /*io.IOOverrides._global*/get _global() {
    return null;
  },
  set _global(_) {}
});
const _previous$4 = dart.privateName(io, "_previous");
const _createDirectory$ = dart.privateName(io, "_createDirectory");
const _getCurrentDirectory$ = dart.privateName(io, "_getCurrentDirectory");
const _setCurrentDirectory$ = dart.privateName(io, "_setCurrentDirectory");
const _getSystemTempDirectory$ = dart.privateName(io, "_getSystemTempDirectory");
const _createFile$ = dart.privateName(io, "_createFile");
const _stat$ = dart.privateName(io, "_stat");
const _statSync$ = dart.privateName(io, "_statSync");
const _fseIdentical$ = dart.privateName(io, "_fseIdentical");
const _fseIdenticalSync$ = dart.privateName(io, "_fseIdenticalSync");
const _fseGetType$ = dart.privateName(io, "_fseGetType");
const _fseGetTypeSync$ = dart.privateName(io, "_fseGetTypeSync");
const _fsWatch$ = dart.privateName(io, "_fsWatch");
const _fsWatchIsSupported$ = dart.privateName(io, "_fsWatchIsSupported");
const _createLink$ = dart.privateName(io, "_createLink");
const _socketConnect$ = dart.privateName(io, "_socketConnect");
const _socketStartConnect$ = dart.privateName(io, "_socketStartConnect");
const _serverSocketBind$ = dart.privateName(io, "_serverSocketBind");
io._IOOverridesScope = class _IOOverridesScope extends io.IOOverrides {
  createDirectory(path) {
    if (this[_createDirectory$] != null) return this[_createDirectory$](path);
    if (this[_previous$4] != null) return this[_previous$4].createDirectory(path);
    return super.createDirectory(path);
  }
  getCurrentDirectory() {
    if (this[_getCurrentDirectory$] != null) return this[_getCurrentDirectory$]();
    if (this[_previous$4] != null) return this[_previous$4].getCurrentDirectory();
    return super.getCurrentDirectory();
  }
  setCurrentDirectory(path) {
    if (this[_setCurrentDirectory$] != null)
      this[_setCurrentDirectory$](path);
    else if (this[_previous$4] != null)
      this[_previous$4].setCurrentDirectory(path);
    else
      super.setCurrentDirectory(path);
  }
  getSystemTempDirectory() {
    if (this[_getSystemTempDirectory$] != null) return this[_getSystemTempDirectory$]();
    if (this[_previous$4] != null) return this[_previous$4].getSystemTempDirectory();
    return super.getSystemTempDirectory();
  }
  createFile(path) {
    if (this[_createFile$] != null) return this[_createFile$](path);
    if (this[_previous$4] != null) return this[_previous$4].createFile(path);
    return super.createFile(path);
  }
  stat(path) {
    if (this[_stat$] != null) return this[_stat$](path);
    if (this[_previous$4] != null) return this[_previous$4].stat(path);
    return super.stat(path);
  }
  statSync(path) {
    if (this[_stat$] != null) return this[_statSync$](path);
    if (this[_previous$4] != null) return this[_previous$4].statSync(path);
    return super.statSync(path);
  }
  fseIdentical(path1, path2) {
    if (this[_fseIdentical$] != null) return this[_fseIdentical$](path1, path2);
    if (this[_previous$4] != null) return this[_previous$4].fseIdentical(path1, path2);
    return super.fseIdentical(path1, path2);
  }
  fseIdenticalSync(path1, path2) {
    if (this[_fseIdenticalSync$] != null) return this[_fseIdenticalSync$](path1, path2);
    if (this[_previous$4] != null) return this[_previous$4].fseIdenticalSync(path1, path2);
    return super.fseIdenticalSync(path1, path2);
  }
  fseGetType(path, followLinks) {
    if (this[_fseGetType$] != null) return this[_fseGetType$](path, followLinks);
    if (this[_previous$4] != null) return this[_previous$4].fseGetType(path, followLinks);
    return super.fseGetType(path, followLinks);
  }
  fseGetTypeSync(path, followLinks) {
    if (this[_fseGetTypeSync$] != null) return this[_fseGetTypeSync$](path, followLinks);
    if (this[_previous$4] != null) return this[_previous$4].fseGetTypeSync(path, followLinks);
    return super.fseGetTypeSync(path, followLinks);
  }
  fsWatch(path, events, recursive) {
    if (this[_fsWatch$] != null) return this[_fsWatch$](path, events, recursive);
    if (this[_previous$4] != null) return this[_previous$4].fsWatch(path, events, recursive);
    return super.fsWatch(path, events, recursive);
  }
  fsWatchIsSupported() {
    if (this[_fsWatchIsSupported$] != null) return this[_fsWatchIsSupported$]();
    if (this[_previous$4] != null) return this[_previous$4].fsWatchIsSupported();
    return super.fsWatchIsSupported();
  }
  createLink(path) {
    if (this[_createLink$] != null) return this[_createLink$](path);
    if (this[_previous$4] != null) return this[_previous$4].createLink(path);
    return super.createLink(path);
  }
  socketConnect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    if (this[_socketConnect$] != null) {
      return this[_socketConnect$](host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    if (this[_previous$4] != null) {
      return this[_previous$4].socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    return super.socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
  }
  socketStartConnect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    if (this[_socketStartConnect$] != null) {
      return this[_socketStartConnect$](host, port, {sourceAddress: sourceAddress});
    }
    if (this[_previous$4] != null) {
      return this[_previous$4].socketStartConnect(host, port, {sourceAddress: sourceAddress});
    }
    return super.socketStartConnect(host, port, {sourceAddress: sourceAddress});
  }
  serverSocketBind(address, port, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (this[_serverSocketBind$] != null) {
      return this[_serverSocketBind$](address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
    if (this[_previous$4] != null) {
      return this[_previous$4].serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
    return super.serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
  }
};
(io._IOOverridesScope.new = function(_createDirectory, _getCurrentDirectory, _setCurrentDirectory, _getSystemTempDirectory, _createFile, _stat, _statSync, _fseIdentical, _fseIdenticalSync, _fseGetType, _fseGetTypeSync, _fsWatch, _fsWatchIsSupported, _createLink, _socketConnect, _socketStartConnect, _serverSocketBind) {
  this[_previous$4] = io.IOOverrides.current;
  this[_createDirectory$] = _createDirectory;
  this[_getCurrentDirectory$] = _getCurrentDirectory;
  this[_setCurrentDirectory$] = _setCurrentDirectory;
  this[_getSystemTempDirectory$] = _getSystemTempDirectory;
  this[_createFile$] = _createFile;
  this[_stat$] = _stat;
  this[_statSync$] = _statSync;
  this[_fseIdentical$] = _fseIdentical;
  this[_fseIdenticalSync$] = _fseIdenticalSync;
  this[_fseGetType$] = _fseGetType;
  this[_fseGetTypeSync$] = _fseGetTypeSync;
  this[_fsWatch$] = _fsWatch;
  this[_fsWatchIsSupported$] = _fsWatchIsSupported;
  this[_createLink$] = _createLink;
  this[_socketConnect$] = _socketConnect;
  this[_socketStartConnect$] = _socketStartConnect;
  this[_serverSocketBind$] = _serverSocketBind;
  ;
}).prototype = io._IOOverridesScope.prototype;
;
dart.setLibraryUri(io._IOOverridesScope, "dart:io");
;
io.Platform = class Platform extends core.Object {
  static get numberOfProcessors() {
    return io.Platform._numberOfProcessors;
  }
  static get pathSeparator() {
    return io.Platform._pathSeparator;
  }
  static get localeName() {
    return io._Platform.localeName();
  }
  static get operatingSystem() {
    return io.Platform._operatingSystem;
  }
  static get operatingSystemVersion() {
    return io.Platform._operatingSystemVersion;
  }
  static get localHostname() {
    return io.Platform._localHostname;
  }
  static get environment() {
    return io._Platform.environment;
  }
  static get executable() {
    return io._Platform.executable;
  }
  static get resolvedExecutable() {
    return io._Platform.resolvedExecutable;
  }
  static get script() {
    return io._Platform.script;
  }
  static get executableArguments() {
    return io._Platform.executableArguments;
  }
  static get packageRoot() {
    return null;
  }
  static get packageConfig() {
    return io._Platform.packageConfig;
  }
  static get version() {
    return io.Platform._version;
  }
};
(io.Platform.new = function() {
  ;
}).prototype = io.Platform.prototype;
;
dart.setLibraryUri(io.Platform, "dart:io");
dart.defineLazy(io.Platform, {
  /*io.Platform._numberOfProcessors*/get _numberOfProcessors() {
    return io._Platform.numberOfProcessors;
  },
  /*io.Platform._pathSeparator*/get _pathSeparator() {
    return io._Platform.pathSeparator;
  },
  /*io.Platform._operatingSystem*/get _operatingSystem() {
    return io._Platform.operatingSystem;
  },
  /*io.Platform._operatingSystemVersion*/get _operatingSystemVersion() {
    return io._Platform.operatingSystemVersion;
  },
  /*io.Platform._localHostname*/get _localHostname() {
    return io._Platform.localHostname;
  },
  /*io.Platform._version*/get _version() {
    return io._Platform.version;
  },
  /*io.Platform.isLinux*/get isLinux() {
    return io.Platform._operatingSystem === "linux";
  },
  /*io.Platform.isMacOS*/get isMacOS() {
    return io.Platform._operatingSystem === "macos";
  },
  /*io.Platform.isWindows*/get isWindows() {
    return io.Platform._operatingSystem === "windows";
  },
  /*io.Platform.isAndroid*/get isAndroid() {
    return io.Platform._operatingSystem === "android";
  },
  /*io.Platform.isIOS*/get isIOS() {
    return io.Platform._operatingSystem === "ios";
  },
  /*io.Platform.isFuchsia*/get isFuchsia() {
    return io.Platform._operatingSystem === "fuchsia";
  }
});
io._Platform = class _Platform extends core.Object {
  static _numberOfProcessors() {
    dart.throw(new core.UnsupportedError.new("Platform._numberOfProcessors"));
  }
  static _pathSeparator() {
    dart.throw(new core.UnsupportedError.new("Platform._pathSeparator"));
  }
  static _operatingSystem() {
    dart.throw(new core.UnsupportedError.new("Platform._operatingSystem"));
  }
  static _operatingSystemVersion() {
    dart.throw(new core.UnsupportedError.new("Platform._operatingSystemVersion"));
  }
  static _localHostname() {
    dart.throw(new core.UnsupportedError.new("Platform._localHostname"));
  }
  static _executable() {
    dart.throw(new core.UnsupportedError.new("Platform._executable"));
  }
  static _resolvedExecutable() {
    dart.throw(new core.UnsupportedError.new("Platform._resolvedExecutable"));
  }
  static _environment() {
    dart.throw(new core.UnsupportedError.new("Platform._environment"));
  }
  static _executableArguments() {
    dart.throw(new core.UnsupportedError.new("Platform._executableArguments"));
  }
  static _packageRoot() {
    dart.throw(new core.UnsupportedError.new("Platform._packageRoot"));
  }
  static _packageConfig() {
    dart.throw(new core.UnsupportedError.new("Platform._packageConfig"));
  }
  static _version() {
    dart.throw(new core.UnsupportedError.new("Platform._version"));
  }
  static _localeName() {
    dart.throw(new core.UnsupportedError.new("Platform._localeName"));
  }
  static _script() {
    dart.throw(new core.UnsupportedError.new("Platform._script"));
  }
  static localeName() {
    let result = io._Platform._localeClosure == null ? io._Platform._localeName() : io._Platform._localeClosure();
    if (io.OSError.is(result)) {
      dart.throw(result);
    }
    return result;
  }
  static get numberOfProcessors() {
    return io._Platform._numberOfProcessors();
  }
  static get pathSeparator() {
    return io._Platform._pathSeparator();
  }
  static get operatingSystem() {
    return io._Platform._operatingSystem();
  }
  static get script() {
    return io._Platform._script();
  }
  static get operatingSystemVersion() {
    if (io._Platform._cachedOSVersion == null) {
      let result = io._Platform._operatingSystemVersion();
      if (io.OSError.is(result)) {
        dart.throw(result);
      }
      io._Platform._cachedOSVersion = core.String._check(result);
    }
    return io._Platform._cachedOSVersion;
  }
  static get localHostname() {
    let result = io._Platform._localHostname();
    if (io.OSError.is(result)) {
      dart.throw(result);
    }
    return core.String._check(result);
  }
  static get executableArguments() {
    return io._Platform._executableArguments();
  }
  static get environment() {
    if (io._Platform._environmentCache == null) {
      let env = io._Platform._environment();
      if (!io.OSError.is(env)) {
        let isWindows = io._Platform.operatingSystem === "windows";
        let result = isWindows ? new (_CaseInsensitiveStringMapOfString()).new() : new (LinkedMapOfString$String()).new();
        for (let str of core.Iterable._check(env)) {
          if (str == null) {
            continue;
          }
          let equalsIndex = dart.dsend(str, 'indexOf', ["="]);
          if (dart.dtest(dart.dsend(equalsIndex, '>', [0]))) {
            result[$_set](core.String._check(dart.dsend(str, 'substring', [0, equalsIndex])), core.String._check(dart.dsend(str, 'substring', [dart.dsend(equalsIndex, '+', [1])])));
          }
        }
        io._Platform._environmentCache = new (UnmodifiableMapViewOfString$String()).new(result);
      } else {
        io._Platform._environmentCache = env;
      }
    }
    if (io.OSError.is(io._Platform._environmentCache)) {
      dart.throw(io._Platform._environmentCache);
    } else {
      return MapOfString$String()._check(io._Platform._environmentCache);
    }
  }
  static get version() {
    return io._Platform._version();
  }
};
(io._Platform.new = function() {
  ;
}).prototype = io._Platform.prototype;
;
dart.setLibraryUri(io._Platform, "dart:io");
dart.defineLazy(io._Platform, {
  /*io._Platform.executable*/get executable() {
    return core.String._check(io._Platform._executable());
  },
  set executable(_) {},
  /*io._Platform.resolvedExecutable*/get resolvedExecutable() {
    return core.String._check(io._Platform._resolvedExecutable());
  },
  set resolvedExecutable(_) {},
  /*io._Platform.packageRoot*/get packageRoot() {
    return null;
  },
  set packageRoot(_) {},
  /*io._Platform.packageConfig*/get packageConfig() {
    return io._Platform._packageConfig();
  },
  set packageConfig(_) {},
  /*io._Platform._localeClosure*/get _localeClosure() {
    return null;
  },
  set _localeClosure(_) {},
  /*io._Platform._environmentCache*/get _environmentCache() {
    return null;
  },
  set _environmentCache(_) {},
  /*io._Platform._cachedOSVersion*/get _cachedOSVersion() {
    return null;
  },
  set _cachedOSVersion(_) {}
});
const _map$10 = dart.privateName(io, "_map");
const _is__CaseInsensitiveStringMap_default = Symbol('_is__CaseInsensitiveStringMap_default');
io._CaseInsensitiveStringMap$ = dart.generic(V => {
  let LinkedMapOfString$V = () => (LinkedMapOfString$V = dart.constFn(_js_helper.LinkedMap$(core.String, V)))();
  let VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
  let MapOfString$V = () => (MapOfString$V = dart.constFn(core.Map$(core.String, V)))();
  let StringAndVToV = () => (StringAndVToV = dart.constFn(dart.fnType(V, [core.String, V])))();
  let VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
  class _CaseInsensitiveStringMap extends collection.MapBase$(core.String, V) {
    containsKey(key) {
      return typeof key == 'string' && dart.test(this[_map$10][$containsKey](key[$toUpperCase]()));
    }
    containsValue(value) {
      return this[_map$10][$containsValue](value);
    }
    _get(key) {
      return typeof key == 'string' ? this[_map$10][$_get](key[$toUpperCase]()) : null;
    }
    _set(key, value$) {
      let value = value$;
      core.String._check(key);
      V._check(value);
      this[_map$10][$_set](key[$toUpperCase](), value);
      return value$;
    }
    putIfAbsent(key, ifAbsent) {
      core.String._check(key);
      VoidToV()._check(ifAbsent);
      return this[_map$10][$putIfAbsent](key[$toUpperCase](), ifAbsent);
    }
    addAll(other) {
      MapOfString$V()._check(other);
      other[$forEach](dart.fn((key, value) => {
        let t85, t84;
        t84 = key[$toUpperCase]();
        t85 = value;
        this._set(t84, t85);
        return t85;
      }, StringAndVToV()));
    }
    remove(key) {
      return typeof key == 'string' ? this[_map$10][$remove](key[$toUpperCase]()) : null;
    }
    clear() {
      this[_map$10][$clear]();
    }
    forEach(f) {
      this[_map$10][$forEach](f);
    }
    get keys() {
      return this[_map$10][$keys];
    }
    get values() {
      return this[_map$10][$values];
    }
    get length() {
      return this[_map$10][$length];
    }
    get isEmpty() {
      return this[_map$10][$isEmpty];
    }
    get isNotEmpty() {
      return this[_map$10][$isNotEmpty];
    }
    get entries() {
      return this[_map$10][$entries];
    }
    map(K2, V2, transform) {
      return this[_map$10][$map](K2, V2, transform);
    }
    update(key, update, opts) {
      core.String._check(key);
      VToV()._check(update);
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      VoidToV()._check(ifAbsent);
      return this[_map$10][$update](key[$toUpperCase](), update, {ifAbsent: ifAbsent});
    }
    updateAll(update) {
      StringAndVToV()._check(update);
      this[_map$10][$updateAll](update);
    }
    removeWhere(test) {
      this[_map$10][$removeWhere](test);
    }
    toString() {
      return dart.toString(this[_map$10]);
    }
  }
  (_CaseInsensitiveStringMap.new = function() {
    this[_map$10] = new (LinkedMapOfString$V()).new();
    ;
  }).prototype = _CaseInsensitiveStringMap.prototype;
  ;
  _CaseInsensitiveStringMap.prototype[_is__CaseInsensitiveStringMap_default] = true;
  ;
  dart.setGetterSignature(_CaseInsensitiveStringMap, () => ({
    __proto__: dart.getGetters(_CaseInsensitiveStringMap.__proto__),
    keys: core.Iterable$(core.String),
    [$keys]: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(_CaseInsensitiveStringMap, "dart:io");
  ;
  dart.defineExtensionMethods(_CaseInsensitiveStringMap, [
    'containsKey',
    'containsValue',
    '_get',
    '_set',
    'putIfAbsent',
    'addAll',
    'remove',
    'clear',
    'forEach',
    'map',
    'update',
    'updateAll',
    'removeWhere',
    'toString'
  ]);
  dart.defineExtensionAccessors(_CaseInsensitiveStringMap, [
    'keys',
    'values',
    'length',
    'isEmpty',
    'isNotEmpty',
    'entries'
  ]);
  return _CaseInsensitiveStringMap;
});
io._CaseInsensitiveStringMap = io._CaseInsensitiveStringMap$();
;
io._ProcessUtils = class _ProcessUtils extends core.Object {
  static _exit(status) {
    dart.throw(new core.UnsupportedError.new("ProcessUtils._exit"));
  }
  static _setExitCode(status) {
    dart.throw(new core.UnsupportedError.new("ProcessUtils._setExitCode"));
  }
  static _getExitCode() {
    dart.throw(new core.UnsupportedError.new("ProcessUtils._getExitCode"));
  }
  static _sleep(millis) {
    dart.throw(new core.UnsupportedError.new("ProcessUtils._sleep"));
  }
  static _pid(process) {
    dart.throw(new core.UnsupportedError.new("ProcessUtils._pid"));
  }
  static _watchSignal(signal) {
    dart.throw(new core.UnsupportedError.new("ProcessUtils._watchSignal"));
  }
};
(io._ProcessUtils.new = function() {
  ;
}).prototype = io._ProcessUtils.prototype;
;
dart.setLibraryUri(io._ProcessUtils, "dart:io");
io.ProcessInfo = class ProcessInfo extends core.Object {
  static get currentRss() {
    dart.throw(new core.UnsupportedError.new("ProcessInfo.currentRss"));
  }
  static get maxRss() {
    dart.throw(new core.UnsupportedError.new("ProcessInfo.maxRss"));
  }
};
(io.ProcessInfo.new = function() {
  ;
}).prototype = io.ProcessInfo.prototype;
;
dart.setLibraryUri(io.ProcessInfo, "dart:io");
const ProcessStartMode__mode = dart.privateName(io, "ProcessStartMode._mode");
let C192;
let C193;
let C194;
let C195;
let C191;
let C196;
io.ProcessStartMode = class ProcessStartMode extends core.Object {
  get [_mode]() {
    return this[_mode$0];
  }
  set [_mode](value) {
    super[_mode] = value;
  }
  static get values() {
    return C191 || CT.C191;
  }
  toString() {
    return (C196 || CT.C196)[$_get](this[_mode]);
  }
};
(io.ProcessStartMode._internal = function(_mode) {
  this[_mode$0] = _mode;
  ;
}).prototype = io.ProcessStartMode.prototype;
;
const _mode$0 = ProcessStartMode__mode;
dart.setLibraryUri(io.ProcessStartMode, "dart:io");
;
dart.defineExtensionMethods(io.ProcessStartMode, ['toString']);
dart.defineLazy(io.ProcessStartMode, {
  /*io.ProcessStartMode.normal*/get normal() {
    return C192 || CT.C192;
  },
  /*io.ProcessStartMode.NORMAL*/get NORMAL() {
    return C192 || CT.C192;
  },
  /*io.ProcessStartMode.inheritStdio*/get inheritStdio() {
    return C193 || CT.C193;
  },
  /*io.ProcessStartMode.INHERIT_STDIO*/get INHERIT_STDIO() {
    return C193 || CT.C193;
  },
  /*io.ProcessStartMode.detached*/get detached() {
    return C194 || CT.C194;
  },
  /*io.ProcessStartMode.DETACHED*/get DETACHED() {
    return C194 || CT.C194;
  },
  /*io.ProcessStartMode.detachedWithStdio*/get detachedWithStdio() {
    return C195 || CT.C195;
  },
  /*io.ProcessStartMode.DETACHED_WITH_STDIO*/get DETACHED_WITH_STDIO() {
    return C195 || CT.C195;
  }
});
let C197;
const ProcessSignal__name = dart.privateName(io, "ProcessSignal._name");
const ProcessSignal__signalNumber = dart.privateName(io, "ProcessSignal._signalNumber");
let C198;
io.Process = class Process extends core.Object {
  static start(executable, $arguments, opts) {
    let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
    let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
    let mode = opts && 'mode' in opts ? opts.mode : C192 || CT.C192;
    dart.throw(new core.UnsupportedError.new("Process.start"));
  }
  static run(executable, $arguments, opts) {
    let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
    let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
    let stdoutEncoding = opts && 'stdoutEncoding' in opts ? opts.stdoutEncoding : C197 || CT.C197;
    let stderrEncoding = opts && 'stderrEncoding' in opts ? opts.stderrEncoding : C197 || CT.C197;
    dart.throw(new core.UnsupportedError.new("Process.run"));
  }
  static runSync(executable, $arguments, opts) {
    let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
    let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
    let stdoutEncoding = opts && 'stdoutEncoding' in opts ? opts.stdoutEncoding : C197 || CT.C197;
    let stderrEncoding = opts && 'stderrEncoding' in opts ? opts.stderrEncoding : C197 || CT.C197;
    dart.throw(new core.UnsupportedError.new("Process.runSync"));
  }
  static killPid(pid, signal) {
    if (signal === void 0) signal = C198 || CT.C198;
    dart.throw(new core.UnsupportedError.new("Process.killPid"));
  }
};
(io.Process.new = function() {
  ;
}).prototype = io.Process.prototype;
;
dart.setLibraryUri(io.Process, "dart:io");
const exitCode$ = dart.privateName(io, "ProcessResult.exitCode");
const stdout$ = dart.privateName(io, "ProcessResult.stdout");
const stderr$ = dart.privateName(io, "ProcessResult.stderr");
const pid$ = dart.privateName(io, "ProcessResult.pid");
io.ProcessResult = class ProcessResult extends core.Object {
  get exitCode() {
    return this[exitCode$];
  }
  set exitCode(value) {
    super.exitCode = value;
  }
  get stdout() {
    return this[stdout$];
  }
  set stdout(value) {
    super.stdout = value;
  }
  get stderr() {
    return this[stderr$];
  }
  set stderr(value) {
    super.stderr = value;
  }
  get pid() {
    return this[pid$];
  }
  set pid(value) {
    super.pid = value;
  }
};
(io.ProcessResult.new = function(pid, exitCode, stdout, stderr) {
  this[pid$] = pid;
  this[exitCode$] = exitCode;
  this[stdout$] = stdout;
  this[stderr$] = stderr;
  ;
}).prototype = io.ProcessResult.prototype;
;
dart.setLibraryUri(io.ProcessResult, "dart:io");
;
const _signalNumber = dart.privateName(io, "_signalNumber");
const _name$5 = dart.privateName(io, "_name");
let C199;
let C200;
let C201;
let C202;
let C203;
let C204;
let C205;
let C206;
let C207;
let C208;
let C209;
let C210;
let C211;
let C212;
let C213;
let C214;
let C215;
let C216;
let C217;
let C218;
let C219;
let C220;
let C221;
let C222;
let C223;
let C224;
let C225;
let C226;
io.ProcessSignal = class ProcessSignal extends core.Object {
  get [_signalNumber]() {
    return this[_signalNumber$];
  }
  set [_signalNumber](value) {
    super[_signalNumber] = value;
  }
  get [_name$5]() {
    return this[_name$6];
  }
  set [_name$5](value) {
    super[_name$5] = value;
  }
  toString() {
    return this[_name$5];
  }
  watch() {
    return io._ProcessUtils._watchSignal(this);
  }
};
(io.ProcessSignal.__ = function(_signalNumber, _name) {
  this[_signalNumber$] = _signalNumber;
  this[_name$6] = _name;
  ;
}).prototype = io.ProcessSignal.prototype;
;
const _signalNumber$ = ProcessSignal__signalNumber;
const _name$6 = ProcessSignal__name;
;
dart.setLibraryUri(io.ProcessSignal, "dart:io");
;
dart.defineExtensionMethods(io.ProcessSignal, ['toString']);
dart.defineLazy(io.ProcessSignal, {
  /*io.ProcessSignal.sighup*/get sighup() {
    return C199 || CT.C199;
  },
  /*io.ProcessSignal.sigint*/get sigint() {
    return C200 || CT.C200;
  },
  /*io.ProcessSignal.sigquit*/get sigquit() {
    return C201 || CT.C201;
  },
  /*io.ProcessSignal.sigill*/get sigill() {
    return C202 || CT.C202;
  },
  /*io.ProcessSignal.sigtrap*/get sigtrap() {
    return C203 || CT.C203;
  },
  /*io.ProcessSignal.sigabrt*/get sigabrt() {
    return C204 || CT.C204;
  },
  /*io.ProcessSignal.sigbus*/get sigbus() {
    return C205 || CT.C205;
  },
  /*io.ProcessSignal.sigfpe*/get sigfpe() {
    return C206 || CT.C206;
  },
  /*io.ProcessSignal.sigkill*/get sigkill() {
    return C207 || CT.C207;
  },
  /*io.ProcessSignal.sigusr1*/get sigusr1() {
    return C208 || CT.C208;
  },
  /*io.ProcessSignal.sigsegv*/get sigsegv() {
    return C209 || CT.C209;
  },
  /*io.ProcessSignal.sigusr2*/get sigusr2() {
    return C210 || CT.C210;
  },
  /*io.ProcessSignal.sigpipe*/get sigpipe() {
    return C211 || CT.C211;
  },
  /*io.ProcessSignal.sigalrm*/get sigalrm() {
    return C212 || CT.C212;
  },
  /*io.ProcessSignal.sigterm*/get sigterm() {
    return C198 || CT.C198;
  },
  /*io.ProcessSignal.sigchld*/get sigchld() {
    return C213 || CT.C213;
  },
  /*io.ProcessSignal.sigcont*/get sigcont() {
    return C214 || CT.C214;
  },
  /*io.ProcessSignal.sigstop*/get sigstop() {
    return C215 || CT.C215;
  },
  /*io.ProcessSignal.sigtstp*/get sigtstp() {
    return C216 || CT.C216;
  },
  /*io.ProcessSignal.sigttin*/get sigttin() {
    return C217 || CT.C217;
  },
  /*io.ProcessSignal.sigttou*/get sigttou() {
    return C218 || CT.C218;
  },
  /*io.ProcessSignal.sigurg*/get sigurg() {
    return C219 || CT.C219;
  },
  /*io.ProcessSignal.sigxcpu*/get sigxcpu() {
    return C220 || CT.C220;
  },
  /*io.ProcessSignal.sigxfsz*/get sigxfsz() {
    return C221 || CT.C221;
  },
  /*io.ProcessSignal.sigvtalrm*/get sigvtalrm() {
    return C222 || CT.C222;
  },
  /*io.ProcessSignal.sigprof*/get sigprof() {
    return C223 || CT.C223;
  },
  /*io.ProcessSignal.sigwinch*/get sigwinch() {
    return C224 || CT.C224;
  },
  /*io.ProcessSignal.sigpoll*/get sigpoll() {
    return C225 || CT.C225;
  },
  /*io.ProcessSignal.sigsys*/get sigsys() {
    return C226 || CT.C226;
  },
  /*io.ProcessSignal.SIGHUP*/get SIGHUP() {
    return C199 || CT.C199;
  },
  /*io.ProcessSignal.SIGINT*/get SIGINT() {
    return C200 || CT.C200;
  },
  /*io.ProcessSignal.SIGQUIT*/get SIGQUIT() {
    return C201 || CT.C201;
  },
  /*io.ProcessSignal.SIGILL*/get SIGILL() {
    return C202 || CT.C202;
  },
  /*io.ProcessSignal.SIGTRAP*/get SIGTRAP() {
    return C203 || CT.C203;
  },
  /*io.ProcessSignal.SIGABRT*/get SIGABRT() {
    return C204 || CT.C204;
  },
  /*io.ProcessSignal.SIGBUS*/get SIGBUS() {
    return C205 || CT.C205;
  },
  /*io.ProcessSignal.SIGFPE*/get SIGFPE() {
    return C206 || CT.C206;
  },
  /*io.ProcessSignal.SIGKILL*/get SIGKILL() {
    return C207 || CT.C207;
  },
  /*io.ProcessSignal.SIGUSR1*/get SIGUSR1() {
    return C208 || CT.C208;
  },
  /*io.ProcessSignal.SIGSEGV*/get SIGSEGV() {
    return C209 || CT.C209;
  },
  /*io.ProcessSignal.SIGUSR2*/get SIGUSR2() {
    return C210 || CT.C210;
  },
  /*io.ProcessSignal.SIGPIPE*/get SIGPIPE() {
    return C211 || CT.C211;
  },
  /*io.ProcessSignal.SIGALRM*/get SIGALRM() {
    return C212 || CT.C212;
  },
  /*io.ProcessSignal.SIGTERM*/get SIGTERM() {
    return C198 || CT.C198;
  },
  /*io.ProcessSignal.SIGCHLD*/get SIGCHLD() {
    return C213 || CT.C213;
  },
  /*io.ProcessSignal.SIGCONT*/get SIGCONT() {
    return C214 || CT.C214;
  },
  /*io.ProcessSignal.SIGSTOP*/get SIGSTOP() {
    return C215 || CT.C215;
  },
  /*io.ProcessSignal.SIGTSTP*/get SIGTSTP() {
    return C216 || CT.C216;
  },
  /*io.ProcessSignal.SIGTTIN*/get SIGTTIN() {
    return C217 || CT.C217;
  },
  /*io.ProcessSignal.SIGTTOU*/get SIGTTOU() {
    return C218 || CT.C218;
  },
  /*io.ProcessSignal.SIGURG*/get SIGURG() {
    return C219 || CT.C219;
  },
  /*io.ProcessSignal.SIGXCPU*/get SIGXCPU() {
    return C220 || CT.C220;
  },
  /*io.ProcessSignal.SIGXFSZ*/get SIGXFSZ() {
    return C221 || CT.C221;
  },
  /*io.ProcessSignal.SIGVTALRM*/get SIGVTALRM() {
    return C222 || CT.C222;
  },
  /*io.ProcessSignal.SIGPROF*/get SIGPROF() {
    return C223 || CT.C223;
  },
  /*io.ProcessSignal.SIGWINCH*/get SIGWINCH() {
    return C224 || CT.C224;
  },
  /*io.ProcessSignal.SIGPOLL*/get SIGPOLL() {
    return C225 || CT.C225;
  },
  /*io.ProcessSignal.SIGSYS*/get SIGSYS() {
    return C226 || CT.C226;
  }
});
const message$6 = dart.privateName(io, "SignalException.message");
const osError$0 = dart.privateName(io, "SignalException.osError");
io.SignalException = class SignalException extends core.Object {
  get message() {
    return this[message$6];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$0];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    let msg = "";
    if (this.osError != null) {
      msg = ", osError: " + dart.str(this.osError);
    }
    return "SignalException: " + dart.str(this.message) + msg;
  }
};
(io.SignalException.new = function(message, osError) {
  if (osError === void 0) osError = null;
  this[message$6] = message;
  this[osError$0] = osError;
  ;
}).prototype = io.SignalException.prototype;
;
io.SignalException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.SignalException, "dart:io");
;
dart.defineExtensionMethods(io.SignalException, ['toString']);
const executable$ = dart.privateName(io, "ProcessException.executable");
const arguments$ = dart.privateName(io, "ProcessException.arguments");
const message$7 = dart.privateName(io, "ProcessException.message");
const errorCode$1 = dart.privateName(io, "ProcessException.errorCode");
io.ProcessException = class ProcessException extends core.Object {
  get executable() {
    return this[executable$];
  }
  set executable(value) {
    super.executable = value;
  }
  get arguments() {
    return this[arguments$];
  }
  set arguments(value) {
    super.arguments = value;
  }
  get message() {
    return this[message$7];
  }
  set message(value) {
    super.message = value;
  }
  get errorCode() {
    return this[errorCode$1];
  }
  set errorCode(value) {
    super.errorCode = value;
  }
  toString() {
    let msg = this.message == null ? "OS error code: " + dart.str(this.errorCode) : this.message;
    let args = this.arguments[$join](" ");
    return "ProcessException: " + dart.str(msg) + "\n  Command: " + dart.str(this.executable) + " " + dart.str(args);
  }
};
(io.ProcessException.new = function(executable, $arguments, message, errorCode) {
  if (message === void 0) message = "";
  if (errorCode === void 0) errorCode = 0;
  this[executable$] = executable;
  this[arguments$] = $arguments;
  this[message$7] = message;
  this[errorCode$1] = errorCode;
  ;
}).prototype = io.ProcessException.prototype;
;
io.ProcessException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.ProcessException, "dart:io");
;
dart.defineExtensionMethods(io.ProcessException, ['toString']);
const _socket$ = dart.privateName(io, "_socket");
const _owner = dart.privateName(io, "_owner");
const _onCancel$ = dart.privateName(io, "_onCancel");
const _detachRaw = dart.privateName(io, "_detachRaw");
io.SecureSocket = class SecureSocket extends core.Object {
  static connect(host, port, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    return io.RawSecureSocket.connect(host, port, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols, timeout: timeout}).then(io.SecureSocket, dart.fn(rawSocket => io.SecureSocket.__(rawSocket), RawSecureSocketToSecureSocket()));
  }
  static startConnect(host, port, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    return io.RawSecureSocket.startConnect(host, port, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols}).then(ConnectionTaskOfSecureSocket(), dart.fn(rawState => {
      let socket = rawState.socket.then(io.SecureSocket, dart.fn(rawSocket => io.SecureSocket.__(rawSocket), RawSecureSocketToSecureSocket()));
      return new (ConnectionTaskOfSecureSocket()).__({socket: socket, onCancel: rawState[_onCancel$]});
    }, ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket()));
  }
  static secure(socket, opts) {
    let host = opts && 'host' in opts ? opts.host : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    return async.Future.as(dart.dsend(socket, _detachRaw, [])).then(io.RawSecureSocket, dart.fn(detachedRaw => io.RawSecureSocket.secure(io.RawSocket.as(dart.dsend(detachedRaw, '_get', [0])), {subscription: StreamSubscriptionOfRawSocketEvent().as(dart.dsend(detachedRaw, '_get', [1])), host: host, context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols}), dynamicToFutureOfRawSecureSocket())).then(io.SecureSocket, dart.fn(raw => io.SecureSocket.__(raw), RawSecureSocketToSecureSocket()));
  }
  static secureServer(socket, context, opts) {
    let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    return async.Future.as(dart.dsend(socket, _detachRaw, [])).then(io.RawSecureSocket, dart.fn(detachedRaw => io.RawSecureSocket.secureServer(io.RawSocket.as(dart.dsend(detachedRaw, '_get', [0])), context, {subscription: StreamSubscriptionOfRawSocketEvent().as(dart.dsend(detachedRaw, '_get', [1])), bufferedData: bufferedData, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols}), dynamicToFutureOfRawSecureSocket())).then(io.SecureSocket, dart.fn(raw => io.SecureSocket.__(raw), RawSecureSocketToSecureSocket()));
  }
};
(io.SecureSocket[dart.mixinNew] = function() {
}).prototype = io.SecureSocket.prototype;
;
io.SecureSocket[dart.implements] = () => [io.Socket];
dart.setLibraryUri(io.SecureSocket, "dart:io");
io.SecureServerSocket = class SecureServerSocket extends async.Stream$(io.SecureSocket) {
  static bind(address, port, context, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    return io.RawSecureServerSocket.bind(address, port, context, {backlog: backlog, v6Only: v6Only, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols, shared: shared}).then(io.SecureServerSocket, dart.fn(serverSocket => new io.SecureServerSocket.__(serverSocket), RawSecureServerSocketToSecureServerSocket()));
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_socket$].map(io.SecureSocket, dart.fn(rawSocket => io.SecureSocket.__(rawSocket), RawSecureSocketToSecureSocket())).listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  get port() {
    return this[_socket$].port;
  }
  get address() {
    return this[_socket$].address;
  }
  close() {
    return this[_socket$].close().then(io.SecureServerSocket, dart.fn(_ => this, RawSecureServerSocketToSecureServerSocket()));
  }
  set [_owner](owner) {
    this[_socket$][_owner] = owner;
  }
};
(io.SecureServerSocket.__ = function(_socket) {
  this[_socket$] = _socket;
  io.SecureServerSocket.__proto__.new.call(this);
  ;
}).prototype = io.SecureServerSocket.prototype;
;
;
dart.setGetterSignature(io.SecureServerSocket, () => ({
  __proto__: dart.getGetters(io.SecureServerSocket.__proto__),
  port: core.int,
  address: io.InternetAddress
}));
dart.setSetterSignature(io.SecureServerSocket, () => ({
  __proto__: dart.getSetters(io.SecureServerSocket.__proto__),
  [_owner]: dart.dynamic
}));
dart.setLibraryUri(io.SecureServerSocket, "dart:io");
;
const _subscription$ = dart.privateName(io, "_subscription");
const _context$ = dart.privateName(io, "_context");
const _onSubscriptionStateChange = dart.privateName(io, "_onSubscriptionStateChange");
const _onPauseStateChange = dart.privateName(io, "_onPauseStateChange");
const _onData$0 = dart.privateName(io, "_onData");
io.RawSecureSocket = class RawSecureSocket extends core.Object {
  static connect(host, port, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    io._RawSecureSocket._verifyFields(host, port, false, false, false, onBadCertificate);
    return io.RawSocket.connect(host, port, {timeout: timeout}).then(io.RawSecureSocket, dart.fn(socket => io.RawSecureSocket.secure(socket, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols}), RawSocketToFutureOfRawSecureSocket()));
  }
  static startConnect(host, port, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    return io.RawSocket.startConnect(host, port).then(ConnectionTaskOfRawSecureSocket(), dart.fn(rawState => {
      let socket = rawState.socket.then(io.RawSecureSocket, dart.fn(rawSocket => io.RawSecureSocket.secure(rawSocket, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols}), RawSocketToFutureOfRawSecureSocket()));
      return new (ConnectionTaskOfRawSecureSocket()).__({socket: socket, onCancel: rawState[_onCancel$]});
    }, ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket()));
  }
  static secure(socket, opts) {
    let subscription = opts && 'subscription' in opts ? opts.subscription : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    socket.readEventsEnabled = false;
    socket.writeEventsEnabled = false;
    return io._RawSecureSocket.connect(host != null ? host : socket.address.host, socket.port, {is_server: false, socket: socket, subscription: subscription, context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols});
  }
  static secureServer(socket, context, opts) {
    let subscription = opts && 'subscription' in opts ? opts.subscription : null;
    let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    socket.readEventsEnabled = false;
    socket.writeEventsEnabled = false;
    return io._RawSecureSocket.connect(socket.address, socket.remotePort, {context: context, is_server: true, socket: socket, subscription: subscription, bufferedData: bufferedData, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols});
  }
};
(io.RawSecureSocket.new = function() {
  ;
}).prototype = io.RawSecureSocket.prototype;
;
io.RawSecureSocket[dart.implements] = () => [io.RawSocket];
dart.setLibraryUri(io.RawSecureSocket, "dart:io");
const requestClientCertificate$ = dart.privateName(io, "RawSecureServerSocket.requestClientCertificate");
const requireClientCertificate$ = dart.privateName(io, "RawSecureServerSocket.requireClientCertificate");
const supportedProtocols$ = dart.privateName(io, "RawSecureServerSocket.supportedProtocols");
io.RawSecureServerSocket = class RawSecureServerSocket extends async.Stream$(io.RawSecureSocket) {
  get requestClientCertificate() {
    return this[requestClientCertificate$];
  }
  set requestClientCertificate(value) {
    super.requestClientCertificate = value;
  }
  get requireClientCertificate() {
    return this[requireClientCertificate$];
  }
  set requireClientCertificate(value) {
    super.requireClientCertificate = value;
  }
  get supportedProtocols() {
    return this[supportedProtocols$];
  }
  set supportedProtocols(value) {
    super.supportedProtocols = value;
  }
  static bind(address, port, context, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    return io.RawServerSocket.bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared}).then(io.RawSecureServerSocket, dart.fn(serverSocket => new io.RawSecureServerSocket.__(serverSocket, context, requestClientCertificate, requireClientCertificate, supportedProtocols), RawServerSocketToRawSecureServerSocket()));
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  get port() {
    return this[_socket$].port;
  }
  get address() {
    return this[_socket$].address;
  }
  close() {
    this[_closed] = true;
    return this[_socket$].close().then(io.RawSecureServerSocket, dart.fn(_ => this, RawServerSocketToRawSecureServerSocket()));
  }
  [_onData$0](connection) {
    let remotePort = null;
    try {
      remotePort = connection.remotePort;
    } catch (e$) {
      let e = dart.getThrown(e$);
      return;
    }
    io._RawSecureSocket.connect(connection.address, core.int._check(remotePort), {context: this[_context$], is_server: true, socket: connection, requestClientCertificate: this.requestClientCertificate, requireClientCertificate: this.requireClientCertificate, supportedProtocols: this.supportedProtocols}).then(core.Null, dart.fn(secureConnection => {
      if (dart.test(this[_closed])) {
        secureConnection.close();
      } else {
        this[_controller].add(secureConnection);
      }
    }, RawSecureSocketToNull())).catchError(dart.fn((e, s) => {
      if (!dart.test(this[_closed])) {
        this[_controller].addError(e, core.StackTrace._check(s));
      }
    }, dynamicAnddynamicToNull()));
  }
  [_onPauseStateChange]() {
    if (dart.test(this[_controller].isPaused)) {
      this[_subscription$].pause();
    } else {
      this[_subscription$].resume();
    }
  }
  [_onSubscriptionStateChange]() {
    if (dart.test(this[_controller].hasListener)) {
      this[_subscription$] = this[_socket$].listen(dart.bind(this, _onData$0), {onError: dart.bind(this[_controller], 'addError'), onDone: dart.bind(this[_controller], 'close')});
    } else {
      this.close();
    }
  }
  set [_owner](owner) {
    dart.dput(this[_socket$], _owner, owner);
  }
};
(io.RawSecureServerSocket.__ = function(_socket, _context, requestClientCertificate, requireClientCertificate, supportedProtocols) {
  this[_controller] = null;
  this[_subscription$] = null;
  this[_closed] = false;
  this[_socket$] = _socket;
  this[_context$] = _context;
  this[requestClientCertificate$] = requestClientCertificate;
  this[requireClientCertificate$] = requireClientCertificate;
  this[supportedProtocols$] = supportedProtocols;
  io.RawSecureServerSocket.__proto__.new.call(this);
  this[_controller] = StreamControllerOfRawSecureSocket().new({sync: true, onListen: dart.bind(this, _onSubscriptionStateChange), onPause: dart.bind(this, _onPauseStateChange), onResume: dart.bind(this, _onPauseStateChange), onCancel: dart.bind(this, _onSubscriptionStateChange)});
}).prototype = io.RawSecureServerSocket.prototype;
;
;
dart.setGetterSignature(io.RawSecureServerSocket, () => ({
  __proto__: dart.getGetters(io.RawSecureServerSocket.__proto__),
  port: core.int,
  address: io.InternetAddress
}));
dart.setSetterSignature(io.RawSecureServerSocket, () => ({
  __proto__: dart.getSetters(io.RawSecureServerSocket.__proto__),
  [_owner]: dart.dynamic
}));
dart.setLibraryUri(io.RawSecureServerSocket, "dart:io");
;
io.X509Certificate = class X509Certificate extends core.Object {};
(io.X509Certificate[dart.mixinNew] = function() {
}).prototype = io.X509Certificate.prototype;
;
dart.setLibraryUri(io.X509Certificate, "dart:io");
io._FilterStatus = class _FilterStatus extends core.Object {};
(io._FilterStatus.new = function() {
  this.progress = false;
  this.readEmpty = true;
  this.writeEmpty = true;
  this.readPlaintextNoLongerEmpty = false;
  this.writePlaintextNoLongerFull = false;
  this.readEncryptedNoLongerFull = false;
  this.writeEncryptedNoLongerEmpty = false;
  ;
}).prototype = io._FilterStatus.prototype;
;
dart.setLibraryUri(io._FilterStatus, "dart:io");
;
const _handshakeComplete = dart.privateName(io, "_handshakeComplete");
const _stream$0 = dart.privateName(io, "_stream");
const _bufferedDataIndex = dart.privateName(io, "_bufferedDataIndex");
const _status = dart.privateName(io, "_status");
const _writeEventsEnabled = dart.privateName(io, "_writeEventsEnabled");
const _readEventsEnabled = dart.privateName(io, "_readEventsEnabled");
const _pauseCount = dart.privateName(io, "_pauseCount");
const _pendingReadEvent = dart.privateName(io, "_pendingReadEvent");
const _socketClosedRead = dart.privateName(io, "_socketClosedRead");
const _socketClosedWrite = dart.privateName(io, "_socketClosedWrite");
const _closedRead = dart.privateName(io, "_closedRead");
const _closedWrite = dart.privateName(io, "_closedWrite");
const _filterStatus = dart.privateName(io, "_filterStatus");
const _connectPending = dart.privateName(io, "_connectPending");
const _filterPending = dart.privateName(io, "_filterPending");
const _filterActive = dart.privateName(io, "_filterActive");
const _secureFilter = dart.privateName(io, "_secureFilter");
const _selectedProtocol = dart.privateName(io, "_selectedProtocol");
const _socketSubscription$ = dart.privateName(io, "_socketSubscription");
const _bufferedData$ = dart.privateName(io, "_bufferedData");
const _secureHandshakeCompleteHandler = dart.privateName(io, "_secureHandshakeCompleteHandler");
const _onBadCertificateWrapper = dart.privateName(io, "_onBadCertificateWrapper");
const _eventDispatcher = dart.privateName(io, "_eventDispatcher");
const _reportError = dart.privateName(io, "_reportError");
const _doneHandler = dart.privateName(io, "_doneHandler");
const _secureHandshake = dart.privateName(io, "_secureHandshake");
const _sendWriteEvent = dart.privateName(io, "_sendWriteEvent");
const _completeCloseCompleter = dart.privateName(io, "_completeCloseCompleter");
const _close$ = dart.privateName(io, "_close");
const _scheduleReadEvent = dart.privateName(io, "_scheduleReadEvent");
const _scheduleFilter = dart.privateName(io, "_scheduleFilter");
const _readHandler = dart.privateName(io, "_readHandler");
const _writeHandler = dart.privateName(io, "_writeHandler");
const _closeHandler = dart.privateName(io, "_closeHandler");
const _readSocket = dart.privateName(io, "_readSocket");
const _writeSocket = dart.privateName(io, "_writeSocket");
const _tryFilter = dart.privateName(io, "_tryFilter");
const _pushAllFilterStages = dart.privateName(io, "_pushAllFilterStages");
const _readSocketOrBufferedData = dart.privateName(io, "_readSocketOrBufferedData");
const _sendReadEvent = dart.privateName(io, "_sendReadEvent");
const _value$1 = dart.privateName(io, "_value");
let C227;
const _value$2 = dart.privateName(io, "RawSocketEvent._value");
let C228;
let C229;
let C230;
let C231;
io.RawSocketEvent = class RawSocketEvent extends core.Object {
  get [_value$1]() {
    return this[_value$2];
  }
  set [_value$1](value) {
    super[_value$1] = value;
  }
  toString() {
    return (C227 || CT.C227)[$_get](this[_value$1]);
  }
};
(io.RawSocketEvent.__ = function(_value) {
  this[_value$2] = _value;
  ;
}).prototype = io.RawSocketEvent.prototype;
;
dart.setLibraryUri(io.RawSocketEvent, "dart:io");
;
dart.defineExtensionMethods(io.RawSocketEvent, ['toString']);
dart.defineLazy(io.RawSocketEvent, {
  /*io.RawSocketEvent.read*/get read() {
    return C228 || CT.C228;
  },
  /*io.RawSocketEvent.write*/get write() {
    return C229 || CT.C229;
  },
  /*io.RawSocketEvent.readClosed*/get readClosed() {
    return C230 || CT.C230;
  },
  /*io.RawSocketEvent.closed*/get closed() {
    return C231 || CT.C231;
  },
  /*io.RawSocketEvent.READ*/get READ() {
    return C228 || CT.C228;
  },
  /*io.RawSocketEvent.WRITE*/get WRITE() {
    return C229 || CT.C229;
  },
  /*io.RawSocketEvent.READ_CLOSED*/get READ_CLOSED() {
    return C230 || CT.C230;
  },
  /*io.RawSocketEvent.CLOSED*/get CLOSED() {
    return C231 || CT.C231;
  }
});
io._RawSecureSocket = class _RawSecureSocket extends async.Stream$(io.RawSocketEvent) {
  static _isBufferEncrypted(identifier) {
    return dart.notNull(identifier) >= 2;
  }
  static connect(host, requestedPort, opts) {
    let is_server = opts && 'is_server' in opts ? opts.is_server : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let socket = opts && 'socket' in opts ? opts.socket : null;
    let subscription = opts && 'subscription' in opts ? opts.subscription : null;
    let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
    let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
    io._RawSecureSocket._verifyFields(host, requestedPort, is_server, requestClientCertificate, requireClientCertificate, onBadCertificate);
    if (io.InternetAddress.is(host)) host = dart.dload(host, 'host');
    let address = socket.address;
    if (host != null) {
      address = io.InternetAddress._cloneWithNewHost(address, core.String._check(host));
    }
    return new io._RawSecureSocket.new(address, requestedPort, is_server, context, socket, subscription, bufferedData, requestClientCertificate, requireClientCertificate, onBadCertificate, supportedProtocols)[_handshakeComplete].future;
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    this[_sendWriteEvent]();
    return this[_stream$0].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  static _verifyFields(host, requestedPort, is_server, requestClientCertificate, requireClientCertificate, onBadCertificate) {
    if (!(typeof host == 'string') && !io.InternetAddress.is(host)) {
      dart.throw(new core.ArgumentError.new("host is not a String or an InternetAddress"));
    }
    core.ArgumentError.checkNotNull(requestedPort, "requestedPort");
    if (dart.notNull(requestedPort) < 0 || dart.notNull(requestedPort) > 65535) {
      dart.throw(new core.ArgumentError.new("requestedPort is not in the range 0..65535"));
    }
    core.ArgumentError.checkNotNull(requestClientCertificate, "requestClientCertificate");
    core.ArgumentError.checkNotNull(requireClientCertificate, "requireClientCertificate");
  }
  get port() {
    return this[_socket$].port;
  }
  get remoteAddress() {
    return this[_socket$].remoteAddress;
  }
  get remotePort() {
    return this[_socket$].remotePort;
  }
  set [_owner](owner) {
    dart.dput(this[_socket$], _owner, owner);
  }
  available() {
    return this[_status] !== 202 ? 0 : this[_secureFilter].buffers[$_get](0).length;
  }
  close() {
    this.shutdown(io.SocketDirection.both);
    return this[_closeCompleter].future;
  }
  [_completeCloseCompleter](dummy) {
    if (dummy === void 0) dummy = null;
    if (!dart.test(this[_closeCompleter].isCompleted)) this[_closeCompleter].complete(this);
  }
  [_close$]() {
    this[_closedWrite] = true;
    this[_closedRead] = true;
    if (this[_socket$] != null) {
      this[_socket$].close().then(dart.void, dart.bind(this, _completeCloseCompleter));
    } else {
      this[_completeCloseCompleter]();
    }
    this[_socketClosedWrite] = true;
    this[_socketClosedRead] = true;
    if (!dart.test(this[_filterActive]) && this[_secureFilter] != null) {
      this[_secureFilter].destroy();
      this[_secureFilter] = null;
    }
    if (this[_socketSubscription$] != null) {
      this[_socketSubscription$].cancel();
    }
    this[_controller].close();
    this[_status] = 203;
  }
  shutdown(direction) {
    if (dart.equals(direction, io.SocketDirection.send) || dart.equals(direction, io.SocketDirection.both)) {
      this[_closedWrite] = true;
      if (dart.test(this[_filterStatus].writeEmpty)) {
        this[_socket$].shutdown(io.SocketDirection.send);
        this[_socketClosedWrite] = true;
        if (dart.test(this[_closedRead])) {
          this[_close$]();
        }
      }
    }
    if (dart.equals(direction, io.SocketDirection.receive) || dart.equals(direction, io.SocketDirection.both)) {
      this[_closedRead] = true;
      this[_socketClosedRead] = true;
      this[_socket$].shutdown(io.SocketDirection.receive);
      if (dart.test(this[_socketClosedWrite])) {
        this[_close$]();
      }
    }
  }
  get writeEventsEnabled() {
    return this[_writeEventsEnabled];
  }
  set writeEventsEnabled(value) {
    this[_writeEventsEnabled] = value;
    if (dart.test(value)) {
      async.Timer.run(dart.fn(() => this[_sendWriteEvent](), VoidTodynamic()));
    }
  }
  get readEventsEnabled() {
    return this[_readEventsEnabled];
  }
  set readEventsEnabled(value) {
    this[_readEventsEnabled] = value;
    this[_scheduleReadEvent]();
  }
  read(length) {
    if (length === void 0) length = null;
    if (length != null && (!core.int.is(length) || dart.notNull(length) < 0)) {
      dart.throw(new core.ArgumentError.new("Invalid length parameter in SecureSocket.read (length: " + dart.str(length) + ")"));
    }
    if (dart.test(this[_closedRead])) {
      dart.throw(new io.SocketException.new("Reading from a closed socket"));
    }
    if (this[_status] !== 202) {
      return null;
    }
    let result = this[_secureFilter].buffers[$_get](0).read(length);
    this[_scheduleFilter]();
    return result;
  }
  write(data, offset, bytes) {
    if (offset === void 0) offset = null;
    if (bytes === void 0) bytes = null;
    if (bytes != null && (!core.int.is(bytes) || dart.notNull(bytes) < 0)) {
      dart.throw(new core.ArgumentError.new("Invalid bytes parameter in SecureSocket.read (bytes: " + dart.str(bytes) + ")"));
    }
    if (offset != null && (!core.int.is(offset) || dart.notNull(offset) < 0)) {
      dart.throw(new core.ArgumentError.new("Invalid offset parameter in SecureSocket.read (offset: " + dart.str(offset) + ")"));
    }
    if (dart.test(this[_closedWrite])) {
      this[_controller].addError(new io.SocketException.new("Writing to a closed socket"));
      return 0;
    }
    if (this[_status] !== 202) return 0;
    offset == null ? offset = 0 : null;
    bytes == null ? bytes = dart.notNull(data[$length]) - dart.notNull(offset) : null;
    let written = this[_secureFilter].buffers[$_get](1).write(data, offset, bytes);
    if (dart.notNull(written) > 0) {
      this[_filterStatus].writeEmpty = false;
    }
    this[_scheduleFilter]();
    return written;
  }
  get peerCertificate() {
    return this[_secureFilter].peerCertificate;
  }
  get selectedProtocol() {
    return this[_selectedProtocol];
  }
  [_onBadCertificateWrapper](certificate) {
    if (this.onBadCertificate == null) return false;
    let result = dart.dsend(this, 'onBadCertificate', [certificate]);
    if (typeof result == 'boolean') return result;
    dart.throw(new io.HandshakeException.new("onBadCertificate callback returned non-boolean " + dart.str(result)));
  }
  setOption(option, enabled) {
    if (this[_socket$] == null) return false;
    return this[_socket$].setOption(option, enabled);
  }
  getRawOption(option) {
    let t86;
    t86 = this[_socket$];
    return t86 == null ? null : t86.getRawOption(option);
  }
  setRawOption(option) {
    let t86;
    t86 = this[_socket$];
    t86 == null ? null : t86.setRawOption(option);
  }
  [_eventDispatcher](event) {
    try {
      if (dart.equals(event, io.RawSocketEvent.read)) {
        this[_readHandler]();
      } else if (dart.equals(event, io.RawSocketEvent.write)) {
        this[_writeHandler]();
      } else if (dart.equals(event, io.RawSocketEvent.readClosed)) {
        this[_closeHandler]();
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      let stackTrace = dart.stackTrace(e$);
      this[_reportError](e, stackTrace);
    }
  }
  [_readHandler]() {
    this[_readSocket]();
    this[_scheduleFilter]();
  }
  [_writeHandler]() {
    this[_writeSocket]();
    this[_scheduleFilter]();
  }
  [_doneHandler]() {
    if (dart.test(this[_filterStatus].readEmpty)) {
      this[_close$]();
    }
  }
  [_reportError](e, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    if (this[_status] === 203) {
      return;
    } else if (dart.test(this[_connectPending])) {
      this[_handshakeComplete].completeError(e, stackTrace);
    } else {
      this[_controller].addError(e, stackTrace);
    }
    this[_close$]();
  }
  [_closeHandler]() {
    if (this[_status] === 202) {
      if (dart.test(this[_closedRead])) return;
      this[_socketClosedRead] = true;
      if (dart.test(this[_filterStatus].readEmpty)) {
        this[_closedRead] = true;
        this[_controller].add(io.RawSocketEvent.readClosed);
        if (dart.test(this[_socketClosedWrite])) {
          this[_close$]();
        }
      } else {
        this[_scheduleFilter]();
      }
    } else if (this[_status] === 201) {
      this[_socketClosedRead] = true;
      if (dart.test(this[_filterStatus].readEmpty)) {
        this[_reportError](new io.HandshakeException.new("Connection terminated during handshake"), null);
      } else {
        this[_secureHandshake]();
      }
    }
  }
  [_secureHandshake]() {
    try {
      this[_secureFilter].handshake();
      this[_filterStatus].writeEmpty = false;
      this[_readSocket]();
      this[_writeSocket]();
      this[_scheduleFilter]();
    } catch (e$) {
      let e = dart.getThrown(e$);
      let stackTrace = dart.stackTrace(e$);
      this[_reportError](e, stackTrace);
    }
  }
  renegotiate(opts) {
    let useSessionCache = opts && 'useSessionCache' in opts ? opts.useSessionCache : true;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
    if (this[_status] !== 202) {
      dart.throw(new io.HandshakeException.new("Called renegotiate on a non-connected socket"));
    }
    this[_secureFilter].renegotiate(useSessionCache, requestClientCertificate, requireClientCertificate);
    this[_status] = 201;
    this[_filterStatus].writeEmpty = false;
    this[_scheduleFilter]();
  }
  [_secureHandshakeCompleteHandler]() {
    this[_status] = 202;
    if (dart.test(this[_connectPending])) {
      this[_connectPending] = false;
      try {
        this[_selectedProtocol] = this[_secureFilter].selectedProtocol();
        async.Timer.run(dart.fn(() => this[_handshakeComplete].complete(this), VoidTovoid()));
      } catch (e) {
        let error = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        this[_handshakeComplete].completeError(error, stack);
      }
    }
  }
  [_onPauseStateChange]() {
    if (dart.test(this[_controller].isPaused)) {
      this[_pauseCount] = dart.notNull(this[_pauseCount]) + 1;
    } else {
      this[_pauseCount] = dart.notNull(this[_pauseCount]) - 1;
      if (this[_pauseCount] === 0) {
        this[_scheduleReadEvent]();
        this[_sendWriteEvent]();
      }
    }
    if (!dart.test(this[_socketClosedRead]) || !dart.test(this[_socketClosedWrite])) {
      if (dart.test(this[_controller].isPaused)) {
        this[_socketSubscription$].pause();
      } else {
        this[_socketSubscription$].resume();
      }
    }
  }
  [_onSubscriptionStateChange]() {
    if (dart.test(this[_controller].hasListener)) {
    }
  }
  [_scheduleFilter]() {
    this[_filterPending] = true;
    this[_tryFilter]();
  }
  [_tryFilter]() {
    if (this[_status] === 203) {
      return;
    }
    if (dart.test(this[_filterPending]) && !dart.test(this[_filterActive])) {
      this[_filterActive] = true;
      this[_filterPending] = false;
      this[_pushAllFilterStages]().then(core.Null, dart.fn(status => {
        this[_filterStatus] = status;
        this[_filterActive] = false;
        if (this[_status] === 203) {
          this[_secureFilter].destroy();
          this[_secureFilter] = null;
          return;
        }
        this[_socket$].readEventsEnabled = true;
        if (dart.test(this[_filterStatus].writeEmpty) && dart.test(this[_closedWrite]) && !dart.test(this[_socketClosedWrite])) {
          this.shutdown(io.SocketDirection.send);
          if (this[_status] === 203) {
            return;
          }
        }
        if (dart.test(this[_filterStatus].readEmpty) && dart.test(this[_socketClosedRead]) && !dart.test(this[_closedRead])) {
          if (this[_status] === 201) {
            this[_secureFilter].handshake();
            if (this[_status] === 201) {
              dart.throw(new io.HandshakeException.new("Connection terminated during handshake"));
            }
          }
          this[_closeHandler]();
        }
        if (this[_status] === 203) {
          return;
        }
        if (dart.test(this[_filterStatus].progress)) {
          this[_filterPending] = true;
          if (dart.test(this[_filterStatus].writeEncryptedNoLongerEmpty)) {
            this[_writeSocket]();
          }
          if (dart.test(this[_filterStatus].writePlaintextNoLongerFull)) {
            this[_sendWriteEvent]();
          }
          if (dart.test(this[_filterStatus].readEncryptedNoLongerFull)) {
            this[_readSocket]();
          }
          if (dart.test(this[_filterStatus].readPlaintextNoLongerEmpty)) {
            this[_scheduleReadEvent]();
          }
          if (this[_status] === 201) {
            this[_secureHandshake]();
          }
        }
        this[_tryFilter]();
      }, _FilterStatusToNull())).catchError(dart.bind(this, _reportError));
    }
  }
  [_readSocketOrBufferedData](bytes) {
    if (this[_bufferedData$] != null) {
      if (dart.notNull(bytes) > dart.notNull(this[_bufferedData$][$length]) - dart.notNull(this[_bufferedDataIndex])) {
        bytes = dart.notNull(this[_bufferedData$][$length]) - dart.notNull(this[_bufferedDataIndex]);
      }
      let result = this[_bufferedData$][$sublist](this[_bufferedDataIndex], dart.notNull(this[_bufferedDataIndex]) + dart.notNull(bytes));
      this[_bufferedDataIndex] = dart.notNull(this[_bufferedDataIndex]) + dart.notNull(bytes);
      if (this[_bufferedData$][$length] == this[_bufferedDataIndex]) {
        this[_bufferedData$] = null;
      }
      return result;
    } else if (!dart.test(this[_socketClosedRead])) {
      return this[_socket$].read(bytes);
    } else {
      return null;
    }
  }
  [_readSocket]() {
    if (this[_status] === 203) return;
    let buffer = this[_secureFilter].buffers[$_get](2);
    if (dart.notNull(buffer.writeFromSource(dart.bind(this, _readSocketOrBufferedData))) > 0) {
      this[_filterStatus].readEmpty = false;
    } else {
      this[_socket$].readEventsEnabled = false;
    }
  }
  [_writeSocket]() {
    if (dart.test(this[_socketClosedWrite])) return;
    let buffer = this[_secureFilter].buffers[$_get](3);
    if (dart.test(buffer.readToSocket(this[_socket$]))) {
      this[_socket$].writeEventsEnabled = true;
    }
  }
  [_scheduleReadEvent]() {
    if (!dart.test(this[_pendingReadEvent]) && dart.test(this[_readEventsEnabled]) && this[_pauseCount] === 0 && this[_secureFilter] != null && !dart.test(this[_secureFilter].buffers[$_get](0).isEmpty)) {
      this[_pendingReadEvent] = true;
      async.Timer.run(dart.bind(this, _sendReadEvent));
    }
  }
  [_sendReadEvent]() {
    this[_pendingReadEvent] = false;
    if (this[_status] !== 203 && dart.test(this[_readEventsEnabled]) && this[_pauseCount] === 0 && this[_secureFilter] != null && !dart.test(this[_secureFilter].buffers[$_get](0).isEmpty)) {
      this[_controller].add(io.RawSocketEvent.read);
      this[_scheduleReadEvent]();
    }
  }
  [_sendWriteEvent]() {
    if (!dart.test(this[_closedWrite]) && dart.test(this[_writeEventsEnabled]) && this[_pauseCount] === 0 && this[_secureFilter] != null && dart.notNull(this[_secureFilter].buffers[$_get](1).free) > 0) {
      this[_writeEventsEnabled] = false;
      this[_controller].add(io.RawSocketEvent.write);
    }
  }
  [_pushAllFilterStages]() {
    let wasInHandshake = this[_status] !== 202;
    let args = core.List.new(2 + 4 * 2);
    args[$_set](0, this[_secureFilter][_pointer]());
    args[$_set](1, wasInHandshake);
    let bufs = this[_secureFilter].buffers;
    for (let i = 0; i < 4; i = i + 1) {
      args[$_set](2 * i + 2, bufs[$_get](i).start);
      args[$_set](2 * i + 3, bufs[$_get](i).end);
    }
    return io._IOService._dispatch(42, args).then(io._FilterStatus, dart.fn(response => {
      if (dart.equals(dart.dload(response, 'length'), 2)) {
        if (wasInHandshake) {
          this[_reportError](new io.HandshakeException.new(dart.str(dart.dsend(response, '_get', [1])) + " error " + dart.str(dart.dsend(response, '_get', [0]))), null);
        } else {
          this[_reportError](new io.TlsException.new(dart.str(dart.dsend(response, '_get', [1])) + " error " + dart.str(dart.dsend(response, '_get', [0]))), null);
        }
      }
      function start(index) {
        return core.int._check(dart.dsend(response, '_get', [2 * dart.notNull(index)]));
      }
      dart.fn(start, intToint());
      function end(index) {
        return core.int._check(dart.dsend(response, '_get', [2 * dart.notNull(index) + 1]));
      }
      dart.fn(end, intToint());
      let status = new io._FilterStatus.new();
      status.writeEmpty = dart.test(bufs[$_get](1).isEmpty) && start(3) == end(3);
      if (wasInHandshake) status.writeEmpty = false;
      status.readEmpty = dart.test(bufs[$_get](2).isEmpty) && start(0) == end(0);
      let buffer = bufs[$_get](1);
      let new_start = start(1);
      if (new_start != buffer.start) {
        status.progress = true;
        if (buffer.free === 0) {
          status.writePlaintextNoLongerFull = true;
        }
        buffer.start = new_start;
      }
      buffer = bufs[$_get](2);
      new_start = start(2);
      if (new_start != buffer.start) {
        status.progress = true;
        if (buffer.free === 0) {
          status.readEncryptedNoLongerFull = true;
        }
        buffer.start = new_start;
      }
      buffer = bufs[$_get](3);
      let new_end = end(3);
      if (new_end != buffer.end) {
        status.progress = true;
        if (buffer.length === 0) {
          status.writeEncryptedNoLongerEmpty = true;
        }
        buffer.end = new_end;
      }
      buffer = bufs[$_get](0);
      new_end = end(0);
      if (new_end != buffer.end) {
        status.progress = true;
        if (buffer.length === 0) {
          status.readPlaintextNoLongerEmpty = true;
        }
        buffer.end = new_end;
      }
      return status;
    }, dynamicTo_FilterStatus()));
  }
};
(io._RawSecureSocket.new = function(address, requestedPort, is_server, context, _socket, _socketSubscription, _bufferedData, requestClientCertificate, requireClientCertificate, onBadCertificate, supportedProtocols) {
  let t85;
  this[_handshakeComplete] = CompleterOf_RawSecureSocket().new();
  this[_controller] = null;
  this[_stream$0] = null;
  this[_bufferedDataIndex] = 0;
  this[_status] = 201;
  this[_writeEventsEnabled] = true;
  this[_readEventsEnabled] = true;
  this[_pauseCount] = 0;
  this[_pendingReadEvent] = false;
  this[_socketClosedRead] = false;
  this[_socketClosedWrite] = false;
  this[_closedRead] = false;
  this[_closedWrite] = false;
  this[_closeCompleter] = CompleterOfRawSecureSocket().new();
  this[_filterStatus] = new io._FilterStatus.new();
  this[_connectPending] = true;
  this[_filterPending] = false;
  this[_filterActive] = false;
  this[_secureFilter] = io._SecureFilter.__();
  this[_selectedProtocol] = null;
  this.address = address;
  this.is_server = is_server;
  this.context = context;
  this[_socket$] = _socket;
  this[_socketSubscription$] = _socketSubscription;
  this[_bufferedData$] = _bufferedData;
  this.requestClientCertificate = requestClientCertificate;
  this.requireClientCertificate = requireClientCertificate;
  this.onBadCertificate = onBadCertificate;
  io._RawSecureSocket.__proto__.new.call(this);
  this.context == null ? this.context = io.SecurityContext.defaultContext : null;
  this[_controller] = StreamControllerOfRawSocketEvent().new({sync: true, onListen: dart.bind(this, _onSubscriptionStateChange), onPause: dart.bind(this, _onPauseStateChange), onResume: dart.bind(this, _onPauseStateChange), onCancel: dart.bind(this, _onSubscriptionStateChange)});
  this[_stream$0] = this[_controller].stream;
  this[_secureFilter].init();
  this[_secureFilter].registerHandshakeCompleteCallback(dart.bind(this, _secureHandshakeCompleteHandler));
  if (this.onBadCertificate != null) {
    this[_secureFilter].registerBadCertificateCallback(dart.bind(this, _onBadCertificateWrapper));
  }
  this[_socket$].readEventsEnabled = true;
  this[_socket$].writeEventsEnabled = false;
  if (this[_socketSubscription$] == null) {
    this[_socketSubscription$] = this[_socket$].listen(dart.bind(this, _eventDispatcher), {onError: dart.bind(this, _reportError), onDone: dart.bind(this, _doneHandler)});
  } else {
    if (dart.test(this[_socketSubscription$].isPaused)) {
      this[_socket$].close();
      dart.throw(new core.ArgumentError.new("Subscription passed to TLS upgrade is paused"));
    }
    let s = this[_socket$];
    if (dart.dtest(dart.dload(dart.dload(s, _socket$), 'closedReadEventSent'))) {
      this[_eventDispatcher](io.RawSocketEvent.readClosed);
    }
    t85 = this[_socketSubscription$];
    t85.onData(dart.bind(this, _eventDispatcher));
    t85.onError(dart.bind(this, _reportError));
    t85.onDone(dart.bind(this, _doneHandler));
    t85;
  }
  try {
    let encodedProtocols = io.SecurityContext._protocolsToLengthEncoding(supportedProtocols);
    this[_secureFilter].connect(this.address.host, this.context, this.is_server, dart.test(this.requestClientCertificate) || dart.test(this.requireClientCertificate), this.requireClientCertificate, encodedProtocols);
    this[_secureHandshake]();
  } catch (e$) {
    let e = dart.getThrown(e$);
    let s = dart.stackTrace(e$);
    this[_reportError](e, s);
  }
}).prototype = io._RawSecureSocket.prototype;
;
io._RawSecureSocket[dart.implements] = () => [io.RawSecureSocket];
;
dart.setGetterSignature(io._RawSecureSocket, () => ({
  __proto__: dart.getGetters(io._RawSecureSocket.__proto__),
  port: core.int,
  remoteAddress: io.InternetAddress,
  remotePort: core.int,
  writeEventsEnabled: core.bool,
  readEventsEnabled: core.bool,
  peerCertificate: io.X509Certificate,
  selectedProtocol: core.String
}));
dart.setSetterSignature(io._RawSecureSocket, () => ({
  __proto__: dart.getSetters(io._RawSecureSocket.__proto__),
  [_owner]: dart.dynamic,
  writeEventsEnabled: core.bool,
  readEventsEnabled: core.bool
}));
dart.setLibraryUri(io._RawSecureSocket, "dart:io");
;
dart.defineLazy(io._RawSecureSocket, {
  /*io._RawSecureSocket.handshakeStatus*/get handshakeStatus() {
    return 201;
  },
  /*io._RawSecureSocket.connectedStatus*/get connectedStatus() {
    return 202;
  },
  /*io._RawSecureSocket.closedStatus*/get closedStatus() {
    return 203;
  },
  /*io._RawSecureSocket.readPlaintextId*/get readPlaintextId() {
    return 0;
  },
  /*io._RawSecureSocket.writePlaintextId*/get writePlaintextId() {
    return 1;
  },
  /*io._RawSecureSocket.readEncryptedId*/get readEncryptedId() {
    return 2;
  },
  /*io._RawSecureSocket.writeEncryptedId*/get writeEncryptedId() {
    return 3;
  },
  /*io._RawSecureSocket.bufferCount*/get bufferCount() {
    return 4;
  }
});
io._ExternalBuffer = class _ExternalBuffer extends core.Object {
  advanceStart(bytes) {
    if (!(dart.notNull(this.start) > dart.notNull(this.end) || dart.notNull(this.start) + dart.notNull(bytes) <= dart.notNull(this.end))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/secure_socket.dart", 1141, 12, "start > end || start + bytes <= end");
    this.start = dart.notNull(this.start) + dart.notNull(bytes);
    if (dart.notNull(this.start) >= dart.notNull(core.num._check(this.size))) {
      this.start = dart.asInt(dart.notNull(this.start) - dart.notNull(core.num._check(this.size)));
      if (!(dart.notNull(this.start) <= dart.notNull(this.end))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/secure_socket.dart", 1145, 14, "start <= end");
      if (!(dart.notNull(this.start) < dart.notNull(core.num._check(this.size)))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/secure_socket.dart", 1146, 14, "start < size");
    }
  }
  advanceEnd(bytes) {
    if (!(dart.notNull(this.start) <= dart.notNull(this.end) || dart.notNull(this.start) > dart.notNull(this.end) + dart.notNull(bytes))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/secure_socket.dart", 1151, 12, "start <= end || start > end + bytes");
    this.end = dart.notNull(this.end) + dart.notNull(bytes);
    if (dart.notNull(this.end) >= dart.notNull(core.num._check(this.size))) {
      this.end = dart.asInt(dart.notNull(this.end) - dart.notNull(core.num._check(this.size)));
      if (!(dart.notNull(this.end) < dart.notNull(this.start))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/secure_socket.dart", 1155, 14, "end < start");
      if (!(dart.notNull(this.end) < dart.notNull(core.num._check(this.size)))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/secure_socket.dart", 1156, 14, "end < size");
    }
  }
  get isEmpty() {
    return this.end == this.start;
  }
  get length() {
    return core.int._check(dart.notNull(this.start) > dart.notNull(this.end) ? dart.dsend(dart.dsend(this.size, '+', [this.end]), '-', [this.start]) : dart.notNull(this.end) - dart.notNull(this.start));
  }
  get linearLength() {
    return core.int._check(dart.notNull(this.start) > dart.notNull(this.end) ? dart.dsend(this.size, '-', [this.start]) : dart.notNull(this.end) - dart.notNull(this.start));
  }
  get free() {
    return core.int._check(dart.notNull(this.start) > dart.notNull(this.end) ? dart.notNull(this.start) - dart.notNull(this.end) - 1 : dart.dsend(dart.dsend(dart.dsend(this.size, '+', [this.start]), '-', [this.end]), '-', [1]));
  }
  get linearFree() {
    if (dart.notNull(this.start) > dart.notNull(this.end)) return dart.notNull(this.start) - dart.notNull(this.end) - 1;
    if (this.start === 0) return core.int._check(dart.dsend(dart.dsend(this.size, '-', [this.end]), '-', [1]));
    return core.int._check(dart.dsend(this.size, '-', [this.end]));
  }
  read(bytes) {
    if (bytes == null) {
      bytes = this.length;
    } else {
      bytes = math.min(core.int, bytes, this.length);
    }
    if (bytes === 0) return null;
    let result = _native_typed_data.NativeUint8List.new(bytes);
    let bytesRead = 0;
    while (bytesRead < dart.notNull(bytes)) {
      let toRead = math.min(core.int, dart.notNull(bytes) - bytesRead, this.linearLength);
      result[$setRange](bytesRead, bytesRead + toRead, this.data, this.start);
      this.advanceStart(toRead);
      bytesRead = bytesRead + toRead;
    }
    return result;
  }
  write(inputData, offset, bytes) {
    if (dart.notNull(bytes) > dart.notNull(this.free)) {
      bytes = this.free;
    }
    let written = 0;
    let toWrite = math.min(core.int, bytes, this.linearFree);
    while (toWrite > 0) {
      this.data[$setRange](this.end, dart.notNull(this.end) + toWrite, inputData, offset);
      this.advanceEnd(toWrite);
      offset = dart.notNull(offset) + toWrite;
      written = written + toWrite;
      toWrite = math.min(core.int, dart.notNull(bytes) - written, this.linearFree);
    }
    return written;
  }
  writeFromSource(getData) {
    let written = 0;
    let toWrite = this.linearFree;
    while (dart.notNull(toWrite) > 0) {
      let inputData = getData(toWrite);
      if (inputData == null || inputData[$length] === 0) break;
      let len = inputData[$length];
      this.data[$setRange](this.end, dart.notNull(this.end) + dart.notNull(len), inputData);
      this.advanceEnd(len);
      written = written + dart.notNull(len);
      toWrite = this.linearFree;
    }
    return written;
  }
  readToSocket(socket) {
    while (true) {
      let toWrite = this.linearLength;
      if (toWrite === 0) return false;
      let bytes = socket.write(this.data, this.start, toWrite);
      this.advanceStart(bytes);
      if (dart.notNull(bytes) < dart.notNull(toWrite)) {
        return true;
      }
    }
  }
};
(io._ExternalBuffer.new = function(size) {
  this.data = null;
  this.start = null;
  this.end = null;
  this.size = size;
  this.start = this.end = core.int._check(dart.dsend(this.size, '~/', [2]));
}).prototype = io._ExternalBuffer.prototype;
;
;
dart.setGetterSignature(io._ExternalBuffer, () => ({
  __proto__: dart.getGetters(io._ExternalBuffer.__proto__),
  isEmpty: core.bool,
  length: core.int,
  linearLength: core.int,
  free: core.int,
  linearFree: core.int
}));
dart.setLibraryUri(io._ExternalBuffer, "dart:io");
;
io._SecureFilter = class _SecureFilter extends core.Object {};
(io._SecureFilter[dart.mixinNew] = function() {
}).prototype = io._SecureFilter.prototype;
;
dart.setLibraryUri(io._SecureFilter, "dart:io");
const type$1 = dart.privateName(io, "TlsException.type");
const message$8 = dart.privateName(io, "TlsException.message");
const osError$1 = dart.privateName(io, "TlsException.osError");
io.TlsException = class TlsException extends core.Object {
  get type() {
    return this[type$1];
  }
  set type(value) {
    super.type = value;
  }
  get message() {
    return this[message$8];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$1];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    let sb = new core.StringBuffer.new();
    sb.write(this.type);
    if (this.message[$isNotEmpty]) {
      sb.write(": " + dart.str(this.message));
      if (this.osError != null) {
        sb.write(" (" + dart.str(this.osError) + ")");
      }
    } else if (this.osError != null) {
      sb.write(": " + dart.str(this.osError));
    }
    return sb.toString();
  }
};
(io.TlsException.new = function(message, osError) {
  if (message === void 0) message = "";
  if (osError === void 0) osError = null;
  io.TlsException.__.call(this, "TlsException", message, osError);
}).prototype = io.TlsException.prototype;
(io.TlsException.__ = function(type, message, osError) {
  this[type$1] = type;
  this[message$8] = message;
  this[osError$1] = osError;
  ;
}).prototype = io.TlsException.prototype;
;
io.TlsException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.TlsException, "dart:io");
;
dart.defineExtensionMethods(io.TlsException, ['toString']);
io.HandshakeException = class HandshakeException extends io.TlsException {};
(io.HandshakeException.new = function(message, osError) {
  if (message === void 0) message = "";
  if (osError === void 0) osError = null;
  io.HandshakeException.__proto__.__.call(this, "HandshakeException", message, osError);
  ;
}).prototype = io.HandshakeException.prototype;
;
dart.setLibraryUri(io.HandshakeException, "dart:io");
io.CertificateException = class CertificateException extends io.TlsException {};
(io.CertificateException.new = function(message, osError) {
  if (message === void 0) message = "";
  if (osError === void 0) osError = null;
  io.CertificateException.__proto__.__.call(this, "CertificateException", message, osError);
  ;
}).prototype = io.CertificateException.prototype;
;
dart.setLibraryUri(io.CertificateException, "dart:io");
io.SecurityContext = class SecurityContext extends core.Object {
  static new(opts) {
    let withTrustedRoots = opts && 'withTrustedRoots' in opts ? opts.withTrustedRoots : false;
    dart.throw(new core.UnsupportedError.new("SecurityContext constructor"));
  }
  static get defaultContext() {
    dart.throw(new core.UnsupportedError.new("default SecurityContext getter"));
  }
  static get alpnSupported() {
    dart.throw(new core.UnsupportedError.new("SecurityContext alpnSupported getter"));
  }
  static _protocolsToLengthEncoding(protocols) {
    let t89, t89$;
    if (protocols == null || protocols[$length] === 0) {
      return _native_typed_data.NativeUint8List.new(0);
    }
    let protocolsLength = protocols[$length];
    let expectedLength = protocolsLength;
    for (let i = 0; i < dart.notNull(protocolsLength); i = i + 1) {
      let length = protocols[$_get](i).length;
      if (length > 0 && length <= 255) {
        expectedLength = dart.notNull(expectedLength) + length;
      } else {
        dart.throw(new core.ArgumentError.new("Length of protocol must be between 1 and 255 (was: " + dart.str(length) + ")."));
      }
    }
    if (dart.notNull(expectedLength) >= 1 << 13) {
      dart.throw(new core.ArgumentError.new("The maximum message length supported is 2^13-1."));
    }
    let bytes = _native_typed_data.NativeUint8List.new(expectedLength);
    let bytesOffset = 0;
    for (let i = 0; i < dart.notNull(protocolsLength); i = i + 1) {
      let proto = protocols[$_get](i);
      bytes[$_set]((t89 = bytesOffset, bytesOffset = t89 + 1, t89), proto.length);
      let bits = 0;
      for (let j = 0; j < proto.length; j = j + 1) {
        let char = proto[$codeUnitAt](j);
        bits = (bits | char) >>> 0;
        bytes[$_set]((t89$ = bytesOffset, bytesOffset = t89$ + 1, t89$), char & 255);
      }
      if (bits > 127) {
        return io.SecurityContext._protocolsToLengthEncodingNonAsciiBailout(protocols);
      }
    }
    return bytes;
  }
  static _protocolsToLengthEncodingNonAsciiBailout(protocols) {
    function addProtocol(outBytes, protocol) {
      let protocolBytes = convert.utf8.encode(protocol);
      let len = protocolBytes[$length];
      if (dart.notNull(len) > 255) {
        dart.throw(new core.ArgumentError.new("Length of protocol must be between 1 and 255 (was: " + dart.str(len) + ")"));
      }
      outBytes[$add](len);
      outBytes[$addAll](protocolBytes);
    }
    dart.fn(addProtocol, ListOfintAndStringTovoid());
    let bytes = JSArrayOfint().of([]);
    for (let i = 0; i < dart.notNull(protocols[$length]); i = i + 1) {
      addProtocol(bytes, protocols[$_get](i));
    }
    if (dart.notNull(bytes[$length]) >= 1 << 13) {
      dart.throw(new core.ArgumentError.new("The maximum message length supported is 2^13-1."));
    }
    return _native_typed_data.NativeUint8List.fromList(bytes);
  }
};
(io.SecurityContext[dart.mixinNew] = function() {
}).prototype = io.SecurityContext.prototype;
;
dart.setLibraryUri(io.SecurityContext, "dart:io");
const __serviceId = dart.privateName(io, "__serviceId");
const _serviceId = dart.privateName(io, "_serviceId");
const _serviceTypePath = dart.privateName(io, "_serviceTypePath");
const _servicePath = dart.privateName(io, "_servicePath");
const _serviceTypeName = dart.privateName(io, "_serviceTypeName");
const _serviceType = dart.privateName(io, "_serviceType");
io._ServiceObject = class _ServiceObject extends core.Object {
  get [_serviceId]() {
    let t89;
    if (this[__serviceId] === 0) this[__serviceId] = (t89 = io._nextServiceId, io._nextServiceId = dart.notNull(t89) + 1, t89);
    return this[__serviceId];
  }
  get [_servicePath]() {
    return dart.str(this[_serviceTypePath]) + "/" + dart.str(this[_serviceId]);
  }
  [_serviceType](ref) {
    if (dart.test(ref)) return "@" + dart.str(this[_serviceTypeName]);
    return this[_serviceTypeName];
  }
};
(io._ServiceObject.new = function() {
  this[__serviceId] = 0;
  ;
}).prototype = io._ServiceObject.prototype;
;
;
dart.setGetterSignature(io._ServiceObject, () => ({
  __proto__: dart.getGetters(io._ServiceObject.__proto__),
  [_serviceId]: core.int,
  [_servicePath]: core.String
}));
dart.setLibraryUri(io._ServiceObject, "dart:io");
;
const _value$3 = dart.privateName(io, "InternetAddressType._value");
let C232;
let C233;
let C234;
io.InternetAddressType = class InternetAddressType extends core.Object {
  get [_value$1]() {
    return this[_value$3];
  }
  set [_value$1](value) {
    super[_value$1] = value;
  }
  static _from(value) {
    if (value === 0) return io.InternetAddressType.IPv4;
    if (value === 1) return io.InternetAddressType.IPv6;
    dart.throw(new core.ArgumentError.new("Invalid type: " + dart.str(value)));
  }
  get name() {
    switch (this[_value$1]) {
      case -1:
      {
        return "ANY";
      }
      case 0:
      {
        return "IPv4";
      }
      case 1:
      {
        return "IPv6";
      }
      default:
      {
        dart.throw(new core.ArgumentError.new("Invalid InternetAddress"));
      }
    }
  }
  toString() {
    return "InternetAddressType: " + dart.str(this.name);
  }
};
(io.InternetAddressType.__ = function(_value) {
  this[_value$3] = _value;
  ;
}).prototype = io.InternetAddressType.prototype;
;
dart.setGetterSignature(io.InternetAddressType, () => ({
  __proto__: dart.getGetters(io.InternetAddressType.__proto__),
  name: core.String
}));
dart.setLibraryUri(io.InternetAddressType, "dart:io");
;
dart.defineExtensionMethods(io.InternetAddressType, ['toString']);
dart.defineLazy(io.InternetAddressType, {
  /*io.InternetAddressType.IPv4*/get IPv4() {
    return C232 || CT.C232;
  },
  /*io.InternetAddressType.IPv6*/get IPv6() {
    return C233 || CT.C233;
  },
  /*io.InternetAddressType.any*/get any() {
    return C234 || CT.C234;
  },
  /*io.InternetAddressType.IP_V4*/get IP_V4() {
    return C232 || CT.C232;
  },
  /*io.InternetAddressType.IP_V6*/get IP_V6() {
    return C233 || CT.C233;
  },
  /*io.InternetAddressType.ANY*/get ANY() {
    return C234 || CT.C234;
  }
});
io.InternetAddress = class InternetAddress extends core.Object {
  static get loopbackIPv4() {
    return io.InternetAddress.LOOPBACK_IP_V4;
  }
  static get LOOPBACK_IP_V4() {
    dart.throw(new core.UnsupportedError.new("InternetAddress.LOOPBACK_IP_V4"));
  }
  static get loopbackIPv6() {
    return io.InternetAddress.LOOPBACK_IP_V6;
  }
  static get LOOPBACK_IP_V6() {
    dart.throw(new core.UnsupportedError.new("InternetAddress.LOOPBACK_IP_V6"));
  }
  static get anyIPv4() {
    return io.InternetAddress.ANY_IP_V4;
  }
  static get ANY_IP_V4() {
    dart.throw(new core.UnsupportedError.new("InternetAddress.ANY_IP_V4"));
  }
  static get anyIPv6() {
    return io.InternetAddress.ANY_IP_V6;
  }
  static get ANY_IP_V6() {
    dart.throw(new core.UnsupportedError.new("InternetAddress.ANY_IP_V6"));
  }
  static new(address) {
    dart.throw(new core.UnsupportedError.new("InternetAddress"));
  }
  static lookup(host, opts) {
    let type = opts && 'type' in opts ? opts.type : C234 || CT.C234;
    dart.throw(new core.UnsupportedError.new("InternetAddress.lookup"));
  }
  static _cloneWithNewHost(address, host) {
    dart.throw(new core.UnsupportedError.new("InternetAddress._cloneWithNewHost"));
  }
};
(io.InternetAddress[dart.mixinNew] = function() {
}).prototype = io.InternetAddress.prototype;
;
dart.setLibraryUri(io.InternetAddress, "dart:io");
io.NetworkInterface = class NetworkInterface extends core.Object {
  static get listSupported() {
    dart.throw(new core.UnsupportedError.new("NetworkInterface.listSupported"));
  }
  static list(opts) {
    let includeLoopback = opts && 'includeLoopback' in opts ? opts.includeLoopback : false;
    let includeLinkLocal = opts && 'includeLinkLocal' in opts ? opts.includeLinkLocal : false;
    let type = opts && 'type' in opts ? opts.type : C234 || CT.C234;
    dart.throw(new core.UnsupportedError.new("NetworkInterface.list"));
  }
};
(io.NetworkInterface.new = function() {
  ;
}).prototype = io.NetworkInterface.prototype;
;
dart.setLibraryUri(io.NetworkInterface, "dart:io");
io.RawServerSocket = class RawServerSocket extends core.Object {
  static bind(address, port, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    dart.throw(new core.UnsupportedError.new("RawServerSocket.bind"));
  }
};
(io.RawServerSocket.new = function() {
  ;
}).prototype = io.RawServerSocket.prototype;
io.RawServerSocket.prototype[dart.isStream] = true;
;
io.RawServerSocket[dart.implements] = () => [async.Stream$(io.RawSocket)];
dart.setLibraryUri(io.RawServerSocket, "dart:io");
io.ServerSocket = class ServerSocket extends core.Object {
  static bind(address, port, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.ServerSocket._bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
    return overrides.serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
  }
  static _bind(address, port, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    dart.throw(new core.UnsupportedError.new("ServerSocket.bind"));
  }
};
(io.ServerSocket.new = function() {
  ;
}).prototype = io.ServerSocket.prototype;
io.ServerSocket.prototype[dart.isStream] = true;
;
io.ServerSocket[dart.implements] = () => [async.Stream$(io.Socket)];
dart.setLibraryUri(io.ServerSocket, "dart:io");
const _value$4 = dart.privateName(io, "SocketDirection._value");
let C235;
let C236;
let C237;
io.SocketDirection = class SocketDirection extends core.Object {
  get [_value$1]() {
    return this[_value$4];
  }
  set [_value$1](value) {
    super[_value$1] = value;
  }
};
(io.SocketDirection.__ = function(_value) {
  this[_value$4] = _value;
  ;
}).prototype = io.SocketDirection.prototype;
;
dart.setLibraryUri(io.SocketDirection, "dart:io");
;
dart.defineLazy(io.SocketDirection, {
  /*io.SocketDirection.receive*/get receive() {
    return C235 || CT.C235;
  },
  /*io.SocketDirection.send*/get send() {
    return C236 || CT.C236;
  },
  /*io.SocketDirection.both*/get both() {
    return C237 || CT.C237;
  },
  /*io.SocketDirection.RECEIVE*/get RECEIVE() {
    return C235 || CT.C235;
  },
  /*io.SocketDirection.SEND*/get SEND() {
    return C236 || CT.C236;
  },
  /*io.SocketDirection.BOTH*/get BOTH() {
    return C237 || CT.C237;
  }
});
const _value$5 = dart.privateName(io, "SocketOption._value");
let C238;
let C239;
let C240;
let C241;
let C242;
io.SocketOption = class SocketOption extends core.Object {
  get [_value$1]() {
    return this[_value$5];
  }
  set [_value$1](value) {
    super[_value$1] = value;
  }
};
(io.SocketOption.__ = function(_value) {
  this[_value$5] = _value;
  ;
}).prototype = io.SocketOption.prototype;
;
dart.setLibraryUri(io.SocketOption, "dart:io");
;
dart.defineLazy(io.SocketOption, {
  /*io.SocketOption.tcpNoDelay*/get tcpNoDelay() {
    return C238 || CT.C238;
  },
  /*io.SocketOption.TCP_NODELAY*/get TCP_NODELAY() {
    return C238 || CT.C238;
  },
  /*io.SocketOption._ipMulticastLoop*/get _ipMulticastLoop() {
    return C239 || CT.C239;
  },
  /*io.SocketOption._ipMulticastHops*/get _ipMulticastHops() {
    return C240 || CT.C240;
  },
  /*io.SocketOption._ipMulticastIf*/get _ipMulticastIf() {
    return C241 || CT.C241;
  },
  /*io.SocketOption._ipBroadcast*/get _ipBroadcast() {
    return C242 || CT.C242;
  }
});
let C243;
let C244;
let C245;
let C246;
let C247;
let C248;
let C249;
let C250;
io._RawSocketOptions = class _RawSocketOptions extends core.Object {
  toString() {
    return this[_name$5];
  }
};
(io._RawSocketOptions.new = function(index, _name) {
  this.index = index;
  this[_name$5] = _name;
  ;
}).prototype = io._RawSocketOptions.prototype;
;
dart.setLibraryUri(io._RawSocketOptions, "dart:io");
;
dart.defineExtensionMethods(io._RawSocketOptions, ['toString']);
io._RawSocketOptions.SOL_SOCKET = C243 || CT.C243;
io._RawSocketOptions.IPPROTO_IP = C244 || CT.C244;
io._RawSocketOptions.IP_MULTICAST_IF = C245 || CT.C245;
io._RawSocketOptions.IPPROTO_IPV6 = C246 || CT.C246;
io._RawSocketOptions.IPV6_MULTICAST_IF = C247 || CT.C247;
io._RawSocketOptions.IPPROTO_TCP = C248 || CT.C248;
io._RawSocketOptions.IPPROTO_UDP = C249 || CT.C249;
io._RawSocketOptions.values = C250 || CT.C250;
const level$2 = dart.privateName(io, "RawSocketOption.level");
const option$ = dart.privateName(io, "RawSocketOption.option");
const value$3 = dart.privateName(io, "RawSocketOption.value");
io.RawSocketOption = class RawSocketOption extends core.Object {
  get level() {
    return this[level$2];
  }
  set level(value) {
    super.level = value;
  }
  get option() {
    return this[option$];
  }
  set option(value) {
    super.option = value;
  }
  get value() {
    return this[value$3];
  }
  set value(value) {
    super.value = value;
  }
  static fromInt(level, option, value) {
    if (value == null) {
      value = 0;
    }
    let list = _native_typed_data.NativeUint8List.new(4);
    let buffer = typed_data.ByteData.view(list[$buffer]);
    buffer[$setInt32](0, value);
    return new io.RawSocketOption.new(level, option, list);
  }
  static fromBool(level, option, value) {
    return io.RawSocketOption.fromInt(level, option, dart.equals(value, true) ? 1 : 0);
  }
  static get levelSocket() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.SOL_SOCKET.index);
  }
  static get levelIPv4() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPPROTO_IP.index);
  }
  static get IPv4MulticastInterface() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IP_MULTICAST_IF.index);
  }
  static get levelIPv6() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPPROTO_IPV6.index);
  }
  static get IPv6MulticastInterface() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPV6_MULTICAST_IF.index);
  }
  static get levelTcp() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPPROTO_TCP.index);
  }
  static get levelUdp() {
    return io.RawSocketOption._getOptionValue(io._RawSocketOptions.IPPROTO_UDP.index);
  }
  static _getOptionValue(key) {
    dart.throw(new core.UnsupportedError.new("RawSocketOption._getOptionValue"));
  }
};
(io.RawSocketOption.new = function(level, option, value) {
  this[level$2] = level;
  this[option$] = option;
  this[value$3] = value;
  ;
}).prototype = io.RawSocketOption.prototype;
;
dart.setLibraryUri(io.RawSocketOption, "dart:io");
;
const _is_ConnectionTask_default = Symbol('_is_ConnectionTask_default');
const socket$ = dart.privateName(io, "ConnectionTask.socket");
io.ConnectionTask$ = dart.generic(S => {
  class ConnectionTask extends core.Object {
    get socket() {
      return this[socket$];
    }
    set socket(value) {
      super.socket = value;
    }
    cancel() {
      this[_onCancel$]();
    }
  }
  (ConnectionTask.__ = function(opts) {
    let socket = opts && 'socket' in opts ? opts.socket : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    if (!(socket != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/socket.dart", 558, 16, "socket != null");
    if (!(onCancel != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/socket.dart", 559, 16, "onCancel != null");
    this[socket$] = socket;
    this[_onCancel$] = onCancel;
    ;
  }).prototype = ConnectionTask.prototype;
  ;
  ConnectionTask.prototype[_is_ConnectionTask_default] = true;
  ;
  dart.setLibraryUri(ConnectionTask, "dart:io");
  ;
  return ConnectionTask;
});
io.ConnectionTask = io.ConnectionTask$();
;
const readEventsEnabled = dart.privateName(io, "RawSocket.readEventsEnabled");
const writeEventsEnabled = dart.privateName(io, "RawSocket.writeEventsEnabled");
io.RawSocket = class RawSocket extends core.Object {
  get readEventsEnabled() {
    return this[readEventsEnabled];
  }
  set readEventsEnabled(value) {
    this[readEventsEnabled] = value;
  }
  get writeEventsEnabled() {
    return this[writeEventsEnabled];
  }
  set writeEventsEnabled(value) {
    this[writeEventsEnabled] = value;
  }
  static connect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    dart.throw(new core.UnsupportedError.new("RawSocket constructor"));
  }
  static startConnect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    dart.throw(new core.UnsupportedError.new("RawSocket constructor"));
  }
};
(io.RawSocket.new = function() {
  this[readEventsEnabled] = null;
  this[writeEventsEnabled] = null;
  ;
}).prototype = io.RawSocket.prototype;
io.RawSocket.prototype[dart.isStream] = true;
;
io.RawSocket[dart.implements] = () => [async.Stream$(io.RawSocketEvent)];
dart.setLibraryUri(io.RawSocket, "dart:io");
;
io.Socket = class Socket extends core.Object {
  static connect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.Socket._connect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    return overrides.socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
  }
  static startConnect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let overrides = io.IOOverrides.current;
    if (overrides == null) {
      return io.Socket._startConnect(host, port, {sourceAddress: sourceAddress});
    }
    return overrides.socketStartConnect(host, port, {sourceAddress: sourceAddress});
  }
  static _connect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    dart.throw(new core.UnsupportedError.new("Socket constructor"));
  }
  static _startConnect(host, port, opts) {
    let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
    dart.throw(new core.UnsupportedError.new("Socket constructor"));
  }
};
(io.Socket.new = function() {
  ;
}).prototype = io.Socket.prototype;
io.Socket.prototype[dart.isStream] = true;
;
io.Socket[dart.implements] = () => [async.Stream$(typed_data.Uint8List), io.IOSink];
dart.setLibraryUri(io.Socket, "dart:io");
const data$ = dart.privateName(io, "Datagram.data");
const address$ = dart.privateName(io, "Datagram.address");
const port$ = dart.privateName(io, "Datagram.port");
io.Datagram = class Datagram extends core.Object {
  get data() {
    return this[data$];
  }
  set data(value) {
    this[data$] = value;
  }
  get address() {
    return this[address$];
  }
  set address(value) {
    this[address$] = value;
  }
  get port() {
    return this[port$];
  }
  set port(value) {
    this[port$] = value;
  }
};
(io.Datagram.new = function(data, address, port) {
  this[data$] = data;
  this[address$] = address;
  this[port$] = port;
  ;
}).prototype = io.Datagram.prototype;
;
dart.setLibraryUri(io.Datagram, "dart:io");
;
const readEventsEnabled$ = dart.privateName(io, "RawDatagramSocket.readEventsEnabled");
const writeEventsEnabled$ = dart.privateName(io, "RawDatagramSocket.writeEventsEnabled");
const multicastLoopback = dart.privateName(io, "RawDatagramSocket.multicastLoopback");
const multicastHops = dart.privateName(io, "RawDatagramSocket.multicastHops");
const multicastInterface = dart.privateName(io, "RawDatagramSocket.multicastInterface");
const broadcastEnabled = dart.privateName(io, "RawDatagramSocket.broadcastEnabled");
io.RawDatagramSocket = class RawDatagramSocket extends async.Stream$(io.RawSocketEvent) {
  get readEventsEnabled() {
    return this[readEventsEnabled$];
  }
  set readEventsEnabled(value) {
    this[readEventsEnabled$] = value;
  }
  get writeEventsEnabled() {
    return this[writeEventsEnabled$];
  }
  set writeEventsEnabled(value) {
    this[writeEventsEnabled$] = value;
  }
  get multicastLoopback() {
    return this[multicastLoopback];
  }
  set multicastLoopback(value) {
    this[multicastLoopback] = value;
  }
  get multicastHops() {
    return this[multicastHops];
  }
  set multicastHops(value) {
    this[multicastHops] = value;
  }
  get multicastInterface() {
    return this[multicastInterface];
  }
  set multicastInterface(value) {
    this[multicastInterface] = value;
  }
  get broadcastEnabled() {
    return this[broadcastEnabled];
  }
  set broadcastEnabled(value) {
    this[broadcastEnabled] = value;
  }
  static bind(host, port, opts) {
    let reuseAddress = opts && 'reuseAddress' in opts ? opts.reuseAddress : true;
    let reusePort = opts && 'reusePort' in opts ? opts.reusePort : false;
    let ttl = opts && 'ttl' in opts ? opts.ttl : 1;
    dart.throw(new core.UnsupportedError.new("RawDatagramSocket.bind"));
  }
};
(io.RawDatagramSocket.new = function() {
  this[readEventsEnabled$] = null;
  this[writeEventsEnabled$] = null;
  this[multicastLoopback] = null;
  this[multicastHops] = null;
  this[multicastInterface] = null;
  this[broadcastEnabled] = null;
  io.RawDatagramSocket.__proto__.new.call(this);
  ;
}).prototype = io.RawDatagramSocket.prototype;
;
dart.setLibraryUri(io.RawDatagramSocket, "dart:io");
;
const message$9 = dart.privateName(io, "SocketException.message");
const osError$2 = dart.privateName(io, "SocketException.osError");
const address$0 = dart.privateName(io, "SocketException.address");
const port$0 = dart.privateName(io, "SocketException.port");
io.SocketException = class SocketException extends core.Object {
  get message() {
    return this[message$9];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$2];
  }
  set osError(value) {
    super.osError = value;
  }
  get address() {
    return this[address$0];
  }
  set address(value) {
    super.address = value;
  }
  get port() {
    return this[port$0];
  }
  set port(value) {
    super.port = value;
  }
  toString() {
    let sb = new core.StringBuffer.new();
    sb.write("SocketException");
    if (this.message[$isNotEmpty]) {
      sb.write(": " + dart.str(this.message));
      if (this.osError != null) {
        sb.write(" (" + dart.str(this.osError) + ")");
      }
    } else if (this.osError != null) {
      sb.write(": " + dart.str(this.osError));
    }
    if (this.address != null) {
      sb.write(", address = " + dart.str(this.address.host));
    }
    if (this.port != null) {
      sb.write(", port = " + dart.str(this.port));
    }
    return sb.toString();
  }
};
(io.SocketException.new = function(message, opts) {
  let osError = opts && 'osError' in opts ? opts.osError : null;
  let address = opts && 'address' in opts ? opts.address : null;
  let port = opts && 'port' in opts ? opts.port : null;
  this[message$9] = message;
  this[osError$2] = osError;
  this[address$0] = address;
  this[port$0] = port;
  ;
}).prototype = io.SocketException.prototype;
(io.SocketException.closed = function() {
  this[message$9] = "Socket has been closed";
  this[osError$2] = null;
  this[address$0] = null;
  this[port$0] = null;
  ;
}).prototype = io.SocketException.prototype;
;
io.SocketException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.SocketException, "dart:io");
;
dart.defineExtensionMethods(io.SocketException, ['toString']);
io._StdStream = class _StdStream extends async.Stream$(core.List$(core.int)) {
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_stream$0].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
};
(io._StdStream.new = function(_stream) {
  this[_stream$0] = _stream;
  io._StdStream.__proto__.new.call(this);
  ;
}).prototype = io._StdStream.prototype;
;
;
dart.setLibraryUri(io._StdStream, "dart:io");
;
const _fd$ = dart.privateName(io, "_fd");
io.Stdin = class Stdin extends io._StdStream {
  readLineSync(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C197 || CT.C197;
    let retainNewlines = opts && 'retainNewlines' in opts ? opts.retainNewlines : false;
    let line = JSArrayOfint().of([]);
    let crIsNewline = dart.test(io.Platform.isWindows) && dart.equals(io.stdioType(io.stdin), io.StdioType.terminal) && !dart.test(this.lineMode);
    if (dart.test(retainNewlines)) {
      let byte = null;
      do {
        byte = this.readByteSync();
        if (dart.notNull(byte) < 0) {
          break;
        }
        line[$add](byte);
      } while (byte !== 10 && !(byte === 13 && crIsNewline));
      if (dart.test(line[$isEmpty])) {
        return null;
      }
    } else if (crIsNewline) {
      while (true) {
        let byte = this.readByteSync();
        if (dart.notNull(byte) < 0) {
          if (dart.test(line[$isEmpty])) return null;
          break;
        }
        if (byte === 10 || byte === 13) break;
        line[$add](byte);
      }
    } else {
      L3:
        while (true) {
          let byte = this.readByteSync();
          if (byte === 10) break;
          if (byte === 13) {
            do {
              byte = this.readByteSync();
              if (byte === 10) break L3;
              line[$add](13);
            } while (byte === 13);
          }
          if (dart.notNull(byte) < 0) {
            if (dart.test(line[$isEmpty])) return null;
            break;
          }
          line[$add](byte);
        }
    }
    return encoding.decode(line);
  }
  get echoMode() {
    dart.throw(new core.UnsupportedError.new("Stdin.echoMode"));
  }
  set echoMode(enabled) {
    dart.throw(new core.UnsupportedError.new("Stdin.echoMode"));
  }
  get lineMode() {
    dart.throw(new core.UnsupportedError.new("Stdin.lineMode"));
  }
  set lineMode(enabled) {
    dart.throw(new core.UnsupportedError.new("Stdin.lineMode"));
  }
  get supportsAnsiEscapes() {
    dart.throw(new core.UnsupportedError.new("Stdin.supportsAnsiEscapes"));
  }
  readByteSync() {
    dart.throw(new core.UnsupportedError.new("Stdin.readByteSync"));
  }
  get hasTerminal() {
    try {
      return dart.equals(io.stdioType(this), io.StdioType.terminal);
    } catch (e) {
      let _ = dart.getThrown(e);
      if (io.FileSystemException.is(_)) {
        return false;
      } else
        throw e;
    }
  }
};
(io.Stdin.__ = function(stream, _fd) {
  this[_fd$] = _fd;
  io.Stdin.__proto__.new.call(this, stream);
  ;
}).prototype = io.Stdin.prototype;
io.Stdin.prototype[dart.isStream] = true;
;
io.Stdin[dart.implements] = () => [async.Stream$(core.List$(core.int))];
;
dart.setGetterSignature(io.Stdin, () => ({
  __proto__: dart.getGetters(io.Stdin.__proto__),
  echoMode: core.bool,
  lineMode: core.bool,
  supportsAnsiEscapes: core.bool,
  hasTerminal: core.bool
}));
dart.setSetterSignature(io.Stdin, () => ({
  __proto__: dart.getSetters(io.Stdin.__proto__),
  echoMode: core.bool,
  lineMode: core.bool
}));
dart.setLibraryUri(io.Stdin, "dart:io");
;
const _nonBlocking = dart.privateName(io, "_nonBlocking");
const _hasTerminal = dart.privateName(io, "_hasTerminal");
const _terminalColumns = dart.privateName(io, "_terminalColumns");
const _terminalLines = dart.privateName(io, "_terminalLines");
io._StdSink = class _StdSink extends core.Object {
  get encoding() {
    return this[_sink$1].encoding;
  }
  set encoding(encoding) {
    this[_sink$1].encoding = encoding;
  }
  write(object) {
    this[_sink$1].write(object);
  }
  writeln(object) {
    if (object === void 0) object = "";
    this[_sink$1].writeln(object);
  }
  writeAll(objects, sep) {
    if (sep === void 0) sep = "";
    this[_sink$1].writeAll(objects, sep);
  }
  add(data) {
    ListOfint()._check(data);
    this[_sink$1].add(data);
  }
  addError(error, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    this[_sink$1].addError(error, stackTrace);
  }
  writeCharCode(charCode) {
    this[_sink$1].writeCharCode(charCode);
  }
  addStream(stream) {
    StreamOfListOfint()._check(stream);
    return this[_sink$1].addStream(stream);
  }
  flush() {
    return this[_sink$1].flush();
  }
  close() {
    return this[_sink$1].close();
  }
  get done() {
    return this[_sink$1].done;
  }
};
(io._StdSink.new = function(_sink) {
  this[_sink$1] = _sink;
  ;
}).prototype = io._StdSink.prototype;
;
io._StdSink[dart.implements] = () => [io.IOSink];
;
dart.setGetterSignature(io._StdSink, () => ({
  __proto__: dart.getGetters(io._StdSink.__proto__),
  encoding: convert.Encoding,
  done: async.Future
}));
dart.setSetterSignature(io._StdSink, () => ({
  __proto__: dart.getSetters(io._StdSink.__proto__),
  encoding: convert.Encoding
}));
dart.setLibraryUri(io._StdSink, "dart:io");
;
io.Stdout = class Stdout extends io._StdSink {
  get hasTerminal() {
    return this[_hasTerminal](this[_fd$]);
  }
  get terminalColumns() {
    return this[_terminalColumns](this[_fd$]);
  }
  get terminalLines() {
    return this[_terminalLines](this[_fd$]);
  }
  get supportsAnsiEscapes() {
    return io.Stdout._supportsAnsiEscapes(this[_fd$]);
  }
  [_hasTerminal](fd) {
    dart.throw(new core.UnsupportedError.new("Stdout.hasTerminal"));
  }
  [_terminalColumns](fd) {
    dart.throw(new core.UnsupportedError.new("Stdout.terminalColumns"));
  }
  [_terminalLines](fd) {
    dart.throw(new core.UnsupportedError.new("Stdout.terminalLines"));
  }
  static _supportsAnsiEscapes(fd) {
    dart.throw(new core.UnsupportedError.new("Stdout.supportsAnsiEscapes"));
  }
  get nonBlocking() {
    this[_nonBlocking] == null ? this[_nonBlocking] = io.IOSink.new(new io._FileStreamConsumer.fromStdio(this[_fd$])) : null;
    return this[_nonBlocking];
  }
};
(io.Stdout.__ = function(sink, _fd) {
  this[_nonBlocking] = null;
  this[_fd$] = _fd;
  io.Stdout.__proto__.new.call(this, sink);
  ;
}).prototype = io.Stdout.prototype;
;
io.Stdout[dart.implements] = () => [io.IOSink];
;
dart.setGetterSignature(io.Stdout, () => ({
  __proto__: dart.getGetters(io.Stdout.__proto__),
  hasTerminal: core.bool,
  terminalColumns: core.int,
  terminalLines: core.int,
  supportsAnsiEscapes: core.bool,
  nonBlocking: io.IOSink
}));
dart.setLibraryUri(io.Stdout, "dart:io");
;
const message$10 = dart.privateName(io, "StdoutException.message");
const osError$3 = dart.privateName(io, "StdoutException.osError");
io.StdoutException = class StdoutException extends core.Object {
  get message() {
    return this[message$10];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$3];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    return "StdoutException: " + dart.str(this.message) + (this.osError == null ? "" : ", " + dart.str(this.osError));
  }
};
(io.StdoutException.new = function(message, osError) {
  if (osError === void 0) osError = null;
  this[message$10] = message;
  this[osError$3] = osError;
  ;
}).prototype = io.StdoutException.prototype;
;
io.StdoutException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.StdoutException, "dart:io");
;
dart.defineExtensionMethods(io.StdoutException, ['toString']);
const message$11 = dart.privateName(io, "StdinException.message");
const osError$4 = dart.privateName(io, "StdinException.osError");
io.StdinException = class StdinException extends core.Object {
  get message() {
    return this[message$11];
  }
  set message(value) {
    super.message = value;
  }
  get osError() {
    return this[osError$4];
  }
  set osError(value) {
    super.osError = value;
  }
  toString() {
    return "StdinException: " + dart.str(this.message) + (this.osError == null ? "" : ", " + dart.str(this.osError));
  }
};
(io.StdinException.new = function(message, osError) {
  if (osError === void 0) osError = null;
  this[message$11] = message;
  this[osError$4] = osError;
  ;
}).prototype = io.StdinException.prototype;
;
io.StdinException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(io.StdinException, "dart:io");
;
dart.defineExtensionMethods(io.StdinException, ['toString']);
io._StdConsumer = class _StdConsumer extends core.Object {
  addStream(stream) {
    StreamOfListOfint()._check(stream);
    let completer = async.Completer.new();
    let sub = null;
    sub = stream.listen(dart.fn(data => {
      try {
        dart.dsend(this[_file$], 'writeFromSync', [data]);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        dart.dsend(sub, 'cancel', []);
        completer.completeError(e, s);
      }
    }, ListOfintToNull()), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(completer, 'complete'), cancelOnError: true});
    return completer.future;
  }
  close() {
    dart.dsend(this[_file$], 'closeSync', []);
    return async.Future.value();
  }
};
(io._StdConsumer.new = function(fd) {
  this[_file$] = io._File._openStdioSync(fd);
  ;
}).prototype = io._StdConsumer.prototype;
;
io._StdConsumer[dart.implements] = () => [async.StreamConsumer$(core.List$(core.int))];
;
dart.setLibraryUri(io._StdConsumer, "dart:io");
;
const name$10 = dart.privateName(io, "StdioType.name");
let C251;
let C252;
let C253;
let C254;
io.StdioType = class StdioType extends core.Object {
  get name() {
    return this[name$10];
  }
  set name(value) {
    super.name = value;
  }
  toString() {
    return "StdioType: " + dart.str(this.name);
  }
};
(io.StdioType.__ = function(name) {
  this[name$10] = name;
  ;
}).prototype = io.StdioType.prototype;
;
dart.setLibraryUri(io.StdioType, "dart:io");
;
dart.defineExtensionMethods(io.StdioType, ['toString']);
dart.defineLazy(io.StdioType, {
  /*io.StdioType.terminal*/get terminal() {
    return C251 || CT.C251;
  },
  /*io.StdioType.pipe*/get pipe() {
    return C252 || CT.C252;
  },
  /*io.StdioType.file*/get file() {
    return C253 || CT.C253;
  },
  /*io.StdioType.other*/get other() {
    return C254 || CT.C254;
  },
  /*io.StdioType.TERMINAL*/get TERMINAL() {
    return C251 || CT.C251;
  },
  /*io.StdioType.PIPE*/get PIPE() {
    return C252 || CT.C252;
  },
  /*io.StdioType.FILE*/get FILE() {
    return C253 || CT.C253;
  },
  /*io.StdioType.OTHER*/get OTHER() {
    return C254 || CT.C254;
  }
});
io._StdIOUtils = class _StdIOUtils extends core.Object {
  static _getStdioOutputStream(fd) {
    dart.throw(new core.UnsupportedError.new("StdIOUtils._getStdioOutputStream"));
  }
  static _getStdioInputStream(fd) {
    dart.throw(new core.UnsupportedError.new("StdIOUtils._getStdioInputStream"));
  }
  static _socketType(socket) {
    dart.throw(new core.UnsupportedError.new("StdIOUtils._socketType"));
  }
  static _getStdioHandleType(fd) {
    dart.throw(new core.UnsupportedError.new("StdIOUtils._getStdioHandleType"));
  }
};
(io._StdIOUtils.new = function() {
  ;
}).prototype = io._StdIOUtils.prototype;
;
dart.setLibraryUri(io._StdIOUtils, "dart:io");
let C255;
let C256;
let C257;
io.SystemEncoding = class SystemEncoding extends convert.Encoding {
  get name() {
    return "system";
  }
  encode(input) {
    core.String._check(input);
    return this.encoder.convert(input);
  }
  decode(encoded) {
    ListOfint()._check(encoded);
    return this.decoder.convert(encoded);
  }
  get encoder() {
    if (io.Platform.operatingSystem === "windows") {
      return C255 || CT.C255;
    } else {
      return C160 || CT.C160;
    }
  }
  get decoder() {
    if (io.Platform.operatingSystem === "windows") {
      return C256 || CT.C256;
    } else {
      return C257 || CT.C257;
    }
  }
};
(io.SystemEncoding.new = function() {
  io.SystemEncoding.__proto__.new.call(this);
  ;
}).prototype = io.SystemEncoding.prototype;
;
dart.setGetterSignature(io.SystemEncoding, () => ({
  __proto__: dart.getGetters(io.SystemEncoding.__proto__),
  name: core.String,
  encoder: convert.Converter$(core.String, core.List$(core.int)),
  decoder: convert.Converter$(core.List$(core.int), core.String)
}));
dart.setLibraryUri(io.SystemEncoding, "dart:io");
io._WindowsCodePageEncoder = class _WindowsCodePageEncoder extends convert.Converter$(core.String, core.List$(core.int)) {
  convert(input) {
    core.String._check(input);
    let encoded = io._WindowsCodePageEncoder._encodeString(input);
    if (encoded == null) {
      dart.throw(new core.FormatException.new("Invalid character for encoding"));
    }
    return encoded;
  }
  startChunkedConversion(sink) {
    SinkOfListOfint()._check(sink);
    return new io._WindowsCodePageEncoderSink.new(sink);
  }
  static _encodeString(string) {
    dart.throw(new core.UnsupportedError.new("_WindowsCodePageEncoder._encodeString"));
  }
};
(io._WindowsCodePageEncoder.new = function() {
  io._WindowsCodePageEncoder.__proto__.new.call(this);
  ;
}).prototype = io._WindowsCodePageEncoder.prototype;
;
;
dart.setLibraryUri(io._WindowsCodePageEncoder, "dart:io");
io._WindowsCodePageEncoderSink = class _WindowsCodePageEncoderSink extends convert.StringConversionSinkBase {
  close() {
    this[_sink$1].close();
  }
  add(string) {
    core.String._check(string);
    let encoded = io._WindowsCodePageEncoder._encodeString(string);
    if (encoded == null) {
      dart.throw(new core.FormatException.new("Invalid character for encoding"));
    }
    this[_sink$1].add(encoded);
  }
  addSlice(source, start, end, isLast) {
    if (start !== 0 || end !== source.length) {
      source = source[$substring](start, end);
    }
    this.add(source);
    if (dart.test(isLast)) this.close();
  }
};
(io._WindowsCodePageEncoderSink.new = function(_sink) {
  this[_sink$1] = _sink;
  ;
}).prototype = io._WindowsCodePageEncoderSink.prototype;
;
;
dart.setLibraryUri(io._WindowsCodePageEncoderSink, "dart:io");
;
io._WindowsCodePageDecoder = class _WindowsCodePageDecoder extends convert.Converter$(core.List$(core.int), core.String) {
  convert(input) {
    ListOfint()._check(input);
    return io._WindowsCodePageDecoder._decodeBytes(input);
  }
  startChunkedConversion(sink) {
    SinkOfString()._check(sink);
    return new io._WindowsCodePageDecoderSink.new(sink);
  }
  static _decodeBytes(bytes) {
    dart.throw(new core.UnsupportedError.new("_WindowsCodePageDecoder._decodeBytes"));
  }
};
(io._WindowsCodePageDecoder.new = function() {
  io._WindowsCodePageDecoder.__proto__.new.call(this);
  ;
}).prototype = io._WindowsCodePageDecoder.prototype;
;
;
dart.setLibraryUri(io._WindowsCodePageDecoder, "dart:io");
io._WindowsCodePageDecoderSink = class _WindowsCodePageDecoderSink extends convert.ByteConversionSinkBase {
  close() {
    this[_sink$1].close();
  }
  add(bytes) {
    ListOfint()._check(bytes);
    this[_sink$1].add(io._WindowsCodePageDecoder._decodeBytes(bytes));
  }
};
(io._WindowsCodePageDecoderSink.new = function(_sink) {
  this[_sink$1] = _sink;
  io._WindowsCodePageDecoderSink.__proto__.new.call(this);
  ;
}).prototype = io._WindowsCodePageDecoderSink.prototype;
;
;
dart.setLibraryUri(io._WindowsCodePageDecoderSink, "dart:io");
;
io.RawSynchronousSocket = class RawSynchronousSocket extends core.Object {
  static connectSync(host, port) {
    dart.throw(new core.UnsupportedError.new("RawSynchronousSocket.connectSync"));
  }
};
(io.RawSynchronousSocket.new = function() {
  ;
}).prototype = io.RawSynchronousSocket.prototype;
;
dart.setLibraryUri(io.RawSynchronousSocket, "dart:io");
let C258;
io._isErrorResponse = function _isErrorResponse$(response) {
  return core.List.is(response) && !dart.equals(response[$_get](0), 0);
};
io._exceptionFromResponse = function _exceptionFromResponse$(response, message, path) {
  if (!dart.test(io._isErrorResponse(response))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/io/common.dart", 28, 10, "_isErrorResponse(response)");
  switch (dart.dsend(response, '_get', [0])) {
    case 1:
    {
      return new core.ArgumentError.new(dart.str(message) + ": " + dart.str(path));
    }
    case 2:
    {
      let err = new io.OSError.new(core.String._check(dart.dsend(response, '_get', [2])), core.int._check(dart.dsend(response, '_get', [1])));
      return new io.FileSystemException.new(message, path, err);
    }
    case 3:
    {
      return new io.FileSystemException.new("File closed", path);
    }
    default:
    {
      return core.Exception.new("Unknown error");
    }
  }
};
io._ensureFastAndSerializableByteData = function _ensureFastAndSerializableByteData(buffer, start, end) {
  if (typed_data.Uint8List.is(buffer) || typed_data.Int8List.is(buffer)) {
    return new io._BufferAndStart.new(buffer, start);
  }
  let length = dart.notNull(end) - dart.notNull(start);
  let newBuffer = _native_typed_data.NativeUint8List.new(length);
  let j = start;
  for (let i = 0; i < length; i = i + 1) {
    let value = buffer[$_get](j);
    if (value == null) dart.throw(new core.ArgumentError.new("List element is null at index " + dart.str(j)));
    newBuffer[$_set](i, value);
    j = dart.notNull(j) + 1;
  }
  return new io._BufferAndStart.new(newBuffer, 0);
};
io._validateZLibWindowBits = function _validateZLibWindowBits(windowBits) {
  if (8 > dart.notNull(windowBits) || 15 < dart.notNull(windowBits)) {
    dart.throw(new core.RangeError.range(windowBits, 8, 15));
  }
};
io._validateZLibeLevel = function _validateZLibeLevel(level) {
  if (-1 > dart.notNull(level) || 9 < dart.notNull(level)) {
    dart.throw(new core.RangeError.range(level, -1, 9));
  }
};
io._validateZLibMemLevel = function _validateZLibMemLevel(memLevel) {
  if (1 > dart.notNull(memLevel) || 9 < dart.notNull(memLevel)) {
    dart.throw(new core.RangeError.range(memLevel, 1, 9));
  }
};
io._validateZLibStrategy = function _validateZLibStrategy(strategy) {
  let strategies = C258 || CT.C258;
  if (strategies[$indexOf](strategy) === -1) {
    dart.throw(new core.ArgumentError.new("Unsupported 'strategy'"));
  }
};
io.exit = function exit(code) {
  core.ArgumentError.checkNotNull(code, "code");
  if (!dart.test(io._EmbedderConfig._mayExit)) {
    dart.throw(new core.UnsupportedError.new("This embedder disallows calling dart:io's exit()"));
  }
  io._ProcessUtils._exit(code);
};
io.sleep = function sleep(duration) {
  let milliseconds = duration.inMilliseconds;
  if (dart.notNull(milliseconds) < 0) {
    dart.throw(new core.ArgumentError.new("sleep: duration cannot be negative"));
  }
  if (!dart.test(io._EmbedderConfig._maySleep)) {
    dart.throw(new core.UnsupportedError.new("This embedder disallows calling dart:io's sleep()"));
  }
  io._ProcessUtils._sleep(milliseconds);
};
io._setStdioFDs = function _setStdioFDs(stdin, stdout, stderr) {
  io._stdinFD = stdin;
  io._stdoutFD = stdout;
  io._stderrFD = stderr;
};
io.stdioType = function stdioType(object) {
  if (io._StdStream.is(object)) {
    object = dart.dload(object, _stream$0);
  } else if (dart.equals(object, io.stdout) || dart.equals(object, io.stderr)) {
    let stdiofd = dart.equals(object, io.stdout) ? io._stdoutFD : io._stderrFD;
    switch (io._StdIOUtils._getStdioHandleType(stdiofd)) {
      case 0:
      {
        return io.StdioType.terminal;
      }
      case 1:
      {
        return io.StdioType.pipe;
      }
      case 2:
      {
        return io.StdioType.file;
      }
    }
  }
  if (io._FileStream.is(object)) {
    return io.StdioType.file;
  }
  if (io.Socket.is(object)) {
    let socketType = io._StdIOUtils._socketType(object);
    if (socketType == null) return io.StdioType.other;
    switch (socketType) {
      case 0:
      {
        return io.StdioType.terminal;
      }
      case 1:
      {
        return io.StdioType.pipe;
      }
      case 2:
      {
        return io.StdioType.file;
      }
    }
  }
  if (io._IOSinkImpl.is(object)) {
    try {
      if (io._FileStreamConsumer.is(object[_target$0])) {
        return io.StdioType.file;
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
    }
  }
  return io.StdioType.other;
};
dart.copyProperties(io, {
  set exitCode(code) {
    core.ArgumentError.checkNotNull(code, "code");
    io._ProcessUtils._setExitCode(code);
  },
  get exitCode() {
    return io._ProcessUtils._getExitCode();
  },
  get pid() {
    return io._ProcessUtils._pid(null);
  },
  get stdin() {
    io._stdin == null ? io._stdin = io._StdIOUtils._getStdioInputStream(io._stdinFD) : null;
    return io._stdin;
  },
  get stdout() {
    io._stdout == null ? io._stdout = io.Stdout._check(io._StdIOUtils._getStdioOutputStream(io._stdoutFD)) : null;
    return io._stdout;
  },
  get stderr() {
    io._stderr == null ? io._stderr = io.Stdout._check(io._StdIOUtils._getStdioOutputStream(io._stderrFD)) : null;
    return io._stderr;
  }
});
let C259;
let C260;
let C261;
dart.defineLazy(io, {
  /*io._successResponse*/get _successResponse() {
    return 0;
  },
  /*io._illegalArgumentResponse*/get _illegalArgumentResponse() {
    return 1;
  },
  /*io._osErrorResponse*/get _osErrorResponse() {
    return 2;
  },
  /*io._fileClosedResponse*/get _fileClosedResponse() {
    return 3;
  },
  /*io._errorResponseErrorType*/get _errorResponseErrorType() {
    return 0;
  },
  /*io._osErrorResponseErrorCode*/get _osErrorResponseErrorCode() {
    return 1;
  },
  /*io._osErrorResponseMessage*/get _osErrorResponseMessage() {
    return 2;
  },
  /*io.zlib*/get zlib() {
    return C259 || CT.C259;
  },
  /*io.ZLIB*/get ZLIB() {
    return C259 || CT.C259;
  },
  /*io.gzip*/get gzip() {
    return C260 || CT.C260;
  },
  /*io.GZIP*/get GZIP() {
    return C260 || CT.C260;
  },
  /*io.READ*/get READ() {
    return C170 || CT.C170;
  },
  /*io.WRITE*/get WRITE() {
    return C171 || CT.C171;
  },
  /*io.APPEND*/get APPEND() {
    return C172 || CT.C172;
  },
  /*io.WRITE_ONLY*/get WRITE_ONLY() {
    return C173 || CT.C173;
  },
  /*io.WRITE_ONLY_APPEND*/get WRITE_ONLY_APPEND() {
    return C174 || CT.C174;
  },
  /*io._blockSize*/get _blockSize() {
    return 65536;
  },
  /*io._ioOverridesToken*/get _ioOverridesToken() {
    return new core.Object.new();
  },
  /*io._asyncRunZoned*/get _asyncRunZoned() {
    return C261 || CT.C261;
  },
  /*io._nextServiceId*/get _nextServiceId() {
    return 1;
  },
  set _nextServiceId(_) {},
  /*io._stdioHandleTypeTerminal*/get _stdioHandleTypeTerminal() {
    return 0;
  },
  /*io._stdioHandleTypePipe*/get _stdioHandleTypePipe() {
    return 1;
  },
  /*io._stdioHandleTypeFile*/get _stdioHandleTypeFile() {
    return 2;
  },
  /*io._stdioHandleTypeSocket*/get _stdioHandleTypeSocket() {
    return 3;
  },
  /*io._stdioHandleTypeOther*/get _stdioHandleTypeOther() {
    return 4;
  },
  /*io._stdin*/get _stdin() {
    return null;
  },
  set _stdin(_) {},
  /*io._stdout*/get _stdout() {
    return null;
  },
  set _stdout(_) {},
  /*io._stderr*/get _stderr() {
    return null;
  },
  set _stderr(_) {},
  /*io._stdinFD*/get _stdinFD() {
    return 0;
  },
  set _stdinFD(_) {},
  /*io._stdoutFD*/get _stdoutFD() {
    return 1;
  },
  set _stdoutFD(_) {},
  /*io._stderrFD*/get _stderrFD() {
    return 2;
  },
  set _stderrFD(_) {},
  /*io.systemEncoding*/get systemEncoding() {
    return C197 || CT.C197;
  },
  /*io.SYSTEM_ENCODING*/get SYSTEM_ENCODING() {
    return C197 || CT.C197;
  }
});
isolate._ReceivePort = class _ReceivePort extends async.Stream {
  close() {
  }
  get sendPort() {
    return isolate._unsupported();
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return isolate._unsupported();
  }
};
(isolate._ReceivePort.new = function() {
  isolate._ReceivePort.__proto__.new.call(this);
  ;
}).prototype = isolate._ReceivePort.prototype;
;
isolate._ReceivePort[dart.implements] = () => [isolate.ReceivePort];
;
dart.setGetterSignature(isolate._ReceivePort, () => ({
  __proto__: dart.getGetters(isolate._ReceivePort.__proto__),
  sendPort: isolate.SendPort
}));
dart.setLibraryUri(isolate._ReceivePort, "dart:isolate");
const message$12 = dart.privateName(isolate, "IsolateSpawnException.message");
isolate.IsolateSpawnException = class IsolateSpawnException extends core.Object {
  get message() {
    return this[message$12];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return "IsolateSpawnException: " + dart.str(this.message);
  }
};
(isolate.IsolateSpawnException.new = function(message) {
  this[message$12] = message;
  ;
}).prototype = isolate.IsolateSpawnException.prototype;
;
isolate.IsolateSpawnException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(isolate.IsolateSpawnException, "dart:isolate");
;
dart.defineExtensionMethods(isolate.IsolateSpawnException, ['toString']);
const _pause = dart.privateName(isolate, "_pause");
const controlPort$ = dart.privateName(isolate, "Isolate.controlPort");
const pauseCapability$ = dart.privateName(isolate, "Isolate.pauseCapability");
const terminateCapability$ = dart.privateName(isolate, "Isolate.terminateCapability");
isolate.Isolate = class Isolate extends core.Object {
  get controlPort() {
    return this[controlPort$];
  }
  set controlPort(value) {
    super.controlPort = value;
  }
  get pauseCapability() {
    return this[pauseCapability$];
  }
  set pauseCapability(value) {
    super.pauseCapability = value;
  }
  get terminateCapability() {
    return this[terminateCapability$];
  }
  set terminateCapability(value) {
    super.terminateCapability = value;
  }
  get debugName() {
    return isolate._unsupported();
  }
  static get current() {
    return isolate._unsupported();
  }
  static get packageRoot() {
    return isolate._unsupported();
  }
  static get packageConfig() {
    return isolate._unsupported();
  }
  static resolvePackageUri(packageUri) {
    return isolate._unsupported();
  }
  static spawn(T, entryPoint, message, opts) {
    let paused = opts && 'paused' in opts ? opts.paused : false;
    let errorsAreFatal = opts && 'errorsAreFatal' in opts ? opts.errorsAreFatal : null;
    let onExit = opts && 'onExit' in opts ? opts.onExit : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return isolate._unsupported();
  }
  static spawnUri(uri, args, message, opts) {
    let paused = opts && 'paused' in opts ? opts.paused : false;
    let onExit = opts && 'onExit' in opts ? opts.onExit : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let errorsAreFatal = opts && 'errorsAreFatal' in opts ? opts.errorsAreFatal : null;
    let checked = opts && 'checked' in opts ? opts.checked : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let packageRoot = opts && 'packageRoot' in opts ? opts.packageRoot : null;
    let packageConfig = opts && 'packageConfig' in opts ? opts.packageConfig : null;
    let automaticPackageResolution = opts && 'automaticPackageResolution' in opts ? opts.automaticPackageResolution : false;
    return isolate._unsupported();
  }
  pause(resumeCapability) {
    if (resumeCapability === void 0) resumeCapability = null;
    resumeCapability == null ? resumeCapability = isolate.Capability.new() : null;
    this[_pause](resumeCapability);
    return resumeCapability;
  }
  [_pause](resumeCapability) {
    return isolate._unsupported();
  }
  resume(resumeCapability) {
    return isolate._unsupported();
  }
  addOnExitListener(responsePort, opts) {
    let response = opts && 'response' in opts ? opts.response : null;
    return isolate._unsupported();
  }
  removeOnExitListener(responsePort) {
    return isolate._unsupported();
  }
  setErrorsFatal(errorsAreFatal) {
    return isolate._unsupported();
  }
  kill(opts) {
    let priority = opts && 'priority' in opts ? opts.priority : 1;
    return isolate._unsupported();
  }
  ping(responsePort, opts) {
    let response = opts && 'response' in opts ? opts.response : null;
    let priority = opts && 'priority' in opts ? opts.priority : 0;
    return isolate._unsupported();
  }
  addErrorListener(port) {
    return isolate._unsupported();
  }
  removeErrorListener(port) {
    return isolate._unsupported();
  }
  get errors() {
    let controller = null;
    let port = null;
    function handleError(message) {
      let listMessage = core.List._check(message);
      let errorDescription = core.String._check(listMessage[$_get](0));
      let stackDescription = core.String._check(listMessage[$_get](1));
      let error = new isolate.RemoteError.new(errorDescription, stackDescription);
      controller.addError(error, error.stackTrace);
    }
    dart.fn(handleError, dynamicTovoid());
    controller = async.StreamController.broadcast({sync: true, onListen: dart.fn(() => {
        port = isolate.RawReceivePort.new(handleError);
        this.addErrorListener(port.sendPort);
      }, VoidToNull()), onCancel: dart.fn(() => {
        this.removeErrorListener(port.sendPort);
        port.close();
        port = null;
      }, VoidToNull())});
    return controller.stream;
  }
};
(isolate.Isolate.new = function(controlPort, opts) {
  let pauseCapability = opts && 'pauseCapability' in opts ? opts.pauseCapability : null;
  let terminateCapability = opts && 'terminateCapability' in opts ? opts.terminateCapability : null;
  this[controlPort$] = controlPort;
  this[pauseCapability$] = pauseCapability;
  this[terminateCapability$] = terminateCapability;
  ;
}).prototype = isolate.Isolate.prototype;
;
;
dart.setGetterSignature(isolate.Isolate, () => ({
  __proto__: dart.getGetters(isolate.Isolate.__proto__),
  debugName: core.String,
  errors: async.Stream
}));
dart.setLibraryUri(isolate.Isolate, "dart:isolate");
;
dart.defineLazy(isolate.Isolate, {
  /*isolate.Isolate.immediate*/get immediate() {
    return 0;
  },
  /*isolate.Isolate.beforeNextEvent*/get beforeNextEvent() {
    return 1;
  }
});
isolate.SendPort = class SendPort extends core.Object {};
(isolate.SendPort.new = function() {
  ;
}).prototype = isolate.SendPort.prototype;
;
isolate.SendPort[dart.implements] = () => [isolate.Capability];
dart.setLibraryUri(isolate.SendPort, "dart:isolate");
isolate.ReceivePort = class ReceivePort extends core.Object {
  static fromRawReceivePort(rawPort) {
    return isolate._unsupported();
  }
};
(isolate.ReceivePort[dart.mixinNew] = function() {
}).prototype = isolate.ReceivePort.prototype;
isolate.ReceivePort.prototype[dart.isStream] = true;
;
isolate.ReceivePort[dart.implements] = () => [async.Stream];
dart.setLibraryUri(isolate.ReceivePort, "dart:isolate");
isolate.RawReceivePort = class RawReceivePort extends core.Object {
  static new(handler) {
    if (handler === void 0) handler = null;
    return isolate._unsupported();
  }
};
(isolate.RawReceivePort[dart.mixinNew] = function() {
}).prototype = isolate.RawReceivePort.prototype;
;
dart.setLibraryUri(isolate.RawReceivePort, "dart:isolate");
const _description = dart.privateName(isolate, "_description");
const stackTrace$0 = dart.privateName(isolate, "RemoteError.stackTrace");
isolate.RemoteError = class RemoteError extends core.Object {
  get stackTrace() {
    return this[stackTrace$0];
  }
  set stackTrace(value) {
    super.stackTrace = value;
  }
  toString() {
    return this[_description];
  }
};
(isolate.RemoteError.new = function(description, stackDescription) {
  this[_description] = description;
  this[stackTrace$0] = new core._StringStackTrace.new(stackDescription);
  ;
}).prototype = isolate.RemoteError.prototype;
;
isolate.RemoteError[dart.implements] = () => [core.Error];
dart.setLibraryUri(isolate.RemoteError, "dart:isolate");
;
dart.defineExtensionMethods(isolate.RemoteError, ['toString']);
dart.defineExtensionAccessors(isolate.RemoteError, ['stackTrace']);
isolate.TransferableTypedData = class TransferableTypedData extends core.Object {
  static fromList(list) {
    return isolate._unsupported();
  }
};
(isolate.TransferableTypedData[dart.mixinNew] = function() {
}).prototype = isolate.TransferableTypedData.prototype;
;
dart.setLibraryUri(isolate.TransferableTypedData, "dart:isolate");
isolate.Capability = class Capability extends core.Object {
  static new() {
    return isolate._unsupported();
  }
};
(isolate.Capability[dart.mixinNew] = function() {
}).prototype = isolate.Capability.prototype;
;
dart.setLibraryUri(isolate.Capability, "dart:isolate");
isolate._unsupported = function _unsupported() {
  dart.throw(new core.UnsupportedError.new("dart:isolate is not supported on dart4web"));
};
const _jsObject$ = dart.privateName(js, "_jsObject");
let C262;
js.JsObject = class JsObject extends core.Object {
  static new(constructor, $arguments) {
    if ($arguments === void 0) $arguments = null;
    let ctor = constructor[_jsObject$];
    if ($arguments == null) {
      return js.JsObject._check(js._wrapToDart(new ctor()));
    }
    let unwrapped = core.List.from($arguments[$map](dart.dynamic, C262 || CT.C262));
    return js.JsObject._check(js._wrapToDart(new ctor(...unwrapped)));
  }
  static fromBrowserObject(object) {
    if (typeof object == 'number' || typeof object == 'string' || typeof object == 'boolean' || object == null) {
      dart.throw(new core.ArgumentError.new("object cannot be a num, string, bool, or null"));
    }
    return js.JsObject._check(js._wrapToDart(js._convertToJS(object)));
  }
  static jsify(object) {
    if (!core.Map.is(object) && !core.Iterable.is(object)) {
      dart.throw(new core.ArgumentError.new("object must be a Map or Iterable"));
    }
    return js.JsObject._check(js._wrapToDart(js.JsObject._convertDataTree(object)));
  }
  static _convertDataTree(data) {
    let _convertedObjects = new _js_helper.IdentityMap.new();
    function _convert(o) {
      if (dart.test(_convertedObjects[$containsKey](o))) {
        return _convertedObjects[$_get](o);
      }
      if (core.Map.is(o)) {
        let convertedMap = {};
        _convertedObjects[$_set](o, convertedMap);
        for (let key of o[$keys]) {
          convertedMap[key] = _convert(o[$_get](key));
        }
        return convertedMap;
      } else if (core.Iterable.is(o)) {
        let convertedList = [];
        _convertedObjects[$_set](o, convertedList);
        convertedList[$addAll](o[$map](dart.dynamic, _convert));
        return convertedList;
      } else {
        return js._convertToJS(o);
      }
    }
    dart.fn(_convert, dynamicTodynamic());
    return _convert(data);
  }
  _get(property) {
    if (!(typeof property == 'string') && !(typeof property == 'number')) {
      dart.throw(new core.ArgumentError.new("property is not a String or num"));
    }
    return js._convertToDart(this[_jsObject$][property]);
  }
  _set(property, value$) {
    let value = value$;
    if (!(typeof property == 'string') && !(typeof property == 'number')) {
      dart.throw(new core.ArgumentError.new("property is not a String or num"));
    }
    this[_jsObject$][property] = js._convertToJS(value);
    return value$;
  }
  get hashCode() {
    return 0;
  }
  _equals(other) {
    return js.JsObject.is(other) && this[_jsObject$] === other[_jsObject$];
  }
  hasProperty(property) {
    if (!(typeof property == 'string') && !(typeof property == 'number')) {
      dart.throw(new core.ArgumentError.new("property is not a String or num"));
    }
    return property in this[_jsObject$];
  }
  deleteProperty(property) {
    if (!(typeof property == 'string') && !(typeof property == 'number')) {
      dart.throw(new core.ArgumentError.new("property is not a String or num"));
    }
    delete this[_jsObject$][property];
  }
  instanceof(type) {
    return this[_jsObject$] instanceof js._convertToJS(type);
  }
  toString() {
    try {
      return String(this[_jsObject$]);
    } catch (e$) {
      let e = dart.getThrown(e$);
      return super[$toString]();
    }
  }
  callMethod(method, args) {
    if (args === void 0) args = null;
    if (!(typeof method == 'string') && !(typeof method == 'number')) {
      dart.throw(new core.ArgumentError.new("method is not a String or num"));
    }
    if (args != null) args = core.List.from(args[$map](dart.dynamic, C262 || CT.C262));
    let fn = this[_jsObject$][method];
    if (typeof fn !== "function") {
      dart.throw(new core.NoSuchMethodError.new(this[_jsObject$], new _internal.Symbol.new(core.String._check(method)), args, new (LinkedMapOfSymbol$dynamic()).new()));
    }
    return js._convertToDart(fn.apply(this[_jsObject$], args));
  }
};
(js.JsObject._fromJs = function(_jsObject) {
  this[_jsObject$] = _jsObject;
  if (!(this[_jsObject$] != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/lib/js/dart2js/js_dart2js.dart", 110, 12, "_jsObject != null");
}).prototype = js.JsObject.prototype;
;
;
dart.setLibraryUri(js.JsObject, "dart:js");
;
dart.defineExtensionMethods(js.JsObject, ['_equals', 'toString']);
dart.defineExtensionAccessors(js.JsObject, ['hashCode']);
js.JsFunction = class JsFunction extends js.JsObject {
  static withThis(f) {
    return new js.JsFunction._fromJs(function() {
      let args = [js._convertToDart(this)];
      for (let arg of arguments) {
        args.push(js._convertToDart(arg));
      }
      return js._convertToJS(f(...args));
    });
  }
  apply(args, opts) {
    let thisArg = opts && 'thisArg' in opts ? opts.thisArg : null;
    return js._convertToDart(this[_jsObject$].apply(js._convertToJS(thisArg), args == null ? null : core.List.from(args[$map](dart.dynamic, js._convertToJS))));
  }
};
(js.JsFunction._fromJs = function(jsObject) {
  js.JsFunction.__proto__._fromJs.call(this, jsObject);
  ;
}).prototype = js.JsFunction.prototype;
;
;
dart.setLibraryUri(js.JsFunction, "dart:js");
const _checkIndex = dart.privateName(js, "_checkIndex");
const _checkInsertIndex = dart.privateName(js, "_checkInsertIndex");
const _is_JsArray_default = Symbol('_is_JsArray_default');
js.JsArray$ = dart.generic(E => {
  let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
  const JsObject_ListMixin$36 = class JsObject_ListMixin extends js.JsObject {};
  (JsObject_ListMixin$36._fromJs = function(_jsObject) {
    JsObject_ListMixin$36.__proto__._fromJs.call(this, _jsObject);
  }).prototype = JsObject_ListMixin$36.prototype;
  dart.applyMixin(JsObject_ListMixin$36, collection.ListMixin$(E));
  class JsArray extends JsObject_ListMixin$36 {
    [_checkIndex](index) {
      if (core.int.is(index) && (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(this.length))) {
        dart.throw(new core.RangeError.range(index, 0, this.length));
      }
    }
    [_checkInsertIndex](index) {
      if (core.int.is(index) && (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(this.length) + 1)) {
        dart.throw(new core.RangeError.range(index, 0, this.length));
      }
    }
    static _checkRange(start, end, length) {
      if (dart.notNull(start) < 0 || dart.notNull(start) > dart.notNull(length)) {
        dart.throw(new core.RangeError.range(start, 0, length));
      }
      if (dart.notNull(end) < dart.notNull(start) || dart.notNull(end) > dart.notNull(length)) {
        dart.throw(new core.RangeError.range(end, start, length));
      }
    }
    _get(index) {
      if (typeof index == 'number' && index === index[$toInt]()) {
        this[_checkIndex](dart.asInt(index));
      }
      return E.as(super._get(index));
    }
    _set(index, value$) {
      let value = value$;
      E._check(value);
      if (typeof index == 'number' && index === index[$toInt]()) {
        this[_checkIndex](dart.asInt(index));
      }
      super._set(index, value);
      return value$;
    }
    get length() {
      let len = this[_jsObject$].length;
      if (typeof len === "number" && len >>> 0 === len) {
        return len;
      }
      dart.throw(new core.StateError.new("Bad JsArray length"));
    }
    set length(length) {
      super._set("length", length);
    }
    add(value) {
      E._check(value);
      this.callMethod("push", [value]);
    }
    addAll(iterable) {
      IterableOfE()._check(iterable);
      let list = iterable instanceof Array ? iterable : core.List.from(iterable);
      this.callMethod("push", core.List._check(list));
    }
    insert(index, element) {
      E._check(element);
      this[_checkInsertIndex](index);
      this.callMethod("splice", [index, 0, element]);
    }
    removeAt(index) {
      this[_checkIndex](index);
      return E.as(dart.dsend(this.callMethod("splice", [index, 1]), '_get', [0]));
    }
    removeLast() {
      if (this.length === 0) dart.throw(new core.RangeError.new(-1));
      return E.as(this.callMethod("pop"));
    }
    removeRange(start, end) {
      js.JsArray._checkRange(start, end, this.length);
      this.callMethod("splice", [start, dart.notNull(end) - dart.notNull(start)]);
    }
    setRange(start, end, iterable, skipCount) {
      let t93;
      IterableOfE()._check(iterable);
      if (skipCount === void 0) skipCount = 0;
      js.JsArray._checkRange(start, end, this.length);
      let length = dart.notNull(end) - dart.notNull(start);
      if (length === 0) return;
      if (dart.notNull(skipCount) < 0) dart.throw(new core.ArgumentError.new(skipCount));
      let args = (t93 = JSArrayOfObject().of([start, length]), t93[$addAll](iterable[$skip](skipCount)[$take](length)), t93);
      this.callMethod("splice", args);
    }
    sort(compare) {
      if (compare === void 0) compare = null;
      this.callMethod("sort", compare == null ? [] : [compare]);
    }
  }
  (JsArray.new = function() {
    JsArray.__proto__._fromJs.call(this, []);
    ;
  }).prototype = JsArray.prototype;
  (JsArray.from = function(other) {
    let t93;
    JsArray.__proto__._fromJs.call(this, (t93 = [], t93[$addAll](other[$map](dart.dynamic, C262 || CT.C262)), t93));
    ;
  }).prototype = JsArray.prototype;
  (JsArray._fromJs = function(jsObject) {
    JsArray.__proto__._fromJs.call(this, jsObject);
    ;
  }).prototype = JsArray.prototype;
  ;
  JsArray.prototype[_is_JsArray_default] = true;
  ;
  dart.setGetterSignature(JsArray, () => ({
    __proto__: dart.getGetters(JsArray.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setSetterSignature(JsArray, () => ({
    __proto__: dart.getSetters(JsArray.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(JsArray, "dart:js");
  dart.defineExtensionMethods(JsArray, [
    '_get',
    '_set',
    'add',
    'addAll',
    'insert',
    'removeAt',
    'removeLast',
    'removeRange',
    'setRange',
    'sort'
  ]);
  dart.defineExtensionAccessors(JsArray, ['length']);
  return JsArray;
});
js.JsArray = js.JsArray$();
;
const _dartObj$ = dart.privateName(js, "_dartObj");
js._DartObject = class _DartObject extends core.Object {};
(js._DartObject.new = function(_dartObj) {
  this[_dartObj$] = _dartObj;
  ;
}).prototype = js._DartObject.prototype;
;
dart.setLibraryUri(js._DartObject, "dart:js");
;
let C263;
let C264;
js._isBrowserType = function _isBrowserType(o) {
  return o instanceof Object && (o instanceof Blob || o instanceof Event || window.KeyRange && o instanceof KeyRange || window.IDBKeyRange && o instanceof IDBKeyRange || o instanceof ImageData || o instanceof Node || window.Int8Array && o instanceof Int8Array.__proto__ || o instanceof Window);
};
js._convertToJS = function _convertToJS(o) {
  if (o == null || typeof o == 'string' || typeof o == 'number' || typeof o == 'boolean' || dart.test(js._isBrowserType(o))) {
    return o;
  } else if (core.DateTime.is(o)) {
    return _js_helper.Primitives.lazyAsJsDate(o);
  } else if (js.JsObject.is(o)) {
    return o[_jsObject$];
  } else if (core.Function.is(o)) {
    return js._putIfAbsent(js._jsProxies, o, C263 || CT.C263);
  } else {
    return js._putIfAbsent(js._jsProxies, o, dart.fn(o => new js._DartObject.new(o), dynamicTo_DartObject()));
  }
};
js._wrapDartFunction = function _wrapDartFunction(f) {
  let wrapper = function() {
    let args = Array.prototype.map.call(arguments, js._convertToDart);
    return js._convertToJS(f(...args));
  };
  js._dartProxies.set(wrapper, f);
  return wrapper;
};
js._convertToDart = function _convertToDart(o) {
  if (o == null || typeof o == 'string' || typeof o == 'number' || typeof o == 'boolean' || dart.test(js._isBrowserType(o))) {
    return o;
  } else if (o instanceof Date) {
    let ms = o.getTime();
    return new core.DateTime.fromMillisecondsSinceEpoch(dart.asInt(ms));
  } else if (js._DartObject.is(o) && !core.identical(dart.getReifiedType(o), dart.jsobject)) {
    return o[_dartObj$];
  } else {
    return js._wrapToDart(o);
  }
};
js._wrapToDart = function _wrapToDart(o) {
  return js._putIfAbsent(js._dartProxies, o, C264 || CT.C264);
};
js._wrapToDartHelper = function _wrapToDartHelper(o) {
  if (typeof o == "function") {
    return new js.JsFunction._fromJs(o);
  }
  if (o instanceof Array) {
    return new js.JsArray._fromJs(o);
  }
  return new js.JsObject._fromJs(o);
};
js._putIfAbsent = function _putIfAbsent(weakMap, o, getValue) {
  let value = weakMap.get(o);
  if (value == null) {
    value = getValue(o);
    weakMap.set(o, value);
  }
  return value;
};
js.allowInterop = function allowInterop(F, f) {
  if (!dart.test(dart.isDartFunction(f))) return f;
  let ret = js._interopExpando._get(f);
  if (ret == null) {
    ret = function(...args) {
      return dart.dcall(f, args);
    };
    js._interopExpando._set(f, ret);
  }
  return F._check(ret);
};
js.allowInteropCaptureThis = function allowInteropCaptureThis(f) {
  if (!dart.test(dart.isDartFunction(f))) return f;
  let ret = js._interopCaptureThisExpando._get(f);
  if (ret == null) {
    ret = function(...arguments$) {
      let args = [this];
      args.push.apply(args, arguments$);
      return dart.dcall(f, args);
    };
    js._interopCaptureThisExpando._set(f, ret);
  }
  return ret;
};
dart.defineLazy(js, {
  /*js.context*/get context() {
    return js.JsObject._check(js._wrapToDart(dart.global));
  },
  /*js._dartProxies*/get _dartProxies() {
    return new WeakMap();
  },
  /*js._jsProxies*/get _jsProxies() {
    return new WeakMap();
  },
  /*js._interopExpando*/get _interopExpando() {
    return new (ExpandoOfFunction()).new();
  },
  set _interopExpando(_) {},
  /*js._interopCaptureThisExpando*/get _interopCaptureThisExpando() {
    return new (ExpandoOfFunction()).new();
  },
  set _interopCaptureThisExpando(_) {}
});
js_util.jsify = function jsify(object) {
  if (!core.Map.is(object) && !core.Iterable.is(object)) {
    dart.throw(new core.ArgumentError.new("object must be a Map or Iterable"));
  }
  return js_util._convertDataTree(object);
};
js_util._convertDataTree = function _convertDataTree(data) {
  let _convertedObjects = new _js_helper.IdentityMap.new();
  function _convert(o) {
    if (dart.test(_convertedObjects[$containsKey](o))) {
      return _convertedObjects[$_get](o);
    }
    if (core.Map.is(o)) {
      let convertedMap = {};
      _convertedObjects[$_set](o, convertedMap);
      for (let key of o[$keys]) {
        convertedMap[key] = _convert(o[$_get](key));
      }
      return convertedMap;
    } else if (core.Iterable.is(o)) {
      let convertedList = [];
      _convertedObjects[$_set](o, convertedList);
      convertedList[$addAll](o[$map](dart.dynamic, _convert));
      return convertedList;
    } else {
      return o;
    }
  }
  dart.fn(_convert, dynamicTodynamic());
  return _convert(data);
};
js_util.newObject = function newObject() {
  return {};
};
js_util.hasProperty = function hasProperty(o, name) {
  return name in o;
};
js_util.getProperty = function getProperty(o, name) {
  return o[name];
};
js_util.setProperty = function setProperty(o, name, value) {
  return o[name] = value;
};
js_util.callMethod = function callMethod$(o, method, args) {
  return o[method].apply(o, args);
};
js_util.instanceof = function $instanceof(o, type) {
  return o instanceof type;
};
js_util.callConstructor = function callConstructor(constr, $arguments) {
  let t93;
  if ($arguments == null) {
    return new constr();
  }
  if ($arguments instanceof Array) {
    let argumentCount = $arguments.length;
    switch (argumentCount) {
      case 0:
      {
        return new constr();
      }
      case 1:
      {
        let arg0 = $arguments[0];
        return new constr(arg0);
      }
      case 2:
      {
        let arg0 = $arguments[0];
        let arg1 = $arguments[1];
        return new constr(arg0, arg1);
      }
      case 3:
      {
        let arg0 = $arguments[0];
        let arg1 = $arguments[1];
        let arg2 = $arguments[2];
        return new constr(arg0, arg1, arg2);
      }
      case 4:
      {
        let arg0 = $arguments[0];
        let arg1 = $arguments[1];
        let arg2 = $arguments[2];
        let arg3 = $arguments[3];
        return new constr(arg0, arg1, arg2, arg3);
      }
    }
  }
  let args = (t93 = [null], t93[$addAll]($arguments), t93);
  let factoryFunction = constr.bind.apply(constr, args);
  String(factoryFunction);
  return new factoryFunction();
};
js_util.promiseToFuture = function promiseToFuture(T, jsPromise) {
  let completer = async.Completer$(T).new();
  let success = _js_helper.convertDartClosureToJS(dynamicTovoid(), dart.fn(r => completer.complete(async.FutureOr$(T)._check(r)), dynamicTovoid()), 1);
  let error = _js_helper.convertDartClosureToJS(dynamicTovoid(), dart.fn(e => completer.completeError(e), dynamicTovoid()), 1);
  jsPromise.then(success, error);
  return completer.future;
};
math._JSRandom = class _JSRandom extends core.Object {
  nextInt(max) {
    if (dart.notNull(max) <= 0 || dart.notNull(max) > 4294967296.0) {
      dart.throw(new core.RangeError.new("max must be in range 0 < max ≤ 2^32, was " + dart.str(max)));
    }
    return Math.random() * max >>> 0;
  }
  nextDouble() {
    return Math.random();
  }
  nextBool() {
    return Math.random() < 0.5;
  }
};
(math._JSRandom.new = function() {
  ;
}).prototype = math._JSRandom.prototype;
;
math._JSRandom[dart.implements] = () => [math.Random];
;
dart.setLibraryUri(math._JSRandom, "dart:math");
const _lo = dart.privateName(math, "_lo");
const _hi = dart.privateName(math, "_hi");
const _nextState = dart.privateName(math, "_nextState");
math._Random = class _Random extends core.Object {
  [_nextState]() {
    let tmpHi = 4294901760 * this[_lo];
    let tmpHiLo = (tmpHi & 4294967295.0) >>> 0;
    let tmpHiHi = tmpHi - tmpHiLo;
    let tmpLo = 55905 * this[_lo];
    let tmpLoLo = (tmpLo & 4294967295.0) >>> 0;
    let tmpLoHi = tmpLo - tmpLoLo;
    let newLo = tmpLoLo + tmpHiLo + this[_hi];
    this[_lo] = (newLo & 4294967295.0) >>> 0;
    let newLoHi = newLo - this[_lo];
    this[_hi] = (((tmpLoHi + tmpHiHi + newLoHi) / 4294967296.0)[$truncate]() & 4294967295.0) >>> 0;
    if (!(this[_lo] < 4294967296.0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/math_patch.dart", 223, 12, "_lo < _POW2_32");
    if (!(this[_hi] < 4294967296.0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/math_patch.dart", 224, 12, "_hi < _POW2_32");
  }
  nextInt(max) {
    if (max == null) dart.argumentError(max);
    if (max <= 0 || max > 4294967296.0) {
      dart.throw(new core.RangeError.new("max must be in range 0 < max ≤ 2^32, was " + dart.str(max)));
    }
    if ((max & max - 1) === 0) {
      this[_nextState]();
      return (this[_lo] & max - 1) >>> 0;
    }
    let rnd32 = null;
    let result = null;
    do {
      this[_nextState]();
      rnd32 = this[_lo];
      result = rnd32[$remainder](max);
    } while (dart.notNull(rnd32) - dart.notNull(result) + max >= 4294967296.0);
    return result;
  }
  nextDouble() {
    this[_nextState]();
    let bits26 = (this[_lo] & (1 << 26) - 1) >>> 0;
    this[_nextState]();
    let bits27 = (this[_lo] & (1 << 27) - 1) >>> 0;
    return (bits26 * 134217728 + bits27) / 9007199254740992.0;
  }
  nextBool() {
    this[_nextState]();
    return (this[_lo] & 1) === 0;
  }
};
(math._Random.new = function(seed) {
  this[_lo] = 0;
  this[_hi] = 0;
  let empty_seed = 0;
  if (dart.notNull(seed) < 0) {
    empty_seed = -1;
  }
  do {
    let low = (dart.notNull(seed) & 4294967295.0) >>> 0;
    seed = ((dart.notNull(seed) - low) / 4294967296.0)[$truncate]();
    let high = (dart.notNull(seed) & 4294967295.0) >>> 0;
    seed = ((dart.notNull(seed) - high) / 4294967296.0)[$truncate]();
    let tmplow = low << 21 >>> 0;
    let tmphigh = (high << 21 | low[$rightShift](11)) >>> 0;
    tmplow = ((~low & 4294967295.0) >>> 0) + tmplow;
    low = (tmplow & 4294967295.0) >>> 0;
    high = ((~high >>> 0) + tmphigh + ((tmplow - low) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    tmphigh = high[$rightShift](24);
    tmplow = (low[$rightShift](24) | high << 8 >>> 0) >>> 0;
    low = (low ^ tmplow) >>> 0;
    high = (high ^ tmphigh) >>> 0;
    tmplow = low * 265;
    low = (tmplow & 4294967295.0) >>> 0;
    high = (high * 265 + ((tmplow - low) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    tmphigh = high[$rightShift](14);
    tmplow = (low[$rightShift](14) | high << 18 >>> 0) >>> 0;
    low = (low ^ tmplow) >>> 0;
    high = (high ^ tmphigh) >>> 0;
    tmplow = low * 21;
    low = (tmplow & 4294967295.0) >>> 0;
    high = (high * 21 + ((tmplow - low) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    tmphigh = high[$rightShift](28);
    tmplow = (low[$rightShift](28) | high << 4 >>> 0) >>> 0;
    low = (low ^ tmplow) >>> 0;
    high = (high ^ tmphigh) >>> 0;
    tmplow = low << 31 >>> 0;
    tmphigh = (high << 31 | low[$rightShift](1)) >>> 0;
    tmplow = tmplow + low;
    low = (tmplow & 4294967295.0) >>> 0;
    high = (high + tmphigh + ((tmplow - low) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    tmplow = this[_lo] * 1037;
    this[_lo] = (tmplow & 4294967295.0) >>> 0;
    this[_hi] = (this[_hi] * 1037 + ((tmplow - this[_lo]) / 4294967296)[$truncate]() & 4294967295.0) >>> 0;
    this[_lo] = (this[_lo] ^ low) >>> 0;
    this[_hi] = (this[_hi] ^ high) >>> 0;
  } while (seed !== empty_seed);
  if (this[_hi] === 0 && this[_lo] === 0) {
    this[_lo] = 23063;
  }
  this[_nextState]();
  this[_nextState]();
  this[_nextState]();
  this[_nextState]();
}).prototype = math._Random.prototype;
;
math._Random[dart.implements] = () => [math.Random];
;
dart.setLibraryUri(math._Random, "dart:math");
;
dart.defineLazy(math._Random, {
  /*math._Random._POW2_53_D*/get _POW2_53_D() {
    return 9007199254740992.0;
  },
  /*math._Random._POW2_27_D*/get _POW2_27_D() {
    return 134217728;
  },
  /*math._Random._MASK32*/get _MASK32() {
    return 4294967295.0;
  }
});
const _buffer$0 = dart.privateName(math, "_buffer");
const _getRandomBytes = dart.privateName(math, "_getRandomBytes");
math._JSSecureRandom = class _JSSecureRandom extends core.Object {
  [_getRandomBytes](start, length) {
    crypto.getRandomValues(this[_buffer$0][$buffer][$asUint8List](start, length));
  }
  nextBool() {
    this[_getRandomBytes](0, 1);
    return this[_buffer$0][$getUint8](0)[$isOdd];
  }
  nextDouble() {
    this[_getRandomBytes](1, 7);
    this[_buffer$0][$setUint8](0, 63);
    let highByte = this[_buffer$0][$getUint8](1);
    this[_buffer$0][$setUint8](1, (dart.notNull(highByte) | 240) >>> 0);
    let result = dart.notNull(this[_buffer$0][$getFloat64](0)) - 1.0;
    if ((dart.notNull(highByte) & 16) !== 0) {
      result = result + 1.1102230246251565e-16;
    }
    return result;
  }
  nextInt(max) {
    if (max == null) dart.argumentError(max);
    if (max <= 0 || max > 4294967296.0) {
      dart.throw(new core.RangeError.new("max must be in range 0 < max ≤ 2^32, was " + dart.str(max)));
    }
    let byteCount = 1;
    if (max > 255) {
      byteCount = byteCount + 1;
      if (max > 65535) {
        byteCount = byteCount + 1;
        if (max > 16777215) {
          byteCount = byteCount + 1;
        }
      }
    }
    this[_buffer$0][$setUint32](0, 0);
    let start = 4 - byteCount;
    let randomLimit = dart.asInt(math.pow(256, byteCount));
    while (true) {
      this[_getRandomBytes](start, byteCount);
      let random = this[_buffer$0][$getUint32](0);
      if ((max & max - 1) === 0) {
        return (dart.notNull(random) & max - 1) >>> 0;
      }
      let result = random[$remainder](max);
      if (dart.notNull(random) - result + max < randomLimit) {
        return result;
      }
    }
  }
};
(math._JSSecureRandom.new = function() {
  this[_buffer$0] = _native_typed_data.NativeByteData.new(8);
  let crypto = self.crypto;
  if (crypto != null) {
    let getRandomValues = crypto.getRandomValues;
    if (getRandomValues != null) {
      return;
    }
  }
  dart.throw(new core.UnsupportedError.new("No source of cryptographically secure random numbers available."));
}).prototype = math._JSSecureRandom.prototype;
;
math._JSSecureRandom[dart.implements] = () => [math.Random];
;
dart.setLibraryUri(math._JSSecureRandom, "dart:math");
;
math._JenkinsSmiHash = class _JenkinsSmiHash extends core.Object {
  static combine(hash, value) {
    hash = 536870911 & dart.notNull(hash) + dart.notNull(value);
    hash = 536870911 & dart.notNull(hash) + ((524287 & dart.notNull(hash)) << 10);
    return (dart.notNull(hash) ^ hash[$rightShift](6)) >>> 0;
  }
  static finish(hash) {
    hash = 536870911 & dart.notNull(hash) + ((67108863 & dart.notNull(hash)) << 3);
    hash = (dart.notNull(hash) ^ hash[$rightShift](11)) >>> 0;
    return 536870911 & dart.notNull(hash) + ((16383 & dart.notNull(hash)) << 15);
  }
  static hash2(a, b) {
    return math._JenkinsSmiHash.finish(math._JenkinsSmiHash.combine(math._JenkinsSmiHash.combine(0, core.int._check(a)), core.int._check(b)));
  }
  static hash4(a, b, c, d) {
    return math._JenkinsSmiHash.finish(math._JenkinsSmiHash.combine(math._JenkinsSmiHash.combine(math._JenkinsSmiHash.combine(math._JenkinsSmiHash.combine(0, core.int._check(a)), core.int._check(b)), core.int._check(c)), core.int._check(d)));
  }
};
(math._JenkinsSmiHash.new = function() {
  ;
}).prototype = math._JenkinsSmiHash.prototype;
;
dart.setLibraryUri(math._JenkinsSmiHash, "dart:math");
const _is_Point_default = Symbol('_is_Point_default');
const x$2 = dart.privateName(math, "Point.x");
const y$2 = dart.privateName(math, "Point.y");
math.Point$ = dart.generic(T => {
  let PointOfT = () => (PointOfT = dart.constFn(math.Point$(T)))();
  class Point extends core.Object {
    get x() {
      return this[x$2];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    toString() {
      return "Point(" + dart.str(this.x) + ", " + dart.str(this.y) + ")";
    }
    _equals(other) {
      return PointOfnum().is(other) && this.x == other.x && this.y == other.y;
    }
    get hashCode() {
      return math._JenkinsSmiHash.hash2(dart.hashCode(this.x), dart.hashCode(this.y));
    }
    ['+'](other) {
      PointOfT()._check(other);
      return new (PointOfT()).new(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
    }
    ['-'](other) {
      PointOfT()._check(other);
      return new (PointOfT()).new(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['*'](factor) {
      return new (PointOfT()).new(dart.notNull(this.x) * dart.notNull(factor), dart.notNull(this.y) * dart.notNull(factor));
    }
    get magnitude() {
      return math.sqrt(dart.notNull(this.x) * dart.notNull(this.x) + dart.notNull(this.y) * dart.notNull(this.y));
    }
    distanceTo(other) {
      PointOfT()._check(other);
      let dx = dart.notNull(this.x) - dart.notNull(other.x);
      let dy = dart.notNull(this.y) - dart.notNull(other.y);
      return math.sqrt(dx * dx + dy * dy);
    }
    squaredDistanceTo(other) {
      PointOfT()._check(other);
      let dx = dart.notNull(this.x) - dart.notNull(other.x);
      let dy = dart.notNull(this.y) - dart.notNull(other.y);
      return dx * dx + dy * dy;
    }
  }
  (Point.new = function(x, y) {
    this[x$2] = x;
    this[y$2] = y;
    ;
  }).prototype = Point.prototype;
  ;
  Point.prototype[_is_Point_default] = true;
  ;
  dart.setGetterSignature(Point, () => ({
    __proto__: dart.getGetters(Point.__proto__),
    magnitude: core.double
  }));
  dart.setLibraryUri(Point, "dart:math");
  ;
  dart.defineExtensionMethods(Point, ['toString', '_equals']);
  dart.defineExtensionAccessors(Point, ['hashCode']);
  return Point;
});
math.Point = math.Point$();
;
let C265;
math.Random = class Random extends core.Object {
  static new(seed) {
    if (seed === void 0) seed = null;
    return seed == null ? C265 || CT.C265 : new math._Random.new(seed);
  }
  static secure() {
    let t93;
    t93 = math.Random._secureRandom;
    return t93 == null ? math.Random._secureRandom = new math._JSSecureRandom.new() : t93;
  }
};
(math.Random[dart.mixinNew] = function() {
}).prototype = math.Random.prototype;
;
dart.setLibraryUri(math.Random, "dart:math");
dart.defineLazy(math.Random, {
  /*math.Random._secureRandom*/get _secureRandom() {
    return null;
  },
  set _secureRandom(_) {}
});
const _is__RectangleBase_default = Symbol('_is__RectangleBase_default');
math._RectangleBase$ = dart.generic(T => {
  let RectangleOfT = () => (RectangleOfT = dart.constFn(math.Rectangle$(T)))();
  let PointOfT = () => (PointOfT = dart.constFn(math.Point$(T)))();
  class _RectangleBase extends core.Object {
    get right() {
      return dart.notNull(this[$left]) + dart.notNull(this[$width]);
    }
    get bottom() {
      return dart.notNull(this[$top]) + dart.notNull(this[$height]);
    }
    toString() {
      return "Rectangle (" + dart.str(this[$left]) + ", " + dart.str(this[$top]) + ") " + dart.str(this[$width]) + " x " + dart.str(this[$height]);
    }
    _equals(other) {
      return RectangleOfnum().is(other) && this[$left] == other[$left] && this[$top] == other[$top] && this[$right] == other[$right] && this[$bottom] == other[$bottom];
    }
    get hashCode() {
      return math._JenkinsSmiHash.hash4(dart.hashCode(this[$left]), dart.hashCode(this[$top]), dart.hashCode(this[$right]), dart.hashCode(this[$bottom]));
    }
    intersection(other) {
      RectangleOfT()._check(other);
      let x0 = math.max(T, this[$left], other[$left]);
      let x1 = math.min(core.num, dart.notNull(this[$left]) + dart.notNull(this[$width]), dart.notNull(other[$left]) + dart.notNull(other[$width]));
      if (x0 <= x1) {
        let y0 = math.max(T, this[$top], other[$top]);
        let y1 = math.min(core.num, dart.notNull(this[$top]) + dart.notNull(this[$height]), dart.notNull(other[$top]) + dart.notNull(other[$height]));
        if (y0 <= y1) {
          return new (RectangleOfT()).new(x0, y0, x1 - x0, y1 - y0);
        }
      }
      return null;
    }
    intersects(other) {
      return dart.notNull(this[$left]) <= dart.notNull(other[$left]) + dart.notNull(other[$width]) && dart.notNull(other[$left]) <= dart.notNull(this[$left]) + dart.notNull(this[$width]) && dart.notNull(this[$top]) <= dart.notNull(other[$top]) + dart.notNull(other[$height]) && dart.notNull(other[$top]) <= dart.notNull(this[$top]) + dart.notNull(this[$height]);
    }
    boundingBox(other) {
      RectangleOfT()._check(other);
      let right = math.max(core.num, dart.notNull(this[$left]) + dart.notNull(this[$width]), dart.notNull(other[$left]) + dart.notNull(other[$width]));
      let bottom = math.max(core.num, dart.notNull(this[$top]) + dart.notNull(this[$height]), dart.notNull(other[$top]) + dart.notNull(other[$height]));
      let left = math.min(T, this[$left], other[$left]);
      let top = math.min(T, this[$top], other[$top]);
      return new (RectangleOfT()).new(left, top, right - left, bottom - top);
    }
    containsRectangle(another) {
      return dart.notNull(this[$left]) <= dart.notNull(another[$left]) && dart.notNull(this[$left]) + dart.notNull(this[$width]) >= dart.notNull(another[$left]) + dart.notNull(another[$width]) && dart.notNull(this[$top]) <= dart.notNull(another[$top]) && dart.notNull(this[$top]) + dart.notNull(this[$height]) >= dart.notNull(another[$top]) + dart.notNull(another[$height]);
    }
    containsPoint(another) {
      return dart.notNull(another.x) >= dart.notNull(this[$left]) && dart.notNull(another.x) <= dart.notNull(this[$left]) + dart.notNull(this[$width]) && dart.notNull(another.y) >= dart.notNull(this[$top]) && dart.notNull(another.y) <= dart.notNull(this[$top]) + dart.notNull(this[$height]);
    }
    get topLeft() {
      return new (PointOfT()).new(this[$left], this[$top]);
    }
    get topRight() {
      return new (PointOfT()).new(dart.notNull(this[$left]) + dart.notNull(this[$width]), this[$top]);
    }
    get bottomRight() {
      return new (PointOfT()).new(dart.notNull(this[$left]) + dart.notNull(this[$width]), dart.notNull(this[$top]) + dart.notNull(this[$height]));
    }
    get bottomLeft() {
      return new (PointOfT()).new(this[$left], dart.notNull(this[$top]) + dart.notNull(this[$height]));
    }
  }
  (_RectangleBase.new = function() {
    ;
  }).prototype = _RectangleBase.prototype;
  ;
  _RectangleBase.prototype[_is__RectangleBase_default] = true;
  ;
  dart.setGetterSignature(_RectangleBase, () => ({
    __proto__: dart.getGetters(_RectangleBase.__proto__),
    right: T,
    [$right]: T,
    bottom: T,
    [$bottom]: T,
    topLeft: math.Point$(T),
    [$topLeft]: math.Point$(T),
    topRight: math.Point$(T),
    [$topRight]: math.Point$(T),
    bottomRight: math.Point$(T),
    [$bottomRight]: math.Point$(T),
    bottomLeft: math.Point$(T),
    [$bottomLeft]: math.Point$(T)
  }));
  dart.setLibraryUri(_RectangleBase, "dart:math");
  dart.defineExtensionMethods(_RectangleBase, [
    'toString',
    '_equals',
    'intersection',
    'intersects',
    'boundingBox',
    'containsRectangle',
    'containsPoint'
  ]);
  dart.defineExtensionAccessors(_RectangleBase, [
    'right',
    'bottom',
    'hashCode',
    'topLeft',
    'topRight',
    'bottomRight',
    'bottomLeft'
  ]);
  return _RectangleBase;
});
math._RectangleBase = math._RectangleBase$();
;
const _is_Rectangle_default = Symbol('_is_Rectangle_default');
const left$ = dart.privateName(math, "Rectangle.left");
const top$ = dart.privateName(math, "Rectangle.top");
const width$ = dart.privateName(math, "Rectangle.width");
const height$ = dart.privateName(math, "Rectangle.height");
math.Rectangle$ = dart.generic(T => {
  class Rectangle extends math._RectangleBase$(T) {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    static fromPoints(a, b) {
      let left = math.min(T, a.x, b.x);
      let width = math.max(T, a.x, b.x) - left;
      let top = math.min(T, a.y, b.y);
      let height = math.max(T, a.y, b.y) - top;
      return new (math.Rectangle$(T)).new(left, top, width, height);
    }
  }
  (Rectangle.new = function(left, top, width, height) {
    this[left$] = left;
    this[top$] = top;
    this[width$] = dart.notNull(width) < 0 ? -dart.notNull(width) * 0 : width;
    this[height$] = dart.notNull(height) < 0 ? -dart.notNull(height) * 0 : height;
    Rectangle.__proto__.new.call(this);
    ;
  }).prototype = Rectangle.prototype;
  ;
  Rectangle.prototype[_is_Rectangle_default] = true;
  dart.setLibraryUri(Rectangle, "dart:math");
  ;
  dart.defineExtensionAccessors(Rectangle, ['left', 'top', 'width', 'height']);
  return Rectangle;
});
math.Rectangle = math.Rectangle$();
;
const _width = dart.privateName(math, "_width");
const _height = dart.privateName(math, "_height");
const _is_MutableRectangle_default = Symbol('_is_MutableRectangle_default');
const left$0 = dart.privateName(math, "MutableRectangle.left");
const top$0 = dart.privateName(math, "MutableRectangle.top");
math.MutableRectangle$ = dart.generic(T => {
  class MutableRectangle extends math._RectangleBase$(T) {
    get left() {
      return this[left$0];
    }
    set left(value) {
      this[left$0] = T._check(value);
    }
    get top() {
      return this[top$0];
    }
    set top(value) {
      this[top$0] = T._check(value);
    }
    static fromPoints(a, b) {
      let left = math.min(T, a.x, b.x);
      let width = math.max(T, a.x, b.x) - left;
      let top = math.min(T, a.y, b.y);
      let height = math.max(T, a.y, b.y) - top;
      return new (math.MutableRectangle$(T)).new(left, top, width, height);
    }
    get width() {
      return this[_width];
    }
    set width(width) {
      T._check(width);
      if (dart.notNull(width) < 0) width = math._clampToZero(T, width);
      this[_width] = width;
    }
    get height() {
      return this[_height];
    }
    set height(height) {
      T._check(height);
      if (dart.notNull(height) < 0) height = math._clampToZero(T, height);
      this[_height] = height;
    }
  }
  (MutableRectangle.new = function(left, top, width, height) {
    this[left$0] = left;
    this[top$0] = top;
    this[_width] = dart.notNull(width) < 0 ? math._clampToZero(T, width) : width;
    this[_height] = dart.notNull(height) < 0 ? math._clampToZero(T, height) : height;
    MutableRectangle.__proto__.new.call(this);
    ;
  }).prototype = MutableRectangle.prototype;
  ;
  MutableRectangle.prototype[_is_MutableRectangle_default] = true;
  MutableRectangle[dart.implements] = () => [math.Rectangle$(T)];
  dart.setGetterSignature(MutableRectangle, () => ({
    __proto__: dart.getGetters(MutableRectangle.__proto__),
    width: T,
    [$width]: T,
    height: T,
    [$height]: T
  }));
  dart.setSetterSignature(MutableRectangle, () => ({
    __proto__: dart.getSetters(MutableRectangle.__proto__),
    width: core.Object,
    [$width]: core.Object,
    height: core.Object,
    [$height]: core.Object
  }));
  dart.setLibraryUri(MutableRectangle, "dart:math");
  ;
  dart.defineExtensionAccessors(MutableRectangle, ['left', 'top', 'width', 'height']);
  return MutableRectangle;
});
math.MutableRectangle = math.MutableRectangle$();
;
math.min = function min(T, a, b) {
  if (a == null) dart.argumentError(a);
  if (b == null) dart.argumentError(b);
  return Math.min(a, b);
};
math.max = function max(T, a, b) {
  if (a == null) dart.argumentError(a);
  if (b == null) dart.argumentError(b);
  return Math.max(a, b);
};
math.atan2 = function atan2(a, b) {
  if (a == null) dart.argumentError(a);
  if (b == null) dart.argumentError(b);
  return Math.atan2(a, b);
};
math.pow = function pow(x, exponent) {
  if (x == null) dart.argumentError(x);
  if (exponent == null) dart.argumentError(exponent);
  return Math.pow(x, exponent);
};
math.sin = function sin(radians) {
  if (radians == null) dart.argumentError(radians);
  return Math.sin(radians);
};
math.cos = function cos(radians) {
  if (radians == null) dart.argumentError(radians);
  return Math.cos(radians);
};
math.tan = function tan(radians) {
  if (radians == null) dart.argumentError(radians);
  return Math.tan(radians);
};
math.acos = function acos(x) {
  if (x == null) dart.argumentError(x);
  return Math.acos(x);
};
math.asin = function asin(x) {
  if (x == null) dart.argumentError(x);
  return Math.asin(x);
};
math.atan = function atan(x) {
  if (x == null) dart.argumentError(x);
  return Math.atan(x);
};
math.sqrt = function sqrt(x) {
  if (x == null) dart.argumentError(x);
  return Math.sqrt(x);
};
math.exp = function exp(x) {
  if (x == null) dart.argumentError(x);
  return Math.exp(x);
};
math.log = function log$(x) {
  if (x == null) dart.argumentError(x);
  return Math.log(x);
};
math._clampToZero = function _clampToZero(T, value) {
  if (!(dart.notNull(value) < 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/math/rectangle.dart", 247, 10, "value < 0");
  return -dart.notNull(value) * 0;
};
dart.defineLazy(math, {
  /*math._POW2_32*/get _POW2_32() {
    return 4294967296.0;
  },
  /*math.e*/get e() {
    return 2.718281828459045;
  },
  /*math.ln10*/get ln10() {
    return 2.302585092994046;
  },
  /*math.ln2*/get ln2() {
    return 0.6931471805599453;
  },
  /*math.log2e*/get log2e() {
    return 1.4426950408889634;
  },
  /*math.log10e*/get log10e() {
    return 0.4342944819032518;
  },
  /*math.pi*/get pi() {
    return 3.141592653589793;
  },
  /*math.sqrt1_2*/get sqrt1_2() {
    return 0.7071067811865476;
  },
  /*math.sqrt2*/get sqrt2() {
    return 1.4142135623730951;
  }
});
mirrors.MirrorSystem = class MirrorSystem extends core.Object {
  findLibrary(libraryName) {
    return this.libraries[$values][$singleWhere](dart.fn(library => dart.equals(library.simpleName, libraryName), LibraryMirrorTobool()));
  }
  static getName(symbol) {
    return _js_mirrors.getName(symbol);
  }
  static getSymbol(name, library) {
    if (library === void 0) library = null;
    return _js_mirrors.getSymbol(name, library);
  }
};
(mirrors.MirrorSystem.new = function() {
  ;
}).prototype = mirrors.MirrorSystem.prototype;
;
;
dart.setLibraryUri(mirrors.MirrorSystem, "dart:mirrors");
mirrors.Mirror = class Mirror extends core.Object {};
(mirrors.Mirror.new = function() {
  ;
}).prototype = mirrors.Mirror.prototype;
;
dart.setLibraryUri(mirrors.Mirror, "dart:mirrors");
mirrors.IsolateMirror = class IsolateMirror extends core.Object {};
(mirrors.IsolateMirror.new = function() {
  ;
}).prototype = mirrors.IsolateMirror.prototype;
;
mirrors.IsolateMirror[dart.implements] = () => [mirrors.Mirror];
dart.setLibraryUri(mirrors.IsolateMirror, "dart:mirrors");
mirrors.DeclarationMirror = class DeclarationMirror extends core.Object {};
(mirrors.DeclarationMirror.new = function() {
  ;
}).prototype = mirrors.DeclarationMirror.prototype;
;
mirrors.DeclarationMirror[dart.implements] = () => [mirrors.Mirror];
dart.setLibraryUri(mirrors.DeclarationMirror, "dart:mirrors");
mirrors.ObjectMirror = class ObjectMirror extends core.Object {};
(mirrors.ObjectMirror.new = function() {
  ;
}).prototype = mirrors.ObjectMirror.prototype;
;
mirrors.ObjectMirror[dart.implements] = () => [mirrors.Mirror];
dart.setLibraryUri(mirrors.ObjectMirror, "dart:mirrors");
mirrors.InstanceMirror = class InstanceMirror extends core.Object {};
(mirrors.InstanceMirror.new = function() {
  ;
}).prototype = mirrors.InstanceMirror.prototype;
;
mirrors.InstanceMirror[dart.implements] = () => [mirrors.ObjectMirror];
dart.setLibraryUri(mirrors.InstanceMirror, "dart:mirrors");
mirrors.ClosureMirror = class ClosureMirror extends core.Object {};
(mirrors.ClosureMirror.new = function() {
  ;
}).prototype = mirrors.ClosureMirror.prototype;
;
mirrors.ClosureMirror[dart.implements] = () => [mirrors.InstanceMirror];
dart.setLibraryUri(mirrors.ClosureMirror, "dart:mirrors");
mirrors.LibraryMirror = class LibraryMirror extends core.Object {};
(mirrors.LibraryMirror.new = function() {
  ;
}).prototype = mirrors.LibraryMirror.prototype;
;
mirrors.LibraryMirror[dart.implements] = () => [mirrors.DeclarationMirror, mirrors.ObjectMirror];
dart.setLibraryUri(mirrors.LibraryMirror, "dart:mirrors");
mirrors.LibraryDependencyMirror = class LibraryDependencyMirror extends core.Object {};
(mirrors.LibraryDependencyMirror.new = function() {
  ;
}).prototype = mirrors.LibraryDependencyMirror.prototype;
;
mirrors.LibraryDependencyMirror[dart.implements] = () => [mirrors.Mirror];
dart.setLibraryUri(mirrors.LibraryDependencyMirror, "dart:mirrors");
mirrors.CombinatorMirror = class CombinatorMirror extends core.Object {};
(mirrors.CombinatorMirror.new = function() {
  ;
}).prototype = mirrors.CombinatorMirror.prototype;
;
mirrors.CombinatorMirror[dart.implements] = () => [mirrors.Mirror];
dart.setLibraryUri(mirrors.CombinatorMirror, "dart:mirrors");
mirrors.TypeMirror = class TypeMirror extends core.Object {};
(mirrors.TypeMirror.new = function() {
  ;
}).prototype = mirrors.TypeMirror.prototype;
;
mirrors.TypeMirror[dart.implements] = () => [mirrors.DeclarationMirror];
dart.setLibraryUri(mirrors.TypeMirror, "dart:mirrors");
mirrors.ClassMirror = class ClassMirror extends core.Object {};
(mirrors.ClassMirror.new = function() {
  ;
}).prototype = mirrors.ClassMirror.prototype;
;
mirrors.ClassMirror[dart.implements] = () => [mirrors.TypeMirror, mirrors.ObjectMirror];
dart.setLibraryUri(mirrors.ClassMirror, "dart:mirrors");
mirrors.FunctionTypeMirror = class FunctionTypeMirror extends core.Object {};
(mirrors.FunctionTypeMirror.new = function() {
  ;
}).prototype = mirrors.FunctionTypeMirror.prototype;
;
mirrors.FunctionTypeMirror[dart.implements] = () => [mirrors.ClassMirror];
dart.setLibraryUri(mirrors.FunctionTypeMirror, "dart:mirrors");
mirrors.TypeVariableMirror = class TypeVariableMirror extends mirrors.TypeMirror {};
(mirrors.TypeVariableMirror.new = function() {
  ;
}).prototype = mirrors.TypeVariableMirror.prototype;
;
dart.setLibraryUri(mirrors.TypeVariableMirror, "dart:mirrors");
mirrors.TypedefMirror = class TypedefMirror extends core.Object {};
(mirrors.TypedefMirror.new = function() {
  ;
}).prototype = mirrors.TypedefMirror.prototype;
;
mirrors.TypedefMirror[dart.implements] = () => [mirrors.TypeMirror];
dart.setLibraryUri(mirrors.TypedefMirror, "dart:mirrors");
mirrors.MethodMirror = class MethodMirror extends core.Object {};
(mirrors.MethodMirror.new = function() {
  ;
}).prototype = mirrors.MethodMirror.prototype;
;
mirrors.MethodMirror[dart.implements] = () => [mirrors.DeclarationMirror];
dart.setLibraryUri(mirrors.MethodMirror, "dart:mirrors");
mirrors.VariableMirror = class VariableMirror extends core.Object {};
(mirrors.VariableMirror.new = function() {
  ;
}).prototype = mirrors.VariableMirror.prototype;
;
mirrors.VariableMirror[dart.implements] = () => [mirrors.DeclarationMirror];
dart.setLibraryUri(mirrors.VariableMirror, "dart:mirrors");
mirrors.ParameterMirror = class ParameterMirror extends core.Object {};
(mirrors.ParameterMirror.new = function() {
  ;
}).prototype = mirrors.ParameterMirror.prototype;
;
mirrors.ParameterMirror[dart.implements] = () => [mirrors.VariableMirror];
dart.setLibraryUri(mirrors.ParameterMirror, "dart:mirrors");
mirrors.SourceLocation = class SourceLocation extends core.Object {};
(mirrors.SourceLocation.new = function() {
  ;
}).prototype = mirrors.SourceLocation.prototype;
;
dart.setLibraryUri(mirrors.SourceLocation, "dart:mirrors");
const text$ = dart.privateName(mirrors, "Comment.text");
const trimmedText$ = dart.privateName(mirrors, "Comment.trimmedText");
const isDocComment$ = dart.privateName(mirrors, "Comment.isDocComment");
mirrors.Comment = class Comment extends core.Object {
  get text() {
    return this[text$];
  }
  set text(value) {
    super.text = value;
  }
  get trimmedText() {
    return this[trimmedText$];
  }
  set trimmedText(value) {
    super.trimmedText = value;
  }
  get isDocComment() {
    return this[isDocComment$];
  }
  set isDocComment(value) {
    super.isDocComment = value;
  }
};
(mirrors.Comment.new = function(text, trimmedText, isDocComment) {
  this[text$] = text;
  this[trimmedText$] = trimmedText;
  this[isDocComment$] = isDocComment;
  ;
}).prototype = mirrors.Comment.prototype;
;
dart.setLibraryUri(mirrors.Comment, "dart:mirrors");
;
const symbols$ = dart.privateName(mirrors, "MirrorsUsed.symbols");
const targets$ = dart.privateName(mirrors, "MirrorsUsed.targets");
const metaTargets$ = dart.privateName(mirrors, "MirrorsUsed.metaTargets");
const override$ = dart.privateName(mirrors, "MirrorsUsed.override");
mirrors.MirrorsUsed = class MirrorsUsed extends core.Object {
  get symbols() {
    return this[symbols$];
  }
  set symbols(value) {
    super.symbols = value;
  }
  get targets() {
    return this[targets$];
  }
  set targets(value) {
    super.targets = value;
  }
  get metaTargets() {
    return this[metaTargets$];
  }
  set metaTargets(value) {
    super.metaTargets = value;
  }
  get override() {
    return this[override$];
  }
  set override(value) {
    super.override = value;
  }
};
(mirrors.MirrorsUsed.new = function(opts) {
  let symbols = opts && 'symbols' in opts ? opts.symbols : null;
  let targets = opts && 'targets' in opts ? opts.targets : null;
  let metaTargets = opts && 'metaTargets' in opts ? opts.metaTargets : null;
  let override = opts && 'override' in opts ? opts.override : null;
  this[symbols$] = symbols;
  this[targets$] = targets;
  this[metaTargets$] = metaTargets;
  this[override$] = override;
  ;
}).prototype = mirrors.MirrorsUsed.prototype;
;
dart.setLibraryUri(mirrors.MirrorsUsed, "dart:mirrors");
;
mirrors._instantiateClass = function _instantiateClass(type, typeArguments) {
  let unwrapped = dart.unwrapType(type);
  let genericClass = dart.getGenericClass(unwrapped);
  if (genericClass == null) {
    dart.throw(new core.ArgumentError.new("Type `" + dart.str(type) + "` must be generic to apply " + "type arguments: `" + dart.str(typeArguments) + "`."));
  }
  let typeArgsLenth = typeArguments[$length];
  let unwrappedArgs = core.List.new(typeArgsLenth);
  for (let i = 0; i < dart.notNull(typeArgsLenth); i = i + 1) {
    unwrappedArgs[$_set](i, dart.unwrapType(typeArguments[$_get](i)));
  }
  let typeFormals = dart.getGenericTypeFormals(genericClass);
  if (typeFormals[$length] != typeArgsLenth) {
    dart.throw(new core.ArgumentError.new("Type `" + dart.str(type) + "` has " + dart.str(typeFormals[$length]) + " type " + "parameters, but " + dart.str(typeArgsLenth) + " type arguments were " + "passed: `" + dart.str(typeArguments) + "`."));
  }
  return dart.wrapType(dart.instantiateClass(genericClass, unwrappedArgs));
};
mirrors.currentMirrorSystem = function currentMirrorSystem() {
  return _js_mirrors.currentJsMirrorSystem;
};
mirrors.reflect = function reflect$(reflectee) {
  return _js_mirrors.reflect(reflectee);
};
mirrors.reflectClass = function reflectClass(key) {
  if (!core.Type.is(key) || dart.equals(key, dart.wrapType(dart.dynamic))) {
    dart.throw(new core.ArgumentError.new(dart.str(key) + " does not denote a class"));
  }
  let tm = mirrors.reflectType(key);
  if (!mirrors.ClassMirror.is(tm)) {
    dart.throw(new core.ArgumentError.new(dart.str(key) + " does not denote a class"));
  }
  return mirrors.ClassMirror._check(mirrors.ClassMirror.as(tm).originalDeclaration);
};
mirrors.reflectType = function reflectType$(type, typeArguments) {
  if (typeArguments === void 0) typeArguments = null;
  if (typeArguments != null) {
    type = mirrors._instantiateClass(type, typeArguments);
  }
  return _js_mirrors.reflectType(type);
};
typed_data.ByteBuffer = class ByteBuffer extends core.Object {};
(typed_data.ByteBuffer.new = function() {
  ;
}).prototype = typed_data.ByteBuffer.prototype;
;
dart.setLibraryUri(typed_data.ByteBuffer, "dart:typed_data");
typed_data.TypedData = class TypedData extends core.Object {};
(typed_data.TypedData.new = function() {
  ;
}).prototype = typed_data.TypedData.prototype;
;
dart.setLibraryUri(typed_data.TypedData, "dart:typed_data");
typed_data._TypedIntList = class _TypedIntList extends typed_data.TypedData {};
(typed_data._TypedIntList.new = function() {
  ;
}).prototype = typed_data._TypedIntList.prototype;
;
dart.setLibraryUri(typed_data._TypedIntList, "dart:typed_data");
typed_data._TypedFloatList = class _TypedFloatList extends typed_data.TypedData {};
(typed_data._TypedFloatList.new = function() {
  ;
}).prototype = typed_data._TypedFloatList.prototype;
;
dart.setLibraryUri(typed_data._TypedFloatList, "dart:typed_data");
const _littleEndian = dart.privateName(typed_data, "_littleEndian");
let C266;
typed_data.Endian = class Endian extends core.Object {
  get [_littleEndian]() {
    return this[_littleEndian$];
  }
  set [_littleEndian](value) {
    super[_littleEndian] = value;
  }
};
(typed_data.Endian.__ = function(_littleEndian) {
  this[_littleEndian$] = _littleEndian;
  ;
}).prototype = typed_data.Endian.prototype;
;
const _littleEndian$ = Endian__littleEndian;
dart.setLibraryUri(typed_data.Endian, "dart:typed_data");
;
dart.defineLazy(typed_data.Endian, {
  /*typed_data.Endian.big*/get big() {
    return C97 || CT.C97;
  },
  /*typed_data.Endian.little*/get little() {
    return C266 || CT.C266;
  },
  /*typed_data.Endian.host*/get host() {
    return typed_data.ByteData.view(_native_typed_data.NativeUint16List.fromList(JSArrayOfint().of([1]))[$buffer])[$getInt8](0) === 1 ? typed_data.Endian.little : typed_data.Endian.big;
  }
});
typed_data.ByteData = class ByteData extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asByteData](offsetInBytes, length);
  }
};
(typed_data.ByteData[dart.mixinNew] = function() {
}).prototype = typed_data.ByteData.prototype;
;
typed_data.ByteData[dart.implements] = () => [typed_data.TypedData];
dart.setLibraryUri(typed_data.ByteData, "dart:typed_data");
typed_data.Int8List = class Int8List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asInt8List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int8List[dart.mixinNew] = function() {
}).prototype = typed_data.Int8List.prototype;
typed_data.Int8List.prototype[dart.isList] = true;
;
typed_data.Int8List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Int8List, "dart:typed_data");
dart.defineLazy(typed_data.Int8List, {
  /*typed_data.Int8List.bytesPerElement*/get bytesPerElement() {
    return 1;
  }
});
typed_data.Uint8List = class Uint8List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asUint8List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint8List[dart.mixinNew] = function() {
}).prototype = typed_data.Uint8List.prototype;
typed_data.Uint8List.prototype[dart.isList] = true;
;
typed_data.Uint8List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint8List, "dart:typed_data");
dart.defineLazy(typed_data.Uint8List, {
  /*typed_data.Uint8List.bytesPerElement*/get bytesPerElement() {
    return 1;
  }
});
typed_data.Uint8ClampedList = class Uint8ClampedList extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asUint8ClampedList](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint8ClampedList[dart.mixinNew] = function() {
}).prototype = typed_data.Uint8ClampedList.prototype;
typed_data.Uint8ClampedList.prototype[dart.isList] = true;
;
typed_data.Uint8ClampedList[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint8ClampedList, "dart:typed_data");
dart.defineLazy(typed_data.Uint8ClampedList, {
  /*typed_data.Uint8ClampedList.bytesPerElement*/get bytesPerElement() {
    return 1;
  }
});
typed_data.Int16List = class Int16List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asInt16List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int16List[dart.mixinNew] = function() {
}).prototype = typed_data.Int16List.prototype;
typed_data.Int16List.prototype[dart.isList] = true;
;
typed_data.Int16List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Int16List, "dart:typed_data");
dart.defineLazy(typed_data.Int16List, {
  /*typed_data.Int16List.bytesPerElement*/get bytesPerElement() {
    return 2;
  }
});
typed_data.Uint16List = class Uint16List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asUint16List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint16List[dart.mixinNew] = function() {
}).prototype = typed_data.Uint16List.prototype;
typed_data.Uint16List.prototype[dart.isList] = true;
;
typed_data.Uint16List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint16List, "dart:typed_data");
dart.defineLazy(typed_data.Uint16List, {
  /*typed_data.Uint16List.bytesPerElement*/get bytesPerElement() {
    return 2;
  }
});
typed_data.Int32List = class Int32List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asInt32List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int32List[dart.mixinNew] = function() {
}).prototype = typed_data.Int32List.prototype;
typed_data.Int32List.prototype[dart.isList] = true;
;
typed_data.Int32List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Int32List, "dart:typed_data");
dart.defineLazy(typed_data.Int32List, {
  /*typed_data.Int32List.bytesPerElement*/get bytesPerElement() {
    return 4;
  }
});
typed_data.Uint32List = class Uint32List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asUint32List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint32List[dart.mixinNew] = function() {
}).prototype = typed_data.Uint32List.prototype;
typed_data.Uint32List.prototype[dart.isList] = true;
;
typed_data.Uint32List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint32List, "dart:typed_data");
dart.defineLazy(typed_data.Uint32List, {
  /*typed_data.Uint32List.bytesPerElement*/get bytesPerElement() {
    return 4;
  }
});
typed_data.Int64List = class Int64List extends core.Object {
  static new(length) {
    dart.throw(new core.UnsupportedError.new("Int64List not supported by dart2js."));
  }
  static fromList(elements) {
    dart.throw(new core.UnsupportedError.new("Int64List not supported by dart2js."));
  }
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asInt64List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int64List[dart.mixinNew] = function() {
}).prototype = typed_data.Int64List.prototype;
typed_data.Int64List.prototype[dart.isList] = true;
;
typed_data.Int64List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Int64List, "dart:typed_data");
dart.defineLazy(typed_data.Int64List, {
  /*typed_data.Int64List.bytesPerElement*/get bytesPerElement() {
    return 8;
  }
});
typed_data.Uint64List = class Uint64List extends core.Object {
  static new(length) {
    dart.throw(new core.UnsupportedError.new("Uint64List not supported by dart2js."));
  }
  static fromList(elements) {
    dart.throw(new core.UnsupportedError.new("Uint64List not supported by dart2js."));
  }
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asUint64List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Uint64List[dart.mixinNew] = function() {
}).prototype = typed_data.Uint64List.prototype;
typed_data.Uint64List.prototype[dart.isList] = true;
;
typed_data.Uint64List[dart.implements] = () => [core.List$(core.int), typed_data._TypedIntList];
dart.setLibraryUri(typed_data.Uint64List, "dart:typed_data");
dart.defineLazy(typed_data.Uint64List, {
  /*typed_data.Uint64List.bytesPerElement*/get bytesPerElement() {
    return 8;
  }
});
typed_data.Float32List = class Float32List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asFloat32List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Float32List[dart.mixinNew] = function() {
}).prototype = typed_data.Float32List.prototype;
typed_data.Float32List.prototype[dart.isList] = true;
;
typed_data.Float32List[dart.implements] = () => [core.List$(core.double), typed_data._TypedFloatList];
dart.setLibraryUri(typed_data.Float32List, "dart:typed_data");
dart.defineLazy(typed_data.Float32List, {
  /*typed_data.Float32List.bytesPerElement*/get bytesPerElement() {
    return 4;
  }
});
typed_data.Float64List = class Float64List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asFloat64List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Float64List[dart.mixinNew] = function() {
}).prototype = typed_data.Float64List.prototype;
typed_data.Float64List.prototype[dart.isList] = true;
;
typed_data.Float64List[dart.implements] = () => [core.List$(core.double), typed_data._TypedFloatList];
dart.setLibraryUri(typed_data.Float64List, "dart:typed_data");
dart.defineLazy(typed_data.Float64List, {
  /*typed_data.Float64List.bytesPerElement*/get bytesPerElement() {
    return 8;
  }
});
typed_data.Float32x4List = class Float32x4List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asFloat32x4List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Float32x4List[dart.mixinNew] = function() {
}).prototype = typed_data.Float32x4List.prototype;
typed_data.Float32x4List.prototype[dart.isList] = true;
;
typed_data.Float32x4List[dart.implements] = () => [core.List$(typed_data.Float32x4), typed_data.TypedData];
dart.setLibraryUri(typed_data.Float32x4List, "dart:typed_data");
dart.defineLazy(typed_data.Float32x4List, {
  /*typed_data.Float32x4List.bytesPerElement*/get bytesPerElement() {
    return 16;
  }
});
typed_data.Int32x4List = class Int32x4List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asInt32x4List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Int32x4List[dart.mixinNew] = function() {
}).prototype = typed_data.Int32x4List.prototype;
typed_data.Int32x4List.prototype[dart.isList] = true;
;
typed_data.Int32x4List[dart.implements] = () => [core.List$(typed_data.Int32x4), typed_data.TypedData];
dart.setLibraryUri(typed_data.Int32x4List, "dart:typed_data");
dart.defineLazy(typed_data.Int32x4List, {
  /*typed_data.Int32x4List.bytesPerElement*/get bytesPerElement() {
    return 16;
  }
});
typed_data.Float64x2List = class Float64x2List extends core.Object {
  static view(buffer, offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return buffer[$asFloat64x2List](offsetInBytes, length);
  }
  [Symbol.iterator]() {
    return new dart.JsIterator(this[$iterator]);
  }
};
(typed_data.Float64x2List[dart.mixinNew] = function() {
}).prototype = typed_data.Float64x2List.prototype;
typed_data.Float64x2List.prototype[dart.isList] = true;
;
typed_data.Float64x2List[dart.implements] = () => [core.List$(typed_data.Float64x2), typed_data.TypedData];
dart.setLibraryUri(typed_data.Float64x2List, "dart:typed_data");
dart.defineLazy(typed_data.Float64x2List, {
  /*typed_data.Float64x2List.bytesPerElement*/get bytesPerElement() {
    return 16;
  }
});
const _data$ = dart.privateName(typed_data, "_data");
typed_data.UnmodifiableByteBufferView = class UnmodifiableByteBufferView extends core.Object {
  get lengthInBytes() {
    return this[_data$][$lengthInBytes];
  }
  asUint8List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableUint8ListView.new(this[_data$][$asUint8List](offsetInBytes, length));
  }
  asInt8List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableInt8ListView.new(this[_data$][$asInt8List](offsetInBytes, length));
  }
  asUint8ClampedList(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableUint8ClampedListView.new(this[_data$][$asUint8ClampedList](offsetInBytes, length));
  }
  asUint16List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableUint16ListView.new(this[_data$][$asUint16List](offsetInBytes, length));
  }
  asInt16List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableInt16ListView.new(this[_data$][$asInt16List](offsetInBytes, length));
  }
  asUint32List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableUint32ListView.new(this[_data$][$asUint32List](offsetInBytes, length));
  }
  asInt32List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableInt32ListView.new(this[_data$][$asInt32List](offsetInBytes, length));
  }
  asUint64List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableUint64ListView.new(this[_data$][$asUint64List](offsetInBytes, length));
  }
  asInt64List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableInt64ListView.new(this[_data$][$asInt64List](offsetInBytes, length));
  }
  asInt32x4List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableInt32x4ListView.new(this[_data$][$asInt32x4List](offsetInBytes, length));
  }
  asFloat32List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableFloat32ListView.new(this[_data$][$asFloat32List](offsetInBytes, length));
  }
  asFloat64List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableFloat64ListView.new(this[_data$][$asFloat64List](offsetInBytes, length));
  }
  asFloat32x4List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableFloat32x4ListView.new(this[_data$][$asFloat32x4List](offsetInBytes, length));
  }
  asFloat64x2List(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableFloat64x2ListView.new(this[_data$][$asFloat64x2List](offsetInBytes, length));
  }
  asByteData(offsetInBytes, length) {
    if (offsetInBytes === void 0) offsetInBytes = 0;
    if (length === void 0) length = null;
    return new typed_data.UnmodifiableByteDataView.new(this[_data$][$asByteData](offsetInBytes, length));
  }
};
(typed_data.UnmodifiableByteBufferView.new = function(data) {
  this[_data$] = data;
  ;
}).prototype = typed_data.UnmodifiableByteBufferView.prototype;
;
typed_data.UnmodifiableByteBufferView[dart.implements] = () => [typed_data.ByteBuffer];
;
dart.setGetterSignature(typed_data.UnmodifiableByteBufferView, () => ({
  __proto__: dart.getGetters(typed_data.UnmodifiableByteBufferView.__proto__),
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int
}));
dart.setLibraryUri(typed_data.UnmodifiableByteBufferView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableByteBufferView, [
  'asUint8List',
  'asInt8List',
  'asUint8ClampedList',
  'asUint16List',
  'asInt16List',
  'asUint32List',
  'asInt32List',
  'asUint64List',
  'asInt64List',
  'asInt32x4List',
  'asFloat32List',
  'asFloat64List',
  'asFloat32x4List',
  'asFloat64x2List',
  'asByteData'
]);
dart.defineExtensionAccessors(typed_data.UnmodifiableByteBufferView, ['lengthInBytes']);
const _unsupported$ = dart.privateName(typed_data, "_unsupported");
typed_data.UnmodifiableByteDataView = class UnmodifiableByteDataView extends core.Object {
  getInt8(byteOffset) {
    return this[_data$][$getInt8](byteOffset);
  }
  setInt8(byteOffset, value) {
    return this[_unsupported$]();
  }
  getUint8(byteOffset) {
    return this[_data$][$getUint8](byteOffset);
  }
  setUint8(byteOffset, value) {
    return this[_unsupported$]();
  }
  getInt16(byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_data$][$getInt16](byteOffset, endian);
  }
  setInt16(byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_unsupported$]();
  }
  getUint16(byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_data$][$getUint16](byteOffset, endian);
  }
  setUint16(byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_unsupported$]();
  }
  getInt32(byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_data$][$getInt32](byteOffset, endian);
  }
  setInt32(byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_unsupported$]();
  }
  getUint32(byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_data$][$getUint32](byteOffset, endian);
  }
  setUint32(byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_unsupported$]();
  }
  getInt64(byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_data$][$getInt64](byteOffset, endian);
  }
  setInt64(byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_unsupported$]();
  }
  getUint64(byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_data$][$getUint64](byteOffset, endian);
  }
  setUint64(byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_unsupported$]();
  }
  getFloat32(byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_data$][$getFloat32](byteOffset, endian);
  }
  setFloat32(byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_unsupported$]();
  }
  getFloat64(byteOffset, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_data$][$getFloat64](byteOffset, endian);
  }
  setFloat64(byteOffset, value, endian) {
    if (endian === void 0) endian = C97 || CT.C97;
    return this[_unsupported$]();
  }
  get elementSizeInBytes() {
    return this[_data$][$elementSizeInBytes];
  }
  get offsetInBytes() {
    return this[_data$][$offsetInBytes];
  }
  get lengthInBytes() {
    return this[_data$][$lengthInBytes];
  }
  get buffer() {
    return new typed_data.UnmodifiableByteBufferView.new(this[_data$][$buffer]);
  }
  [_unsupported$]() {
    dart.throw(new core.UnsupportedError.new("An UnmodifiableByteDataView may not be modified"));
  }
};
(typed_data.UnmodifiableByteDataView.new = function(data) {
  this[_data$] = data;
  ;
}).prototype = typed_data.UnmodifiableByteDataView.prototype;
;
typed_data.UnmodifiableByteDataView[dart.implements] = () => [typed_data.ByteData];
;
dart.setGetterSignature(typed_data.UnmodifiableByteDataView, () => ({
  __proto__: dart.getGetters(typed_data.UnmodifiableByteDataView.__proto__),
  elementSizeInBytes: core.int,
  [$elementSizeInBytes]: core.int,
  offsetInBytes: core.int,
  [$offsetInBytes]: core.int,
  lengthInBytes: core.int,
  [$lengthInBytes]: core.int,
  buffer: typed_data.ByteBuffer,
  [$buffer]: typed_data.ByteBuffer
}));
dart.setLibraryUri(typed_data.UnmodifiableByteDataView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableByteDataView, [
  'getInt8',
  'setInt8',
  'getUint8',
  'setUint8',
  'getInt16',
  'setInt16',
  'getUint16',
  'setUint16',
  'getInt32',
  'setInt32',
  'getUint32',
  'setUint32',
  'getInt64',
  'setInt64',
  'getUint64',
  'setUint64',
  'getFloat32',
  'setFloat32',
  'getFloat64',
  'setFloat64'
]);
dart.defineExtensionAccessors(typed_data.UnmodifiableByteDataView, ['elementSizeInBytes', 'offsetInBytes', 'lengthInBytes', 'buffer']);
const _list$2 = dart.privateName(typed_data, "_list");
const _createList = dart.privateName(typed_data, "_createList");
const _is__UnmodifiableListMixin_default = Symbol('_is__UnmodifiableListMixin_default');
typed_data._UnmodifiableListMixin$ = dart.generic((N, L, TD) => {
  class _UnmodifiableListMixin extends core.Object {
    get [_data$]() {
      return TD.as(this[_list$2]);
    }
    get length() {
      return this[_list$2][$length];
    }
    _get(index) {
      return this[_list$2][$_get](index);
    }
    get elementSizeInBytes() {
      return this[_data$][$elementSizeInBytes];
    }
    get offsetInBytes() {
      return this[_data$][$offsetInBytes];
    }
    get lengthInBytes() {
      return this[_data$][$lengthInBytes];
    }
    get buffer() {
      return new typed_data.UnmodifiableByteBufferView.new(this[_data$][$buffer]);
    }
    sublist(start, end) {
      if (end === void 0) end = null;
      end = core.RangeError.checkValidRange(start, end, this.length);
      let sublistLength = dart.notNull(end) - dart.notNull(start);
      let result = this[_createList](sublistLength);
      result[$setRange](0, sublistLength, this[_list$2], start);
      return result;
    }
  }
  (_UnmodifiableListMixin.new = function() {
    ;
  }).prototype = _UnmodifiableListMixin.prototype;
  ;
  _UnmodifiableListMixin.prototype[_is__UnmodifiableListMixin_default] = true;
  ;
  dart.setGetterSignature(_UnmodifiableListMixin, () => ({
    __proto__: dart.getGetters(_UnmodifiableListMixin.__proto__),
    [_data$]: TD,
    length: core.int,
    elementSizeInBytes: core.int,
    offsetInBytes: core.int,
    lengthInBytes: core.int,
    buffer: typed_data.ByteBuffer
  }));
  dart.setLibraryUri(_UnmodifiableListMixin, "dart:typed_data");
  return _UnmodifiableListMixin;
});
typed_data._UnmodifiableListMixin = typed_data._UnmodifiableListMixin$();
;
const _list$3 = dart.privateName(typed_data, "UnmodifiableUint8ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint8List, typed_data.Uint8List));
typed_data.UnmodifiableUint8ListView = class UnmodifiableUint8ListView extends UnmodifiableListBase__UnmodifiableListMixin$36 {
  get [_list$2]() {
    return this[_list$3];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeUint8List.new(length);
  }
};
(typed_data.UnmodifiableUint8ListView.new = function(list) {
  this[_list$3] = list;
  ;
}).prototype = typed_data.UnmodifiableUint8ListView.prototype;
;
typed_data.UnmodifiableUint8ListView[dart.implements] = () => [typed_data.Uint8List];
;
dart.setLibraryUri(typed_data.UnmodifiableUint8ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableUint8ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint8ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$4 = dart.privateName(typed_data, "UnmodifiableInt8ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$ = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$, typed_data._UnmodifiableListMixin$(core.int, typed_data.Int8List, typed_data.Int8List));
typed_data.UnmodifiableInt8ListView = class UnmodifiableInt8ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$ {
  get [_list$2]() {
    return this[_list$4];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeInt8List.new(length);
  }
};
(typed_data.UnmodifiableInt8ListView.new = function(list) {
  this[_list$4] = list;
  ;
}).prototype = typed_data.UnmodifiableInt8ListView.prototype;
;
typed_data.UnmodifiableInt8ListView[dart.implements] = () => [typed_data.Int8List];
;
dart.setLibraryUri(typed_data.UnmodifiableInt8ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableInt8ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt8ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$5 = dart.privateName(typed_data, "UnmodifiableUint8ClampedListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$0 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$0.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$0.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$0, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint8ClampedList, typed_data.Uint8ClampedList));
typed_data.UnmodifiableUint8ClampedListView = class UnmodifiableUint8ClampedListView extends UnmodifiableListBase__UnmodifiableListMixin$36$0 {
  get [_list$2]() {
    return this[_list$5];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeUint8ClampedList.new(length);
  }
};
(typed_data.UnmodifiableUint8ClampedListView.new = function(list) {
  this[_list$5] = list;
  ;
}).prototype = typed_data.UnmodifiableUint8ClampedListView.prototype;
;
typed_data.UnmodifiableUint8ClampedListView[dart.implements] = () => [typed_data.Uint8ClampedList];
;
dart.setLibraryUri(typed_data.UnmodifiableUint8ClampedListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableUint8ClampedListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint8ClampedListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$6 = dart.privateName(typed_data, "UnmodifiableUint16ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$1 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$1.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$1.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$1, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint16List, typed_data.Uint16List));
typed_data.UnmodifiableUint16ListView = class UnmodifiableUint16ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$1 {
  get [_list$2]() {
    return this[_list$6];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeUint16List.new(length);
  }
};
(typed_data.UnmodifiableUint16ListView.new = function(list) {
  this[_list$6] = list;
  ;
}).prototype = typed_data.UnmodifiableUint16ListView.prototype;
;
typed_data.UnmodifiableUint16ListView[dart.implements] = () => [typed_data.Uint16List];
;
dart.setLibraryUri(typed_data.UnmodifiableUint16ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableUint16ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint16ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$7 = dart.privateName(typed_data, "UnmodifiableInt16ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$2 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$2.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$2.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$2, typed_data._UnmodifiableListMixin$(core.int, typed_data.Int16List, typed_data.Int16List));
typed_data.UnmodifiableInt16ListView = class UnmodifiableInt16ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$2 {
  get [_list$2]() {
    return this[_list$7];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeInt16List.new(length);
  }
};
(typed_data.UnmodifiableInt16ListView.new = function(list) {
  this[_list$7] = list;
  ;
}).prototype = typed_data.UnmodifiableInt16ListView.prototype;
;
typed_data.UnmodifiableInt16ListView[dart.implements] = () => [typed_data.Int16List];
;
dart.setLibraryUri(typed_data.UnmodifiableInt16ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableInt16ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt16ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$8 = dart.privateName(typed_data, "UnmodifiableUint32ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$3 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$3.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$3.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$3, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint32List, typed_data.Uint32List));
typed_data.UnmodifiableUint32ListView = class UnmodifiableUint32ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$3 {
  get [_list$2]() {
    return this[_list$8];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeUint32List.new(length);
  }
};
(typed_data.UnmodifiableUint32ListView.new = function(list) {
  this[_list$8] = list;
  ;
}).prototype = typed_data.UnmodifiableUint32ListView.prototype;
;
typed_data.UnmodifiableUint32ListView[dart.implements] = () => [typed_data.Uint32List];
;
dart.setLibraryUri(typed_data.UnmodifiableUint32ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableUint32ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint32ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$9 = dart.privateName(typed_data, "UnmodifiableInt32ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$4 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$4.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$4.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$4, typed_data._UnmodifiableListMixin$(core.int, typed_data.Int32List, typed_data.Int32List));
typed_data.UnmodifiableInt32ListView = class UnmodifiableInt32ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$4 {
  get [_list$2]() {
    return this[_list$9];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeInt32List.new(length);
  }
};
(typed_data.UnmodifiableInt32ListView.new = function(list) {
  this[_list$9] = list;
  ;
}).prototype = typed_data.UnmodifiableInt32ListView.prototype;
;
typed_data.UnmodifiableInt32ListView[dart.implements] = () => [typed_data.Int32List];
;
dart.setLibraryUri(typed_data.UnmodifiableInt32ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableInt32ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt32ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$10 = dart.privateName(typed_data, "UnmodifiableUint64ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$5 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$5.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$5.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$5, typed_data._UnmodifiableListMixin$(core.int, typed_data.Uint64List, typed_data.Uint64List));
typed_data.UnmodifiableUint64ListView = class UnmodifiableUint64ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$5 {
  get [_list$2]() {
    return this[_list$10];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return typed_data.Uint64List.new(length);
  }
};
(typed_data.UnmodifiableUint64ListView.new = function(list) {
  this[_list$10] = list;
  ;
}).prototype = typed_data.UnmodifiableUint64ListView.prototype;
;
typed_data.UnmodifiableUint64ListView[dart.implements] = () => [typed_data.Uint64List];
;
dart.setLibraryUri(typed_data.UnmodifiableUint64ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableUint64ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableUint64ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$11 = dart.privateName(typed_data, "UnmodifiableInt64ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$6 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.int) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$6.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$6.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$6, typed_data._UnmodifiableListMixin$(core.int, typed_data.Int64List, typed_data.Int64List));
typed_data.UnmodifiableInt64ListView = class UnmodifiableInt64ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$6 {
  get [_list$2]() {
    return this[_list$11];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return typed_data.Int64List.new(length);
  }
};
(typed_data.UnmodifiableInt64ListView.new = function(list) {
  this[_list$11] = list;
  ;
}).prototype = typed_data.UnmodifiableInt64ListView.prototype;
;
typed_data.UnmodifiableInt64ListView[dart.implements] = () => [typed_data.Int64List];
;
dart.setLibraryUri(typed_data.UnmodifiableInt64ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableInt64ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt64ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$12 = dart.privateName(typed_data, "UnmodifiableInt32x4ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$7 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(typed_data.Int32x4) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$7.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$7.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$7, typed_data._UnmodifiableListMixin$(typed_data.Int32x4, typed_data.Int32x4List, typed_data.Int32x4List));
typed_data.UnmodifiableInt32x4ListView = class UnmodifiableInt32x4ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$7 {
  get [_list$2]() {
    return this[_list$12];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return new _native_typed_data.NativeInt32x4List.new(length);
  }
};
(typed_data.UnmodifiableInt32x4ListView.new = function(list) {
  this[_list$12] = list;
  ;
}).prototype = typed_data.UnmodifiableInt32x4ListView.prototype;
;
typed_data.UnmodifiableInt32x4ListView[dart.implements] = () => [typed_data.Int32x4List];
;
dart.setLibraryUri(typed_data.UnmodifiableInt32x4ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableInt32x4ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableInt32x4ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$13 = dart.privateName(typed_data, "UnmodifiableFloat32x4ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$8 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(typed_data.Float32x4) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$8.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$8.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$8, typed_data._UnmodifiableListMixin$(typed_data.Float32x4, typed_data.Float32x4List, typed_data.Float32x4List));
typed_data.UnmodifiableFloat32x4ListView = class UnmodifiableFloat32x4ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$8 {
  get [_list$2]() {
    return this[_list$13];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return new _native_typed_data.NativeFloat32x4List.new(length);
  }
};
(typed_data.UnmodifiableFloat32x4ListView.new = function(list) {
  this[_list$13] = list;
  ;
}).prototype = typed_data.UnmodifiableFloat32x4ListView.prototype;
;
typed_data.UnmodifiableFloat32x4ListView[dart.implements] = () => [typed_data.Float32x4List];
;
dart.setLibraryUri(typed_data.UnmodifiableFloat32x4ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableFloat32x4ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableFloat32x4ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$14 = dart.privateName(typed_data, "UnmodifiableFloat64x2ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$9 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(typed_data.Float64x2) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$9.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$9.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$9, typed_data._UnmodifiableListMixin$(typed_data.Float64x2, typed_data.Float64x2List, typed_data.Float64x2List));
typed_data.UnmodifiableFloat64x2ListView = class UnmodifiableFloat64x2ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$9 {
  get [_list$2]() {
    return this[_list$14];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return new _native_typed_data.NativeFloat64x2List.new(length);
  }
};
(typed_data.UnmodifiableFloat64x2ListView.new = function(list) {
  this[_list$14] = list;
  ;
}).prototype = typed_data.UnmodifiableFloat64x2ListView.prototype;
;
typed_data.UnmodifiableFloat64x2ListView[dart.implements] = () => [typed_data.Float64x2List];
;
dart.setLibraryUri(typed_data.UnmodifiableFloat64x2ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableFloat64x2ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableFloat64x2ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$15 = dart.privateName(typed_data, "UnmodifiableFloat32ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$10 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.double) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$10.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$10.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$10, typed_data._UnmodifiableListMixin$(core.double, typed_data.Float32List, typed_data.Float32List));
typed_data.UnmodifiableFloat32ListView = class UnmodifiableFloat32ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$10 {
  get [_list$2]() {
    return this[_list$15];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeFloat32List.new(length);
  }
};
(typed_data.UnmodifiableFloat32ListView.new = function(list) {
  this[_list$15] = list;
  ;
}).prototype = typed_data.UnmodifiableFloat32ListView.prototype;
;
typed_data.UnmodifiableFloat32ListView[dart.implements] = () => [typed_data.Float32List];
;
dart.setLibraryUri(typed_data.UnmodifiableFloat32ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableFloat32ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableFloat32ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _list$16 = dart.privateName(typed_data, "UnmodifiableFloat64ListView._list");
const UnmodifiableListBase__UnmodifiableListMixin$36$11 = class UnmodifiableListBase__UnmodifiableListMixin extends _internal.UnmodifiableListBase$(core.double) {};
(UnmodifiableListBase__UnmodifiableListMixin$36$11.new = function() {
}).prototype = UnmodifiableListBase__UnmodifiableListMixin$36$11.prototype;
dart.applyMixin(UnmodifiableListBase__UnmodifiableListMixin$36$11, typed_data._UnmodifiableListMixin$(core.double, typed_data.Float64List, typed_data.Float64List));
typed_data.UnmodifiableFloat64ListView = class UnmodifiableFloat64ListView extends UnmodifiableListBase__UnmodifiableListMixin$36$11 {
  get [_list$2]() {
    return this[_list$16];
  }
  set [_list$2](value) {
    super[_list$2] = value;
  }
  [_createList](length) {
    return _native_typed_data.NativeFloat64List.new(length);
  }
};
(typed_data.UnmodifiableFloat64ListView.new = function(list) {
  this[_list$16] = list;
  ;
}).prototype = typed_data.UnmodifiableFloat64ListView.prototype;
;
typed_data.UnmodifiableFloat64ListView[dart.implements] = () => [typed_data.Float64List];
;
dart.setLibraryUri(typed_data.UnmodifiableFloat64ListView, "dart:typed_data");
;
dart.defineExtensionMethods(typed_data.UnmodifiableFloat64ListView, ['_get', 'sublist']);
dart.defineExtensionAccessors(typed_data.UnmodifiableFloat64ListView, [
  'length',
  'elementSizeInBytes',
  'offsetInBytes',
  'lengthInBytes',
  'buffer'
]);
const _errorMsg$ = dart.privateName(core, "_errorMsg");
core._CompileTimeError = class _CompileTimeError extends core.Error {
  toString() {
    return this[_errorMsg$];
  }
};
(core._CompileTimeError.new = function(_errorMsg) {
  this[_errorMsg$] = _errorMsg;
  core._CompileTimeError.__proto__.new.call(this);
  ;
}).prototype = core._CompileTimeError.prototype;
;
dart.setLibraryUri(core._CompileTimeError, "dart:core");
;
dart.defineExtensionMethods(core._CompileTimeError, ['toString']);
const _name$7 = dart.privateName(core, "_name");
core._DuplicatedFieldInitializerError = class _DuplicatedFieldInitializerError extends core.Object {
  toString() {
    return "Error: field '" + dart.str(this[_name$7]) + "' is already initialized.";
  }
};
(core._DuplicatedFieldInitializerError.new = function(_name) {
  this[_name$7] = _name;
  ;
}).prototype = core._DuplicatedFieldInitializerError.prototype;
;
dart.setLibraryUri(core._DuplicatedFieldInitializerError, "dart:core");
;
dart.defineExtensionMethods(core._DuplicatedFieldInitializerError, ['toString']);
const _used$ = dart.privateName(core, "_used");
const _digits$ = dart.privateName(core, "_digits");
const _isNegative = dart.privateName(core, "_isNegative");
const _isZero = dart.privateName(core, "_isZero");
const _dlShift = dart.privateName(core, "_dlShift");
const _drShift = dart.privateName(core, "_drShift");
const _absCompare = dart.privateName(core, "_absCompare");
const _absAddSetSign = dart.privateName(core, "_absAddSetSign");
const _absSubSetSign = dart.privateName(core, "_absSubSetSign");
const _absAndSetSign = dart.privateName(core, "_absAndSetSign");
const _absAndNotSetSign = dart.privateName(core, "_absAndNotSetSign");
const _absOrSetSign = dart.privateName(core, "_absOrSetSign");
const _absXorSetSign = dart.privateName(core, "_absXorSetSign");
const _divRem = dart.privateName(core, "_divRem");
const _div = dart.privateName(core, "_div");
const _rem = dart.privateName(core, "_rem");
let C267;
const _toRadixCodeUnit = dart.privateName(core, "_toRadixCodeUnit");
const _toHexString = dart.privateName(core, "_toHexString");
core._BigIntImpl = class _BigIntImpl extends core.Object {
  static parse(source, opts) {
    let radix = opts && 'radix' in opts ? opts.radix : null;
    let result = core._BigIntImpl._tryParse(source, {radix: radix});
    if (result == null) {
      dart.throw(new core.FormatException.new("Could not parse BigInt", source));
    }
    return result;
  }
  static _parseDecimal(source, isNegative) {
    let part = 0;
    let result = core._BigIntImpl.zero;
    let digitInPartCount = 4 - source.length[$remainder](4);
    if (digitInPartCount === 4) digitInPartCount = 0;
    for (let i = 0; i < source.length; i = i + 1) {
      part = part * 10 + source[$codeUnitAt](i) - 48;
      if ((digitInPartCount = digitInPartCount + 1) === 4) {
        result = result['*'](core._BigIntImpl._bigInt10000)['+'](core._BigIntImpl._fromInt(part));
        part = 0;
        digitInPartCount = 0;
      }
    }
    if (dart.test(isNegative)) return result._negate();
    return result;
  }
  static _codeUnitToRadixValue(codeUnit) {
    if (48 <= dart.notNull(codeUnit) && dart.notNull(codeUnit) <= 57) return dart.notNull(codeUnit) - 48;
    codeUnit = (dart.notNull(codeUnit) | 32) >>> 0;
    let result = dart.notNull(codeUnit) - 97 + 10;
    return result;
  }
  static _parseHex(source, startPos, isNegative) {
    let t93, t93$, t93$0, t93$1;
    let hexDigitsPerChunk = (16 / 4)[$truncate]();
    let sourceLength = source.length - dart.notNull(startPos);
    let chunkCount = (sourceLength / hexDigitsPerChunk)[$ceil]();
    let digits = _native_typed_data.NativeUint16List.new(chunkCount);
    let lastDigitLength = sourceLength - (chunkCount - 1) * hexDigitsPerChunk;
    let digitIndex = dart.notNull(digits[$length]) - 1;
    let i = startPos;
    let chunk = 0;
    for (let j = 0; j < lastDigitLength; j = j + 1) {
      let digitValue = core._BigIntImpl._codeUnitToRadixValue(source[$codeUnitAt]((t93 = i, i = dart.notNull(t93) + 1, t93)));
      if (dart.notNull(digitValue) >= 16) return null;
      chunk = chunk * 16 + dart.notNull(digitValue);
    }
    digits[$_set]((t93$ = digitIndex, digitIndex = t93$ - 1, t93$), chunk);
    while (dart.notNull(i) < source.length) {
      chunk = 0;
      for (let j = 0; j < hexDigitsPerChunk; j = j + 1) {
        let digitValue = core._BigIntImpl._codeUnitToRadixValue(source[$codeUnitAt]((t93$0 = i, i = dart.notNull(t93$0) + 1, t93$0)));
        if (dart.notNull(digitValue) >= 16) return null;
        chunk = chunk * 16 + dart.notNull(digitValue);
      }
      digits[$_set]((t93$1 = digitIndex, digitIndex = t93$1 - 1, t93$1), chunk);
    }
    if (digits[$length] === 1 && digits[$_get](0) === 0) return core._BigIntImpl.zero;
    return new core._BigIntImpl.__(isNegative, digits[$length], digits);
  }
  static _parseRadix(source, radix, isNegative) {
    let result = core._BigIntImpl.zero;
    let base = core._BigIntImpl._fromInt(radix);
    for (let i = 0; i < source.length; i = i + 1) {
      let digitValue = core._BigIntImpl._codeUnitToRadixValue(source[$codeUnitAt](i));
      if (dart.notNull(digitValue) >= dart.notNull(radix)) return null;
      result = result['*'](base)['+'](core._BigIntImpl._fromInt(digitValue));
    }
    if (dart.test(isNegative)) return result._negate();
    return result;
  }
  static _tryParse(source, opts) {
    let t93, t93$, t93$0;
    let radix = opts && 'radix' in opts ? opts.radix : null;
    if (source === "") return null;
    let match = core._BigIntImpl._parseRE.firstMatch(source);
    let signIndex = 1;
    let hexIndex = 3;
    let decimalIndex = 4;
    let nonDecimalHexIndex = 5;
    if (match == null) return null;
    let isNegative = match._get(signIndex) === "-";
    let decimalMatch = match._get(decimalIndex);
    let hexMatch = match._get(hexIndex);
    let nonDecimalMatch = match._get(nonDecimalHexIndex);
    if (radix == null) {
      if (decimalMatch != null) {
        return core._BigIntImpl._parseDecimal(decimalMatch, isNegative);
      }
      if (hexMatch != null) {
        return core._BigIntImpl._parseHex(hexMatch, 2, isNegative);
      }
      return null;
    }
    if (dart.notNull(radix) < 2 || dart.notNull(radix) > 36) {
      dart.throw(new core.RangeError.range(radix, 2, 36, "radix"));
    }
    if (radix === 10 && decimalMatch != null) {
      return core._BigIntImpl._parseDecimal(decimalMatch, isNegative);
    }
    if (radix === 16 && (decimalMatch != null || nonDecimalMatch != null)) {
      return core._BigIntImpl._parseHex((t93 = decimalMatch, t93 == null ? nonDecimalMatch : t93), 0, isNegative);
    }
    return core._BigIntImpl._parseRadix((t93$0 = (t93$ = decimalMatch, t93$ == null ? nonDecimalMatch : t93$), t93$0 == null ? hexMatch : t93$0), radix, isNegative);
  }
  static _normalize(used, digits) {
    while (dart.notNull(used) > 0 && digits[$_get](dart.notNull(used) - 1) === 0)
      used = dart.notNull(used) - 1;
    return used;
  }
  get [_isZero]() {
    return this[_used$] === 0;
  }
  static _cloneDigits(digits, from, to, length) {
    let resultDigits = _native_typed_data.NativeUint16List.new(length);
    let n = dart.notNull(to) - dart.notNull(from);
    for (let i = 0; i < n; i = i + 1) {
      resultDigits[$_set](i, digits[$_get](dart.notNull(from) + i));
    }
    return resultDigits;
  }
  static from(value) {
    if (value === 0) return core._BigIntImpl.zero;
    if (value === 1) return core._BigIntImpl.one;
    if (value === 2) return core._BigIntImpl.two;
    if (value[$abs]() < 4294967296) return core._BigIntImpl._fromInt(value[$toInt]());
    if (typeof value == 'number') return core._BigIntImpl._fromDouble(value);
    return core._BigIntImpl._fromInt(dart.asInt(value));
  }
  static _fromInt(value) {
    let t93;
    let isNegative = dart.notNull(value) < 0;
    if (!(16 === 16)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1266, 12, "_digitBits == 16");
    if (isNegative) {
      if (value === -9223372036854776000.0) {
        let digits = _native_typed_data.NativeUint16List.new(4);
        digits[$_set](3, 32768);
        return new core._BigIntImpl.__(true, 4, digits);
      }
      value = -dart.notNull(value);
    }
    if (dart.notNull(value) < 65536) {
      let digits = _native_typed_data.NativeUint16List.new(1);
      digits[$_set](0, value);
      return new core._BigIntImpl.__(isNegative, 1, digits);
    }
    if (dart.notNull(value) <= 4294967295) {
      let digits = _native_typed_data.NativeUint16List.new(2);
      digits[$_set](0, (dart.notNull(value) & 65535) >>> 0);
      digits[$_set](1, value[$rightShift](16));
      return new core._BigIntImpl.__(isNegative, 2, digits);
    }
    let bits = value[$bitLength];
    let digits = _native_typed_data.NativeUint16List.new(((bits - 1) / 16)[$truncate]() + 1);
    let i = 0;
    while (value !== 0) {
      digits[$_set]((t93 = i, i = t93 + 1, t93), (dart.notNull(value) & 65535) >>> 0);
      value = (dart.notNull(value) / 65536)[$truncate]();
    }
    return new core._BigIntImpl.__(isNegative, digits[$length], digits);
  }
  static _fromDouble(value) {
    if (value[$isNaN] || value[$isInfinite]) {
      dart.throw(new core.ArgumentError.new("Value must be finite: " + dart.str(value)));
    }
    let isNegative = dart.notNull(value) < 0;
    if (isNegative) value = -dart.notNull(value);
    value = value[$floorToDouble]();
    if (value === 0) return core._BigIntImpl.zero;
    let bits = core._BigIntImpl._bitsForFromDouble;
    for (let i = 0; i < 8; i = i + 1) {
      bits[$_set](i, 0);
    }
    bits[$buffer][$asByteData]()[$setFloat64](0, value, typed_data.Endian.little);
    let biasedExponent = (dart.notNull(bits[$_get](7)) << 4 >>> 0) + bits[$_get](6)[$rightShift](4);
    let exponent = biasedExponent - 1075;
    if (!(16 === 16)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1325, 12, "_digitBits == 16");
    let unshiftedDigits = _native_typed_data.NativeUint16List.new(4);
    unshiftedDigits[$_set](0, (dart.notNull(bits[$_get](1)) << 8 >>> 0) + dart.notNull(bits[$_get](0)));
    unshiftedDigits[$_set](1, (dart.notNull(bits[$_get](3)) << 8 >>> 0) + dart.notNull(bits[$_get](2)));
    unshiftedDigits[$_set](2, (dart.notNull(bits[$_get](5)) << 8 >>> 0) + dart.notNull(bits[$_get](4)));
    unshiftedDigits[$_set](3, 16 | dart.notNull(bits[$_get](6)) & 15);
    let unshiftedBig = new core._BigIntImpl._normalized(false, 4, unshiftedDigits);
    let absResult = unshiftedBig;
    if (exponent < 0) {
      absResult = unshiftedBig['>>'](-exponent);
    } else if (exponent > 0) {
      absResult = unshiftedBig['<<'](exponent);
    }
    if (isNegative) return absResult._negate();
    return absResult;
  }
  _negate() {
    if (this[_used$] === 0) return this;
    return new core._BigIntImpl.__(!dart.test(this[_isNegative]), this[_used$], this[_digits$]);
  }
  abs() {
    return dart.test(this[_isNegative]) ? this._negate() : this;
  }
  [_dlShift](n) {
    let used = this[_used$];
    if (used === 0) {
      return core._BigIntImpl.zero;
    }
    let resultUsed = dart.notNull(used) + dart.notNull(n);
    let digits = this[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    for (let i = dart.notNull(used) - 1; i >= 0; i = i - 1) {
      resultDigits[$_set](i + dart.notNull(n), digits[$_get](i));
    }
    return new core._BigIntImpl.__(this[_isNegative], resultUsed, resultDigits);
  }
  static _dlShiftDigits(xDigits, xUsed, n, resultDigits) {
    if (xUsed === 0) {
      return 0;
    }
    if (n === 0 && resultDigits == xDigits) {
      return xUsed;
    }
    let resultUsed = dart.notNull(xUsed) + dart.notNull(n);
    for (let i = dart.notNull(xUsed) - 1; i >= 0; i = i - 1) {
      resultDigits[$_set](i + dart.notNull(n), xDigits[$_get](i));
    }
    for (let i = dart.notNull(n) - 1; i >= 0; i = i - 1) {
      resultDigits[$_set](i, 0);
    }
    return resultUsed;
  }
  [_drShift](n) {
    let used = this[_used$];
    if (used === 0) {
      return core._BigIntImpl.zero;
    }
    let resultUsed = dart.notNull(used) - dart.notNull(n);
    if (resultUsed <= 0) {
      return dart.test(this[_isNegative]) ? core._BigIntImpl._minusOne : core._BigIntImpl.zero;
    }
    let digits = this[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    for (let i = n; dart.notNull(i) < dart.notNull(used); i = dart.notNull(i) + 1) {
      resultDigits[$_set](dart.notNull(i) - dart.notNull(n), digits[$_get](i));
    }
    let result = new core._BigIntImpl.__(this[_isNegative], resultUsed, resultDigits);
    if (dart.test(this[_isNegative])) {
      for (let i = 0; i < dart.notNull(n); i = i + 1) {
        if (digits[$_get](i) !== 0) {
          return result['-'](core._BigIntImpl.one);
        }
      }
    }
    return result;
  }
  static _lsh(xDigits, xUsed, n, resultDigits) {
    if (!(dart.notNull(xUsed) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1436, 12, "xUsed > 0");
    let digitShift = (dart.notNull(n) / 16)[$truncate]();
    let bitShift = n[$modulo](16);
    let carryBitShift = 16 - bitShift;
    let bitMask = (1)[$leftShift](carryBitShift) - 1;
    let carry = 0;
    for (let i = dart.notNull(xUsed) - 1; i >= 0; i = i - 1) {
      let digit = xDigits[$_get](i);
      resultDigits[$_set](i + digitShift + 1, (digit[$rightShift](carryBitShift) | carry) >>> 0);
      carry = ((dart.notNull(digit) & bitMask) >>> 0)[$leftShift](bitShift);
    }
    resultDigits[$_set](digitShift, carry);
  }
  ['<<'](shiftAmount) {
    if (dart.notNull(shiftAmount) < 0) {
      dart.throw(new core.ArgumentError.new("shift-amount must be posititve " + dart.str(shiftAmount)));
    }
    if (dart.test(this[_isZero])) return this;
    let digitShift = (dart.notNull(shiftAmount) / 16)[$truncate]();
    let bitShift = shiftAmount[$modulo](16);
    if (bitShift === 0) {
      return this[_dlShift](digitShift);
    }
    let resultUsed = dart.notNull(this[_used$]) + digitShift + 1;
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    core._BigIntImpl._lsh(this[_digits$], this[_used$], shiftAmount, resultDigits);
    return new core._BigIntImpl.__(this[_isNegative], resultUsed, resultDigits);
  }
  static _lShiftDigits(xDigits, xUsed, n, resultDigits) {
    let digitsShift = (dart.notNull(n) / 16)[$truncate]();
    let bitShift = n[$modulo](16);
    if (bitShift === 0) {
      return core._BigIntImpl._dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
    }
    let resultUsed = dart.notNull(xUsed) + digitsShift + 1;
    core._BigIntImpl._lsh(xDigits, xUsed, n, resultDigits);
    let i = digitsShift;
    while ((i = i - 1) >= 0) {
      resultDigits[$_set](i, 0);
    }
    if (resultDigits[$_get](resultUsed - 1) === 0) {
      resultUsed = resultUsed - 1;
    }
    return resultUsed;
  }
  static _rsh(xDigits, xUsed, n, resultDigits) {
    if (!(dart.notNull(xUsed) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1502, 12, "xUsed > 0");
    let digitsShift = (dart.notNull(n) / 16)[$truncate]();
    let bitShift = n[$modulo](16);
    let carryBitShift = 16 - bitShift;
    let bitMask = (1)[$leftShift](bitShift) - 1;
    let carry = xDigits[$_get](digitsShift)[$rightShift](bitShift);
    let last = dart.notNull(xUsed) - digitsShift - 1;
    for (let i = 0; i < last; i = i + 1) {
      let digit = xDigits[$_get](i + digitsShift + 1);
      resultDigits[$_set](i, (((dart.notNull(digit) & bitMask) >>> 0)[$leftShift](carryBitShift) | carry) >>> 0);
      carry = digit[$rightShift](bitShift);
    }
    resultDigits[$_set](last, carry);
  }
  ['>>'](shiftAmount) {
    if (dart.notNull(shiftAmount) < 0) {
      dart.throw(new core.ArgumentError.new("shift-amount must be posititve " + dart.str(shiftAmount)));
    }
    if (dart.test(this[_isZero])) return this;
    let digitShift = (dart.notNull(shiftAmount) / 16)[$truncate]();
    let bitShift = shiftAmount[$modulo](16);
    if (bitShift === 0) {
      return this[_drShift](digitShift);
    }
    let used = this[_used$];
    let resultUsed = dart.notNull(used) - digitShift;
    if (resultUsed <= 0) {
      return dart.test(this[_isNegative]) ? core._BigIntImpl._minusOne : core._BigIntImpl.zero;
    }
    let digits = this[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    core._BigIntImpl._rsh(digits, used, shiftAmount, resultDigits);
    let result = new core._BigIntImpl.__(this[_isNegative], resultUsed, resultDigits);
    if (dart.test(this[_isNegative])) {
      if ((dart.notNull(digits[$_get](digitShift)) & (1)[$leftShift](bitShift) - 1) !== 0) {
        return result['-'](core._BigIntImpl.one);
      }
      for (let i = 0; i < digitShift; i = i + 1) {
        if (digits[$_get](i) !== 0) {
          return result['-'](core._BigIntImpl.one);
        }
      }
    }
    return result;
  }
  [_absCompare](other) {
    return core._BigIntImpl._compareDigits(this[_digits$], this[_used$], other[_digits$], other[_used$]);
  }
  compareTo(other) {
    core._BigIntImpl._check(other);
    if (dart.equals(this[_isNegative], other[_isNegative])) {
      let result = this[_absCompare](other);
      return dart.test(this[_isNegative]) ? 0 - dart.notNull(result) : result;
    }
    return dart.test(this[_isNegative]) ? -1 : 1;
  }
  static _compareDigits(digits, used, otherDigits, otherUsed) {
    let result = dart.notNull(used) - dart.notNull(otherUsed);
    if (result === 0) {
      for (let i = dart.notNull(used) - 1; i >= 0; i = i - 1) {
        result = dart.notNull(digits[$_get](i)) - dart.notNull(otherDigits[$_get](i));
        if (result !== 0) return result;
      }
    }
    return result;
  }
  static _absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
    if (!(dart.notNull(used) >= dart.notNull(otherUsed) && dart.notNull(otherUsed) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1602, 12, "used >= otherUsed && otherUsed > 0");
    let carry = 0;
    for (let i = 0; i < dart.notNull(otherUsed); i = i + 1) {
      carry = carry + (dart.notNull(digits[$_get](i)) + dart.notNull(otherDigits[$_get](i)));
      resultDigits[$_set](i, (carry & 65535) >>> 0);
      carry = carry[$rightShift](16);
    }
    for (let i = otherUsed; dart.notNull(i) < dart.notNull(used); i = dart.notNull(i) + 1) {
      carry = carry + dart.notNull(digits[$_get](i));
      resultDigits[$_set](i, (carry & 65535) >>> 0);
      carry = carry[$rightShift](16);
    }
    resultDigits[$_set](used, carry);
  }
  static _absSub(digits, used, otherDigits, otherUsed, resultDigits) {
    if (!(dart.notNull(used) >= dart.notNull(otherUsed) && dart.notNull(otherUsed) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1621, 12, "used >= otherUsed && otherUsed > 0");
    let carry = 0;
    for (let i = 0; i < dart.notNull(otherUsed); i = i + 1) {
      carry = carry + (dart.notNull(digits[$_get](i)) - dart.notNull(otherDigits[$_get](i)));
      resultDigits[$_set](i, (carry & 65535) >>> 0);
      carry = 0 - (carry[$rightShift](16) & 1);
    }
    for (let i = otherUsed; dart.notNull(i) < dart.notNull(used); i = dart.notNull(i) + 1) {
      carry = carry + dart.notNull(digits[$_get](i));
      resultDigits[$_set](i, (carry & 65535) >>> 0);
      carry = 0 - (carry[$rightShift](16) & 1);
    }
  }
  [_absAddSetSign](other, isNegative) {
    let used = this[_used$];
    let otherUsed = other[_used$];
    if (dart.notNull(used) < dart.notNull(otherUsed)) {
      return other[_absAddSetSign](this, isNegative);
    }
    if (used === 0) {
      if (!!dart.test(isNegative)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1648, 14, "!isNegative");
      return core._BigIntImpl.zero;
    }
    if (otherUsed === 0) {
      return dart.equals(this[_isNegative], isNegative) ? this : this._negate();
    }
    let resultUsed = dart.notNull(used) + 1;
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    core._BigIntImpl._absAdd(this[_digits$], used, other[_digits$], otherUsed, resultDigits);
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  [_absSubSetSign](other, isNegative) {
    if (!(dart.notNull(this[_absCompare](other)) >= 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1664, 12, "_absCompare(other) >= 0");
    let used = this[_used$];
    if (used === 0) {
      if (!!dart.test(isNegative)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1667, 14, "!isNegative");
      return core._BigIntImpl.zero;
    }
    let otherUsed = other[_used$];
    if (otherUsed === 0) {
      return dart.equals(this[_isNegative], isNegative) ? this : this._negate();
    }
    let resultDigits = _native_typed_data.NativeUint16List.new(used);
    core._BigIntImpl._absSub(this[_digits$], used, other[_digits$], otherUsed, resultDigits);
    return new core._BigIntImpl.__(isNegative, used, resultDigits);
  }
  [_absAndSetSign](other, isNegative) {
    let resultUsed = core._min(this[_used$], other[_used$]);
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    for (let i = 0; i < dart.notNull(resultUsed); i = i + 1) {
      resultDigits[$_set](i, (dart.notNull(digits[$_get](i)) & dart.notNull(otherDigits[$_get](i))) >>> 0);
    }
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  [_absAndNotSetSign](other, isNegative) {
    let resultUsed = this[_used$];
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    let m = core._min(resultUsed, other[_used$]);
    for (let i = 0; i < dart.notNull(m); i = i + 1) {
      resultDigits[$_set](i, (dart.notNull(digits[$_get](i)) & ~dart.notNull(otherDigits[$_get](i)) >>> 0) >>> 0);
    }
    for (let i = m; dart.notNull(i) < dart.notNull(resultUsed); i = dart.notNull(i) + 1) {
      resultDigits[$_set](i, digits[$_get](i));
    }
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  [_absOrSetSign](other, isNegative) {
    let used = this[_used$];
    let otherUsed = other[_used$];
    let resultUsed = core._max(used, otherUsed);
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    let l = null;
    let m = null;
    if (dart.notNull(used) < dart.notNull(otherUsed)) {
      l = other;
      m = used;
    } else {
      l = this;
      m = otherUsed;
    }
    for (let i = 0; i < dart.notNull(m); i = i + 1) {
      resultDigits[$_set](i, (dart.notNull(digits[$_get](i)) | dart.notNull(otherDigits[$_get](i))) >>> 0);
    }
    let lDigits = l[_digits$];
    for (let i = m; dart.notNull(i) < dart.notNull(resultUsed); i = dart.notNull(i) + 1) {
      resultDigits[$_set](i, lDigits[$_get](i));
    }
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  [_absXorSetSign](other, isNegative) {
    let used = this[_used$];
    let otherUsed = other[_used$];
    let resultUsed = core._max(used, otherUsed);
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    let l = null;
    let m = null;
    if (dart.notNull(used) < dart.notNull(otherUsed)) {
      l = other;
      m = used;
    } else {
      l = this;
      m = otherUsed;
    }
    for (let i = 0; i < dart.notNull(m); i = i + 1) {
      resultDigits[$_set](i, (dart.notNull(digits[$_get](i)) ^ dart.notNull(otherDigits[$_get](i))) >>> 0);
    }
    let lDigits = l[_digits$];
    for (let i = m; dart.notNull(i) < dart.notNull(resultUsed); i = dart.notNull(i) + 1) {
      resultDigits[$_set](i, lDigits[$_get](i));
    }
    return new core._BigIntImpl.__(isNegative, resultUsed, resultDigits);
  }
  ['&'](other) {
    core._BigIntImpl._check(other);
    if (dart.test(this[_isZero]) || dart.test(other[_isZero])) return core._BigIntImpl.zero;
    if (dart.equals(this[_isNegative], other[_isNegative])) {
      if (dart.test(this[_isNegative])) {
        let this1 = this[_absSubSetSign](core._BigIntImpl.one, true);
        let other1 = other[_absSubSetSign](core._BigIntImpl.one, true);
        return this1[_absOrSetSign](other1, true)[_absAddSetSign](core._BigIntImpl.one, true);
      }
      return this[_absAndSetSign](other, false);
    }
    let p = null;
    let n = null;
    if (dart.test(this[_isNegative])) {
      p = other;
      n = this;
    } else {
      p = this;
      n = other;
    }
    let n1 = n[_absSubSetSign](core._BigIntImpl.one, false);
    return p[_absAndNotSetSign](n1, false);
  }
  ['|'](other) {
    core._BigIntImpl._check(other);
    if (dart.test(this[_isZero])) return other;
    if (dart.test(other[_isZero])) return this;
    if (dart.equals(this[_isNegative], other[_isNegative])) {
      if (dart.test(this[_isNegative])) {
        let this1 = this[_absSubSetSign](core._BigIntImpl.one, true);
        let other1 = other[_absSubSetSign](core._BigIntImpl.one, true);
        return this1[_absAndSetSign](other1, true)[_absAddSetSign](core._BigIntImpl.one, true);
      }
      return this[_absOrSetSign](other, false);
    }
    let p = null;
    let n = null;
    if (dart.test(this[_isNegative])) {
      p = other;
      n = this;
    } else {
      p = this;
      n = other;
    }
    let n1 = n[_absSubSetSign](core._BigIntImpl.one, true);
    return n1[_absAndNotSetSign](p, true)[_absAddSetSign](core._BigIntImpl.one, true);
  }
  ['^'](other) {
    core._BigIntImpl._check(other);
    if (dart.test(this[_isZero])) return other;
    if (dart.test(other[_isZero])) return this;
    if (dart.equals(this[_isNegative], other[_isNegative])) {
      if (dart.test(this[_isNegative])) {
        let this1 = this[_absSubSetSign](core._BigIntImpl.one, true);
        let other1 = other[_absSubSetSign](core._BigIntImpl.one, true);
        return this1[_absXorSetSign](other1, false);
      }
      return this[_absXorSetSign](other, false);
    }
    let p = null;
    let n = null;
    if (dart.test(this[_isNegative])) {
      p = other;
      n = this;
    } else {
      p = this;
      n = other;
    }
    let n1 = n[_absSubSetSign](core._BigIntImpl.one, true);
    return p[_absXorSetSign](n1, true)[_absAddSetSign](core._BigIntImpl.one, true);
  }
  ['~']() {
    if (dart.test(this[_isZero])) return core._BigIntImpl._minusOne;
    if (dart.test(this[_isNegative])) {
      return this[_absSubSetSign](core._BigIntImpl.one, false);
    }
    return this[_absAddSetSign](core._BigIntImpl.one, true);
  }
  ['+'](other) {
    core._BigIntImpl._check(other);
    if (dart.test(this[_isZero])) return other;
    if (dart.test(other[_isZero])) return this;
    let isNegative = this[_isNegative];
    if (dart.equals(isNegative, other[_isNegative])) {
      return this[_absAddSetSign](other, isNegative);
    }
    if (dart.notNull(this[_absCompare](other)) >= 0) {
      return this[_absSubSetSign](other, isNegative);
    }
    return other[_absSubSetSign](this, !dart.test(isNegative));
  }
  ['-'](other) {
    core._BigIntImpl._check(other);
    if (dart.test(this[_isZero])) return other._negate();
    if (dart.test(other[_isZero])) return this;
    let isNegative = this[_isNegative];
    if (!dart.equals(isNegative, other[_isNegative])) {
      return this[_absAddSetSign](other, isNegative);
    }
    if (dart.notNull(this[_absCompare](other)) >= 0) {
      return this[_absSubSetSign](other, isNegative);
    }
    return other[_absSubSetSign](this, !dart.test(isNegative));
  }
  static _mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
    let t93, t93$, t93$0;
    if (x === 0) {
      return;
    }
    let c = 0;
    while ((n = dart.notNull(n) - 1) >= 0) {
      let product = dart.notNull(x) * dart.notNull(multiplicandDigits[$_get]((t93 = i, i = dart.notNull(t93) + 1, t93)));
      let combined = product + dart.notNull(accumulatorDigits[$_get](j)) + c;
      accumulatorDigits[$_set]((t93$ = j, j = dart.notNull(t93$) + 1, t93$), (combined & 65535) >>> 0);
      c = (combined / 65536)[$truncate]();
    }
    while (c !== 0) {
      let l = dart.notNull(accumulatorDigits[$_get](j)) + c;
      accumulatorDigits[$_set]((t93$0 = j, j = dart.notNull(t93$0) + 1, t93$0), (l & 65535) >>> 0);
      c = (l / 65536)[$truncate]();
    }
  }
  ['*'](other) {
    core._BigIntImpl._check(other);
    let used = this[_used$];
    let otherUsed = other[_used$];
    if (used === 0 || otherUsed === 0) {
      return core._BigIntImpl.zero;
    }
    let resultUsed = dart.notNull(used) + dart.notNull(otherUsed);
    let digits = this[_digits$];
    let otherDigits = other[_digits$];
    let resultDigits = _native_typed_data.NativeUint16List.new(resultUsed);
    let i = 0;
    while (i < dart.notNull(otherUsed)) {
      core._BigIntImpl._mulAdd(otherDigits[$_get](i), digits, 0, resultDigits, i, used);
      i = i + 1;
    }
    return new core._BigIntImpl.__(!dart.equals(this[_isNegative], other[_isNegative]), resultUsed, resultDigits);
  }
  static _mulDigits(xDigits, xUsed, otherDigits, otherUsed, resultDigits) {
    let resultUsed = dart.notNull(xUsed) + dart.notNull(otherUsed);
    let i = resultUsed;
    if (!(dart.notNull(resultDigits[$length]) >= i)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 1994, 12, "resultDigits.length >= i");
    while ((i = i - 1) >= 0) {
      resultDigits[$_set](i, 0);
    }
    i = 0;
    while (i < dart.notNull(otherUsed)) {
      core._BigIntImpl._mulAdd(otherDigits[$_get](i), xDigits, 0, resultDigits, i, xUsed);
      i = i + 1;
    }
    return resultUsed;
  }
  static _estimateQuotientDigit(topDigitDivisor, digits, i) {
    if (digits[$_get](i) == topDigitDivisor) return 65535;
    let quotientDigit = (((digits[$_get](i)[$leftShift](16) | dart.notNull(digits[$_get](dart.notNull(i) - 1))) >>> 0) / dart.notNull(topDigitDivisor))[$truncate]();
    if (quotientDigit > 65535) return 65535;
    return quotientDigit;
  }
  [_div](other) {
    if (!(dart.notNull(other[_used$]) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 2018, 12, "other._used > 0");
    if (dart.notNull(this[_used$]) < dart.notNull(other[_used$])) {
      return core._BigIntImpl.zero;
    }
    this[_divRem](other);
    let lastQuo_used = dart.notNull(core._BigIntImpl._lastQuoRemUsed) - dart.notNull(core._BigIntImpl._lastRemUsed);
    let quo_digits = core._BigIntImpl._cloneDigits(core._BigIntImpl._lastQuoRemDigits, core._BigIntImpl._lastRemUsed, core._BigIntImpl._lastQuoRemUsed, lastQuo_used);
    let quo = new core._BigIntImpl.__(false, lastQuo_used, quo_digits);
    if (!dart.equals(this[_isNegative], other[_isNegative]) && dart.notNull(quo[_used$]) > 0) {
      quo = quo._negate();
    }
    return quo;
  }
  [_rem](other) {
    if (!(dart.notNull(other[_used$]) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 2037, 12, "other._used > 0");
    if (dart.notNull(this[_used$]) < dart.notNull(other[_used$])) {
      return this;
    }
    this[_divRem](other);
    let remDigits = core._BigIntImpl._cloneDigits(core._BigIntImpl._lastQuoRemDigits, 0, core._BigIntImpl._lastRemUsed, core._BigIntImpl._lastRemUsed);
    let rem = new core._BigIntImpl.__(false, core._BigIntImpl._lastRemUsed, remDigits);
    if (dart.notNull(core._BigIntImpl._lastRem_nsh) > 0) {
      rem = rem['>>'](core._BigIntImpl._lastRem_nsh);
    }
    if (dart.test(this[_isNegative]) && dart.notNull(rem[_used$]) > 0) {
      rem = rem._negate();
    }
    return rem;
  }
  [_divRem](other) {
    let t93, t93$;
    if (this[_used$] == core._BigIntImpl._lastDividendUsed && other[_used$] == core._BigIntImpl._lastDivisorUsed && this[_digits$] == core._BigIntImpl._lastDividendDigits && other[_digits$] == core._BigIntImpl._lastDivisorDigits) {
      return;
    }
    if (!(dart.notNull(this[_used$]) >= dart.notNull(other[_used$]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 2072, 12, "_used >= other._used");
    let nsh = 16 - other[_digits$][$_get](dart.notNull(other[_used$]) - 1)[$bitLength];
    let resultDigits = null;
    let resultUsed = null;
    let yDigits = null;
    let yUsed = null;
    if (nsh > 0) {
      yDigits = _native_typed_data.NativeUint16List.new(dart.notNull(other[_used$]) + 5);
      yUsed = core._BigIntImpl._lShiftDigits(other[_digits$], other[_used$], nsh, yDigits);
      resultDigits = _native_typed_data.NativeUint16List.new(dart.notNull(this[_used$]) + 5);
      resultUsed = core._BigIntImpl._lShiftDigits(this[_digits$], this[_used$], nsh, resultDigits);
    } else {
      yDigits = other[_digits$];
      yUsed = other[_used$];
      resultDigits = core._BigIntImpl._cloneDigits(this[_digits$], 0, this[_used$], dart.notNull(this[_used$]) + 2);
      resultUsed = this[_used$];
    }
    let topDigitDivisor = yDigits[$_get](dart.notNull(yUsed) - 1);
    let i = resultUsed;
    let j = dart.notNull(i) - dart.notNull(yUsed);
    let tmpDigits = _native_typed_data.NativeUint16List.new(i);
    let tmpUsed = core._BigIntImpl._dlShiftDigits(yDigits, yUsed, j, tmpDigits);
    if (dart.notNull(core._BigIntImpl._compareDigits(resultDigits, resultUsed, tmpDigits, tmpUsed)) >= 0) {
      if (!(i == resultUsed)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 2105, 14, "i == resultUsed");
      resultDigits[$_set]((t93 = resultUsed, resultUsed = dart.notNull(t93) + 1, t93), 1);
      core._BigIntImpl._absSub(resultDigits, resultUsed, tmpDigits, tmpUsed, resultDigits);
    } else {
      resultDigits[$_set]((t93$ = resultUsed, resultUsed = dart.notNull(t93$) + 1, t93$), 0);
    }
    let nyDigits = _native_typed_data.NativeUint16List.new(dart.notNull(yUsed) + 2);
    nyDigits[$_set](yUsed, 1);
    core._BigIntImpl._absSub(nyDigits, dart.notNull(yUsed) + 1, yDigits, yUsed, nyDigits);
    i = dart.notNull(i) - 1;
    while (j > 0) {
      let estimatedQuotientDigit = core._BigIntImpl._estimateQuotientDigit(topDigitDivisor, resultDigits, i);
      j = j - 1;
      core._BigIntImpl._mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed);
      if (dart.notNull(resultDigits[$_get](i)) < dart.notNull(estimatedQuotientDigit)) {
        let tmpUsed = core._BigIntImpl._dlShiftDigits(nyDigits, yUsed, j, tmpDigits);
        core._BigIntImpl._absSub(resultDigits, resultUsed, tmpDigits, tmpUsed, resultDigits);
        while (dart.notNull(resultDigits[$_get](i)) < (estimatedQuotientDigit = dart.notNull(estimatedQuotientDigit) - 1)) {
          core._BigIntImpl._absSub(resultDigits, resultUsed, tmpDigits, tmpUsed, resultDigits);
        }
      }
      i = dart.notNull(i) - 1;
    }
    core._BigIntImpl._lastDividendDigits = this[_digits$];
    core._BigIntImpl._lastDividendUsed = this[_used$];
    core._BigIntImpl._lastDivisorDigits = other[_digits$];
    core._BigIntImpl._lastDivisorUsed = other[_used$];
    core._BigIntImpl._lastQuoRemDigits = resultDigits;
    core._BigIntImpl._lastQuoRemUsed = resultUsed;
    core._BigIntImpl._lastRemUsed = yUsed;
    core._BigIntImpl._lastRem_nsh = nsh;
  }
  get hashCode() {
    function combine(hash, value) {
      hash = 536870911 & dart.notNull(hash) + dart.notNull(value);
      hash = 536870911 & dart.notNull(hash) + ((524287 & dart.notNull(hash)) << 10);
      return (dart.notNull(hash) ^ hash[$rightShift](6)) >>> 0;
    }
    dart.fn(combine, intAndintToint());
    function finish(hash) {
      hash = 536870911 & dart.notNull(hash) + ((67108863 & dart.notNull(hash)) << 3);
      hash = (dart.notNull(hash) ^ hash[$rightShift](11)) >>> 0;
      return 536870911 & dart.notNull(hash) + ((16383 & dart.notNull(hash)) << 15);
    }
    dart.fn(finish, intToint());
    if (dart.test(this[_isZero])) return 6707;
    let hash = dart.test(this[_isNegative]) ? 83585 : 429689;
    for (let i = 0; i < dart.notNull(this[_used$]); i = i + 1) {
      hash = combine(hash, this[_digits$][$_get](i));
    }
    return finish(hash);
  }
  _equals(other) {
    return core._BigIntImpl.is(other) && this.compareTo(other) === 0;
  }
  get bitLength() {
    if (this[_used$] === 0) return 0;
    if (dart.test(this[_isNegative])) return this['~']().bitLength;
    return 16 * (dart.notNull(this[_used$]) - 1) + this[_digits$][$_get](dart.notNull(this[_used$]) - 1)[$bitLength];
  }
  ['~/'](other) {
    core._BigIntImpl._check(other);
    if (other[_used$] === 0) {
      dart.throw(C267 || CT.C267);
    }
    return this[_div](other);
  }
  remainder(other) {
    core._BigIntImpl._check(other);
    if (other[_used$] === 0) {
      dart.throw(C267 || CT.C267);
    }
    return this[_rem](other);
  }
  ['/'](other) {
    return dart.notNull(this.toDouble()) / dart.notNull(other.toDouble());
  }
  ['<'](other) {
    core._BigIntImpl._check(other);
    return dart.notNull(this.compareTo(other)) < 0;
  }
  ['<='](other) {
    core._BigIntImpl._check(other);
    return dart.notNull(this.compareTo(other)) <= 0;
  }
  ['>'](other) {
    core._BigIntImpl._check(other);
    return dart.notNull(this.compareTo(other)) > 0;
  }
  ['>='](other) {
    core._BigIntImpl._check(other);
    return dart.notNull(this.compareTo(other)) >= 0;
  }
  ['%'](other) {
    core._BigIntImpl._check(other);
    if (other[_used$] === 0) {
      dart.throw(C267 || CT.C267);
    }
    let result = this[_rem](other);
    if (dart.test(result[_isNegative])) {
      if (dart.test(other[_isNegative])) {
        result = result['-'](other);
      } else {
        result = result['+'](other);
      }
    }
    return result;
  }
  get sign() {
    if (this[_used$] === 0) return 0;
    return dart.test(this[_isNegative]) ? -1 : 1;
  }
  get isEven() {
    return this[_used$] === 0 || (dart.notNull(this[_digits$][$_get](0)) & 1) === 0;
  }
  get isOdd() {
    return !dart.test(this.isEven);
  }
  get isNegative() {
    return this[_isNegative];
  }
  pow(exponent) {
    if (dart.notNull(exponent) < 0) {
      dart.throw(new core.ArgumentError.new("Exponent must not be negative: " + dart.str(exponent)));
    }
    if (exponent === 0) return core._BigIntImpl.one;
    let result = core._BigIntImpl.one;
    let base = this;
    while (exponent !== 0) {
      if ((dart.notNull(exponent) & 1) === 1) {
        result = result['*'](base);
      }
      exponent = exponent[$rightShift](1);
      if (exponent !== 0) {
        base = base['*'](base);
      }
    }
    return result;
  }
  modPow(exponent, modulus) {
    core._BigIntImpl._check(exponent);
    core._BigIntImpl._check(modulus);
    if (dart.test(exponent[_isNegative])) {
      dart.throw(new core.ArgumentError.new("exponent must be positive: " + dart.str(exponent)));
    }
    if (dart.test(modulus['<='](core._BigIntImpl.zero))) {
      dart.throw(new core.ArgumentError.new("modulus must be strictly positive: " + dart.str(modulus)));
    }
    if (dart.test(exponent[_isZero])) return core._BigIntImpl.one;
    let modulusUsed = modulus[_used$];
    let modulusUsed2p4 = 2 * dart.notNull(modulusUsed) + 4;
    let exponentBitlen = exponent.bitLength;
    if (dart.notNull(exponentBitlen) <= 0) return core._BigIntImpl.one;
    let z = new core._BigIntClassic.new(modulus);
    let resultDigits = _native_typed_data.NativeUint16List.new(modulusUsed2p4);
    let result2Digits = _native_typed_data.NativeUint16List.new(modulusUsed2p4);
    let gDigits = _native_typed_data.NativeUint16List.new(modulusUsed);
    let gUsed = z.convert(this, gDigits);
    for (let j = dart.notNull(gUsed) - 1; j >= 0; j = j - 1) {
      resultDigits[$_set](j, gDigits[$_get](j));
    }
    let resultUsed = gUsed;
    let result2Used = null;
    for (let i = dart.notNull(exponentBitlen) - 2; i >= 0; i = i - 1) {
      result2Used = z.sqr(resultDigits, resultUsed, result2Digits);
      if (!dart.test(exponent['&'](core._BigIntImpl.one['<<'](i))[_isZero])) {
        resultUsed = z.mul(result2Digits, result2Used, gDigits, gUsed, resultDigits);
      } else {
        let tmpDigits = resultDigits;
        let tmpUsed = resultUsed;
        resultDigits = result2Digits;
        resultUsed = result2Used;
        result2Digits = tmpDigits;
        result2Used = tmpUsed;
      }
    }
    return z.revert(resultDigits, resultUsed);
  }
  static _binaryGcd(x, y, inv) {
    let xDigits = x[_digits$];
    let yDigits = y[_digits$];
    let xUsed = x[_used$];
    let yUsed = y[_used$];
    let maxUsed = dart.notNull(xUsed) > dart.notNull(yUsed) ? xUsed : yUsed;
    let unshiftedMaxUsed = maxUsed;
    xDigits = core._BigIntImpl._cloneDigits(xDigits, 0, xUsed, maxUsed);
    yDigits = core._BigIntImpl._cloneDigits(yDigits, 0, yUsed, maxUsed);
    let shiftAmount = 0;
    if (dart.test(inv)) {
      if (yUsed === 1 && yDigits[$_get](0) === 1) return core._BigIntImpl.one;
      if (yUsed === 0 || yDigits[$_get](0)[$isEven] && xDigits[$_get](0)[$isEven]) {
        dart.throw(core.Exception.new("Not coprime"));
      }
    } else {
      if (dart.test(x[_isZero])) {
        dart.throw(new core.ArgumentError.value(0, "this", "must not be zero"));
      }
      if (dart.test(y[_isZero])) {
        dart.throw(new core.ArgumentError.value(0, "other", "must not be zero"));
      }
      if (xUsed === 1 && xDigits[$_get](0) === 1 || yUsed === 1 && yDigits[$_get](0) === 1) return core._BigIntImpl.one;
      while ((dart.notNull(xDigits[$_get](0)) & 1) === 0 && (dart.notNull(yDigits[$_get](0)) & 1) === 0) {
        core._BigIntImpl._rsh(xDigits, xUsed, 1, xDigits);
        core._BigIntImpl._rsh(yDigits, yUsed, 1, yDigits);
        shiftAmount = shiftAmount + 1;
      }
      if (shiftAmount >= 16) {
        let digitShiftAmount = (shiftAmount / 16)[$truncate]();
        xUsed = dart.notNull(xUsed) - digitShiftAmount;
        yUsed = dart.notNull(yUsed) - digitShiftAmount;
        maxUsed = dart.notNull(maxUsed) - digitShiftAmount;
      }
      if ((dart.notNull(yDigits[$_get](0)) & 1) === 1) {
        let tmpDigits = xDigits;
        let tmpUsed = xUsed;
        xDigits = yDigits;
        xUsed = yUsed;
        yDigits = tmpDigits;
        yUsed = tmpUsed;
      }
    }
    let uDigits = core._BigIntImpl._cloneDigits(xDigits, 0, xUsed, unshiftedMaxUsed);
    let vDigits = core._BigIntImpl._cloneDigits(yDigits, 0, yUsed, dart.notNull(unshiftedMaxUsed) + 2);
    let ac = (dart.notNull(xDigits[$_get](0)) & 1) === 0;
    let abcdUsed = dart.notNull(maxUsed) + 1;
    let abcdLen = abcdUsed + 2;
    let aDigits = core._dummyList;
    let aIsNegative = false;
    let cDigits = core._dummyList;
    let cIsNegative = false;
    if (ac) {
      aDigits = _native_typed_data.NativeUint16List.new(abcdLen);
      aDigits[$_set](0, 1);
      cDigits = _native_typed_data.NativeUint16List.new(abcdLen);
    }
    let bDigits = _native_typed_data.NativeUint16List.new(abcdLen);
    let bIsNegative = false;
    let dDigits = _native_typed_data.NativeUint16List.new(abcdLen);
    let dIsNegative = false;
    dDigits[$_set](0, 1);
    while (true) {
      while ((dart.notNull(uDigits[$_get](0)) & 1) === 0) {
        core._BigIntImpl._rsh(uDigits, maxUsed, 1, uDigits);
        if (ac) {
          if ((dart.notNull(aDigits[$_get](0)) & 1) === 1 || (dart.notNull(bDigits[$_get](0)) & 1) === 1) {
            if (aIsNegative) {
              if (aDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(aDigits, maxUsed, yDigits, maxUsed)) > 0) {
                core._BigIntImpl._absSub(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
              } else {
                core._BigIntImpl._absSub(yDigits, maxUsed, aDigits, maxUsed, aDigits);
                aIsNegative = false;
              }
            } else {
              core._BigIntImpl._absAdd(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
            }
            if (bIsNegative) {
              core._BigIntImpl._absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
            } else if (bDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(bDigits, maxUsed, xDigits, maxUsed)) > 0) {
              core._BigIntImpl._absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
            } else {
              core._BigIntImpl._absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
              bIsNegative = true;
            }
          }
          core._BigIntImpl._rsh(aDigits, abcdUsed, 1, aDigits);
        } else if ((dart.notNull(bDigits[$_get](0)) & 1) === 1) {
          if (bIsNegative) {
            core._BigIntImpl._absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
          } else if (bDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(bDigits, maxUsed, xDigits, maxUsed)) > 0) {
            core._BigIntImpl._absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
          } else {
            core._BigIntImpl._absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
            bIsNegative = true;
          }
        }
        core._BigIntImpl._rsh(bDigits, abcdUsed, 1, bDigits);
      }
      while ((dart.notNull(vDigits[$_get](0)) & 1) === 0) {
        core._BigIntImpl._rsh(vDigits, maxUsed, 1, vDigits);
        if (ac) {
          if ((dart.notNull(cDigits[$_get](0)) & 1) === 1 || (dart.notNull(dDigits[$_get](0)) & 1) === 1) {
            if (cIsNegative) {
              if (cDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(cDigits, maxUsed, yDigits, maxUsed)) > 0) {
                core._BigIntImpl._absSub(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
              } else {
                core._BigIntImpl._absSub(yDigits, maxUsed, cDigits, maxUsed, cDigits);
                cIsNegative = false;
              }
            } else {
              core._BigIntImpl._absAdd(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
            }
            if (dIsNegative) {
              core._BigIntImpl._absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
            } else if (dDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(dDigits, maxUsed, xDigits, maxUsed)) > 0) {
              core._BigIntImpl._absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
            } else {
              core._BigIntImpl._absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
              dIsNegative = true;
            }
          }
          core._BigIntImpl._rsh(cDigits, abcdUsed, 1, cDigits);
        } else if ((dart.notNull(dDigits[$_get](0)) & 1) === 1) {
          if (dIsNegative) {
            core._BigIntImpl._absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
          } else if (dDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(dDigits, maxUsed, xDigits, maxUsed)) > 0) {
            core._BigIntImpl._absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
          } else {
            core._BigIntImpl._absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
            dIsNegative = true;
          }
        }
        core._BigIntImpl._rsh(dDigits, abcdUsed, 1, dDigits);
      }
      if (dart.notNull(core._BigIntImpl._compareDigits(uDigits, maxUsed, vDigits, maxUsed)) >= 0) {
        core._BigIntImpl._absSub(uDigits, maxUsed, vDigits, maxUsed, uDigits);
        if (ac) {
          if (aIsNegative[$_equals](cIsNegative)) {
            let a_cmp_c = core._BigIntImpl._compareDigits(aDigits, abcdUsed, cDigits, abcdUsed);
            if (dart.notNull(a_cmp_c) > 0) {
              core._BigIntImpl._absSub(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
            } else {
              core._BigIntImpl._absSub(cDigits, abcdUsed, aDigits, abcdUsed, aDigits);
              aIsNegative = !aIsNegative && a_cmp_c !== 0;
            }
          } else {
            core._BigIntImpl._absAdd(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
          }
        }
        if (bIsNegative[$_equals](dIsNegative)) {
          let b_cmp_d = core._BigIntImpl._compareDigits(bDigits, abcdUsed, dDigits, abcdUsed);
          if (dart.notNull(b_cmp_d) > 0) {
            core._BigIntImpl._absSub(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
          } else {
            core._BigIntImpl._absSub(dDigits, abcdUsed, bDigits, abcdUsed, bDigits);
            bIsNegative = !bIsNegative && b_cmp_d !== 0;
          }
        } else {
          core._BigIntImpl._absAdd(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
        }
      } else {
        core._BigIntImpl._absSub(vDigits, maxUsed, uDigits, maxUsed, vDigits);
        if (ac) {
          if (cIsNegative[$_equals](aIsNegative)) {
            let c_cmp_a = core._BigIntImpl._compareDigits(cDigits, abcdUsed, aDigits, abcdUsed);
            if (dart.notNull(c_cmp_a) > 0) {
              core._BigIntImpl._absSub(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
            } else {
              core._BigIntImpl._absSub(aDigits, abcdUsed, cDigits, abcdUsed, cDigits);
              cIsNegative = !cIsNegative && c_cmp_a !== 0;
            }
          } else {
            core._BigIntImpl._absAdd(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
          }
        }
        if (dIsNegative[$_equals](bIsNegative)) {
          let d_cmp_b = core._BigIntImpl._compareDigits(dDigits, abcdUsed, bDigits, abcdUsed);
          if (dart.notNull(d_cmp_b) > 0) {
            core._BigIntImpl._absSub(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
          } else {
            core._BigIntImpl._absSub(bDigits, abcdUsed, dDigits, abcdUsed, dDigits);
            dIsNegative = !dIsNegative && d_cmp_b !== 0;
          }
        } else {
          core._BigIntImpl._absAdd(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
        }
      }
      let i = maxUsed;
      while (dart.notNull(i) > 0 && uDigits[$_get](dart.notNull(i) - 1) === 0)
        i = dart.notNull(i) - 1;
      if (i === 0) break;
    }
    if (!dart.test(inv)) {
      if (shiftAmount > 0) {
        maxUsed = core._BigIntImpl._lShiftDigits(vDigits, maxUsed, shiftAmount, vDigits);
      }
      return new core._BigIntImpl.__(false, maxUsed, vDigits);
    }
    let i = dart.notNull(maxUsed) - 1;
    while (i > 0 && vDigits[$_get](i) === 0)
      i = i - 1;
    if (i !== 0 || vDigits[$_get](0) !== 1) {
      dart.throw(core.Exception.new("Not coprime"));
    }
    if (dIsNegative) {
      while (dDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(dDigits, maxUsed, xDigits, maxUsed)) > 0) {
        core._BigIntImpl._absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
      }
      core._BigIntImpl._absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
      dIsNegative = false;
    } else {
      while (dDigits[$_get](maxUsed) !== 0 || dart.notNull(core._BigIntImpl._compareDigits(dDigits, maxUsed, xDigits, maxUsed)) >= 0) {
        core._BigIntImpl._absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
      }
    }
    return new core._BigIntImpl.__(false, maxUsed, dDigits);
  }
  modInverse(modulus) {
    core._BigIntImpl._check(modulus);
    if (dart.test(modulus['<='](core._BigIntImpl.zero))) {
      dart.throw(new core.ArgumentError.new("Modulus must be strictly positive: " + dart.str(modulus)));
    }
    if (dart.equals(modulus, core._BigIntImpl.one)) return core._BigIntImpl.zero;
    let tmp = this;
    if (dart.test(tmp[_isNegative]) || dart.notNull(tmp[_absCompare](modulus)) >= 0) {
      tmp = tmp['%'](modulus);
    }
    return core._BigIntImpl._binaryGcd(modulus, tmp, true);
  }
  gcd(other) {
    core._BigIntImpl._check(other);
    if (dart.test(this[_isZero])) return other.abs();
    if (dart.test(other[_isZero])) return this.abs();
    return core._BigIntImpl._binaryGcd(this, other, false);
  }
  toUnsigned(width) {
    return this['&'](core._BigIntImpl.one['<<'](width)['-'](core._BigIntImpl.one));
  }
  toSigned(width) {
    let signMask = core._BigIntImpl.one['<<'](dart.notNull(width) - 1);
    return this['&'](signMask['-'](core._BigIntImpl.one))['-'](this['&'](signMask));
  }
  get isValidInt() {
    if (dart.notNull(this[_used$]) <= 3) return true;
    let asInt = this.toInt();
    if (!asInt[$toDouble]()[$isFinite]) return false;
    return this._equals(core._BigIntImpl._fromInt(asInt));
  }
  toInt() {
    let result = 0;
    for (let i = dart.notNull(this[_used$]) - 1; i >= 0; i = i - 1) {
      result = result * 65536 + dart.notNull(this[_digits$][$_get](i));
    }
    return dart.test(this[_isNegative]) ? -result : result;
  }
  toDouble() {
    let t94, t93, t94$, t93$;
    if (dart.test(this[_isZero])) return 0.0;
    let resultBits = _native_typed_data.NativeUint8List.new(8);
    let length = 16 * (dart.notNull(this[_used$]) - 1) + this[_digits$][$_get](dart.notNull(this[_used$]) - 1)[$bitLength];
    if (length > 971 + 53) {
      return dart.test(this[_isNegative]) ? -1 / 0 : 1 / 0;
    }
    if (dart.test(this[_isNegative])) resultBits[$_set](7, 128);
    let biasedExponent = length - 53 + 1075;
    resultBits[$_set](6, (biasedExponent & 15) << 4);
    t93 = resultBits;
    t94 = 7;
    t93[$_set](t94, (dart.notNull(t93[$_get](t94)) | biasedExponent[$rightShift](4)) >>> 0);
    let cachedBits = 0;
    let cachedBitsLength = 0;
    let digitIndex = dart.notNull(this[_used$]) - 1;
    const readBits = n => {
      while (cachedBitsLength < dart.notNull(n)) {
        let nextDigit = null;
        let nextDigitLength = 16;
        if (digitIndex < 0) {
          nextDigit = 0;
          digitIndex = digitIndex - 1;
        } else {
          nextDigit = this[_digits$][$_get](digitIndex);
          if (digitIndex === dart.notNull(this[_used$]) - 1) nextDigitLength = nextDigit[$bitLength];
          digitIndex = digitIndex - 1;
        }
        cachedBits = cachedBits[$leftShift](nextDigitLength) + dart.notNull(nextDigit);
        cachedBitsLength = cachedBitsLength + nextDigitLength;
      }
      let result = cachedBits[$rightShift](cachedBitsLength - dart.notNull(n));
      cachedBits = cachedBits - result[$leftShift](cachedBitsLength - dart.notNull(n));
      cachedBitsLength = cachedBitsLength - dart.notNull(n);
      return result;
    };
    dart.fn(readBits, intToint());
    let leadingBits = dart.notNull(readBits(5)) & 15;
    t93$ = resultBits;
    t94$ = 6;
    t93$[$_set](t94$, (dart.notNull(t93$[$_get](t94$)) | leadingBits) >>> 0);
    for (let i = 5; i >= 0; i = i - 1) {
      resultBits[$_set](i, readBits(8));
    }
    function roundUp() {
      let carry = 1;
      for (let i = 0; i < 8; i = i + 1) {
        if (carry === 0) break;
        let sum = dart.notNull(resultBits[$_get](i)) + carry;
        resultBits[$_set](i, sum & 255);
        carry = sum[$rightShift](8);
      }
    }
    dart.fn(roundUp, VoidTovoid());
    if (readBits(1) === 1) {
      if (resultBits[$_get](0)[$isOdd]) {
        roundUp();
      } else {
        if (cachedBits !== 0) {
          roundUp();
        } else {
          for (let i = digitIndex; digitIndex >= 0; i = i - 1) {
            if (this[_digits$][$_get](i) !== 0) {
              roundUp();
              break;
            }
          }
        }
      }
    }
    return resultBits[$buffer][$asByteData]()[$getFloat64](0, typed_data.Endian.little);
  }
  toString() {
    if (this[_used$] === 0) return "0";
    if (this[_used$] === 1) {
      if (dart.test(this[_isNegative])) return (-dart.notNull(this[_digits$][$_get](0)))[$toString]();
      return dart.toString(this[_digits$][$_get](0));
    }
    let decimalDigitChunks = JSArrayOfString().of([]);
    let rest = dart.test(this.isNegative) ? this._negate() : this;
    while (dart.notNull(rest[_used$]) > 1) {
      let digits4 = dart.toString(rest.remainder(core._BigIntImpl._bigInt10000));
      decimalDigitChunks[$add](digits4);
      if (digits4.length === 1) decimalDigitChunks[$add]("000");
      if (digits4.length === 2) decimalDigitChunks[$add]("00");
      if (digits4.length === 3) decimalDigitChunks[$add]("0");
      rest = rest['~/'](core._BigIntImpl._bigInt10000);
    }
    decimalDigitChunks[$add](dart.toString(rest[_digits$][$_get](0)));
    if (dart.test(this[_isNegative])) decimalDigitChunks[$add]("-");
    return decimalDigitChunks[$reversed][$join]();
  }
  [_toRadixCodeUnit](digit) {
    if (dart.notNull(digit) < 10) return 48 + dart.notNull(digit);
    return 97 + dart.notNull(digit) - 10;
  }
  toRadixString(radix) {
    if (dart.notNull(radix) > 36) dart.throw(new core.RangeError.range(radix, 2, 36));
    if (this[_used$] === 0) return "0";
    if (this[_used$] === 1) {
      let digitString = this[_digits$][$_get](0)[$toRadixString](radix);
      if (dart.test(this[_isNegative])) return "-" + digitString;
      return digitString;
    }
    if (radix === 16) return this[_toHexString]();
    let base = core._BigIntImpl._fromInt(radix);
    let reversedDigitCodeUnits = JSArrayOfint().of([]);
    let rest = this.abs();
    while (!dart.test(rest[_isZero])) {
      let digit = rest.remainder(base).toInt();
      rest = rest['~/'](base);
      reversedDigitCodeUnits[$add](this[_toRadixCodeUnit](digit));
    }
    let digitString = core.String.fromCharCodes(reversedDigitCodeUnits[$reversed]);
    if (dart.test(this[_isNegative])) return "-" + dart.notNull(digitString);
    return digitString;
  }
  [_toHexString]() {
    let chars = JSArrayOfint().of([]);
    for (let i = 0; i < dart.notNull(this[_used$]) - 1; i = i + 1) {
      let chunk = this[_digits$][$_get](i);
      for (let j = 0; j < (16 / 4)[$truncate](); j = j + 1) {
        chars[$add](this[_toRadixCodeUnit](dart.notNull(chunk) & 15));
        chunk = chunk[$rightShift](4);
      }
    }
    let msbChunk = this[_digits$][$_get](dart.notNull(this[_used$]) - 1);
    while (msbChunk !== 0) {
      chars[$add](this[_toRadixCodeUnit](dart.notNull(msbChunk) & 15));
      msbChunk = msbChunk[$rightShift](4);
    }
    if (dart.test(this[_isNegative])) {
      chars[$add](45);
    }
    return core.String.fromCharCodes(chars[$reversed]);
  }
};
(core._BigIntImpl.__ = function(isNegative, used, digits) {
  core._BigIntImpl._normalized.call(this, isNegative, core._BigIntImpl._normalize(used, digits), digits);
}).prototype = core._BigIntImpl.prototype;
(core._BigIntImpl._normalized = function(isNegative, _used, _digits) {
  this[_used$] = _used;
  this[_digits$] = _digits;
  this[_isNegative] = _used === 0 ? false : isNegative;
  ;
}).prototype = core._BigIntImpl.prototype;
;
core._BigIntImpl[dart.implements] = () => [core.BigInt];
;
dart.setGetterSignature(core._BigIntImpl, () => ({
  __proto__: dart.getGetters(core._BigIntImpl.__proto__),
  [_isZero]: core.bool,
  bitLength: core.int,
  sign: core.int,
  isEven: core.bool,
  isOdd: core.bool,
  isNegative: core.bool,
  isValidInt: core.bool
}));
dart.setLibraryUri(core._BigIntImpl, "dart:core");
;
dart.defineExtensionMethods(core._BigIntImpl, ['compareTo', '_equals', 'toString']);
dart.defineExtensionAccessors(core._BigIntImpl, ['hashCode']);
dart.defineLazy(core._BigIntImpl, {
  /*core._BigIntImpl._digitBits*/get _digitBits() {
    return 16;
  },
  /*core._BigIntImpl._digitBase*/get _digitBase() {
    return 65536;
  },
  /*core._BigIntImpl._digitMask*/get _digitMask() {
    return 65535;
  },
  /*core._BigIntImpl.zero*/get zero() {
    return core._BigIntImpl._fromInt(0);
  },
  /*core._BigIntImpl.one*/get one() {
    return core._BigIntImpl._fromInt(1);
  },
  /*core._BigIntImpl.two*/get two() {
    return core._BigIntImpl._fromInt(2);
  },
  /*core._BigIntImpl._minusOne*/get _minusOne() {
    return core._BigIntImpl.one._negate();
  },
  /*core._BigIntImpl._bigInt10000*/get _bigInt10000() {
    return core._BigIntImpl._fromInt(10000);
  },
  /*core._BigIntImpl._lastDividendDigits*/get _lastDividendDigits() {
    return null;
  },
  set _lastDividendDigits(_) {},
  /*core._BigIntImpl._lastDividendUsed*/get _lastDividendUsed() {
    return null;
  },
  set _lastDividendUsed(_) {},
  /*core._BigIntImpl._lastDivisorDigits*/get _lastDivisorDigits() {
    return null;
  },
  set _lastDivisorDigits(_) {},
  /*core._BigIntImpl._lastDivisorUsed*/get _lastDivisorUsed() {
    return null;
  },
  set _lastDivisorUsed(_) {},
  /*core._BigIntImpl._lastQuoRemDigits*/get _lastQuoRemDigits() {
    return null;
  },
  set _lastQuoRemDigits(_) {},
  /*core._BigIntImpl._lastQuoRemUsed*/get _lastQuoRemUsed() {
    return null;
  },
  set _lastQuoRemUsed(_) {},
  /*core._BigIntImpl._lastRemUsed*/get _lastRemUsed() {
    return null;
  },
  set _lastRemUsed(_) {},
  /*core._BigIntImpl._lastRem_nsh*/get _lastRem_nsh() {
    return null;
  },
  set _lastRem_nsh(_) {},
  /*core._BigIntImpl._parseRE*/get _parseRE() {
    return core.RegExp.new("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", {caseSensitive: false});
  },
  set _parseRE(_) {},
  /*core._BigIntImpl._bitsForFromDouble*/get _bitsForFromDouble() {
    return _native_typed_data.NativeUint8List.new(8);
  },
  /*core._BigIntImpl._simpleValidIntDigits*/get _simpleValidIntDigits() {
    return 3;
  }
});
core._BigIntReduction = class _BigIntReduction extends core.Object {};
(core._BigIntReduction.new = function() {
  ;
}).prototype = core._BigIntReduction.prototype;
;
dart.setLibraryUri(core._BigIntReduction, "dart:core");
const _modulus$ = dart.privateName(core, "_modulus");
const _normalizedModulus = dart.privateName(core, "_normalizedModulus");
const _reduce = dart.privateName(core, "_reduce");
core._BigIntClassic = class _BigIntClassic extends core.Object {
  convert(x, resultDigits) {
    let digits = null;
    let used = null;
    if (dart.test(x[_isNegative]) || dart.notNull(x[_absCompare](this[_modulus$])) >= 0) {
      let remainder = x[_rem](this[_modulus$]);
      if (dart.test(x[_isNegative]) && dart.notNull(remainder[_used$]) > 0) {
        if (!dart.test(remainder[_isNegative])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 3000, 16, "remainder._isNegative");
        remainder = remainder['+'](this[_modulus$]);
      }
      if (!!dart.test(remainder[_isNegative])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 3003, 14, "!remainder._isNegative");
      used = remainder[_used$];
      digits = remainder[_digits$];
    } else {
      used = x[_used$];
      digits = x[_digits$];
    }
    let i = used;
    while ((i = dart.notNull(i) - 1) >= 0) {
      resultDigits[$_set](i, digits[$_get](i));
    }
    return used;
  }
  revert(xDigits, xUsed) {
    return new core._BigIntImpl.__(false, xUsed, xDigits);
  }
  [_reduce](xDigits, xUsed) {
    if (dart.notNull(xUsed) < dart.notNull(this[_modulus$][_used$])) {
      return xUsed;
    }
    let reverted = this.revert(xDigits, xUsed);
    let rem = reverted[_rem](this[_normalizedModulus]);
    return this.convert(rem, xDigits);
  }
  sqr(xDigits, xUsed, resultDigits) {
    let b = new core._BigIntImpl.__(false, xUsed, xDigits);
    let b2 = b['*'](b);
    for (let i = 0; i < dart.notNull(b2[_used$]); i = i + 1) {
      resultDigits[$_set](i, b2[_digits$][$_get](i));
    }
    for (let i = b2[_used$]; dart.notNull(i) < 2 * dart.notNull(xUsed); i = dart.notNull(i) + 1) {
      resultDigits[$_set](i, 0);
    }
    return this[_reduce](resultDigits, 2 * dart.notNull(xUsed));
  }
  mul(xDigits, xUsed, yDigits, yUsed, resultDigits) {
    let resultUsed = core._BigIntImpl._mulDigits(xDigits, xUsed, yDigits, yUsed, resultDigits);
    return this[_reduce](resultDigits, resultUsed);
  }
};
(core._BigIntClassic.new = function(_modulus) {
  this[_modulus$] = _modulus;
  this[_normalizedModulus] = _modulus['<<'](16 - _modulus[_digits$][$_get](dart.notNull(_modulus[_used$]) - 1)[$bitLength]);
  ;
}).prototype = core._BigIntClassic.prototype;
;
core._BigIntClassic[dart.implements] = () => [core._BigIntReduction];
;
dart.setLibraryUri(core._BigIntClassic, "dart:core");
;
const message$13 = dart.privateName(core, "Deprecated.message");
core.Deprecated = class Deprecated extends core.Object {
  get message() {
    return this[message$13];
  }
  set message(value) {
    super.message = value;
  }
  get expires() {
    return this.message;
  }
  toString() {
    return "Deprecated feature: " + dart.str(this.message);
  }
};
(core.Deprecated.new = function(message) {
  this[message$13] = message;
  ;
}).prototype = core.Deprecated.prototype;
;
dart.setGetterSignature(core.Deprecated, () => ({
  __proto__: dart.getGetters(core.Deprecated.__proto__),
  expires: core.String
}));
dart.setLibraryUri(core.Deprecated, "dart:core");
;
dart.defineExtensionMethods(core.Deprecated, ['toString']);
core._Override = class _Override extends core.Object {};
(core._Override.new = function() {
  ;
}).prototype = core._Override.prototype;
;
dart.setLibraryUri(core._Override, "dart:core");
core.Provisional = class Provisional extends core.Object {
  get message() {
    return null;
  }
};
(core.Provisional.new = function(opts) {
  let message = opts && 'message' in opts ? opts.message : null;
  ;
}).prototype = core.Provisional.prototype;
;
dart.setGetterSignature(core.Provisional, () => ({
  __proto__: dart.getGetters(core.Provisional.__proto__),
  message: core.String
}));
dart.setLibraryUri(core.Provisional, "dart:core");
core._Proxy = class _Proxy extends core.Object {};
(core._Proxy.new = function() {
  ;
}).prototype = core._Proxy.prototype;
;
dart.setLibraryUri(core._Proxy, "dart:core");
const name$11 = dart.privateName(core, "pragma.name");
const options$ = dart.privateName(core, "pragma.options");
core.pragma = class pragma extends core.Object {
  get name() {
    return this[name$11];
  }
  set name(value) {
    super.name = value;
  }
  get options() {
    return this[options$];
  }
  set options(value) {
    super.options = value;
  }
};
(core.pragma.__ = function(name, options) {
  if (options === void 0) options = null;
  this[name$11] = name;
  this[options$] = options;
  ;
}).prototype = core.pragma.prototype;
;
dart.setLibraryUri(core.pragma, "dart:core");
;
core.BigInt = class BigInt extends core.Object {
  static get zero() {
    return core._BigIntImpl.zero;
  }
  static get one() {
    return core._BigIntImpl.one;
  }
  static get two() {
    return core._BigIntImpl.two;
  }
  static parse(source, opts) {
    let radix = opts && 'radix' in opts ? opts.radix : null;
    return core._BigIntImpl.parse(source, {radix: radix});
  }
  static tryParse(source, opts) {
    let radix = opts && 'radix' in opts ? opts.radix : null;
    return core._BigIntImpl._tryParse(source, {radix: radix});
  }
};
(core.BigInt[dart.mixinNew] = function() {
}).prototype = core.BigInt.prototype;
;
core.BigInt[dart.implements] = () => [core.Comparable$(core.BigInt)];
dart.setLibraryUri(core.BigInt, "dart:core");
core.bool = class bool extends core.Object {
  static is(o) {
    return o === true || o === false;
  }
  static as(o) {
    if (o === true || o === false || o == null) return o;
    return dart.as(o, core.bool, false);
  }
  static _check(o) {
    if (o === true || o === false || o == null) return o;
    return dart.as(o, core.bool, true);
  }
  static fromEnvironment(name, opts) {
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : false;
    dart.throw(new core.UnsupportedError.new("bool.fromEnvironment can only be used as a const constructor"));
  }
  get [$hashCode]() {
    return super[$hashCode];
  }
  [$bitAnd](other) {
    return dart.test(other) && this;
  }
  [$bitOr](other) {
    return dart.test(other) || this;
  }
  [$bitXor](other) {
    return (!dart.test(other))[$_equals](this);
  }
  [$toString]() {
    return this ? "true" : "false";
  }
};
(core.bool[dart.mixinNew] = function() {
}).prototype = core.bool.prototype;
;
dart.setLibraryUri(core.bool, "dart:core");
const _is_Comparable_default = Symbol('_is_Comparable_default');
core.Comparable$ = dart.generic(T => {
  class Comparable extends core.Object {
    static compare(a, b) {
      return a[$compareTo](b);
    }
  }
  (Comparable.new = function() {
    ;
  }).prototype = Comparable.prototype;
  ;
  Comparable.prototype[_is_Comparable_default] = true;
  dart.setLibraryUri(Comparable, "dart:core");
  return Comparable;
});
core.Comparable = core.Comparable$();
;
const _value$6 = dart.privateName(core, "_value");
const isUtc$ = dart.privateName(core, "DateTime.isUtc");
core.DateTime = class DateTime extends core.Object {
  get isUtc() {
    return this[isUtc$];
  }
  set isUtc(value) {
    super.isUtc = value;
  }
  static _microsecondInRoundedMilliseconds(microsecond) {
    return (dart.notNull(microsecond) / 1000)[$round]();
  }
  static parse(formattedString) {
    let re = core.DateTime._parseFormat;
    let match = re.firstMatch(formattedString);
    if (match != null) {
      function parseIntOrZero(matched) {
        if (matched == null) return 0;
        return core.int.parse(matched);
      }
      dart.fn(parseIntOrZero, StringToint());
      function parseMilliAndMicroseconds(matched) {
        if (matched == null) return 0;
        let length = matched.length;
        if (!(length >= 1)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/date_time.dart", 295, 16, "length >= 1");
        let result = 0;
        for (let i = 0; i < 6; i = i + 1) {
          result = result * 10;
          if (i < matched.length) {
            result = result + ((matched[$codeUnitAt](i) ^ 48) >>> 0);
          }
        }
        return result;
      }
      dart.fn(parseMilliAndMicroseconds, StringToint());
      let years = core.int.parse(match._get(1));
      let month = core.int.parse(match._get(2));
      let day = core.int.parse(match._get(3));
      let hour = parseIntOrZero(match._get(4));
      let minute = parseIntOrZero(match._get(5));
      let second = parseIntOrZero(match._get(6));
      let milliAndMicroseconds = parseMilliAndMicroseconds(match._get(7));
      let millisecond = (dart.notNull(milliAndMicroseconds) / 1000)[$truncate]();
      let microsecond = milliAndMicroseconds[$remainder](1000);
      let isUtc = false;
      if (match._get(8) != null) {
        isUtc = true;
        if (match._get(9) != null) {
          let sign = match._get(9) === "-" ? -1 : 1;
          let hourDifference = core.int.parse(match._get(10));
          let minuteDifference = parseIntOrZero(match._get(11));
          minuteDifference = dart.notNull(minuteDifference) + 60 * dart.notNull(hourDifference);
          minute = dart.notNull(minute) - sign * dart.notNull(minuteDifference);
        }
      }
      let value = core.DateTime._brokenDownDateToValue(years, month, day, hour, minute, second, millisecond, microsecond, isUtc);
      if (value == null) {
        dart.throw(new core.FormatException.new("Time out of range", formattedString));
      }
      return new core.DateTime._withValue(value, {isUtc: isUtc});
    } else {
      dart.throw(new core.FormatException.new("Invalid date format", formattedString));
    }
  }
  static tryParse(formattedString) {
    try {
      return core.DateTime.parse(formattedString);
    } catch (e) {
      let ex = dart.getThrown(e);
      if (core.FormatException.is(ex)) {
        return null;
      } else
        throw e;
    }
  }
  _equals(other) {
    return core.DateTime.is(other) && this[_value$6] == other.millisecondsSinceEpoch && dart.equals(this.isUtc, other.isUtc);
  }
  isBefore(other) {
    return dart.notNull(this[_value$6]) < dart.notNull(other.millisecondsSinceEpoch);
  }
  isAfter(other) {
    return dart.notNull(this[_value$6]) > dart.notNull(other.millisecondsSinceEpoch);
  }
  isAtSameMomentAs(other) {
    return this[_value$6] == other.millisecondsSinceEpoch;
  }
  compareTo(other) {
    return this[_value$6][$compareTo](other.millisecondsSinceEpoch);
  }
  get hashCode() {
    return (dart.notNull(this[_value$6]) ^ this[_value$6][$rightShift](30)) & 1073741823;
  }
  toLocal() {
    if (dart.test(this.isUtc)) {
      return new core.DateTime._withValue(this[_value$6], {isUtc: false});
    }
    return this;
  }
  toUtc() {
    if (dart.test(this.isUtc)) return this;
    return new core.DateTime._withValue(this[_value$6], {isUtc: true});
  }
  static _fourDigits(n) {
    let absN = n[$abs]();
    let sign = dart.notNull(n) < 0 ? "-" : "";
    if (absN >= 1000) return dart.str(n);
    if (absN >= 100) return sign + "0" + dart.str(absN);
    if (absN >= 10) return sign + "00" + dart.str(absN);
    return sign + "000" + dart.str(absN);
  }
  static _sixDigits(n) {
    if (!(dart.notNull(n) < -9999 || dart.notNull(n) > 9999)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/date_time.dart", 540, 12, "n < -9999 || n > 9999");
    let absN = n[$abs]();
    let sign = dart.notNull(n) < 0 ? "-" : "+";
    if (absN >= 100000) return sign + dart.str(absN);
    return sign + "0" + dart.str(absN);
  }
  static _threeDigits(n) {
    if (dart.notNull(n) >= 100) return dart.str(n);
    if (dart.notNull(n) >= 10) return "0" + dart.str(n);
    return "00" + dart.str(n);
  }
  static _twoDigits(n) {
    if (dart.notNull(n) >= 10) return dart.str(n);
    return "0" + dart.str(n);
  }
  toString() {
    let y = core.DateTime._fourDigits(this.year);
    let m = core.DateTime._twoDigits(this.month);
    let d = core.DateTime._twoDigits(this.day);
    let h = core.DateTime._twoDigits(this.hour);
    let min = core.DateTime._twoDigits(this.minute);
    let sec = core.DateTime._twoDigits(this.second);
    let ms = core.DateTime._threeDigits(this.millisecond);
    let us = this.microsecond === 0 ? "" : core.DateTime._threeDigits(this.microsecond);
    if (dart.test(this.isUtc)) {
      return dart.str(y) + "-" + dart.str(m) + "-" + dart.str(d) + " " + dart.str(h) + ":" + dart.str(min) + ":" + dart.str(sec) + "." + dart.str(ms) + dart.str(us) + "Z";
    } else {
      return dart.str(y) + "-" + dart.str(m) + "-" + dart.str(d) + " " + dart.str(h) + ":" + dart.str(min) + ":" + dart.str(sec) + "." + dart.str(ms) + dart.str(us);
    }
  }
  toIso8601String() {
    let y = dart.notNull(this.year) >= -9999 && dart.notNull(this.year) <= 9999 ? core.DateTime._fourDigits(this.year) : core.DateTime._sixDigits(this.year);
    let m = core.DateTime._twoDigits(this.month);
    let d = core.DateTime._twoDigits(this.day);
    let h = core.DateTime._twoDigits(this.hour);
    let min = core.DateTime._twoDigits(this.minute);
    let sec = core.DateTime._twoDigits(this.second);
    let ms = core.DateTime._threeDigits(this.millisecond);
    let us = this.microsecond === 0 ? "" : core.DateTime._threeDigits(this.microsecond);
    if (dart.test(this.isUtc)) {
      return dart.str(y) + "-" + dart.str(m) + "-" + dart.str(d) + "T" + dart.str(h) + ":" + dart.str(min) + ":" + dart.str(sec) + "." + dart.str(ms) + dart.str(us) + "Z";
    } else {
      return dart.str(y) + "-" + dart.str(m) + "-" + dart.str(d) + "T" + dart.str(h) + ":" + dart.str(min) + ":" + dart.str(sec) + "." + dart.str(ms) + dart.str(us);
    }
  }
  add(duration) {
    return new core.DateTime._withValue(dart.notNull(this[_value$6]) + dart.notNull(duration.inMilliseconds), {isUtc: this.isUtc});
  }
  subtract(duration) {
    return new core.DateTime._withValue(dart.notNull(this[_value$6]) - dart.notNull(duration.inMilliseconds), {isUtc: this.isUtc});
  }
  difference(other) {
    return new core.Duration.new({milliseconds: dart.notNull(this[_value$6]) - dart.notNull(other[_value$6])});
  }
  static _brokenDownDateToValue(year, month, day, hour, minute, second, millisecond, microsecond, isUtc) {
    return dart.asInt(_js_helper.Primitives.valueFromDecomposedDate(year, month, day, hour, minute, second, dart.notNull(millisecond) + dart.notNull(core.DateTime._microsecondInRoundedMilliseconds(microsecond)), isUtc));
  }
  get millisecondsSinceEpoch() {
    return this[_value$6];
  }
  get microsecondsSinceEpoch() {
    return dart.notNull(this[_value$6]) * 1000;
  }
  get timeZoneName() {
    if (dart.test(this.isUtc)) return "UTC";
    return _js_helper.Primitives.getTimeZoneName(this);
  }
  get timeZoneOffset() {
    if (dart.test(this.isUtc)) return new core.Duration.new();
    return new core.Duration.new({minutes: _js_helper.Primitives.getTimeZoneOffsetInMinutes(this)});
  }
  get year() {
    return _js_helper.Primitives.getYear(this);
  }
  get month() {
    return _js_helper.Primitives.getMonth(this);
  }
  get day() {
    return _js_helper.Primitives.getDay(this);
  }
  get hour() {
    return _js_helper.Primitives.getHours(this);
  }
  get minute() {
    return _js_helper.Primitives.getMinutes(this);
  }
  get second() {
    return _js_helper.Primitives.getSeconds(this);
  }
  get millisecond() {
    return _js_helper.Primitives.getMilliseconds(this);
  }
  get microsecond() {
    return 0;
  }
  get weekday() {
    return _js_helper.Primitives.getWeekday(this);
  }
};
(core.DateTime.new = function(year, month, day, hour, minute, second, millisecond, microsecond) {
  if (month === void 0) month = 1;
  if (day === void 0) day = 1;
  if (hour === void 0) hour = 0;
  if (minute === void 0) minute = 0;
  if (second === void 0) second = 0;
  if (millisecond === void 0) millisecond = 0;
  if (microsecond === void 0) microsecond = 0;
  core.DateTime._internal.call(this, year, month, day, hour, minute, second, millisecond, microsecond, false);
}).prototype = core.DateTime.prototype;
(core.DateTime.utc = function(year, month, day, hour, minute, second, millisecond, microsecond) {
  if (month === void 0) month = 1;
  if (day === void 0) day = 1;
  if (hour === void 0) hour = 0;
  if (minute === void 0) minute = 0;
  if (second === void 0) second = 0;
  if (millisecond === void 0) millisecond = 0;
  if (microsecond === void 0) microsecond = 0;
  core.DateTime._internal.call(this, year, month, day, hour, minute, second, millisecond, microsecond, true);
}).prototype = core.DateTime.prototype;
(core.DateTime.now = function() {
  core.DateTime._now.call(this);
}).prototype = core.DateTime.prototype;
(core.DateTime.fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, opts) {
  let isUtc = opts && 'isUtc' in opts ? opts.isUtc : false;
  core.DateTime._withValue.call(this, millisecondsSinceEpoch, {isUtc: isUtc});
}).prototype = core.DateTime.prototype;
(core.DateTime.fromMicrosecondsSinceEpoch = function(microsecondsSinceEpoch, opts) {
  let isUtc = opts && 'isUtc' in opts ? opts.isUtc : false;
  core.DateTime._withValue.call(this, core.DateTime._microsecondInRoundedMilliseconds(microsecondsSinceEpoch), {isUtc: isUtc});
}).prototype = core.DateTime.prototype;
(core.DateTime._withValue = function(_value, opts) {
  let isUtc = opts && 'isUtc' in opts ? opts.isUtc : null;
  this[_value$6] = _value;
  this[isUtc$] = isUtc;
  if (this.millisecondsSinceEpoch[$abs]() > 8640000000000000.0 || this.millisecondsSinceEpoch[$abs]() === 8640000000000000.0 && this.microsecond !== 0) {
    dart.throw(new core.ArgumentError.new("DateTime is outside valid range: " + dart.str(this.millisecondsSinceEpoch)));
  }
  if (this.isUtc == null) {
    dart.throw(new core.ArgumentError.new("'isUtc' flag may not be 'null'"));
  }
}).prototype = core.DateTime.prototype;
(core.DateTime._internal = function(year, month, day, hour, minute, second, millisecond, microsecond, isUtc) {
  this[isUtc$] = typeof isUtc == 'boolean' ? isUtc : dart.throw(new core.ArgumentError.value(isUtc, "isUtc"));
  this[_value$6] = core.int._check(_js_helper.checkInt(_js_helper.Primitives.valueFromDecomposedDate(year, month, day, hour, minute, second, dart.notNull(millisecond) + dart.notNull(core.DateTime._microsecondInRoundedMilliseconds(microsecond)), isUtc)));
  ;
}).prototype = core.DateTime.prototype;
(core.DateTime._now = function() {
  this[isUtc$] = false;
  this[_value$6] = _js_helper.Primitives.dateNow();
  ;
}).prototype = core.DateTime.prototype;
;
core.DateTime[dart.implements] = () => [core.Comparable$(core.DateTime)];
;
dart.setGetterSignature(core.DateTime, () => ({
  __proto__: dart.getGetters(core.DateTime.__proto__),
  millisecondsSinceEpoch: core.int,
  microsecondsSinceEpoch: core.int,
  timeZoneName: core.String,
  timeZoneOffset: core.Duration,
  year: core.int,
  month: core.int,
  day: core.int,
  hour: core.int,
  minute: core.int,
  second: core.int,
  millisecond: core.int,
  microsecond: core.int,
  weekday: core.int
}));
dart.setLibraryUri(core.DateTime, "dart:core");
;
dart.defineExtensionMethods(core.DateTime, ['_equals', 'compareTo', 'toString']);
dart.defineExtensionAccessors(core.DateTime, ['hashCode']);
dart.defineLazy(core.DateTime, {
  /*core.DateTime.monday*/get monday() {
    return 1;
  },
  /*core.DateTime.tuesday*/get tuesday() {
    return 2;
  },
  /*core.DateTime.wednesday*/get wednesday() {
    return 3;
  },
  /*core.DateTime.thursday*/get thursday() {
    return 4;
  },
  /*core.DateTime.friday*/get friday() {
    return 5;
  },
  /*core.DateTime.saturday*/get saturday() {
    return 6;
  },
  /*core.DateTime.sunday*/get sunday() {
    return 7;
  },
  /*core.DateTime.daysPerWeek*/get daysPerWeek() {
    return 7;
  },
  /*core.DateTime.january*/get january() {
    return 1;
  },
  /*core.DateTime.february*/get february() {
    return 2;
  },
  /*core.DateTime.march*/get march() {
    return 3;
  },
  /*core.DateTime.april*/get april() {
    return 4;
  },
  /*core.DateTime.may*/get may() {
    return 5;
  },
  /*core.DateTime.june*/get june() {
    return 6;
  },
  /*core.DateTime.july*/get july() {
    return 7;
  },
  /*core.DateTime.august*/get august() {
    return 8;
  },
  /*core.DateTime.september*/get september() {
    return 9;
  },
  /*core.DateTime.october*/get october() {
    return 10;
  },
  /*core.DateTime.november*/get november() {
    return 11;
  },
  /*core.DateTime.december*/get december() {
    return 12;
  },
  /*core.DateTime.monthsPerYear*/get monthsPerYear() {
    return 12;
  },
  /*core.DateTime._maxMillisecondsSinceEpoch*/get _maxMillisecondsSinceEpoch() {
    return 8640000000000000.0;
  },
  /*core.DateTime._parseFormat*/get _parseFormat() {
    return core.RegExp.new("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)" + "(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?" + "( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$");
  }
});
const _duration = dart.privateName(core, "_duration");
const _duration$ = dart.privateName(core, "Duration._duration");
let C268;
core.Duration = class Duration extends core.Object {
  get [_duration]() {
    return this[_duration$];
  }
  set [_duration](value) {
    super[_duration] = value;
  }
  ['+'](other) {
    return new core.Duration._microseconds(dart.notNull(this[_duration]) + dart.notNull(other[_duration]));
  }
  ['-'](other) {
    return new core.Duration._microseconds(dart.notNull(this[_duration]) - dart.notNull(other[_duration]));
  }
  ['*'](factor) {
    return new core.Duration._microseconds((dart.notNull(this[_duration]) * dart.notNull(factor))[$round]());
  }
  ['~/'](quotient) {
    if (quotient === 0) dart.throw(new core.IntegerDivisionByZeroException.new());
    return new core.Duration._microseconds((dart.notNull(this[_duration]) / dart.notNull(quotient))[$truncate]());
  }
  ['<'](other) {
    return dart.notNull(this[_duration]) < dart.notNull(other[_duration]);
  }
  ['>'](other) {
    return dart.notNull(this[_duration]) > dart.notNull(other[_duration]);
  }
  ['<='](other) {
    return dart.notNull(this[_duration]) <= dart.notNull(other[_duration]);
  }
  ['>='](other) {
    return dart.notNull(this[_duration]) >= dart.notNull(other[_duration]);
  }
  get inDays() {
    return (dart.notNull(this[_duration]) / 86400000000.0)[$truncate]();
  }
  get inHours() {
    return (dart.notNull(this[_duration]) / 3600000000.0)[$truncate]();
  }
  get inMinutes() {
    return (dart.notNull(this[_duration]) / 60000000)[$truncate]();
  }
  get inSeconds() {
    return (dart.notNull(this[_duration]) / 1000000)[$truncate]();
  }
  get inMilliseconds() {
    return (dart.notNull(this[_duration]) / 1000)[$truncate]();
  }
  get inMicroseconds() {
    return this[_duration];
  }
  _equals(other) {
    return core.Duration.is(other) && this[_duration] == other.inMicroseconds;
  }
  get hashCode() {
    return dart.hashCode(this[_duration]);
  }
  compareTo(other) {
    core.Duration._check(other);
    return this[_duration][$compareTo](other[_duration]);
  }
  toString() {
    function sixDigits(n) {
      if (dart.notNull(n) >= 100000) return dart.str(n);
      if (dart.notNull(n) >= 10000) return "0" + dart.str(n);
      if (dart.notNull(n) >= 1000) return "00" + dart.str(n);
      if (dart.notNull(n) >= 100) return "000" + dart.str(n);
      if (dart.notNull(n) >= 10) return "0000" + dart.str(n);
      return "00000" + dart.str(n);
    }
    dart.fn(sixDigits, intToString());
    function twoDigits(n) {
      if (dart.notNull(n) >= 10) return dart.str(n);
      return "0" + dart.str(n);
    }
    dart.fn(twoDigits, intToString());
    if (dart.notNull(this.inMicroseconds) < 0) {
      return "-" + dart.str(this._negate());
    }
    let twoDigitMinutes = twoDigits(this.inMinutes[$remainder](60));
    let twoDigitSeconds = twoDigits(this.inSeconds[$remainder](60));
    let sixDigitUs = sixDigits(this.inMicroseconds[$remainder](1000000));
    return dart.str(this.inHours) + ":" + dart.str(twoDigitMinutes) + ":" + dart.str(twoDigitSeconds) + "." + dart.str(sixDigitUs);
  }
  get isNegative() {
    return dart.notNull(this[_duration]) < 0;
  }
  abs() {
    return new core.Duration._microseconds(this[_duration][$abs]());
  }
  _negate() {
    return new core.Duration._microseconds(0 - dart.notNull(this[_duration]));
  }
};
(core.Duration.new = function(opts) {
  let days = opts && 'days' in opts ? opts.days : 0;
  let hours = opts && 'hours' in opts ? opts.hours : 0;
  let minutes = opts && 'minutes' in opts ? opts.minutes : 0;
  let seconds = opts && 'seconds' in opts ? opts.seconds : 0;
  let milliseconds = opts && 'milliseconds' in opts ? opts.milliseconds : 0;
  let microseconds = opts && 'microseconds' in opts ? opts.microseconds : 0;
  core.Duration._microseconds.call(this, 86400000000.0 * dart.notNull(days) + 3600000000.0 * dart.notNull(hours) + 60000000 * dart.notNull(minutes) + 1000000 * dart.notNull(seconds) + 1000 * dart.notNull(milliseconds) + dart.notNull(microseconds));
}).prototype = core.Duration.prototype;
(core.Duration._microseconds = function(_duration) {
  this[_duration$] = _duration;
  ;
}).prototype = core.Duration.prototype;
;
core.Duration[dart.implements] = () => [core.Comparable$(core.Duration)];
;
dart.setGetterSignature(core.Duration, () => ({
  __proto__: dart.getGetters(core.Duration.__proto__),
  inDays: core.int,
  inHours: core.int,
  inMinutes: core.int,
  inSeconds: core.int,
  inMilliseconds: core.int,
  inMicroseconds: core.int,
  isNegative: core.bool
}));
dart.setLibraryUri(core.Duration, "dart:core");
;
dart.defineExtensionMethods(core.Duration, ['_equals', 'compareTo', 'toString']);
dart.defineExtensionAccessors(core.Duration, ['hashCode']);
dart.defineLazy(core.Duration, {
  /*core.Duration.microsecondsPerMillisecond*/get microsecondsPerMillisecond() {
    return 1000;
  },
  /*core.Duration.millisecondsPerSecond*/get millisecondsPerSecond() {
    return 1000;
  },
  /*core.Duration.secondsPerMinute*/get secondsPerMinute() {
    return 60;
  },
  /*core.Duration.minutesPerHour*/get minutesPerHour() {
    return 60;
  },
  /*core.Duration.hoursPerDay*/get hoursPerDay() {
    return 24;
  },
  /*core.Duration.microsecondsPerSecond*/get microsecondsPerSecond() {
    return 1000000;
  },
  /*core.Duration.microsecondsPerMinute*/get microsecondsPerMinute() {
    return 60000000;
  },
  /*core.Duration.microsecondsPerHour*/get microsecondsPerHour() {
    return 3600000000.0;
  },
  /*core.Duration.microsecondsPerDay*/get microsecondsPerDay() {
    return 86400000000.0;
  },
  /*core.Duration.millisecondsPerMinute*/get millisecondsPerMinute() {
    return 60000;
  },
  /*core.Duration.millisecondsPerHour*/get millisecondsPerHour() {
    return 3600000;
  },
  /*core.Duration.millisecondsPerDay*/get millisecondsPerDay() {
    return 86400000;
  },
  /*core.Duration.secondsPerHour*/get secondsPerHour() {
    return 3600;
  },
  /*core.Duration.secondsPerDay*/get secondsPerDay() {
    return 86400;
  },
  /*core.Duration.minutesPerDay*/get minutesPerDay() {
    return 1440;
  },
  /*core.Duration.zero*/get zero() {
    return C268 || CT.C268;
  }
});
core.TypeError = class TypeError extends core.AssertionError {};
(core.TypeError.new = function() {
  core.TypeError.__proto__.new.call(this);
  ;
}).prototype = core.TypeError.prototype;
;
dart.setLibraryUri(core.TypeError, "dart:core");
core.CastError = class CastError extends core.Error {};
(core.CastError.new = function() {
  core.CastError.__proto__.new.call(this);
  ;
}).prototype = core.CastError.prototype;
;
dart.setLibraryUri(core.CastError, "dart:core");
core.NullThrownError = class NullThrownError extends core.Error {
  toString() {
    return "Throw of null.";
  }
};
(core.NullThrownError.new = function() {
  core.NullThrownError.__proto__.new.call(this);
  ;
}).prototype = core.NullThrownError.prototype;
;
dart.setLibraryUri(core.NullThrownError, "dart:core");
dart.defineExtensionMethods(core.NullThrownError, ['toString']);
const invalidValue = dart.privateName(core, "ArgumentError.invalidValue");
const name$12 = dart.privateName(core, "ArgumentError.name");
const message$14 = dart.privateName(core, "ArgumentError.message");
core.ArgumentError = class ArgumentError extends core.Error {
  get invalidValue() {
    return this[invalidValue];
  }
  set invalidValue(value) {
    super.invalidValue = value;
  }
  get name() {
    return this[name$12];
  }
  set name(value) {
    super.name = value;
  }
  get message() {
    return this[message$14];
  }
  set message(value) {
    super.message = value;
  }
  static checkNotNull(argument, name) {
    if (name === void 0) name = null;
    if (argument == null) dart.throw(new core.ArgumentError.notNull(name));
  }
  get [_errorName$]() {
    return "Invalid argument" + (!dart.test(this[_hasValue$]) ? "(s)" : "");
  }
  get [_errorExplanation$]() {
    return "";
  }
  toString() {
    let nameString = "";
    if (this[$name] != null) {
      nameString = " (" + dart.str(this[$name]) + ")";
    }
    let message = this[$message] == null ? "" : ": " + dart.str(this[$message]);
    let prefix = dart.str(this[_errorName$]) + nameString + message;
    if (!dart.test(this[_hasValue$])) return prefix;
    let explanation = this[_errorExplanation$];
    let errorValue = core.Error.safeToString(this[$invalidValue]);
    return prefix + dart.str(explanation) + ": " + dart.str(errorValue);
  }
};
(core.ArgumentError.new = function(message) {
  if (message === void 0) message = null;
  this[message$14] = message;
  this[invalidValue] = null;
  this[_hasValue$] = false;
  this[name$12] = null;
  core.ArgumentError.__proto__.new.call(this);
  ;
}).prototype = core.ArgumentError.prototype;
(core.ArgumentError.value = function(value, name, message) {
  if (name === void 0) name = null;
  if (message === void 0) message = null;
  this[name$12] = name;
  this[message$14] = message;
  this[invalidValue] = value;
  this[_hasValue$] = true;
  core.ArgumentError.__proto__.new.call(this);
  ;
}).prototype = core.ArgumentError.prototype;
(core.ArgumentError.notNull = function(name) {
  if (name === void 0) name = null;
  this[name$12] = name;
  this[_hasValue$] = false;
  this[message$14] = "Must not be null";
  this[invalidValue] = null;
  core.ArgumentError.__proto__.new.call(this);
  ;
}).prototype = core.ArgumentError.prototype;
;
dart.setGetterSignature(core.ArgumentError, () => ({
  __proto__: dart.getGetters(core.ArgumentError.__proto__),
  [_errorName$]: core.String,
  [_errorExplanation$]: core.String
}));
dart.setLibraryUri(core.ArgumentError, "dart:core");
;
dart.defineExtensionMethods(core.ArgumentError, ['toString']);
dart.defineExtensionAccessors(core.ArgumentError, ['invalidValue', 'name', 'message']);
const start = dart.privateName(core, "RangeError.start");
const end = dart.privateName(core, "RangeError.end");
core.RangeError = class RangeError extends core.ArgumentError {
  get start() {
    return this[start];
  }
  set start(value) {
    super.start = value;
  }
  get end() {
    return this[end];
  }
  set end(value) {
    super.end = value;
  }
  static checkValueInInterval(value, minValue, maxValue, name, message) {
    if (name === void 0) name = null;
    if (message === void 0) message = null;
    if (dart.notNull(value) < dart.notNull(minValue) || dart.notNull(value) > dart.notNull(maxValue)) {
      dart.throw(new core.RangeError.range(value, minValue, maxValue, name, message));
    }
  }
  static checkValidIndex(index, indexable, name, length, message) {
    if (name === void 0) name = null;
    if (length === void 0) length = null;
    if (message === void 0) message = null;
    length == null ? length = core.int._check(dart.dload(indexable, 'length')) : null;
    if (0 > dart.notNull(index) || dart.notNull(index) >= dart.notNull(length)) {
      name == null ? name = "index" : null;
      dart.throw(new core.IndexError.new(index, indexable, name, message, length));
    }
  }
  static checkValidRange(start, end, length, startName, endName, message) {
    if (startName === void 0) startName = null;
    if (endName === void 0) endName = null;
    if (message === void 0) message = null;
    if (0 > dart.notNull(start) || dart.notNull(start) > dart.notNull(length)) {
      startName == null ? startName = "start" : null;
      dart.throw(new core.RangeError.range(start, 0, length, startName, message));
    }
    if (end != null) {
      if (dart.notNull(start) > dart.notNull(end) || dart.notNull(end) > dart.notNull(length)) {
        endName == null ? endName = "end" : null;
        dart.throw(new core.RangeError.range(end, start, length, endName, message));
      }
      return end;
    }
    return length;
  }
  static checkNotNegative(value, name, message) {
    if (name === void 0) name = null;
    if (message === void 0) message = null;
    if (dart.notNull(value) < 0) dart.throw(new core.RangeError.range(value, 0, null, name, message));
  }
  get [_errorName$]() {
    return "RangeError";
  }
  get [_errorExplanation$]() {
    if (!dart.test(this[_hasValue$])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/errors.dart", 353, 12, "_hasValue");
    let explanation = "";
    if (this.start == null) {
      if (this.end != null) {
        explanation = ": Not less than or equal to " + dart.str(this.end);
      }
    } else if (this.end == null) {
      explanation = ": Not greater than or equal to " + dart.str(this.start);
    } else if (dart.notNull(this.end) > dart.notNull(this.start)) {
      explanation = ": Not in range " + dart.str(this.start) + ".." + dart.str(this.end) + ", inclusive";
    } else if (dart.notNull(this.end) < dart.notNull(this.start)) {
      explanation = ": Valid value range is empty";
    } else {
      explanation = ": Only valid value is " + dart.str(this.start);
    }
    return explanation;
  }
};
(core.RangeError.new = function(message) {
  this[start] = null;
  this[end] = null;
  core.RangeError.__proto__.new.call(this, message);
  ;
}).prototype = core.RangeError.prototype;
(core.RangeError.value = function(value, name, message) {
  if (name === void 0) name = null;
  if (message === void 0) message = null;
  this[start] = null;
  this[end] = null;
  core.RangeError.__proto__.value.call(this, value, name, message != null ? message : "Value not in range");
  ;
}).prototype = core.RangeError.prototype;
(core.RangeError.range = function(invalidValue, minValue, maxValue, name, message) {
  if (name === void 0) name = null;
  if (message === void 0) message = null;
  this[start] = minValue;
  this[end] = maxValue;
  core.RangeError.__proto__.value.call(this, invalidValue, name, message != null ? message : "Invalid value");
  ;
}).prototype = core.RangeError.prototype;
;
dart.setLibraryUri(core.RangeError, "dart:core");
;
const indexable$ = dart.privateName(core, "IndexError.indexable");
const length$0 = dart.privateName(core, "IndexError.length");
core.IndexError = class IndexError extends core.ArgumentError {
  get indexable() {
    return this[indexable$];
  }
  set indexable(value) {
    super.indexable = value;
  }
  get length() {
    return this[length$0];
  }
  set length(value) {
    super.length = value;
  }
  get start() {
    return 0;
  }
  get end() {
    return dart.notNull(this.length) - 1;
  }
  get [_errorName$]() {
    return "RangeError";
  }
  get [_errorExplanation$]() {
    if (!dart.test(this[_hasValue$])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/errors.dart", 409, 12, "_hasValue");
    let invalidValue = core.int._check(this[$invalidValue]);
    if (dart.notNull(invalidValue) < 0) {
      return ": index must not be negative";
    }
    if (this.length === 0) {
      return ": no indices are valid";
    }
    return ": index should be less than " + dart.str(this.length);
  }
};
(core.IndexError.new = function(invalidValue, indexable, name, message, length) {
  let t95;
  if (name === void 0) name = null;
  if (message === void 0) message = null;
  if (length === void 0) length = null;
  this[indexable$] = indexable;
  this[length$0] = core.int._check((t95 = length, t95 == null ? dart.dload(indexable, 'length') : t95));
  core.IndexError.__proto__.value.call(this, invalidValue, name, message != null ? message : "Index out of range");
  ;
}).prototype = core.IndexError.prototype;
;
core.IndexError[dart.implements] = () => [core.RangeError];
dart.setGetterSignature(core.IndexError, () => ({
  __proto__: dart.getGetters(core.IndexError.__proto__),
  start: core.int,
  end: core.int
}));
dart.setLibraryUri(core.IndexError, "dart:core");
;
const _className = dart.privateName(core, "_className");
core.AbstractClassInstantiationError = class AbstractClassInstantiationError extends core.Error {
  toString() {
    return "Cannot instantiate abstract class: '" + dart.str(this[_className]) + "'";
  }
};
(core.AbstractClassInstantiationError.new = function(className) {
  this[_className] = className;
  core.AbstractClassInstantiationError.__proto__.new.call(this);
  ;
}).prototype = core.AbstractClassInstantiationError.prototype;
;
dart.setLibraryUri(core.AbstractClassInstantiationError, "dart:core");
;
dart.defineExtensionMethods(core.AbstractClassInstantiationError, ['toString']);
core.NoSuchMethodError = class NoSuchMethodError extends core.Error {
  toString() {
    let sb = new core.StringBuffer.new("");
    let comma = "";
    if (this[_arguments$] != null) {
      for (let argument of this[_arguments$]) {
        sb.write(comma);
        sb.write(core.Error.safeToString(argument));
        comma = ", ";
      }
    }
    if (this[_namedArguments$] != null) {
      this[_namedArguments$][$forEach](dart.fn((key, value) => {
        sb.write(comma);
        sb.write(core._symbolToString(key));
        sb.write(": ");
        sb.write(core.Error.safeToString(value));
        comma = ", ";
      }, SymbolAnddynamicToNull()));
    }
    let memberName = core._symbolToString(this[_memberName$]);
    let receiverText = core.Error.safeToString(this[_receiver$]);
    let actualParameters = dart.str(sb);
    let failureMessage = dart.InvocationImpl.is(this[_invocation$]) ? dart.InvocationImpl.as(this[_invocation$]).failureMessage : "method not found";
    if (this[_existingArgumentNames$] == null) {
      return "NoSuchMethodError: '" + dart.str(memberName) + "'\n" + dart.str(failureMessage) + "\n" + "Receiver: " + dart.str(receiverText) + "\n" + "Arguments: [" + actualParameters + "]";
    } else {
      let formalParameters = this[_existingArgumentNames$][$join](", ");
      return "NoSuchMethodError: incorrect number of arguments passed to " + "method named '" + dart.str(memberName) + "'\n" + "Receiver: " + dart.str(receiverText) + "\n" + "Tried calling: " + dart.str(memberName) + "(" + actualParameters + ")\n" + "Found: " + dart.str(memberName) + "(" + dart.str(formalParameters) + ")";
    }
  }
};
(core.NoSuchMethodError.withInvocation = function(receiver, invocation) {
  this[_receiver$] = receiver;
  this[_memberName$] = invocation.memberName;
  this[_arguments$] = invocation.positionalArguments;
  this[_namedArguments$] = invocation.namedArguments;
  this[_existingArgumentNames$] = null;
  this[_invocation$] = invocation;
  core.NoSuchMethodError.__proto__.new.call(this);
  ;
}).prototype = core.NoSuchMethodError.prototype;
(core.NoSuchMethodError.new = function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
  if (existingArgumentNames === void 0) existingArgumentNames = null;
  this[_receiver$] = receiver;
  this[_memberName$] = memberName;
  this[_arguments$] = positionalArguments;
  this[_namedArguments$] = namedArguments;
  this[_existingArgumentNames$] = existingArgumentNames;
  this[_invocation$] = null;
  core.NoSuchMethodError.__proto__.new.call(this);
  ;
}).prototype = core.NoSuchMethodError.prototype;
;
dart.setLibraryUri(core.NoSuchMethodError, "dart:core");
;
dart.defineExtensionMethods(core.NoSuchMethodError, ['toString']);
const message$15 = dart.privateName(core, "UnsupportedError.message");
core.UnsupportedError = class UnsupportedError extends core.Error {
  get message() {
    return this[message$15];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return "Unsupported operation: " + dart.str(this.message);
  }
};
(core.UnsupportedError.new = function(message) {
  this[message$15] = message;
  core.UnsupportedError.__proto__.new.call(this);
  ;
}).prototype = core.UnsupportedError.prototype;
;
dart.setLibraryUri(core.UnsupportedError, "dart:core");
;
dart.defineExtensionMethods(core.UnsupportedError, ['toString']);
const message$16 = dart.privateName(core, "UnimplementedError.message");
core.UnimplementedError = class UnimplementedError extends core.Error {
  get message() {
    return this[message$16];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return this.message != null ? "UnimplementedError: " + dart.str(this.message) : "UnimplementedError";
  }
};
(core.UnimplementedError.new = function(message) {
  if (message === void 0) message = null;
  this[message$16] = message;
  core.UnimplementedError.__proto__.new.call(this);
  ;
}).prototype = core.UnimplementedError.prototype;
;
core.UnimplementedError[dart.implements] = () => [core.UnsupportedError];
dart.setLibraryUri(core.UnimplementedError, "dart:core");
;
dart.defineExtensionMethods(core.UnimplementedError, ['toString']);
const message$17 = dart.privateName(core, "StateError.message");
core.StateError = class StateError extends core.Error {
  get message() {
    return this[message$17];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return "Bad state: " + dart.str(this.message);
  }
};
(core.StateError.new = function(message) {
  this[message$17] = message;
  core.StateError.__proto__.new.call(this);
  ;
}).prototype = core.StateError.prototype;
;
dart.setLibraryUri(core.StateError, "dart:core");
;
dart.defineExtensionMethods(core.StateError, ['toString']);
const modifiedObject$ = dart.privateName(core, "ConcurrentModificationError.modifiedObject");
core.ConcurrentModificationError = class ConcurrentModificationError extends core.Error {
  get modifiedObject() {
    return this[modifiedObject$];
  }
  set modifiedObject(value) {
    super.modifiedObject = value;
  }
  toString() {
    if (this.modifiedObject == null) {
      return "Concurrent modification during iteration.";
    }
    return "Concurrent modification during iteration: " + dart.str(core.Error.safeToString(this.modifiedObject)) + ".";
  }
};
(core.ConcurrentModificationError.new = function(modifiedObject) {
  if (modifiedObject === void 0) modifiedObject = null;
  this[modifiedObject$] = modifiedObject;
  core.ConcurrentModificationError.__proto__.new.call(this);
  ;
}).prototype = core.ConcurrentModificationError.prototype;
;
dart.setLibraryUri(core.ConcurrentModificationError, "dart:core");
;
dart.defineExtensionMethods(core.ConcurrentModificationError, ['toString']);
core.OutOfMemoryError = class OutOfMemoryError extends core.Object {
  toString() {
    return "Out of Memory";
  }
  get stackTrace() {
    return null;
  }
};
(core.OutOfMemoryError.new = function() {
  ;
}).prototype = core.OutOfMemoryError.prototype;
;
core.OutOfMemoryError[dart.implements] = () => [core.Error];
dart.setGetterSignature(core.OutOfMemoryError, () => ({
  __proto__: dart.getGetters(core.OutOfMemoryError.__proto__),
  stackTrace: core.StackTrace,
  [$stackTrace]: core.StackTrace
}));
dart.setLibraryUri(core.OutOfMemoryError, "dart:core");
dart.defineExtensionMethods(core.OutOfMemoryError, ['toString']);
dart.defineExtensionAccessors(core.OutOfMemoryError, ['stackTrace']);
core.StackOverflowError = class StackOverflowError extends core.Object {
  toString() {
    return "Stack Overflow";
  }
  get stackTrace() {
    return null;
  }
};
(core.StackOverflowError.new = function() {
  ;
}).prototype = core.StackOverflowError.prototype;
;
core.StackOverflowError[dart.implements] = () => [core.Error];
dart.setGetterSignature(core.StackOverflowError, () => ({
  __proto__: dart.getGetters(core.StackOverflowError.__proto__),
  stackTrace: core.StackTrace,
  [$stackTrace]: core.StackTrace
}));
dart.setLibraryUri(core.StackOverflowError, "dart:core");
dart.defineExtensionMethods(core.StackOverflowError, ['toString']);
dart.defineExtensionAccessors(core.StackOverflowError, ['stackTrace']);
const variableName$ = dart.privateName(core, "CyclicInitializationError.variableName");
core.CyclicInitializationError = class CyclicInitializationError extends core.Error {
  get variableName() {
    return this[variableName$];
  }
  set variableName(value) {
    super.variableName = value;
  }
  toString() {
    return this.variableName == null ? "Reading static variable during its initialization" : "Reading static variable '" + dart.str(this.variableName) + "' during its initialization";
  }
};
(core.CyclicInitializationError.new = function(variableName) {
  if (variableName === void 0) variableName = null;
  this[variableName$] = variableName;
  core.CyclicInitializationError.__proto__.new.call(this);
  ;
}).prototype = core.CyclicInitializationError.prototype;
;
dart.setLibraryUri(core.CyclicInitializationError, "dart:core");
;
dart.defineExtensionMethods(core.CyclicInitializationError, ['toString']);
core.LateInitializationError = class LateInitializationError extends core.Error {};
(core.LateInitializationError.new = function() {
  core.LateInitializationError.__proto__.new.call(this);
  ;
}).prototype = core.LateInitializationError.prototype;
;
dart.setLibraryUri(core.LateInitializationError, "dart:core");
core.Exception = class Exception extends core.Object {
  static new(message) {
    if (message === void 0) message = null;
    return new core._Exception.new(message);
  }
};
(core.Exception[dart.mixinNew] = function() {
}).prototype = core.Exception.prototype;
;
dart.setLibraryUri(core.Exception, "dart:core");
core._Exception = class _Exception extends core.Object {
  toString() {
    if (this.message == null) return "Exception";
    return "Exception: " + dart.str(this.message);
  }
};
(core._Exception.new = function(message) {
  if (message === void 0) message = null;
  this.message = message;
  ;
}).prototype = core._Exception.prototype;
;
core._Exception[dart.implements] = () => [core.Exception];
dart.setLibraryUri(core._Exception, "dart:core");
;
dart.defineExtensionMethods(core._Exception, ['toString']);
const message$18 = dart.privateName(core, "FormatException.message");
const source$ = dart.privateName(core, "FormatException.source");
const offset$ = dart.privateName(core, "FormatException.offset");
core.FormatException = class FormatException extends core.Object {
  get message() {
    return this[message$18];
  }
  set message(value) {
    super.message = value;
  }
  get source() {
    return this[source$];
  }
  set source(value) {
    super.source = value;
  }
  get offset() {
    return this[offset$];
  }
  set offset(value) {
    super.offset = value;
  }
  toString() {
    let report = "FormatException";
    if (this.message != null && "" !== this.message) {
      report = report + ": " + dart.str(this.message);
    }
    let offset = this.offset;
    let objectSource = this.source;
    if (typeof objectSource == 'string') {
      let source = objectSource;
      if (offset != null && (dart.notNull(offset) < 0 || dart.notNull(offset) > source.length)) {
        offset = null;
      }
      if (offset == null) {
        if (source.length > 78) {
          source = source[$substring](0, 75) + "...";
        }
        return report + "\n" + dart.str(source);
      }
      let lineNum = 1;
      let lineStart = 0;
      let previousCharWasCR = false;
      for (let i = 0; i < dart.notNull(offset); i = i + 1) {
        let char = source[$codeUnitAt](i);
        if (char === 10) {
          if (lineStart !== i || !previousCharWasCR) {
            lineNum = lineNum + 1;
          }
          lineStart = i + 1;
          previousCharWasCR = false;
        } else if (char === 13) {
          lineNum = lineNum + 1;
          lineStart = i + 1;
          previousCharWasCR = true;
        }
      }
      if (lineNum > 1) {
        report = report + (" (at line " + dart.str(lineNum) + ", character " + dart.str(dart.notNull(offset) - lineStart + 1) + ")\n");
      } else {
        report = report + (" (at character " + dart.str(dart.notNull(offset) + 1) + ")\n");
      }
      let lineEnd = source.length;
      for (let i = offset; dart.notNull(i) < source.length; i = dart.notNull(i) + 1) {
        let char = source[$codeUnitAt](i);
        if (char === 10 || char === 13) {
          lineEnd = i;
          break;
        }
      }
      let length = dart.notNull(lineEnd) - lineStart;
      let start = lineStart;
      let end = lineEnd;
      let prefix = "";
      let postfix = "";
      if (length > 78) {
        let index = dart.notNull(offset) - lineStart;
        if (index < 75) {
          end = start + 75;
          postfix = "...";
        } else if (dart.notNull(end) - dart.notNull(offset) < 75) {
          start = dart.notNull(end) - 75;
          prefix = "...";
        } else {
          start = dart.notNull(offset) - 36;
          end = dart.notNull(offset) + 36;
          prefix = postfix = "...";
        }
      }
      let slice = source[$substring](start, end);
      let markOffset = dart.notNull(offset) - start + prefix.length;
      return report + prefix + slice + postfix + "\n" + " "[$times](markOffset) + "^\n";
    } else {
      if (offset != null) {
        report = report + (" (at offset " + dart.str(offset) + ")");
      }
      return report;
    }
  }
};
(core.FormatException.new = function(message, source, offset) {
  if (message === void 0) message = "";
  if (source === void 0) source = null;
  if (offset === void 0) offset = null;
  this[message$18] = message;
  this[source$] = source;
  this[offset$] = offset;
  ;
}).prototype = core.FormatException.prototype;
;
core.FormatException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(core.FormatException, "dart:core");
;
dart.defineExtensionMethods(core.FormatException, ['toString']);
core.IntegerDivisionByZeroException = class IntegerDivisionByZeroException extends core.Object {
  toString() {
    return "IntegerDivisionByZeroException";
  }
};
(core.IntegerDivisionByZeroException.new = function() {
  ;
}).prototype = core.IntegerDivisionByZeroException.prototype;
;
core.IntegerDivisionByZeroException[dart.implements] = () => [core.Exception];
dart.setLibraryUri(core.IntegerDivisionByZeroException, "dart:core");
dart.defineExtensionMethods(core.IntegerDivisionByZeroException, ['toString']);
const _getKey = dart.privateName(core, "_getKey");
const _is_Expando_default = Symbol('_is_Expando_default');
const name$13 = dart.privateName(core, "Expando.name");
core.Expando$ = dart.generic(T => {
  class Expando extends core.Object {
    get name() {
      return this[name$13];
    }
    set name(value) {
      super.name = value;
    }
    [_getKey]() {
      let t95;
      let key = core.String._check(_js_helper.Primitives.getProperty(this, "expando$key"));
      if (key == null) {
        key = "expando$key$" + dart.str((t95 = core.Expando._keyCount, core.Expando._keyCount = dart.notNull(t95) + 1, t95));
        _js_helper.Primitives.setProperty(this, "expando$key", key);
      }
      return key;
    }
    toString() {
      return "Expando:" + dart.str(this.name);
    }
    _get(object) {
      let values = _js_helper.Primitives.getProperty(object, "expando$values");
      return T._check(values == null ? null : _js_helper.Primitives.getProperty(values, this[_getKey]()));
    }
    _set(object, value$) {
      let value = value$;
      T._check(value);
      let values = _js_helper.Primitives.getProperty(object, "expando$values");
      if (values == null) {
        values = new core.Object.new();
        _js_helper.Primitives.setProperty(object, "expando$values", values);
      }
      _js_helper.Primitives.setProperty(values, this[_getKey](), value);
      return value$;
    }
  }
  (Expando.new = function(name) {
    if (name === void 0) name = null;
    this[name$13] = name;
    ;
  }).prototype = Expando.prototype;
  ;
  Expando.prototype[_is_Expando_default] = true;
  ;
  dart.setLibraryUri(Expando, "dart:core");
  ;
  dart.defineExtensionMethods(Expando, ['toString']);
  return Expando;
});
core.Expando = core.Expando$();
dart.defineLazy(core.Expando, {
  /*core.Expando._KEY_PROPERTY_NAME*/get _KEY_PROPERTY_NAME() {
    return "expando$key";
  },
  /*core.Expando._EXPANDO_PROPERTY_NAME*/get _EXPANDO_PROPERTY_NAME() {
    return "expando$values";
  },
  /*core.Expando._keyCount*/get _keyCount() {
    return 0;
  },
  set _keyCount(_) {}
});
;
core.Function = class Function extends core.Object {
  static _toMangledNames(namedArguments) {
    let result = new (IdentityMapOfString$dynamic()).new();
    namedArguments[$forEach](dart.fn((symbol, value) => {
      result[$_set](core._symbolToString(symbol), value);
    }, SymbolAnddynamicToNull()));
    return result;
  }
  static is(o) {
    return typeof o == "function";
  }
  static as(o) {
    if (dart.dtest(typeof o == "function") || o == null) return o;
    return dart.as(o, core.Function, false);
  }
  static _check(o) {
    if (dart.dtest(typeof o == "function") || o == null) return o;
    return dart.as(o, core.Function, true);
  }
  static apply(f, positionalArguments, namedArguments) {
    if (namedArguments === void 0) namedArguments = null;
    positionalArguments == null ? positionalArguments = [] : null;
    if (namedArguments != null && dart.test(namedArguments[$isNotEmpty])) {
      let map = {};
      namedArguments[$forEach](dart.fn((symbol, arg) => {
        map[core._symbolToString(symbol)] = arg;
      }, SymbolAnddynamicToNull()));
      return dart.dcall(f, positionalArguments, map);
    }
    return dart.dcall(f, positionalArguments);
  }
};
(core.Function.new = function() {
  ;
}).prototype = core.Function.prototype;
dart.setLibraryUri(core.Function, "dart:core");
const _positional = dart.privateName(core, "_positional");
let C269;
const _named = dart.privateName(core, "_named");
let C270;
core._Invocation = class _Invocation extends core.Object {
  get positionalArguments() {
    let t95;
    t95 = this[_positional];
    return t95 == null ? C269 || CT.C269 : t95;
  }
  get namedArguments() {
    let t95;
    t95 = this[_named];
    return t95 == null ? C270 || CT.C270 : t95;
  }
  get isMethod() {
    return this[_named] != null;
  }
  get isGetter() {
    return this[_positional] == null;
  }
  get isSetter() {
    return this[_positional] != null && this[_named] == null;
  }
  get isAccessor() {
    return this[_named] == null;
  }
  static _ensureNonNullTypes(types) {
    if (types == null) return C0 || CT.C0;
    for (let i = 0; i < dart.notNull(types[$length]); i = i + 1) {
      if (types[$_get](i) == null) {
        dart.throw(new core.ArgumentError.new("Type arguments must be non-null, was null at index " + dart.str(i) + "."));
      }
    }
    return types;
  }
  static _makeUnmodifiable(T, elements) {
    if (elements == null) return null;
    return core.List$(T).unmodifiable(elements);
  }
};
(core._Invocation.method = function(memberName, types, positional, named) {
  let t95;
  this.memberName = memberName;
  this.typeArguments = core._Invocation._ensureNonNullTypes(core._Invocation._makeUnmodifiable(core.Type, types));
  this[_positional] = (t95 = core._Invocation._makeUnmodifiable(core.Object, positional), t95 == null ? C269 || CT.C269 : t95);
  this[_named] = named == null || dart.test(named[$isEmpty]) ? C270 || CT.C270 : MapOfSymbol$Object().unmodifiable(named);
  ;
}).prototype = core._Invocation.prototype;
(core._Invocation.getter = function(memberName) {
  this.memberName = memberName;
  this.typeArguments = C0 || CT.C0;
  this[_positional] = null;
  this[_named] = null;
  ;
}).prototype = core._Invocation.prototype;
(core._Invocation.setter = function(memberName, argument) {
  this.memberName = memberName;
  this.typeArguments = C0 || CT.C0;
  this[_positional] = ListOfObject().unmodifiable([argument]);
  this[_named] = null;
  ;
}).prototype = core._Invocation.prototype;
;
core._Invocation[dart.implements] = () => [core.Invocation];
dart.setGetterSignature(core._Invocation, () => ({
  __proto__: dart.getGetters(core._Invocation.__proto__),
  positionalArguments: core.List,
  namedArguments: core.Map$(core.Symbol, dart.dynamic),
  isMethod: core.bool,
  isGetter: core.bool,
  isSetter: core.bool,
  isAccessor: core.bool
}));
dart.setLibraryUri(core._Invocation, "dart:core");
;
const _generator = dart.privateName(core, "_generator");
let C271;
const _is__GeneratorIterable_default = Symbol('_is__GeneratorIterable_default');
const length$1 = dart.privateName(core, "_GeneratorIterable.length");
core._GeneratorIterable$ = dart.generic(E => {
  let intToE = () => (intToE = dart.constFn(dart.fnType(E, [core.int])))();
  class _GeneratorIterable extends _internal.ListIterable$(E) {
    get length() {
      return this[length$1];
    }
    set length(value) {
      super.length = value;
    }
    elementAt(index) {
      core.RangeError.checkValidIndex(index, this);
      return this[_generator](index);
    }
    static _id(n) {
      return n;
    }
  }
  (_GeneratorIterable.new = function(length, generator) {
    this[length$1] = length;
    this[_generator] = generator != null ? generator : intToE().as(C271 || CT.C271);
    _GeneratorIterable.__proto__.new.call(this);
    ;
  }).prototype = _GeneratorIterable.prototype;
  ;
  _GeneratorIterable.prototype[_is__GeneratorIterable_default] = true;
  dart.setLibraryUri(_GeneratorIterable, "dart:core");
  ;
  dart.defineExtensionMethods(_GeneratorIterable, ['elementAt']);
  dart.defineExtensionAccessors(_GeneratorIterable, ['length']);
  return _GeneratorIterable;
});
core._GeneratorIterable = core._GeneratorIterable$();
;
const _is_BidirectionalIterator_default = Symbol('_is_BidirectionalIterator_default');
core.BidirectionalIterator$ = dart.generic(E => {
  class BidirectionalIterator extends core.Object {}
  (BidirectionalIterator.new = function() {
    ;
  }).prototype = BidirectionalIterator.prototype;
  ;
  BidirectionalIterator.prototype[_is_BidirectionalIterator_default] = true;
  BidirectionalIterator[dart.implements] = () => [core.Iterator$(E)];
  dart.setLibraryUri(BidirectionalIterator, "dart:core");
  return BidirectionalIterator;
});
core.BidirectionalIterator = core.BidirectionalIterator$();
;
core.Map$ = dart.generic((K, V) => {
  class Map extends core.Object {
    static unmodifiable(other) {
      return new (collection.UnmodifiableMapView$(K, V)).new(collection.LinkedHashMap$(K, V).from(other));
    }
    static castFrom(K, V, K2, V2, source) {
      return new (_internal.CastMap$(K, V, K2, V2)).new(source);
    }
    static fromEntries(entries) {
      let t95;
      t95 = new (_js_helper.LinkedMap$(K, V)).new();
      t95[$addEntries](entries);
      return t95;
    }
  }
  (Map[dart.mixinNew] = function() {
  }).prototype = Map.prototype;
  ;
  Map.prototype[dart.isMap] = true;
  dart.setLibraryUri(Map, "dart:core");
  return Map;
});
core.Map = core.Map$();
;
const _is_MapEntry_default = Symbol('_is_MapEntry_default');
const key$0 = dart.privateName(core, "MapEntry.key");
const value$4 = dart.privateName(core, "MapEntry.value");
core.MapEntry$ = dart.generic((K, V) => {
  class MapEntry extends core.Object {
    get key() {
      return this[key$0];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[value$4];
    }
    set value(value) {
      super.value = value;
    }
    toString() {
      return "MapEntry(" + dart.str(this.key) + ": " + dart.str(this.value) + ")";
    }
  }
  (MapEntry.__ = function(key, value) {
    this[key$0] = key;
    this[value$4] = value;
    ;
  }).prototype = MapEntry.prototype;
  ;
  MapEntry.prototype[_is_MapEntry_default] = true;
  dart.setLibraryUri(MapEntry, "dart:core");
  ;
  dart.defineExtensionMethods(MapEntry, ['toString']);
  return MapEntry;
});
core.MapEntry = core.MapEntry$();
;
core.Null = class Null extends core.Object {
  static is(o) {
    return o == null;
  }
  static as(o) {
    if (o == null) return o;
    return dart.as(o, core.Null, false);
  }
  static _check(o) {
    if (o == null) return o;
    return dart.as(o, core.Null, true);
  }
  get hashCode() {
    return super[$hashCode];
  }
  toString() {
    return "null";
  }
};
(core.Null[dart.mixinNew] = function() {
}).prototype = core.Null.prototype;
dart.setLibraryUri(core.Null, "dart:core");
dart.defineExtensionMethods(core.Null, ['toString']);
dart.defineExtensionAccessors(core.Null, ['hashCode']);
core.Pattern = class Pattern extends core.Object {};
(core.Pattern.new = function() {
  ;
}).prototype = core.Pattern.prototype;
;
dart.setLibraryUri(core.Pattern, "dart:core");
core.RegExp = class RegExp extends core.Object {
  static new(source, opts) {
    let multiLine = opts && 'multiLine' in opts ? opts.multiLine : false;
    let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : true;
    let unicode = opts && 'unicode' in opts ? opts.unicode : false;
    let dotAll = opts && 'dotAll' in opts ? opts.dotAll : false;
    return new _js_helper.JSSyntaxRegExp.new(source, {multiLine: multiLine, caseSensitive: caseSensitive, unicode: unicode, dotAll: dotAll});
  }
  static escape(text) {
    return _js_helper.quoteStringForRegExp(text);
  }
};
(core.RegExp[dart.mixinNew] = function() {
}).prototype = core.RegExp.prototype;
;
core.RegExp[dart.implements] = () => [core.Pattern];
dart.setLibraryUri(core.RegExp, "dart:core");
const _is_Set_default = Symbol('_is_Set_default');
core.Set$ = dart.generic(E => {
  class Set extends _internal.EfficientLengthIterable$(E) {
    static castFrom(S, T, source, opts) {
      let newSet = opts && 'newSet' in opts ? opts.newSet : null;
      return new (_internal.CastSet$(S, T)).new(source, newSet);
    }
  }
  ;
  Set.prototype[_is_Set_default] = true;
  dart.setLibraryUri(Set, "dart:core");
  return Set;
});
core.Set = core.Set$();
;
const _is_Sink_default = Symbol('_is_Sink_default');
core.Sink$ = dart.generic(T => {
  class Sink extends core.Object {}
  (Sink.new = function() {
    ;
  }).prototype = Sink.prototype;
  ;
  Sink.prototype[_is_Sink_default] = true;
  dart.setLibraryUri(Sink, "dart:core");
  return Sink;
});
core.Sink = core.Sink$();
;
core.StackTrace = class StackTrace extends core.Object {
  static get current() {
    return dart.stackTrace(Error());
  }
};
(core.StackTrace.new = function() {
  ;
}).prototype = core.StackTrace.prototype;
;
dart.setLibraryUri(core.StackTrace, "dart:core");
const _stackTrace$ = dart.privateName(core, "_stackTrace");
core._StringStackTrace = class _StringStackTrace extends core.Object {
  toString() {
    return this[_stackTrace$];
  }
};
(core._StringStackTrace.new = function(_stackTrace) {
  this[_stackTrace$] = _stackTrace;
  ;
}).prototype = core._StringStackTrace.prototype;
;
core._StringStackTrace[dart.implements] = () => [core.StackTrace];
dart.setLibraryUri(core._StringStackTrace, "dart:core");
;
dart.defineExtensionMethods(core._StringStackTrace, ['toString']);
const _start$2 = dart.privateName(core, "_start");
const _stop = dart.privateName(core, "_stop");
core.Stopwatch = class Stopwatch extends core.Object {
  get frequency() {
    return core.Stopwatch._frequency;
  }
  start() {
    if (this[_stop] != null) {
      this[_start$2] = dart.notNull(this[_start$2]) + (dart.notNull(core.Stopwatch._now()) - dart.notNull(this[_stop]));
      this[_stop] = null;
    }
  }
  stop() {
    this[_stop] == null ? this[_stop] = core.Stopwatch._now() : null;
  }
  reset() {
    let t95;
    this[_start$2] = (t95 = this[_stop], t95 == null ? core.Stopwatch._now() : t95);
  }
  get elapsedTicks() {
    let t95;
    return dart.notNull((t95 = this[_stop], t95 == null ? core.Stopwatch._now() : t95)) - dart.notNull(this[_start$2]);
  }
  get elapsed() {
    return new core.Duration.new({microseconds: this.elapsedMicroseconds});
  }
  get elapsedMicroseconds() {
    let ticks = this.elapsedTicks;
    if (core.Stopwatch._frequency === 1000000) return ticks;
    if (!(core.Stopwatch._frequency === 1000)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 496, 12, "_frequency == 1000");
    return dart.notNull(ticks) * 1000;
  }
  get elapsedMilliseconds() {
    let ticks = this.elapsedTicks;
    if (core.Stopwatch._frequency === 1000) return ticks;
    if (!(core.Stopwatch._frequency === 1000000)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart", 504, 12, "_frequency == 1000000");
    return (dart.notNull(ticks) / 1000)[$truncate]();
  }
  get isRunning() {
    return this[_stop] == null;
  }
  static _initTicker() {
    _js_helper.Primitives.initTicker();
    core.Stopwatch._frequency = _js_helper.Primitives.timerFrequency;
  }
  static _now() {
    return dart.asInt(_js_helper.Primitives.timerTicks());
  }
};
(core.Stopwatch.new = function() {
  this[_start$2] = 0;
  this[_stop] = 0;
  if (core.Stopwatch._frequency == null) core.Stopwatch._initTicker();
}).prototype = core.Stopwatch.prototype;
;
;
dart.setGetterSignature(core.Stopwatch, () => ({
  __proto__: dart.getGetters(core.Stopwatch.__proto__),
  frequency: core.int,
  elapsedTicks: core.int,
  elapsed: core.Duration,
  elapsedMicroseconds: core.int,
  elapsedMilliseconds: core.int,
  isRunning: core.bool
}));
dart.setLibraryUri(core.Stopwatch, "dart:core");
;
dart.defineLazy(core.Stopwatch, {
  /*core.Stopwatch._frequency*/get _frequency() {
    return null;
  },
  set _frequency(_) {}
});
const string$ = dart.privateName(core, "Runes.string");
core.Runes = class Runes extends core.Iterable$(core.int) {
  get string() {
    return this[string$];
  }
  set string(value) {
    super.string = value;
  }
  get iterator() {
    return new core.RuneIterator.new(this.string);
  }
  get last() {
    if (this.string.length === 0) {
      dart.throw(new core.StateError.new("No elements."));
    }
    let length = this.string.length;
    let code = this.string[$codeUnitAt](length - 1);
    if (dart.test(core._isTrailSurrogate(code)) && this.string.length > 1) {
      let previousCode = this.string[$codeUnitAt](length - 2);
      if (dart.test(core._isLeadSurrogate(previousCode))) {
        return core._combineSurrogatePair(previousCode, code);
      }
    }
    return code;
  }
};
(core.Runes.new = function(string) {
  this[string$] = string;
  core.Runes.__proto__.new.call(this);
  ;
}).prototype = core.Runes.prototype;
;
dart.setGetterSignature(core.Runes, () => ({
  __proto__: dart.getGetters(core.Runes.__proto__),
  iterator: core.RuneIterator,
  [$iterator]: core.RuneIterator
}));
dart.setLibraryUri(core.Runes, "dart:core");
;
dart.defineExtensionAccessors(core.Runes, ['iterator', 'last']);
const _currentCodePoint = dart.privateName(core, "_currentCodePoint");
const _position$0 = dart.privateName(core, "_position");
const _nextPosition = dart.privateName(core, "_nextPosition");
const _checkSplitSurrogate = dart.privateName(core, "_checkSplitSurrogate");
const string$0 = dart.privateName(core, "RuneIterator.string");
core.RuneIterator = class RuneIterator extends core.Object {
  get string() {
    return this[string$0];
  }
  set string(value) {
    super.string = value;
  }
  [_checkSplitSurrogate](index) {
    if (dart.notNull(index) > 0 && dart.notNull(index) < this.string.length && dart.test(core._isLeadSurrogate(this.string[$codeUnitAt](dart.notNull(index) - 1))) && dart.test(core._isTrailSurrogate(this.string[$codeUnitAt](index)))) {
      dart.throw(new core.ArgumentError.new("Index inside surrogate pair: " + dart.str(index)));
    }
  }
  get rawIndex() {
    return this[_position$0] != this[_nextPosition] ? this[_position$0] : null;
  }
  set rawIndex(rawIndex) {
    core.RangeError.checkValidIndex(rawIndex, this.string, "rawIndex");
    this.reset(rawIndex);
    this.moveNext();
  }
  reset(rawIndex) {
    if (rawIndex === void 0) rawIndex = 0;
    core.RangeError.checkValueInInterval(rawIndex, 0, this.string.length, "rawIndex");
    this[_checkSplitSurrogate](rawIndex);
    this[_position$0] = this[_nextPosition] = rawIndex;
    this[_currentCodePoint] = null;
  }
  get current() {
    return this[_currentCodePoint];
  }
  get currentSize() {
    return dart.notNull(this[_nextPosition]) - dart.notNull(this[_position$0]);
  }
  get currentAsString() {
    if (this[_position$0] == this[_nextPosition]) return null;
    if (dart.notNull(this[_position$0]) + 1 === this[_nextPosition]) return this.string[$_get](this[_position$0]);
    return this.string[$substring](this[_position$0], this[_nextPosition]);
  }
  moveNext() {
    this[_position$0] = this[_nextPosition];
    if (this[_position$0] === this.string.length) {
      this[_currentCodePoint] = null;
      return false;
    }
    let codeUnit = this.string[$codeUnitAt](this[_position$0]);
    let nextPosition = dart.notNull(this[_position$0]) + 1;
    if (dart.test(core._isLeadSurrogate(codeUnit)) && nextPosition < this.string.length) {
      let nextCodeUnit = this.string[$codeUnitAt](nextPosition);
      if (dart.test(core._isTrailSurrogate(nextCodeUnit))) {
        this[_nextPosition] = nextPosition + 1;
        this[_currentCodePoint] = core._combineSurrogatePair(codeUnit, nextCodeUnit);
        return true;
      }
    }
    this[_nextPosition] = nextPosition;
    this[_currentCodePoint] = codeUnit;
    return true;
  }
  movePrevious() {
    this[_nextPosition] = this[_position$0];
    if (this[_position$0] === 0) {
      this[_currentCodePoint] = null;
      return false;
    }
    let position = dart.notNull(this[_position$0]) - 1;
    let codeUnit = this.string[$codeUnitAt](position);
    if (dart.test(core._isTrailSurrogate(codeUnit)) && position > 0) {
      let prevCodeUnit = this.string[$codeUnitAt](position - 1);
      if (dart.test(core._isLeadSurrogate(prevCodeUnit))) {
        this[_position$0] = position - 1;
        this[_currentCodePoint] = core._combineSurrogatePair(prevCodeUnit, codeUnit);
        return true;
      }
    }
    this[_position$0] = position;
    this[_currentCodePoint] = codeUnit;
    return true;
  }
};
(core.RuneIterator.new = function(string) {
  this[_currentCodePoint] = null;
  this[string$0] = string;
  this[_position$0] = 0;
  this[_nextPosition] = 0;
  ;
}).prototype = core.RuneIterator.prototype;
(core.RuneIterator.at = function(string, index) {
  this[_currentCodePoint] = null;
  this[string$0] = string;
  this[_position$0] = index;
  this[_nextPosition] = index;
  core.RangeError.checkValueInInterval(index, 0, string.length);
  this[_checkSplitSurrogate](index);
}).prototype = core.RuneIterator.prototype;
;
core.RuneIterator[dart.implements] = () => [core.BidirectionalIterator$(core.int)];
;
dart.setGetterSignature(core.RuneIterator, () => ({
  __proto__: dart.getGetters(core.RuneIterator.__proto__),
  rawIndex: core.int,
  current: core.int,
  currentSize: core.int,
  currentAsString: core.String
}));
dart.setSetterSignature(core.RuneIterator, () => ({
  __proto__: dart.getSetters(core.RuneIterator.__proto__),
  rawIndex: core.int
}));
dart.setLibraryUri(core.RuneIterator, "dart:core");
;
let C272;
let C273;
core.Symbol = class Symbol extends core.Object {};
(core.Symbol[dart.mixinNew] = function() {
}).prototype = core.Symbol.prototype;
;
dart.setLibraryUri(core.Symbol, "dart:core");
dart.defineLazy(core.Symbol, {
  /*core.Symbol.unaryMinus*/get unaryMinus() {
    return C272 || CT.C272;
  },
  /*core.Symbol.empty*/get empty() {
    return C273 || CT.C273;
  }
});
core.Uri = class Uri extends core.Object {
  static get base() {
    let uri = _js_helper.Primitives.currentUri();
    if (uri != null) return core.Uri.parse(uri);
    dart.throw(new core.UnsupportedError.new("'Uri.base' is not supported"));
  }
  static dataFromString(content, opts) {
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let base64 = opts && 'base64' in opts ? opts.base64 : false;
    let data = core.UriData.fromString(content, {mimeType: mimeType, encoding: encoding, parameters: parameters, base64: base64});
    return data.uri;
  }
  static dataFromBytes(bytes, opts) {
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "application/octet-stream";
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let percentEncoded = opts && 'percentEncoded' in opts ? opts.percentEncoded : false;
    let data = core.UriData.fromBytes(bytes, {mimeType: mimeType, parameters: parameters, percentEncoded: percentEncoded});
    return data.uri;
  }
  get hasScheme() {
    return this.scheme[$isNotEmpty];
  }
  static parse(uri, start, end) {
    let t95;
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    end == null ? end = uri.length : null;
    if (dart.notNull(end) >= dart.notNull(start) + 5) {
      let dataDelta = core._startsWithData(uri, start);
      if (dataDelta === 0) {
        if (dart.notNull(start) > 0 || dart.notNull(end) < uri.length) uri = uri[$substring](start, end);
        return core.UriData._parse(uri, 5, null).uri;
      } else if (dataDelta === 32) {
        return core.UriData._parse(uri[$substring](dart.notNull(start) + 5, end), 0, null).uri;
      }
    }
    let indices = ListOfint().new(8);
    t95 = indices;
    t95[$_set](0, 0);
    t95[$_set](1, dart.notNull(start) - 1);
    t95[$_set](2, dart.notNull(start) - 1);
    t95[$_set](7, dart.notNull(start) - 1);
    t95[$_set](3, start);
    t95[$_set](4, start);
    t95[$_set](5, end);
    t95[$_set](6, end);
    t95;
    let state = core._scan(uri, start, end, 0, indices);
    if (dart.notNull(state) >= 14) {
      indices[$_set](7, end);
    }
    let schemeEnd = indices[$_get](1);
    if (dart.notNull(schemeEnd) >= dart.notNull(start)) {
      state = core._scan(uri, start, schemeEnd, 20, indices);
      if (state === 20) {
        indices[$_set](7, schemeEnd);
      }
    }
    let hostStart = dart.notNull(indices[$_get](2)) + 1;
    let portStart = indices[$_get](3);
    let pathStart = indices[$_get](4);
    let queryStart = indices[$_get](5);
    let fragmentStart = indices[$_get](6);
    let scheme = null;
    if (dart.notNull(fragmentStart) < dart.notNull(queryStart)) queryStart = fragmentStart;
    if (dart.notNull(pathStart) < hostStart) {
      pathStart = queryStart;
    } else if (dart.notNull(pathStart) <= dart.notNull(schemeEnd)) {
      pathStart = dart.notNull(schemeEnd) + 1;
    }
    if (dart.notNull(portStart) < hostStart) portStart = pathStart;
    if (!(hostStart === start || dart.notNull(schemeEnd) <= hostStart)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 876, 12, "hostStart == start || schemeEnd <= hostStart");
    if (!(hostStart <= dart.notNull(portStart))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 877, 12, "hostStart <= portStart");
    if (!(dart.notNull(schemeEnd) <= dart.notNull(pathStart))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 878, 12, "schemeEnd <= pathStart");
    if (!(dart.notNull(portStart) <= dart.notNull(pathStart))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 879, 12, "portStart <= pathStart");
    if (!(dart.notNull(pathStart) <= dart.notNull(queryStart))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 880, 12, "pathStart <= queryStart");
    if (!(dart.notNull(queryStart) <= dart.notNull(fragmentStart))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 881, 12, "queryStart <= fragmentStart");
    let isSimple = dart.notNull(indices[$_get](7)) < dart.notNull(start);
    if (isSimple) {
      if (hostStart > dart.notNull(schemeEnd) + 3) {
        isSimple = false;
      } else if (dart.notNull(portStart) > dart.notNull(start) && dart.notNull(portStart) + 1 === pathStart) {
        isSimple = false;
      } else if (dart.notNull(queryStart) < dart.notNull(end) && queryStart === dart.notNull(pathStart) + 2 && uri[$startsWith]("..", pathStart) || dart.notNull(queryStart) > dart.notNull(pathStart) + 2 && uri[$startsWith]("/..", dart.notNull(queryStart) - 3)) {
        isSimple = false;
      } else {
        if (schemeEnd === dart.notNull(start) + 4) {
          if (uri[$startsWith]("file", start)) {
            scheme = "file";
            if (hostStart <= dart.notNull(start)) {
              let schemeAuth = "file://";
              let delta = 2;
              if (!uri[$startsWith]("/", pathStart)) {
                schemeAuth = "file:///";
                delta = 3;
              }
              uri = schemeAuth + uri[$substring](pathStart, end);
              schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
              hostStart = 7;
              portStart = 7;
              pathStart = 7;
              queryStart = dart.notNull(queryStart) + (delta - dart.notNull(start));
              fragmentStart = dart.notNull(fragmentStart) + (delta - dart.notNull(start));
              start = 0;
              end = uri.length;
            } else if (pathStart == queryStart) {
              if (start === 0 && end === uri.length) {
                uri = uri[$replaceRange](pathStart, queryStart, "/");
                queryStart = dart.notNull(queryStart) + 1;
                fragmentStart = dart.notNull(fragmentStart) + 1;
                end = dart.notNull(end) + 1;
              } else {
                uri = uri[$substring](start, pathStart) + "/" + uri[$substring](queryStart, end);
                schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
                hostStart = hostStart - dart.notNull(start);
                portStart = dart.notNull(portStart) - dart.notNull(start);
                pathStart = dart.notNull(pathStart) - dart.notNull(start);
                queryStart = dart.notNull(queryStart) + (1 - dart.notNull(start));
                fragmentStart = dart.notNull(fragmentStart) + (1 - dart.notNull(start));
                start = 0;
                end = uri.length;
              }
            }
          } else if (uri[$startsWith]("http", start)) {
            scheme = "http";
            if (dart.notNull(portStart) > dart.notNull(start) && dart.notNull(portStart) + 3 === pathStart && uri[$startsWith]("80", dart.notNull(portStart) + 1)) {
              if (start === 0 && end === uri.length) {
                uri = uri[$replaceRange](portStart, pathStart, "");
                pathStart = dart.notNull(pathStart) - 3;
                queryStart = dart.notNull(queryStart) - 3;
                fragmentStart = dart.notNull(fragmentStart) - 3;
                end = dart.notNull(end) - 3;
              } else {
                uri = uri[$substring](start, portStart) + uri[$substring](pathStart, end);
                schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
                hostStart = hostStart - dart.notNull(start);
                portStart = dart.notNull(portStart) - dart.notNull(start);
                pathStart = dart.notNull(pathStart) - (3 + dart.notNull(start));
                queryStart = dart.notNull(queryStart) - (3 + dart.notNull(start));
                fragmentStart = dart.notNull(fragmentStart) - (3 + dart.notNull(start));
                start = 0;
                end = uri.length;
              }
            }
          }
        } else if (schemeEnd === dart.notNull(start) + 5 && uri[$startsWith]("https", start)) {
          scheme = "https";
          if (dart.notNull(portStart) > dart.notNull(start) && dart.notNull(portStart) + 4 === pathStart && uri[$startsWith]("443", dart.notNull(portStart) + 1)) {
            if (start === 0 && end === uri.length) {
              uri = uri[$replaceRange](portStart, pathStart, "");
              pathStart = dart.notNull(pathStart) - 4;
              queryStart = dart.notNull(queryStart) - 4;
              fragmentStart = dart.notNull(fragmentStart) - 4;
              end = dart.notNull(end) - 3;
            } else {
              uri = uri[$substring](start, portStart) + uri[$substring](pathStart, end);
              schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
              hostStart = hostStart - dart.notNull(start);
              portStart = dart.notNull(portStart) - dart.notNull(start);
              pathStart = dart.notNull(pathStart) - (4 + dart.notNull(start));
              queryStart = dart.notNull(queryStart) - (4 + dart.notNull(start));
              fragmentStart = dart.notNull(fragmentStart) - (4 + dart.notNull(start));
              start = 0;
              end = uri.length;
            }
          }
        }
      }
    }
    if (isSimple) {
      if (dart.notNull(start) > 0 || dart.notNull(end) < uri.length) {
        uri = uri[$substring](start, end);
        schemeEnd = dart.notNull(schemeEnd) - dart.notNull(start);
        hostStart = hostStart - dart.notNull(start);
        portStart = dart.notNull(portStart) - dart.notNull(start);
        pathStart = dart.notNull(pathStart) - dart.notNull(start);
        queryStart = dart.notNull(queryStart) - dart.notNull(start);
        fragmentStart = dart.notNull(fragmentStart) - dart.notNull(start);
      }
      return new core._SimpleUri.new(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    }
    return core._Uri.notSimple(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
  }
  static tryParse(uri, start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    try {
      return core.Uri.parse(uri, start, end);
    } catch (e) {
      let ex = dart.getThrown(e);
      if (core.FormatException.is(ex)) {
        return null;
      } else
        throw e;
    }
  }
  static encodeComponent(component) {
    return core._Uri._uriEncode(core._Uri._unreserved2396Table, component, convert.utf8, false);
  }
  static encodeQueryComponent(component, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    return core._Uri._uriEncode(core._Uri._unreservedTable, component, encoding, true);
  }
  static decodeComponent(encodedComponent) {
    return core._Uri._uriDecode(encodedComponent, 0, encodedComponent.length, convert.utf8, false);
  }
  static decodeQueryComponent(encodedComponent, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    return core._Uri._uriDecode(encodedComponent, 0, encodedComponent.length, encoding, true);
  }
  static encodeFull(uri) {
    return core._Uri._uriEncode(core._Uri._encodeFullTable, uri, convert.utf8, false);
  }
  static decodeFull(uri) {
    return core._Uri._uriDecode(uri, 0, uri.length, convert.utf8, false);
  }
  static splitQueryString(query, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    return query[$split]("&")[$fold](MapOfString$String(), new (IdentityMapOfString$String()).new(), dart.fn((map, element) => {
      let index = element[$indexOf]("=");
      if (index === -1) {
        if (element !== "") {
          map[$_set](core.Uri.decodeQueryComponent(element, {encoding: encoding}), "");
        }
      } else if (index !== 0) {
        let key = element[$substring](0, index);
        let value = element[$substring](index + 1);
        map[$_set](core.Uri.decodeQueryComponent(key, {encoding: encoding}), core.Uri.decodeQueryComponent(value, {encoding: encoding}));
      }
      return map;
    }, MapOfString$StringAndStringToMapOfString$String()));
  }
  static parseIPv4Address(host) {
    return core.Uri._parseIPv4Address(host, 0, host.length);
  }
  static _parseIPv4Address(host, start, end) {
    let t97;
    function error(msg, position) {
      dart.throw(new core.FormatException.new("Illegal IPv4 address, " + dart.str(msg), host, position));
    }
    dart.fn(error, StringAndintTovoid());
    let result = _native_typed_data.NativeUint8List.new(4);
    let partIndex = 0;
    let partStart = start;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = host[$codeUnitAt](i);
      if (char !== 46) {
        if ((char ^ 48) >>> 0 > 9) {
          error("invalid character", i);
        }
      } else {
        if (partIndex === 3) {
          error("IPv4 address should contain exactly 4 parts", i);
        }
        let part = core.int.parse(host[$substring](partStart, i));
        if (dart.notNull(part) > 255) {
          error("each part must be in the range 0..255", partStart);
        }
        result[$_set]((t97 = partIndex, partIndex = t97 + 1, t97), part);
        partStart = dart.notNull(i) + 1;
      }
    }
    if (partIndex !== 3) {
      error("IPv4 address should contain exactly 4 parts", end);
    }
    let part = core.int.parse(host[$substring](partStart, end));
    if (dart.notNull(part) > 255) {
      error("each part must be in the range 0..255", partStart);
    }
    result[$_set](partIndex, part);
    return result;
  }
  static parseIPv6Address(host, start, end) {
    if (start === void 0) start = 0;
    if (end === void 0) end = null;
    end == null ? end = host.length : null;
    function error(msg, position) {
      if (position === void 0) position = null;
      dart.throw(new core.FormatException.new("Illegal IPv6 address, " + dart.str(msg), host, core.int._check(position)));
    }
    dart.fn(error, StringAnddynamicTovoid());
    function parseHex(start, end) {
      if (dart.notNull(end) - dart.notNull(start) > 4) {
        error("an IPv6 part can only contain a maximum of 4 hex digits", start);
      }
      let value = core.int.parse(host[$substring](start, end), {radix: 16});
      if (dart.notNull(value) < 0 || dart.notNull(value) > 65535) {
        error("each part must be in the range of `0x0..0xFFFF`", start);
      }
      return value;
    }
    dart.fn(parseHex, intAndintToint());
    if (host.length < 2) error("address is too short");
    let parts = JSArrayOfint().of([]);
    let wildcardSeen = false;
    let seenDot = false;
    let partStart = start;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = host[$codeUnitAt](i);
      if (char === 58) {
        if (i == start) {
          i = dart.notNull(i) + 1;
          if (host[$codeUnitAt](i) !== 58) {
            error("invalid start colon.", i);
          }
          partStart = i;
        }
        if (i == partStart) {
          if (wildcardSeen) {
            error("only one wildcard `::` is allowed", i);
          }
          wildcardSeen = true;
          parts[$add](-1);
        } else {
          parts[$add](parseHex(partStart, i));
        }
        partStart = dart.notNull(i) + 1;
      } else if (char === 46) {
        seenDot = true;
      }
    }
    if (parts[$length] === 0) error("too few parts");
    let atEnd = partStart == end;
    let isLastWildcard = parts[$last] === -1;
    if (atEnd && !isLastWildcard) {
      error("expected a part after last `:`", end);
    }
    if (!atEnd) {
      if (!seenDot) {
        parts[$add](parseHex(partStart, end));
      } else {
        let last = core.Uri._parseIPv4Address(host, partStart, end);
        parts[$add]((dart.notNull(last[$_get](0)) << 8 | dart.notNull(last[$_get](1))) >>> 0);
        parts[$add]((dart.notNull(last[$_get](2)) << 8 | dart.notNull(last[$_get](3))) >>> 0);
      }
    }
    if (wildcardSeen) {
      if (dart.notNull(parts[$length]) > 7) {
        error("an address with a wildcard must have less than 7 parts");
      }
    } else if (parts[$length] !== 8) {
      error("an address without a wildcard must contain exactly 8 parts");
    }
    let bytes = _native_typed_data.NativeUint8List.new(16);
    for (let i = 0, index = 0; i < dart.notNull(parts[$length]); i = i + 1) {
      let value = parts[$_get](i);
      if (value === -1) {
        let wildCardLength = 9 - dart.notNull(parts[$length]);
        for (let j = 0; j < wildCardLength; j = j + 1) {
          bytes[$_set](index, 0);
          bytes[$_set](index + 1, 0);
          index = index + 2;
        }
      } else {
        bytes[$_set](index, value[$rightShift](8));
        bytes[$_set](index + 1, dart.notNull(value) & 255);
        index = index + 2;
      }
    }
    return bytes;
  }
};
(core.Uri[dart.mixinNew] = function() {
}).prototype = core.Uri.prototype;
;
dart.setGetterSignature(core.Uri, () => ({
  __proto__: dart.getGetters(core.Uri.__proto__),
  hasScheme: core.bool
}));
dart.setLibraryUri(core.Uri, "dart:core");
const _pathSegments = dart.privateName(core, "_pathSegments");
const _text$ = dart.privateName(core, "_text");
const _hashCodeCache = dart.privateName(core, "_hashCodeCache");
const _queryParameters = dart.privateName(core, "_queryParameters");
const _queryParameterLists = dart.privateName(core, "_queryParameterLists");
const _userInfo$ = dart.privateName(core, "_userInfo");
const _host$ = dart.privateName(core, "_host");
const _port$ = dart.privateName(core, "_port");
const _query$ = dart.privateName(core, "_query");
const _fragment$ = dart.privateName(core, "_fragment");
const _writeAuthority = dart.privateName(core, "_writeAuthority");
let C274;
let C275;
const _mergePaths = dart.privateName(core, "_mergePaths");
const _toFilePath = dart.privateName(core, "_toFilePath");
const _isPathAbsolute = dart.privateName(core, "_isPathAbsolute");
const _initializeText = dart.privateName(core, "_initializeText");
let C276;
let C277;
let C278;
let C279;
let C280;
let C281;
let C282;
let C283;
let C284;
let C285;
let C286;
let C287;
let C288;
core._Uri = class _Uri extends core.Object {
  static notSimple(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
    if (scheme == null) {
      scheme = "";
      if (dart.notNull(schemeEnd) > dart.notNull(start)) {
        scheme = core._Uri._makeScheme(uri, start, schemeEnd);
      } else if (schemeEnd == start) {
        core._Uri._fail(uri, start, "Invalid empty scheme");
      }
    }
    let userInfo = "";
    let host = null;
    let port = null;
    if (dart.notNull(hostStart) > dart.notNull(start)) {
      let userInfoStart = dart.notNull(schemeEnd) + 3;
      if (userInfoStart < dart.notNull(hostStart)) {
        userInfo = core._Uri._makeUserInfo(uri, userInfoStart, dart.notNull(hostStart) - 1);
      }
      host = core._Uri._makeHost(uri, hostStart, portStart, false);
      if (dart.notNull(portStart) + 1 < dart.notNull(pathStart)) {
        port = core.int.parse(uri[$substring](dart.notNull(portStart) + 1, pathStart), {onError: dart.fn(_ => {
            dart.throw(new core.FormatException.new("Invalid port", uri, dart.notNull(portStart) + 1));
          }, StringToNull())});
        port = core._Uri._makePort(port, scheme);
      }
    }
    let path = core._Uri._makePath(uri, pathStart, queryStart, null, scheme, host != null);
    let query = null;
    if (dart.notNull(queryStart) < dart.notNull(fragmentStart)) {
      query = core._Uri._makeQuery(uri, dart.notNull(queryStart) + 1, fragmentStart, null);
    }
    let fragment = null;
    if (dart.notNull(fragmentStart) < dart.notNull(end)) {
      fragment = core._Uri._makeFragment(uri, dart.notNull(fragmentStart) + 1, end);
    }
    return new core._Uri._internal(scheme, userInfo, host, port, path, query, fragment);
  }
  static new(opts) {
    let scheme = opts && 'scheme' in opts ? opts.scheme : null;
    let userInfo = opts && 'userInfo' in opts ? opts.userInfo : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let port = opts && 'port' in opts ? opts.port : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let pathSegments = opts && 'pathSegments' in opts ? opts.pathSegments : null;
    let query = opts && 'query' in opts ? opts.query : null;
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let fragment = opts && 'fragment' in opts ? opts.fragment : null;
    scheme = core._Uri._makeScheme(scheme, 0, core._stringOrNullLength(scheme));
    userInfo = core._Uri._makeUserInfo(userInfo, 0, core._stringOrNullLength(userInfo));
    host = core._Uri._makeHost(host, 0, core._stringOrNullLength(host), false);
    if (query === "") query = null;
    query = core._Uri._makeQuery(query, 0, core._stringOrNullLength(query), queryParameters);
    fragment = core._Uri._makeFragment(fragment, 0, core._stringOrNullLength(fragment));
    port = core._Uri._makePort(port, scheme);
    let isFile = scheme === "file";
    if (host == null && (userInfo[$isNotEmpty] || port != null || isFile)) {
      host = "";
    }
    let hasAuthority = host != null;
    path = core._Uri._makePath(path, 0, core._stringOrNullLength(path), pathSegments, scheme, hasAuthority);
    if (scheme[$isEmpty] && host == null && !path[$startsWith]("/")) {
      let allowScheme = scheme[$isNotEmpty] || host != null;
      path = core._Uri._normalizeRelativePath(path, allowScheme);
    } else {
      path = core._Uri._removeDotSegments(path);
    }
    if (host == null && path[$startsWith]("//")) {
      host = "";
    }
    return new core._Uri._internal(scheme, userInfo, host, port, path, query, fragment);
  }
  static http(authority, unencodedPath, queryParameters) {
    if (queryParameters === void 0) queryParameters = null;
    return core._Uri._check(core._Uri._makeHttpUri("http", authority, unencodedPath, queryParameters));
  }
  static https(authority, unencodedPath, queryParameters) {
    if (queryParameters === void 0) queryParameters = null;
    return core._Uri._check(core._Uri._makeHttpUri("https", authority, unencodedPath, queryParameters));
  }
  get authority() {
    if (!dart.test(this.hasAuthority)) return "";
    let sb = new core.StringBuffer.new();
    this[_writeAuthority](sb);
    return sb.toString();
  }
  get userInfo() {
    return this[_userInfo$];
  }
  get host() {
    if (this[_host$] == null) return "";
    if (this[_host$][$startsWith]("[")) {
      return this[_host$][$substring](1, this[_host$].length - 1);
    }
    return this[_host$];
  }
  get port() {
    if (this[_port$] == null) return core._Uri._defaultPort(this.scheme);
    return this[_port$];
  }
  static _defaultPort(scheme) {
    if (scheme === "http") return 80;
    if (scheme === "https") return 443;
    return 0;
  }
  get query() {
    let t97;
    t97 = this[_query$];
    return t97 == null ? "" : t97;
  }
  get fragment() {
    let t97;
    t97 = this[_fragment$];
    return t97 == null ? "" : t97;
  }
  isScheme(scheme) {
    let thisScheme = this.scheme;
    if (scheme == null) return thisScheme[$isEmpty];
    if (scheme.length !== thisScheme.length) return false;
    return core._Uri._compareScheme(scheme, thisScheme);
  }
  static _compareScheme(scheme, uri) {
    for (let i = 0; i < scheme.length; i = i + 1) {
      let schemeChar = scheme[$codeUnitAt](i);
      let uriChar = uri[$codeUnitAt](i);
      let delta = (schemeChar ^ uriChar) >>> 0;
      if (delta !== 0) {
        if (delta === 32) {
          let lowerChar = (uriChar | delta) >>> 0;
          if (97 <= lowerChar && lowerChar <= 122) {
            continue;
          }
        }
        return false;
      }
    }
    return true;
  }
  static _fail(uri, index, message) {
    dart.throw(new core.FormatException.new(message, uri, index));
  }
  static _makeHttpUri(scheme, authority, unencodedPath, queryParameters) {
    let userInfo = "";
    let host = null;
    let port = null;
    if (authority != null && authority[$isNotEmpty]) {
      let hostStart = 0;
      let hasUserInfo = false;
      for (let i = 0; i < authority.length; i = i + 1) {
        if (authority[$codeUnitAt](i) === 64) {
          hasUserInfo = true;
          userInfo = authority[$substring](0, i);
          hostStart = i + 1;
          break;
        }
      }
      let hostEnd = hostStart;
      if (hostStart < authority.length && authority[$codeUnitAt](hostStart) === 91) {
        let escapeForZoneID = -1;
        for (; hostEnd < authority.length; hostEnd = hostEnd + 1) {
          let char = authority[$codeUnitAt](hostEnd);
          if (char === 37 && escapeForZoneID < 0) {
            escapeForZoneID = hostEnd;
            if (authority[$startsWith]("25", hostEnd + 1)) {
              hostEnd = hostEnd + 2;
            }
          } else if (char === 93) {
            break;
          }
        }
        if (hostEnd === authority.length) {
          dart.throw(new core.FormatException.new("Invalid IPv6 host entry.", authority, hostStart));
        }
        core.Uri.parseIPv6Address(authority, hostStart + 1, escapeForZoneID < 0 ? hostEnd : escapeForZoneID);
        hostEnd = hostEnd + 1;
        if (hostEnd !== authority.length && authority[$codeUnitAt](hostEnd) !== 58) {
          dart.throw(new core.FormatException.new("Invalid end of authority", authority, hostEnd));
        }
      }
      let hasPort = false;
      for (; hostEnd < authority.length; hostEnd = hostEnd + 1) {
        if (authority[$codeUnitAt](hostEnd) === 58) {
          let portString = authority[$substring](hostEnd + 1);
          if (portString[$isNotEmpty]) port = core.int.parse(portString);
          break;
        }
      }
      host = authority[$substring](hostStart, hostEnd);
    }
    return core._Uri.new({scheme: scheme, userInfo: userInfo, host: host, port: port, pathSegments: unencodedPath[$split]("/"), queryParameters: queryParameters});
  }
  static file(path, opts) {
    let windows = opts && 'windows' in opts ? opts.windows : null;
    windows = windows == null ? core._Uri._isWindows : windows;
    return core._Uri._check(dart.test(windows) ? core._Uri._makeWindowsFileUrl(path, false) : core._Uri._makeFileUri(path, false));
  }
  static directory(path, opts) {
    let windows = opts && 'windows' in opts ? opts.windows : null;
    windows = windows == null ? core._Uri._isWindows : windows;
    return core._Uri._check(dart.test(windows) ? core._Uri._makeWindowsFileUrl(path, true) : core._Uri._makeFileUri(path, true));
  }
  static get _isWindows() {
    return core._Uri._isWindowsCached;
  }
  static _checkNonWindowsPathReservedCharacters(segments, argumentError) {
    segments[$forEach](dart.fn(segment => {
      if (segment[$contains]("/")) {
        if (dart.test(argumentError)) {
          dart.throw(new core.ArgumentError.new("Illegal path character " + dart.str(segment)));
        } else {
          dart.throw(new core.UnsupportedError.new("Illegal path character " + dart.str(segment)));
        }
      }
    }, StringToNull()));
  }
  static _checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
    if (firstSegment === void 0) firstSegment = 0;
    for (let segment of segments[$skip](firstSegment)) {
      if (segment[$contains](core.RegExp.new("[\"*/:<>?\\\\|]"))) {
        if (dart.test(argumentError)) {
          dart.throw(new core.ArgumentError.new("Illegal character in path"));
        } else {
          dart.throw(new core.UnsupportedError.new("Illegal character in path: " + dart.str(segment)));
        }
      }
    }
  }
  static _checkWindowsDriveLetter(charCode, argumentError) {
    if (65 <= dart.notNull(charCode) && dart.notNull(charCode) <= 90 || 97 <= dart.notNull(charCode) && dart.notNull(charCode) <= 122) {
      return;
    }
    if (dart.test(argumentError)) {
      dart.throw(new core.ArgumentError.new("Illegal drive letter " + dart.notNull(core.String.fromCharCode(charCode))));
    } else {
      dart.throw(new core.UnsupportedError.new("Illegal drive letter " + dart.notNull(core.String.fromCharCode(charCode))));
    }
  }
  static _makeFileUri(path, slashTerminated) {
    let segments = path[$split]("/");
    if (dart.test(slashTerminated) && dart.test(segments[$isNotEmpty]) && segments[$last][$isNotEmpty]) {
      segments[$add]("");
    }
    if (path[$startsWith]("/")) {
      return core._Uri.new({scheme: "file", pathSegments: segments});
    } else {
      return core._Uri.new({pathSegments: segments});
    }
  }
  static _makeWindowsFileUrl(path, slashTerminated) {
    if (path[$startsWith]("\\\\?\\")) {
      if (path[$startsWith]("UNC\\", 4)) {
        path = path[$replaceRange](0, 7, "\\");
      } else {
        path = path[$substring](4);
        if (path.length < 3 || path[$codeUnitAt](1) !== 58 || path[$codeUnitAt](2) !== 92) {
          dart.throw(new core.ArgumentError.new("Windows paths with \\\\?\\ prefix must be absolute"));
        }
      }
    } else {
      path = path[$replaceAll]("/", "\\");
    }
    if (path.length > 1 && path[$codeUnitAt](1) === 58) {
      core._Uri._checkWindowsDriveLetter(path[$codeUnitAt](0), true);
      if (path.length === 2 || path[$codeUnitAt](2) !== 92) {
        dart.throw(new core.ArgumentError.new("Windows paths with drive letter must be absolute"));
      }
      let pathSegments = path[$split]("\\");
      if (dart.test(slashTerminated) && pathSegments[$last][$isNotEmpty]) {
        pathSegments[$add]("");
      }
      core._Uri._checkWindowsPathReservedCharacters(pathSegments, true, 1);
      return core._Uri.new({scheme: "file", pathSegments: pathSegments});
    }
    if (path[$startsWith]("\\")) {
      if (path[$startsWith]("\\", 1)) {
        let pathStart = path[$indexOf]("\\", 2);
        let hostPart = pathStart < 0 ? path[$substring](2) : path[$substring](2, pathStart);
        let pathPart = pathStart < 0 ? "" : path[$substring](pathStart + 1);
        let pathSegments = pathPart[$split]("\\");
        core._Uri._checkWindowsPathReservedCharacters(pathSegments, true);
        if (dart.test(slashTerminated) && pathSegments[$last][$isNotEmpty]) {
          pathSegments[$add]("");
        }
        return core._Uri.new({scheme: "file", host: hostPart, pathSegments: pathSegments});
      } else {
        let pathSegments = path[$split]("\\");
        if (dart.test(slashTerminated) && pathSegments[$last][$isNotEmpty]) {
          pathSegments[$add]("");
        }
        core._Uri._checkWindowsPathReservedCharacters(pathSegments, true);
        return core._Uri.new({scheme: "file", pathSegments: pathSegments});
      }
    } else {
      let pathSegments = path[$split]("\\");
      core._Uri._checkWindowsPathReservedCharacters(pathSegments, true);
      if (dart.test(slashTerminated) && dart.test(pathSegments[$isNotEmpty]) && pathSegments[$last][$isNotEmpty]) {
        pathSegments[$add]("");
      }
      return core._Uri.new({pathSegments: pathSegments});
    }
  }
  replace(opts) {
    let scheme = opts && 'scheme' in opts ? opts.scheme : null;
    let userInfo = opts && 'userInfo' in opts ? opts.userInfo : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let port = opts && 'port' in opts ? opts.port : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let pathSegments = opts && 'pathSegments' in opts ? opts.pathSegments : null;
    let query = opts && 'query' in opts ? opts.query : null;
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let fragment = opts && 'fragment' in opts ? opts.fragment : null;
    let schemeChanged = false;
    if (scheme != null) {
      scheme = core._Uri._makeScheme(scheme, 0, scheme.length);
      schemeChanged = scheme != this.scheme;
    } else {
      scheme = this.scheme;
    }
    let isFile = scheme === "file";
    if (userInfo != null) {
      userInfo = core._Uri._makeUserInfo(userInfo, 0, userInfo.length);
    } else {
      userInfo = this[_userInfo$];
    }
    if (port != null) {
      port = core._Uri._makePort(port, scheme);
    } else {
      port = this[_port$];
      if (schemeChanged) {
        port = core._Uri._makePort(port, scheme);
      }
    }
    if (host != null) {
      host = core._Uri._makeHost(host, 0, host.length, false);
    } else if (dart.test(this.hasAuthority)) {
      host = this[_host$];
    } else if (userInfo[$isNotEmpty] || port != null || isFile) {
      host = "";
    }
    let hasAuthority = host != null;
    if (path != null || pathSegments != null) {
      path = core._Uri._makePath(path, 0, core._stringOrNullLength(path), pathSegments, scheme, hasAuthority);
    } else {
      path = this.path;
      if ((isFile || hasAuthority && !path[$isEmpty]) && !path[$startsWith]("/")) {
        path = "/" + dart.notNull(path);
      }
    }
    if (query != null || queryParameters != null) {
      query = core._Uri._makeQuery(query, 0, core._stringOrNullLength(query), queryParameters);
    } else {
      query = this[_query$];
    }
    if (fragment != null) {
      fragment = core._Uri._makeFragment(fragment, 0, fragment.length);
    } else {
      fragment = this[_fragment$];
    }
    return new core._Uri._internal(scheme, userInfo, host, port, path, query, fragment);
  }
  removeFragment() {
    if (!dart.test(this.hasFragment)) return this;
    return new core._Uri._internal(this.scheme, this[_userInfo$], this[_host$], this[_port$], this.path, this[_query$], null);
  }
  get pathSegments() {
    let result = this[_pathSegments];
    if (result != null) return result;
    let pathToSplit = this.path;
    if (pathToSplit[$isNotEmpty] && pathToSplit[$codeUnitAt](0) === 47) {
      pathToSplit = pathToSplit[$substring](1);
    }
    result = pathToSplit === "" ? C274 || CT.C274 : ListOfString().unmodifiable(pathToSplit[$split]("/")[$map](dart.dynamic, C275 || CT.C275));
    this[_pathSegments] = result;
    return result;
  }
  get queryParameters() {
    this[_queryParameters] == null ? this[_queryParameters] = new (UnmodifiableMapViewOfString$String()).new(core.Uri.splitQueryString(this.query)) : null;
    return this[_queryParameters];
  }
  get queryParametersAll() {
    if (this[_queryParameterLists] == null) {
      let queryParameterLists = core._Uri._splitQueryStringAll(this.query);
      for (let key of queryParameterLists[$keys]) {
        queryParameterLists[$_set](key, ListOfString().unmodifiable(core.Iterable._check(queryParameterLists[$_get](key))));
      }
      this[_queryParameterLists] = MapOfString$ListOfString().unmodifiable(queryParameterLists);
    }
    return this[_queryParameterLists];
  }
  normalizePath() {
    let path = core._Uri._normalizePath(this.path, this.scheme, this.hasAuthority);
    if (path == this.path) return this;
    return this.replace({path: path});
  }
  static _makePort(port, scheme) {
    if (port != null && port == core._Uri._defaultPort(scheme)) return null;
    return port;
  }
  static _makeHost(host, start, end, strictIPv6) {
    if (host == null) return null;
    if (start == end) return "";
    if (host[$codeUnitAt](start) === 91) {
      if (host[$codeUnitAt](dart.notNull(end) - 1) !== 93) {
        core._Uri._fail(host, start, "Missing end `]` to match `[` in host");
      }
      let zoneID = "";
      let index = core._Uri._checkZoneID(host, dart.notNull(start) + 1, dart.notNull(end) - 1);
      if (dart.notNull(index) < dart.notNull(end) - 1) {
        let zoneIDstart = host[$startsWith]("25", dart.notNull(index) + 1) ? dart.notNull(index) + 3 : dart.notNull(index) + 1;
        zoneID = core._Uri._normalizeZoneID(host, zoneIDstart, dart.notNull(end) - 1, "%25");
      }
      core.Uri.parseIPv6Address(host, dart.notNull(start) + 1, index);
      return host[$substring](start, index)[$toLowerCase]() + dart.notNull(zoneID) + "]";
    }
    if (!dart.test(strictIPv6)) {
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        if (host[$codeUnitAt](i) === 58) {
          let zoneID = "";
          let index = core._Uri._checkZoneID(host, start, end);
          if (dart.notNull(index) < dart.notNull(end)) {
            let zoneIDstart = host[$startsWith]("25", dart.notNull(index) + 1) ? dart.notNull(index) + 3 : dart.notNull(index) + 1;
            zoneID = core._Uri._normalizeZoneID(host, zoneIDstart, end, "%25");
          }
          core.Uri.parseIPv6Address(host, start, index);
          return "[" + host[$substring](start, index) + dart.notNull(zoneID) + "]";
        }
      }
    }
    return core._Uri._normalizeRegName(host, start, end);
  }
  static _checkZoneID(host, start, end) {
    let index = host[$indexOf]("%", start);
    index = dart.notNull(index) >= dart.notNull(start) && dart.notNull(index) < dart.notNull(end) ? index : end;
    return index;
  }
  static _isZoneIDChar(char) {
    return dart.notNull(char) < 127 && (dart.notNull(core._Uri._zoneIDTable[$_get](char[$rightShift](4))) & 1 << (dart.notNull(char) & 15)) !== 0;
  }
  static _normalizeZoneID(host, start, end, prefix) {
    if (prefix === void 0) prefix = "";
    let buffer = null;
    if (prefix !== "") {
      buffer = new core.StringBuffer.new(prefix);
    }
    let sectionStart = start;
    let index = start;
    let isNormalized = true;
    while (dart.notNull(index) < dart.notNull(end)) {
      let char = host[$codeUnitAt](index);
      if (char === 37) {
        let replacement = core._Uri._normalizeEscape(host, index, true);
        if (replacement == null && isNormalized) {
          index = dart.notNull(index) + 3;
          continue;
        }
        buffer == null ? buffer = new core.StringBuffer.new() : null;
        let slice = host[$substring](sectionStart, index);
        buffer.write(slice);
        let sourceLength = 3;
        if (replacement == null) {
          replacement = host[$substring](index, dart.notNull(index) + 3);
        } else if (replacement === "%") {
          core._Uri._fail(host, index, "ZoneID should not contain % anymore");
        }
        buffer.write(replacement);
        index = dart.notNull(index) + sourceLength;
        sectionStart = index;
        isNormalized = true;
      } else if (dart.test(core._Uri._isZoneIDChar(char))) {
        if (isNormalized && 65 <= char && 90 >= char) {
          buffer == null ? buffer = new core.StringBuffer.new() : null;
          if (dart.notNull(sectionStart) < dart.notNull(index)) {
            buffer.write(host[$substring](sectionStart, index));
            sectionStart = index;
          }
          isNormalized = false;
        }
        index = dart.notNull(index) + 1;
      } else {
        let sourceLength = 1;
        if ((char & 64512) === 55296 && dart.notNull(index) + 1 < dart.notNull(end)) {
          let tail = host[$codeUnitAt](dart.notNull(index) + 1);
          if ((tail & 64512) === 56320) {
            char = 65536 | (char & 1023) << 10 | tail & 1023;
            sourceLength = 2;
          }
        }
        buffer == null ? buffer = new core.StringBuffer.new() : null;
        let slice = host[$substring](sectionStart, index);
        buffer.write(slice);
        buffer.write(core._Uri._escapeChar(char));
        index = dart.notNull(index) + sourceLength;
        sectionStart = index;
      }
    }
    if (buffer == null) return host[$substring](start, end);
    if (dart.notNull(sectionStart) < dart.notNull(end)) {
      let slice = host[$substring](sectionStart, end);
      buffer.write(slice);
    }
    return dart.toString(buffer);
  }
  static _isRegNameChar(char) {
    return dart.notNull(char) < 127 && (dart.notNull(core._Uri._regNameTable[$_get](char[$rightShift](4))) & 1 << (dart.notNull(char) & 15)) !== 0;
  }
  static _normalizeRegName(host, start, end) {
    let buffer = null;
    let sectionStart = start;
    let index = start;
    let isNormalized = true;
    while (dart.notNull(index) < dart.notNull(end)) {
      let char = host[$codeUnitAt](index);
      if (char === 37) {
        let replacement = core._Uri._normalizeEscape(host, index, true);
        if (replacement == null && isNormalized) {
          index = dart.notNull(index) + 3;
          continue;
        }
        buffer == null ? buffer = new core.StringBuffer.new() : null;
        let slice = host[$substring](sectionStart, index);
        if (!isNormalized) slice = slice[$toLowerCase]();
        buffer.write(slice);
        let sourceLength = 3;
        if (replacement == null) {
          replacement = host[$substring](index, dart.notNull(index) + 3);
        } else if (replacement === "%") {
          replacement = "%25";
          sourceLength = 1;
        }
        buffer.write(replacement);
        index = dart.notNull(index) + sourceLength;
        sectionStart = index;
        isNormalized = true;
      } else if (dart.test(core._Uri._isRegNameChar(char))) {
        if (isNormalized && 65 <= char && 90 >= char) {
          buffer == null ? buffer = new core.StringBuffer.new() : null;
          if (dart.notNull(sectionStart) < dart.notNull(index)) {
            buffer.write(host[$substring](sectionStart, index));
            sectionStart = index;
          }
          isNormalized = false;
        }
        index = dart.notNull(index) + 1;
      } else if (dart.test(core._Uri._isGeneralDelimiter(char))) {
        core._Uri._fail(host, index, "Invalid character");
      } else {
        let sourceLength = 1;
        if ((char & 64512) === 55296 && dart.notNull(index) + 1 < dart.notNull(end)) {
          let tail = host[$codeUnitAt](dart.notNull(index) + 1);
          if ((tail & 64512) === 56320) {
            char = 65536 | (char & 1023) << 10 | tail & 1023;
            sourceLength = 2;
          }
        }
        buffer == null ? buffer = new core.StringBuffer.new() : null;
        let slice = host[$substring](sectionStart, index);
        if (!isNormalized) slice = slice[$toLowerCase]();
        buffer.write(slice);
        buffer.write(core._Uri._escapeChar(char));
        index = dart.notNull(index) + sourceLength;
        sectionStart = index;
      }
    }
    if (buffer == null) return host[$substring](start, end);
    if (dart.notNull(sectionStart) < dart.notNull(end)) {
      let slice = host[$substring](sectionStart, end);
      if (!isNormalized) slice = slice[$toLowerCase]();
      buffer.write(slice);
    }
    return dart.toString(buffer);
  }
  static _makeScheme(scheme, start, end) {
    if (start == end) return "";
    let firstCodeUnit = scheme[$codeUnitAt](start);
    if (!dart.test(core._Uri._isAlphabeticCharacter(firstCodeUnit))) {
      core._Uri._fail(scheme, start, "Scheme not starting with alphabetic character");
    }
    let containsUpperCase = false;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let codeUnit = scheme[$codeUnitAt](i);
      if (!dart.test(core._Uri._isSchemeCharacter(codeUnit))) {
        core._Uri._fail(scheme, i, "Illegal scheme character");
      }
      if (65 <= codeUnit && codeUnit <= 90) {
        containsUpperCase = true;
      }
    }
    scheme = scheme[$substring](start, end);
    if (containsUpperCase) scheme = scheme[$toLowerCase]();
    return core._Uri._canonicalizeScheme(scheme);
  }
  static _canonicalizeScheme(scheme) {
    if (scheme === "http") return "http";
    if (scheme === "file") return "file";
    if (scheme === "https") return "https";
    if (scheme === "package") return "package";
    return scheme;
  }
  static _makeUserInfo(userInfo, start, end) {
    if (userInfo == null) return "";
    return core._Uri._normalizeOrSubstring(userInfo, start, end, core._Uri._userinfoTable);
  }
  static _makePath(path, start, end, pathSegments, scheme, hasAuthority) {
    let isFile = scheme === "file";
    let ensureLeadingSlash = isFile || dart.test(hasAuthority);
    if (path == null && pathSegments == null) return isFile ? "/" : "";
    if (path != null && pathSegments != null) {
      dart.throw(new core.ArgumentError.new("Both path and pathSegments specified"));
    }
    let result = null;
    if (path != null) {
      result = core._Uri._normalizeOrSubstring(path, start, end, core._Uri._pathCharOrSlashTable, {escapeDelimiters: true});
    } else {
      result = pathSegments[$map](core.String, dart.fn(s => core._Uri._uriEncode(core._Uri._pathCharTable, s, convert.utf8, false), StringToString()))[$join]("/");
    }
    if (result[$isEmpty]) {
      if (isFile) return "/";
    } else if (ensureLeadingSlash && !result[$startsWith]("/")) {
      result = "/" + dart.notNull(result);
    }
    result = core._Uri._normalizePath(result, scheme, hasAuthority);
    return result;
  }
  static _normalizePath(path, scheme, hasAuthority) {
    if (scheme[$isEmpty] && !dart.test(hasAuthority) && !path[$startsWith]("/")) {
      return core._Uri._normalizeRelativePath(path, scheme[$isNotEmpty] || dart.test(hasAuthority));
    }
    return core._Uri._removeDotSegments(path);
  }
  static _makeQuery(query, start, end, queryParameters) {
    if (query != null) {
      if (queryParameters != null) {
        dart.throw(new core.ArgumentError.new("Both query and queryParameters specified"));
      }
      return core._Uri._normalizeOrSubstring(query, start, end, core._Uri._queryCharTable, {escapeDelimiters: true});
    }
    if (queryParameters == null) return null;
    let result = new core.StringBuffer.new();
    let separator = "";
    function writeParameter(key, value) {
      result.write(separator);
      separator = "&";
      result.write(core.Uri.encodeQueryComponent(key));
      if (value != null && value[$isNotEmpty]) {
        result.write("=");
        result.write(core.Uri.encodeQueryComponent(value));
      }
    }
    dart.fn(writeParameter, StringAndStringTovoid());
    queryParameters[$forEach](dart.fn((key, value) => {
      if (value == null || typeof value == 'string') {
        writeParameter(key, core.String._check(value));
      } else {
        let values = core.Iterable._check(value);
        for (let t97 of values) {
          let value = core.String._check(t97);
          writeParameter(key, value);
        }
      }
    }, StringAnddynamicToNull()));
    return result.toString();
  }
  static _makeFragment(fragment, start, end) {
    if (fragment == null) return null;
    return core._Uri._normalizeOrSubstring(fragment, start, end, core._Uri._queryCharTable, {escapeDelimiters: true});
  }
  static _normalizeEscape(source, index, lowerCase) {
    if (!(source[$codeUnitAt](index) === 37)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2314, 12, "source.codeUnitAt(index) == _PERCENT");
    if (dart.notNull(index) + 2 >= source.length) {
      return "%";
    }
    let firstDigit = source[$codeUnitAt](dart.notNull(index) + 1);
    let secondDigit = source[$codeUnitAt](dart.notNull(index) + 2);
    let firstDigitValue = _internal.hexDigitValue(firstDigit);
    let secondDigitValue = _internal.hexDigitValue(secondDigit);
    if (dart.notNull(firstDigitValue) < 0 || dart.notNull(secondDigitValue) < 0) {
      return "%";
    }
    let value = dart.notNull(firstDigitValue) * 16 + dart.notNull(secondDigitValue);
    if (dart.test(core._Uri._isUnreservedChar(value))) {
      if (dart.test(lowerCase) && 65 <= value && 90 >= value) {
        value = (value | 32) >>> 0;
      }
      return core.String.fromCharCode(value);
    }
    if (firstDigit >= 97 || secondDigit >= 97) {
      return source[$substring](index, dart.notNull(index) + 3)[$toUpperCase]();
    }
    return null;
  }
  static _escapeChar(char) {
    if (!(dart.notNull(char) <= 1114111)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2342, 12, "char <= 0x10ffff");
    let codeUnits = null;
    if (dart.notNull(char) < 128) {
      codeUnits = ListOfint().new(3);
      codeUnits[$_set](0, 37);
      codeUnits[$_set](1, "0123456789ABCDEF"[$codeUnitAt](char[$rightShift](4)));
      codeUnits[$_set](2, "0123456789ABCDEF"[$codeUnitAt](dart.notNull(char) & 15));
    } else {
      let flag = 192;
      let encodedBytes = 2;
      if (dart.notNull(char) > 2047) {
        flag = 224;
        encodedBytes = 3;
        if (dart.notNull(char) > 65535) {
          encodedBytes = 4;
          flag = 240;
        }
      }
      codeUnits = ListOfint().new(3 * encodedBytes);
      let index = 0;
      while ((encodedBytes = encodedBytes - 1) >= 0) {
        let byte = (char[$rightShift](6 * encodedBytes) & 63 | flag) >>> 0;
        codeUnits[$_set](index, 37);
        codeUnits[$_set](index + 1, "0123456789ABCDEF"[$codeUnitAt](byte[$rightShift](4)));
        codeUnits[$_set](index + 2, "0123456789ABCDEF"[$codeUnitAt](byte & 15));
        index = index + 3;
        flag = 128;
      }
    }
    return core.String.fromCharCodes(codeUnits);
  }
  static _normalizeOrSubstring(component, start, end, charTable, opts) {
    let t98;
    let escapeDelimiters = opts && 'escapeDelimiters' in opts ? opts.escapeDelimiters : false;
    t98 = core._Uri._normalize(component, start, end, charTable, {escapeDelimiters: escapeDelimiters});
    return t98 == null ? component[$substring](start, end) : t98;
  }
  static _normalize(component, start, end, charTable, opts) {
    let escapeDelimiters = opts && 'escapeDelimiters' in opts ? opts.escapeDelimiters : false;
    let buffer = null;
    let sectionStart = start;
    let index = start;
    while (dart.notNull(index) < dart.notNull(end)) {
      let char = component[$codeUnitAt](index);
      if (char < 127 && (dart.notNull(charTable[$_get](char[$rightShift](4))) & 1 << (char & 15)) !== 0) {
        index = dart.notNull(index) + 1;
      } else {
        let replacement = null;
        let sourceLength = null;
        if (char === 37) {
          replacement = core._Uri._normalizeEscape(component, index, false);
          if (replacement == null) {
            index = dart.notNull(index) + 3;
            continue;
          }
          if ("%" === replacement) {
            replacement = "%25";
            sourceLength = 1;
          } else {
            sourceLength = 3;
          }
        } else if (!dart.test(escapeDelimiters) && dart.test(core._Uri._isGeneralDelimiter(char))) {
          core._Uri._fail(component, index, "Invalid character");
        } else {
          sourceLength = 1;
          if ((char & 64512) === 55296) {
            if (dart.notNull(index) + 1 < dart.notNull(end)) {
              let tail = component[$codeUnitAt](dart.notNull(index) + 1);
              if ((tail & 64512) === 56320) {
                sourceLength = 2;
                char = 65536 | (char & 1023) << 10 | tail & 1023;
              }
            }
          }
          replacement = core._Uri._escapeChar(char);
        }
        buffer == null ? buffer = new core.StringBuffer.new() : null;
        buffer.write(component[$substring](sectionStart, index));
        buffer.write(replacement);
        index = dart.notNull(index) + dart.notNull(sourceLength);
        sectionStart = index;
      }
    }
    if (buffer == null) {
      return null;
    }
    if (dart.notNull(sectionStart) < dart.notNull(end)) {
      buffer.write(component[$substring](sectionStart, end));
    }
    return dart.toString(buffer);
  }
  static _isSchemeCharacter(ch) {
    return dart.notNull(ch) < 128 && (dart.notNull(core._Uri._schemeTable[$_get](ch[$rightShift](4))) & 1 << (dart.notNull(ch) & 15)) !== 0;
  }
  static _isGeneralDelimiter(ch) {
    return dart.notNull(ch) <= 93 && (dart.notNull(core._Uri._genDelimitersTable[$_get](ch[$rightShift](4))) & 1 << (dart.notNull(ch) & 15)) !== 0;
  }
  get isAbsolute() {
    return this.scheme !== "" && this.fragment === "";
  }
  [_mergePaths](base, reference) {
    let backCount = 0;
    let refStart = 0;
    while (reference[$startsWith]("../", refStart)) {
      refStart = refStart + 3;
      backCount = backCount + 1;
    }
    let baseEnd = base[$lastIndexOf]("/");
    while (baseEnd > 0 && backCount > 0) {
      let newEnd = base[$lastIndexOf]("/", baseEnd - 1);
      if (newEnd < 0) {
        break;
      }
      let delta = baseEnd - newEnd;
      if ((delta === 2 || delta === 3) && base[$codeUnitAt](newEnd + 1) === 46 && (delta === 2 || base[$codeUnitAt](newEnd + 2) === 46)) {
        break;
      }
      baseEnd = newEnd;
      backCount = backCount - 1;
    }
    return base[$replaceRange](baseEnd + 1, null, reference[$substring](refStart - 3 * backCount));
  }
  static _mayContainDotSegments(path) {
    if (path[$startsWith](".")) return true;
    let index = path[$indexOf]("/.");
    return index !== -1;
  }
  static _removeDotSegments(path) {
    if (!dart.test(core._Uri._mayContainDotSegments(path))) return path;
    if (!path[$isNotEmpty]) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2527, 12, "path.isNotEmpty");
    let output = JSArrayOfString().of([]);
    let appendSlash = false;
    for (let segment of path[$split]("/")) {
      appendSlash = false;
      if (segment === "..") {
        if (dart.test(output[$isNotEmpty])) {
          output[$removeLast]();
          if (dart.test(output[$isEmpty])) {
            output[$add]("");
          }
        }
        appendSlash = true;
      } else if ("." === segment) {
        appendSlash = true;
      } else {
        output[$add](segment);
      }
    }
    if (appendSlash) output[$add]("");
    return output[$join]("/");
  }
  static _normalizeRelativePath(path, allowScheme) {
    if (!!path[$startsWith]("/")) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2562, 12, "!path.startsWith('/')");
    if (!dart.test(core._Uri._mayContainDotSegments(path))) {
      if (!dart.test(allowScheme)) path = core._Uri._escapeScheme(path);
      return path;
    }
    if (!path[$isNotEmpty]) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2567, 12, "path.isNotEmpty");
    let output = JSArrayOfString().of([]);
    let appendSlash = false;
    for (let segment of path[$split]("/")) {
      appendSlash = false;
      if (".." === segment) {
        if (!dart.test(output[$isEmpty]) && output[$last] !== "..") {
          output[$removeLast]();
          appendSlash = true;
        } else {
          output[$add]("..");
        }
      } else if ("." === segment) {
        appendSlash = true;
      } else {
        output[$add](segment);
      }
    }
    if (dart.test(output[$isEmpty]) || output[$length] === 1 && output[$_get](0)[$isEmpty]) {
      return "./";
    }
    if (appendSlash || output[$last] === "..") output[$add]("");
    if (!dart.test(allowScheme)) output[$_set](0, core._Uri._escapeScheme(output[$_get](0)));
    return output[$join]("/");
  }
  static _escapeScheme(path) {
    if (path.length >= 2 && dart.test(core._Uri._isAlphabeticCharacter(path[$codeUnitAt](0)))) {
      for (let i = 1; i < path.length; i = i + 1) {
        let char = path[$codeUnitAt](i);
        if (char === 58) {
          return path[$substring](0, i) + "%3A" + path[$substring](i + 1);
        }
        if (char > 127 || (dart.notNull(core._Uri._schemeTable[$_get](char[$rightShift](4))) & 1 << (char & 15)) === 0) {
          break;
        }
      }
    }
    return path;
  }
  resolve(reference) {
    return this.resolveUri(core.Uri.parse(reference));
  }
  resolveUri(reference) {
    let targetScheme = null;
    let targetUserInfo = "";
    let targetHost = null;
    let targetPort = null;
    let targetPath = null;
    let targetQuery = null;
    if (reference.scheme[$isNotEmpty]) {
      targetScheme = reference.scheme;
      if (dart.test(reference.hasAuthority)) {
        targetUserInfo = reference.userInfo;
        targetHost = reference.host;
        targetPort = dart.test(reference.hasPort) ? reference.port : null;
      }
      targetPath = core._Uri._removeDotSegments(reference.path);
      if (dart.test(reference.hasQuery)) {
        targetQuery = reference.query;
      }
    } else {
      targetScheme = this.scheme;
      if (dart.test(reference.hasAuthority)) {
        targetUserInfo = reference.userInfo;
        targetHost = reference.host;
        targetPort = core._Uri._makePort(dart.test(reference.hasPort) ? reference.port : null, targetScheme);
        targetPath = core._Uri._removeDotSegments(reference.path);
        if (dart.test(reference.hasQuery)) targetQuery = reference.query;
      } else {
        targetUserInfo = this[_userInfo$];
        targetHost = this[_host$];
        targetPort = this[_port$];
        if (reference.path === "") {
          targetPath = this.path;
          if (dart.test(reference.hasQuery)) {
            targetQuery = reference.query;
          } else {
            targetQuery = this[_query$];
          }
        } else {
          if (dart.test(reference.hasAbsolutePath)) {
            targetPath = core._Uri._removeDotSegments(reference.path);
          } else {
            if (dart.test(this.hasEmptyPath)) {
              if (!dart.test(this.hasAuthority)) {
                if (!dart.test(this.hasScheme)) {
                  targetPath = reference.path;
                } else {
                  targetPath = core._Uri._removeDotSegments(reference.path);
                }
              } else {
                targetPath = core._Uri._removeDotSegments("/" + dart.notNull(reference.path));
              }
            } else {
              let mergedPath = this[_mergePaths](this.path, reference.path);
              if (dart.test(this.hasScheme) || dart.test(this.hasAuthority) || dart.test(this.hasAbsolutePath)) {
                targetPath = core._Uri._removeDotSegments(mergedPath);
              } else {
                targetPath = core._Uri._normalizeRelativePath(mergedPath, dart.test(this.hasScheme) || dart.test(this.hasAuthority));
              }
            }
          }
          if (dart.test(reference.hasQuery)) targetQuery = reference.query;
        }
      }
    }
    let fragment = dart.test(reference.hasFragment) ? reference.fragment : null;
    return new core._Uri._internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, fragment);
  }
  get hasScheme() {
    return this.scheme[$isNotEmpty];
  }
  get hasAuthority() {
    return this[_host$] != null;
  }
  get hasPort() {
    return this[_port$] != null;
  }
  get hasQuery() {
    return this[_query$] != null;
  }
  get hasFragment() {
    return this[_fragment$] != null;
  }
  get hasEmptyPath() {
    return this.path[$isEmpty];
  }
  get hasAbsolutePath() {
    return this.path[$startsWith]("/");
  }
  get origin() {
    if (this.scheme === "") {
      dart.throw(new core.StateError.new("Cannot use origin without a scheme: " + dart.str(this)));
    }
    if (this.scheme !== "http" && this.scheme !== "https") {
      dart.throw(new core.StateError.new("Origin is only applicable schemes http and https: " + dart.str(this)));
    }
    if (this[_host$] == null || this[_host$] === "") {
      dart.throw(new core.StateError.new("A " + dart.str(this.scheme) + ": URI should have a non-empty host name: " + dart.str(this)));
    }
    if (this[_port$] == null) return dart.str(this.scheme) + "://" + dart.str(this[_host$]);
    return dart.str(this.scheme) + "://" + dart.str(this[_host$]) + ":" + dart.str(this[_port$]);
  }
  toFilePath(opts) {
    let windows = opts && 'windows' in opts ? opts.windows : null;
    if (this.scheme !== "" && this.scheme !== "file") {
      dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a " + dart.str(this.scheme) + " URI"));
    }
    if (this.query !== "") {
      dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a URI with a query component"));
    }
    if (this.fragment !== "") {
      dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a URI with a fragment component"));
    }
    windows == null ? windows = core._Uri._isWindows : null;
    return dart.test(windows) ? core._Uri._toWindowsFilePath(this) : this[_toFilePath]();
  }
  [_toFilePath]() {
    if (dart.test(this.hasAuthority) && this.host !== "") {
      dart.throw(new core.UnsupportedError.new("Cannot extract a non-Windows file path from a file URI " + "with an authority"));
    }
    let pathSegments = this.pathSegments;
    core._Uri._checkNonWindowsPathReservedCharacters(pathSegments, false);
    let result = new core.StringBuffer.new();
    if (dart.test(this.hasAbsolutePath)) result.write("/");
    result.writeAll(pathSegments, "/");
    return result.toString();
  }
  static _toWindowsFilePath(uri) {
    let hasDriveLetter = false;
    let segments = uri.pathSegments;
    if (dart.notNull(segments[$length]) > 0 && segments[$_get](0).length === 2 && segments[$_get](0)[$codeUnitAt](1) === 58) {
      core._Uri._checkWindowsDriveLetter(segments[$_get](0)[$codeUnitAt](0), false);
      core._Uri._checkWindowsPathReservedCharacters(segments, false, 1);
      hasDriveLetter = true;
    } else {
      core._Uri._checkWindowsPathReservedCharacters(segments, false, 0);
    }
    let result = new core.StringBuffer.new();
    if (dart.test(uri.hasAbsolutePath) && !hasDriveLetter) result.write("\\");
    if (dart.test(uri.hasAuthority)) {
      let host = uri.host;
      if (host[$isNotEmpty]) {
        result.write("\\");
        result.write(host);
        result.write("\\");
      }
    }
    result.writeAll(segments, "\\");
    if (hasDriveLetter && segments[$length] === 1) result.write("\\");
    return result.toString();
  }
  get [_isPathAbsolute]() {
    return this.path != null && this.path[$startsWith]("/");
  }
  [_writeAuthority](ss) {
    if (this[_userInfo$][$isNotEmpty]) {
      ss.write(this[_userInfo$]);
      ss.write("@");
    }
    if (this[_host$] != null) ss.write(this[_host$]);
    if (this[_port$] != null) {
      ss.write(":");
      ss.write(this[_port$]);
    }
  }
  get data() {
    return this.scheme === "data" ? core.UriData.fromUri(this) : null;
  }
  toString() {
    let t98;
    t98 = this[_text$];
    return t98 == null ? this[_text$] = this[_initializeText]() : t98;
  }
  [_initializeText]() {
    let t98, t98$, t98$0;
    if (!(this[_text$] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2814, 12, "_text == null");
    let sb = new core.StringBuffer.new();
    if (this.scheme[$isNotEmpty]) {
      t98 = sb;
      t98.write(this.scheme);
      t98.write(":");
      t98;
    }
    if (dart.test(this.hasAuthority) || this.scheme === "file") {
      sb.write("//");
      this[_writeAuthority](sb);
    }
    sb.write(this.path);
    if (this[_query$] != null) {
      t98$ = sb;
      t98$.write("?");
      t98$.write(this[_query$]);
      t98$;
    }
    if (this[_fragment$] != null) {
      t98$0 = sb;
      t98$0.write("#");
      t98$0.write(this[_fragment$]);
      t98$0;
    }
    return sb.toString();
  }
  _equals(other) {
    if (this === other) return true;
    return core.Uri.is(other) && this.scheme == other.scheme && dart.equals(this.hasAuthority, other.hasAuthority) && this.userInfo == other.userInfo && this.host == other.host && this.port == other.port && this.path == other.path && dart.equals(this.hasQuery, other.hasQuery) && this.query == other.query && dart.equals(this.hasFragment, other.hasFragment) && this.fragment == other.fragment;
  }
  get hashCode() {
    let t98;
    t98 = this[_hashCodeCache];
    return t98 == null ? this[_hashCodeCache] = dart.hashCode(this.toString()) : t98;
  }
  static _createList() {
    return JSArrayOfString().of([]);
  }
  static _splitQueryStringAll(query, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : C168 || CT.C168;
    let result = new (IdentityMapOfString$ListOfString()).new();
    let i = 0;
    let start = 0;
    let equalsIndex = -1;
    function parsePair(start, equalsIndex, end) {
      let key = null;
      let value = null;
      if (start == end) return;
      if (dart.notNull(equalsIndex) < 0) {
        key = core._Uri._uriDecode(query, start, end, encoding, true);
        value = "";
      } else {
        key = core._Uri._uriDecode(query, start, equalsIndex, encoding, true);
        value = core._Uri._uriDecode(query, dart.notNull(equalsIndex) + 1, end, encoding, true);
      }
      result[$putIfAbsent](key, C276 || CT.C276)[$add](value);
    }
    dart.fn(parsePair, intAndintAndintTovoid());
    while (i < query.length) {
      let char = query[$codeUnitAt](i);
      if (char === 61) {
        if (equalsIndex < 0) equalsIndex = i;
      } else if (char === 38) {
        parsePair(start, equalsIndex, i);
        start = i + 1;
        equalsIndex = -1;
      }
      i = i + 1;
    }
    parsePair(start, equalsIndex, i);
    return result;
  }
  static _uriEncode(canonicalTable, text, encoding, spaceToPlus) {
    if (encoding == convert.utf8 && dart.test(core._Uri._needsNoEncoding.hasMatch(text))) {
      return text;
    }
    let result = new core.StringBuffer.new("");
    let bytes = encoding.encode(text);
    for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      let byte = bytes[$_get](i);
      if (dart.notNull(byte) < 128 && (dart.notNull(canonicalTable[$_get](byte[$rightShift](4))) & 1 << (dart.notNull(byte) & 15)) !== 0) {
        result.writeCharCode(byte);
      } else if (dart.test(spaceToPlus) && byte === 32) {
        result.write("+");
      } else {
        result.write("%");
        result.write("0123456789ABCDEF"[$_get](dart.notNull(byte) >> 4 & 15));
        result.write("0123456789ABCDEF"[$_get](dart.notNull(byte) & 15));
      }
    }
    return result.toString();
  }
  static _hexCharPairToByte(s, pos) {
    let byte = 0;
    for (let i = 0; i < 2; i = i + 1) {
      let charCode = s[$codeUnitAt](dart.notNull(pos) + i);
      if (48 <= charCode && charCode <= 57) {
        byte = byte * 16 + charCode - 48;
      } else {
        charCode = (charCode | 32) >>> 0;
        if (97 <= charCode && charCode <= 102) {
          byte = byte * 16 + charCode - 87;
        } else {
          dart.throw(new core.ArgumentError.new("Invalid URL encoding"));
        }
      }
    }
    return byte;
  }
  static _uriDecode(text, start, end, encoding, plusToSpace) {
    if (!(0 <= dart.notNull(start))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2926, 12, "0 <= start");
    if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2927, 12, "start <= end");
    if (!(dart.notNull(end) <= text.length)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2928, 12, "end <= text.length");
    if (!(encoding != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 2929, 12, "encoding != null");
    let simple = true;
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let codeUnit = text[$codeUnitAt](i);
      if (codeUnit > 127 || codeUnit === 37 || dart.test(plusToSpace) && codeUnit === 43) {
        simple = false;
        break;
      }
    }
    let bytes = null;
    if (simple) {
      if (dart.equals(convert.utf8, encoding) || dart.equals(convert.latin1, encoding) || dart.equals(convert.ascii, encoding)) {
        return text[$substring](start, end);
      } else {
        bytes = text[$substring](start, end)[$codeUnits];
      }
    } else {
      bytes = JSArrayOfint().of([]);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let codeUnit = text[$codeUnitAt](i);
        if (codeUnit > 127) {
          dart.throw(new core.ArgumentError.new("Illegal percent encoding in URI"));
        }
        if (codeUnit === 37) {
          if (dart.notNull(i) + 3 > text.length) {
            dart.throw(new core.ArgumentError.new("Truncated URI"));
          }
          bytes[$add](core._Uri._hexCharPairToByte(text, dart.notNull(i) + 1));
          i = dart.notNull(i) + 2;
        } else if (dart.test(plusToSpace) && codeUnit === 43) {
          bytes[$add](32);
        } else {
          bytes[$add](codeUnit);
        }
      }
    }
    return encoding.decode(bytes);
  }
  static _isAlphabeticCharacter(codeUnit) {
    let lowerCase = (dart.notNull(codeUnit) | 32) >>> 0;
    return 97 <= lowerCase && lowerCase <= 122;
  }
  static _isUnreservedChar(char) {
    return dart.notNull(char) < 127 && (dart.notNull(core._Uri._unreservedTable[$_get](char[$rightShift](4))) & 1 << (dart.notNull(char) & 15)) !== 0;
  }
};
(core._Uri._internal = function(scheme, _userInfo, _host, _port, path, _query, _fragment) {
  this[_pathSegments] = null;
  this[_text$] = null;
  this[_hashCodeCache] = null;
  this[_queryParameters] = null;
  this[_queryParameterLists] = null;
  this.scheme = scheme;
  this[_userInfo$] = _userInfo;
  this[_host$] = _host;
  this[_port$] = _port;
  this.path = path;
  this[_query$] = _query;
  this[_fragment$] = _fragment;
  ;
}).prototype = core._Uri.prototype;
;
core._Uri[dart.implements] = () => [core.Uri];
;
dart.setGetterSignature(core._Uri, () => ({
  __proto__: dart.getGetters(core._Uri.__proto__),
  authority: core.String,
  userInfo: core.String,
  host: core.String,
  port: core.int,
  query: core.String,
  fragment: core.String,
  pathSegments: core.List$(core.String),
  queryParameters: core.Map$(core.String, core.String),
  queryParametersAll: core.Map$(core.String, core.List$(core.String)),
  isAbsolute: core.bool,
  hasScheme: core.bool,
  hasAuthority: core.bool,
  hasPort: core.bool,
  hasQuery: core.bool,
  hasFragment: core.bool,
  hasEmptyPath: core.bool,
  hasAbsolutePath: core.bool,
  origin: core.String,
  [_isPathAbsolute]: core.bool,
  data: core.UriData
}));
dart.setLibraryUri(core._Uri, "dart:core");
;
dart.defineExtensionMethods(core._Uri, ['toString', '_equals']);
dart.defineExtensionAccessors(core._Uri, ['hashCode']);
dart.defineLazy(core._Uri, {
  /*core._Uri._isWindowsCached*/get _isWindowsCached() {
    return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
  },
  /*core._Uri._needsNoEncoding*/get _needsNoEncoding() {
    return core.RegExp.new("^[\\-\\.0-9A-Z_a-z~]*$");
  },
  /*core._Uri._unreservedTable*/get _unreservedTable() {
    return C277 || CT.C277;
  },
  /*core._Uri._unreserved2396Table*/get _unreserved2396Table() {
    return C278 || CT.C278;
  },
  /*core._Uri._encodeFullTable*/get _encodeFullTable() {
    return C279 || CT.C279;
  },
  /*core._Uri._schemeTable*/get _schemeTable() {
    return C280 || CT.C280;
  },
  /*core._Uri._schemeLowerTable*/get _schemeLowerTable() {
    return C281 || CT.C281;
  },
  /*core._Uri._subDelimitersTable*/get _subDelimitersTable() {
    return C282 || CT.C282;
  },
  /*core._Uri._genDelimitersTable*/get _genDelimitersTable() {
    return C283 || CT.C283;
  },
  /*core._Uri._userinfoTable*/get _userinfoTable() {
    return C284 || CT.C284;
  },
  /*core._Uri._regNameTable*/get _regNameTable() {
    return C285 || CT.C285;
  },
  /*core._Uri._pathCharTable*/get _pathCharTable() {
    return C286 || CT.C286;
  },
  /*core._Uri._pathCharOrSlashTable*/get _pathCharOrSlashTable() {
    return C287 || CT.C287;
  },
  /*core._Uri._queryCharTable*/get _queryCharTable() {
    return C288 || CT.C288;
  },
  /*core._Uri._zoneIDTable*/get _zoneIDTable() {
    return C277 || CT.C277;
  }
});
const _separatorIndices$ = dart.privateName(core, "_separatorIndices");
const _uriCache$ = dart.privateName(core, "_uriCache");
let C289;
let C290;
core.UriData = class UriData extends core.Object {
  static fromString(content, opts) {
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let base64 = opts && 'base64' in opts ? opts.base64 : false;
    let buffer = new core.StringBuffer.new();
    let indices = JSArrayOfint().of([-1]);
    let charsetName = null;
    let encodingName = null;
    if (parameters != null) charsetName = parameters[$_get]("charset");
    if (encoding == null) {
      if (charsetName != null) {
        encoding = convert.Encoding.getByName(charsetName);
      }
    } else if (charsetName == null) {
      encodingName = encoding.name;
    }
    encoding == null ? encoding = convert.ascii : null;
    core.UriData._writeUri(mimeType, encodingName, parameters, buffer, indices);
    indices[$add](buffer.length);
    if (dart.test(base64)) {
      buffer.write(";base64,");
      indices[$add](dart.notNull(buffer.length) - 1);
      buffer.write(encoding.fuse(core.String, core.UriData._base64).encode(content));
    } else {
      buffer.write(",");
      core.UriData._uriEncodeBytes(core.UriData._uricTable, encoding.encode(content), buffer);
    }
    return new core.UriData.__(buffer.toString(), indices, null);
  }
  static fromBytes(bytes, opts) {
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "application/octet-stream";
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let percentEncoded = opts && 'percentEncoded' in opts ? opts.percentEncoded : false;
    let buffer = new core.StringBuffer.new();
    let indices = JSArrayOfint().of([-1]);
    core.UriData._writeUri(core.String._check(mimeType), null, parameters, buffer, indices);
    indices[$add](buffer.length);
    if (dart.dtest(percentEncoded)) {
      buffer.write(",");
      core.UriData._uriEncodeBytes(core.UriData._uricTable, bytes, buffer);
    } else {
      buffer.write(";base64,");
      indices[$add](dart.notNull(buffer.length) - 1);
      core.UriData._base64.encoder.startChunkedConversion(new (_StringSinkConversionSinkOfStringSink()).new(buffer)).addSlice(bytes, 0, bytes[$length], true);
    }
    return new core.UriData.__(buffer.toString(), indices, null);
  }
  static fromUri(uri) {
    if (uri.scheme !== "data") {
      dart.throw(new core.ArgumentError.value(uri, "uri", "Scheme must be 'data'"));
    }
    if (dart.test(uri.hasAuthority)) {
      dart.throw(new core.ArgumentError.value(uri, "uri", "Data uri must not have authority"));
    }
    if (dart.test(uri.hasFragment)) {
      dart.throw(new core.ArgumentError.value(uri, "uri", "Data uri must not have a fragment part"));
    }
    if (!dart.test(uri.hasQuery)) {
      return core.UriData._parse(uri.path, 0, uri);
    }
    return core.UriData._parse(dart.str(uri), 5, uri);
  }
  static _writeUri(mimeType, charsetName, parameters, buffer, indices) {
    let t98, t98$;
    if (mimeType == null || mimeType === "text/plain") {
      mimeType = "";
    }
    if (mimeType[$isEmpty] || mimeType === "application/octet-stream") {
      buffer.write(mimeType);
    } else {
      let slashIndex = core.UriData._validateMimeType(mimeType);
      if (dart.notNull(slashIndex) < 0) {
        dart.throw(new core.ArgumentError.value(mimeType, "mimeType", "Invalid MIME type"));
      }
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, mimeType[$substring](0, slashIndex), convert.utf8, false));
      buffer.write("/");
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, mimeType[$substring](dart.notNull(slashIndex) + 1), convert.utf8, false));
    }
    if (charsetName != null) {
      if (indices != null) {
        t98 = indices;
        t98[$add](buffer.length);
        t98[$add](dart.notNull(buffer.length) + 8);
        t98;
      }
      buffer.write(";charset=");
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, charsetName, convert.utf8, false));
    }
    t98$ = parameters;
    t98$ == null ? null : t98$[$forEach](dart.fn((key, value) => {
      if (key[$isEmpty]) {
        dart.throw(new core.ArgumentError.value("", "Parameter names must not be empty"));
      }
      if (value[$isEmpty]) {
        dart.throw(new core.ArgumentError.value("", "Parameter values must not be empty", "parameters[\"" + dart.str(key) + "\"]"));
      }
      if (indices != null) indices[$add](buffer.length);
      buffer.write(";");
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, key, convert.utf8, false));
      if (indices != null) indices[$add](buffer.length);
      buffer.write("=");
      buffer.write(core._Uri._uriEncode(core.UriData._tokenCharTable, value, convert.utf8, false));
    }, StringAndStringToNull()));
  }
  static _validateMimeType(mimeType) {
    let slashIndex = -1;
    for (let i = 0; i < mimeType.length; i = i + 1) {
      let char = mimeType[$codeUnitAt](i);
      if (char !== 47) continue;
      if (slashIndex < 0) {
        slashIndex = i;
        continue;
      }
      return -1;
    }
    return slashIndex;
  }
  static parse(uri) {
    if (uri.length >= 5) {
      let dataDelta = core._startsWithData(uri, 0);
      if (dataDelta === 0) {
        return core.UriData._parse(uri, 5, null);
      }
      if (dataDelta === 32) {
        return core.UriData._parse(uri[$substring](5), 0, null);
      }
    }
    dart.throw(new core.FormatException.new("Does not start with 'data:'", uri, 0));
  }
  get uri() {
    if (this[_uriCache$] != null) return this[_uriCache$];
    let path = this[_text$];
    let query = null;
    let colonIndex = this[_separatorIndices$][$_get](0);
    let queryIndex = this[_text$][$indexOf]("?", dart.notNull(colonIndex) + 1);
    let end = this[_text$].length;
    if (queryIndex >= 0) {
      query = core._Uri._normalizeOrSubstring(this[_text$], queryIndex + 1, end, core._Uri._queryCharTable);
      end = queryIndex;
    }
    path = core._Uri._normalizeOrSubstring(this[_text$], dart.notNull(colonIndex) + 1, end, core._Uri._pathCharOrSlashTable);
    this[_uriCache$] = new core._DataUri.new(this, path, query);
    return this[_uriCache$];
  }
  get mimeType() {
    let start = dart.notNull(this[_separatorIndices$][$_get](0)) + 1;
    let end = this[_separatorIndices$][$_get](1);
    if (start === end) return "text/plain";
    return core._Uri._uriDecode(this[_text$], start, end, convert.utf8, false);
  }
  get charset() {
    let parameterStart = 1;
    let parameterEnd = dart.notNull(this[_separatorIndices$][$length]) - 1;
    if (dart.test(this.isBase64)) {
      parameterEnd = parameterEnd - 1;
    }
    for (let i = parameterStart; i < parameterEnd; i = i + 2) {
      let keyStart = dart.notNull(this[_separatorIndices$][$_get](i)) + 1;
      let keyEnd = this[_separatorIndices$][$_get](i + 1);
      if (keyEnd === keyStart + 7 && this[_text$][$startsWith]("charset", keyStart)) {
        return core._Uri._uriDecode(this[_text$], dart.notNull(keyEnd) + 1, this[_separatorIndices$][$_get](i + 2), convert.utf8, false);
      }
    }
    return "US-ASCII";
  }
  get isBase64() {
    return this[_separatorIndices$][$length][$isOdd];
  }
  get contentText() {
    return this[_text$][$substring](dart.notNull(this[_separatorIndices$][$last]) + 1);
  }
  contentAsBytes() {
    let t98, t98$;
    let text = this[_text$];
    let start = dart.notNull(this[_separatorIndices$][$last]) + 1;
    if (dart.test(this.isBase64)) {
      return convert.base64.decoder.convert(text, start);
    }
    let length = text.length - start;
    for (let i = start; i < text.length; i = i + 1) {
      let codeUnit = text[$codeUnitAt](i);
      if (codeUnit === 37) {
        i = i + 2;
        length = length - 2;
      }
    }
    let result = _native_typed_data.NativeUint8List.new(length);
    if (length === text.length) {
      result[$setRange](0, length, text[$codeUnits], start);
      return result;
    }
    let index = 0;
    for (let i = start; i < text.length; i = i + 1) {
      let codeUnit = text[$codeUnitAt](i);
      if (codeUnit !== 37) {
        result[$_set]((t98 = index, index = t98 + 1, t98), codeUnit);
      } else {
        if (i + 2 < text.length) {
          let byte = _internal.parseHexByte(text, i + 1);
          if (dart.notNull(byte) >= 0) {
            result[$_set]((t98$ = index, index = t98$ + 1, t98$), byte);
            i = i + 2;
            continue;
          }
        }
        dart.throw(new core.FormatException.new("Invalid percent escape", text, i));
      }
    }
    if (!(index === result[$length])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 3671, 12, "index == result.length");
    return result;
  }
  contentAsString(opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    if (encoding == null) {
      let charset = this.charset;
      encoding = convert.Encoding.getByName(charset);
      if (encoding == null) {
        dart.throw(new core.UnsupportedError.new("Unknown charset: " + dart.str(charset)));
      }
    }
    let text = this[_text$];
    let start = dart.notNull(this[_separatorIndices$][$last]) + 1;
    if (dart.test(this.isBase64)) {
      let converter = convert.base64.decoder.fuse(core.String, encoding.decoder);
      return converter.convert(text[$substring](start));
    }
    return core._Uri._uriDecode(text, start, text.length, encoding, false);
  }
  get parameters() {
    let result = new (IdentityMapOfString$String()).new();
    for (let i = 3; i < dart.notNull(this[_separatorIndices$][$length]); i = i + 2) {
      let start = dart.notNull(this[_separatorIndices$][$_get](i - 2)) + 1;
      let equals = this[_separatorIndices$][$_get](i - 1);
      let end = this[_separatorIndices$][$_get](i);
      let key = core._Uri._uriDecode(this[_text$], start, equals, convert.utf8, false);
      let value = core._Uri._uriDecode(this[_text$], dart.notNull(equals) + 1, end, convert.utf8, false);
      result[$_set](key, value);
    }
    return result;
  }
  static _parse(text, start, sourceUri) {
    if (!(start === 0 || start === 5)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 3734, 12, "start == 0 || start == 5");
    if (!(start === 5)[$_equals](text[$startsWith]("data:"))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 3735, 12, "(start == 5) == text.startsWith(\"data:\")");
    let indices = JSArrayOfint().of([dart.notNull(start) - 1]);
    let slashIndex = -1;
    let char = null;
    let i = start;
    for (; dart.notNull(i) < text.length; i = dart.notNull(i) + 1) {
      char = text[$codeUnitAt](i);
      if (dart.equals(char, 44) || dart.equals(char, 59)) break;
      if (dart.equals(char, 47)) {
        if (dart.notNull(slashIndex) < 0) {
          slashIndex = i;
          continue;
        }
        dart.throw(new core.FormatException.new("Invalid MIME type", text, i));
      }
    }
    if (dart.notNull(slashIndex) < 0 && dart.notNull(i) > dart.notNull(start)) {
      dart.throw(new core.FormatException.new("Invalid MIME type", text, i));
    }
    while (!dart.equals(char, 44)) {
      indices[$add](i);
      i = dart.notNull(i) + 1;
      let equalsIndex = -1;
      for (; dart.notNull(i) < text.length; i = dart.notNull(i) + 1) {
        char = text[$codeUnitAt](i);
        if (dart.equals(char, 61)) {
          if (dart.notNull(equalsIndex) < 0) equalsIndex = i;
        } else if (dart.equals(char, 59) || dart.equals(char, 44)) {
          break;
        }
      }
      if (dart.notNull(equalsIndex) >= 0) {
        indices[$add](equalsIndex);
      } else {
        let lastSeparator = indices[$last];
        if (!dart.equals(char, 44) || i !== dart.notNull(lastSeparator) + 7 || !text[$startsWith]("base64", dart.notNull(lastSeparator) + 1)) {
          dart.throw(new core.FormatException.new("Expecting '='", text, i));
        }
        break;
      }
    }
    indices[$add](i);
    let isBase64 = indices[$length][$isOdd];
    if (isBase64) {
      text = convert.base64.normalize(text, dart.notNull(i) + 1, text.length);
    } else {
      let data = core._Uri._normalize(text, dart.notNull(i) + 1, text.length, core.UriData._uricTable, {escapeDelimiters: true});
      if (data != null) {
        text = text[$replaceRange](dart.notNull(i) + 1, text.length, data);
      }
    }
    return new core.UriData.__(text, indices, sourceUri);
  }
  static _uriEncodeBytes(canonicalTable, bytes, buffer) {
    let byteOr = 0;
    for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      let byte = bytes[$_get](i);
      byteOr = (byteOr | dart.notNull(byte)) >>> 0;
      if (dart.notNull(byte) < 128 && (dart.notNull(canonicalTable[$_get](byte[$rightShift](4))) & 1 << (dart.notNull(byte) & 15)) !== 0) {
        buffer.writeCharCode(byte);
      } else {
        buffer.writeCharCode(37);
        buffer.writeCharCode("0123456789ABCDEF"[$codeUnitAt](byte[$rightShift](4)));
        buffer.writeCharCode("0123456789ABCDEF"[$codeUnitAt](dart.notNull(byte) & 15));
      }
    }
    if ((byteOr & ~255 >>> 0) !== 0) {
      for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
        let byte = bytes[$_get](i);
        if (dart.notNull(byte) < 0 || dart.notNull(byte) > 255) {
          dart.throw(new core.ArgumentError.value(byte, "non-byte value"));
        }
      }
    }
  }
  toString() {
    return this[_separatorIndices$][$_get](0) === -1 ? "data:" + dart.str(this[_text$]) : this[_text$];
  }
};
(core.UriData.__ = function(_text, _separatorIndices, _uriCache) {
  this[_text$] = _text;
  this[_separatorIndices$] = _separatorIndices;
  this[_uriCache$] = _uriCache;
  ;
}).prototype = core.UriData.prototype;
;
;
dart.setGetterSignature(core.UriData, () => ({
  __proto__: dart.getGetters(core.UriData.__proto__),
  uri: core.Uri,
  mimeType: core.String,
  charset: core.String,
  isBase64: core.bool,
  contentText: core.String,
  parameters: core.Map$(core.String, core.String)
}));
dart.setLibraryUri(core.UriData, "dart:core");
;
dart.defineExtensionMethods(core.UriData, ['toString']);
dart.defineLazy(core.UriData, {
  /*core.UriData._noScheme*/get _noScheme() {
    return -1;
  },
  /*core.UriData._base64*/get _base64() {
    return C163 || CT.C163;
  },
  /*core.UriData._tokenCharTable*/get _tokenCharTable() {
    return C289 || CT.C289;
  },
  /*core.UriData._uricTable*/get _uricTable() {
    return C288 || CT.C288;
  },
  /*core.UriData._base64Table*/get _base64Table() {
    return C290 || CT.C290;
  }
});
const _uri$ = dart.privateName(core, "_uri");
const _schemeEnd$ = dart.privateName(core, "_schemeEnd");
const _hostStart$ = dart.privateName(core, "_hostStart");
const _portStart$ = dart.privateName(core, "_portStart");
const _pathStart$ = dart.privateName(core, "_pathStart");
const _queryStart$ = dart.privateName(core, "_queryStart");
const _fragmentStart$ = dart.privateName(core, "_fragmentStart");
const _schemeCache$ = dart.privateName(core, "_schemeCache");
const _isFile = dart.privateName(core, "_isFile");
const _isHttp = dart.privateName(core, "_isHttp");
const _isHttps = dart.privateName(core, "_isHttps");
const _isPackage = dart.privateName(core, "_isPackage");
const _isScheme = dart.privateName(core, "_isScheme");
let C291;
let C292;
const _isPort = dart.privateName(core, "_isPort");
const _simpleMerge = dart.privateName(core, "_simpleMerge");
const _toNonSimple = dart.privateName(core, "_toNonSimple");
core._SimpleUri = class _SimpleUri extends core.Object {
  get hasScheme() {
    return dart.notNull(this[_schemeEnd$]) > 0;
  }
  get hasAuthority() {
    return dart.notNull(this[_hostStart$]) > 0;
  }
  get hasUserInfo() {
    return dart.notNull(this[_hostStart$]) > dart.notNull(this[_schemeEnd$]) + 4;
  }
  get hasPort() {
    return dart.notNull(this[_hostStart$]) > 0 && dart.notNull(this[_portStart$]) + 1 < dart.notNull(this[_pathStart$]);
  }
  get hasQuery() {
    return dart.notNull(this[_queryStart$]) < dart.notNull(this[_fragmentStart$]);
  }
  get hasFragment() {
    return dart.notNull(this[_fragmentStart$]) < this[_uri$].length;
  }
  get [_isFile]() {
    return this[_schemeEnd$] === 4 && this[_uri$][$startsWith]("file");
  }
  get [_isHttp]() {
    return this[_schemeEnd$] === 4 && this[_uri$][$startsWith]("http");
  }
  get [_isHttps]() {
    return this[_schemeEnd$] === 5 && this[_uri$][$startsWith]("https");
  }
  get [_isPackage]() {
    return this[_schemeEnd$] === 7 && this[_uri$][$startsWith]("package");
  }
  [_isScheme](scheme) {
    return this[_schemeEnd$] === scheme.length && this[_uri$][$startsWith](scheme);
  }
  get hasAbsolutePath() {
    return this[_uri$][$startsWith]("/", this[_pathStart$]);
  }
  get hasEmptyPath() {
    return this[_pathStart$] == this[_queryStart$];
  }
  get isAbsolute() {
    return dart.test(this.hasScheme) && !dart.test(this.hasFragment);
  }
  isScheme(scheme) {
    if (scheme == null || scheme[$isEmpty]) return dart.notNull(this[_schemeEnd$]) < 0;
    if (scheme.length !== this[_schemeEnd$]) return false;
    return core._Uri._compareScheme(scheme, this[_uri$]);
  }
  get scheme() {
    if (dart.notNull(this[_schemeEnd$]) <= 0) return "";
    if (this[_schemeCache$] != null) return this[_schemeCache$];
    if (dart.test(this[_isHttp])) {
      this[_schemeCache$] = "http";
    } else if (dart.test(this[_isHttps])) {
      this[_schemeCache$] = "https";
    } else if (dart.test(this[_isFile])) {
      this[_schemeCache$] = "file";
    } else if (dart.test(this[_isPackage])) {
      this[_schemeCache$] = "package";
    } else {
      this[_schemeCache$] = this[_uri$][$substring](0, this[_schemeEnd$]);
    }
    return this[_schemeCache$];
  }
  get authority() {
    return dart.notNull(this[_hostStart$]) > 0 ? this[_uri$][$substring](dart.notNull(this[_schemeEnd$]) + 3, this[_pathStart$]) : "";
  }
  get userInfo() {
    return dart.notNull(this[_hostStart$]) > dart.notNull(this[_schemeEnd$]) + 3 ? this[_uri$][$substring](dart.notNull(this[_schemeEnd$]) + 3, dart.notNull(this[_hostStart$]) - 1) : "";
  }
  get host() {
    return dart.notNull(this[_hostStart$]) > 0 ? this[_uri$][$substring](this[_hostStart$], this[_portStart$]) : "";
  }
  get port() {
    if (dart.test(this.hasPort)) return core.int.parse(this[_uri$][$substring](dart.notNull(this[_portStart$]) + 1, this[_pathStart$]));
    if (dart.test(this[_isHttp])) return 80;
    if (dart.test(this[_isHttps])) return 443;
    return 0;
  }
  get path() {
    return this[_uri$][$substring](this[_pathStart$], this[_queryStart$]);
  }
  get query() {
    return dart.notNull(this[_queryStart$]) < dart.notNull(this[_fragmentStart$]) ? this[_uri$][$substring](dart.notNull(this[_queryStart$]) + 1, this[_fragmentStart$]) : "";
  }
  get fragment() {
    return dart.notNull(this[_fragmentStart$]) < this[_uri$].length ? this[_uri$][$substring](dart.notNull(this[_fragmentStart$]) + 1) : "";
  }
  get origin() {
    let isHttp = this[_isHttp];
    if (dart.notNull(this[_schemeEnd$]) < 0) {
      dart.throw(new core.StateError.new("Cannot use origin without a scheme: " + dart.str(this)));
    }
    if (!dart.test(isHttp) && !dart.test(this[_isHttps])) {
      dart.throw(new core.StateError.new("Origin is only applicable to schemes http and https: " + dart.str(this)));
    }
    if (this[_hostStart$] == this[_portStart$]) {
      dart.throw(new core.StateError.new("A " + dart.str(this.scheme) + ": URI should have a non-empty host name: " + dart.str(this)));
    }
    if (this[_hostStart$] === dart.notNull(this[_schemeEnd$]) + 3) {
      return this[_uri$][$substring](0, this[_pathStart$]);
    }
    return this[_uri$][$substring](0, dart.notNull(this[_schemeEnd$]) + 3) + this[_uri$][$substring](this[_hostStart$], this[_pathStart$]);
  }
  get pathSegments() {
    let start = this[_pathStart$];
    let end = this[_queryStart$];
    if (this[_uri$][$startsWith]("/", start)) start = dart.notNull(start) + 1;
    if (start == end) return C274 || CT.C274;
    let parts = JSArrayOfString().of([]);
    for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
      let char = this[_uri$][$codeUnitAt](i);
      if (char === 47) {
        parts[$add](this[_uri$][$substring](start, i));
        start = dart.notNull(i) + 1;
      }
    }
    parts[$add](this[_uri$][$substring](start, end));
    return ListOfString().unmodifiable(parts);
  }
  get queryParameters() {
    if (!dart.test(this.hasQuery)) return C291 || CT.C291;
    return new (UnmodifiableMapViewOfString$String()).new(core.Uri.splitQueryString(this.query));
  }
  get queryParametersAll() {
    if (!dart.test(this.hasQuery)) return C292 || CT.C292;
    let queryParameterLists = core._Uri._splitQueryStringAll(this.query);
    for (let key of queryParameterLists[$keys]) {
      queryParameterLists[$_set](key, ListOfString().unmodifiable(core.Iterable._check(queryParameterLists[$_get](key))));
    }
    return MapOfString$ListOfString().unmodifiable(queryParameterLists);
  }
  [_isPort](port) {
    let portDigitStart = dart.notNull(this[_portStart$]) + 1;
    return portDigitStart + port.length === this[_pathStart$] && this[_uri$][$startsWith](port, portDigitStart);
  }
  normalizePath() {
    return this;
  }
  removeFragment() {
    if (!dart.test(this.hasFragment)) return this;
    return new core._SimpleUri.new(this[_uri$][$substring](0, this[_fragmentStart$]), this[_schemeEnd$], this[_hostStart$], this[_portStart$], this[_pathStart$], this[_queryStart$], this[_fragmentStart$], this[_schemeCache$]);
  }
  replace(opts) {
    let scheme = opts && 'scheme' in opts ? opts.scheme : null;
    let userInfo = opts && 'userInfo' in opts ? opts.userInfo : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let port = opts && 'port' in opts ? opts.port : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let pathSegments = opts && 'pathSegments' in opts ? opts.pathSegments : null;
    let query = opts && 'query' in opts ? opts.query : null;
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let fragment = opts && 'fragment' in opts ? opts.fragment : null;
    let schemeChanged = false;
    if (scheme != null) {
      scheme = core._Uri._makeScheme(scheme, 0, scheme.length);
      schemeChanged = !dart.test(this[_isScheme](scheme));
    } else {
      scheme = this.scheme;
    }
    let isFile = scheme === "file";
    if (userInfo != null) {
      userInfo = core._Uri._makeUserInfo(userInfo, 0, userInfo.length);
    } else if (dart.notNull(this[_hostStart$]) > 0) {
      userInfo = this[_uri$][$substring](dart.notNull(this[_schemeEnd$]) + 3, this[_hostStart$]);
    } else {
      userInfo = "";
    }
    if (port != null) {
      port = core._Uri._makePort(port, scheme);
    } else {
      port = dart.test(this.hasPort) ? this.port : null;
      if (schemeChanged) {
        port = core._Uri._makePort(port, scheme);
      }
    }
    if (host != null) {
      host = core._Uri._makeHost(host, 0, host.length, false);
    } else if (dart.notNull(this[_hostStart$]) > 0) {
      host = this[_uri$][$substring](this[_hostStart$], this[_portStart$]);
    } else if (userInfo[$isNotEmpty] || port != null || isFile) {
      host = "";
    }
    let hasAuthority = host != null;
    if (path != null || pathSegments != null) {
      path = core._Uri._makePath(path, 0, core._stringOrNullLength(path), pathSegments, scheme, hasAuthority);
    } else {
      path = this[_uri$][$substring](this[_pathStart$], this[_queryStart$]);
      if ((isFile || hasAuthority && !path[$isEmpty]) && !path[$startsWith]("/")) {
        path = "/" + dart.notNull(path);
      }
    }
    if (query != null || queryParameters != null) {
      query = core._Uri._makeQuery(query, 0, core._stringOrNullLength(query), queryParameters);
    } else if (dart.notNull(this[_queryStart$]) < dart.notNull(this[_fragmentStart$])) {
      query = this[_uri$][$substring](dart.notNull(this[_queryStart$]) + 1, this[_fragmentStart$]);
    }
    if (fragment != null) {
      fragment = core._Uri._makeFragment(fragment, 0, fragment.length);
    } else if (dart.notNull(this[_fragmentStart$]) < this[_uri$].length) {
      fragment = this[_uri$][$substring](dart.notNull(this[_fragmentStart$]) + 1);
    }
    return new core._Uri._internal(scheme, userInfo, host, port, path, query, fragment);
  }
  resolve(reference) {
    return this.resolveUri(core.Uri.parse(reference));
  }
  resolveUri(reference) {
    if (core._SimpleUri.is(reference)) {
      return this[_simpleMerge](this, reference);
    }
    return this[_toNonSimple]().resolveUri(reference);
  }
  [_simpleMerge](base, ref) {
    if (dart.test(ref.hasScheme)) return ref;
    if (dart.test(ref.hasAuthority)) {
      if (!dart.test(base.hasScheme)) return ref;
      let isSimple = true;
      if (dart.test(base[_isFile])) {
        isSimple = !dart.test(ref.hasEmptyPath);
      } else if (dart.test(base[_isHttp])) {
        isSimple = !dart.test(ref[_isPort]("80"));
      } else if (dart.test(base[_isHttps])) {
        isSimple = !dart.test(ref[_isPort]("443"));
      }
      if (isSimple) {
        let delta = dart.notNull(base[_schemeEnd$]) + 1;
        let newUri = base[_uri$][$substring](0, dart.notNull(base[_schemeEnd$]) + 1) + ref[_uri$][$substring](dart.notNull(ref[_schemeEnd$]) + 1);
        return new core._SimpleUri.new(newUri, base[_schemeEnd$], dart.notNull(ref[_hostStart$]) + delta, dart.notNull(ref[_portStart$]) + delta, dart.notNull(ref[_pathStart$]) + delta, dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
      } else {
        return this[_toNonSimple]().resolveUri(ref);
      }
    }
    if (dart.test(ref.hasEmptyPath)) {
      if (dart.test(ref.hasQuery)) {
        let delta = dart.notNull(base[_queryStart$]) - dart.notNull(ref[_queryStart$]);
        let newUri = base[_uri$][$substring](0, base[_queryStart$]) + ref[_uri$][$substring](ref[_queryStart$]);
        return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
      }
      if (dart.test(ref.hasFragment)) {
        let delta = dart.notNull(base[_fragmentStart$]) - dart.notNull(ref[_fragmentStart$]);
        let newUri = base[_uri$][$substring](0, base[_fragmentStart$]) + ref[_uri$][$substring](ref[_fragmentStart$]);
        return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], base[_queryStart$], dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
      }
      return base.removeFragment();
    }
    if (dart.test(ref.hasAbsolutePath)) {
      let delta = dart.notNull(base[_pathStart$]) - dart.notNull(ref[_pathStart$]);
      let newUri = base[_uri$][$substring](0, base[_pathStart$]) + ref[_uri$][$substring](ref[_pathStart$]);
      return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
    }
    if (dart.test(base.hasEmptyPath) && dart.test(base.hasAuthority)) {
      let refStart = ref[_pathStart$];
      while (ref[_uri$][$startsWith]("../", refStart)) {
        refStart = dart.notNull(refStart) + 3;
      }
      let delta = dart.notNull(base[_pathStart$]) - dart.notNull(refStart) + 1;
      let newUri = base[_uri$][$substring](0, base[_pathStart$]) + "/" + ref[_uri$][$substring](refStart);
      return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
    }
    let baseUri = base[_uri$];
    let refUri = ref[_uri$];
    let baseStart = base[_pathStart$];
    let baseEnd = base[_queryStart$];
    while (baseUri[$startsWith]("../", baseStart))
      baseStart = dart.notNull(baseStart) + 3;
    let refStart = ref[_pathStart$];
    let refEnd = ref[_queryStart$];
    let backCount = 0;
    while (dart.notNull(refStart) + 3 <= dart.notNull(refEnd) && refUri[$startsWith]("../", refStart)) {
      refStart = dart.notNull(refStart) + 3;
      backCount = backCount + 1;
    }
    let insert = "";
    while (dart.notNull(baseEnd) > dart.notNull(baseStart)) {
      baseEnd = dart.notNull(baseEnd) - 1;
      let char = baseUri[$codeUnitAt](baseEnd);
      if (char === 47) {
        insert = "/";
        if (backCount === 0) break;
        backCount = backCount - 1;
      }
    }
    if (baseEnd == baseStart && !dart.test(base.hasScheme) && !dart.test(base.hasAbsolutePath)) {
      insert = "";
      refStart = dart.notNull(refStart) - backCount * 3;
    }
    let delta = dart.notNull(baseEnd) - dart.notNull(refStart) + insert.length;
    let newUri = base[_uri$][$substring](0, baseEnd) + insert + ref[_uri$][$substring](refStart);
    return new core._SimpleUri.new(newUri, base[_schemeEnd$], base[_hostStart$], base[_portStart$], base[_pathStart$], dart.notNull(ref[_queryStart$]) + delta, dart.notNull(ref[_fragmentStart$]) + delta, base[_schemeCache$]);
  }
  toFilePath(opts) {
    let windows = opts && 'windows' in opts ? opts.windows : null;
    if (dart.notNull(this[_schemeEnd$]) >= 0 && !dart.test(this[_isFile])) {
      dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a " + dart.str(this.scheme) + " URI"));
    }
    if (dart.notNull(this[_queryStart$]) < this[_uri$].length) {
      if (dart.notNull(this[_queryStart$]) < dart.notNull(this[_fragmentStart$])) {
        dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a URI with a query component"));
      }
      dart.throw(new core.UnsupportedError.new("Cannot extract a file path from a URI with a fragment component"));
    }
    windows == null ? windows = core._Uri._isWindows : null;
    return dart.test(windows) ? core._Uri._toWindowsFilePath(this) : this[_toFilePath]();
  }
  [_toFilePath]() {
    if (dart.notNull(this[_hostStart$]) < dart.notNull(this[_portStart$])) {
      dart.throw(new core.UnsupportedError.new("Cannot extract a non-Windows file path from a file URI " + "with an authority"));
    }
    return this.path;
  }
  get data() {
    if (!(this.scheme !== "data")) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 4732, 12, "scheme != \"data\"");
    return null;
  }
  get hashCode() {
    let t98;
    t98 = this[_hashCodeCache];
    return t98 == null ? this[_hashCodeCache] = dart.hashCode(this[_uri$]) : t98;
  }
  _equals(other) {
    if (this === other) return true;
    return core.Uri.is(other) && this[_uri$] == dart.toString(other);
  }
  [_toNonSimple]() {
    return new core._Uri._internal(this.scheme, this.userInfo, dart.test(this.hasAuthority) ? this.host : null, dart.test(this.hasPort) ? this.port : null, this.path, dart.test(this.hasQuery) ? this.query : null, dart.test(this.hasFragment) ? this.fragment : null);
  }
  toString() {
    return this[_uri$];
  }
};
(core._SimpleUri.new = function(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache) {
  this[_hashCodeCache] = null;
  this[_uri$] = _uri;
  this[_schemeEnd$] = _schemeEnd;
  this[_hostStart$] = _hostStart;
  this[_portStart$] = _portStart;
  this[_pathStart$] = _pathStart;
  this[_queryStart$] = _queryStart;
  this[_fragmentStart$] = _fragmentStart;
  this[_schemeCache$] = _schemeCache;
  ;
}).prototype = core._SimpleUri.prototype;
;
core._SimpleUri[dart.implements] = () => [core.Uri];
;
dart.setGetterSignature(core._SimpleUri, () => ({
  __proto__: dart.getGetters(core._SimpleUri.__proto__),
  hasScheme: core.bool,
  hasAuthority: core.bool,
  hasUserInfo: core.bool,
  hasPort: core.bool,
  hasQuery: core.bool,
  hasFragment: core.bool,
  [_isFile]: core.bool,
  [_isHttp]: core.bool,
  [_isHttps]: core.bool,
  [_isPackage]: core.bool,
  hasAbsolutePath: core.bool,
  hasEmptyPath: core.bool,
  isAbsolute: core.bool,
  scheme: core.String,
  authority: core.String,
  userInfo: core.String,
  host: core.String,
  port: core.int,
  path: core.String,
  query: core.String,
  fragment: core.String,
  origin: core.String,
  pathSegments: core.List$(core.String),
  queryParameters: core.Map$(core.String, core.String),
  queryParametersAll: core.Map$(core.String, core.List$(core.String)),
  data: core.UriData
}));
dart.setLibraryUri(core._SimpleUri, "dart:core");
;
dart.defineExtensionMethods(core._SimpleUri, ['_equals', 'toString']);
dart.defineExtensionAccessors(core._SimpleUri, ['hashCode']);
const _data$0 = dart.privateName(core, "_data");
core._DataUri = class _DataUri extends core._Uri {
  get data() {
    return this[_data$0];
  }
};
(core._DataUri.new = function(_data, path, query) {
  this[_data$0] = _data;
  core._DataUri.__proto__._internal.call(this, "data", null, null, null, path, query, null);
  ;
}).prototype = core._DataUri.prototype;
;
dart.setLibraryUri(core._DataUri, "dart:core");
;
core._symbolToString = function _symbolToString(symbol) {
  return _js_helper.PrivateSymbol.is(symbol) ? _js_helper.PrivateSymbol.getName(symbol) : _internal.Symbol.getName(_internal.Symbol._check(symbol));
};
core._kNull = function _kNull(_) {
  return null;
};
core._max = function _max(a, b) {
  return dart.notNull(a) > dart.notNull(b) ? a : b;
};
core._min = function _min(a, b) {
  return dart.notNull(a) < dart.notNull(b) ? a : b;
};
core.identical = function identical(a, b) {
  return a == null ? b == null : a === b;
};
core.identityHashCode = function identityHashCode(object) {
  if (object == null) return 0;
  let hash = object[dart.identityHashCode_];
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object[dart.identityHashCode_] = hash;
  }
  return hash;
};
core.print = function print$0(object) {
  let line = dart.str(object);
  if (_internal.printToZone == null) {
    _internal.printToConsole(line);
  } else {
    _internal.printToZone(line);
  }
};
core._isLeadSurrogate = function _isLeadSurrogate$(code) {
  return (dart.notNull(code) & 64512) === 55296;
};
core._isTrailSurrogate = function _isTrailSurrogate(code) {
  return (dart.notNull(code) & 64512) === 56320;
};
core._combineSurrogatePair = function _combineSurrogatePair$(start, end) {
  return 65536 + ((dart.notNull(start) & 1023) << 10) + (dart.notNull(end) & 1023);
};
core._createTables = function _createTables() {
  let unreserved = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~";
  let pchar = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=";
  let tables = ListOfUint8List().generate(22, dart.fn(_ => _native_typed_data.NativeUint8List.new(96), intToUint8List()));
  function build(state, defaultTransition) {
    let t98;
    t98 = tables[$_get](core.int._check(state));
    t98[$fillRange](0, 96, core.int._check(defaultTransition));
    return t98;
  }
  dart.fn(build, dynamicAnddynamicToUint8List());
  function setChars(target, chars, transition) {
    for (let i = 0; i < chars.length; i = i + 1) {
      let char = chars[$codeUnitAt](i);
      target[$_set]((char ^ 96) >>> 0, transition);
    }
  }
  dart.fn(setChars, Uint8ListAndStringAndintTovoid());
  function setRange(target, range, transition) {
    for (let i = range[$codeUnitAt](0), n = range[$codeUnitAt](1); i <= n; i = i + 1) {
      target[$_set]((i ^ 96) >>> 0, transition);
    }
  }
  dart.fn(setRange, Uint8ListAndStringAndintTovoid());
  let b = null;
  b = build(0, (1 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 1);
  setChars(typed_data.Uint8List._check(b), ".", 14);
  setChars(typed_data.Uint8List._check(b), ":", (2 | 32) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", 3);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(14, (1 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 1);
  setChars(typed_data.Uint8List._check(b), ".", 15);
  setChars(typed_data.Uint8List._check(b), ":", (2 | 32) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(15, (1 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 1);
  setChars(typed_data.Uint8List._check(b), "%", (1 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), ":", (2 | 32) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", 9);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(1, (1 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 1);
  setChars(typed_data.Uint8List._check(b), ":", (2 | 32) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", 10);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(2, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, (11 | 128) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", (3 | 128) >>> 0);
  setChars(typed_data.Uint8List._check(b), ".", (18 | 128) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(3, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 11);
  setChars(typed_data.Uint8List._check(b), "/", (4 | 64) >>> 0);
  setChars(typed_data.Uint8List._check(b), ".", 18);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(4, (5 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 5);
  setRange(typed_data.Uint8List._check(b), "AZ", (5 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), ":", (6 | 96) >>> 0);
  setChars(typed_data.Uint8List._check(b), "@", (4 | 64) >>> 0);
  setChars(typed_data.Uint8List._check(b), "[", (8 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 128) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(5, (5 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 5);
  setRange(typed_data.Uint8List._check(b), "AZ", (5 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), ":", (6 | 96) >>> 0);
  setChars(typed_data.Uint8List._check(b), "@", (4 | 64) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 128) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(6, (7 | 224) >>> 0);
  setRange(typed_data.Uint8List._check(b), "19", 7);
  setChars(typed_data.Uint8List._check(b), "@", (4 | 64) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 128) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(7, (7 | 224) >>> 0);
  setRange(typed_data.Uint8List._check(b), "09", 7);
  setChars(typed_data.Uint8List._check(b), "@", (4 | 64) >>> 0);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 128) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(8, 8);
  setChars(typed_data.Uint8List._check(b), "]", 5);
  b = build(9, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 11);
  setChars(typed_data.Uint8List._check(b), ".", 16);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(16, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 11);
  setChars(typed_data.Uint8List._check(b), ".", 17);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(17, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 11);
  setChars(typed_data.Uint8List._check(b), "/", 9);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(10, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 11);
  setChars(typed_data.Uint8List._check(b), ".", 18);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(18, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 11);
  setChars(typed_data.Uint8List._check(b), ".", 19);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(19, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 11);
  setChars(typed_data.Uint8List._check(b), "/", (10 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(11, (11 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 11);
  setChars(typed_data.Uint8List._check(b), "/", 10);
  setChars(typed_data.Uint8List._check(b), "?", (12 | 160) >>> 0);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(12, (12 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 12);
  setChars(typed_data.Uint8List._check(b), "?", 12);
  setChars(typed_data.Uint8List._check(b), "#", (13 | 192) >>> 0);
  b = build(13, (13 | 224) >>> 0);
  setChars(typed_data.Uint8List._check(b), pchar, 13);
  setChars(typed_data.Uint8List._check(b), "?", 13);
  b = build(20, (21 | 224) >>> 0);
  setRange(typed_data.Uint8List._check(b), "az", 21);
  b = build(21, (21 | 224) >>> 0);
  setRange(typed_data.Uint8List._check(b), "az", 21);
  setRange(typed_data.Uint8List._check(b), "09", 21);
  setChars(typed_data.Uint8List._check(b), "+-.", 21);
  return tables;
};
core._scan = function _scan(uri, start, end, state, indices) {
  let tables = core._scannerTables;
  if (!(dart.notNull(end) <= uri.length)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart", 4272, 10, "end <= uri.length");
  for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
    let table = tables[$_get](state);
    let char = (uri[$codeUnitAt](i) ^ 96) >>> 0;
    if (char > 95) char = 31;
    let transition = table[$_get](char);
    state = dart.notNull(transition) & 31;
    indices[$_set](transition[$rightShift](5), i);
  }
  return state;
};
core._startsWithData = function _startsWithData(text, start) {
  let delta = ((text[$codeUnitAt](dart.notNull(start) + 4) ^ 58) >>> 0) * 3;
  delta = (delta | (text[$codeUnitAt](start) ^ 100) >>> 0) >>> 0;
  delta = (delta | (text[$codeUnitAt](dart.notNull(start) + 1) ^ 97) >>> 0) >>> 0;
  delta = (delta | (text[$codeUnitAt](dart.notNull(start) + 2) ^ 116) >>> 0) >>> 0;
  delta = (delta | (text[$codeUnitAt](dart.notNull(start) + 3) ^ 97) >>> 0) >>> 0;
  return delta;
};
core._stringOrNullLength = function _stringOrNullLength(s) {
  return s == null ? 0 : s.length;
};
let C293;
let C294;
let C295;
dart.defineLazy(core, {
  /*core._dummyList*/get _dummyList() {
    return _native_typed_data.NativeUint16List.new(0);
  },
  /*core.deprecated*/get deprecated() {
    return C293 || CT.C293;
  },
  /*core.override*/get override() {
    return C294 || CT.C294;
  },
  /*core.provisional*/get provisional() {
    return null;
  },
  /*core.proxy*/get proxy() {
    return C295 || CT.C295;
  },
  /*core._SPACE*/get _SPACE() {
    return 32;
  },
  /*core._PERCENT*/get _PERCENT() {
    return 37;
  },
  /*core._AMPERSAND*/get _AMPERSAND() {
    return 38;
  },
  /*core._PLUS*/get _PLUS() {
    return 43;
  },
  /*core._DOT*/get _DOT() {
    return 46;
  },
  /*core._SLASH*/get _SLASH() {
    return 47;
  },
  /*core._COLON*/get _COLON() {
    return 58;
  },
  /*core._EQUALS*/get _EQUALS() {
    return 61;
  },
  /*core._UPPER_CASE_A*/get _UPPER_CASE_A() {
    return 65;
  },
  /*core._UPPER_CASE_Z*/get _UPPER_CASE_Z() {
    return 90;
  },
  /*core._LEFT_BRACKET*/get _LEFT_BRACKET() {
    return 91;
  },
  /*core._BACKSLASH*/get _BACKSLASH() {
    return 92;
  },
  /*core._RIGHT_BRACKET*/get _RIGHT_BRACKET() {
    return 93;
  },
  /*core._LOWER_CASE_A*/get _LOWER_CASE_A() {
    return 97;
  },
  /*core._LOWER_CASE_F*/get _LOWER_CASE_F() {
    return 102;
  },
  /*core._LOWER_CASE_Z*/get _LOWER_CASE_Z() {
    return 122;
  },
  /*core._hexDigits*/get _hexDigits() {
    return "0123456789ABCDEF";
  },
  /*core._schemeEndIndex*/get _schemeEndIndex() {
    return 1;
  },
  /*core._hostStartIndex*/get _hostStartIndex() {
    return 2;
  },
  /*core._portStartIndex*/get _portStartIndex() {
    return 3;
  },
  /*core._pathStartIndex*/get _pathStartIndex() {
    return 4;
  },
  /*core._queryStartIndex*/get _queryStartIndex() {
    return 5;
  },
  /*core._fragmentStartIndex*/get _fragmentStartIndex() {
    return 6;
  },
  /*core._notSimpleIndex*/get _notSimpleIndex() {
    return 7;
  },
  /*core._uriStart*/get _uriStart() {
    return 0;
  },
  /*core._nonSimpleEndStates*/get _nonSimpleEndStates() {
    return 14;
  },
  /*core._schemeStart*/get _schemeStart() {
    return 20;
  },
  /*core._scannerTables*/get _scannerTables() {
    return core._createTables();
  }
});
const _name$8 = dart.privateName(ui, "_name");
let C296;
let C297;
let C298;
let C299;
ui.PointMode = class PointMode extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PointMode.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PointMode.prototype;
;
dart.setLibraryUri(ui.PointMode, "dart:ui");
;
dart.defineExtensionMethods(ui.PointMode, ['toString']);
ui.PointMode.points = C296 || CT.C296;
ui.PointMode.lines = C297 || CT.C297;
ui.PointMode.polygon = C298 || CT.C298;
ui.PointMode.values = C299 || CT.C299;
let C300;
let C301;
let C302;
ui.ClipOp = class ClipOp extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.ClipOp.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.ClipOp.prototype;
;
dart.setLibraryUri(ui.ClipOp, "dart:ui");
;
dart.defineExtensionMethods(ui.ClipOp, ['toString']);
ui.ClipOp.difference = C300 || CT.C300;
ui.ClipOp.intersect = C301 || CT.C301;
ui.ClipOp.values = C302 || CT.C302;
let C303;
let C304;
let C305;
let C306;
ui.VertexMode = class VertexMode extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.VertexMode.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.VertexMode.prototype;
;
dart.setLibraryUri(ui.VertexMode, "dart:ui");
;
dart.defineExtensionMethods(ui.VertexMode, ['toString']);
ui.VertexMode.triangles = C303 || CT.C303;
ui.VertexMode.triangleStrip = C304 || CT.C304;
ui.VertexMode.triangleFan = C305 || CT.C305;
ui.VertexMode.values = C306 || CT.C306;
let C307;
let C308;
let C309;
ui.PathFillType = class PathFillType extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PathFillType.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PathFillType.prototype;
;
dart.setLibraryUri(ui.PathFillType, "dart:ui");
;
dart.defineExtensionMethods(ui.PathFillType, ['toString']);
ui.PathFillType.nonZero = C307 || CT.C307;
ui.PathFillType.evenOdd = C308 || CT.C308;
ui.PathFillType.values = C309 || CT.C309;
let C310;
let C311;
let C312;
let C313;
let C314;
let C315;
ui.PathOperation = class PathOperation extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PathOperation.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PathOperation.prototype;
;
dart.setLibraryUri(ui.PathOperation, "dart:ui");
;
dart.defineExtensionMethods(ui.PathOperation, ['toString']);
ui.PathOperation.difference = C310 || CT.C310;
ui.PathOperation.intersect = C311 || CT.C311;
ui.PathOperation.union = C312 || CT.C312;
ui.PathOperation.xor = C313 || CT.C313;
ui.PathOperation.reverseDifference = C314 || CT.C314;
ui.PathOperation.values = C315 || CT.C315;
const _dx = dart.privateName(ui, "_dx");
const _dy = dart.privateName(ui, "_dy");
const _dx$ = dart.privateName(ui, "OffsetBase._dx");
const _dy$ = dart.privateName(ui, "OffsetBase._dy");
ui.OffsetBase = class OffsetBase extends core.Object {
  get [_dx]() {
    return this[_dx$];
  }
  set [_dx](value) {
    super[_dx] = value;
  }
  get [_dy]() {
    return this[_dy$];
  }
  set [_dy](value) {
    super[_dy] = value;
  }
  get isInfinite() {
    return dart.notNull(this[_dx]) >= 1 / 0 || dart.notNull(this[_dy]) >= 1 / 0;
  }
  get isFinite() {
    return this[_dx][$isFinite] && this[_dy][$isFinite];
  }
  ['<'](other) {
    return dart.notNull(this[_dx]) < dart.notNull(other[_dx]) && dart.notNull(this[_dy]) < dart.notNull(other[_dy]);
  }
  ['<='](other) {
    return dart.notNull(this[_dx]) <= dart.notNull(other[_dx]) && dart.notNull(this[_dy]) <= dart.notNull(other[_dy]);
  }
  ['>'](other) {
    return dart.notNull(this[_dx]) > dart.notNull(other[_dx]) && dart.notNull(this[_dy]) > dart.notNull(other[_dy]);
  }
  ['>='](other) {
    return dart.notNull(this[_dx]) > dart.notNull(other[_dx]) && dart.notNull(this[_dy]) >= dart.notNull(other[_dy]);
  }
  _equals(other) {
    if (!ui.OffsetBase.is(other)) {
      return false;
    }
    let typedOther = ui.OffsetBase._check(other);
    return this[_dx] == typedOther[_dx] && this[_dy] == typedOther[_dy];
  }
  get hashCode() {
    return ui.hashValues(this[_dx], this[_dy]);
  }
  toString() {
    let t98, t98$;
    return dart.str(this[$runtimeType]) + "(" + dart.str((t98 = this[_dx], t98 == null ? null : t98[$toStringAsFixed](1))) + ", " + dart.str((t98$ = this[_dy], t98$ == null ? null : t98$[$toStringAsFixed](1))) + ")";
  }
};
(ui.OffsetBase.new = function(_dx, _dy) {
  this[_dx$] = _dx;
  this[_dy$] = _dy;
  ;
}).prototype = ui.OffsetBase.prototype;
;
;
dart.setGetterSignature(ui.OffsetBase, () => ({
  __proto__: dart.getGetters(ui.OffsetBase.__proto__),
  isInfinite: core.bool,
  isFinite: core.bool
}));
dart.setLibraryUri(ui.OffsetBase, "dart:ui");
;
dart.defineExtensionMethods(ui.OffsetBase, ['_equals', 'toString']);
dart.defineExtensionAccessors(ui.OffsetBase, ['hashCode']);
let C316;
let C317;
ui.Offset = class Offset extends ui.OffsetBase {
  static fromDirection(direction, distance) {
    if (distance === void 0) distance = 1;
    return new ui.Offset.new(dart.notNull(distance) * math.cos(direction), dart.notNull(distance) * math.sin(direction));
  }
  get dx() {
    return this[_dx];
  }
  get dy() {
    return this[_dy];
  }
  get distance() {
    return math.sqrt(dart.notNull(this.dx) * dart.notNull(this.dx) + dart.notNull(this.dy) * dart.notNull(this.dy));
  }
  get distanceSquared() {
    return dart.notNull(this.dx) * dart.notNull(this.dx) + dart.notNull(this.dy) * dart.notNull(this.dy);
  }
  get direction() {
    return math.atan2(this.dy, this.dx);
  }
  scale(scaleX, scaleY) {
    return new ui.Offset.new(dart.notNull(this.dx) * dart.notNull(scaleX), dart.notNull(this.dy) * dart.notNull(scaleY));
  }
  translate(translateX, translateY) {
    return new ui.Offset.new(dart.notNull(this.dx) + dart.notNull(translateX), dart.notNull(this.dy) + dart.notNull(translateY));
  }
  _negate() {
    return new ui.Offset.new(-dart.notNull(this.dx), -dart.notNull(this.dy));
  }
  ['-'](other) {
    return new ui.Offset.new(dart.notNull(this.dx) - dart.notNull(other.dx), dart.notNull(this.dy) - dart.notNull(other.dy));
  }
  ['+'](other) {
    return new ui.Offset.new(dart.notNull(this.dx) + dart.notNull(other.dx), dart.notNull(this.dy) + dart.notNull(other.dy));
  }
  ['*'](operand) {
    return new ui.Offset.new(dart.notNull(this.dx) * dart.notNull(operand), dart.notNull(this.dy) * dart.notNull(operand));
  }
  ['/'](operand) {
    return new ui.Offset.new(dart.notNull(this.dx) / dart.notNull(operand), dart.notNull(this.dy) / dart.notNull(operand));
  }
  ['~/'](operand) {
    return new ui.Offset.new((dart.notNull(this.dx) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.dy) / dart.notNull(operand))[$truncate]()[$toDouble]());
  }
  ['%'](operand) {
    return new ui.Offset.new(this.dx[$modulo](operand), this.dy[$modulo](operand));
  }
  ['&'](other) {
    return new ui.Rect.fromLTWH(this.dx, this.dy, other.width, other.height);
  }
  static lerp(a, b, t) {
    if (!(t != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart", 323, 12, "t != null");
    if (a == null && b == null) {
      return null;
    }
    if (a == null) {
      return b['*'](t);
    }
    if (b == null) {
      return a['*'](1.0 - dart.notNull(t));
    }
    return new ui.Offset.new(ui.lerpDouble(a.dx, b.dx, t), ui.lerpDouble(a.dy, b.dy, t));
  }
  _equals(other) {
    if (!ui.Offset.is(other)) {
      return false;
    }
    let typedOther = ui.Offset._check(other);
    return this.dx == typedOther.dx && this.dy == typedOther.dy;
  }
  get hashCode() {
    return ui.hashValues(this.dx, this.dy);
  }
  toString() {
    let t98, t98$;
    return "Offset(" + dart.str((t98 = this.dx, t98 == null ? null : t98[$toStringAsFixed](1))) + ", " + dart.str((t98$ = this.dy, t98$ == null ? null : t98$[$toStringAsFixed](1))) + ")";
  }
};
(ui.Offset.new = function(dx, dy) {
  ui.Offset.__proto__.new.call(this, dx, dy);
  ;
}).prototype = ui.Offset.prototype;
;
;
dart.setGetterSignature(ui.Offset, () => ({
  __proto__: dart.getGetters(ui.Offset.__proto__),
  dx: core.double,
  dy: core.double,
  distance: core.double,
  distanceSquared: core.double,
  direction: core.double
}));
dart.setLibraryUri(ui.Offset, "dart:ui");
dart.defineExtensionMethods(ui.Offset, ['_equals', 'toString']);
dart.defineExtensionAccessors(ui.Offset, ['hashCode']);
dart.defineLazy(ui.Offset, {
  /*ui.Offset.zero*/get zero() {
    return C316 || CT.C316;
  },
  /*ui.Offset.infinite*/get infinite() {
    return C317 || CT.C317;
  }
});
let C318;
let C319;
ui.Size = class Size extends ui.OffsetBase {
  get width() {
    return this[_dx];
  }
  get height() {
    return this[_dy];
  }
  get aspectRatio() {
    if (this.height !== 0.0) {
      return dart.notNull(this.width) / dart.notNull(this.height);
    }
    if (dart.notNull(this.width) > 0.0) {
      return 1 / 0;
    }
    if (dart.notNull(this.width) < 0.0) {
      return -1 / 0;
    }
    return 0.0;
  }
  get isEmpty() {
    return dart.notNull(this.width) <= 0.0 || dart.notNull(this.height) <= 0.0;
  }
  ['-'](other) {
    if (ui.Size.is(other)) {
      return new ui.Offset.new(dart.notNull(this.width) - dart.notNull(other.width), dart.notNull(this.height) - dart.notNull(other.height));
    }
    if (ui.Offset.is(other)) {
      return new ui.Size.new(dart.notNull(this.width) - dart.notNull(other.dx), dart.notNull(this.height) - dart.notNull(other.dy));
    }
    dart.throw(new core.ArgumentError.new(other));
  }
  ['+'](other) {
    return new ui.Size.new(dart.notNull(this.width) + dart.notNull(other.dx), dart.notNull(this.height) + dart.notNull(other.dy));
  }
  ['*'](operand) {
    return new ui.Size.new(dart.notNull(this.width) * dart.notNull(operand), dart.notNull(this.height) * dart.notNull(operand));
  }
  ['/'](operand) {
    return new ui.Size.new(dart.notNull(this.width) / dart.notNull(operand), dart.notNull(this.height) / dart.notNull(operand));
  }
  ['~/'](operand) {
    return new ui.Size.new((dart.notNull(this.width) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.height) / dart.notNull(operand))[$truncate]()[$toDouble]());
  }
  ['%'](operand) {
    return new ui.Size.new(this.width[$modulo](operand), this.height[$modulo](operand));
  }
  get shortestSide() {
    return math.min(core.double, this.width[$abs](), this.height[$abs]());
  }
  get longestSide() {
    return math.max(core.double, this.width[$abs](), this.height[$abs]());
  }
  topLeft(origin) {
    return origin;
  }
  topCenter(origin) {
    return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, origin.dy);
  }
  topRight(origin) {
    return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), origin.dy);
  }
  centerLeft(origin) {
    return new ui.Offset.new(origin.dx, dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
  }
  center(origin) {
    return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
  }
  centerRight(origin) {
    return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
  }
  bottomLeft(origin) {
    return new ui.Offset.new(origin.dx, dart.notNull(origin.dy) + dart.notNull(this.height));
  }
  bottomCenter(origin) {
    return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, dart.notNull(origin.dy) + dart.notNull(this.height));
  }
  bottomRight(origin) {
    return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), dart.notNull(origin.dy) + dart.notNull(this.height));
  }
  contains(offset) {
    return dart.notNull(offset.dx) >= 0.0 && dart.notNull(offset.dx) < dart.notNull(this.width) && dart.notNull(offset.dy) >= 0.0 && dart.notNull(offset.dy) < dart.notNull(this.height);
  }
  get flipped() {
    return new ui.Size.new(this.height, this.width);
  }
  static lerp(a, b, t) {
    if (!(t != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart", 608, 12, "t != null");
    if (a == null && b == null) {
      return null;
    }
    if (a == null) {
      return b['*'](t);
    }
    if (b == null) {
      return a['*'](1.0 - dart.notNull(t));
    }
    return new ui.Size.new(ui.lerpDouble(a.width, b.width, t), ui.lerpDouble(a.height, b.height, t));
  }
  _equals(other) {
    if (!ui.Size.is(other)) {
      return false;
    }
    let typedOther = ui.Size._check(other);
    return this[_dx] == typedOther[_dx] && this[_dy] == typedOther[_dy];
  }
  get hashCode() {
    return ui.hashValues(this[_dx], this[_dy]);
  }
  toString() {
    let t98, t98$;
    return "Size(" + dart.str((t98 = this.width, t98 == null ? null : t98[$toStringAsFixed](1))) + ", " + dart.str((t98$ = this.height, t98$ == null ? null : t98$[$toStringAsFixed](1))) + ")";
  }
};
(ui.Size.new = function(width, height) {
  ui.Size.__proto__.new.call(this, width, height);
  ;
}).prototype = ui.Size.prototype;
(ui.Size.copy = function(source) {
  ui.Size.__proto__.new.call(this, source.width, source.height);
  ;
}).prototype = ui.Size.prototype;
(ui.Size.square = function(dimension) {
  ui.Size.__proto__.new.call(this, dimension, dimension);
  ;
}).prototype = ui.Size.prototype;
(ui.Size.fromWidth = function(width) {
  ui.Size.__proto__.new.call(this, width, 1 / 0);
  ;
}).prototype = ui.Size.prototype;
(ui.Size.fromHeight = function(height) {
  ui.Size.__proto__.new.call(this, 1 / 0, height);
  ;
}).prototype = ui.Size.prototype;
(ui.Size.fromRadius = function(radius) {
  ui.Size.__proto__.new.call(this, dart.notNull(radius) * 2.0, dart.notNull(radius) * 2.0);
  ;
}).prototype = ui.Size.prototype;
;
;
dart.setGetterSignature(ui.Size, () => ({
  __proto__: dart.getGetters(ui.Size.__proto__),
  width: core.double,
  height: core.double,
  aspectRatio: core.double,
  isEmpty: core.bool,
  shortestSide: core.double,
  longestSide: core.double,
  flipped: ui.Size
}));
dart.setLibraryUri(ui.Size, "dart:ui");
dart.defineExtensionMethods(ui.Size, ['_equals', 'toString']);
dart.defineExtensionAccessors(ui.Size, ['hashCode']);
dart.defineLazy(ui.Size, {
  /*ui.Size.zero*/get zero() {
    return C318 || CT.C318;
  },
  /*ui.Size.infinite*/get infinite() {
    return C319 || CT.C319;
  }
});
const left$1 = dart.privateName(ui, "Rect.left");
const top$1 = dart.privateName(ui, "Rect.top");
const right$ = dart.privateName(ui, "Rect.right");
const bottom$ = dart.privateName(ui, "Rect.bottom");
let C320;
let C321;
ui.Rect = class Rect extends core.Object {
  get left() {
    return this[left$1];
  }
  set left(value) {
    super.left = value;
  }
  get top() {
    return this[top$1];
  }
  set top(value) {
    super.top = value;
  }
  get right() {
    return this[right$];
  }
  set right(value) {
    super.right = value;
  }
  get bottom() {
    return this[bottom$];
  }
  set bottom(value) {
    super.bottom = value;
  }
  get width() {
    return dart.notNull(this.right) - dart.notNull(this.left);
  }
  get height() {
    return dart.notNull(this.bottom) - dart.notNull(this.top);
  }
  get size() {
    return new ui.Size.new(this.width, this.height);
  }
  get hasNaN() {
    return this.left[$isNaN] || this.top[$isNaN] || this.right[$isNaN] || this.bottom[$isNaN];
  }
  get isInfinite() {
    return dart.notNull(this.left) >= 1 / 0 || dart.notNull(this.top) >= 1 / 0 || dart.notNull(this.right) >= 1 / 0 || dart.notNull(this.bottom) >= 1 / 0;
  }
  get isFinite() {
    return this.left[$isFinite] && this.top[$isFinite] && this.right[$isFinite] && this.bottom[$isFinite];
  }
  get isEmpty() {
    return dart.notNull(this.left) >= dart.notNull(this.right) || dart.notNull(this.top) >= dart.notNull(this.bottom);
  }
  shift(offset) {
    return new ui.Rect.fromLTRB(dart.notNull(this.left) + dart.notNull(offset.dx), dart.notNull(this.top) + dart.notNull(offset.dy), dart.notNull(this.right) + dart.notNull(offset.dx), dart.notNull(this.bottom) + dart.notNull(offset.dy));
  }
  translate(translateX, translateY) {
    return new ui.Rect.fromLTRB(dart.notNull(this.left) + dart.notNull(translateX), dart.notNull(this.top) + dart.notNull(translateY), dart.notNull(this.right) + dart.notNull(translateX), dart.notNull(this.bottom) + dart.notNull(translateY));
  }
  inflate(delta) {
    return new ui.Rect.fromLTRB(dart.notNull(this.left) - dart.notNull(delta), dart.notNull(this.top) - dart.notNull(delta), dart.notNull(this.right) + dart.notNull(delta), dart.notNull(this.bottom) + dart.notNull(delta));
  }
  deflate(delta) {
    return this.inflate(-dart.notNull(delta));
  }
  intersect(other) {
    return new ui.Rect.fromLTRB(math.max(core.double, this.left, other.left), math.max(core.double, this.top, other.top), math.min(core.double, this.right, other.right), math.min(core.double, this.bottom, other.bottom));
  }
  expandToInclude(other) {
    return new ui.Rect.fromLTRB(math.min(core.double, this.left, other.left), math.min(core.double, this.top, other.top), math.max(core.double, this.right, other.right), math.max(core.double, this.bottom, other.bottom));
  }
  overlaps(other) {
    if (dart.notNull(this.right) <= dart.notNull(other.left) || dart.notNull(other.right) <= dart.notNull(this.left)) {
      return false;
    }
    if (dart.notNull(this.bottom) <= dart.notNull(other.top) || dart.notNull(other.bottom) <= dart.notNull(this.top)) {
      return false;
    }
    return true;
  }
  get shortestSide() {
    return math.min(core.double, this.width[$abs](), this.height[$abs]());
  }
  get longestSide() {
    return math.max(core.double, this.width[$abs](), this.height[$abs]());
  }
  get topLeft() {
    return new ui.Offset.new(this.left, this.top);
  }
  get topCenter() {
    return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, this.top);
  }
  get topRight() {
    return new ui.Offset.new(this.right, this.top);
  }
  get centerLeft() {
    return new ui.Offset.new(this.left, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
  }
  get center() {
    return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
  }
  get centerRight() {
    return new ui.Offset.new(this.right, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
  }
  get bottomLeft() {
    return new ui.Offset.new(this.left, this.bottom);
  }
  get bottomCenter() {
    return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, this.bottom);
  }
  get bottomRight() {
    return new ui.Offset.new(this.right, this.bottom);
  }
  contains(offset) {
    return dart.notNull(offset.dx) >= dart.notNull(this.left) && dart.notNull(offset.dx) < dart.notNull(this.right) && dart.notNull(offset.dy) >= dart.notNull(this.top) && dart.notNull(offset.dy) < dart.notNull(this.bottom);
  }
  static lerp(a, b, t) {
    if (!(t != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart", 893, 12, "t != null");
    if (a == null && b == null) {
      return null;
    }
    if (a == null) return new ui.Rect.fromLTRB(dart.notNull(b.left) * dart.notNull(t), dart.notNull(b.top) * dart.notNull(t), dart.notNull(b.right) * dart.notNull(t), dart.notNull(b.bottom) * dart.notNull(t));
    if (b == null) {
      let k = 1.0 - dart.notNull(t);
      return new ui.Rect.fromLTRB(dart.notNull(a.left) * k, dart.notNull(a.top) * k, dart.notNull(a.right) * k, dart.notNull(a.bottom) * k);
    }
    return new ui.Rect.fromLTRB(ui.lerpDouble(a.left, b.left, t), ui.lerpDouble(a.top, b.top, t), ui.lerpDouble(a.right, b.right, t), ui.lerpDouble(a.bottom, b.bottom, t));
  }
  _equals(other) {
    if (this === other) {
      return true;
    }
    if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) {
      return false;
    }
    let typedOther = ui.Rect._check(other);
    return this.left == typedOther.left && this.top == typedOther.top && this.right == typedOther.right && this.bottom == typedOther.bottom;
  }
  get hashCode() {
    return ui.hashValues(this.left, this.top, this.right, this.bottom);
  }
  toString() {
    return "Rect.fromLTRB(" + this.left[$toStringAsFixed](1) + ", " + this.top[$toStringAsFixed](1) + ", " + this.right[$toStringAsFixed](1) + ", " + this.bottom[$toStringAsFixed](1) + ")";
  }
};
(ui.Rect.fromLTRB = function(left, top, right, bottom) {
  this[left$1] = left;
  this[top$1] = top;
  this[right$] = right;
  this[bottom$] = bottom;
  if (!(left != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart", 653, 16, "left != null");
  if (!(top != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart", 654, 16, "top != null");
  if (!(right != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart", 655, 16, "right != null");
  if (!(bottom != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart", 656, 16, "bottom != null");
  ;
}).prototype = ui.Rect.prototype;
(ui.Rect.fromLTWH = function(left, top, width, height) {
  ui.Rect.fromLTRB.call(this, left, top, dart.notNull(left) + dart.notNull(width), dart.notNull(top) + dart.notNull(height));
}).prototype = ui.Rect.prototype;
(ui.Rect.fromCircle = function(opts) {
  let center = opts && 'center' in opts ? opts.center : null;
  let radius = opts && 'radius' in opts ? opts.radius : null;
  ui.Rect.fromCenter.call(this, {center: center, width: dart.notNull(radius) * 2, height: dart.notNull(radius) * 2});
}).prototype = ui.Rect.prototype;
(ui.Rect.fromCenter = function(opts) {
  let center = opts && 'center' in opts ? opts.center : null;
  let width = opts && 'width' in opts ? opts.width : null;
  let height = opts && 'height' in opts ? opts.height : null;
  ui.Rect.fromLTRB.call(this, dart.notNull(center.dx) - dart.notNull(width) / 2, dart.notNull(center.dy) - dart.notNull(height) / 2, dart.notNull(center.dx) + dart.notNull(width) / 2, dart.notNull(center.dy) + dart.notNull(height) / 2);
}).prototype = ui.Rect.prototype;
(ui.Rect.fromPoints = function(a, b) {
  ui.Rect.fromLTRB.call(this, math.min(core.double, a.dx, b.dx), math.min(core.double, a.dy, b.dy), math.max(core.double, a.dx, b.dx), math.max(core.double, a.dy, b.dy));
}).prototype = ui.Rect.prototype;
;
;
dart.setGetterSignature(ui.Rect, () => ({
  __proto__: dart.getGetters(ui.Rect.__proto__),
  width: core.double,
  height: core.double,
  size: ui.Size,
  hasNaN: core.bool,
  isInfinite: core.bool,
  isFinite: core.bool,
  isEmpty: core.bool,
  shortestSide: core.double,
  longestSide: core.double,
  topLeft: ui.Offset,
  topCenter: ui.Offset,
  topRight: ui.Offset,
  centerLeft: ui.Offset,
  center: ui.Offset,
  centerRight: ui.Offset,
  bottomLeft: ui.Offset,
  bottomCenter: ui.Offset,
  bottomRight: ui.Offset
}));
dart.setLibraryUri(ui.Rect, "dart:ui");
;
dart.defineExtensionMethods(ui.Rect, ['_equals', 'toString']);
dart.defineExtensionAccessors(ui.Rect, ['hashCode']);
dart.defineLazy(ui.Rect, {
  /*ui.Rect.zero*/get zero() {
    return C320 || CT.C320;
  },
  /*ui.Rect._giantScalar*/get _giantScalar() {
    return 1000000000;
  },
  /*ui.Rect.largest*/get largest() {
    return C321 || CT.C321;
  }
});
const x$3 = dart.privateName(ui, "Radius.x");
const y$3 = dart.privateName(ui, "Radius.y");
let C322;
ui.Radius = class Radius extends core.Object {
  get x() {
    return this[x$3];
  }
  set x(value) {
    super.x = value;
  }
  get y() {
    return this[y$3];
  }
  set y(value) {
    super.y = value;
  }
  _negate() {
    return new ui.Radius.elliptical(-dart.notNull(this.x), -dart.notNull(this.y));
  }
  ['-'](other) {
    return new ui.Radius.elliptical(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
  }
  ['+'](other) {
    return new ui.Radius.elliptical(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
  }
  ['*'](operand) {
    return new ui.Radius.elliptical(dart.notNull(this.x) * dart.notNull(operand), dart.notNull(this.y) * dart.notNull(operand));
  }
  ['/'](operand) {
    return new ui.Radius.elliptical(dart.notNull(this.x) / dart.notNull(operand), dart.notNull(this.y) / dart.notNull(operand));
  }
  ['~/'](operand) {
    return new ui.Radius.elliptical((dart.notNull(this.x) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(operand))[$truncate]()[$toDouble]());
  }
  ['%'](operand) {
    return new ui.Radius.elliptical(this.x[$modulo](operand), this.y[$modulo](operand));
  }
  static lerp(a, b, t) {
    if (!(t != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart", 1027, 12, "t != null");
    if (a == null && b == null) {
      return null;
    }
    if (a == null) {
      return new ui.Radius.elliptical(dart.notNull(b.x) * dart.notNull(t), dart.notNull(b.y) * dart.notNull(t));
    }
    if (b == null) {
      let k = 1.0 - dart.notNull(t);
      return new ui.Radius.elliptical(dart.notNull(a.x) * k, dart.notNull(a.y) * k);
    }
    return new ui.Radius.elliptical(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));
  }
  _equals(other) {
    if (this === other) {
      return true;
    }
    if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) {
      return false;
    }
    let typedOther = ui.Radius._check(other);
    return typedOther.x == this.x && typedOther.y == this.y;
  }
  get hashCode() {
    return ui.hashValues(this.x, this.y);
  }
  toString() {
    return this.x == this.y ? "Radius.circular(" + this.x[$toStringAsFixed](1) + ")" : "Radius.elliptical(" + this.x[$toStringAsFixed](1) + ", " + this.y[$toStringAsFixed](1) + ")";
  }
};
(ui.Radius.circular = function(radius) {
  ui.Radius.elliptical.call(this, radius, radius);
}).prototype = ui.Radius.prototype;
(ui.Radius.elliptical = function(x, y) {
  this[x$3] = x;
  this[y$3] = y;
  ;
}).prototype = ui.Radius.prototype;
;
;
dart.setLibraryUri(ui.Radius, "dart:ui");
;
dart.defineExtensionMethods(ui.Radius, ['_equals', 'toString']);
dart.defineExtensionAccessors(ui.Radius, ['hashCode']);
dart.defineLazy(ui.Radius, {
  /*ui.Radius.zero*/get zero() {
    return C322 || CT.C322;
  }
});
ui._HashEnd = class _HashEnd extends core.Object {};
(ui._HashEnd.new = function() {
  ;
}).prototype = ui._HashEnd.prototype;
;
dart.setLibraryUri(ui._HashEnd, "dart:ui");
const value$5 = dart.privateName(ui, "Color.value");
ui.Color = class Color extends core.Object {
  get value() {
    return this[value$5];
  }
  set value(value) {
    super.value = value;
  }
  get alpha() {
    return (4278190080 & dart.notNull(this.value)) >>> 24;
  }
  get opacity() {
    return dart.notNull(this.alpha) / 255;
  }
  get red() {
    return (16711680 & dart.notNull(this.value)) >> 16;
  }
  get green() {
    return (65280 & dart.notNull(this.value)) >> 8;
  }
  get blue() {
    return (255 & dart.notNull(this.value)) >> 0;
  }
  withAlpha(a) {
    return new ui.Color.fromARGB(a, this.red, this.green, this.blue);
  }
  withOpacity(opacity) {
    if (!(dart.notNull(opacity) >= 0.0 && dart.notNull(opacity) <= 1.0)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/painting.dart", 188, 12, "opacity >= 0.0 && opacity <= 1.0");
    return this.withAlpha((255.0 * dart.notNull(opacity))[$round]());
  }
  withRed(r) {
    return new ui.Color.fromARGB(this.alpha, r, this.green, this.blue);
  }
  withGreen(g) {
    return new ui.Color.fromARGB(this.alpha, this.red, g, this.blue);
  }
  withBlue(b) {
    return new ui.Color.fromARGB(this.alpha, this.red, this.green, b);
  }
  static _linearizeColorComponent(component) {
    if (dart.notNull(component) <= 0.03928) return dart.notNull(component) / 12.92;
    return math.pow((dart.notNull(component) + 0.055) / 1.055, 2.4);
  }
  computeLuminance() {
    let R = ui.Color._linearizeColorComponent(dart.notNull(this.red) / 255);
    let G = ui.Color._linearizeColorComponent(dart.notNull(this.green) / 255);
    let B = ui.Color._linearizeColorComponent(dart.notNull(this.blue) / 255);
    return 0.2126 * dart.notNull(R) + 0.7152 * dart.notNull(G) + 0.0722 * dart.notNull(B);
  }
  static lerp(a, b, t) {
    if (!(t != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/painting.dart", 260, 12, "t != null");
    if (a == null && b == null) return null;
    if (a == null) return ui._scaleAlpha(b, t);
    if (b == null) return ui._scaleAlpha(a, 1.0 - dart.notNull(t));
    return new ui.Color.fromARGB(dart.asInt(ui.lerpDouble(a.alpha, b.alpha, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.red, b.red, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.green, b.green, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.blue, b.blue, t)[$toInt]()[$clamp](0, 255)));
  }
  static alphaBlend(foreground, background) {
    let alpha = foreground.alpha;
    if (alpha === 0) {
      return background;
    }
    let invAlpha = 255 - dart.notNull(alpha);
    let backAlpha = background.alpha;
    if (backAlpha === 255) {
      return new ui.Color.fromARGB(255, ((dart.notNull(alpha) * dart.notNull(foreground.red) + invAlpha * dart.notNull(background.red)) / 255)[$truncate](), ((dart.notNull(alpha) * dart.notNull(foreground.green) + invAlpha * dart.notNull(background.green)) / 255)[$truncate](), ((dart.notNull(alpha) * dart.notNull(foreground.blue) + invAlpha * dart.notNull(background.blue)) / 255)[$truncate]());
    } else {
      backAlpha = (dart.notNull(backAlpha) * invAlpha / 255)[$truncate]();
      let outAlpha = dart.notNull(alpha) + dart.notNull(backAlpha);
      if (!(outAlpha !== 0)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/painting.dart", 300, 14, "outAlpha != 0x00");
      return new ui.Color.fromARGB(outAlpha, ((dart.notNull(foreground.red) * dart.notNull(alpha) + dart.notNull(background.red) * dart.notNull(backAlpha)) / outAlpha)[$truncate](), ((dart.notNull(foreground.green) * dart.notNull(alpha) + dart.notNull(background.green) * dart.notNull(backAlpha)) / outAlpha)[$truncate](), ((dart.notNull(foreground.blue) * dart.notNull(alpha) + dart.notNull(background.blue) * dart.notNull(backAlpha)) / outAlpha)[$truncate]());
    }
  }
  static getAlphaFromOpacity(opacity) {
    if (!(opacity != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/painting.dart", 314, 12, "opacity != null");
    return (opacity[$clamp](0.0, 1.0) * 255)[$round]();
  }
  _equals(other) {
    if (this === other) return true;
    if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
    let typedOther = ui.Color._check(other);
    return this.value == typedOther.value;
  }
  get hashCode() {
    return dart.hashCode(this.value);
  }
  toString() {
    return "Color(0x" + this.value[$toRadixString](16)[$padLeft](8, "0") + ")";
  }
};
(ui.Color.new = function(value) {
  this[value$5] = (dart.notNull(value) & 4294967295) >>> 0;
  ;
}).prototype = ui.Color.prototype;
(ui.Color.fromARGB = function(a, r, g, b) {
  this[value$5] = (((dart.notNull(a) & 255) << 24 | (dart.notNull(r) & 255) << 16 | (dart.notNull(g) & 255) << 8 | (dart.notNull(b) & 255) << 0) & 4294967295) >>> 0;
  ;
}).prototype = ui.Color.prototype;
(ui.Color.fromRGBO = function(r, g, b, opacity) {
  this[value$5] = ((((dart.notNull(opacity) * 255 / 1)[$truncate]() & 255) << 24 | (dart.notNull(r) & 255) << 16 | (dart.notNull(g) & 255) << 8 | (dart.notNull(b) & 255) << 0) & 4294967295) >>> 0;
  ;
}).prototype = ui.Color.prototype;
;
;
dart.setGetterSignature(ui.Color, () => ({
  __proto__: dart.getGetters(ui.Color.__proto__),
  alpha: core.int,
  opacity: core.double,
  red: core.int,
  green: core.int,
  blue: core.int
}));
dart.setLibraryUri(ui.Color, "dart:ui");
;
dart.defineExtensionMethods(ui.Color, ['_equals', 'toString']);
dart.defineExtensionAccessors(ui.Color, ['hashCode']);
let C323;
let C324;
let C325;
let C326;
let C327;
let C328;
let C329;
let C330;
let C331;
let C332;
let C333;
let C334;
let C335;
let C336;
let C337;
let C338;
let C339;
let C340;
let C341;
let C342;
let C343;
let C344;
let C345;
let C346;
let C347;
let C348;
let C349;
let C350;
let C351;
let C352;
ui.BlendMode = class BlendMode extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.BlendMode.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.BlendMode.prototype;
;
dart.setLibraryUri(ui.BlendMode, "dart:ui");
;
dart.defineExtensionMethods(ui.BlendMode, ['toString']);
ui.BlendMode.clear = C323 || CT.C323;
ui.BlendMode.src = C324 || CT.C324;
ui.BlendMode.dst = C325 || CT.C325;
ui.BlendMode.srcOver = C326 || CT.C326;
ui.BlendMode.dstOver = C327 || CT.C327;
ui.BlendMode.srcIn = C328 || CT.C328;
ui.BlendMode.dstIn = C329 || CT.C329;
ui.BlendMode.srcOut = C330 || CT.C330;
ui.BlendMode.dstOut = C331 || CT.C331;
ui.BlendMode.srcATop = C332 || CT.C332;
ui.BlendMode.dstATop = C333 || CT.C333;
ui.BlendMode.xor = C334 || CT.C334;
ui.BlendMode.plus = C335 || CT.C335;
ui.BlendMode.modulate = C336 || CT.C336;
ui.BlendMode.screen = C337 || CT.C337;
ui.BlendMode.overlay = C338 || CT.C338;
ui.BlendMode.darken = C339 || CT.C339;
ui.BlendMode.lighten = C340 || CT.C340;
ui.BlendMode.colorDodge = C341 || CT.C341;
ui.BlendMode.colorBurn = C342 || CT.C342;
ui.BlendMode.hardLight = C343 || CT.C343;
ui.BlendMode.softLight = C344 || CT.C344;
ui.BlendMode.difference = C345 || CT.C345;
ui.BlendMode.exclusion = C346 || CT.C346;
ui.BlendMode.multiply = C347 || CT.C347;
ui.BlendMode.hue = C348 || CT.C348;
ui.BlendMode.saturation = C349 || CT.C349;
ui.BlendMode.color = C350 || CT.C350;
ui.BlendMode.luminosity = C351 || CT.C351;
ui.BlendMode.values = C352 || CT.C352;
let C353;
let C354;
let C355;
let C356;
let C357;
ui.FilterQuality = class FilterQuality extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.FilterQuality.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.FilterQuality.prototype;
;
dart.setLibraryUri(ui.FilterQuality, "dart:ui");
;
dart.defineExtensionMethods(ui.FilterQuality, ['toString']);
ui.FilterQuality.none = C353 || CT.C353;
ui.FilterQuality.low = C354 || CT.C354;
ui.FilterQuality.medium = C355 || CT.C355;
ui.FilterQuality.high = C356 || CT.C356;
ui.FilterQuality.values = C357 || CT.C357;
let C358;
let C359;
let C360;
let C361;
ui.StrokeCap = class StrokeCap extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.StrokeCap.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.StrokeCap.prototype;
;
dart.setLibraryUri(ui.StrokeCap, "dart:ui");
;
dart.defineExtensionMethods(ui.StrokeCap, ['toString']);
ui.StrokeCap.butt = C358 || CT.C358;
ui.StrokeCap.round = C359 || CT.C359;
ui.StrokeCap.square = C360 || CT.C360;
ui.StrokeCap.values = C361 || CT.C361;
let C362;
let C363;
let C364;
let C365;
ui.StrokeJoin = class StrokeJoin extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.StrokeJoin.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.StrokeJoin.prototype;
;
dart.setLibraryUri(ui.StrokeJoin, "dart:ui");
;
dart.defineExtensionMethods(ui.StrokeJoin, ['toString']);
ui.StrokeJoin.miter = C362 || CT.C362;
ui.StrokeJoin.round = C363 || CT.C363;
ui.StrokeJoin.bevel = C364 || CT.C364;
ui.StrokeJoin.values = C365 || CT.C365;
let C366;
let C367;
let C368;
ui.PaintingStyle = class PaintingStyle extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PaintingStyle.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PaintingStyle.prototype;
;
dart.setLibraryUri(ui.PaintingStyle, "dart:ui");
;
dart.defineExtensionMethods(ui.PaintingStyle, ['toString']);
ui.PaintingStyle.fill = C366 || CT.C366;
ui.PaintingStyle.stroke = C367 || CT.C367;
ui.PaintingStyle.values = C368 || CT.C368;
let C369;
let C370;
let C371;
let C372;
let C373;
ui.Clip = class Clip extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.Clip.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.Clip.prototype;
;
dart.setLibraryUri(ui.Clip, "dart:ui");
;
dart.defineExtensionMethods(ui.Clip, ['toString']);
ui.Clip.none = C369 || CT.C369;
ui.Clip.hardEdge = C370 || CT.C370;
ui.Clip.antiAlias = C371 || CT.C371;
ui.Clip.antiAliasWithSaveLayer = C372 || CT.C372;
ui.Clip.values = C373 || CT.C373;
let C374;
let C375;
let C376;
let C377;
ui.ImageByteFormat = class ImageByteFormat extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.ImageByteFormat.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.ImageByteFormat.prototype;
;
dart.setLibraryUri(ui.ImageByteFormat, "dart:ui");
;
dart.defineExtensionMethods(ui.ImageByteFormat, ['toString']);
ui.ImageByteFormat.rawRgba = C374 || CT.C374;
ui.ImageByteFormat.rawUnmodified = C375 || CT.C375;
ui.ImageByteFormat.png = C376 || CT.C376;
ui.ImageByteFormat.values = C377 || CT.C377;
let C378;
let C379;
let C380;
ui.PixelFormat = class PixelFormat extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PixelFormat.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PixelFormat.prototype;
;
dart.setLibraryUri(ui.PixelFormat, "dart:ui");
;
dart.defineExtensionMethods(ui.PixelFormat, ['toString']);
ui.PixelFormat.rgba8888 = C378 || CT.C378;
ui.PixelFormat.bgra8888 = C379 || CT.C379;
ui.PixelFormat.values = C380 || CT.C380;
ui._ImageInfo = class _ImageInfo extends core.Object {};
(ui._ImageInfo.new = function(width, height, format, rowBytes) {
  this.width = width;
  this.height = height;
  this.format = format;
  this.rowBytes = rowBytes;
  this.rowBytes == null ? this.rowBytes = dart.notNull(this.width) * 4 : null;
}).prototype = ui._ImageInfo.prototype;
;
dart.setLibraryUri(ui._ImageInfo, "dart:ui");
;
let C381;
let C382;
let C383;
let C384;
let C385;
ui.BlurStyle = class BlurStyle extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.BlurStyle.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.BlurStyle.prototype;
;
dart.setLibraryUri(ui.BlurStyle, "dart:ui");
;
dart.defineExtensionMethods(ui.BlurStyle, ['toString']);
ui.BlurStyle.normal = C381 || CT.C381;
ui.BlurStyle.solid = C382 || CT.C382;
ui.BlurStyle.outer = C383 || CT.C383;
ui.BlurStyle.inner = C384 || CT.C384;
ui.BlurStyle.values = C385 || CT.C385;
let C386;
let C387;
let C388;
let C389;
let C390;
let C391;
let C392;
let C393;
ui.PointerChange = class PointerChange extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PointerChange.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PointerChange.prototype;
;
dart.setLibraryUri(ui.PointerChange, "dart:ui");
;
dart.defineExtensionMethods(ui.PointerChange, ['toString']);
ui.PointerChange.cancel = C386 || CT.C386;
ui.PointerChange.add = C387 || CT.C387;
ui.PointerChange.remove = C388 || CT.C388;
ui.PointerChange.hover = C389 || CT.C389;
ui.PointerChange.down = C390 || CT.C390;
ui.PointerChange.move = C391 || CT.C391;
ui.PointerChange.up = C392 || CT.C392;
ui.PointerChange.values = C393 || CT.C393;
let C394;
let C395;
let C396;
let C397;
let C398;
let C399;
ui.PointerDeviceKind = class PointerDeviceKind extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PointerDeviceKind.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PointerDeviceKind.prototype;
;
dart.setLibraryUri(ui.PointerDeviceKind, "dart:ui");
;
dart.defineExtensionMethods(ui.PointerDeviceKind, ['toString']);
ui.PointerDeviceKind.touch = C394 || CT.C394;
ui.PointerDeviceKind.mouse = C395 || CT.C395;
ui.PointerDeviceKind.stylus = C396 || CT.C396;
ui.PointerDeviceKind.invertedStylus = C397 || CT.C397;
ui.PointerDeviceKind.unknown = C398 || CT.C398;
ui.PointerDeviceKind.values = C399 || CT.C399;
let C400;
let C401;
let C402;
let C403;
ui.PointerSignalKind = class PointerSignalKind extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PointerSignalKind.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PointerSignalKind.prototype;
;
dart.setLibraryUri(ui.PointerSignalKind, "dart:ui");
;
dart.defineExtensionMethods(ui.PointerSignalKind, ['toString']);
ui.PointerSignalKind.none = C400 || CT.C400;
ui.PointerSignalKind.scroll = C401 || CT.C401;
ui.PointerSignalKind.unknown = C402 || CT.C402;
ui.PointerSignalKind.values = C403 || CT.C403;
const timeStamp$ = dart.privateName(ui, "PointerData.timeStamp");
const change$ = dart.privateName(ui, "PointerData.change");
const kind$ = dart.privateName(ui, "PointerData.kind");
const signalKind$ = dart.privateName(ui, "PointerData.signalKind");
const device$ = dart.privateName(ui, "PointerData.device");
const pointerIdentifier$ = dart.privateName(ui, "PointerData.pointerIdentifier");
const physicalX$ = dart.privateName(ui, "PointerData.physicalX");
const physicalY$ = dart.privateName(ui, "PointerData.physicalY");
const physicalDeltaX$ = dart.privateName(ui, "PointerData.physicalDeltaX");
const physicalDeltaY$ = dart.privateName(ui, "PointerData.physicalDeltaY");
const buttons$ = dart.privateName(ui, "PointerData.buttons");
const obscured$ = dart.privateName(ui, "PointerData.obscured");
const synthesized$ = dart.privateName(ui, "PointerData.synthesized");
const pressure$ = dart.privateName(ui, "PointerData.pressure");
const pressureMin$ = dart.privateName(ui, "PointerData.pressureMin");
const pressureMax$ = dart.privateName(ui, "PointerData.pressureMax");
const distance$ = dart.privateName(ui, "PointerData.distance");
const distanceMax$ = dart.privateName(ui, "PointerData.distanceMax");
const size$0 = dart.privateName(ui, "PointerData.size");
const radiusMajor$ = dart.privateName(ui, "PointerData.radiusMajor");
const radiusMinor$ = dart.privateName(ui, "PointerData.radiusMinor");
const radiusMin$ = dart.privateName(ui, "PointerData.radiusMin");
const radiusMax$ = dart.privateName(ui, "PointerData.radiusMax");
const orientation$ = dart.privateName(ui, "PointerData.orientation");
const tilt$ = dart.privateName(ui, "PointerData.tilt");
const platformData$ = dart.privateName(ui, "PointerData.platformData");
const scrollDeltaX$ = dart.privateName(ui, "PointerData.scrollDeltaX");
const scrollDeltaY$ = dart.privateName(ui, "PointerData.scrollDeltaY");
ui.PointerData = class PointerData extends core.Object {
  get timeStamp() {
    return this[timeStamp$];
  }
  set timeStamp(value) {
    super.timeStamp = value;
  }
  get change() {
    return this[change$];
  }
  set change(value) {
    super.change = value;
  }
  get kind() {
    return this[kind$];
  }
  set kind(value) {
    super.kind = value;
  }
  get signalKind() {
    return this[signalKind$];
  }
  set signalKind(value) {
    super.signalKind = value;
  }
  get device() {
    return this[device$];
  }
  set device(value) {
    super.device = value;
  }
  get pointerIdentifier() {
    return this[pointerIdentifier$];
  }
  set pointerIdentifier(value) {
    super.pointerIdentifier = value;
  }
  get physicalX() {
    return this[physicalX$];
  }
  set physicalX(value) {
    super.physicalX = value;
  }
  get physicalY() {
    return this[physicalY$];
  }
  set physicalY(value) {
    super.physicalY = value;
  }
  get physicalDeltaX() {
    return this[physicalDeltaX$];
  }
  set physicalDeltaX(value) {
    super.physicalDeltaX = value;
  }
  get physicalDeltaY() {
    return this[physicalDeltaY$];
  }
  set physicalDeltaY(value) {
    super.physicalDeltaY = value;
  }
  get buttons() {
    return this[buttons$];
  }
  set buttons(value) {
    super.buttons = value;
  }
  get obscured() {
    return this[obscured$];
  }
  set obscured(value) {
    super.obscured = value;
  }
  get synthesized() {
    return this[synthesized$];
  }
  set synthesized(value) {
    super.synthesized = value;
  }
  get pressure() {
    return this[pressure$];
  }
  set pressure(value) {
    super.pressure = value;
  }
  get pressureMin() {
    return this[pressureMin$];
  }
  set pressureMin(value) {
    super.pressureMin = value;
  }
  get pressureMax() {
    return this[pressureMax$];
  }
  set pressureMax(value) {
    super.pressureMax = value;
  }
  get distance() {
    return this[distance$];
  }
  set distance(value) {
    super.distance = value;
  }
  get distanceMax() {
    return this[distanceMax$];
  }
  set distanceMax(value) {
    super.distanceMax = value;
  }
  get size() {
    return this[size$0];
  }
  set size(value) {
    super.size = value;
  }
  get radiusMajor() {
    return this[radiusMajor$];
  }
  set radiusMajor(value) {
    super.radiusMajor = value;
  }
  get radiusMinor() {
    return this[radiusMinor$];
  }
  set radiusMinor(value) {
    super.radiusMinor = value;
  }
  get radiusMin() {
    return this[radiusMin$];
  }
  set radiusMin(value) {
    super.radiusMin = value;
  }
  get radiusMax() {
    return this[radiusMax$];
  }
  set radiusMax(value) {
    super.radiusMax = value;
  }
  get orientation() {
    return this[orientation$];
  }
  set orientation(value) {
    super.orientation = value;
  }
  get tilt() {
    return this[tilt$];
  }
  set tilt(value) {
    super.tilt = value;
  }
  get platformData() {
    return this[platformData$];
  }
  set platformData(value) {
    super.platformData = value;
  }
  get scrollDeltaX() {
    return this[scrollDeltaX$];
  }
  set scrollDeltaX(value) {
    super.scrollDeltaX = value;
  }
  get scrollDeltaY() {
    return this[scrollDeltaY$];
  }
  set scrollDeltaY(value) {
    super.scrollDeltaY = value;
  }
  toString() {
    return dart.str(this[$runtimeType]) + "(x: " + dart.str(this.physicalX) + ", y: " + dart.str(this.physicalY) + ")";
  }
  toStringFull() {
    return dart.str(this[$runtimeType]) + "(" + "timeStamp: " + dart.str(this.timeStamp) + ", " + "change: " + dart.str(this.change) + ", " + "kind: " + dart.str(this.kind) + ", " + "signalKind: " + dart.str(this.signalKind) + ", " + "device: " + dart.str(this.device) + ", " + "pointerIdentifier: " + dart.str(this.pointerIdentifier) + ", " + "physicalX: " + dart.str(this.physicalX) + ", " + "physicalY: " + dart.str(this.physicalY) + ", " + "physicalDeltaX: " + dart.str(this.physicalDeltaX) + ", " + "physicalDeltaY: " + dart.str(this.physicalDeltaY) + ", " + "buttons: " + dart.str(this.buttons) + ", " + "synthesized: " + dart.str(this.synthesized) + ", " + "pressure: " + dart.str(this.pressure) + ", " + "pressureMin: " + dart.str(this.pressureMin) + ", " + "pressureMax: " + dart.str(this.pressureMax) + ", " + "distance: " + dart.str(this.distance) + ", " + "distanceMax: " + dart.str(this.distanceMax) + ", " + "size: " + dart.str(this.size) + ", " + "radiusMajor: " + dart.str(this.radiusMajor) + ", " + "radiusMinor: " + dart.str(this.radiusMinor) + ", " + "radiusMin: " + dart.str(this.radiusMin) + ", " + "radiusMax: " + dart.str(this.radiusMax) + ", " + "orientation: " + dart.str(this.orientation) + ", " + "tilt: " + dart.str(this.tilt) + ", " + "platformData: " + dart.str(this.platformData) + ", " + "scrollDeltaX: " + dart.str(this.scrollDeltaX) + ", " + "scrollDeltaY: " + dart.str(this.scrollDeltaY) + ")";
  }
};
(ui.PointerData.new = function(opts) {
  let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C268 || CT.C268;
  let change = opts && 'change' in opts ? opts.change : C386 || CT.C386;
  let kind = opts && 'kind' in opts ? opts.kind : C394 || CT.C394;
  let signalKind = opts && 'signalKind' in opts ? opts.signalKind : null;
  let device = opts && 'device' in opts ? opts.device : 0;
  let pointerIdentifier = opts && 'pointerIdentifier' in opts ? opts.pointerIdentifier : 0;
  let physicalX = opts && 'physicalX' in opts ? opts.physicalX : 0;
  let physicalY = opts && 'physicalY' in opts ? opts.physicalY : 0;
  let physicalDeltaX = opts && 'physicalDeltaX' in opts ? opts.physicalDeltaX : 0;
  let physicalDeltaY = opts && 'physicalDeltaY' in opts ? opts.physicalDeltaY : 0;
  let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
  let obscured = opts && 'obscured' in opts ? opts.obscured : false;
  let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
  let pressure = opts && 'pressure' in opts ? opts.pressure : 0;
  let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 0;
  let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 0;
  let distance = opts && 'distance' in opts ? opts.distance : 0;
  let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
  let size = opts && 'size' in opts ? opts.size : 0;
  let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
  let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
  let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
  let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
  let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
  let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
  let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
  let scrollDeltaX = opts && 'scrollDeltaX' in opts ? opts.scrollDeltaX : 0;
  let scrollDeltaY = opts && 'scrollDeltaY' in opts ? opts.scrollDeltaY : 0;
  this[timeStamp$] = timeStamp;
  this[change$] = change;
  this[kind$] = kind;
  this[signalKind$] = signalKind;
  this[device$] = device;
  this[pointerIdentifier$] = pointerIdentifier;
  this[physicalX$] = physicalX;
  this[physicalY$] = physicalY;
  this[physicalDeltaX$] = physicalDeltaX;
  this[physicalDeltaY$] = physicalDeltaY;
  this[buttons$] = buttons;
  this[obscured$] = obscured;
  this[synthesized$] = synthesized;
  this[pressure$] = pressure;
  this[pressureMin$] = pressureMin;
  this[pressureMax$] = pressureMax;
  this[distance$] = distance;
  this[distanceMax$] = distanceMax;
  this[size$0] = size;
  this[radiusMajor$] = radiusMajor;
  this[radiusMinor$] = radiusMinor;
  this[radiusMin$] = radiusMin;
  this[radiusMax$] = radiusMax;
  this[orientation$] = orientation;
  this[tilt$] = tilt;
  this[platformData$] = platformData;
  this[scrollDeltaX$] = scrollDeltaX;
  this[scrollDeltaY$] = scrollDeltaY;
  ;
}).prototype = ui.PointerData.prototype;
;
;
dart.setLibraryUri(ui.PointerData, "dart:ui");
;
dart.defineExtensionMethods(ui.PointerData, ['toString']);
let C404;
const data$0 = dart.privateName(ui, "PointerDataPacket.data");
ui.PointerDataPacket = class PointerDataPacket extends core.Object {
  get data() {
    return this[data$0];
  }
  set data(value) {
    super.data = value;
  }
};
(ui.PointerDataPacket.new = function(opts) {
  let data = opts && 'data' in opts ? opts.data : C404 || CT.C404;
  this[data$0] = data;
  ;
}).prototype = ui.PointerDataPacket.prototype;
;
dart.setLibraryUri(ui.PointerDataPacket, "dart:ui");
;
let C405;
let C406;
let C407;
ui.FontStyle = class FontStyle extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.FontStyle.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.FontStyle.prototype;
;
dart.setLibraryUri(ui.FontStyle, "dart:ui");
;
dart.defineExtensionMethods(ui.FontStyle, ['toString']);
ui.FontStyle.normal = C405 || CT.C405;
ui.FontStyle.italic = C406 || CT.C406;
ui.FontStyle.values = C407 || CT.C407;
let C408;
let C409;
let C410;
let C411;
let C412;
let C413;
let C414;
ui.PlaceholderAlignment = class PlaceholderAlignment extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.PlaceholderAlignment.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.PlaceholderAlignment.prototype;
;
dart.setLibraryUri(ui.PlaceholderAlignment, "dart:ui");
;
dart.defineExtensionMethods(ui.PlaceholderAlignment, ['toString']);
ui.PlaceholderAlignment.baseline = C408 || CT.C408;
ui.PlaceholderAlignment.aboveBaseline = C409 || CT.C409;
ui.PlaceholderAlignment.belowBaseline = C410 || CT.C410;
ui.PlaceholderAlignment.top = C411 || CT.C411;
ui.PlaceholderAlignment.bottom = C412 || CT.C412;
ui.PlaceholderAlignment.middle = C413 || CT.C413;
ui.PlaceholderAlignment.values = C414 || CT.C414;
let C415;
const index$ = dart.privateName(ui, "FontWeight.index");
let C416;
let C417;
let C418;
let C419;
let C420;
let C421;
let C422;
let C423;
let C424;
let C425;
ui.FontWeight = class FontWeight extends core.Object {
  get index() {
    return this[index$];
  }
  set index(value) {
    super.index = value;
  }
  static lerp(a, b, t) {
    let t98, t98$, t98$0, t98$1;
    if (!(t != null)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/text.dart", 134, 12, "t != null");
    return ui.FontWeight.values[$_get](dart.asInt(ui.lerpDouble((t98$ = (t98 = a, t98 == null ? null : t98.index), t98$ == null ? ui.FontWeight.normal.index : t98$), (t98$1 = (t98$0 = b, t98$0 == null ? null : t98$0.index), t98$1 == null ? ui.FontWeight.normal.index : t98$1), t)[$round]()[$clamp](0, 8)));
  }
  toString() {
    return (C415 || CT.C415)[$_get](this.index);
  }
};
(ui.FontWeight.__ = function(index) {
  this[index$] = index;
  ;
}).prototype = ui.FontWeight.prototype;
;
dart.setLibraryUri(ui.FontWeight, "dart:ui");
;
dart.defineExtensionMethods(ui.FontWeight, ['toString']);
dart.defineLazy(ui.FontWeight, {
  /*ui.FontWeight.w100*/get w100() {
    return C416 || CT.C416;
  },
  /*ui.FontWeight.w200*/get w200() {
    return C417 || CT.C417;
  },
  /*ui.FontWeight.w300*/get w300() {
    return C418 || CT.C418;
  },
  /*ui.FontWeight.w400*/get w400() {
    return C419 || CT.C419;
  },
  /*ui.FontWeight.w500*/get w500() {
    return C420 || CT.C420;
  },
  /*ui.FontWeight.w600*/get w600() {
    return C421 || CT.C421;
  },
  /*ui.FontWeight.w700*/get w700() {
    return C422 || CT.C422;
  },
  /*ui.FontWeight.w800*/get w800() {
    return C423 || CT.C423;
  },
  /*ui.FontWeight.w900*/get w900() {
    return C424 || CT.C424;
  },
  /*ui.FontWeight.normal*/get normal() {
    return C419 || CT.C419;
  },
  /*ui.FontWeight.bold*/get bold() {
    return C422 || CT.C422;
  },
  /*ui.FontWeight.values*/get values() {
    return C425 || CT.C425;
  }
});
let C426;
let C427;
let C428;
let C429;
let C430;
let C431;
let C432;
ui.TextAlign = class TextAlign extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.TextAlign.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.TextAlign.prototype;
;
dart.setLibraryUri(ui.TextAlign, "dart:ui");
;
dart.defineExtensionMethods(ui.TextAlign, ['toString']);
ui.TextAlign.left = C426 || CT.C426;
ui.TextAlign.right = C427 || CT.C427;
ui.TextAlign.center = C428 || CT.C428;
ui.TextAlign.justify = C429 || CT.C429;
ui.TextAlign.start = C430 || CT.C430;
ui.TextAlign.end = C431 || CT.C431;
ui.TextAlign.values = C432 || CT.C432;
let C433;
let C434;
let C435;
ui.TextBaseline = class TextBaseline extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.TextBaseline.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.TextBaseline.prototype;
;
dart.setLibraryUri(ui.TextBaseline, "dart:ui");
;
dart.defineExtensionMethods(ui.TextBaseline, ['toString']);
ui.TextBaseline.alphabetic = C433 || CT.C433;
ui.TextBaseline.ideographic = C434 || CT.C434;
ui.TextBaseline.values = C435 || CT.C435;
let C436;
let C437;
let C438;
let C439;
let C440;
let C441;
ui.TextDecorationStyle = class TextDecorationStyle extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.TextDecorationStyle.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.TextDecorationStyle.prototype;
;
dart.setLibraryUri(ui.TextDecorationStyle, "dart:ui");
;
dart.defineExtensionMethods(ui.TextDecorationStyle, ['toString']);
ui.TextDecorationStyle.solid = C436 || CT.C436;
ui.TextDecorationStyle.double = C437 || CT.C437;
ui.TextDecorationStyle.dotted = C438 || CT.C438;
ui.TextDecorationStyle.dashed = C439 || CT.C439;
ui.TextDecorationStyle.wavy = C440 || CT.C440;
ui.TextDecorationStyle.values = C441 || CT.C441;
let C442;
let C443;
let C444;
ui.TextDirection = class TextDirection extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.TextDirection.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.TextDirection.prototype;
;
dart.setLibraryUri(ui.TextDirection, "dart:ui");
;
dart.defineExtensionMethods(ui.TextDirection, ['toString']);
ui.TextDirection.rtl = C442 || CT.C442;
ui.TextDirection.ltr = C443 || CT.C443;
ui.TextDirection.values = C444 || CT.C444;
let C445;
let C446;
let C447;
ui.TextAffinity = class TextAffinity extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.TextAffinity.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.TextAffinity.prototype;
;
dart.setLibraryUri(ui.TextAffinity, "dart:ui");
;
dart.defineExtensionMethods(ui.TextAffinity, ['toString']);
ui.TextAffinity.upstream = C445 || CT.C445;
ui.TextAffinity.downstream = C446 || CT.C446;
ui.TextAffinity.values = C447 || CT.C447;
let C448;
let C449;
let C450;
let C451;
let C452;
let C453;
ui.BoxHeightStyle = class BoxHeightStyle extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.BoxHeightStyle.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.BoxHeightStyle.prototype;
;
dart.setLibraryUri(ui.BoxHeightStyle, "dart:ui");
;
dart.defineExtensionMethods(ui.BoxHeightStyle, ['toString']);
ui.BoxHeightStyle.tight = C448 || CT.C448;
ui.BoxHeightStyle.max = C449 || CT.C449;
ui.BoxHeightStyle.includeLineSpacingMiddle = C450 || CT.C450;
ui.BoxHeightStyle.includeLineSpacingTop = C451 || CT.C451;
ui.BoxHeightStyle.includeLineSpacingBottom = C452 || CT.C452;
ui.BoxHeightStyle.values = C453 || CT.C453;
let C454;
let C455;
let C456;
ui.BoxWidthStyle = class BoxWidthStyle extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.BoxWidthStyle.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.BoxWidthStyle.prototype;
;
dart.setLibraryUri(ui.BoxWidthStyle, "dart:ui");
;
dart.defineExtensionMethods(ui.BoxWidthStyle, ['toString']);
ui.BoxWidthStyle.tight = C454 || CT.C454;
ui.BoxWidthStyle.max = C455 || CT.C455;
ui.BoxWidthStyle.values = C456 || CT.C456;
let C457;
let C458;
let C459;
let C460;
ui.TileMode = class TileMode extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.TileMode.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.TileMode.prototype;
;
dart.setLibraryUri(ui.TileMode, "dart:ui");
;
dart.defineExtensionMethods(ui.TileMode, ['toString']);
ui.TileMode.clamp = C457 || CT.C457;
ui.TileMode.repeated = C458 || CT.C458;
ui.TileMode.mirror = C459 || CT.C459;
ui.TileMode.values = C460 || CT.C460;
let C461;
let C462;
let C463;
let C464;
let C465;
ui.AppLifecycleState = class AppLifecycleState extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.AppLifecycleState.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.AppLifecycleState.prototype;
;
dart.setLibraryUri(ui.AppLifecycleState, "dart:ui");
;
dart.defineExtensionMethods(ui.AppLifecycleState, ['toString']);
ui.AppLifecycleState.resumed = C461 || CT.C461;
ui.AppLifecycleState.inactive = C462 || CT.C462;
ui.AppLifecycleState.paused = C463 || CT.C463;
ui.AppLifecycleState.detached = C464 || CT.C464;
ui.AppLifecycleState.values = C465 || CT.C465;
let C466;
let C467;
let C468;
ui.Brightness = class Brightness extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.Brightness.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.Brightness.prototype;
;
dart.setLibraryUri(ui.Brightness, "dart:ui");
;
dart.defineExtensionMethods(ui.Brightness, ['toString']);
ui.Brightness.dark = C466 || CT.C466;
ui.Brightness.light = C467 || CT.C467;
ui.Brightness.values = C468 || CT.C468;
let C469;
let C470;
let C471;
let C472;
let C473;
ui.FramePhase = class FramePhase extends core.Object {
  toString() {
    return this[_name$8];
  }
};
(ui.FramePhase.new = function(index, _name) {
  this.index = index;
  this[_name$8] = _name;
  ;
}).prototype = ui.FramePhase.prototype;
;
dart.setLibraryUri(ui.FramePhase, "dart:ui");
;
dart.defineExtensionMethods(ui.FramePhase, ['toString']);
ui.FramePhase.buildStart = C469 || CT.C469;
ui.FramePhase.buildFinish = C470 || CT.C470;
ui.FramePhase.rasterStart = C471 || CT.C471;
ui.FramePhase.rasterFinish = C472 || CT.C472;
ui.FramePhase.values = C473 || CT.C473;
let C474;
ui.hashValues = function hashValues(arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20) {
  if (arg03 === void 0) arg03 = C474 || CT.C474;
  if (arg04 === void 0) arg04 = C474 || CT.C474;
  if (arg05 === void 0) arg05 = C474 || CT.C474;
  if (arg06 === void 0) arg06 = C474 || CT.C474;
  if (arg07 === void 0) arg07 = C474 || CT.C474;
  if (arg08 === void 0) arg08 = C474 || CT.C474;
  if (arg09 === void 0) arg09 = C474 || CT.C474;
  if (arg10 === void 0) arg10 = C474 || CT.C474;
  if (arg11 === void 0) arg11 = C474 || CT.C474;
  if (arg12 === void 0) arg12 = C474 || CT.C474;
  if (arg13 === void 0) arg13 = C474 || CT.C474;
  if (arg14 === void 0) arg14 = C474 || CT.C474;
  if (arg15 === void 0) arg15 = C474 || CT.C474;
  if (arg16 === void 0) arg16 = C474 || CT.C474;
  if (arg17 === void 0) arg17 = C474 || CT.C474;
  if (arg18 === void 0) arg18 = C474 || CT.C474;
  if (arg19 === void 0) arg19 = C474 || CT.C474;
  if (arg20 === void 0) arg20 = C474 || CT.C474;
  let result = 373;
  if (!!core.Iterable.is(arg01)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 45, 10, "arg01 is! Iterable");
  result = 37 * result + dart.notNull(dart.hashCode(arg01));
  if (!!core.Iterable.is(arg02)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 47, 10, "arg02 is! Iterable");
  result = 37 * result + dart.notNull(dart.hashCode(arg02));
  if (!dart.equals(arg03, ui._hashEnd)) {
    if (!!core.Iterable.is(arg03)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 50, 12, "arg03 is! Iterable");
    result = 37 * result + dart.notNull(dart.hashCode(arg03));
    if (!dart.equals(arg04, ui._hashEnd)) {
      if (!!core.Iterable.is(arg04)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 53, 14, "arg04 is! Iterable");
      result = 37 * result + dart.notNull(dart.hashCode(arg04));
      if (!dart.equals(arg05, ui._hashEnd)) {
        if (!!core.Iterable.is(arg05)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 56, 16, "arg05 is! Iterable");
        result = 37 * result + dart.notNull(dart.hashCode(arg05));
        if (!dart.equals(arg06, ui._hashEnd)) {
          if (!!core.Iterable.is(arg06)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 59, 18, "arg06 is! Iterable");
          result = 37 * result + dart.notNull(dart.hashCode(arg06));
          if (!dart.equals(arg07, ui._hashEnd)) {
            if (!!core.Iterable.is(arg07)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 62, 20, "arg07 is! Iterable");
            result = 37 * result + dart.notNull(dart.hashCode(arg07));
            if (!dart.equals(arg08, ui._hashEnd)) {
              if (!!core.Iterable.is(arg08)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 65, 22, "arg08 is! Iterable");
              result = 37 * result + dart.notNull(dart.hashCode(arg08));
              if (!dart.equals(arg09, ui._hashEnd)) {
                if (!!core.Iterable.is(arg09)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 68, 24, "arg09 is! Iterable");
                result = 37 * result + dart.notNull(dart.hashCode(arg09));
                if (!dart.equals(arg10, ui._hashEnd)) {
                  if (!!core.Iterable.is(arg10)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 71, 26, "arg10 is! Iterable");
                  result = 37 * result + dart.notNull(dart.hashCode(arg10));
                  if (!dart.equals(arg11, ui._hashEnd)) {
                    if (!!core.Iterable.is(arg11)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 74, 28, "arg11 is! Iterable");
                    result = 37 * result + dart.notNull(dart.hashCode(arg11));
                    if (!dart.equals(arg12, ui._hashEnd)) {
                      if (!!core.Iterable.is(arg12)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 77, 30, "arg12 is! Iterable");
                      result = 37 * result + dart.notNull(dart.hashCode(arg12));
                      if (!dart.equals(arg13, ui._hashEnd)) {
                        if (!!core.Iterable.is(arg13)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 80, 32, "arg13 is! Iterable");
                        result = 37 * result + dart.notNull(dart.hashCode(arg13));
                        if (!dart.equals(arg14, ui._hashEnd)) {
                          if (!!core.Iterable.is(arg14)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 83, 34, "arg14 is! Iterable");
                          result = 37 * result + dart.notNull(dart.hashCode(arg14));
                          if (!dart.equals(arg15, ui._hashEnd)) {
                            if (!!core.Iterable.is(arg15)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 86, 36, "arg15 is! Iterable");
                            result = 37 * result + dart.notNull(dart.hashCode(arg15));
                            if (!dart.equals(arg16, ui._hashEnd)) {
                              if (!!core.Iterable.is(arg16)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 89, 38, "arg16 is! Iterable");
                              result = 37 * result + dart.notNull(dart.hashCode(arg16));
                              if (!dart.equals(arg17, ui._hashEnd)) {
                                if (!!core.Iterable.is(arg17)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 92, 40, "arg17 is! Iterable");
                                result = 37 * result + dart.notNull(dart.hashCode(arg17));
                                if (!dart.equals(arg18, ui._hashEnd)) {
                                  if (!!core.Iterable.is(arg18)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 95, 42, "arg18 is! Iterable");
                                  result = 37 * result + dart.notNull(dart.hashCode(arg18));
                                  if (!dart.equals(arg19, ui._hashEnd)) {
                                    if (!!core.Iterable.is(arg19)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 98, 44, "arg19 is! Iterable");
                                    result = 37 * result + dart.notNull(dart.hashCode(arg19));
                                    if (!dart.equals(arg20, ui._hashEnd)) {
                                      if (!!core.Iterable.is(arg20)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 101, 46, "arg20 is! Iterable");
                                      result = 37 * result + dart.notNull(dart.hashCode(arg20));
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
};
ui.hashList = function hashList(args) {
  let result = 373;
  if (args != null) {
    for (let arg of args) {
      if (!!core.Iterable.is(arg)) dart.assertFailed(null, "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart", 132, 14, "arg is! Iterable");
      result = 37 * result + dart.notNull(dart.hashCode(arg));
    }
  }
  return result;
};
ui.lerpDouble = function lerpDouble(a, b, t) {
  if (a == null && b == null) {
    return null;
  }
  a == null ? a = 0.0 : null;
  b == null ? b = 0.0 : null;
  return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t);
};
ui._scaleAlpha = function _scaleAlpha(a, factor) {
  return a.withAlpha(dart.asInt((dart.notNull(a.alpha) * dart.notNull(factor))[$round]()[$clamp](0, 255)));
};
dart.defineLazy(ui, {
  /*ui.isWeb*/get isWeb() {
    return true;
  },
  /*ui.kMaxUnsignedSMI*/get kMaxUnsignedSMI() {
    return -1;
  },
  /*ui._hashEnd*/get _hashEnd() {
    return C474 || CT.C474;
  }
});
const serverHeader = dart.privateName(_http, "HttpServer.serverHeader");
const autoCompress = dart.privateName(_http, "HttpServer.autoCompress");
const idleTimeout = dart.privateName(_http, "HttpServer.idleTimeout");
_http.HttpServer = class HttpServer extends core.Object {
  get serverHeader() {
    return this[serverHeader];
  }
  set serverHeader(value) {
    this[serverHeader] = value;
  }
  get autoCompress() {
    return this[autoCompress];
  }
  set autoCompress(value) {
    this[autoCompress] = value;
  }
  get idleTimeout() {
    return this[idleTimeout];
  }
  set idleTimeout(value) {
    this[idleTimeout] = value;
  }
  static bind(address, port, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    return _http._HttpServer.bind(address, port, backlog, v6Only, shared);
  }
  static bindSecure(address, port, context, opts) {
    let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
    let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
    let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
    let shared = opts && 'shared' in opts ? opts.shared : false;
    return _http._HttpServer.bindSecure(address, port, context, backlog, v6Only, requestClientCertificate, shared);
  }
  static listenOn(serverSocket) {
    return new _http._HttpServer.listenOn(serverSocket);
  }
};
(_http.HttpServer[dart.mixinNew] = function() {
  this[serverHeader] = null;
  this[autoCompress] = null;
  this[idleTimeout] = null;
}).prototype = _http.HttpServer.prototype;
_http.HttpServer.prototype[dart.isStream] = true;
;
_http.HttpServer[dart.implements] = () => [async.Stream$(_http.HttpRequest)];
dart.setLibraryUri(_http.HttpServer, "dart:_http");
;
const total = dart.privateName(_http, "HttpConnectionsInfo.total");
const active = dart.privateName(_http, "HttpConnectionsInfo.active");
const idle = dart.privateName(_http, "HttpConnectionsInfo.idle");
const closing = dart.privateName(_http, "HttpConnectionsInfo.closing");
_http.HttpConnectionsInfo = class HttpConnectionsInfo extends core.Object {
  get total() {
    return this[total];
  }
  set total(value) {
    this[total] = value;
  }
  get active() {
    return this[active];
  }
  set active(value) {
    this[active] = value;
  }
  get idle() {
    return this[idle];
  }
  set idle(value) {
    this[idle] = value;
  }
  get closing() {
    return this[closing];
  }
  set closing(value) {
    this[closing] = value;
  }
};
(_http.HttpConnectionsInfo.new = function() {
  this[total] = 0;
  this[active] = 0;
  this[idle] = 0;
  this[closing] = 0;
  ;
}).prototype = _http.HttpConnectionsInfo.prototype;
;
dart.setLibraryUri(_http.HttpConnectionsInfo, "dart:_http");
;
const date = dart.privateName(_http, "HttpHeaders.date");
const expires = dart.privateName(_http, "HttpHeaders.expires");
const ifModifiedSince = dart.privateName(_http, "HttpHeaders.ifModifiedSince");
const host = dart.privateName(_http, "HttpHeaders.host");
const port = dart.privateName(_http, "HttpHeaders.port");
const contentType = dart.privateName(_http, "HttpHeaders.contentType");
const contentLength = dart.privateName(_http, "HttpHeaders.contentLength");
const persistentConnection = dart.privateName(_http, "HttpHeaders.persistentConnection");
const chunkedTransferEncoding = dart.privateName(_http, "HttpHeaders.chunkedTransferEncoding");
let C475;
let C476;
let C477;
let C478;
_http.HttpHeaders = class HttpHeaders extends core.Object {
  get date() {
    return this[date];
  }
  set date(value) {
    this[date] = value;
  }
  get expires() {
    return this[expires];
  }
  set expires(value) {
    this[expires] = value;
  }
  get ifModifiedSince() {
    return this[ifModifiedSince];
  }
  set ifModifiedSince(value) {
    this[ifModifiedSince] = value;
  }
  get host() {
    return this[host];
  }
  set host(value) {
    this[host] = value;
  }
  get port() {
    return this[port];
  }
  set port(value) {
    this[port] = value;
  }
  get contentType() {
    return this[contentType];
  }
  set contentType(value) {
    this[contentType] = value;
  }
  get contentLength() {
    return this[contentLength];
  }
  set contentLength(value) {
    this[contentLength] = value;
  }
  get persistentConnection() {
    return this[persistentConnection];
  }
  set persistentConnection(value) {
    this[persistentConnection] = value;
  }
  get chunkedTransferEncoding() {
    return this[chunkedTransferEncoding];
  }
  set chunkedTransferEncoding(value) {
    this[chunkedTransferEncoding] = value;
  }
};
(_http.HttpHeaders.new = function() {
  this[date] = null;
  this[expires] = null;
  this[ifModifiedSince] = null;
  this[host] = null;
  this[port] = null;
  this[contentType] = null;
  this[contentLength] = null;
  this[persistentConnection] = null;
  this[chunkedTransferEncoding] = null;
  ;
}).prototype = _http.HttpHeaders.prototype;
;
dart.setLibraryUri(_http.HttpHeaders, "dart:_http");
;
dart.defineLazy(_http.HttpHeaders, {
  /*_http.HttpHeaders.acceptHeader*/get acceptHeader() {
    return "accept";
  },
  /*_http.HttpHeaders.acceptCharsetHeader*/get acceptCharsetHeader() {
    return "accept-charset";
  },
  /*_http.HttpHeaders.acceptEncodingHeader*/get acceptEncodingHeader() {
    return "accept-encoding";
  },
  /*_http.HttpHeaders.acceptLanguageHeader*/get acceptLanguageHeader() {
    return "accept-language";
  },
  /*_http.HttpHeaders.acceptRangesHeader*/get acceptRangesHeader() {
    return "accept-ranges";
  },
  /*_http.HttpHeaders.ageHeader*/get ageHeader() {
    return "age";
  },
  /*_http.HttpHeaders.allowHeader*/get allowHeader() {
    return "allow";
  },
  /*_http.HttpHeaders.authorizationHeader*/get authorizationHeader() {
    return "authorization";
  },
  /*_http.HttpHeaders.cacheControlHeader*/get cacheControlHeader() {
    return "cache-control";
  },
  /*_http.HttpHeaders.connectionHeader*/get connectionHeader() {
    return "connection";
  },
  /*_http.HttpHeaders.contentEncodingHeader*/get contentEncodingHeader() {
    return "content-encoding";
  },
  /*_http.HttpHeaders.contentLanguageHeader*/get contentLanguageHeader() {
    return "content-language";
  },
  /*_http.HttpHeaders.contentLengthHeader*/get contentLengthHeader() {
    return "content-length";
  },
  /*_http.HttpHeaders.contentLocationHeader*/get contentLocationHeader() {
    return "content-location";
  },
  /*_http.HttpHeaders.contentMD5Header*/get contentMD5Header() {
    return "content-md5";
  },
  /*_http.HttpHeaders.contentRangeHeader*/get contentRangeHeader() {
    return "content-range";
  },
  /*_http.HttpHeaders.contentTypeHeader*/get contentTypeHeader() {
    return "content-type";
  },
  /*_http.HttpHeaders.dateHeader*/get dateHeader() {
    return "date";
  },
  /*_http.HttpHeaders.etagHeader*/get etagHeader() {
    return "etag";
  },
  /*_http.HttpHeaders.expectHeader*/get expectHeader() {
    return "expect";
  },
  /*_http.HttpHeaders.expiresHeader*/get expiresHeader() {
    return "expires";
  },
  /*_http.HttpHeaders.fromHeader*/get fromHeader() {
    return "from";
  },
  /*_http.HttpHeaders.hostHeader*/get hostHeader() {
    return "host";
  },
  /*_http.HttpHeaders.ifMatchHeader*/get ifMatchHeader() {
    return "if-match";
  },
  /*_http.HttpHeaders.ifModifiedSinceHeader*/get ifModifiedSinceHeader() {
    return "if-modified-since";
  },
  /*_http.HttpHeaders.ifNoneMatchHeader*/get ifNoneMatchHeader() {
    return "if-none-match";
  },
  /*_http.HttpHeaders.ifRangeHeader*/get ifRangeHeader() {
    return "if-range";
  },
  /*_http.HttpHeaders.ifUnmodifiedSinceHeader*/get ifUnmodifiedSinceHeader() {
    return "if-unmodified-since";
  },
  /*_http.HttpHeaders.lastModifiedHeader*/get lastModifiedHeader() {
    return "last-modified";
  },
  /*_http.HttpHeaders.locationHeader*/get locationHeader() {
    return "location";
  },
  /*_http.HttpHeaders.maxForwardsHeader*/get maxForwardsHeader() {
    return "max-forwards";
  },
  /*_http.HttpHeaders.pragmaHeader*/get pragmaHeader() {
    return "pragma";
  },
  /*_http.HttpHeaders.proxyAuthenticateHeader*/get proxyAuthenticateHeader() {
    return "proxy-authenticate";
  },
  /*_http.HttpHeaders.proxyAuthorizationHeader*/get proxyAuthorizationHeader() {
    return "proxy-authorization";
  },
  /*_http.HttpHeaders.rangeHeader*/get rangeHeader() {
    return "range";
  },
  /*_http.HttpHeaders.refererHeader*/get refererHeader() {
    return "referer";
  },
  /*_http.HttpHeaders.retryAfterHeader*/get retryAfterHeader() {
    return "retry-after";
  },
  /*_http.HttpHeaders.serverHeader*/get serverHeader() {
    return "server";
  },
  /*_http.HttpHeaders.teHeader*/get teHeader() {
    return "te";
  },
  /*_http.HttpHeaders.trailerHeader*/get trailerHeader() {
    return "trailer";
  },
  /*_http.HttpHeaders.transferEncodingHeader*/get transferEncodingHeader() {
    return "transfer-encoding";
  },
  /*_http.HttpHeaders.upgradeHeader*/get upgradeHeader() {
    return "upgrade";
  },
  /*_http.HttpHeaders.userAgentHeader*/get userAgentHeader() {
    return "user-agent";
  },
  /*_http.HttpHeaders.varyHeader*/get varyHeader() {
    return "vary";
  },
  /*_http.HttpHeaders.viaHeader*/get viaHeader() {
    return "via";
  },
  /*_http.HttpHeaders.warningHeader*/get warningHeader() {
    return "warning";
  },
  /*_http.HttpHeaders.wwwAuthenticateHeader*/get wwwAuthenticateHeader() {
    return "www-authenticate";
  },
  /*_http.HttpHeaders.ACCEPT*/get ACCEPT() {
    return "accept";
  },
  /*_http.HttpHeaders.ACCEPT_CHARSET*/get ACCEPT_CHARSET() {
    return "accept-charset";
  },
  /*_http.HttpHeaders.ACCEPT_ENCODING*/get ACCEPT_ENCODING() {
    return "accept-encoding";
  },
  /*_http.HttpHeaders.ACCEPT_LANGUAGE*/get ACCEPT_LANGUAGE() {
    return "accept-language";
  },
  /*_http.HttpHeaders.ACCEPT_RANGES*/get ACCEPT_RANGES() {
    return "accept-ranges";
  },
  /*_http.HttpHeaders.AGE*/get AGE() {
    return "age";
  },
  /*_http.HttpHeaders.ALLOW*/get ALLOW() {
    return "allow";
  },
  /*_http.HttpHeaders.AUTHORIZATION*/get AUTHORIZATION() {
    return "authorization";
  },
  /*_http.HttpHeaders.CACHE_CONTROL*/get CACHE_CONTROL() {
    return "cache-control";
  },
  /*_http.HttpHeaders.CONNECTION*/get CONNECTION() {
    return "connection";
  },
  /*_http.HttpHeaders.CONTENT_ENCODING*/get CONTENT_ENCODING() {
    return "content-encoding";
  },
  /*_http.HttpHeaders.CONTENT_LANGUAGE*/get CONTENT_LANGUAGE() {
    return "content-language";
  },
  /*_http.HttpHeaders.CONTENT_LENGTH*/get CONTENT_LENGTH() {
    return "content-length";
  },
  /*_http.HttpHeaders.CONTENT_LOCATION*/get CONTENT_LOCATION() {
    return "content-location";
  },
  /*_http.HttpHeaders.CONTENT_MD5*/get CONTENT_MD5() {
    return "content-md5";
  },
  /*_http.HttpHeaders.CONTENT_RANGE*/get CONTENT_RANGE() {
    return "content-range";
  },
  /*_http.HttpHeaders.CONTENT_TYPE*/get CONTENT_TYPE() {
    return "content-type";
  },
  /*_http.HttpHeaders.DATE*/get DATE() {
    return "date";
  },
  /*_http.HttpHeaders.ETAG*/get ETAG() {
    return "etag";
  },
  /*_http.HttpHeaders.EXPECT*/get EXPECT() {
    return "expect";
  },
  /*_http.HttpHeaders.EXPIRES*/get EXPIRES() {
    return "expires";
  },
  /*_http.HttpHeaders.FROM*/get FROM() {
    return "from";
  },
  /*_http.HttpHeaders.HOST*/get HOST() {
    return "host";
  },
  /*_http.HttpHeaders.IF_MATCH*/get IF_MATCH() {
    return "if-match";
  },
  /*_http.HttpHeaders.IF_MODIFIED_SINCE*/get IF_MODIFIED_SINCE() {
    return "if-modified-since";
  },
  /*_http.HttpHeaders.IF_NONE_MATCH*/get IF_NONE_MATCH() {
    return "if-none-match";
  },
  /*_http.HttpHeaders.IF_RANGE*/get IF_RANGE() {
    return "if-range";
  },
  /*_http.HttpHeaders.IF_UNMODIFIED_SINCE*/get IF_UNMODIFIED_SINCE() {
    return "if-unmodified-since";
  },
  /*_http.HttpHeaders.LAST_MODIFIED*/get LAST_MODIFIED() {
    return "last-modified";
  },
  /*_http.HttpHeaders.LOCATION*/get LOCATION() {
    return "location";
  },
  /*_http.HttpHeaders.MAX_FORWARDS*/get MAX_FORWARDS() {
    return "max-forwards";
  },
  /*_http.HttpHeaders.PRAGMA*/get PRAGMA() {
    return "pragma";
  },
  /*_http.HttpHeaders.PROXY_AUTHENTICATE*/get PROXY_AUTHENTICATE() {
    return "proxy-authenticate";
  },
  /*_http.HttpHeaders.PROXY_AUTHORIZATION*/get PROXY_AUTHORIZATION() {
    return "proxy-authorization";
  },
  /*_http.HttpHeaders.RANGE*/get RANGE() {
    return "range";
  },
  /*_http.HttpHeaders.REFERER*/get REFERER() {
    return "referer";
  },
  /*_http.HttpHeaders.RETRY_AFTER*/get RETRY_AFTER() {
    return "retry-after";
  },
  /*_http.HttpHeaders.SERVER*/get SERVER() {
    return "server";
  },
  /*_http.HttpHeaders.TE*/get TE() {
    return "te";
  },
  /*_http.HttpHeaders.TRAILER*/get TRAILER() {
    return "trailer";
  },
  /*_http.HttpHeaders.TRANSFER_ENCODING*/get TRANSFER_ENCODING() {
    return "transfer-encoding";
  },
  /*_http.HttpHeaders.UPGRADE*/get UPGRADE() {
    return "upgrade";
  },
  /*_http.HttpHeaders.USER_AGENT*/get USER_AGENT() {
    return "user-agent";
  },
  /*_http.HttpHeaders.VARY*/get VARY() {
    return "vary";
  },
  /*_http.HttpHeaders.VIA*/get VIA() {
    return "via";
  },
  /*_http.HttpHeaders.WARNING*/get WARNING() {
    return "warning";
  },
  /*_http.HttpHeaders.WWW_AUTHENTICATE*/get WWW_AUTHENTICATE() {
    return "www-authenticate";
  },
  /*_http.HttpHeaders.cookieHeader*/get cookieHeader() {
    return "cookie";
  },
  /*_http.HttpHeaders.setCookieHeader*/get setCookieHeader() {
    return "set-cookie";
  },
  /*_http.HttpHeaders.COOKIE*/get COOKIE() {
    return "cookie";
  },
  /*_http.HttpHeaders.SET_COOKIE*/get SET_COOKIE() {
    return "set-cookie";
  },
  /*_http.HttpHeaders.generalHeaders*/get generalHeaders() {
    return C475 || CT.C475;
  },
  /*_http.HttpHeaders.GENERAL_HEADERS*/get GENERAL_HEADERS() {
    return C475 || CT.C475;
  },
  /*_http.HttpHeaders.entityHeaders*/get entityHeaders() {
    return C476 || CT.C476;
  },
  /*_http.HttpHeaders.ENTITY_HEADERS*/get ENTITY_HEADERS() {
    return C476 || CT.C476;
  },
  /*_http.HttpHeaders.responseHeaders*/get responseHeaders() {
    return C477 || CT.C477;
  },
  /*_http.HttpHeaders.RESPONSE_HEADERS*/get RESPONSE_HEADERS() {
    return C477 || CT.C477;
  },
  /*_http.HttpHeaders.requestHeaders*/get requestHeaders() {
    return C478 || CT.C478;
  },
  /*_http.HttpHeaders.REQUEST_HEADERS*/get REQUEST_HEADERS() {
    return C478 || CT.C478;
  }
});
_http.HeaderValue = class HeaderValue extends core.Object {
  static new(value, parameters) {
    if (value === void 0) value = "";
    if (parameters === void 0) parameters = null;
    return new _http._HeaderValue.new(value, parameters);
  }
  static parse(value, opts) {
    let parameterSeparator = opts && 'parameterSeparator' in opts ? opts.parameterSeparator : ";";
    let valueSeparator = opts && 'valueSeparator' in opts ? opts.valueSeparator : null;
    let preserveBackslash = opts && 'preserveBackslash' in opts ? opts.preserveBackslash : false;
    return _http._HeaderValue.parse(value, {parameterSeparator: parameterSeparator, valueSeparator: valueSeparator, preserveBackslash: preserveBackslash});
  }
};
(_http.HeaderValue[dart.mixinNew] = function() {
}).prototype = _http.HeaderValue.prototype;
;
dart.setLibraryUri(_http.HeaderValue, "dart:_http");
_http.HttpSession = class HttpSession extends core.Object {};
(_http.HttpSession.new = function() {
  ;
}).prototype = _http.HttpSession.prototype;
_http.HttpSession.prototype[dart.isMap] = true;
;
_http.HttpSession[dart.implements] = () => [core.Map];
dart.setLibraryUri(_http.HttpSession, "dart:_http");
_http.ContentType = class ContentType extends core.Object {
  static new(primaryType, subType, opts) {
    let charset = opts && 'charset' in opts ? opts.charset : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    return new _http._ContentType.new(primaryType, subType, charset, parameters);
  }
  static parse(value) {
    return _http._ContentType.parse(value);
  }
};
(_http.ContentType[dart.mixinNew] = function() {
}).prototype = _http.ContentType.prototype;
;
_http.ContentType[dart.implements] = () => [_http.HeaderValue];
dart.setLibraryUri(_http.ContentType, "dart:_http");
dart.defineLazy(_http.ContentType, {
  /*_http.ContentType.text*/get text() {
    return _http.ContentType.new("text", "plain", {charset: "utf-8"});
  },
  /*_http.ContentType.TEXT*/get TEXT() {
    return _http.ContentType.text;
  },
  /*_http.ContentType.html*/get html() {
    return _http.ContentType.new("text", "html", {charset: "utf-8"});
  },
  /*_http.ContentType.HTML*/get HTML() {
    return _http.ContentType.html;
  },
  /*_http.ContentType.json*/get json() {
    return _http.ContentType.new("application", "json", {charset: "utf-8"});
  },
  /*_http.ContentType.JSON*/get JSON() {
    return _http.ContentType.json;
  },
  /*_http.ContentType.binary*/get binary() {
    return _http.ContentType.new("application", "octet-stream");
  },
  /*_http.ContentType.BINARY*/get BINARY() {
    return _http.ContentType.binary;
  }
});
const name = dart.privateName(_http, "Cookie.name");
const value$6 = dart.privateName(_http, "Cookie.value");
const expires$ = dart.privateName(_http, "Cookie.expires");
const maxAge = dart.privateName(_http, "Cookie.maxAge");
const domain = dart.privateName(_http, "Cookie.domain");
const path = dart.privateName(_http, "Cookie.path");
const secure = dart.privateName(_http, "Cookie.secure");
const httpOnly = dart.privateName(_http, "Cookie.httpOnly");
_http.Cookie = class Cookie extends core.Object {
  get name() {
    return this[name];
  }
  set name(value) {
    this[name] = value;
  }
  get value() {
    return this[value$6];
  }
  set value(value) {
    this[value$6] = value;
  }
  get expires() {
    return this[expires$];
  }
  set expires(value) {
    this[expires$] = value;
  }
  get maxAge() {
    return this[maxAge];
  }
  set maxAge(value) {
    this[maxAge] = value;
  }
  get domain() {
    return this[domain];
  }
  set domain(value) {
    this[domain] = value;
  }
  get path() {
    return this[path];
  }
  set path(value) {
    this[path] = value;
  }
  get secure() {
    return this[secure];
  }
  set secure(value) {
    this[secure] = value;
  }
  get httpOnly() {
    return this[httpOnly];
  }
  set httpOnly(value) {
    this[httpOnly] = value;
  }
  static new(name, value) {
    return new _http._Cookie.new(name, value);
  }
  static fromSetCookieValue(value) {
    return new _http._Cookie.fromSetCookieValue(value);
  }
};
(_http.Cookie[dart.mixinNew] = function() {
  this[name] = null;
  this[value$6] = null;
  this[expires$] = null;
  this[maxAge] = null;
  this[domain] = null;
  this[path] = null;
  this[secure] = null;
  this[httpOnly] = null;
}).prototype = _http.Cookie.prototype;
;
dart.setLibraryUri(_http.Cookie, "dart:_http");
;
_http.HttpRequest = class HttpRequest extends core.Object {};
(_http.HttpRequest.new = function() {
  ;
}).prototype = _http.HttpRequest.prototype;
_http.HttpRequest.prototype[dart.isStream] = true;
;
_http.HttpRequest[dart.implements] = () => [async.Stream$(typed_data.Uint8List)];
dart.setLibraryUri(_http.HttpRequest, "dart:_http");
const contentLength$ = dart.privateName(_http, "HttpResponse.contentLength");
const statusCode = dart.privateName(_http, "HttpResponse.statusCode");
const reasonPhrase = dart.privateName(_http, "HttpResponse.reasonPhrase");
const persistentConnection$ = dart.privateName(_http, "HttpResponse.persistentConnection");
const deadline = dart.privateName(_http, "HttpResponse.deadline");
const bufferOutput = dart.privateName(_http, "HttpResponse.bufferOutput");
_http.HttpResponse = class HttpResponse extends core.Object {
  get contentLength() {
    return this[contentLength$];
  }
  set contentLength(value) {
    this[contentLength$] = value;
  }
  get statusCode() {
    return this[statusCode];
  }
  set statusCode(value) {
    this[statusCode] = value;
  }
  get reasonPhrase() {
    return this[reasonPhrase];
  }
  set reasonPhrase(value) {
    this[reasonPhrase] = value;
  }
  get persistentConnection() {
    return this[persistentConnection$];
  }
  set persistentConnection(value) {
    this[persistentConnection$] = value;
  }
  get deadline() {
    return this[deadline];
  }
  set deadline(value) {
    this[deadline] = value;
  }
  get bufferOutput() {
    return this[bufferOutput];
  }
  set bufferOutput(value) {
    this[bufferOutput] = value;
  }
};
(_http.HttpResponse.new = function() {
  this[contentLength$] = null;
  this[statusCode] = null;
  this[reasonPhrase] = null;
  this[persistentConnection$] = null;
  this[deadline] = null;
  this[bufferOutput] = null;
  ;
}).prototype = _http.HttpResponse.prototype;
;
_http.HttpResponse[dart.implements] = () => [io.IOSink];
dart.setLibraryUri(_http.HttpResponse, "dart:_http");
;
const idleTimeout$ = dart.privateName(_http, "HttpClient.idleTimeout");
const connectionTimeout = dart.privateName(_http, "HttpClient.connectionTimeout");
const maxConnectionsPerHost = dart.privateName(_http, "HttpClient.maxConnectionsPerHost");
const autoUncompress = dart.privateName(_http, "HttpClient.autoUncompress");
const userAgent = dart.privateName(_http, "HttpClient.userAgent");
_http.HttpClient = class HttpClient extends core.Object {
  get idleTimeout() {
    return this[idleTimeout$];
  }
  set idleTimeout(value) {
    this[idleTimeout$] = value;
  }
  get connectionTimeout() {
    return this[connectionTimeout];
  }
  set connectionTimeout(value) {
    this[connectionTimeout] = value;
  }
  get maxConnectionsPerHost() {
    return this[maxConnectionsPerHost];
  }
  set maxConnectionsPerHost(value) {
    this[maxConnectionsPerHost] = value;
  }
  get autoUncompress() {
    return this[autoUncompress];
  }
  set autoUncompress(value) {
    this[autoUncompress] = value;
  }
  get userAgent() {
    return this[userAgent];
  }
  set userAgent(value) {
    this[userAgent] = value;
  }
  static set enableTimelineLogging(value) {
    let t98;
    _http.HttpClient._enableTimelineLogging = (t98 = value, t98 == null ? false : t98);
  }
  static get enableTimelineLogging() {
    return _http.HttpClient._enableTimelineLogging;
  }
  static new(opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let overrides = _http.HttpOverrides.current;
    if (overrides == null) {
      return new _http._HttpClient.new(context);
    }
    return overrides.createHttpClient(context);
  }
  static findProxyFromEnvironment(url, opts) {
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let overrides = _http.HttpOverrides.current;
    if (overrides == null) {
      return _http._HttpClient._findProxyFromEnvironment(url, environment);
    }
    return overrides.findProxyFromEnvironment(url, environment);
  }
};
(_http.HttpClient[dart.mixinNew] = function() {
  this[idleTimeout$] = null;
  this[connectionTimeout] = null;
  this[maxConnectionsPerHost] = null;
  this[autoUncompress] = null;
  this[userAgent] = null;
}).prototype = _http.HttpClient.prototype;
;
dart.setLibraryUri(_http.HttpClient, "dart:_http");
;
dart.defineLazy(_http.HttpClient, {
  /*_http.HttpClient.defaultHttpPort*/get defaultHttpPort() {
    return 80;
  },
  /*_http.HttpClient.DEFAULT_HTTP_PORT*/get DEFAULT_HTTP_PORT() {
    return 80;
  },
  /*_http.HttpClient.defaultHttpsPort*/get defaultHttpsPort() {
    return 443;
  },
  /*_http.HttpClient.DEFAULT_HTTPS_PORT*/get DEFAULT_HTTPS_PORT() {
    return 443;
  },
  /*_http.HttpClient._enableTimelineLogging*/get _enableTimelineLogging() {
    return false;
  },
  set _enableTimelineLogging(_) {}
});
const persistentConnection$0 = dart.privateName(_http, "HttpClientRequest.persistentConnection");
const followRedirects = dart.privateName(_http, "HttpClientRequest.followRedirects");
const maxRedirects = dart.privateName(_http, "HttpClientRequest.maxRedirects");
const contentLength$0 = dart.privateName(_http, "HttpClientRequest.contentLength");
const bufferOutput$ = dart.privateName(_http, "HttpClientRequest.bufferOutput");
_http.HttpClientRequest = class HttpClientRequest extends core.Object {
  get persistentConnection() {
    return this[persistentConnection$0];
  }
  set persistentConnection(value) {
    this[persistentConnection$0] = value;
  }
  get followRedirects() {
    return this[followRedirects];
  }
  set followRedirects(value) {
    this[followRedirects] = value;
  }
  get maxRedirects() {
    return this[maxRedirects];
  }
  set maxRedirects(value) {
    this[maxRedirects] = value;
  }
  get contentLength() {
    return this[contentLength$0];
  }
  set contentLength(value) {
    this[contentLength$0] = value;
  }
  get bufferOutput() {
    return this[bufferOutput$];
  }
  set bufferOutput(value) {
    this[bufferOutput$] = value;
  }
};
(_http.HttpClientRequest.new = function() {
  this[persistentConnection$0] = null;
  this[followRedirects] = null;
  this[maxRedirects] = null;
  this[contentLength$0] = null;
  this[bufferOutput$] = null;
  ;
}).prototype = _http.HttpClientRequest.prototype;
;
_http.HttpClientRequest[dart.implements] = () => [io.IOSink];
dart.setLibraryUri(_http.HttpClientRequest, "dart:_http");
;
_http.HttpClientResponse = class HttpClientResponse extends core.Object {};
(_http.HttpClientResponse.new = function() {
  ;
}).prototype = _http.HttpClientResponse.prototype;
_http.HttpClientResponse.prototype[dart.isStream] = true;
;
_http.HttpClientResponse[dart.implements] = () => [async.Stream$(core.List$(core.int))];
dart.setLibraryUri(_http.HttpClientResponse, "dart:_http");
const _name$9 = dart.privateName(_http, "_name");
let C479;
let C480;
let C481;
let C482;
_http.HttpClientResponseCompressionState = class HttpClientResponseCompressionState extends core.Object {
  toString() {
    return this[_name$9];
  }
};
(_http.HttpClientResponseCompressionState.new = function(index, _name) {
  this.index = index;
  this[_name$9] = _name;
  ;
}).prototype = _http.HttpClientResponseCompressionState.prototype;
;
dart.setLibraryUri(_http.HttpClientResponseCompressionState, "dart:_http");
;
dart.defineExtensionMethods(_http.HttpClientResponseCompressionState, ['toString']);
_http.HttpClientResponseCompressionState.notCompressed = C479 || CT.C479;
_http.HttpClientResponseCompressionState.decompressed = C480 || CT.C480;
_http.HttpClientResponseCompressionState.compressed = C481 || CT.C481;
_http.HttpClientResponseCompressionState.values = C482 || CT.C482;
_http.HttpClientCredentials = class HttpClientCredentials extends core.Object {};
(_http.HttpClientCredentials.new = function() {
  ;
}).prototype = _http.HttpClientCredentials.prototype;
;
dart.setLibraryUri(_http.HttpClientCredentials, "dart:_http");
_http.HttpClientBasicCredentials = class HttpClientBasicCredentials extends _http.HttpClientCredentials {
  static new(username, password) {
    return new _http._HttpClientBasicCredentials.new(username, password);
  }
};
;
dart.setLibraryUri(_http.HttpClientBasicCredentials, "dart:_http");
_http.HttpClientDigestCredentials = class HttpClientDigestCredentials extends _http.HttpClientCredentials {
  static new(username, password) {
    return new _http._HttpClientDigestCredentials.new(username, password);
  }
};
;
dart.setLibraryUri(_http.HttpClientDigestCredentials, "dart:_http");
_http.HttpConnectionInfo = class HttpConnectionInfo extends core.Object {};
(_http.HttpConnectionInfo.new = function() {
  ;
}).prototype = _http.HttpConnectionInfo.prototype;
;
dart.setLibraryUri(_http.HttpConnectionInfo, "dart:_http");
_http.RedirectInfo = class RedirectInfo extends core.Object {};
(_http.RedirectInfo.new = function() {
  ;
}).prototype = _http.RedirectInfo.prototype;
;
dart.setLibraryUri(_http.RedirectInfo, "dart:_http");
_http.DetachedSocket = class DetachedSocket extends core.Object {};
(_http.DetachedSocket.new = function() {
  ;
}).prototype = _http.DetachedSocket.prototype;
;
dart.setLibraryUri(_http.DetachedSocket, "dart:_http");
const message$19 = dart.privateName(_http, "HttpException.message");
const uri$0 = dart.privateName(_http, "HttpException.uri");
_http.HttpException = class HttpException extends core.Object {
  get message() {
    return this[message$19];
  }
  set message(value) {
    super.message = value;
  }
  get uri() {
    return this[uri$0];
  }
  set uri(value) {
    super.uri = value;
  }
  toString() {
    let t98;
    let b = (t98 = new core.StringBuffer.new(), t98.write("HttpException: "), t98.write(this.message), t98);
    if (this.uri != null) {
      b.write(", uri = " + dart.str(this.uri));
    }
    return dart.toString(b);
  }
};
(_http.HttpException.new = function(message, opts) {
  let uri = opts && 'uri' in opts ? opts.uri : null;
  this[message$19] = message;
  this[uri$0] = uri;
  ;
}).prototype = _http.HttpException.prototype;
;
_http.HttpException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(_http.HttpException, "dart:_http");
;
dart.defineExtensionMethods(_http.HttpException, ['toString']);
const message$20 = dart.privateName(_http, "RedirectException.message");
const redirects$ = dart.privateName(_http, "RedirectException.redirects");
_http.RedirectException = class RedirectException extends core.Object {
  get message() {
    return this[message$20];
  }
  set message(value) {
    super.message = value;
  }
  get redirects() {
    return this[redirects$];
  }
  set redirects(value) {
    super.redirects = value;
  }
  toString() {
    return "RedirectException: " + dart.str(this.message);
  }
  get uri() {
    return this.redirects[$last].location;
  }
};
(_http.RedirectException.new = function(message, redirects) {
  this[message$20] = message;
  this[redirects$] = redirects;
  ;
}).prototype = _http.RedirectException.prototype;
;
_http.RedirectException[dart.implements] = () => [_http.HttpException];
dart.setGetterSignature(_http.RedirectException, () => ({
  __proto__: dart.getGetters(_http.RedirectException.__proto__),
  uri: core.Uri
}));
dart.setLibraryUri(_http.RedirectException, "dart:_http");
;
dart.defineExtensionMethods(_http.RedirectException, ['toString']);
let C483;
_http._CryptoUtils = class _CryptoUtils extends core.Object {
  static getRandomBytes(count) {
    let result = _native_typed_data.NativeUint8List.new(count);
    for (let i = 0; i < dart.notNull(count); i = i + 1) {
      result[$_set](i, _http._CryptoUtils._rng.nextInt(255));
    }
    return result;
  }
  static bytesToHex(bytes) {
    let result = new core.StringBuffer.new();
    for (let part of bytes) {
      result.write((dart.notNull(part) < 16 ? "0" : "") + part[$toRadixString](16));
    }
    return result.toString();
  }
  static bytesToBase64(bytes, urlSafe, addLineSeparator) {
    let t98, t98$, t98$0, t98$1, t98$2, t98$3, t98$4, t98$5, t98$6, t98$7, t98$8, t98$9, t98$10, t98$11, t98$12, t98$13, t98$14;
    if (urlSafe === void 0) urlSafe = false;
    if (addLineSeparator === void 0) addLineSeparator = false;
    let len = bytes[$length];
    if (len === 0) {
      return "";
    }
    let lookup = dart.test(urlSafe) ? _http._CryptoUtils._encodeTableUrlSafe : _http._CryptoUtils._encodeTable;
    let remainderLength = len[$remainder](3);
    let chunkLength = dart.notNull(len) - remainderLength;
    let outputLen = (dart.notNull(len) / 3)[$truncate]() * 4 + (remainderLength > 0 ? 4 : 0);
    if (dart.test(addLineSeparator)) {
      outputLen = outputLen + (((outputLen - 1) / 76)[$truncate]() << 1 >>> 0);
    }
    let out = ListOfint().new(outputLen);
    let j = 0;
    let i = 0;
    let c = 0;
    while (i < chunkLength) {
      let x = (dart.notNull(bytes[$_get]((t98 = i, i = t98 + 1, t98))) << 16 & 16777215 | dart.notNull(bytes[$_get]((t98$ = i, i = t98$ + 1, t98$))) << 8 & 16777215 | dart.notNull(bytes[$_get]((t98$0 = i, i = t98$0 + 1, t98$0)))) >>> 0;
      out[$_set]((t98$1 = j, j = t98$1 + 1, t98$1), lookup[$codeUnitAt](x[$rightShift](18)));
      out[$_set]((t98$2 = j, j = t98$2 + 1, t98$2), lookup[$codeUnitAt](x >> 12 & 63));
      out[$_set]((t98$3 = j, j = t98$3 + 1, t98$3), lookup[$codeUnitAt](x >> 6 & 63));
      out[$_set]((t98$4 = j, j = t98$4 + 1, t98$4), lookup[$codeUnitAt](x & 63));
      if (dart.test(addLineSeparator) && (c = c + 1) === 19 && j < outputLen - 2) {
        out[$_set]((t98$5 = j, j = t98$5 + 1, t98$5), 13);
        out[$_set]((t98$6 = j, j = t98$6 + 1, t98$6), 10);
        c = 0;
      }
    }
    if (remainderLength === 1) {
      let x = bytes[$_get](i);
      out[$_set]((t98$7 = j, j = t98$7 + 1, t98$7), lookup[$codeUnitAt](x[$rightShift](2)));
      out[$_set]((t98$8 = j, j = t98$8 + 1, t98$8), lookup[$codeUnitAt](dart.notNull(x) << 4 & 63));
      out[$_set]((t98$9 = j, j = t98$9 + 1, t98$9), 61);
      out[$_set]((t98$10 = j, j = t98$10 + 1, t98$10), 61);
    } else if (remainderLength === 2) {
      let x = bytes[$_get](i);
      let y = bytes[$_get](i + 1);
      out[$_set]((t98$11 = j, j = t98$11 + 1, t98$11), lookup[$codeUnitAt](x[$rightShift](2)));
      out[$_set]((t98$12 = j, j = t98$12 + 1, t98$12), lookup[$codeUnitAt]((dart.notNull(x) << 4 | y[$rightShift](4)) & 63));
      out[$_set]((t98$13 = j, j = t98$13 + 1, t98$13), lookup[$codeUnitAt](dart.notNull(y) << 2 & 63));
      out[$_set]((t98$14 = j, j = t98$14 + 1, t98$14), 61);
    }
    return core.String.fromCharCodes(out);
  }
  static base64StringToBytes(input, ignoreInvalidCharacters) {
    let t98, t98$, t98$0, t98$1;
    if (ignoreInvalidCharacters === void 0) ignoreInvalidCharacters = true;
    let len = input.length;
    if (len === 0) {
      return ListOfint().new(0);
    }
    let extrasLen = 0;
    for (let i = 0; i < len; i = i + 1) {
      let c = _http._CryptoUtils._decodeTable[$_get](input[$codeUnitAt](i));
      if (dart.notNull(c) < 0) {
        extrasLen = extrasLen + 1;
        if (c === -2 && !dart.test(ignoreInvalidCharacters)) {
          dart.throw(new core.FormatException.new("Invalid character: " + input[$_get](i)));
        }
      }
    }
    if ((len - extrasLen)[$modulo](4) !== 0) {
      dart.throw(new core.FormatException.new("Size of Base 64 characters in Input\n          must be a multiple of 4. Input: " + dart.str(input)));
    }
    let padLength = 0;
    for (let i = len - 1; i >= 0; i = i - 1) {
      let currentCodeUnit = input[$codeUnitAt](i);
      if (dart.notNull(_http._CryptoUtils._decodeTable[$_get](currentCodeUnit)) > 0) break;
      if (currentCodeUnit === 61) padLength = padLength + 1;
    }
    let outputLen = ((len - extrasLen) * 6)[$rightShift](3) - padLength;
    let out = ListOfint().new(outputLen);
    for (let i = 0, o = 0; o < outputLen;) {
      let x = 0;
      for (let j = 4; j > 0;) {
        let c = _http._CryptoUtils._decodeTable[$_get](input[$codeUnitAt]((t98 = i, i = t98 + 1, t98)));
        if (dart.notNull(c) >= 0) {
          x = (x << 6 & 16777215 | dart.notNull(c)) >>> 0;
          j = j - 1;
        }
      }
      out[$_set]((t98$ = o, o = t98$ + 1, t98$), x[$rightShift](16));
      if (o < outputLen) {
        out[$_set]((t98$0 = o, o = t98$0 + 1, t98$0), x >> 8 & 255);
        if (o < outputLen) out[$_set]((t98$1 = o, o = t98$1 + 1, t98$1), x & 255);
      }
    }
    return out;
  }
};
(_http._CryptoUtils.new = function() {
  ;
}).prototype = _http._CryptoUtils.prototype;
;
dart.setLibraryUri(_http._CryptoUtils, "dart:_http");
dart.defineLazy(_http._CryptoUtils, {
  /*_http._CryptoUtils.PAD*/get PAD() {
    return 61;
  },
  /*_http._CryptoUtils.CR*/get CR() {
    return 13;
  },
  /*_http._CryptoUtils.LF*/get LF() {
    return 10;
  },
  /*_http._CryptoUtils.LINE_LENGTH*/get LINE_LENGTH() {
    return 76;
  },
  /*_http._CryptoUtils._encodeTable*/get _encodeTable() {
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  },
  /*_http._CryptoUtils._encodeTableUrlSafe*/get _encodeTableUrlSafe() {
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  },
  /*_http._CryptoUtils._decodeTable*/get _decodeTable() {
    return C483 || CT.C483;
  },
  /*_http._CryptoUtils._rng*/get _rng() {
    return math.Random.secure();
  },
  set _rng(_) {}
});
const _lengthInBytes = dart.privateName(_http, "_lengthInBytes");
const _currentChunk = dart.privateName(_http, "_currentChunk");
const _h = dart.privateName(_http, "_h");
const _digestCalled = dart.privateName(_http, "_digestCalled");
const _chunkSizeInWords$ = dart.privateName(_http, "_chunkSizeInWords");
const _digestSizeInWords$ = dart.privateName(_http, "_digestSizeInWords");
const _bigEndianWords$ = dart.privateName(_http, "_bigEndianWords");
const _pendingData = dart.privateName(_http, "_pendingData");
const _iterate = dart.privateName(_http, "_iterate");
const _resultAsBytes = dart.privateName(_http, "_resultAsBytes");
const _finalizeData = dart.privateName(_http, "_finalizeData");
const _add32 = dart.privateName(_http, "_add32");
const _roundUp = dart.privateName(_http, "_roundUp");
const _rotl32 = dart.privateName(_http, "_rotl32");
const _wordToBytes = dart.privateName(_http, "_wordToBytes");
const _bytesToChunk = dart.privateName(_http, "_bytesToChunk");
const _updateHash = dart.privateName(_http, "_updateHash");
_http._HashBase = class _HashBase extends core.Object {
  add(data) {
    if (dart.test(this[_digestCalled])) {
      dart.throw(new core.StateError.new("Hash update method called after digest was retrieved"));
    }
    this[_lengthInBytes] = dart.notNull(this[_lengthInBytes]) + dart.notNull(data[$length]);
    this[_pendingData][$addAll](data);
    this[_iterate]();
  }
  close() {
    if (dart.test(this[_digestCalled])) {
      return this[_resultAsBytes]();
    }
    this[_digestCalled] = true;
    this[_finalizeData]();
    this[_iterate]();
    if (!(this[_pendingData][$length] === 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/crypto.dart", 219, 12, "_pendingData.length == 0");
    return this[_resultAsBytes]();
  }
  get blockSize() {
    return dart.notNull(this[_chunkSizeInWords$]) * 4;
  }
  [_add32](x, y) {
    return dart.dsend(dart.dsend(x, '+', [y]), '&', [4294967295.0]);
  }
  [_roundUp](val, n) {
    return dart.dsend(dart.dsend(dart.dsend(val, '+', [n]), '-', [1]), '&', [dart.dsend(n, '_negate', [])]);
  }
  [_rotl32](val, shift) {
    let mod_shift = dart.notNull(shift) & 31;
    return (val[$leftShift](mod_shift) & 4294967295.0 | ((dart.notNull(val) & 4294967295.0) >>> 0)[$rightShift](32 - mod_shift)) >>> 0;
  }
  [_resultAsBytes]() {
    let result = JSArrayOfint().of([]);
    for (let i = 0; i < dart.notNull(this[_h][$length]); i = i + 1) {
      result[$addAll](this[_wordToBytes](this[_h][$_get](i)));
    }
    return result;
  }
  [_bytesToChunk](data, dataIndex) {
    if (!(dart.notNull(data[$length]) - dart.notNull(dataIndex) >= dart.notNull(this[_chunkSizeInWords$]) * 4)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/crypto.dart", 256, 12, "(data.length - dataIndex) >= (_chunkSizeInWords * _BYTES_PER_WORD)");
    for (let wordIndex = 0; wordIndex < dart.notNull(this[_chunkSizeInWords$]); wordIndex = wordIndex + 1) {
      let w3 = dart.test(this[_bigEndianWords$]) ? data[$_get](dataIndex) : data[$_get](dart.notNull(dataIndex) + 3);
      let w2 = dart.test(this[_bigEndianWords$]) ? data[$_get](dart.notNull(dataIndex) + 1) : data[$_get](dart.notNull(dataIndex) + 2);
      let w1 = dart.test(this[_bigEndianWords$]) ? data[$_get](dart.notNull(dataIndex) + 2) : data[$_get](dart.notNull(dataIndex) + 1);
      let w0 = dart.test(this[_bigEndianWords$]) ? data[$_get](dart.notNull(dataIndex) + 3) : data[$_get](dataIndex);
      dataIndex = dart.notNull(dataIndex) + 4;
      let word = (dart.notNull(w3) & 255) << 24 >>> 0;
      word = (word | (dart.notNull(w2) & 255) >>> 0 << 16 >>> 0) >>> 0;
      word = (word | (dart.notNull(w1) & 255) >>> 0 << 8 >>> 0) >>> 0;
      word = (word | (dart.notNull(w0) & 255) >>> 0) >>> 0;
      this[_currentChunk][$_set](wordIndex, word);
    }
  }
  [_wordToBytes](word) {
    let bytes = ListOfint().new(4);
    bytes[$_set](0, (word[$rightShift](dart.test(this[_bigEndianWords$]) ? 24 : 0) & 255) >>> 0);
    bytes[$_set](1, (word[$rightShift](dart.test(this[_bigEndianWords$]) ? 16 : 8) & 255) >>> 0);
    bytes[$_set](2, (word[$rightShift](dart.test(this[_bigEndianWords$]) ? 8 : 16) & 255) >>> 0);
    bytes[$_set](3, (word[$rightShift](dart.test(this[_bigEndianWords$]) ? 0 : 24) & 255) >>> 0);
    return bytes;
  }
  [_iterate]() {
    let len = this[_pendingData][$length];
    let chunkSizeInBytes = dart.notNull(this[_chunkSizeInWords$]) * 4;
    if (dart.notNull(len) >= chunkSizeInBytes) {
      let index = 0;
      for (; dart.notNull(len) - index >= chunkSizeInBytes; index = index + chunkSizeInBytes) {
        this[_bytesToChunk](this[_pendingData], index);
        this[_updateHash](this[_currentChunk]);
      }
      this[_pendingData] = this[_pendingData][$sublist](index, len);
    }
  }
  [_finalizeData]() {
    this[_pendingData][$add](128);
    let contentsLength = dart.notNull(this[_lengthInBytes]) + 9;
    let chunkSizeInBytes = dart.notNull(this[_chunkSizeInWords$]) * 4;
    let finalizedLength = this[_roundUp](contentsLength, chunkSizeInBytes);
    let zeroPadding = dart.dsend(finalizedLength, '-', [contentsLength]);
    for (let i = 0; i < dart.notNull(core.num._check(zeroPadding)); i = i + 1) {
      this[_pendingData][$add](0);
    }
    let lengthInBits = dart.notNull(this[_lengthInBytes]) * 8;
    if (!(lengthInBits < math.pow(2, 32))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/crypto.dart", 309, 12, "lengthInBits < pow(2, 32)");
    if (dart.test(this[_bigEndianWords$])) {
      this[_pendingData][$addAll](this[_wordToBytes](0));
      this[_pendingData][$addAll](this[_wordToBytes]((lengthInBits & 4294967295.0) >>> 0));
    } else {
      this[_pendingData][$addAll](this[_wordToBytes]((lengthInBits & 4294967295.0) >>> 0));
      this[_pendingData][$addAll](this[_wordToBytes](0));
    }
  }
};
(_http._HashBase.new = function(_chunkSizeInWords, _digestSizeInWords, _bigEndianWords) {
  this[_lengthInBytes] = 0;
  this[_currentChunk] = null;
  this[_h] = null;
  this[_digestCalled] = false;
  this[_chunkSizeInWords$] = _chunkSizeInWords;
  this[_digestSizeInWords$] = _digestSizeInWords;
  this[_bigEndianWords$] = _bigEndianWords;
  this[_pendingData] = JSArrayOfint().of([]);
  this[_currentChunk] = ListOfint().new(this[_chunkSizeInWords$]);
  this[_h] = ListOfint().new(this[_digestSizeInWords$]);
}).prototype = _http._HashBase.prototype;
;
;
dart.setGetterSignature(_http._HashBase, () => ({
  __proto__: dart.getGetters(_http._HashBase.__proto__),
  blockSize: core.int
}));
dart.setLibraryUri(_http._HashBase, "dart:_http");
;
let C484;
let C485;
_http._MD5 = class _MD5 extends _http._HashBase {
  newInstance() {
    return new _http._MD5.new();
  }
  [_updateHash](m) {
    if (!(m[$length] === 16)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/crypto.dart", 358, 12, "m.length == 16");
    let a = this[_h][$_get](0);
    let b = this[_h][$_get](1);
    let c = this[_h][$_get](2);
    let d = this[_h][$_get](3);
    let t0 = null;
    let t1 = null;
    for (let i = 0; i < 64; i = i + 1) {
      if (i < 16) {
        t0 = (dart.notNull(b) & dart.notNull(c) | (~dart.notNull(b) & 4294967295.0 & dart.notNull(d)) >>> 0) >>> 0;
        t1 = i;
      } else if (i < 32) {
        t0 = (dart.notNull(d) & dart.notNull(b) | (~dart.notNull(d) & 4294967295.0 & dart.notNull(c)) >>> 0) >>> 0;
        t1 = (5 * i + 1)[$modulo](16);
      } else if (i < 48) {
        t0 = (dart.notNull(b) ^ dart.notNull(c) ^ dart.notNull(d)) >>> 0;
        t1 = (3 * i + 5)[$modulo](16);
      } else {
        t0 = (dart.notNull(c) ^ (dart.notNull(b) | (~dart.notNull(d) & 4294967295.0) >>> 0) >>> 0) >>> 0;
        t1 = (7 * i)[$modulo](16);
      }
      let temp = d;
      d = c;
      c = b;
      b = core.int._check(this[_add32](b, this[_rotl32](core.int._check(this[_add32](this[_add32](a, t0), this[_add32](_http._MD5._k[$_get](i), m[$_get](core.int._check(t1))))), _http._MD5._r[$_get](i))));
      a = temp;
    }
    this[_h][$_set](0, core.int._check(this[_add32](a, this[_h][$_get](0))));
    this[_h][$_set](1, core.int._check(this[_add32](b, this[_h][$_get](1))));
    this[_h][$_set](2, core.int._check(this[_add32](c, this[_h][$_get](2))));
    this[_h][$_set](3, core.int._check(this[_add32](d, this[_h][$_get](3))));
  }
};
(_http._MD5.new = function() {
  _http._MD5.__proto__.new.call(this, 16, 4, false);
  this[_h][$_set](0, 1732584193);
  this[_h][$_set](1, 4023233417);
  this[_h][$_set](2, 2562383102);
  this[_h][$_set](3, 271733878);
}).prototype = _http._MD5.prototype;
;
;
dart.setLibraryUri(_http._MD5, "dart:_http");
dart.defineLazy(_http._MD5, {
  /*_http._MD5._k*/get _k() {
    return C484 || CT.C484;
  },
  /*_http._MD5._r*/get _r() {
    return C485 || CT.C485;
  }
});
const _w = dart.privateName(_http, "_w");
_http._SHA1 = class _SHA1 extends _http._HashBase {
  newInstance() {
    return new _http._SHA1.new();
  }
  [_updateHash](m) {
    if (!(m[$length] === 16)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/crypto.dart", 419, 12, "m.length == 16");
    let a = this[_h][$_get](0);
    let b = this[_h][$_get](1);
    let c = this[_h][$_get](2);
    let d = this[_h][$_get](3);
    let e = this[_h][$_get](4);
    for (let i = 0; i < 80; i = i + 1) {
      if (i < 16) {
        this[_w][$_set](i, m[$_get](i));
      } else {
        let n = (dart.notNull(this[_w][$_get](i - 3)) ^ dart.notNull(this[_w][$_get](i - 8)) ^ dart.notNull(this[_w][$_get](i - 14)) ^ dart.notNull(this[_w][$_get](i - 16))) >>> 0;
        this[_w][$_set](i, this[_rotl32](n, 1));
      }
      let t = this[_add32](this[_add32](this[_rotl32](a, 5), e), this[_w][$_get](i));
      if (i < 20) {
        t = this[_add32](this[_add32](t, (dart.notNull(b) & dart.notNull(c) | (~dart.notNull(b) & dart.notNull(d)) >>> 0) >>> 0), 1518500249);
      } else if (i < 40) {
        t = this[_add32](this[_add32](t, (dart.notNull(b) ^ dart.notNull(c) ^ dart.notNull(d)) >>> 0), 1859775393);
      } else if (i < 60) {
        t = this[_add32](this[_add32](t, (dart.notNull(b) & dart.notNull(c) | (dart.notNull(b) & dart.notNull(d)) >>> 0 | (dart.notNull(c) & dart.notNull(d)) >>> 0) >>> 0), 2400959708);
      } else {
        t = this[_add32](this[_add32](t, (dart.notNull(b) ^ dart.notNull(c) ^ dart.notNull(d)) >>> 0), 3395469782);
      }
      e = d;
      d = c;
      c = this[_rotl32](b, 30);
      b = a;
      a = core.int._check(dart.dsend(t, '&', [4294967295.0]));
    }
    this[_h][$_set](0, core.int._check(this[_add32](a, this[_h][$_get](0))));
    this[_h][$_set](1, core.int._check(this[_add32](b, this[_h][$_get](1))));
    this[_h][$_set](2, core.int._check(this[_add32](c, this[_h][$_get](2))));
    this[_h][$_set](3, core.int._check(this[_add32](d, this[_h][$_get](3))));
    this[_h][$_set](4, core.int._check(this[_add32](e, this[_h][$_get](4))));
  }
};
(_http._SHA1.new = function() {
  this[_w] = ListOfint().new(80);
  _http._SHA1.__proto__.new.call(this, 16, 5, true);
  this[_h][$_set](0, 1732584193);
  this[_h][$_set](1, 4023233417);
  this[_h][$_set](2, 2562383102);
  this[_h][$_set](3, 271733878);
  this[_h][$_set](4, 3285377520);
}).prototype = _http._SHA1.prototype;
;
;
dart.setLibraryUri(_http._SHA1, "dart:_http");
;
let C486;
let C487;
let C488;
let C489;
let C490;
let C491;
_http.HttpDate = class HttpDate extends core.Object {
  static format(date) {
    let t98;
    let wkday = C486 || CT.C486;
    let month = C487 || CT.C487;
    let d = date.toUtc();
    let sb = (t98 = new core.StringBuffer.new(), t98.write(wkday[$_get](dart.notNull(d.weekday) - 1)), t98.write(", "), t98.write(dart.notNull(d.day) <= 9 ? "0" : ""), t98.write(dart.toString(d.day)), t98.write(" "), t98.write(month[$_get](dart.notNull(d.month) - 1)), t98.write(" "), t98.write(dart.toString(d.year)), t98.write(dart.notNull(d.hour) <= 9 ? " 0" : " "), t98.write(dart.toString(d.hour)), t98.write(dart.notNull(d.minute) <= 9 ? ":0" : ":"), t98.write(dart.toString(d.minute)), t98.write(dart.notNull(d.second) <= 9 ? ":0" : ":"), t98.write(dart.toString(d.second)), t98.write(" GMT"), t98);
    return dart.toString(sb);
  }
  static parse(date) {
    let SP = 32;
    let wkdays = C486 || CT.C486;
    let weekdays = C488 || CT.C488;
    let months = C487 || CT.C487;
    let wkdaysLowerCase = C489 || CT.C489;
    let weekdaysLowerCase = C490 || CT.C490;
    let monthsLowerCase = C491 || CT.C491;
    let formatRfc1123 = 0;
    let formatRfc850 = 1;
    let formatAsctime = 2;
    let index = 0;
    let tmp = null;
    let format = null;
    function expect(s) {
      if (date.length - index < s.length) {
        dart.throw(new _http.HttpException.new("Invalid HTTP date " + dart.str(date)));
      }
      let tmp = date[$substring](index, index + s.length);
      if (tmp !== s) {
        dart.throw(new _http.HttpException.new("Invalid HTTP date " + dart.str(date)));
      }
      index = index + s.length;
    }
    dart.fn(expect, StringTovoid());
    function expectWeekday() {
      let weekday = null;
      let pos = date[$indexOf](",", index);
      if (pos === -1) {
        let pos = date[$indexOf](" ", index);
        if (pos === -1) dart.throw(new _http.HttpException.new("Invalid HTTP date " + dart.str(date)));
        tmp = date[$substring](index, pos);
        index = pos + 1;
        weekday = wkdays[$indexOf](tmp);
        if (weekday !== -1) {
          format = formatAsctime;
          return weekday;
        }
      } else {
        tmp = date[$substring](index, pos);
        index = pos + 1;
        weekday = wkdays[$indexOf](tmp);
        if (weekday !== -1) {
          format = formatRfc1123;
          return weekday;
        }
        weekday = weekdays[$indexOf](tmp);
        if (weekday !== -1) {
          format = formatRfc850;
          return weekday;
        }
      }
      dart.throw(new _http.HttpException.new("Invalid HTTP date " + dart.str(date)));
    }
    dart.fn(expectWeekday, VoidToint());
    function expectMonth(separator) {
      let pos = date[$indexOf](separator, index);
      if (pos - index !== 3) dart.throw(new _http.HttpException.new("Invalid HTTP date " + dart.str(date)));
      tmp = date[$substring](index, pos);
      index = pos + 1;
      let month = months[$indexOf](tmp);
      if (month !== -1) return month;
      dart.throw(new _http.HttpException.new("Invalid HTTP date " + dart.str(date)));
    }
    dart.fn(expectMonth, StringToint());
    function expectNum(separator) {
      let pos = null;
      if (separator.length > 0) {
        pos = date[$indexOf](separator, index);
      } else {
        pos = date.length;
      }
      let tmp = date[$substring](index, pos);
      index = dart.notNull(pos) + separator.length;
      try {
        let value = core.int.parse(tmp);
        return value;
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.FormatException.is(e)) {
          dart.throw(new _http.HttpException.new("Invalid HTTP date " + dart.str(date)));
        } else
          throw e$;
      }
    }
    dart.fn(expectNum, StringToint());
    function expectEnd() {
      if (index !== date.length) {
        dart.throw(new _http.HttpException.new("Invalid HTTP date " + dart.str(date)));
      }
    }
    dart.fn(expectEnd, VoidTovoid());
    let weekday = expectWeekday();
    let day = null;
    let month = null;
    let year = null;
    let hours = null;
    let minutes = null;
    let seconds = null;
    if (format === formatAsctime) {
      month = expectMonth(" ");
      if (date[$codeUnitAt](index) === SP) index = index + 1;
      day = expectNum(" ");
      hours = expectNum(":");
      minutes = expectNum(":");
      seconds = expectNum(" ");
      year = expectNum("");
    } else {
      expect(" ");
      day = expectNum(format === formatRfc1123 ? " " : "-");
      month = expectMonth(format === formatRfc1123 ? " " : "-");
      year = expectNum(" ");
      hours = expectNum(":");
      minutes = expectNum(":");
      seconds = expectNum(" ");
      expect("GMT");
    }
    expectEnd();
    return new core.DateTime.utc(year, dart.notNull(month) + 1, day, hours, minutes, seconds, 0);
  }
  static _parseCookieDate(date) {
    let monthsLowerCase = C491 || CT.C491;
    let position = 0;
    function error() {
      dart.throw(new _http.HttpException.new("Invalid cookie date " + dart.str(date)));
    }
    dart.fn(error, VoidTovoid());
    function isEnd() {
      return position === date.length;
    }
    dart.fn(isEnd, VoidTobool());
    function isDelimiter(s) {
      let char = s[$codeUnitAt](0);
      if (char === 9) return true;
      if (char >= 32 && char <= 47) return true;
      if (char >= 59 && char <= 64) return true;
      if (char >= 91 && char <= 96) return true;
      if (char >= 123 && char <= 126) return true;
      return false;
    }
    dart.fn(isDelimiter, StringTobool());
    function isNonDelimiter(s) {
      let char = s[$codeUnitAt](0);
      if (char >= 0 && char <= 8) return true;
      if (char >= 10 && char <= 31) return true;
      if (char >= 48 && char <= 57) return true;
      if (char === 58) return true;
      if (char >= 65 && char <= 90) return true;
      if (char >= 97 && char <= 122) return true;
      if (char >= 127 && char <= 255) return true;
      return false;
    }
    dart.fn(isNonDelimiter, StringTobool());
    function isDigit(s) {
      let char = s[$codeUnitAt](0);
      if (char > 47 && char < 58) return true;
      return false;
    }
    dart.fn(isDigit, StringTobool());
    function getMonth(month) {
      if (month.length < 3) return -1;
      return monthsLowerCase[$indexOf](month[$substring](0, 3));
    }
    dart.fn(getMonth, StringToint());
    function toInt(s) {
      let index = 0;
      for (; index < s.length && dart.test(isDigit(s[$_get](index))); index = index + 1)
        ;
      return core.int.parse(s[$substring](0, index));
    }
    dart.fn(toInt, StringToint());
    let tokens = [];
    while (!dart.test(isEnd())) {
      while (!dart.test(isEnd()) && dart.test(isDelimiter(date[$_get](position))))
        position = position + 1;
      let start = position;
      while (!dart.test(isEnd()) && dart.test(isNonDelimiter(date[$_get](position))))
        position = position + 1;
      tokens[$add](date[$substring](start, position)[$toLowerCase]());
      while (!dart.test(isEnd()) && dart.test(isDelimiter(date[$_get](position))))
        position = position + 1;
    }
    let timeStr = null;
    let dayOfMonthStr = null;
    let monthStr = null;
    let yearStr = null;
    for (let token of tokens) {
      if (dart.dtest(dart.dsend(dart.dload(token, 'length'), '<', [1]))) continue;
      if (timeStr == null && dart.dtest(dart.dsend(dart.dload(token, 'length'), '>=', [5])) && dart.test(isDigit(core.String._check(dart.dsend(token, '_get', [0])))) && (dart.equals(dart.dsend(token, '_get', [1]), ":") || dart.test(isDigit(core.String._check(dart.dsend(token, '_get', [1])))) && dart.equals(dart.dsend(token, '_get', [2]), ":"))) {
        timeStr = core.String._check(token);
      } else if (dayOfMonthStr == null && dart.test(isDigit(core.String._check(dart.dsend(token, '_get', [0]))))) {
        dayOfMonthStr = core.String._check(token);
      } else if (monthStr == null && dart.notNull(getMonth(core.String._check(token))) >= 0) {
        monthStr = core.String._check(token);
      } else if (yearStr == null && dart.dtest(dart.dsend(dart.dload(token, 'length'), '>=', [2])) && dart.test(isDigit(core.String._check(dart.dsend(token, '_get', [0])))) && dart.test(isDigit(core.String._check(dart.dsend(token, '_get', [1]))))) {
        yearStr = core.String._check(token);
      }
    }
    if (timeStr == null || dayOfMonthStr == null || monthStr == null || yearStr == null) {
      error();
    }
    let year = toInt(yearStr);
    if (dart.notNull(year) >= 70 && dart.notNull(year) <= 99)
      year = dart.notNull(year) + 1900;
    else if (dart.notNull(year) >= 0 && dart.notNull(year) <= 69) year = dart.notNull(year) + 2000;
    if (dart.notNull(year) < 1601) error();
    let dayOfMonth = toInt(dayOfMonthStr);
    if (dart.notNull(dayOfMonth) < 1 || dart.notNull(dayOfMonth) > 31) error();
    let month = dart.notNull(getMonth(monthStr)) + 1;
    let timeList = timeStr[$split](":");
    if (timeList[$length] !== 3) error();
    let hour = toInt(timeList[$_get](0));
    let minute = toInt(timeList[$_get](1));
    let second = toInt(timeList[$_get](2));
    if (dart.notNull(hour) > 23) error();
    if (dart.notNull(minute) > 59) error();
    if (dart.notNull(second) > 59) error();
    return new core.DateTime.utc(year, month, dayOfMonth, hour, minute, second, 0);
  }
};
(_http.HttpDate.new = function() {
  ;
}).prototype = _http.HttpDate.prototype;
;
dart.setLibraryUri(_http.HttpDate, "dart:_http");
const _mutable = dart.privateName(_http, "_mutable");
const _noFoldingHeaders = dart.privateName(_http, "_noFoldingHeaders");
const _contentLength = dart.privateName(_http, "_contentLength");
const _persistentConnection = dart.privateName(_http, "_persistentConnection");
const _chunkedTransferEncoding = dart.privateName(_http, "_chunkedTransferEncoding");
const _host = dart.privateName(_http, "_host");
const _port = dart.privateName(_http, "_port");
const _headers = dart.privateName(_http, "_headers");
const _defaultPortForScheme = dart.privateName(_http, "_defaultPortForScheme");
const _checkMutable = dart.privateName(_http, "_checkMutable");
const _addAll = dart.privateName(_http, "_addAll");
const _add$1 = dart.privateName(_http, "_add");
const _set = dart.privateName(_http, "_set");
const _addValue = dart.privateName(_http, "_addValue");
const _updateHostHeader = dart.privateName(_http, "_updateHostHeader");
const _addDate = dart.privateName(_http, "_addDate");
const _addHost = dart.privateName(_http, "_addHost");
const _addExpires = dart.privateName(_http, "_addExpires");
const _addConnection = dart.privateName(_http, "_addConnection");
const _addContentType = dart.privateName(_http, "_addContentType");
const _addContentLength = dart.privateName(_http, "_addContentLength");
const _addTransferEncoding = dart.privateName(_http, "_addTransferEncoding");
const _addIfModifiedSince = dart.privateName(_http, "_addIfModifiedSince");
const _foldHeader = dart.privateName(_http, "_foldHeader");
const _finalize = dart.privateName(_http, "_finalize");
const _build = dart.privateName(_http, "_build");
const _parseCookies = dart.privateName(_http, "_parseCookies");
_http._HttpHeaders = class _HttpHeaders extends core.Object {
  _get(name) {
    return this[_headers][$_get](name[$toLowerCase]());
  }
  value(name) {
    name = name[$toLowerCase]();
    let values = this[_headers][$_get](name);
    if (values == null) return null;
    if (dart.notNull(values[$length]) > 1) {
      dart.throw(new _http.HttpException.new("More than one value for header " + dart.str(name)));
    }
    return values[$_get](0);
  }
  add(name, value) {
    this[_checkMutable]();
    this[_addAll](_http._HttpHeaders._validateField(name), value);
  }
  [_addAll](name, value) {
    if (!(name == _http._HttpHeaders._validateField(name))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_headers.dart", 61, 12, "name == _validateField(name)");
    if (core.Iterable.is(value)) {
      for (let v of value) {
        this[_add$1](name, _http._HttpHeaders._validateValue(v));
      }
    } else {
      this[_add$1](name, _http._HttpHeaders._validateValue(value));
    }
  }
  set(name, value) {
    this[_checkMutable]();
    name = _http._HttpHeaders._validateField(name);
    this[_headers][$remove](name);
    if (name === "transfer-encoding") {
      this[_chunkedTransferEncoding] = false;
    }
    this[_addAll](name, value);
  }
  remove(name, value) {
    this[_checkMutable]();
    name = _http._HttpHeaders._validateField(name);
    value = _http._HttpHeaders._validateValue(value);
    let values = this[_headers][$_get](name);
    if (values != null) {
      let index = values[$indexOf](core.String._check(value));
      if (index !== -1) {
        values[$removeRange](index, dart.notNull(index) + 1);
      }
      if (values[$length] === 0) this[_headers][$remove](name);
    }
    if (name === "transfer-encoding" && dart.equals(value, "chunked")) {
      this[_chunkedTransferEncoding] = false;
    }
  }
  removeAll(name) {
    this[_checkMutable]();
    name = _http._HttpHeaders._validateField(name);
    this[_headers][$remove](name);
  }
  forEach(f) {
    this[_headers][$forEach](f);
  }
  noFolding(name) {
    name = _http._HttpHeaders._validateField(name);
    if (this[_noFoldingHeaders] == null) this[_noFoldingHeaders] = JSArrayOfString().of([]);
    this[_noFoldingHeaders][$add](name);
  }
  get persistentConnection() {
    return this[_persistentConnection];
  }
  set persistentConnection(persistentConnection) {
    this[_checkMutable]();
    if (dart.equals(persistentConnection, this[_persistentConnection])) return;
    if (dart.test(persistentConnection)) {
      if (this.protocolVersion === "1.1") {
        this.remove("connection", "close");
      } else {
        if (this[_contentLength] === -1) {
          dart.throw(new _http.HttpException.new("Trying to set 'Connection: Keep-Alive' on HTTP 1.0 headers with " + "no ContentLength"));
        }
        this.add("connection", "keep-alive");
      }
    } else {
      if (this.protocolVersion === "1.1") {
        this.add("connection", "close");
      } else {
        this.remove("connection", "keep-alive");
      }
    }
    this[_persistentConnection] = persistentConnection;
  }
  get contentLength() {
    return this[_contentLength];
  }
  set contentLength(contentLength) {
    this[_checkMutable]();
    if (this.protocolVersion === "1.0" && dart.test(this.persistentConnection) && contentLength === -1) {
      dart.throw(new _http.HttpException.new("Trying to clear ContentLength on HTTP 1.0 headers with " + "'Connection: Keep-Alive' set"));
    }
    if (this[_contentLength] == contentLength) return;
    this[_contentLength] = contentLength;
    if (dart.notNull(this[_contentLength]) >= 0) {
      if (dart.test(this.chunkedTransferEncoding)) this.chunkedTransferEncoding = false;
      this[_set]("content-length", dart.toString(contentLength));
    } else {
      this.removeAll("content-length");
      if (this.protocolVersion === "1.1") {
        this.chunkedTransferEncoding = true;
      }
    }
  }
  get chunkedTransferEncoding() {
    return this[_chunkedTransferEncoding];
  }
  set chunkedTransferEncoding(chunkedTransferEncoding) {
    this[_checkMutable]();
    if (dart.test(chunkedTransferEncoding) && this.protocolVersion === "1.0") {
      dart.throw(new _http.HttpException.new("Trying to set 'Transfer-Encoding: Chunked' on HTTP 1.0 headers"));
    }
    if (dart.equals(chunkedTransferEncoding, this[_chunkedTransferEncoding])) return;
    if (dart.test(chunkedTransferEncoding)) {
      let values = this[_headers][$_get]("transfer-encoding");
      if (values == null || values[$last] !== "chunked") {
        this[_addValue]("transfer-encoding", "chunked");
      }
      this.contentLength = -1;
    } else {
      this.remove("transfer-encoding", "chunked");
    }
    this[_chunkedTransferEncoding] = chunkedTransferEncoding;
  }
  get host() {
    return this[_host];
  }
  set host(host) {
    this[_checkMutable]();
    this[_host] = host;
    this[_updateHostHeader]();
  }
  get port() {
    return this[_port];
  }
  set port(port) {
    this[_checkMutable]();
    this[_port] = port;
    this[_updateHostHeader]();
  }
  get ifModifiedSince() {
    let values = this[_headers][$_get]("if-modified-since");
    if (values != null) {
      try {
        return _http.HttpDate.parse(values[$_get](0));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Exception.is(e)) {
          return null;
        } else
          throw e$;
      }
    }
    return null;
  }
  set ifModifiedSince(ifModifiedSince) {
    this[_checkMutable]();
    let formatted = _http.HttpDate.format(ifModifiedSince.toUtc());
    this[_set]("if-modified-since", formatted);
  }
  get date() {
    let values = this[_headers][$_get]("date");
    if (values != null) {
      try {
        return _http.HttpDate.parse(values[$_get](0));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Exception.is(e)) {
          return null;
        } else
          throw e$;
      }
    }
    return null;
  }
  set date(date) {
    this[_checkMutable]();
    let formatted = _http.HttpDate.format(date.toUtc());
    this[_set]("date", formatted);
  }
  get expires() {
    let values = this[_headers][$_get]("expires");
    if (values != null) {
      try {
        return _http.HttpDate.parse(values[$_get](0));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Exception.is(e)) {
          return null;
        } else
          throw e$;
      }
    }
    return null;
  }
  set expires(expires) {
    this[_checkMutable]();
    let formatted = _http.HttpDate.format(expires.toUtc());
    this[_set]("expires", formatted);
  }
  get contentType() {
    let values = this[_headers][$_get]("content-type");
    if (values != null) {
      return _http.ContentType.parse(values[$_get](0));
    } else {
      return null;
    }
  }
  set contentType(contentType) {
    this[_checkMutable]();
    this[_set]("content-type", dart.toString(contentType));
  }
  clear() {
    this[_checkMutable]();
    this[_headers][$clear]();
    this[_contentLength] = -1;
    this[_persistentConnection] = true;
    this[_chunkedTransferEncoding] = false;
    this[_host] = null;
    this[_port] = null;
  }
  [_add$1](name, value) {
    if (!(name == _http._HttpHeaders._validateField(name))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_headers.dart", 286, 12, "name == _validateField(name)");
    switch (name.length) {
      case 4:
      {
        if ("date" === name) {
          this[_addDate](name, value);
          return;
        }
        if ("host" === name) {
          this[_addHost](name, value);
          return;
        }
        break;
      }
      case 7:
      {
        if ("expires" === name) {
          this[_addExpires](name, value);
          return;
        }
        break;
      }
      case 10:
      {
        if ("connection" === name) {
          this[_addConnection](name, value);
          return;
        }
        break;
      }
      case 12:
      {
        if ("content-type" === name) {
          this[_addContentType](name, value);
          return;
        }
        break;
      }
      case 14:
      {
        if ("content-length" === name) {
          this[_addContentLength](name, value);
          return;
        }
        break;
      }
      case 17:
      {
        if ("transfer-encoding" === name) {
          this[_addTransferEncoding](name, value);
          return;
        }
        if ("if-modified-since" === name) {
          this[_addIfModifiedSince](name, value);
          return;
        }
      }
    }
    this[_addValue](name, value);
  }
  [_addContentLength](name, value) {
    if (core.int.is(value)) {
      this.contentLength = value;
    } else if (typeof value == 'string') {
      this.contentLength = core.int.parse(value);
    } else {
      dart.throw(new _http.HttpException.new("Unexpected type for header named " + dart.str(name)));
    }
  }
  [_addTransferEncoding](name, value) {
    if (dart.equals(value, "chunked")) {
      this.chunkedTransferEncoding = true;
    } else {
      this[_addValue]("transfer-encoding", value);
    }
  }
  [_addDate](name, value) {
    if (core.DateTime.is(value)) {
      this.date = value;
    } else if (typeof value == 'string') {
      this[_set]("date", value);
    } else {
      dart.throw(new _http.HttpException.new("Unexpected type for header named " + dart.str(name)));
    }
  }
  [_addExpires](name, value) {
    if (core.DateTime.is(value)) {
      this.expires = value;
    } else if (typeof value == 'string') {
      this[_set]("expires", value);
    } else {
      dart.throw(new _http.HttpException.new("Unexpected type for header named " + dart.str(name)));
    }
  }
  [_addIfModifiedSince](name, value) {
    if (core.DateTime.is(value)) {
      this.ifModifiedSince = value;
    } else if (typeof value == 'string') {
      this[_set]("if-modified-since", value);
    } else {
      dart.throw(new _http.HttpException.new("Unexpected type for header named " + dart.str(name)));
    }
  }
  [_addHost](name, value) {
    if (typeof value == 'string') {
      let pos = value[$indexOf](":");
      if (pos === -1) {
        this[_host] = value;
        this[_port] = 80;
      } else {
        if (pos > 0) {
          this[_host] = value[$substring](0, pos);
        } else {
          this[_host] = null;
        }
        if (pos + 1 === value.length) {
          this[_port] = 80;
        } else {
          try {
            this[_port] = core.int.parse(value[$substring](pos + 1));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.FormatException.is(e)) {
              this[_port] = null;
            } else
              throw e$;
          }
        }
      }
      this[_set]("host", value);
    } else {
      dart.throw(new _http.HttpException.new("Unexpected type for header named " + dart.str(name)));
    }
  }
  [_addConnection](name, value) {
    let lowerCaseValue = dart.dsend(value, 'toLowerCase', []);
    if (dart.equals(lowerCaseValue, "close")) {
      this[_persistentConnection] = false;
    } else if (dart.equals(lowerCaseValue, "keep-alive")) {
      this[_persistentConnection] = true;
    }
    this[_addValue](name, value);
  }
  [_addContentType](name, value) {
    this[_set]("content-type", core.String._check(value));
  }
  [_addValue](name, value) {
    let values = this[_headers][$_get](name);
    if (values == null) {
      values = JSArrayOfString().of([]);
      this[_headers][$_set](name, values);
    }
    if (core.DateTime.is(value)) {
      values[$add](_http.HttpDate.format(value));
    } else if (typeof value == 'string') {
      values[$add](value);
    } else {
      values[$add](core.String._check(_http._HttpHeaders._validateValue(dart.toString(value))));
    }
  }
  [_set](name, value) {
    if (!(name == _http._HttpHeaders._validateField(name))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_headers.dart", 443, 12, "name == _validateField(name)");
    let values = JSArrayOfString().of([]);
    this[_headers][$_set](name, values);
    values[$add](value);
  }
  [_checkMutable]() {
    if (!dart.test(this[_mutable])) dart.throw(new _http.HttpException.new("HTTP headers are not mutable"));
  }
  [_updateHostHeader]() {
    let defaultPort = this[_port] == null || this[_port] == this[_defaultPortForScheme];
    this[_set]("host", defaultPort ? this.host : dart.str(this.host) + ":" + dart.str(this[_port]));
  }
  [_foldHeader](name) {
    if (name === "set-cookie" || this[_noFoldingHeaders] != null && this[_noFoldingHeaders][$indexOf](name) !== -1) {
      return false;
    }
    return true;
  }
  [_finalize]() {
    this[_mutable] = false;
  }
  [_build](builder) {
    for (let name of this[_headers][$keys]) {
      let values = this[_headers][$_get](name);
      let fold = core.bool._check(this[_foldHeader](name));
      let nameData = name[$codeUnits];
      builder.add(nameData);
      builder.addByte(58);
      builder.addByte(32);
      for (let i = 0; i < dart.notNull(values[$length]); i = i + 1) {
        if (i > 0) {
          if (dart.test(fold)) {
            builder.addByte(44);
            builder.addByte(32);
          } else {
            builder.addByte(13);
            builder.addByte(10);
            builder.add(nameData);
            builder.addByte(58);
            builder.addByte(32);
          }
        }
        builder.add(values[$_get](i)[$codeUnits]);
      }
      builder.addByte(13);
      builder.addByte(10);
    }
  }
  toString() {
    let sb = new core.StringBuffer.new();
    this[_headers][$forEach](dart.fn((name, values) => {
      let t103, t103$;
      t103 = sb;
      t103.write(name);
      t103.write(": ");
      t103;
      let fold = core.bool._check(this[_foldHeader](name));
      for (let i = 0; i < dart.notNull(values[$length]); i = i + 1) {
        if (i > 0) {
          if (dart.test(fold)) {
            sb.write(", ");
          } else {
            t103$ = sb;
            t103$.write("\n");
            t103$.write(name);
            t103$.write(": ");
            t103$;
          }
        }
        sb.write(values[$_get](i));
      }
      sb.write("\n");
    }, StringAndListOfStringToNull()));
    return sb.toString();
  }
  [_parseCookies]() {
    let cookies = JSArrayOfCookie().of([]);
    function parseCookieString(s) {
      let index = 0;
      function done() {
        return index === -1 || index === s.length;
      }
      dart.fn(done, VoidTobool());
      function skipWS() {
        while (!dart.test(done())) {
          if (s[$_get](index) !== " " && s[$_get](index) !== "\t") return;
          index = index + 1;
        }
      }
      dart.fn(skipWS, VoidTovoid());
      function parseName() {
        let start = index;
        while (!dart.test(done())) {
          if (s[$_get](index) === " " || s[$_get](index) === "\t" || s[$_get](index) === "=") break;
          index = index + 1;
        }
        return s[$substring](start, index);
      }
      dart.fn(parseName, VoidToString());
      function parseValue() {
        let start = index;
        while (!dart.test(done())) {
          if (s[$_get](index) === " " || s[$_get](index) === "\t" || s[$_get](index) === ";") break;
          index = index + 1;
        }
        return s[$substring](start, index);
      }
      dart.fn(parseValue, VoidToString());
      function expect(expected) {
        if (dart.test(done())) return false;
        if (s[$_get](index) !== expected) return false;
        index = index + 1;
        return true;
      }
      dart.fn(expect, StringTobool());
      while (!dart.test(done())) {
        skipWS();
        if (dart.test(done())) return;
        let name = parseName();
        skipWS();
        if (!dart.test(expect("="))) {
          index = s[$indexOf](";", index);
          continue;
        }
        skipWS();
        let value = parseValue();
        try {
          cookies[$add](new _http._Cookie.new(name, value));
        } catch (e) {
          let _ = dart.getThrown(e);
        }
        skipWS();
        if (dart.test(done())) return;
        if (!dart.test(expect(";"))) {
          index = s[$indexOf](";", index);
          continue;
        }
      }
    }
    dart.fn(parseCookieString, StringTovoid());
    let values = this[_headers][$_get]("cookie");
    if (values != null) {
      values[$forEach](dart.fn(headerValue => parseCookieString(headerValue), StringTovoid()));
    }
    return cookies;
  }
  static _validateField(field) {
    for (let i = 0; i < field.length; i = i + 1) {
      if (!dart.test(_http._HttpParser._isTokenChar(field[$codeUnitAt](i)))) {
        dart.throw(new core.FormatException.new("Invalid HTTP header field name: " + dart.str(convert.json.encode(field))));
      }
    }
    return field[$toLowerCase]();
  }
  static _validateValue(value) {
    if (!(typeof value == 'string')) return value;
    for (let i = 0; i < dart.notNull(core.num._check(dart.dload(value, 'length'))); i = i + 1) {
      if (!dart.test(_http._HttpParser._isValueChar(core.int._check(dart.dsend(value, 'codeUnitAt', [i]))))) {
        dart.throw(new core.FormatException.new("Invalid HTTP header field value: " + dart.str(convert.json.encode(value))));
      }
    }
    return value;
  }
};
(_http._HttpHeaders.new = function(protocolVersion, opts) {
  let defaultPortForScheme = opts && 'defaultPortForScheme' in opts ? opts.defaultPortForScheme : 80;
  let initialHeaders = opts && 'initialHeaders' in opts ? opts.initialHeaders : null;
  this[_mutable] = true;
  this[_noFoldingHeaders] = null;
  this[_contentLength] = -1;
  this[_persistentConnection] = true;
  this[_chunkedTransferEncoding] = false;
  this[_host] = null;
  this[_port] = null;
  this.protocolVersion = protocolVersion;
  this[_headers] = new (IdentityMapOfString$ListOfString()).new();
  this[_defaultPortForScheme] = defaultPortForScheme;
  if (initialHeaders != null) {
    initialHeaders[_headers][$forEach](dart.fn((name, value) => {
      let t101, t100, t99;
      t99 = this[_headers];
      t100 = name;
      t101 = value;
      t99[$_set](t100, t101);
      return t101;
    }, StringAndListOfStringToListOfString()));
    this[_contentLength] = initialHeaders[_contentLength];
    this[_persistentConnection] = initialHeaders[_persistentConnection];
    this[_chunkedTransferEncoding] = initialHeaders[_chunkedTransferEncoding];
    this[_host] = initialHeaders[_host];
    this[_port] = initialHeaders[_port];
  }
  if (this.protocolVersion === "1.0") {
    this[_persistentConnection] = false;
    this[_chunkedTransferEncoding] = false;
  }
}).prototype = _http._HttpHeaders.prototype;
;
_http._HttpHeaders[dart.implements] = () => [_http.HttpHeaders];
;
dart.setGetterSignature(_http._HttpHeaders, () => ({
  __proto__: dart.getGetters(_http._HttpHeaders.__proto__),
  persistentConnection: core.bool,
  contentLength: core.int,
  chunkedTransferEncoding: core.bool,
  host: core.String,
  port: core.int,
  ifModifiedSince: core.DateTime,
  date: core.DateTime,
  expires: core.DateTime,
  contentType: _http.ContentType
}));
dart.setSetterSignature(_http._HttpHeaders, () => ({
  __proto__: dart.getSetters(_http._HttpHeaders.__proto__),
  persistentConnection: core.bool,
  contentLength: core.int,
  chunkedTransferEncoding: core.bool,
  host: core.String,
  port: core.int,
  ifModifiedSince: core.DateTime,
  date: core.DateTime,
  expires: core.DateTime,
  contentType: _http.ContentType
}));
dart.setLibraryUri(_http._HttpHeaders, "dart:_http");
;
dart.defineExtensionMethods(_http._HttpHeaders, ['toString']);
const _parameters = dart.privateName(_http, "_parameters");
const _unmodifiableParameters = dart.privateName(_http, "_unmodifiableParameters");
const _value$7 = dart.privateName(_http, "_value");
const _parse = dart.privateName(_http, "_parse");
const _ensureParameters = dart.privateName(_http, "_ensureParameters");
_http._HeaderValue = class _HeaderValue extends core.Object {
  static parse(value, opts) {
    let parameterSeparator = opts && 'parameterSeparator' in opts ? opts.parameterSeparator : ";";
    let valueSeparator = opts && 'valueSeparator' in opts ? opts.valueSeparator : null;
    let preserveBackslash = opts && 'preserveBackslash' in opts ? opts.preserveBackslash : false;
    let result = new _http._HeaderValue.new();
    result[_parse](value, core.String._check(parameterSeparator), core.String._check(valueSeparator), core.bool._check(preserveBackslash));
    return result;
  }
  get value() {
    return this[_value$7];
  }
  [_ensureParameters]() {
    if (this[_parameters] == null) {
      this[_parameters] = new (IdentityMapOfString$String()).new();
    }
  }
  get parameters() {
    this[_ensureParameters]();
    if (this[_unmodifiableParameters] == null) {
      this[_unmodifiableParameters] = new (UnmodifiableMapViewOfString$String()).new(this[_parameters]);
    }
    return this[_unmodifiableParameters];
  }
  toString() {
    let sb = new core.StringBuffer.new();
    sb.write(this[_value$7]);
    if (this.parameters != null && dart.notNull(this.parameters[$length]) > 0) {
      this[_parameters][$forEach](dart.fn((name, value) => {
        let t104;
        t104 = sb;
        t104.write("; ");
        t104.write(name);
        t104.write("=");
        t104.write(value);
        t104;
      }, StringAndStringToNull()));
    }
    return sb.toString();
  }
  [_parse](s, parameterSeparator, valueSeparator, preserveBackslash) {
    let index = 0;
    function done() {
      return index === s.length;
    }
    dart.fn(done, VoidTobool());
    function skipWS() {
      while (!dart.test(done())) {
        if (s[$_get](index) !== " " && s[$_get](index) !== "\t") return;
        index = index + 1;
      }
    }
    dart.fn(skipWS, VoidTovoid());
    function parseValue() {
      let start = index;
      while (!dart.test(done())) {
        if (s[$_get](index) === " " || s[$_get](index) === "\t" || s[$_get](index) === valueSeparator || s[$_get](index) === parameterSeparator) break;
        index = index + 1;
      }
      return s[$substring](start, index);
    }
    dart.fn(parseValue, VoidToString());
    function expect(expected) {
      if (dart.test(done()) || s[$_get](index) !== expected) {
        dart.throw(new _http.HttpException.new("Failed to parse header value"));
      }
      index = index + 1;
    }
    dart.fn(expect, StringTovoid());
    function maybeExpect(expected) {
      if (s[$_get](index) === expected) index = index + 1;
    }
    dart.fn(maybeExpect, StringTovoid());
    const parseParameters = () => {
      let parameters = new (IdentityMapOfString$String()).new();
      this[_parameters] = new (UnmodifiableMapViewOfString$String()).new(parameters);
      function parseParameterName() {
        let start = index;
        while (!dart.test(done())) {
          if (s[$_get](index) === " " || s[$_get](index) === "\t" || s[$_get](index) === "=" || s[$_get](index) === parameterSeparator || s[$_get](index) === valueSeparator) break;
          index = index + 1;
        }
        return s[$substring](start, index)[$toLowerCase]();
      }
      dart.fn(parseParameterName, VoidToString());
      function parseParameterValue() {
        if (!dart.test(done()) && s[$_get](index) === "\"") {
          let sb = new core.StringBuffer.new();
          index = index + 1;
          while (!dart.test(done())) {
            if (s[$_get](index) === "\\") {
              if (index + 1 === s.length) {
                dart.throw(new _http.HttpException.new("Failed to parse header value"));
              }
              if (dart.test(preserveBackslash) && s[$_get](index + 1) !== "\"") {
                sb.write(s[$_get](index));
              }
              index = index + 1;
            } else if (s[$_get](index) === "\"") {
              index = index + 1;
              break;
            }
            sb.write(s[$_get](index));
            index = index + 1;
          }
          return sb.toString();
        } else {
          let val = parseValue();
          return val === "" ? null : val;
        }
      }
      dart.fn(parseParameterValue, VoidToString());
      while (!dart.test(done())) {
        skipWS();
        if (dart.test(done())) return;
        let name = parseParameterName();
        skipWS();
        if (dart.test(done())) {
          parameters[$_set](name, null);
          return;
        }
        maybeExpect("=");
        skipWS();
        if (dart.test(done())) {
          parameters[$_set](name, null);
          return;
        }
        let value = parseParameterValue();
        if (name === "charset" && _http._ContentType.is(this) && value != null) {
          value = value[$toLowerCase]();
        }
        parameters[$_set](name, value);
        skipWS();
        if (dart.test(done())) return;
        if (s[$_get](index) === valueSeparator) return;
        expect(parameterSeparator);
      }
    };
    dart.fn(parseParameters, VoidTovoid());
    skipWS();
    this[_value$7] = parseValue();
    skipWS();
    if (dart.test(done())) return;
    maybeExpect(parameterSeparator);
    parseParameters();
  }
};
(_http._HeaderValue.new = function(_value, parameters) {
  if (_value === void 0) _value = "";
  if (parameters === void 0) parameters = null;
  this[_parameters] = null;
  this[_unmodifiableParameters] = null;
  this[_value$7] = _value;
  if (parameters != null) {
    this[_parameters] = HashMapOfString$String().from(parameters);
  }
}).prototype = _http._HeaderValue.prototype;
;
_http._HeaderValue[dart.implements] = () => [_http.HeaderValue];
;
dart.setGetterSignature(_http._HeaderValue, () => ({
  __proto__: dart.getGetters(_http._HeaderValue.__proto__),
  value: core.String,
  parameters: core.Map$(core.String, core.String)
}));
dart.setLibraryUri(_http._HeaderValue, "dart:_http");
;
dart.defineExtensionMethods(_http._HeaderValue, ['toString']);
const _primaryType = dart.privateName(_http, "_primaryType");
const _subType = dart.privateName(_http, "_subType");
_http._ContentType = class _ContentType extends _http._HeaderValue {
  static parse(value) {
    let result = new _http._ContentType.__();
    result[_parse](value, ";", null, false);
    let index = result[_value$7][$indexOf]("/");
    if (index === -1 || index === result[_value$7].length - 1) {
      result[_primaryType] = result[_value$7][$trim]()[$toLowerCase]();
      result[_subType] = "";
    } else {
      result[_primaryType] = result[_value$7][$substring](0, index)[$trim]()[$toLowerCase]();
      result[_subType] = result[_value$7][$substring](index + 1)[$trim]()[$toLowerCase]();
    }
    return result;
  }
  get mimeType() {
    return dart.str(this.primaryType) + "/" + dart.str(this.subType);
  }
  get primaryType() {
    return this[_primaryType];
  }
  get subType() {
    return this[_subType];
  }
  get charset() {
    return this.parameters[$_get]("charset");
  }
};
(_http._ContentType.new = function(primaryType, subType, charset, parameters) {
  this[_primaryType] = "";
  this[_subType] = "";
  this[_primaryType] = primaryType;
  this[_subType] = subType;
  _http._ContentType.__proto__.new.call(this, "");
  if (this[_primaryType] == null) this[_primaryType] = "";
  if (this[_subType] == null) this[_subType] = "";
  this[_value$7] = dart.str(this[_primaryType]) + "/" + dart.str(this[_subType]);
  if (parameters != null) {
    this[_ensureParameters]();
    parameters[$forEach](dart.fn((key, value) => {
      let lowerCaseKey = key[$toLowerCase]();
      if (lowerCaseKey === "charset") {
        value = value[$toLowerCase]();
      }
      this[_parameters][$_set](lowerCaseKey, value);
    }, StringAndStringToNull()));
  }
  if (charset != null) {
    this[_ensureParameters]();
    this[_parameters][$_set]("charset", charset[$toLowerCase]());
  }
}).prototype = _http._ContentType.prototype;
(_http._ContentType.__ = function() {
  this[_primaryType] = "";
  this[_subType] = "";
  _http._ContentType.__proto__.new.call(this);
  ;
}).prototype = _http._ContentType.prototype;
;
_http._ContentType[dart.implements] = () => [_http.ContentType];
dart.setGetterSignature(_http._ContentType, () => ({
  __proto__: dart.getGetters(_http._ContentType.__proto__),
  mimeType: core.String,
  primaryType: core.String,
  subType: core.String,
  charset: core.String
}));
dart.setLibraryUri(_http._ContentType, "dart:_http");
;
const _parseSetCookieValue = dart.privateName(_http, "_parseSetCookieValue");
let C492;
_http._Cookie = class _Cookie extends core.Object {
  get name() {
    return this[_name$9];
  }
  get value() {
    return this[_value$7];
  }
  set name(newName) {
    _http._Cookie._validateName(newName);
    this[_name$9] = newName;
  }
  set value(newValue) {
    _http._Cookie._validateValue(newValue);
    this[_value$7] = newValue;
  }
  [_parseSetCookieValue](s) {
    let index = 0;
    function done() {
      return index === s.length;
    }
    dart.fn(done, VoidTobool());
    function parseName() {
      let start = index;
      while (!dart.test(done())) {
        if (s[$_get](index) === "=") break;
        index = index + 1;
      }
      return s[$substring](start, index)[$trim]();
    }
    dart.fn(parseName, VoidToString());
    function parseValue() {
      let start = index;
      while (!dart.test(done())) {
        if (s[$_get](index) === ";") break;
        index = index + 1;
      }
      return s[$substring](start, index)[$trim]();
    }
    dart.fn(parseValue, VoidToString());
    function expect(expected) {
      if (dart.test(done())) dart.throw(new _http.HttpException.new("Failed to parse header value [" + dart.str(s) + "]"));
      if (s[$_get](index) !== expected) {
        dart.throw(new _http.HttpException.new("Failed to parse header value [" + dart.str(s) + "]"));
      }
      index = index + 1;
    }
    dart.fn(expect, StringTovoid());
    const parseAttributes = () => {
      function parseAttributeName() {
        let start = index;
        while (!dart.test(done())) {
          if (s[$_get](index) === "=" || s[$_get](index) === ";") break;
          index = index + 1;
        }
        return s[$substring](start, index)[$trim]()[$toLowerCase]();
      }
      dart.fn(parseAttributeName, VoidToString());
      function parseAttributeValue() {
        let start = index;
        while (!dart.test(done())) {
          if (s[$_get](index) === ";") break;
          index = index + 1;
        }
        return s[$substring](start, index)[$trim]()[$toLowerCase]();
      }
      dart.fn(parseAttributeValue, VoidToString());
      while (!dart.test(done())) {
        let name = parseAttributeName();
        let value = "";
        if (!dart.test(done()) && s[$_get](index) === "=") {
          index = index + 1;
          value = parseAttributeValue();
        }
        if (name === "expires") {
          this.expires = _http.HttpDate._parseCookieDate(value);
        } else if (name === "max-age") {
          this.maxAge = core.int.parse(value);
        } else if (name === "domain") {
          this.domain = value;
        } else if (name === "path") {
          this.path = value;
        } else if (name === "httponly") {
          this.httpOnly = true;
        } else if (name === "secure") {
          this.secure = true;
        }
        if (!dart.test(done())) index = index + 1;
      }
    };
    dart.fn(parseAttributes, VoidTovoid());
    this[_name$9] = _http._Cookie._validateName(parseName());
    if (dart.test(done()) || this[_name$9].length === 0) {
      dart.throw(new _http.HttpException.new("Failed to parse header value [" + dart.str(s) + "]"));
    }
    index = index + 1;
    this[_value$7] = _http._Cookie._validateValue(parseValue());
    if (dart.test(done())) return;
    index = index + 1;
    parseAttributes();
  }
  toString() {
    let t104, t104$, t104$0, t104$1, t104$2;
    let sb = new core.StringBuffer.new();
    t104 = sb;
    t104.write(this[_name$9]);
    t104.write("=");
    t104.write(this[_value$7]);
    t104;
    if (this.expires != null) {
      t104$ = sb;
      t104$.write("; Expires=");
      t104$.write(_http.HttpDate.format(this.expires));
      t104$;
    }
    if (this.maxAge != null) {
      t104$0 = sb;
      t104$0.write("; Max-Age=");
      t104$0.write(this.maxAge);
      t104$0;
    }
    if (this.domain != null) {
      t104$1 = sb;
      t104$1.write("; Domain=");
      t104$1.write(this.domain);
      t104$1;
    }
    if (this.path != null) {
      t104$2 = sb;
      t104$2.write("; Path=");
      t104$2.write(this.path);
      t104$2;
    }
    if (dart.test(this.secure)) sb.write("; Secure");
    if (dart.test(this.httpOnly)) sb.write("; HttpOnly");
    return sb.toString();
  }
  static _validateName(newName) {
    let separators = C492 || CT.C492;
    if (newName == null) dart.throw(new core.ArgumentError.notNull("name"));
    for (let i = 0; i < newName.length; i = i + 1) {
      let codeUnit = newName[$codeUnits][$_get](i);
      if (dart.notNull(codeUnit) <= 32 || dart.notNull(codeUnit) >= 127 || dart.notNull(separators[$indexOf](newName[$_get](i))) >= 0) {
        dart.throw(new core.FormatException.new("Invalid character in cookie name, code unit: '" + dart.str(codeUnit) + "'", newName, i));
      }
    }
    return newName;
  }
  static _validateValue(newValue) {
    if (newValue == null) dart.throw(new core.ArgumentError.notNull("value"));
    let start = 0;
    let end = newValue.length;
    if (2 <= newValue.length && newValue[$codeUnits][$_get](start) === 34 && newValue[$codeUnits][$_get](end - 1) === 34) {
      start = start + 1;
      end = end - 1;
    }
    for (let i = start; i < end; i = i + 1) {
      let codeUnit = newValue[$codeUnits][$_get](i);
      if (!(codeUnit === 33 || dart.notNull(codeUnit) >= 35 && dart.notNull(codeUnit) <= 43 || dart.notNull(codeUnit) >= 45 && dart.notNull(codeUnit) <= 58 || dart.notNull(codeUnit) >= 60 && dart.notNull(codeUnit) <= 91 || dart.notNull(codeUnit) >= 93 && dart.notNull(codeUnit) <= 126)) {
        dart.throw(new core.FormatException.new("Invalid character in cookie value, code unit: '" + dart.str(codeUnit) + "'", newValue, i));
      }
    }
    return newValue;
  }
};
(_http._Cookie.new = function(name, value) {
  this.expires = null;
  this.maxAge = null;
  this.domain = null;
  this.path = null;
  this.httpOnly = false;
  this.secure = false;
  this[_name$9] = _http._Cookie._validateName(name);
  this[_value$7] = _http._Cookie._validateValue(value);
  this.httpOnly = true;
  ;
}).prototype = _http._Cookie.prototype;
(_http._Cookie.fromSetCookieValue = function(value) {
  this.expires = null;
  this.maxAge = null;
  this.domain = null;
  this.path = null;
  this.httpOnly = false;
  this.secure = false;
  this[_value$7] = null;
  this[_name$9] = null;
  this[_parseSetCookieValue](value);
}).prototype = _http._Cookie.prototype;
;
_http._Cookie[dart.implements] = () => [_http.Cookie];
;
dart.setGetterSignature(_http._Cookie, () => ({
  __proto__: dart.getGetters(_http._Cookie.__proto__),
  name: core.String,
  value: core.String
}));
dart.setSetterSignature(_http._Cookie, () => ({
  __proto__: dart.getSetters(_http._Cookie.__proto__),
  name: core.String,
  value: core.String
}));
dart.setLibraryUri(_http._Cookie, "dart:_http");
;
dart.defineExtensionMethods(_http._Cookie, ['toString']);
const __serviceId$ = dart.privateName(_http, "__serviceId");
const _serviceId$ = dart.privateName(_http, "_serviceId");
const _serviceTypePath$ = dart.privateName(_http, "_serviceTypePath");
const _servicePath$ = dart.privateName(_http, "_servicePath");
const _serviceTypeName$ = dart.privateName(_http, "_serviceTypeName");
const _serviceType$ = dart.privateName(_http, "_serviceType");
_http._ServiceObject = class _ServiceObject extends core.Object {
  get [_serviceId$]() {
    let t104;
    if (this[__serviceId$] === 0) this[__serviceId$] = (t104 = _http._nextServiceId, _http._nextServiceId = dart.notNull(t104) + 1, t104);
    return this[__serviceId$];
  }
  get [_servicePath$]() {
    return dart.str(this[_serviceTypePath$]) + "/" + dart.str(this[_serviceId$]);
  }
  [_serviceType$](ref) {
    if (dart.test(ref)) return "@" + dart.str(this[_serviceTypeName$]);
    return this[_serviceTypeName$];
  }
};
(_http._ServiceObject.new = function() {
  this[__serviceId$] = 0;
  ;
}).prototype = _http._ServiceObject.prototype;
;
;
dart.setGetterSignature(_http._ServiceObject, () => ({
  __proto__: dart.getGetters(_http._ServiceObject.__proto__),
  [_serviceId$]: core.int,
  [_servicePath$]: core.String
}));
dart.setLibraryUri(_http._ServiceObject, "dart:_http");
;
const _length$2 = dart.privateName(_http, "_length");
const _buffer$1 = dart.privateName(_http, "_buffer");
const _grow$0 = dart.privateName(_http, "_grow");
_http._CopyingBytesBuilder = class _CopyingBytesBuilder extends core.Object {
  add(bytes) {
    let bytesLength = bytes[$length];
    if (bytesLength === 0) return;
    let required = dart.notNull(this[_length$2]) + dart.notNull(bytesLength);
    if (dart.notNull(this[_buffer$1][$length]) < required) {
      this[_grow$0](required);
    }
    if (!(dart.notNull(this[_buffer$1][$length]) >= required)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 54, 12, "_buffer.length >= required");
    if (typed_data.Uint8List.is(bytes)) {
      this[_buffer$1][$setRange](this[_length$2], required, bytes);
    } else {
      for (let i = 0; i < dart.notNull(bytesLength); i = i + 1) {
        this[_buffer$1][$_set](dart.notNull(this[_length$2]) + i, bytes[$_get](i));
      }
    }
    this[_length$2] = required;
  }
  addByte(byte) {
    if (this[_buffer$1][$length] == this[_length$2]) {
      this[_grow$0](this[_length$2]);
    }
    if (!(dart.notNull(this[_buffer$1][$length]) > dart.notNull(this[_length$2]))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 71, 12, "_buffer.length > _length");
    this[_buffer$1][$_set](this[_length$2], byte);
    this[_length$2] = dart.notNull(this[_length$2]) + 1;
  }
  [_grow$0](required) {
    let newSize = dart.notNull(required) * 2;
    if (dart.notNull(newSize) < 1024) {
      newSize = 1024;
    } else {
      newSize = _http._CopyingBytesBuilder._pow2roundup(newSize);
    }
    let newBuffer = _native_typed_data.NativeUint8List.new(newSize);
    newBuffer[$setRange](0, this[_buffer$1][$length], this[_buffer$1]);
    this[_buffer$1] = newBuffer;
  }
  takeBytes() {
    if (this[_length$2] === 0) return _http._CopyingBytesBuilder._emptyList;
    let buffer = typed_data.Uint8List.view(this[_buffer$1][$buffer], 0, this[_length$2]);
    this.clear();
    return buffer;
  }
  toBytes() {
    if (this[_length$2] === 0) return _http._CopyingBytesBuilder._emptyList;
    return _native_typed_data.NativeUint8List.fromList(typed_data.Uint8List.view(this[_buffer$1][$buffer], 0, this[_length$2]));
  }
  get length() {
    return this[_length$2];
  }
  get isEmpty() {
    return this[_length$2] === 0;
  }
  get isNotEmpty() {
    return this[_length$2] !== 0;
  }
  clear() {
    this[_length$2] = 0;
    this[_buffer$1] = _http._CopyingBytesBuilder._emptyList;
  }
  static _pow2roundup(x) {
    if (!(dart.notNull(x) > 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 115, 12, "x > 0");
    x = dart.notNull(x) - 1;
    x = (dart.notNull(x) | x[$rightShift](1)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](2)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](4)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](8)) >>> 0;
    x = (dart.notNull(x) | x[$rightShift](16)) >>> 0;
    return dart.notNull(x) + 1;
  }
};
(_http._CopyingBytesBuilder.new = function(initialCapacity) {
  if (initialCapacity === void 0) initialCapacity = 0;
  this[_length$2] = 0;
  this[_buffer$1] = dart.notNull(initialCapacity) <= 0 ? _http._CopyingBytesBuilder._emptyList : _native_typed_data.NativeUint8List.new(_http._CopyingBytesBuilder._pow2roundup(initialCapacity));
  ;
}).prototype = _http._CopyingBytesBuilder.prototype;
;
_http._CopyingBytesBuilder[dart.implements] = () => [io.BytesBuilder];
;
dart.setGetterSignature(_http._CopyingBytesBuilder, () => ({
  __proto__: dart.getGetters(_http._CopyingBytesBuilder.__proto__),
  length: core.int,
  isEmpty: core.bool,
  isNotEmpty: core.bool
}));
dart.setLibraryUri(_http._CopyingBytesBuilder, "dart:_http");
;
dart.defineLazy(_http._CopyingBytesBuilder, {
  /*_http._CopyingBytesBuilder._INIT_SIZE*/get _INIT_SIZE() {
    return 1024;
  },
  /*_http._CopyingBytesBuilder._emptyList*/get _emptyList() {
    return _native_typed_data.NativeUint8List.new(0);
  }
});
const _dataCompleter = dart.privateName(_http, "_dataCompleter");
const _transferLength$ = dart.privateName(_http, "_transferLength");
const _stream$1 = dart.privateName(_http, "_stream");
_http._HttpIncoming = class _HttpIncoming extends async.Stream$(typed_data.Uint8List) {
  get transferLength() {
    return this[_transferLength$];
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    this.hasSubscriber = true;
    return this[_stream$1].handleError(dart.fn(error => {
      dart.throw(new _http.HttpException.new(core.String._check(dart.dload(error, 'message')), {uri: this.uri}));
    }, dynamicToNull())).listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  get dataDone() {
    return this[_dataCompleter].future;
  }
  close(closing) {
    this.fullBodyRead = true;
    this.hasSubscriber = true;
    this[_dataCompleter].complete(closing);
  }
};
(_http._HttpIncoming.new = function(headers, _transferLength, _stream) {
  this[_dataCompleter] = async.Completer.new();
  this.fullBodyRead = false;
  this.upgraded = false;
  this.statusCode = null;
  this.reasonPhrase = null;
  this.method = null;
  this.uri = null;
  this.hasSubscriber = false;
  this.headers = headers;
  this[_transferLength$] = _transferLength;
  this[_stream$1] = _stream;
  _http._HttpIncoming.__proto__.new.call(this);
  ;
}).prototype = _http._HttpIncoming.prototype;
;
;
dart.setGetterSignature(_http._HttpIncoming, () => ({
  __proto__: dart.getGetters(_http._HttpIncoming.__proto__),
  transferLength: core.int,
  dataDone: async.Future
}));
dart.setLibraryUri(_http._HttpIncoming, "dart:_http");
;
const _cookies = dart.privateName(_http, "_cookies");
const _incoming$ = dart.privateName(_http, "_incoming");
_http._HttpInboundMessageListInt = class _HttpInboundMessageListInt extends async.Stream$(core.List$(core.int)) {
  get cookies() {
    if (this[_cookies] != null) return this[_cookies];
    return this[_cookies] = this.headers[_parseCookies]();
  }
  get headers() {
    return this[_incoming$].headers;
  }
  get protocolVersion() {
    return this.headers.protocolVersion;
  }
  get contentLength() {
    return this.headers.contentLength;
  }
  get persistentConnection() {
    return this.headers.persistentConnection;
  }
};
(_http._HttpInboundMessageListInt.new = function(_incoming) {
  this[_cookies] = null;
  this[_incoming$] = _incoming;
  _http._HttpInboundMessageListInt.__proto__.new.call(this);
  ;
}).prototype = _http._HttpInboundMessageListInt.prototype;
;
dart.setGetterSignature(_http._HttpInboundMessageListInt, () => ({
  __proto__: dart.getGetters(_http._HttpInboundMessageListInt.__proto__),
  cookies: core.List$(_http.Cookie),
  headers: _http._HttpHeaders,
  protocolVersion: core.String,
  contentLength: core.int,
  persistentConnection: core.bool
}));
dart.setLibraryUri(_http._HttpInboundMessageListInt, "dart:_http");
;
_http._HttpInboundMessage = class _HttpInboundMessage extends async.Stream$(typed_data.Uint8List) {
  get cookies() {
    if (this[_cookies] != null) return this[_cookies];
    return this[_cookies] = this.headers[_parseCookies]();
  }
  get headers() {
    return this[_incoming$].headers;
  }
  get protocolVersion() {
    return this.headers.protocolVersion;
  }
  get contentLength() {
    return this.headers.contentLength;
  }
  get persistentConnection() {
    return this.headers.persistentConnection;
  }
};
(_http._HttpInboundMessage.new = function(_incoming) {
  this[_cookies] = null;
  this[_incoming$] = _incoming;
  _http._HttpInboundMessage.__proto__.new.call(this);
  ;
}).prototype = _http._HttpInboundMessage.prototype;
;
dart.setGetterSignature(_http._HttpInboundMessage, () => ({
  __proto__: dart.getGetters(_http._HttpInboundMessage.__proto__),
  cookies: core.List$(_http.Cookie),
  headers: _http._HttpHeaders,
  protocolVersion: core.String,
  contentLength: core.int,
  persistentConnection: core.bool
}));
dart.setLibraryUri(_http._HttpInboundMessage, "dart:_http");
;
const _session = dart.privateName(_http, "_session");
const _requestedUri = dart.privateName(_http, "_requestedUri");
const _httpServer$ = dart.privateName(_http, "_httpServer");
const _httpConnection$ = dart.privateName(_http, "_httpConnection");
const _sessionManagerInstance = dart.privateName(_http, "_sessionManagerInstance");
const _sessionManager$ = dart.privateName(_http, "_sessionManager");
const _markSeen = dart.privateName(_http, "_markSeen");
const _socket$0 = dart.privateName(_http, "_socket");
const _destroyed = dart.privateName(_http, "_destroyed");
_http._HttpRequest = class _HttpRequest extends _http._HttpInboundMessage {
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_incoming$].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  get uri() {
    return this[_incoming$].uri;
  }
  get requestedUri() {
    if (this[_requestedUri] == null) {
      let proto = this.headers._get("x-forwarded-proto");
      let scheme = proto != null ? proto[$first] : io.SecureSocket.is(this[_httpConnection$][_socket$0]) ? "https" : "http";
      let hostList = this.headers._get("x-forwarded-host");
      let host = null;
      if (hostList != null) {
        host = hostList[$first];
      } else {
        hostList = this.headers._get("host");
        if (hostList != null) {
          host = hostList[$first];
        } else {
          host = dart.str(this[_httpServer$].address.host) + ":" + dart.str(this[_httpServer$].port);
        }
      }
      this[_requestedUri] = core.Uri.parse(dart.str(scheme) + "://" + dart.str(host) + dart.str(this.uri));
    }
    return this[_requestedUri];
  }
  get method() {
    return this[_incoming$].method;
  }
  get session() {
    if (this[_session] != null) {
      if (dart.test(this[_session][_destroyed])) {
        this[_session] = null;
        return this.session;
      }
      return this[_session];
    }
    return this[_session] = this[_httpServer$][_sessionManager$].createSession();
  }
  get connectionInfo() {
    return this[_httpConnection$].connectionInfo;
  }
  get certificate() {
    let socket = this[_httpConnection$][_socket$0];
    if (io.SecureSocket.is(socket)) return socket.peerCertificate;
    return null;
  }
};
(_http._HttpRequest.new = function(response, _incoming, _httpServer, _httpConnection) {
  let t104;
  this[_session] = null;
  this[_requestedUri] = null;
  this.response = response;
  this[_httpServer$] = _httpServer;
  this[_httpConnection$] = _httpConnection;
  _http._HttpRequest.__proto__.new.call(this, _incoming);
  if (this.headers.protocolVersion === "1.1") {
    t104 = this.response.headers;
    t104.chunkedTransferEncoding = true;
    t104.persistentConnection = this.headers.persistentConnection;
    t104;
  }
  if (this[_httpServer$][_sessionManagerInstance] != null) {
    let sessionIds = this.cookies[$where](dart.fn(cookie => cookie.name[$toUpperCase]() === "DARTSESSID", CookieTobool()))[$map](core.String, dart.fn(cookie => cookie.value, CookieToString()));
    for (let sessionId of sessionIds) {
      this[_session] = this[_httpServer$][_sessionManager$].getSession(sessionId);
      if (this[_session] != null) {
        this[_session][_markSeen]();
        break;
      }
    }
  }
}).prototype = _http._HttpRequest.prototype;
;
_http._HttpRequest[dart.implements] = () => [_http.HttpRequest];
;
dart.setGetterSignature(_http._HttpRequest, () => ({
  __proto__: dart.getGetters(_http._HttpRequest.__proto__),
  uri: core.Uri,
  requestedUri: core.Uri,
  method: core.String,
  session: _http.HttpSession,
  connectionInfo: _http.HttpConnectionInfo,
  certificate: io.X509Certificate
}));
dart.setLibraryUri(_http._HttpRequest, "dart:_http");
;
const _httpRequest$ = dart.privateName(_http, "_httpRequest");
const _httpClient$ = dart.privateName(_http, "_httpClient");
const _responseRedirects = dart.privateName(_http, "_responseRedirects");
const _httpClientConnection$ = dart.privateName(_http, "_httpClientConnection");
const _openUrlFromRequest = dart.privateName(_http, "_openUrlFromRequest");
let C493;
const _connectionClosed = dart.privateName(_http, "_connectionClosed");
const _shouldAuthenticateProxy = dart.privateName(_http, "_shouldAuthenticateProxy");
const _shouldAuthenticate = dart.privateName(_http, "_shouldAuthenticate");
const _timeline$ = dart.privateName(_http, "_timeline");
const _proxy$ = dart.privateName(_http, "_proxy");
const _findProxyCredentials = dart.privateName(_http, "_findProxyCredentials");
const _findCredentials = dart.privateName(_http, "_findCredentials");
const _removeProxyCredentials = dart.privateName(_http, "_removeProxyCredentials");
const _removeCredentials = dart.privateName(_http, "_removeCredentials");
const _authenticateProxy = dart.privateName(_http, "_authenticateProxy");
const _authenticate = dart.privateName(_http, "_authenticate");
_http._HttpClientResponse = class _HttpClientResponse extends _http._HttpInboundMessageListInt {
  get redirects() {
    return this[_httpRequest$][_responseRedirects];
  }
  static _getCompressionState(httpClient, headers) {
    if (headers.value("content-encoding") === "gzip") {
      return dart.test(httpClient.autoUncompress) ? _http.HttpClientResponseCompressionState.decompressed : _http.HttpClientResponseCompressionState.compressed;
    } else {
      return _http.HttpClientResponseCompressionState.notCompressed;
    }
  }
  get statusCode() {
    return this[_incoming$].statusCode;
  }
  get reasonPhrase() {
    return this[_incoming$].reasonPhrase;
  }
  get certificate() {
    let socket = this[_httpRequest$][_httpClientConnection$][_socket$0];
    if (io.SecureSocket.is(socket)) return socket.peerCertificate;
    return null;
  }
  get cookies() {
    if (this[_cookies] != null) return this[_cookies];
    this[_cookies] = JSArrayOfCookie().of([]);
    let values = this.headers._get("set-cookie");
    if (values != null) {
      values[$forEach](dart.fn(value => {
        this[_cookies][$add](_http.Cookie.fromSetCookieValue(value));
      }, StringToNull()));
    }
    return this[_cookies];
  }
  get isRedirect() {
    if (this[_httpRequest$].method === "GET" || this[_httpRequest$].method === "HEAD") {
      return this.statusCode === 301 || this.statusCode === 302 || this.statusCode === 303 || this.statusCode === 307;
    } else if (this[_httpRequest$].method === "POST") {
      return this.statusCode === 303;
    }
    return false;
  }
  redirect(method, url, followLoops) {
    if (method === void 0) method = null;
    if (url === void 0) url = null;
    if (followLoops === void 0) followLoops = null;
    if (method == null) {
      if (this.statusCode === 303 && this[_httpRequest$].method === "POST") {
        method = "GET";
      } else {
        method = this[_httpRequest$].method;
      }
    }
    if (url == null) {
      let location = this.headers.value("location");
      if (location == null) {
        dart.throw(new core.StateError.new("Response has no Location header for redirect"));
      }
      url = core.Uri.parse(location);
    }
    if (!dart.equals(followLoops, true)) {
      for (let redirect of this.redirects) {
        if (dart.equals(redirect.location, url)) {
          return FutureOfHttpClientResponse().error(new _http.RedirectException.new("Redirect loop detected", this.redirects));
        }
      }
    }
    return this[_httpClient$][_openUrlFromRequest](method, url, this[_httpRequest$]).then(_http.HttpClientResponse, dart.fn(request => {
      let t104;
      t104 = request[_responseRedirects];
      t104[$addAll](this.redirects);
      t104[$add](new _http._RedirectInfo.new(this.statusCode, method, url));
      t104;
      return request.close();
    }, _HttpClientRequestToFutureOfHttpClientResponse()));
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    if (dart.test(this[_incoming$].upgraded)) {
      this[_httpRequest$][_httpClientConnection$].destroy();
      return new (_EmptyStreamOfUint8List()).new().listen(null, {onDone: onDone});
    }
    let stream = this[_incoming$];
    if (dart.equals(this.compressionState, _http.HttpClientResponseCompressionState.decompressed)) {
      stream = stream.cast(ListOfint()).transform(ListOfint(), io.gzip.decoder).transform(typed_data.Uint8List, C493 || CT.C493);
    }
    return stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  detachSocket() {
    this[_httpClient$][_connectionClosed](this[_httpRequest$][_httpClientConnection$]);
    return this[_httpRequest$][_httpClientConnection$].detachSocket();
  }
  get connectionInfo() {
    return this[_httpRequest$].connectionInfo;
  }
  get [_shouldAuthenticateProxy]() {
    let challenge = this.headers._get("proxy-authenticate");
    return this.statusCode === 407 && challenge != null && challenge[$length] === 1;
  }
  get [_shouldAuthenticate]() {
    let challenge = this.headers._get("www-authenticate");
    return this.statusCode === 401 && challenge != null && challenge[$length] === 1;
  }
  [_authenticate](proxyAuth) {
    let t104, t104$;
    t104 = this[_httpRequest$][_timeline$];
    t104 == null ? null : t104.instant("Authentication");
    const retry = () => {
      let t104;
      t104 = this[_httpRequest$][_timeline$];
      t104 == null ? null : t104.instant("Retrying");
      return this.drain(dart.dynamic).then(_http.HttpClientResponse, dart.fn(_ => this[_httpClient$][_openUrlFromRequest](this[_httpRequest$].method, this[_httpRequest$].uri, this[_httpRequest$]).then(_http.HttpClientResponse, dart.fn(request => request.close(), _HttpClientRequestToFutureOfHttpClientResponse())), dynamicToFutureOfHttpClientResponse()));
    };
    dart.fn(retry, VoidToFutureOfHttpClientResponse());
    const authChallenge = () => {
      return dart.test(proxyAuth) ? this.headers._get("proxy-authenticate") : this.headers._get("www-authenticate");
    };
    dart.fn(authChallenge, VoidToListOfString());
    const findCredentials = scheme => {
      return dart.test(proxyAuth) ? this[_httpClient$][_findProxyCredentials](this[_httpRequest$][_proxy$], scheme) : this[_httpClient$][_findCredentials](this[_httpRequest$].uri, scheme);
    };
    dart.fn(findCredentials, _AuthenticationSchemeTo_Credentials());
    const removeCredentials = cr => {
      if (dart.test(proxyAuth)) {
        this[_httpClient$][_removeProxyCredentials](cr);
      } else {
        this[_httpClient$][_removeCredentials](cr);
      }
    };
    dart.fn(removeCredentials, _CredentialsTovoid());
    const requestAuthentication = (scheme, realm) => {
      if (dart.test(proxyAuth)) {
        if (this[_httpClient$][_authenticateProxy] == null) {
          return async.Future.value(false);
        }
        let proxy = this[_httpRequest$][_proxy$];
        return async.Future._check(dart.dsend(this[_httpClient$], _authenticateProxy, [proxy.host, proxy.port, dart.toString(scheme), realm]));
      } else {
        if (this[_httpClient$][_authenticate] == null) {
          return async.Future.value(false);
        }
        return async.Future._check(dart.dsend(this[_httpClient$], _authenticate, [this[_httpRequest$].uri, dart.toString(scheme), realm]));
      }
    };
    dart.fn(requestAuthentication, _AuthenticationSchemeAndStringToFuture());
    let challenge = authChallenge();
    if (!(challenge != null || challenge[$length] === 1)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 498, 12, "challenge != null || challenge.length == 1");
    let header = _http._HeaderValue.parse(challenge[$_get](0), {parameterSeparator: ","});
    let scheme = _http._AuthenticationScheme.fromString(header.value);
    let realm = header.parameters[$_get]("realm");
    let cr = findCredentials(scheme);
    if (cr != null) {
      if (dart.equals(cr.scheme, _http._AuthenticationScheme.BASIC) && !dart.test(cr.used)) {
        return retry();
      }
      if (dart.equals(cr.scheme, _http._AuthenticationScheme.DIGEST) && (header.parameters[$_get]("algorithm") == null || header.parameters[$_get]("algorithm")[$toLowerCase]() === "md5")) {
        if (cr.nonce == null || cr.nonce == header.parameters[$_get]("nonce")) {
          if (cr.nonce == null) {
            t104$ = cr;
            t104$.nonce = header.parameters[$_get]("nonce");
            t104$.algorithm = "MD5";
            t104$.qop = header.parameters[$_get]("qop");
            t104$.nonceCount = 0;
            t104$;
          }
          return retry();
        } else if (header.parameters[$_get]("stale") != null && header.parameters[$_get]("stale")[$toLowerCase]() === "true") {
          cr.nonce = header.parameters[$_get]("nonce");
          return retry();
        }
      }
    }
    if (cr != null) {
      removeCredentials(cr);
      cr = null;
    }
    return requestAuthentication(scheme, realm).then(_http.HttpClientResponse, dart.fn(credsAvailable => {
      if (dart.dtest(credsAvailable)) {
        cr = this[_httpClient$][_findCredentials](this[_httpRequest$].uri, scheme);
        return retry();
      } else {
        return this;
      }
    }, dynamicToFutureOrOfHttpClientResponse()));
  }
};
(_http._HttpClientResponse.new = function(_incoming, _httpRequest, _httpClient) {
  this[_httpRequest$] = _httpRequest;
  this[_httpClient$] = _httpClient;
  this.compressionState = _http._HttpClientResponse._getCompressionState(_httpClient, _incoming.headers);
  _http._HttpClientResponse.__proto__.new.call(this, _incoming);
  _incoming.uri = this[_httpRequest$].uri;
}).prototype = _http._HttpClientResponse.prototype;
;
_http._HttpClientResponse[dart.implements] = () => [_http.HttpClientResponse];
;
dart.setGetterSignature(_http._HttpClientResponse, () => ({
  __proto__: dart.getGetters(_http._HttpClientResponse.__proto__),
  redirects: core.List$(_http.RedirectInfo),
  statusCode: core.int,
  reasonPhrase: core.String,
  certificate: io.X509Certificate,
  isRedirect: core.bool,
  connectionInfo: _http.HttpConnectionInfo,
  [_shouldAuthenticateProxy]: core.bool,
  [_shouldAuthenticate]: core.bool
}));
dart.setLibraryUri(_http._HttpClientResponse, "dart:_http");
;
_http._ToUint8List = class _ToUint8List extends convert.Converter$(core.List$(core.int), typed_data.Uint8List) {
  convert(input) {
    ListOfint()._check(input);
    return _native_typed_data.NativeUint8List.fromList(input);
  }
  startChunkedConversion(sink) {
    SinkOfUint8List()._check(sink);
    return new _http._Uint8ListConversionSink.new(sink);
  }
};
(_http._ToUint8List.new = function() {
  _http._ToUint8List.__proto__.new.call(this);
  ;
}).prototype = _http._ToUint8List.prototype;
;
;
dart.setLibraryUri(_http._ToUint8List, "dart:_http");
const _target$1 = dart.privateName(_http, "_target");
const _target$2 = dart.privateName(_http, "_Uint8ListConversionSink._target");
_http._Uint8ListConversionSink = class _Uint8ListConversionSink extends core.Object {
  get [_target$1]() {
    return this[_target$2];
  }
  set [_target$1](value) {
    super[_target$1] = value;
  }
  add(data) {
    ListOfint()._check(data);
    this[_target$1].add(_native_typed_data.NativeUint8List.fromList(data));
  }
  close() {
    this[_target$1].close();
  }
};
(_http._Uint8ListConversionSink.new = function(_target) {
  this[_target$2] = _target;
  ;
}).prototype = _http._Uint8ListConversionSink.prototype;
;
_http._Uint8ListConversionSink[dart.implements] = () => [core.Sink$(core.List$(core.int))];
;
dart.setLibraryUri(_http._Uint8ListConversionSink, "dart:_http");
;
const _doneCompleter$ = dart.privateName(_http, "_doneCompleter");
const _controllerInstance$ = dart.privateName(_http, "_controllerInstance");
const _controllerCompleter$ = dart.privateName(_http, "_controllerCompleter");
const _isClosed$0 = dart.privateName(_http, "_isClosed");
const _isBound$ = dart.privateName(_http, "_isBound");
const _hasError$0 = dart.privateName(_http, "_hasError");
const _controller$0 = dart.privateName(_http, "_controller");
const _closeTarget$ = dart.privateName(_http, "_closeTarget");
const _completeDoneValue$ = dart.privateName(_http, "_completeDoneValue");
const _completeDoneError$ = dart.privateName(_http, "_completeDoneError");
const _is__StreamSinkImpl_default$ = Symbol('_is__StreamSinkImpl_default');
_http._StreamSinkImpl$ = dart.generic(T => {
  let StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
  let StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
  class _StreamSinkImpl extends core.Object {
    add(data) {
      T._check(data);
      if (dart.test(this[_isClosed$0])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      this[_controller$0].add(data);
    }
    addError(error, stackTrace) {
      if (stackTrace === void 0) stackTrace = null;
      if (dart.test(this[_isClosed$0])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      this[_controller$0].addError(error, stackTrace);
    }
    addStream(stream) {
      StreamOfT()._check(stream);
      if (dart.test(this[_isBound$])) {
        dart.throw(new core.StateError.new("StreamSink is already bound to a stream"));
      }
      this[_isBound$] = true;
      if (dart.test(this[_hasError$0])) return this.done;
      const targetAddStream = () => {
        return this[_target$1].addStream(stream).whenComplete(dart.fn(() => {
          this[_isBound$] = false;
        }, VoidToNull()));
      };
      dart.fn(targetAddStream, VoidToFuture());
      if (this[_controllerInstance$] == null) return targetAddStream();
      let future = this[_controllerCompleter$].future;
      this[_controllerInstance$].close();
      return future.then(dart.dynamic, dart.fn(_ => targetAddStream(), dynamicToFuture()));
    }
    flush() {
      if (dart.test(this[_isBound$])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (this[_controllerInstance$] == null) return async.Future.value(this);
      this[_isBound$] = true;
      let future = this[_controllerCompleter$].future;
      this[_controllerInstance$].close();
      return future.whenComplete(dart.fn(() => {
        this[_isBound$] = false;
      }, VoidToNull()));
    }
    close() {
      if (dart.test(this[_isBound$])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (!dart.test(this[_isClosed$0])) {
        this[_isClosed$0] = true;
        if (this[_controllerInstance$] != null) {
          this[_controllerInstance$].close();
        } else {
          this[_closeTarget$]();
        }
      }
      return this.done;
    }
    [_closeTarget$]() {
      this[_target$1].close().then(dart.void, dart.bind(this, _completeDoneValue$), {onError: dart.bind(this, _completeDoneError$)});
    }
    get done() {
      return this[_doneCompleter$].future;
    }
    [_completeDoneValue$](value) {
      if (!dart.test(this[_doneCompleter$].isCompleted)) {
        this[_doneCompleter$].complete(value);
      }
    }
    [_completeDoneError$](error, stackTrace) {
      if (!dart.test(this[_doneCompleter$].isCompleted)) {
        this[_hasError$0] = true;
        this[_doneCompleter$].completeError(error, stackTrace);
      }
    }
    get [_controller$0]() {
      if (dart.test(this[_isBound$])) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      if (dart.test(this[_isClosed$0])) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      if (this[_controllerInstance$] == null) {
        this[_controllerInstance$] = StreamControllerOfT().new({sync: true});
        this[_controllerCompleter$] = async.Completer.new();
        this[_target$1].addStream(this[_controller$0].stream).then(core.Null, dart.fn(_ => {
          if (dart.test(this[_isBound$])) {
            this[_controllerCompleter$].complete(this);
            this[_controllerCompleter$] = null;
            this[_controllerInstance$] = null;
          } else {
            this[_closeTarget$]();
          }
        }, dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
            if (dart.test(this[_isBound$])) {
              this[_controllerCompleter$].completeError(error, core.StackTrace._check(stackTrace));
              this[_controllerCompleter$] = null;
              this[_controllerInstance$] = null;
            } else {
              this[_completeDoneError$](error, core.StackTrace._check(stackTrace));
            }
          }, dynamicAnddynamicToNull())});
      }
      return this[_controllerInstance$];
    }
  }
  (_StreamSinkImpl.new = function(_target) {
    this[_doneCompleter$] = async.Completer.new();
    this[_controllerInstance$] = null;
    this[_controllerCompleter$] = null;
    this[_isClosed$0] = false;
    this[_isBound$] = false;
    this[_hasError$0] = false;
    this[_target$1] = _target;
    ;
  }).prototype = _StreamSinkImpl.prototype;
  ;
  _StreamSinkImpl.prototype[_is__StreamSinkImpl_default$] = true;
  _StreamSinkImpl[dart.implements] = () => [async.StreamSink$(T)];
  ;
  dart.setGetterSignature(_StreamSinkImpl, () => ({
    __proto__: dart.getGetters(_StreamSinkImpl.__proto__),
    done: async.Future,
    [_controller$0]: async.StreamController$(T)
  }));
  dart.setLibraryUri(_StreamSinkImpl, "dart:_http");
  ;
  return _StreamSinkImpl;
});
_http._StreamSinkImpl = _http._StreamSinkImpl$();
;
const _encodingMutable$ = dart.privateName(_http, "_encodingMutable");
const _encoding$0 = dart.privateName(_http, "_encoding");
_http._IOSinkImpl = class _IOSinkImpl extends _http._StreamSinkImpl$(core.List$(core.int)) {
  get encoding() {
    return this[_encoding$0];
  }
  set encoding(value) {
    if (!dart.test(this[_encodingMutable$])) {
      dart.throw(new core.StateError.new("IOSink encoding is not mutable"));
    }
    this[_encoding$0] = value;
  }
  write(obj) {
    let string = dart.str(obj);
    if (string[$isEmpty]) return;
    this.add(this[_encoding$0].encode(string));
  }
  writeAll(objects, separator) {
    if (separator === void 0) separator = "";
    let iterator = objects[$iterator];
    if (!dart.test(iterator.moveNext())) return;
    if (separator[$isEmpty]) {
      do {
        this.write(iterator.current);
      } while (dart.test(iterator.moveNext()));
    } else {
      this.write(iterator.current);
      while (dart.test(iterator.moveNext())) {
        this.write(separator);
        this.write(iterator.current);
      }
    }
  }
  writeln(object) {
    if (object === void 0) object = "";
    this.write(object);
    this.write("\n");
  }
  writeCharCode(charCode) {
    this.write(core.String.fromCharCode(charCode));
  }
};
(_http._IOSinkImpl.new = function(target, _encoding) {
  this[_encodingMutable$] = true;
  this[_encoding$0] = _encoding;
  _http._IOSinkImpl.__proto__.new.call(this, target);
  ;
}).prototype = _http._IOSinkImpl.prototype;
;
_http._IOSinkImpl[dart.implements] = () => [io.IOSink];
;
dart.setGetterSignature(_http._IOSinkImpl, () => ({
  __proto__: dart.getGetters(_http._IOSinkImpl.__proto__),
  encoding: convert.Encoding
}));
dart.setSetterSignature(_http._IOSinkImpl, () => ({
  __proto__: dart.getSetters(_http._IOSinkImpl.__proto__),
  encoding: convert.Encoding
}));
dart.setLibraryUri(_http._IOSinkImpl, "dart:_http");
;
const _encodingSet = dart.privateName(_http, "_encodingSet");
const _bufferOutput = dart.privateName(_http, "_bufferOutput");
const _uri = dart.privateName(_http, "_uri");
const _outgoing = dart.privateName(_http, "_outgoing");
const _isConnectionClosed = dart.privateName(_http, "_isConnectionClosed");
const _is__HttpOutboundMessage_default = Symbol('_is__HttpOutboundMessage_default');
_http._HttpOutboundMessage$ = dart.generic(T => {
  class _HttpOutboundMessage extends _http._IOSinkImpl {
    get contentLength() {
      return this.headers.contentLength;
    }
    set contentLength(contentLength) {
      this.headers.contentLength = contentLength;
    }
    get persistentConnection() {
      return this.headers.persistentConnection;
    }
    set persistentConnection(p) {
      this.headers.persistentConnection = p;
    }
    get bufferOutput() {
      return this[_bufferOutput];
    }
    set bufferOutput(bufferOutput) {
      if (dart.test(this[_outgoing].headersWritten)) dart.throw(new core.StateError.new("Header already sent"));
      this[_bufferOutput] = bufferOutput;
    }
    get encoding() {
      if (dart.test(this[_encodingSet]) && dart.test(this[_outgoing].headersWritten)) {
        return this[_encoding$0];
      }
      let charset = null;
      if (this.headers.contentType != null && this.headers.contentType.charset != null) {
        charset = this.headers.contentType.charset;
      } else {
        charset = "iso-8859-1";
      }
      return convert.Encoding.getByName(core.String._check(charset));
    }
    set encoding(value) {
      super.encoding = value;
    }
    add(data) {
      ListOfint()._check(data);
      if (data[$length] === 0) return;
      super.add(data);
    }
    write(obj) {
      if (!dart.test(this[_encodingSet])) {
        this[_encoding$0] = this.encoding;
        this[_encodingSet] = true;
      }
      super.write(obj);
    }
    get [_isConnectionClosed]() {
      return false;
    }
  }
  (_HttpOutboundMessage.new = function(uri, protocolVersion, outgoing, opts) {
    let initialHeaders = opts && 'initialHeaders' in opts ? opts.initialHeaders : null;
    this[_encodingSet] = false;
    this[_bufferOutput] = true;
    this[_uri] = uri;
    this.headers = new _http._HttpHeaders.new(protocolVersion, {defaultPortForScheme: uri.scheme === "https" ? 443 : 80, initialHeaders: initialHeaders});
    this[_outgoing] = outgoing;
    _HttpOutboundMessage.__proto__.new.call(this, outgoing, null);
    this[_outgoing].outbound = this;
    this[_encodingMutable$] = false;
  }).prototype = _HttpOutboundMessage.prototype;
  ;
  _HttpOutboundMessage.prototype[_is__HttpOutboundMessage_default] = true;
  dart.setGetterSignature(_HttpOutboundMessage, () => ({
    __proto__: dart.getGetters(_HttpOutboundMessage.__proto__),
    contentLength: core.int,
    persistentConnection: core.bool,
    bufferOutput: core.bool,
    [_isConnectionClosed]: core.bool
  }));
  dart.setSetterSignature(_HttpOutboundMessage, () => ({
    __proto__: dart.getSetters(_HttpOutboundMessage.__proto__),
    contentLength: core.int,
    persistentConnection: core.bool,
    bufferOutput: core.bool
  }));
  dart.setLibraryUri(_HttpOutboundMessage, "dart:_http");
  ;
  return _HttpOutboundMessage;
});
_http._HttpOutboundMessage = _http._HttpOutboundMessage$();
;
const _statusCode = dart.privateName(_http, "_statusCode");
const _reasonPhrase = dart.privateName(_http, "_reasonPhrase");
const _deadline = dart.privateName(_http, "_deadline");
const _deadlineTimer = dart.privateName(_http, "_deadlineTimer");
const _isClosing = dart.privateName(_http, "_isClosing");
const _findReasonPhrase = dart.privateName(_http, "_findReasonPhrase");
const _isNew = dart.privateName(_http, "_isNew");
const _writeHeader = dart.privateName(_http, "_writeHeader");
_http._HttpResponse = class _HttpResponse extends _http._HttpOutboundMessage$(_http.HttpResponse) {
  get [_isConnectionClosed]() {
    return this[_httpRequest$][_httpConnection$][_isClosing];
  }
  get cookies() {
    if (this[_cookies] == null) this[_cookies] = JSArrayOfCookie().of([]);
    return this[_cookies];
  }
  get statusCode() {
    return this[_statusCode];
  }
  set statusCode(statusCode) {
    if (dart.test(this[_outgoing].headersWritten)) dart.throw(new core.StateError.new("Header already sent"));
    this[_statusCode] = statusCode;
  }
  get reasonPhrase() {
    return this[_findReasonPhrase](this.statusCode);
  }
  set reasonPhrase(reasonPhrase) {
    if (dart.test(this[_outgoing].headersWritten)) dart.throw(new core.StateError.new("Header already sent"));
    this[_reasonPhrase] = reasonPhrase;
  }
  redirect(location, opts) {
    let status = opts && 'status' in opts ? opts.status : 302;
    if (dart.test(this[_outgoing].headersWritten)) dart.throw(new core.StateError.new("Header already sent"));
    this.statusCode = status;
    this.headers.set("location", dart.toString(location));
    return this.close();
  }
  detachSocket(opts) {
    let writeHeaders = opts && 'writeHeaders' in opts ? opts.writeHeaders : true;
    if (dart.test(this[_outgoing].headersWritten)) dart.throw(new core.StateError.new("Headers already sent"));
    this.deadline = null;
    let future = this[_httpRequest$][_httpConnection$].detachSocket();
    if (dart.test(writeHeaders)) {
      let headersFuture = this[_outgoing].writeHeaders({drainRequest: false, setOutgoing: false});
      if (!(headersFuture == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 885, 14, "headersFuture == null");
    } else {
      this[_outgoing].headersWritten = true;
    }
    this.close();
    this.done.catchError(dart.fn(_ => {
    }, dynamicToNull()));
    return future;
  }
  get connectionInfo() {
    return this[_httpRequest$].connectionInfo;
  }
  get deadline() {
    return this[_deadline];
  }
  set deadline(d) {
    if (this[_deadlineTimer] != null) this[_deadlineTimer].cancel();
    this[_deadline] = d;
    if (this[_deadline] == null) return;
    this[_deadlineTimer] = async.Timer.new(this[_deadline], dart.fn(() => {
      this[_httpRequest$][_httpConnection$].destroy();
    }, VoidToNull()));
  }
  [_writeHeader]() {
    let t104, t104$;
    let buffer = new _http._CopyingBytesBuilder.new(8192);
    if (this.headers.protocolVersion === "1.1") {
      buffer.add(_http._Const.HTTP11);
    } else {
      buffer.add(_http._Const.HTTP10);
    }
    buffer.addByte(32);
    buffer.add(dart.toString(this.statusCode)[$codeUnits]);
    buffer.addByte(32);
    buffer.add(this.reasonPhrase[$codeUnits]);
    buffer.addByte(13);
    buffer.addByte(10);
    let session = this[_httpRequest$][_session];
    if (session != null && !dart.test(session[_destroyed])) {
      session[_isNew] = false;
      let found = false;
      for (let i = 0; i < dart.notNull(this.cookies[$length]); i = i + 1) {
        if (this.cookies[$_get](i).name[$toUpperCase]() === "DARTSESSID") {
          t104 = this.cookies[$_get](i);
          t104.value = session.id;
          t104.httpOnly = true;
          t104.path = "/";
          t104;
          found = true;
        }
      }
      if (!found) {
        let cookie = _http.Cookie.new("DARTSESSID", session.id);
        this.cookies[$add]((t104$ = cookie, t104$.httpOnly = true, t104$.path = "/", t104$));
      }
    }
    if (this[_cookies] != null) {
      this[_cookies][$forEach](dart.fn(cookie => {
        this.headers.add("set-cookie", cookie);
      }, CookieToNull()));
    }
    this.headers[_finalize]();
    this.headers[_build](buffer);
    buffer.addByte(13);
    buffer.addByte(10);
    let headerBytes = buffer.takeBytes();
    this[_outgoing].setHeader(headerBytes, headerBytes[$length]);
  }
  [_findReasonPhrase](statusCode) {
    if (this[_reasonPhrase] != null) {
      return this[_reasonPhrase];
    }
    switch (statusCode) {
      case 100:
      {
        return "Continue";
      }
      case 101:
      {
        return "Switching Protocols";
      }
      case 200:
      {
        return "OK";
      }
      case 201:
      {
        return "Created";
      }
      case 202:
      {
        return "Accepted";
      }
      case 203:
      {
        return "Non-Authoritative Information";
      }
      case 204:
      {
        return "No Content";
      }
      case 205:
      {
        return "Reset Content";
      }
      case 206:
      {
        return "Partial Content";
      }
      case 300:
      {
        return "Multiple Choices";
      }
      case 301:
      {
        return "Moved Permanently";
      }
      case 302:
      {
        return "Found";
      }
      case 303:
      {
        return "See Other";
      }
      case 304:
      {
        return "Not Modified";
      }
      case 305:
      {
        return "Use Proxy";
      }
      case 307:
      {
        return "Temporary Redirect";
      }
      case 400:
      {
        return "Bad Request";
      }
      case 401:
      {
        return "Unauthorized";
      }
      case 402:
      {
        return "Payment Required";
      }
      case 403:
      {
        return "Forbidden";
      }
      case 404:
      {
        return "Not Found";
      }
      case 405:
      {
        return "Method Not Allowed";
      }
      case 406:
      {
        return "Not Acceptable";
      }
      case 407:
      {
        return "Proxy Authentication Required";
      }
      case 408:
      {
        return "Request Time-out";
      }
      case 409:
      {
        return "Conflict";
      }
      case 410:
      {
        return "Gone";
      }
      case 411:
      {
        return "Length Required";
      }
      case 412:
      {
        return "Precondition Failed";
      }
      case 413:
      {
        return "Request Entity Too Large";
      }
      case 414:
      {
        return "Request-URI Too Long";
      }
      case 415:
      {
        return "Unsupported Media Type";
      }
      case 416:
      {
        return "Requested range not satisfiable";
      }
      case 417:
      {
        return "Expectation Failed";
      }
      case 500:
      {
        return "Internal Server Error";
      }
      case 501:
      {
        return "Not Implemented";
      }
      case 502:
      {
        return "Bad Gateway";
      }
      case 503:
      {
        return "Service Unavailable";
      }
      case 504:
      {
        return "Gateway Time-out";
      }
      case 505:
      {
        return "Http Version not supported";
      }
      default:
      {
        return "Status " + dart.str(statusCode);
      }
    }
  }
};
(_http._HttpResponse.new = function(uri, protocolVersion, outgoing, defaultHeaders, serverHeader) {
  this[_statusCode] = 200;
  this[_reasonPhrase] = null;
  this[_cookies] = null;
  this[_httpRequest$] = null;
  this[_deadline] = null;
  this[_deadlineTimer] = null;
  _http._HttpResponse.__proto__.new.call(this, uri, protocolVersion, outgoing, {initialHeaders: _http._HttpHeaders._check(defaultHeaders)});
  if (serverHeader != null) {
    this.headers.set("server", serverHeader);
  }
}).prototype = _http._HttpResponse.prototype;
;
_http._HttpResponse[dart.implements] = () => [_http.HttpResponse];
;
dart.setGetterSignature(_http._HttpResponse, () => ({
  __proto__: dart.getGetters(_http._HttpResponse.__proto__),
  cookies: core.List$(_http.Cookie),
  statusCode: core.int,
  reasonPhrase: core.String,
  connectionInfo: _http.HttpConnectionInfo,
  deadline: core.Duration
}));
dart.setSetterSignature(_http._HttpResponse, () => ({
  __proto__: dart.getSetters(_http._HttpResponse.__proto__),
  statusCode: core.int,
  reasonPhrase: core.String,
  deadline: core.Duration
}));
dart.setLibraryUri(_http._HttpResponse, "dart:_http");
;
const _responseCompleter = dart.privateName(_http, "_responseCompleter");
const _response = dart.privateName(_http, "_response");
const _followRedirects = dart.privateName(_http, "_followRedirects");
const _maxRedirects = dart.privateName(_http, "_maxRedirects");
const _onIncoming = dart.privateName(_http, "_onIncoming");
const _onError$ = dart.privateName(_http, "_onError");
const _proxyTunnel$ = dart.privateName(_http, "_proxyTunnel");
const _requestUri = dart.privateName(_http, "_requestUri");
_http._HttpClientRequest = class _HttpClientRequest extends _http._HttpOutboundMessage$(_http.HttpClientResponse) {
  get done() {
    if (this[_response] == null) {
      this[_response] = async.Future.wait(dart.dynamic, JSArrayOfFuture().of([this[_responseCompleter].future, super.done]), {eagerError: true}).then(_http.HttpClientResponse, dart.fn(list => FutureOrOfHttpClientResponse()._check(list[$_get](0)), ListToFutureOrOfHttpClientResponse()));
    }
    return this[_response];
  }
  close() {
    super.close();
    return this.done;
  }
  get maxRedirects() {
    return this[_maxRedirects];
  }
  set maxRedirects(maxRedirects) {
    if (dart.test(this[_outgoing].headersWritten)) dart.throw(new core.StateError.new("Request already sent"));
    this[_maxRedirects] = maxRedirects;
  }
  get followRedirects() {
    return this[_followRedirects];
  }
  set followRedirects(followRedirects) {
    if (dart.test(this[_outgoing].headersWritten)) dart.throw(new core.StateError.new("Request already sent"));
    this[_followRedirects] = followRedirects;
  }
  get connectionInfo() {
    return this[_httpClientConnection$].connectionInfo;
  }
  [_onIncoming](incoming) {
    let response = new _http._HttpClientResponse.new(incoming, this, this[_httpClient$]);
    let future = null;
    if (dart.test(this.followRedirects) && dart.test(response.isRedirect)) {
      if (dart.notNull(response.redirects[$length]) < dart.notNull(this.maxRedirects)) {
        future = response.drain(dart.dynamic).then(_http.HttpClientResponse, dart.fn(_ => response.redirect(), dynamicToFutureOfHttpClientResponse()));
      } else {
        future = response.drain(dart.dynamic).then(_http.HttpClientResponse, dart.fn(_ => FutureOfHttpClientResponse().error(new _http.RedirectException.new("Redirect limit exceeded", response.redirects)), dynamicToFutureOfHttpClientResponse()));
      }
    } else if (dart.test(response[_shouldAuthenticateProxy])) {
      future = response[_authenticate](true);
    } else if (dart.test(response[_shouldAuthenticate])) {
      future = response[_authenticate](false);
    } else {
      future = FutureOfHttpClientResponse().value(response);
    }
    future.then(dart.void, dart.fn(v => this[_responseCompleter].complete(v), HttpClientResponseTovoid()), {onError: dart.bind(this[_responseCompleter], 'completeError')});
  }
  [_onError$](error, stackTrace) {
    this[_responseCompleter].completeError(error, stackTrace);
  }
  [_requestUri]() {
    const uriStartingFromPath = () => {
      let result = this.uri.path;
      if (result[$isEmpty]) result = "/";
      if (dart.test(this.uri.hasQuery)) {
        result = dart.str(result) + "?" + dart.str(this.uri.query);
      }
      return result;
    };
    dart.fn(uriStartingFromPath, VoidToString());
    if (dart.test(this[_proxy$].isDirect)) {
      return uriStartingFromPath();
    } else {
      if (this.method === "CONNECT") {
        return dart.str(this.uri.host) + ":" + dart.str(this.uri.port);
      } else {
        if (dart.test(this[_httpClientConnection$][_proxyTunnel$])) {
          return uriStartingFromPath();
        } else {
          return dart.toString(this.uri.removeFragment());
        }
      }
    }
  }
  [_writeHeader]() {
    let t105;
    let buffer = new _http._CopyingBytesBuilder.new(8192);
    buffer.add(this.method[$codeUnits]);
    buffer.addByte(32);
    buffer.add(this[_requestUri]()[$codeUnits]);
    buffer.addByte(32);
    buffer.add(_http._Const.HTTP11);
    buffer.addByte(13);
    buffer.addByte(10);
    if (!dart.test(this.cookies[$isEmpty])) {
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(this.cookies[$length]); i = i + 1) {
        if (i > 0) sb.write("; ");
        t105 = sb;
        t105.write(this.cookies[$_get](i).name);
        t105.write("=");
        t105.write(this.cookies[$_get](i).value);
        t105;
      }
      this.headers.add("cookie", sb.toString());
    }
    this.headers[_finalize]();
    this.headers[_build](buffer);
    buffer.addByte(13);
    buffer.addByte(10);
    let headerBytes = buffer.takeBytes();
    this[_outgoing].setHeader(headerBytes, headerBytes[$length]);
  }
};
(_http._HttpClientRequest.new = function(outgoing, uri, method, _proxy, _httpClient, _httpClientConnection, _timeline) {
  let t104;
  this.cookies = JSArrayOfCookie().of([]);
  this[_responseCompleter] = CompleterOfHttpClientResponse().new();
  this[_response] = null;
  this[_followRedirects] = true;
  this[_maxRedirects] = 5;
  this[_responseRedirects] = JSArrayOfRedirectInfo().of([]);
  this.method = method;
  this[_proxy$] = _proxy;
  this[_httpClient$] = _httpClient;
  this[_httpClientConnection$] = _httpClientConnection;
  this[_timeline$] = _timeline;
  this.uri = uri;
  _http._HttpClientRequest.__proto__.new.call(this, uri, "1.1", outgoing);
  t104 = this[_timeline$];
  t104 == null ? null : t104.instant("Request initiated");
  if (this.method === "GET" || this.method === "HEAD") {
    this.contentLength = 0;
  } else {
    this.headers.chunkedTransferEncoding = true;
  }
  this[_responseCompleter].future.then(core.Null, dart.fn(response => {
    let t104, t104$;
    t104 = this[_timeline$];
    t104 == null ? null : t104.instant("Response receieved");
    function formatConnectionInfo() {
      let t104, t104$, t104$0, t104$1;
      return new _js_helper.LinkedMap.from(["localPort", (t104 = response.connectionInfo, t104 == null ? null : t104.localPort), "remoteAddress", (t104$0 = (t104$ = response.connectionInfo, t104$ == null ? null : t104$.remoteAddress), t104$0 == null ? null : t104$0.address), "remotePort", (t104$1 = response.connectionInfo, t104$1 == null ? null : t104$1.remotePort)]);
    }
    dart.fn(formatConnectionInfo, VoidToMap());
    function formatHeaders() {
      let headers = new (IdentityMapOfString$ListOfString()).new();
      response.headers.forEach(dart.fn((name, values) => {
        headers[$_set](name, values);
      }, StringAndListOfStringToNull()));
      return headers;
    }
    dart.fn(formatHeaders, VoidToMap());
    function formatRedirectInfo() {
      let redirects = JSArrayOfMapOfString$dynamic().of([]);
      for (let redirect of response.redirects) {
        redirects[$add](new (IdentityMapOfString$dynamic()).from(["location", dart.toString(redirect.location), "method", redirect.method, "statusCode", redirect.statusCode]));
      }
      return redirects;
    }
    dart.fn(formatRedirectInfo, VoidToListOfMapOfString$dynamic());
    t104$ = this[_timeline$];
    t104$ == null ? null : t104$.finish({arguments: new _js_helper.LinkedMap.from(["requestHeaders", outgoing.outbound.headers[_headers], "compressionState", dart.toString(response.compressionState), "connectionInfo", formatConnectionInfo(), "contentLength", response.contentLength, "cookies", (() => {
          let t105 = JSArrayOfString().of([]);
          for (let cookie of response.cookies)
            t105[$add](dart.toString(cookie));
          return t105;
        })(), "responseHeaders", formatHeaders(), "isRedirect", response.isRedirect, "persistentConnection", response.persistentConnection, "reasonPhrase", response.reasonPhrase, "redirects", formatRedirectInfo(), "statusCode", response.statusCode])});
  }, HttpClientResponseToNull()), {onError: dart.fn(e => {
    }, dynamicToNull())});
}).prototype = _http._HttpClientRequest.prototype;
;
_http._HttpClientRequest[dart.implements] = () => [_http.HttpClientRequest];
;
dart.setGetterSignature(_http._HttpClientRequest, () => ({
  __proto__: dart.getGetters(_http._HttpClientRequest.__proto__),
  done: async.Future$(_http.HttpClientResponse),
  maxRedirects: core.int,
  followRedirects: core.bool,
  connectionInfo: _http.HttpConnectionInfo
}));
dart.setSetterSignature(_http._HttpClientRequest, () => ({
  __proto__: dart.getSetters(_http._HttpClientRequest.__proto__),
  maxRedirects: core.int,
  followRedirects: core.bool
}));
dart.setLibraryUri(_http._HttpClientRequest, "dart:_http");
;
const _consume$ = dart.privateName(_http, "_consume");
_http._HttpGZipSink = class _HttpGZipSink extends convert.ByteConversionSink {
  add(chunk) {
    ListOfint()._check(chunk);
    this[_consume$](chunk);
  }
  addSlice(chunk, start, end, isLast) {
    if (typed_data.Uint8List.is(chunk)) {
      this[_consume$](typed_data.Uint8List.view(chunk[$buffer], start, dart.notNull(end) - dart.notNull(start)));
    } else {
      this[_consume$](chunk[$sublist](start, dart.notNull(end) - dart.notNull(start)));
    }
  }
  close() {
  }
};
(_http._HttpGZipSink.new = function(_consume) {
  this[_consume$] = _consume;
  _http._HttpGZipSink.__proto__.new.call(this);
  ;
}).prototype = _http._HttpGZipSink.prototype;
;
;
dart.setLibraryUri(_http._HttpGZipSink, "dart:_http");
;
const _closeFuture = dart.privateName(_http, "_closeFuture");
const _pendingChunkedFooter = dart.privateName(_http, "_pendingChunkedFooter");
const _bytesWritten = dart.privateName(_http, "_bytesWritten");
const _gzip = dart.privateName(_http, "_gzip");
const _gzipSink = dart.privateName(_http, "_gzipSink");
const _gzipAdd = dart.privateName(_http, "_gzipAdd");
const _gzipBuffer = dart.privateName(_http, "_gzipBuffer");
const _gzipBufferLength = dart.privateName(_http, "_gzipBufferLength");
const _socketError = dart.privateName(_http, "_socketError");
const _addGZipChunk = dart.privateName(_http, "_addGZipChunk");
const _chunkHeader = dart.privateName(_http, "_chunkHeader");
const _addChunk$ = dart.privateName(_http, "_addChunk");
const _ignoreError = dart.privateName(_http, "_ignoreError");
let C494;
let C495;
let C496;
_http._HttpOutgoing = class _HttpOutgoing extends core.Object {
  writeHeaders(opts) {
    let drainRequest = opts && 'drainRequest' in opts ? opts.drainRequest : true;
    let setOutgoing = opts && 'setOutgoing' in opts ? opts.setOutgoing : true;
    if (dart.test(this.headersWritten)) return null;
    this.headersWritten = true;
    let drainFuture = null;
    let gzip = false;
    if (_http._HttpResponse.is(this.outbound)) {
      let response = _http._HttpResponse._check(this.outbound);
      if (dart.test(response[_httpRequest$][_httpServer$].autoCompress) && dart.test(this.outbound.bufferOutput) && dart.test(this.outbound.headers.chunkedTransferEncoding)) {
        let acceptEncodings = response[_httpRequest$].headers._get("accept-encoding");
        let contentEncoding = this.outbound.headers._get("content-encoding");
        if (acceptEncodings != null && dart.test(acceptEncodings[$expand](dart.dynamic, dart.fn(list => core.Iterable._check(dart.dsend(list, 'split', [","])), dynamicToIterable()))[$any](dart.fn(encoding => dart.equals(dart.dsend(dart.dsend(encoding, 'trim', []), 'toLowerCase', []), "gzip"), dynamicTobool()))) && contentEncoding == null) {
          this.outbound.headers.set("content-encoding", "gzip");
          gzip = true;
        }
      }
      if (dart.test(drainRequest) && !dart.test(response[_httpRequest$][_incoming$].hasSubscriber)) {
        drainFuture = response[_httpRequest$].drain(dart.dynamic).catchError(dart.fn(_ => {
        }, dynamicToNull()));
      }
    } else {
      drainRequest = false;
    }
    if (!dart.test(this.ignoreBody)) {
      if (dart.test(setOutgoing)) {
        let contentLength = this.outbound.headers.contentLength;
        if (dart.test(this.outbound.headers.chunkedTransferEncoding)) {
          this.chunked = true;
          if (gzip) this.gzip = true;
        } else if (dart.notNull(contentLength) >= 0) {
          this.contentLength = contentLength;
        }
      }
      if (drainFuture != null) {
        return drainFuture.then(dart.dynamic, dart.fn(_ => this.outbound[_writeHeader](), dynamicTovoid()));
      }
    }
    this.outbound[_writeHeader]();
    return null;
  }
  addStream(stream) {
    StreamOfListOfint()._check(stream);
    if (dart.test(this[_socketError])) {
      stream.listen(null).cancel();
      return async.Future.value(this.outbound);
    }
    if (dart.test(this.ignoreBody)) {
      stream.drain(dart.dynamic).catchError(dart.fn(_ => {
      }, dynamicToNull()));
      let future = this.writeHeaders();
      if (future != null) {
        return future.then(dart.dynamic, dart.fn(_ => this.close(), dynamicToFuture()));
      }
      return this.close();
    }
    let sub = null;
    let controller = StreamControllerOfListOfint().new({onPause: dart.fn(() => sub.pause(), VoidTovoid()), onResume: dart.fn(() => sub.resume(), VoidTovoid()), sync: true});
    const onData = data => {
      if (dart.test(this[_socketError])) return;
      if (data[$length] === 0) return;
      if (dart.test(this.chunked)) {
        if (dart.test(this[_gzip])) {
          this[_gzipAdd] = dart.bind(controller, 'add');
          this[_addGZipChunk](data, dart.bind(this[_gzipSink], 'add'));
          this[_gzipAdd] = null;
          return;
        }
        this[_addChunk$](this[_chunkHeader](data[$length]), dart.bind(controller, 'add'));
        this[_pendingChunkedFooter] = 2;
      } else {
        if (this.contentLength != null) {
          this[_bytesWritten] = dart.notNull(this[_bytesWritten]) + dart.notNull(data[$length]);
          if (dart.notNull(this[_bytesWritten]) > dart.notNull(this.contentLength)) {
            controller.addError(new _http.HttpException.new("Content size exceeds specified contentLength. " + dart.str(this[_bytesWritten]) + " bytes written while expected " + dart.str(this.contentLength) + ". " + "[" + dart.str(core.String.fromCharCodes(data)) + "]"));
            return;
          }
        }
      }
      this[_addChunk$](data, dart.bind(controller, 'add'));
    };
    dart.fn(onData, ListOfintTovoid());
    sub = stream.listen(onData, {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close'), cancelOnError: true});
    if (!dart.test(this.headersWritten)) {
      let future = this.writeHeaders();
      if (future != null) {
        sub.pause(future);
      }
    }
    return this.socket.addStream(controller.stream).then(dart.dynamic, dart.fn(_ => this.outbound, dynamicTo_HttpOutboundMessage()), {onError: dart.fn((error, stackTrace) => {
        if (dart.test(this[_gzip])) this[_gzipSink].close();
        this[_socketError] = true;
        this[_doneCompleter$].completeError(error, core.StackTrace._check(stackTrace));
        if (dart.test(this[_ignoreError](error))) {
          return this.outbound;
        } else {
          dart.throw(error);
        }
      }, dynamicAnddynamicTo_HttpOutboundMessage())});
  }
  close() {
    if (this[_closeFuture] != null) return this[_closeFuture];
    if (dart.test(this[_socketError])) return async.Future.value(this.outbound);
    if (dart.test(this.outbound[_isConnectionClosed])) return async.Future.value(this.outbound);
    if (!dart.test(this.headersWritten) && !dart.test(this.ignoreBody)) {
      if (this.outbound.headers.contentLength === -1) {
        this.outbound.headers.chunkedTransferEncoding = false;
        this.outbound.headers.contentLength = 0;
      } else if (dart.notNull(this.outbound.headers.contentLength) > 0) {
        let error = new _http.HttpException.new("No content even though contentLength was specified to be " + "greater than 0: " + dart.str(this.outbound.headers.contentLength) + ".", {uri: this.outbound[_uri]});
        this[_doneCompleter$].completeError(error);
        return this[_closeFuture] = async.Future.error(error);
      }
    }
    if (this.contentLength != null) {
      if (dart.notNull(this[_bytesWritten]) < dart.notNull(this.contentLength)) {
        let error = new _http.HttpException.new("Content size below specified contentLength. " + " " + dart.str(this[_bytesWritten]) + " bytes written but expected " + dart.str(this.contentLength) + ".", {uri: this.outbound[_uri]});
        this[_doneCompleter$].completeError(error);
        return this[_closeFuture] = async.Future.error(error);
      }
    }
    const finalize = () => {
      if (dart.test(this.chunked)) {
        if (dart.test(this[_gzip])) {
          this[_gzipAdd] = dart.bind(this.socket, 'add');
          if (dart.notNull(this[_gzipBufferLength]) > 0) {
            this[_gzipSink].add(typed_data.Uint8List.view(this[_gzipBuffer][$buffer], 0, this[_gzipBufferLength]));
          }
          this[_gzipBuffer] = null;
          this[_gzipSink].close();
          this[_gzipAdd] = null;
        }
        this[_addChunk$](this[_chunkHeader](0), dart.bind(this.socket, 'add'));
      }
      if (dart.notNull(this[_length$2]) > 0) {
        this.socket.add(typed_data.Uint8List.view(this[_buffer$1][$buffer], 0, this[_length$2]));
      }
      this[_buffer$1] = null;
      return this.socket.flush().then(dart.dynamic, dart.fn(_ => {
        this[_doneCompleter$].complete(this.socket);
        return this.outbound;
      }, dynamicTo_HttpOutboundMessage()), {onError: dart.fn((error, stackTrace) => {
          this[_doneCompleter$].completeError(error, core.StackTrace._check(stackTrace));
          if (dart.test(this[_ignoreError](error))) {
            return this.outbound;
          } else {
            dart.throw(error);
          }
        }, dynamicAnddynamicTo_HttpOutboundMessage())});
    };
    dart.fn(finalize, VoidToFuture());
    let future = this.writeHeaders();
    if (future != null) {
      return this[_closeFuture] = future.whenComplete(finalize);
    }
    return this[_closeFuture] = finalize();
  }
  get done() {
    return this[_doneCompleter$].future;
  }
  setHeader(data, length) {
    if (!(this[_length$2] === 0)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 1556, 12, "_length == 0");
    this[_buffer$1] = typed_data.Uint8List._check(data);
    this[_length$2] = length;
  }
  set gzip(value) {
    this[_gzip] = value;
    if (dart.test(this[_gzip])) {
      this[_gzipBuffer] = _native_typed_data.NativeUint8List.new(8192);
      if (!(this[_gzipSink] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 1565, 14, "_gzipSink == null");
      this[_gzipSink] = new io.ZLibEncoder.new({gzip: true}).startChunkedConversion(new _http._HttpGZipSink.new(dart.fn(data => {
        if (this[_gzipAdd] == null) return;
        this[_addChunk$](this[_chunkHeader](data[$length]), this[_gzipAdd]);
        this[_pendingChunkedFooter] = 2;
        this[_addChunk$](data, this[_gzipAdd]);
      }, ListOfintToNull())));
    }
  }
  [_ignoreError](error) {
    return (io.SocketException.is(error) || io.TlsException.is(error)) && _http.HttpResponse.is(this.outbound);
  }
  [_addGZipChunk](chunk, add) {
    if (!dart.test(this.outbound.bufferOutput)) {
      add(chunk);
      return;
    }
    if (dart.notNull(chunk[$length]) > dart.notNull(this[_gzipBuffer][$length]) - dart.notNull(this[_gzipBufferLength])) {
      add(typed_data.Uint8List.view(this[_gzipBuffer][$buffer], 0, this[_gzipBufferLength]));
      this[_gzipBuffer] = _native_typed_data.NativeUint8List.new(8192);
      this[_gzipBufferLength] = 0;
    }
    if (dart.notNull(chunk[$length]) > 8192) {
      add(chunk);
    } else {
      this[_gzipBuffer][$setRange](this[_gzipBufferLength], dart.notNull(this[_gzipBufferLength]) + dart.notNull(chunk[$length]), chunk);
      this[_gzipBufferLength] = dart.notNull(this[_gzipBufferLength]) + dart.notNull(chunk[$length]);
    }
  }
  [_addChunk$](chunk, add) {
    if (!dart.test(this.outbound.bufferOutput)) {
      if (this[_buffer$1] != null) {
        add(typed_data.Uint8List.view(this[_buffer$1][$buffer], 0, this[_length$2]));
        this[_buffer$1] = null;
        this[_length$2] = 0;
      }
      add(chunk);
      return;
    }
    if (dart.notNull(chunk[$length]) > dart.notNull(this[_buffer$1][$length]) - dart.notNull(this[_length$2])) {
      add(typed_data.Uint8List.view(this[_buffer$1][$buffer], 0, this[_length$2]));
      this[_buffer$1] = _native_typed_data.NativeUint8List.new(8192);
      this[_length$2] = 0;
    }
    if (dart.notNull(chunk[$length]) > 8192) {
      add(chunk);
    } else {
      this[_buffer$1][$setRange](this[_length$2], dart.notNull(this[_length$2]) + dart.notNull(chunk[$length]), chunk);
      this[_length$2] = dart.notNull(this[_length$2]) + dart.notNull(chunk[$length]);
    }
  }
  [_chunkHeader](length) {
    let hexDigits = C494 || CT.C494;
    if (length === 0) {
      if (this[_pendingChunkedFooter] === 2) return _http._HttpOutgoing._footerAndChunk0Length;
      return _http._HttpOutgoing._chunk0Length;
    }
    let size = this[_pendingChunkedFooter];
    let len = length;
    while (dart.notNull(len) > 0) {
      size = dart.notNull(size) + 1;
      len = len[$rightShift](4);
    }
    let footerAndHeader = _native_typed_data.NativeUint8List.new(dart.notNull(size) + 2);
    if (this[_pendingChunkedFooter] === 2) {
      footerAndHeader[$_set](0, 13);
      footerAndHeader[$_set](1, 10);
    }
    let index = size;
    while (dart.notNull(index) > dart.notNull(this[_pendingChunkedFooter])) {
      footerAndHeader[$_set](index = dart.notNull(index) - 1, hexDigits[$_get](dart.notNull(length) & 15));
      length = length[$rightShift](4);
    }
    footerAndHeader[$_set](dart.notNull(size) + 0, 13);
    footerAndHeader[$_set](dart.notNull(size) + 1, 10);
    return footerAndHeader;
  }
};
(_http._HttpOutgoing.new = function(socket) {
  this[_doneCompleter$] = CompleterOfSocket().new();
  this.ignoreBody = false;
  this.headersWritten = false;
  this[_buffer$1] = null;
  this[_length$2] = 0;
  this[_closeFuture] = null;
  this.chunked = false;
  this[_pendingChunkedFooter] = 0;
  this.contentLength = null;
  this[_bytesWritten] = 0;
  this[_gzip] = false;
  this[_gzipSink] = null;
  this[_gzipAdd] = null;
  this[_gzipBuffer] = null;
  this[_gzipBufferLength] = 0;
  this[_socketError] = false;
  this.outbound = null;
  this.socket = socket;
  ;
}).prototype = _http._HttpOutgoing.prototype;
;
_http._HttpOutgoing[dart.implements] = () => [async.StreamConsumer$(core.List$(core.int))];
;
dart.setGetterSignature(_http._HttpOutgoing, () => ({
  __proto__: dart.getGetters(_http._HttpOutgoing.__proto__),
  done: async.Future$(io.Socket)
}));
dart.setSetterSignature(_http._HttpOutgoing, () => ({
  __proto__: dart.getSetters(_http._HttpOutgoing.__proto__),
  gzip: core.bool
}));
dart.setLibraryUri(_http._HttpOutgoing, "dart:_http");
;
dart.defineLazy(_http._HttpOutgoing, {
  /*_http._HttpOutgoing._footerAndChunk0Length*/get _footerAndChunk0Length() {
    return C495 || CT.C495;
  },
  /*_http._HttpOutgoing._chunk0Length*/get _chunk0Length() {
    return C496 || CT.C496;
  }
});
const _subscription$0 = dart.privateName(_http, "_subscription");
const _dispose = dart.privateName(_http, "_dispose");
const _idleTimer = dart.privateName(_http, "_idleTimer");
const _currentUri = dart.privateName(_http, "_currentUri");
const _nextResponseCompleter = dart.privateName(_http, "_nextResponseCompleter");
const _streamFuture = dart.privateName(_http, "_streamFuture");
const _context$0 = dart.privateName(_http, "_context");
const _httpParser = dart.privateName(_http, "_httpParser");
const _proxyCredentials = dart.privateName(_http, "_proxyCredentials");
const _returnConnection = dart.privateName(_http, "_returnConnection");
_http._HttpClientConnection = class _HttpClientConnection extends core.Object {
  send(uri, port, method, proxy, timeline) {
    let t105;
    if (dart.test(this.closed)) {
      dart.throw(new _http.HttpException.new("Socket closed before request was sent", {uri: uri}));
    }
    this[_currentUri] = uri;
    this[_subscription$0].pause();
    let proxyCreds = null;
    let creds = null;
    let outgoing = new _http._HttpOutgoing.new(this[_socket$0]);
    let request = new _http._HttpClientRequest.new(outgoing, uri, method, proxy, this[_httpClient$], this, timeline);
    let host = uri.host;
    if (host[$contains](":")) host = "[" + dart.str(host) + "]";
    t105 = request.headers;
    t105.host = host;
    t105.port = port;
    t105[_add$1]("accept-encoding", "gzip");
    t105;
    if (this[_httpClient$].userAgent != null) {
      request.headers[_add$1]("user-agent", this[_httpClient$].userAgent);
    }
    if (dart.test(proxy.isAuthenticated)) {
      let auth = _http._CryptoUtils.bytesToBase64(convert.utf8.encode(dart.str(proxy.username) + ":" + dart.str(proxy.password)));
      request.headers.set("proxy-authorization", "Basic " + dart.str(auth));
    } else if (!dart.test(proxy.isDirect) && dart.notNull(this[_httpClient$][_proxyCredentials][$length]) > 0) {
      proxyCreds = this[_httpClient$][_findProxyCredentials](proxy);
      if (proxyCreds != null) {
        proxyCreds.authorize(request);
      }
    }
    if (uri.userInfo != null && !uri.userInfo[$isEmpty]) {
      let auth = _http._CryptoUtils.bytesToBase64(convert.utf8.encode(uri.userInfo));
      request.headers.set("authorization", "Basic " + dart.str(auth));
    } else {
      creds = this[_httpClient$][_findCredentials](uri);
      if (creds != null) {
        creds.authorize(request);
      }
    }
    this[_httpParser].isHead = method === "HEAD";
    this[_streamFuture] = outgoing.done.then(io.Socket, dart.fn(s => {
      this[_nextResponseCompleter] = CompleterOf_HttpIncoming().new();
      this[_nextResponseCompleter].future.then(core.Null, dart.fn(incoming => {
        this[_currentUri] = null;
        incoming.dataDone.then(core.Null, dart.fn(closing => {
          if (dart.test(incoming.upgraded)) {
            this[_httpClient$][_connectionClosed](this);
            this.startTimer();
            return;
          }
          if (dart.test(this.closed)) return;
          if (!dart.dtest(closing) && !dart.test(this[_dispose]) && dart.test(incoming.headers.persistentConnection) && dart.test(request.persistentConnection)) {
            this[_httpClient$][_returnConnection](this);
            this[_subscription$0].resume();
          } else {
            this.destroy();
          }
        }, dynamicToNull()));
        if (proxyCreds != null && dart.equals(proxyCreds.scheme, _http._AuthenticationScheme.DIGEST)) {
          let authInfo = incoming.headers._get("proxy-authentication-info");
          if (authInfo != null && authInfo[$length] === 1) {
            let header = _http._HeaderValue.parse(authInfo[$_get](0), {parameterSeparator: ","});
            let nextnonce = header.parameters[$_get]("nextnonce");
            if (nextnonce != null) proxyCreds.nonce = nextnonce;
          }
        }
        if (creds != null && dart.equals(creds.scheme, _http._AuthenticationScheme.DIGEST)) {
          let authInfo = incoming.headers._get("authentication-info");
          if (authInfo != null && authInfo[$length] === 1) {
            let header = _http._HeaderValue.parse(authInfo[$_get](0), {parameterSeparator: ","});
            let nextnonce = header.parameters[$_get]("nextnonce");
            if (nextnonce != null) creds.nonce = nextnonce;
          }
        }
        request[_onIncoming](incoming);
      }, _HttpIncomingToNull())).catchError(dart.fn(error => {
        dart.throw(new _http.HttpException.new("Connection closed before data was received", {uri: uri}));
      }, dynamicToNull()), {test: dart.fn(error => core.StateError.is(error), ObjectTobool())}).catchError(dart.fn((error, stackTrace) => {
        this.destroy();
        request[_onError$](error, core.StackTrace._check(stackTrace));
      }, dynamicAnddynamicToNull()));
      this[_subscription$0].resume();
      return s;
    }, SocketToSocket()), {onError: dart.fn(e => {
        this.destroy();
      }, dynamicToNull())});
    return request;
  }
  detachSocket() {
    return this[_streamFuture].then(io.Socket, dart.fn(_ => new _http._DetachedSocket.new(this[_socket$0], this[_httpParser].detachIncoming()), SocketTo_DetachedSocket()));
  }
  destroy() {
    this.closed = true;
    this[_httpClient$][_connectionClosed](this);
    this[_socket$0].destroy();
  }
  close() {
    this.closed = true;
    this[_httpClient$][_connectionClosed](this);
    this[_streamFuture].timeout(this[_httpClient$].idleTimeout).then(dart.void, dart.fn(_ => this[_socket$0].destroy(), SocketTovoid()));
  }
  createProxyTunnel(host, port, proxy, callback, timeline) {
    let t105;
    t105 = timeline;
    t105 == null ? null : t105.instant("Establishing proxy tunnel", {arguments: new _js_helper.LinkedMap.from(["proxyInfo", (() => {
          let t106 = new (IdentityMapOfString$Object()).new();
          if (proxy.host != null) t106[$_set]("host", proxy.host);
          if (proxy.port != null) t106[$_set]("port", proxy.port);
          if (proxy.username != null) t106[$_set]("username", proxy.username);
          t106[$_set]("isDirect", proxy.isDirect);
          return t106;
        })()])});
    let method = "CONNECT";
    let uri = core._Uri.new({host: host, port: port});
    _http._HttpClient._startRequestTimelineEvent(timeline, method, uri);
    let request = this.send(core._Uri.new({host: host, port: port}), port, method, proxy, timeline);
    if (dart.test(proxy.isAuthenticated)) {
      let auth = _http._CryptoUtils.bytesToBase64(convert.utf8.encode(dart.str(proxy.username) + ":" + dart.str(proxy.password)));
      request.headers.set("proxy-authorization", "Basic " + dart.str(auth));
    }
    return request.close().then(io.SecureSocket, dart.fn(response => {
      let t106;
      if (response.statusCode !== 200) {
        let error = "Proxy failed to establish tunnel " + "(" + dart.str(response.statusCode) + " " + dart.str(response.reasonPhrase) + ")";
        t106 = timeline;
        t106 == null ? null : t106.instant(error);
        dart.throw(new _http.HttpException.new(error, {uri: request.uri}));
      }
      let socket = _http._HttpClientResponse.as(response)[_httpRequest$][_httpClientConnection$][_socket$0];
      return io.SecureSocket.secure(socket, {host: host, context: this[_context$0], onBadCertificate: callback});
    }, HttpClientResponseToFutureOfSecureSocket())).then(_http._HttpClientConnection, dart.fn(secureSocket => {
      let t106;
      let key = core.String._check(_http._HttpClientConnection.makeKey(true, host, port));
      t106 = timeline;
      t106 == null ? null : t106.instant("Proxy tunnel established");
      return new _http._HttpClientConnection.new(key, secureSocket, request[_httpClient$], true);
    }, SecureSocketTo_HttpClientConnection()));
  }
  get connectionInfo() {
    return _http._HttpConnectionInfo.create(this[_socket$0]);
  }
  static makeKey(isSecure, host, port) {
    return dart.test(isSecure) ? "ssh:" + dart.str(host) + ":" + dart.str(port) : dart.str(host) + ":" + dart.str(port);
  }
  stopTimer() {
    if (this[_idleTimer] != null) {
      this[_idleTimer].cancel();
      this[_idleTimer] = null;
    }
  }
  startTimer() {
    if (!(this[_idleTimer] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 1948, 12, "_idleTimer == null");
    this[_idleTimer] = async.Timer.new(this[_httpClient$].idleTimeout, dart.fn(() => {
      this[_idleTimer] = null;
      this.close();
    }, VoidToNull()));
  }
};
(_http._HttpClientConnection.new = function(key, _socket, _httpClient, _proxyTunnel, _context) {
  if (_proxyTunnel === void 0) _proxyTunnel = false;
  if (_context === void 0) _context = null;
  this[_subscription$0] = null;
  this[_dispose] = false;
  this[_idleTimer] = null;
  this.closed = false;
  this[_currentUri] = null;
  this[_nextResponseCompleter] = null;
  this[_streamFuture] = null;
  this.key = key;
  this[_socket$0] = _socket;
  this[_httpClient$] = _httpClient;
  this[_proxyTunnel$] = _proxyTunnel;
  this[_context$0] = _context;
  this[_httpParser] = _http._HttpParser.responseParser();
  this[_httpParser].listenToStream(this[_socket$0]);
  this[_subscription$0] = this[_httpParser].listen(dart.fn(incoming => {
    this[_subscription$0].pause();
    if (this[_nextResponseCompleter] == null) {
      dart.throw(new _http.HttpException.new("Unexpected response (unsolicited response without request).", {uri: this[_currentUri]}));
    }
    if (incoming.statusCode === 100) {
      incoming.drain(dart.dynamic).then(core.Null, dart.fn(_ => {
        this[_subscription$0].resume();
      }, dynamicToNull())).catchError(dart.fn((error, stackTrace) => {
        if (stackTrace === void 0) stackTrace = null;
        this[_nextResponseCompleter].completeError(new _http.HttpException.new(core.String._check(dart.dload(error, 'message')), {uri: this[_currentUri]}), stackTrace);
        this[_nextResponseCompleter] = null;
      }, dynamicAndStackTraceToNull$()));
    } else {
      this[_nextResponseCompleter].complete(incoming);
      this[_nextResponseCompleter] = null;
    }
  }, _HttpIncomingToNull()), {onError: dart.fn((error, stackTrace) => {
      if (stackTrace === void 0) stackTrace = null;
      if (this[_nextResponseCompleter] != null) {
        this[_nextResponseCompleter].completeError(new _http.HttpException.new(core.String._check(dart.dload(error, 'message')), {uri: this[_currentUri]}), stackTrace);
        this[_nextResponseCompleter] = null;
      }
    }, dynamicAndStackTraceToNull$()), onDone: dart.fn(() => {
      if (this[_nextResponseCompleter] != null) {
        this[_nextResponseCompleter].completeError(new _http.HttpException.new("Connection closed before response was received", {uri: this[_currentUri]}));
        this[_nextResponseCompleter] = null;
      }
      this.close();
    }, VoidToNull())});
}).prototype = _http._HttpClientConnection.prototype;
;
;
dart.setGetterSignature(_http._HttpClientConnection, () => ({
  __proto__: dart.getGetters(_http._HttpClientConnection.__proto__),
  connectionInfo: _http.HttpConnectionInfo
}));
dart.setLibraryUri(_http._HttpClientConnection, "dart:_http");
;
_http._ConnectionInfo = class _ConnectionInfo extends core.Object {};
(_http._ConnectionInfo.new = function(connection, proxy) {
  this.connection = connection;
  this.proxy = proxy;
  ;
}).prototype = _http._ConnectionInfo.prototype;
;
dart.setLibraryUri(_http._ConnectionInfo, "dart:_http");
;
const _idle = dart.privateName(_http, "_idle");
const _active = dart.privateName(_http, "_active");
const _socketTasks = dart.privateName(_http, "_socketTasks");
const _pending = dart.privateName(_http, "_pending");
const _connecting = dart.privateName(_http, "_connecting");
const _checkPending = dart.privateName(_http, "_checkPending");
const _connectionsChanged = dart.privateName(_http, "_connectionsChanged");
const _badCertificateCallback = dart.privateName(_http, "_badCertificateCallback");
const _getConnectionTarget = dart.privateName(_http, "_getConnectionTarget");
_http._ConnectionTarget = class _ConnectionTarget extends core.Object {
  get isEmpty() {
    return dart.test(this[_idle][$isEmpty]) && dart.test(this[_active][$isEmpty]) && this[_connecting] === 0;
  }
  get hasIdle() {
    return this[_idle][$isNotEmpty];
  }
  get hasActive() {
    return dart.test(this[_active][$isNotEmpty]) || dart.notNull(this[_connecting]) > 0;
  }
  takeIdle() {
    if (!dart.test(this.hasIdle)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 1986, 12, "hasIdle");
    let connection = this[_idle][$first];
    this[_idle].remove(connection);
    connection.stopTimer();
    this[_active].add(connection);
    return connection;
  }
  [_checkPending]() {
    if (dart.test(this[_pending][$isNotEmpty])) {
      dart.dcall(this[_pending].removeFirst(), []);
    }
  }
  addNewActive(connection) {
    this[_active].add(connection);
  }
  returnConnection(connection) {
    if (!dart.test(this[_active].contains(connection))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 2005, 12, "_active.contains(connection)");
    this[_active].remove(connection);
    this[_idle].add(connection);
    connection.startTimer();
    this[_checkPending]();
  }
  connectionClosed(connection) {
    if (!(!dart.test(this[_active].contains(connection)) || !dart.test(this[_idle].contains(connection)))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 2013, 12, "!_active.contains(connection) || !_idle.contains(connection)");
    this[_active].remove(connection);
    this[_idle].remove(connection);
    this[_checkPending]();
  }
  close(force) {
    for (let t of this[_socketTasks][$toList]()) {
      t.socket.then(core.Null, dart.fn(s => {
        dart.dsend(s, 'destroy', []);
      }, dynamicToNull()), {onError: dart.fn(e => {
        }, dynamicToNull())});
      t.cancel();
    }
    if (dart.test(force)) {
      for (let c of this[_idle][$toList]()) {
        c.destroy();
      }
      for (let c of this[_active][$toList]()) {
        c.destroy();
      }
    } else {
      for (let c of this[_idle][$toList]()) {
        c.close();
      }
    }
  }
  connect(uriHost, uriPort, proxy, client, timeline) {
    if (dart.test(this.hasIdle)) {
      let connection = this.takeIdle();
      client[_connectionsChanged]();
      return FutureOf_ConnectionInfo().value(new _http._ConnectionInfo.new(connection, proxy));
    }
    if (client.maxConnectionsPerHost != null && dart.notNull(this[_active][$length]) + dart.notNull(this[_connecting]) >= dart.notNull(client.maxConnectionsPerHost)) {
      let completer = CompleterOf_ConnectionInfo().new();
      this[_pending].add(dart.fn(() => {
        completer.complete(this.connect(uriHost, uriPort, proxy, client, timeline));
      }, VoidToNull()));
      return completer.future;
    }
    let currentBadCertificateCallback = client[_badCertificateCallback];
    function callback(certificate) {
      if (currentBadCertificateCallback == null) return false;
      return currentBadCertificateCallback(certificate, uriHost, uriPort);
    }
    dart.fn(callback, X509CertificateTobool());
    let connectionTask = dart.test(this.isSecure) && dart.test(proxy.isDirect) ? io.SecureSocket.startConnect(this.host, this.port, {context: this.context, onBadCertificate: callback}) : io.Socket.startConnect(this.host, this.port);
    this[_connecting] = dart.notNull(this[_connecting]) + 1;
    return connectionTask.then(_http._ConnectionInfo, dart.fn(task => {
      this[_socketTasks].add(task);
      let socketFuture = task.socket;
      let connectionTimeout = client.connectionTimeout;
      if (connectionTimeout != null) {
        socketFuture = socketFuture.timeout(connectionTimeout, {onTimeout: dart.fn(() => {
            this[_socketTasks].remove(task);
            task.cancel();
            return null;
          }, VoidToNull())});
      }
      return socketFuture.then(_http._ConnectionInfo, dart.fn(socket => {
        if (socket == null) {
          if (!(connectionTimeout != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 2087, 18, "connectionTimeout != null");
          dart.throw(new io.SocketException.new("HTTP connection timed out after " + dart.str(connectionTimeout) + ", " + "host: " + dart.str(this.host) + ", port: " + dart.str(this.port)));
        }
        this[_connecting] = dart.notNull(this[_connecting]) - 1;
        dart.dsend(socket, 'setOption', [io.SocketOption.tcpNoDelay, true]);
        let connection = new _http._HttpClientConnection.new(this.key, io.Socket._check(socket), client, false, this.context);
        if (dart.test(this.isSecure) && !dart.test(proxy.isDirect)) {
          connection[_dispose] = true;
          return connection.createProxyTunnel(uriHost, uriPort, proxy, callback, timeline).then(_http._ConnectionInfo, dart.fn(tunnel => {
            client[_getConnectionTarget](uriHost, uriPort, true).addNewActive(tunnel);
            this[_socketTasks].remove(task);
            return new _http._ConnectionInfo.new(tunnel, proxy);
          }, _HttpClientConnectionTo_ConnectionInfo()));
        } else {
          this.addNewActive(connection);
          this[_socketTasks].remove(task);
          return new _http._ConnectionInfo.new(connection, proxy);
        }
      }, dynamicToFutureOrOf_ConnectionInfo()), {onError: dart.fn(error => {
          this[_connecting] = dart.notNull(this[_connecting]) - 1;
          this[_socketTasks].remove(task);
          this[_checkPending]();
          dart.throw(error);
        }, dynamicToNull())});
    }, ConnectionTaskToFutureOf_ConnectionInfo()));
  }
};
(_http._ConnectionTarget.new = function(key, host, port, isSecure, context) {
  this[_idle] = new (_HashSetOf_HttpClientConnection()).new();
  this[_active] = new (_HashSetOf_HttpClientConnection()).new();
  this[_socketTasks] = new (_HashSetOfConnectionTask()).new();
  this[_pending] = new collection.ListQueue.new();
  this[_connecting] = 0;
  this.key = key;
  this.host = host;
  this.port = port;
  this.isSecure = isSecure;
  this.context = context;
  ;
}).prototype = _http._ConnectionTarget.prototype;
;
;
dart.setGetterSignature(_http._ConnectionTarget, () => ({
  __proto__: dart.getGetters(_http._ConnectionTarget.__proto__),
  isEmpty: core.bool,
  hasIdle: core.bool,
  hasActive: core.bool
}));
dart.setLibraryUri(_http._ConnectionTarget, "dart:_http");
;
const _closing = dart.privateName(_http, "_closing");
const _closingForcefully = dart.privateName(_http, "_closingForcefully");
const _connectionTargets = dart.privateName(_http, "_connectionTargets");
const _credentials = dart.privateName(_http, "_credentials");
const _findProxy = dart.privateName(_http, "_findProxy");
let C497;
const _idleTimeout = dart.privateName(_http, "_idleTimeout");
let C498;
const _openUrl = dart.privateName(_http, "_openUrl");
const _closeConnections = dart.privateName(_http, "_closeConnections");
const _Proxy_isDirect = dart.privateName(_http, "_Proxy.isDirect");
const _Proxy_password = dart.privateName(_http, "_Proxy.password");
const _Proxy_username = dart.privateName(_http, "_Proxy.username");
const _Proxy_port = dart.privateName(_http, "_Proxy.port");
const _Proxy_host = dart.privateName(_http, "_Proxy.host");
let C501;
let C500;
const _ProxyConfiguration_proxies = dart.privateName(_http, "_ProxyConfiguration.proxies");
let C499;
const _getConnection = dart.privateName(_http, "_getConnection");
_http._HttpClient = class _HttpClient extends core.Object {
  get idleTimeout() {
    return this[_idleTimeout];
  }
  set idleTimeout(timeout) {
    this[_idleTimeout] = timeout;
    for (let c of this[_connectionTargets][$values]) {
      for (let idle of c[_idle]) {
        idle.stopTimer();
        idle.startTimer();
      }
    }
  }
  set badCertificateCallback(callback) {
    this[_badCertificateCallback] = callback;
  }
  open(method, host, port, path) {
    let fragmentStart = path.length;
    let queryStart = path.length;
    for (let i = path.length - 1; i >= 0; i = i - 1) {
      let char = path[$codeUnitAt](i);
      if (char === 35) {
        fragmentStart = i;
        queryStart = i;
      } else if (char === 63) {
        queryStart = i;
      }
    }
    let query = null;
    if (queryStart < fragmentStart) {
      query = path[$substring](queryStart + 1, fragmentStart);
      path = path[$substring](0, queryStart);
    }
    let uri = core._Uri.new({scheme: "http", host: host, port: port, path: path, query: query});
    return this[_openUrl](method, uri);
  }
  openUrl(method, url) {
    return this[_openUrl](method, url);
  }
  get(host, port, path) {
    return this.open("get", host, port, path);
  }
  getUrl(url) {
    return this[_openUrl]("get", url);
  }
  post(host, port, path) {
    return this.open("post", host, port, path);
  }
  postUrl(url) {
    return this[_openUrl]("post", url);
  }
  put(host, port, path) {
    return this.open("put", host, port, path);
  }
  putUrl(url) {
    return this[_openUrl]("put", url);
  }
  delete(host, port, path) {
    return this.open("delete", host, port, path);
  }
  deleteUrl(url) {
    return this[_openUrl]("delete", url);
  }
  head(host, port, path) {
    return this.open("head", host, port, path);
  }
  headUrl(url) {
    return this[_openUrl]("head", url);
  }
  patch(host, port, path) {
    return this.open("patch", host, port, path);
  }
  patchUrl(url) {
    return this[_openUrl]("patch", url);
  }
  close(opts) {
    let force = opts && 'force' in opts ? opts.force : false;
    this[_closing] = true;
    this[_closingForcefully] = force;
    this[_closeConnections](this[_closingForcefully]);
    if (!!dart.test(this[_connectionTargets][$values][$any](dart.fn(s => s.hasIdle, _ConnectionTargetTobool())))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 2228, 12, "!_connectionTargets.values.any((s) => s.hasIdle)");
    if (!(!dart.test(force) || !dart.test(this[_connectionTargets][$values][$any](dart.fn(s => s[_active][$isNotEmpty], _ConnectionTargetTobool()))))) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 2230, 9, "!force || !_connectionTargets.values.any((s) => s._active.isNotEmpty)");
  }
  set authenticate(f) {
    this[_authenticate] = f;
  }
  addCredentials(url, realm, cr) {
    this[_credentials][$add](new _http._SiteCredentials.new(url, realm, _http._HttpClientCredentials._check(cr)));
  }
  set authenticateProxy(f) {
    this[_authenticateProxy] = f;
  }
  addProxyCredentials(host, port, realm, cr) {
    this[_proxyCredentials][$add](new _http._ProxyCredentials.new(host, port, realm, _http._HttpClientCredentials._check(cr)));
  }
  set findProxy(f) {
    return this[_findProxy] = f;
  }
  static _startRequestTimelineEvent(timeline, method, uri) {
    let t106;
    t106 = timeline;
    t106 == null ? null : t106.start("HTTP CLIENT " + method[$toUpperCase](), {arguments: new _js_helper.LinkedMap.from(["filterKey", "HTTP/client", "method", method[$toUpperCase](), "uri", dart.toString(uri)])});
  }
  [_openUrl](method, uri) {
    if (dart.test(this[_closing])) {
      dart.throw(new core.StateError.new("Client is closed"));
    }
    uri = uri.removeFragment();
    if (method == null) {
      dart.throw(new core.ArgumentError.new(method));
    }
    if (method !== "CONNECT") {
      if (uri.host[$isEmpty]) {
        dart.throw(new core.ArgumentError.new("No host specified in URI " + dart.str(uri)));
      } else if (uri.scheme !== "http" && uri.scheme !== "https") {
        dart.throw(new core.ArgumentError.new("Unsupported scheme '" + dart.str(uri.scheme) + "' in URI " + dart.str(uri)));
      }
    }
    let isSecure = uri.scheme === "https";
    let port = uri.port;
    if (port === 0) {
      port = isSecure ? 443 : 80;
    }
    let proxyConf = C499 || CT.C499;
    if (this[_findProxy] != null) {
      try {
        proxyConf = new _http._ProxyConfiguration.new(core.String._check(dart.dsend(this, _findProxy, [uri])));
      } catch (e) {
        let error = dart.getThrown(e);
        let stackTrace = dart.stackTrace(e);
        return FutureOf_HttpClientRequest().error(error, stackTrace);
      }
    }
    let timeline = null;
    if (dart.test(_http.HttpClient.enableTimelineLogging)) {
      timeline = new developer.TimelineTask.new();
      _http._HttpClient._startRequestTimelineEvent(timeline, method, uri);
    }
    return this[_getConnection](uri.host, port, proxyConf, isSecure, timeline).then(_http._HttpClientRequest, dart.fn(info => {
      function send(info) {
        let t107;
        t107 = timeline;
        t107 == null ? null : t107.instant("Connection established");
        return info.connection.send(uri, port, method[$toUpperCase](), info.proxy, timeline);
      }
      dart.fn(send, _ConnectionInfoTo_HttpClientRequest());
      if (dart.test(info.connection.closed)) {
        return this[_getConnection](uri.host, port, proxyConf, isSecure, timeline).then(_http._HttpClientRequest, send);
      }
      return send(info);
    }, _ConnectionInfoToFutureOrOf_HttpClientRequest()), {onError: dart.fn(error => {
        let t107;
        t107 = timeline;
        t107 == null ? null : t107.finish({arguments: new _js_helper.LinkedMap.from(["error", dart.toString(error)])});
        dart.throw(error);
      }, dynamicToNull())});
  }
  [_openUrlFromRequest](method, uri, previous) {
    let resolved = previous.uri.resolveUri(uri);
    return this[_openUrl](method, resolved).then(_http._HttpClientRequest, dart.fn(request => {
      let t107, t107$;
      t107 = request;
      t107.followRedirects = previous.followRedirects;
      t107.maxRedirects = previous.maxRedirects;
      t107;
      for (let header of previous.headers[_headers][$keys]) {
        if (request.headers._get(header) == null) {
          request.headers.set(header, previous.headers._get(header));
        }
      }
      t107$ = request;
      t107$.headers.chunkedTransferEncoding = false;
      t107$.contentLength = 0;
      return t107$;
    }, _HttpClientRequestTo_HttpClientRequest()));
  }
  [_returnConnection](connection) {
    this[_connectionTargets][$_get](connection.key).returnConnection(connection);
    this[_connectionsChanged]();
  }
  [_connectionClosed](connection) {
    connection.stopTimer();
    let connectionTarget = this[_connectionTargets][$_get](connection.key);
    if (connectionTarget != null) {
      connectionTarget.connectionClosed(connection);
      if (dart.test(connectionTarget.isEmpty)) {
        this[_connectionTargets][$remove](connection.key);
      }
      this[_connectionsChanged]();
    }
  }
  [_connectionsChanged]() {
    if (dart.test(this[_closing])) {
      this[_closeConnections](this[_closingForcefully]);
    }
  }
  [_closeConnections](force) {
    for (let connectionTarget of this[_connectionTargets][$values][$toList]()) {
      connectionTarget.close(force);
    }
  }
  [_getConnectionTarget](host, port, isSecure) {
    let key = core.String._check(_http._HttpClientConnection.makeKey(isSecure, host, port));
    return this[_connectionTargets][$putIfAbsent](key, dart.fn(() => new _http._ConnectionTarget.new(key, host, port, isSecure, this[_context$0]), VoidTo_ConnectionTarget()));
  }
  [_getConnection](uriHost, uriPort, proxyConf, isSecure, timeline) {
    let proxies = proxyConf.proxies[$iterator];
    const connect = error => {
      if (!dart.test(proxies.moveNext())) return FutureOf_ConnectionInfo().error(error);
      let proxy = proxies.current;
      let host = dart.test(proxy.isDirect) ? uriHost : proxy.host;
      let port = dart.test(proxy.isDirect) ? uriPort : proxy.port;
      return this[_getConnectionTarget](host, port, isSecure).connect(uriHost, uriPort, proxy, this, timeline).catchError(connect);
    };
    dart.fn(connect, dynamicToFutureOf_ConnectionInfo());
    return connect(new _http.HttpException.new("No proxies given"));
  }
  [_findCredentials](url, scheme) {
    if (scheme === void 0) scheme = null;
    let cr = this[_credentials][$fold](_http._SiteCredentials, null, dart.fn((prev, value) => {
      let siteCredentials = _http._SiteCredentials.as(value);
      if (dart.test(siteCredentials.applies(url, scheme))) {
        if (prev == null) return _http._SiteCredentials._check(value);
        return siteCredentials.uri.path.length > prev.uri.path.length ? siteCredentials : prev;
      } else {
        return prev;
      }
    }, _SiteCredentialsAnd_CredentialsTo_SiteCredentials()));
    return cr;
  }
  [_findProxyCredentials](proxy, scheme) {
    if (scheme === void 0) scheme = null;
    let it = this[_proxyCredentials][$iterator];
    while (dart.test(it.moveNext())) {
      if (dart.test(it.current.applies(proxy, scheme))) {
        return it.current;
      }
    }
    return null;
  }
  [_removeCredentials](cr) {
    let index = this[_credentials][$indexOf](cr);
    if (index !== -1) {
      this[_credentials][$removeAt](index);
    }
  }
  [_removeProxyCredentials](cr) {
    let index = this[_proxyCredentials][$indexOf](_http._ProxyCredentials._check(cr));
    if (index !== -1) {
      this[_proxyCredentials][$removeAt](index);
    }
  }
  static _findProxyFromEnvironment(url, environment) {
    function checkNoProxy(option) {
      if (option == null) return null;
      let names = option[$split](",")[$map](core.String, dart.fn(s => s[$trim](), StringToString()))[$iterator];
      while (dart.test(names.moveNext())) {
        let name = names.current;
        if (name[$startsWith]("[") && name[$endsWith]("]") && "[" + dart.str(url.host) + "]" === name || name[$isNotEmpty] && url.host[$endsWith](name)) {
          return "DIRECT";
        }
      }
      return null;
    }
    dart.fn(checkNoProxy, StringToString());
    function checkProxy(option) {
      if (option == null) return null;
      option = option[$trim]();
      if (option[$isEmpty]) return null;
      let pos = option[$indexOf]("://");
      if (pos >= 0) {
        option = option[$substring](pos + 3);
      }
      pos = option[$indexOf]("/");
      if (pos >= 0) {
        option = option[$substring](0, pos);
      }
      if (option[$indexOf]("[") === 0) {
        let pos = option[$lastIndexOf](":");
        if (option[$indexOf]("]") > pos) option = dart.str(option) + ":1080";
      } else {
        if (option[$indexOf](":") === -1) option = dart.str(option) + ":1080";
      }
      return "PROXY " + dart.str(option);
    }
    dart.fn(checkProxy, StringToString());
    if (environment == null) environment = _http._HttpClient._platformEnvironmentCache;
    let proxyCfg = null;
    let noProxy = environment[$_get]("no_proxy");
    if (noProxy == null) noProxy = environment[$_get]("NO_PROXY");
    if ((proxyCfg = checkNoProxy(noProxy)) != null) {
      return proxyCfg;
    }
    if (url.scheme === "http") {
      let proxy = environment[$_get]("http_proxy");
      if (proxy == null) proxy = environment[$_get]("HTTP_PROXY");
      if ((proxyCfg = checkProxy(proxy)) != null) {
        return proxyCfg;
      }
    } else if (url.scheme === "https") {
      let proxy = environment[$_get]("https_proxy");
      if (proxy == null) proxy = environment[$_get]("HTTPS_PROXY");
      if ((proxyCfg = checkProxy(proxy)) != null) {
        return proxyCfg;
      }
    }
    return "DIRECT";
  }
};
(_http._HttpClient.new = function(_context) {
  this[_closing] = false;
  this[_closingForcefully] = false;
  this[_connectionTargets] = new (IdentityMapOfString$_ConnectionTarget()).new();
  this[_credentials] = JSArrayOf_Credentials().of([]);
  this[_proxyCredentials] = JSArrayOf_ProxyCredentials().of([]);
  this[_authenticate] = null;
  this[_authenticateProxy] = null;
  this[_findProxy] = C497 || CT.C497;
  this[_idleTimeout] = C498 || CT.C498;
  this[_badCertificateCallback] = null;
  this.connectionTimeout = null;
  this.maxConnectionsPerHost = null;
  this.autoUncompress = true;
  this.userAgent = _http._getHttpVersion();
  this[_context$0] = _context;
  ;
}).prototype = _http._HttpClient.prototype;
;
_http._HttpClient[dart.implements] = () => [_http.HttpClient];
;
dart.setGetterSignature(_http._HttpClient, () => ({
  __proto__: dart.getGetters(_http._HttpClient.__proto__),
  idleTimeout: core.Duration
}));
dart.setSetterSignature(_http._HttpClient, () => ({
  __proto__: dart.getSetters(_http._HttpClient.__proto__),
  idleTimeout: core.Duration,
  badCertificateCallback: dart.fnType(core.bool, [io.X509Certificate, core.String, core.int]),
  authenticate: dart.fnType(async.Future$(core.bool), [core.Uri, core.String, core.String]),
  authenticateProxy: dart.fnType(async.Future$(core.bool), [core.String, core.int, core.String, core.String]),
  findProxy: dart.fnType(core.String, [core.Uri])
}));
dart.setLibraryUri(_http._HttpClient, "dart:_http");
;
dart.defineLazy(_http._HttpClient, {
  /*_http._HttpClient._platformEnvironmentCache*/get _platformEnvironmentCache() {
    return io.Platform.environment;
  },
  set _platformEnvironmentCache(_) {}
});
const _state$1 = dart.privateName(_http, "_state");
const _idleMark = dart.privateName(_http, "_idleMark");
const _markActive = dart.privateName(_http, "_markActive");
const _markIdle = dart.privateName(_http, "_markIdle");
const _handleRequest = dart.privateName(_http, "_handleRequest");
const _isActive = dart.privateName(_http, "_isActive");
const _isIdle = dart.privateName(_http, "_isIdle");
const _isDetached = dart.privateName(_http, "_isDetached");
const _toJSON$ = dart.privateName(_http, "_toJSON");
const LinkedListEntry__ServiceObject$36 = class LinkedListEntry__ServiceObject extends collection.LinkedListEntry {};
(LinkedListEntry__ServiceObject$36.new = function() {
  _http._ServiceObject.new.call(this);
  LinkedListEntry__ServiceObject$36.__proto__.new.call(this);
}).prototype = LinkedListEntry__ServiceObject$36.prototype;
dart.applyMixin(LinkedListEntry__ServiceObject$36, _http._ServiceObject);
_http._HttpConnection = class _HttpConnection extends LinkedListEntry__ServiceObject$36 {
  markIdle() {
    this[_idleMark] = true;
  }
  get isMarkedIdle() {
    return this[_idleMark];
  }
  destroy() {
    if (this[_state$1] === 2 || this[_state$1] === 3) return;
    this[_state$1] = 2;
    dart.dsend(this[_socket$0], 'destroy', []);
    this[_httpServer$][_connectionClosed](this);
    _http._HttpConnection._connections[$remove](this[_serviceId$]);
  }
  detachSocket() {
    this[_state$1] = 3;
    this[_httpServer$][_connectionClosed](this);
    let detachedIncoming = this[_httpParser].detachIncoming();
    return this[_streamFuture].then(io.Socket, dart.fn(_ => {
      _http._HttpConnection._connections[$remove](this[_serviceId$]);
      return new _http._DetachedSocket.new(io.Socket._check(this[_socket$0]), detachedIncoming);
    }, dynamicTo_DetachedSocket()));
  }
  get connectionInfo() {
    return _http._HttpConnectionInfo.create(io.Socket._check(this[_socket$0]));
  }
  get [_isActive]() {
    return this[_state$1] === 0;
  }
  get [_isIdle]() {
    return this[_state$1] === 1;
  }
  get [_isClosing]() {
    return this[_state$1] === 2;
  }
  get [_isDetached]() {
    return this[_state$1] === 3;
  }
  get [_serviceTypePath$]() {
    return "io/http/serverconnections";
  }
  get [_serviceTypeName$]() {
    return "HttpServerConnection";
  }
  [_toJSON$](ref) {
    let name = dart.str(dart.dload(dart.dload(this[_socket$0], 'address'), 'host')) + ":" + dart.str(dart.dload(this[_socket$0], 'port')) + " <-> " + dart.str(dart.dload(dart.dload(this[_socket$0], 'remoteAddress'), 'host')) + ":" + dart.str(dart.dload(this[_socket$0], 'remotePort'));
    let r = new (IdentityMapOfString$dynamic()).from(["id", this[_servicePath$], "type", this[_serviceType$](ref), "name", name, "user_name", name]);
    if (dart.test(ref)) {
      return r;
    }
    r[$_set]("server", this[_httpServer$][_toJSON$](true));
    try {
      r[$_set]("socket", dart.dsend(this[_socket$0], _toJSON$, [true]));
    } catch (e) {
      let _ = dart.getThrown(e);
      r[$_set]("socket", new (IdentityMapOfString$String()).from(["id", this[_servicePath$], "type", "@Socket", "name", "UserSocket", "user_name", "UserSocket"]));
    }
    switch (this[_state$1]) {
      case 0:
      {
        r[$_set]("state", "Active");
        break;
      }
      case 1:
      {
        r[$_set]("state", "Idle");
        break;
      }
      case 2:
      {
        r[$_set]("state", "Closing");
        break;
      }
      case 3:
      {
        r[$_set]("state", "Detached");
        break;
      }
      default:
      {
        r[$_set]("state", "Unknown");
        break;
      }
    }
    return r;
  }
};
(_http._HttpConnection.new = function(_socket, _httpServer) {
  this[_state$1] = 1;
  this[_subscription$0] = null;
  this[_idleMark] = false;
  this[_streamFuture] = null;
  this[_socket$0] = _socket;
  this[_httpServer$] = _httpServer;
  this[_httpParser] = _http._HttpParser.requestParser();
  _http._HttpConnection.__proto__.new.call(this);
  _http._HttpConnection._connections[$_set](this[_serviceId$], this);
  this[_httpParser].listenToStream(StreamOfUint8List()._check(this[_socket$0]));
  this[_subscription$0] = this[_httpParser].listen(dart.fn(incoming => {
    this[_httpServer$][_markActive](this);
    incoming.dataDone.then(core.Null, dart.fn(closing => {
      if (dart.dtest(closing)) this.destroy();
    }, dynamicToNull()));
    this[_subscription$0].pause();
    this[_state$1] = 0;
    let outgoing = new _http._HttpOutgoing.new(io.Socket._check(this[_socket$0]));
    let response = new _http._HttpResponse.new(incoming.uri, incoming.headers.protocolVersion, outgoing, this[_httpServer$].defaultResponseHeaders, this[_httpServer$].serverHeader);
    let request = new _http._HttpRequest.new(response, incoming, this[_httpServer$], this);
    this[_streamFuture] = outgoing.done.then(dart.dynamic, dart.fn(_ => {
      response.deadline = null;
      if (this[_state$1] === 3) return;
      if (dart.test(response.persistentConnection) && dart.test(request.persistentConnection) && dart.test(incoming.fullBodyRead) && !dart.test(this[_httpParser].upgrade) && !dart.test(this[_httpServer$].closed)) {
        this[_state$1] = 1;
        this[_idleMark] = false;
        this[_httpServer$][_markIdle](this);
        this[_subscription$0].resume();
      } else {
        this.destroy();
      }
    }, SocketToNull()), {onError: dart.fn(_ => {
        this.destroy();
      }, dynamicToNull())});
    outgoing.ignoreBody = request.method === "HEAD";
    response[_httpRequest$] = request;
    this[_httpServer$][_handleRequest](request);
  }, _HttpIncomingToNull()), {onDone: dart.fn(() => {
      this.destroy();
    }, VoidToNull()), onError: dart.fn(error => {
      this.destroy();
    }, dynamicToNull())});
}).prototype = _http._HttpConnection.prototype;
;
;
dart.setGetterSignature(_http._HttpConnection, () => ({
  __proto__: dart.getGetters(_http._HttpConnection.__proto__),
  isMarkedIdle: core.bool,
  connectionInfo: _http.HttpConnectionInfo,
  [_isActive]: core.bool,
  [_isIdle]: core.bool,
  [_isClosing]: core.bool,
  [_isDetached]: core.bool,
  [_serviceTypePath$]: core.String,
  [_serviceTypeName$]: core.String
}));
dart.setLibraryUri(_http._HttpConnection, "dart:_http");
;
dart.defineLazy(_http._HttpConnection, {
  /*_http._HttpConnection._ACTIVE*/get _ACTIVE() {
    return 0;
  },
  /*_http._HttpConnection._IDLE*/get _IDLE() {
    return 1;
  },
  /*_http._HttpConnection._CLOSING*/get _CLOSING() {
    return 2;
  },
  /*_http._HttpConnection._DETACHED*/get _DETACHED() {
    return 3;
  },
  /*_http._HttpConnection._connections*/get _connections() {
    return new (IdentityMapOfint$_HttpConnection()).new();
  },
  set _connections(_) {}
});
const _activeConnections = dart.privateName(_http, "_activeConnections");
const _idleConnections = dart.privateName(_http, "_idleConnections");
const _serverSocket$ = dart.privateName(_http, "_serverSocket");
const _closeServer$ = dart.privateName(_http, "_closeServer");
let C502;
const _maybePerformCleanup$ = dart.privateName(_http, "_maybePerformCleanup");
const Stream__ServiceObject$36 = class Stream__ServiceObject extends async.Stream$(_http.HttpRequest) {};
(Stream__ServiceObject$36.new = function() {
  _http._ServiceObject.new.call(this);
  Stream__ServiceObject$36.__proto__.new.call(this);
}).prototype = Stream__ServiceObject$36.prototype;
(Stream__ServiceObject$36._internal = function() {
  _http._ServiceObject.new.call(this);
  Stream__ServiceObject$36.__proto__._internal.call(this);
}).prototype = Stream__ServiceObject$36.prototype;
dart.applyMixin(Stream__ServiceObject$36, _http._ServiceObject);
_http._HttpServer = class _HttpServer extends Stream__ServiceObject$36 {
  static bind(address, port, backlog, v6Only, shared) {
    return io.ServerSocket.bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared}).then(_http.HttpServer, dart.fn(socket => new _http._HttpServer.__(socket, true), ServerSocketTo_HttpServer()));
  }
  static bindSecure(address, port, context, backlog, v6Only, requestClientCertificate, shared) {
    return io.SecureServerSocket.bind(address, port, context, {backlog: backlog, v6Only: v6Only, requestClientCertificate: requestClientCertificate, shared: shared}).then(_http.HttpServer, dart.fn(socket => new _http._HttpServer.__(socket, true), SecureServerSocketTo_HttpServer()));
  }
  static _initDefaultResponseHeaders() {
    let defaultResponseHeaders = new _http._HttpHeaders.new("1.1");
    defaultResponseHeaders.contentType = _http.ContentType.text;
    defaultResponseHeaders.set("X-Frame-Options", "SAMEORIGIN");
    defaultResponseHeaders.set("X-Content-Type-Options", "nosniff");
    defaultResponseHeaders.set("X-XSS-Protection", "1; mode=block");
    return defaultResponseHeaders;
  }
  get idleTimeout() {
    return this[_idleTimeout];
  }
  set idleTimeout(duration) {
    if (this[_idleTimer] != null) {
      this[_idleTimer].cancel();
      this[_idleTimer] = null;
    }
    this[_idleTimeout] = duration;
    if (this[_idleTimeout] != null) {
      this[_idleTimer] = async.Timer.periodic(this[_idleTimeout], dart.fn(_ => {
        for (let idle of this[_idleConnections][$toList]()) {
          if (dart.test(idle.isMarkedIdle)) {
            idle.destroy();
          } else {
            idle.markIdle();
          }
        }
      }, TimerToNull()));
    }
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    dart.dsend(this[_serverSocket$], 'listen', [dart.fn(socket => {
        socket.setOption(io.SocketOption.tcpNoDelay, true);
        let connection = new _http._HttpConnection.new(socket, this);
        this[_idleConnections].add(connection);
      }, SocketToNull())], {onError: dart.fn((error, stackTrace) => {
        if (!io.HandshakeException.is(error)) {
          this[_controller$0].addError(error, core.StackTrace._check(stackTrace));
        }
      }, dynamicAnddynamicToNull()), onDone: dart.bind(this[_controller$0], 'close')});
    return this[_controller$0].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  close(opts) {
    let force = opts && 'force' in opts ? opts.force : false;
    this.closed = true;
    let result = null;
    if (this[_serverSocket$] != null && dart.test(this[_closeServer$])) {
      result = async.Future._check(dart.dsend(this[_serverSocket$], 'close', []));
    } else {
      result = async.Future.value();
    }
    this.idleTimeout = null;
    if (dart.test(force)) {
      for (let c of this[_activeConnections][$toList]()) {
        c.destroy();
      }
      if (!dart.test(this[_activeConnections].isEmpty)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 2792, 14, "_activeConnections.isEmpty");
    }
    for (let c of this[_idleConnections][$toList]()) {
      c.destroy();
    }
    this[_maybePerformCleanup$]();
    return result;
  }
  [_maybePerformCleanup$]() {
    if (dart.test(this.closed) && dart.test(this[_idleConnections].isEmpty) && dart.test(this[_activeConnections].isEmpty) && this[_sessionManagerInstance] != null) {
      this[_sessionManagerInstance].close();
      this[_sessionManagerInstance] = null;
      _http._HttpServer._servers[$remove](this[_serviceId$]);
    }
  }
  get port() {
    if (dart.test(this.closed)) dart.throw(new _http.HttpException.new("HttpServer is not bound to a socket"));
    return core.int._check(dart.dload(this[_serverSocket$], 'port'));
  }
  get address() {
    if (dart.test(this.closed)) dart.throw(new _http.HttpException.new("HttpServer is not bound to a socket"));
    return io.InternetAddress._check(dart.dload(this[_serverSocket$], 'address'));
  }
  set sessionTimeout(timeout) {
    this[_sessionManager$].sessionTimeout = timeout;
  }
  [_handleRequest](request) {
    if (!dart.test(this.closed)) {
      this[_controller$0].add(request);
    } else {
      request[_httpConnection$].destroy();
    }
  }
  [_connectionClosed](connection) {
    connection.unlink();
    this[_maybePerformCleanup$]();
  }
  [_markIdle](connection) {
    this[_activeConnections].remove(connection);
    this[_idleConnections].add(connection);
  }
  [_markActive](connection) {
    this[_idleConnections].remove(connection);
    this[_activeConnections].add(connection);
  }
  get [_sessionManager$]() {
    if (this[_sessionManagerInstance] == null) {
      this[_sessionManagerInstance] = new _http._HttpSessionManager.new();
    }
    return this[_sessionManagerInstance];
  }
  connectionsInfo() {
    let result = new _http.HttpConnectionsInfo.new();
    result.total = dart.notNull(this[_activeConnections].length) + dart.notNull(this[_idleConnections].length);
    this[_activeConnections].forEach(dart.fn(conn => {
      let t108, t108$;
      if (dart.test(conn[_isActive])) {
        t108 = result;
        t108.active = dart.notNull(t108.active) + 1;
      } else {
        if (!dart.test(conn[_isClosing])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 2865, 16, "conn._isClosing");
        t108$ = result;
        t108$.closing = dart.notNull(t108$.closing) + 1;
      }
    }, _HttpConnectionToNull()));
    this[_idleConnections].forEach(dart.fn(conn => {
      let t108;
      t108 = result;
      t108.idle = dart.notNull(t108.idle) + 1;
      if (!dart.test(conn[_isIdle])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart", 2871, 14, "conn._isIdle");
    }, _HttpConnectionToNull()));
    return result;
  }
  get [_serviceTypePath$]() {
    return "io/http/servers";
  }
  get [_serviceTypeName$]() {
    return "HttpServer";
  }
  [_toJSON$](ref) {
    let r = new (IdentityMapOfString$dynamic()).from(["id", this[_servicePath$], "type", this[_serviceType$](ref), "name", dart.str(this.address.host) + ":" + dart.str(this.port), "user_name", dart.str(this.address.host) + ":" + dart.str(this.port)]);
    if (dart.test(ref)) {
      return r;
    }
    try {
      r[$_set]("socket", dart.dsend(this[_serverSocket$], _toJSON$, [true]));
    } catch (e) {
      let _ = dart.getThrown(e);
      r[$_set]("socket", new (IdentityMapOfString$String()).from(["id", this[_servicePath$], "type", "@Socket", "name", "UserSocket", "user_name", "UserSocket"]));
    }
    r[$_set]("port", this.port);
    r[$_set]("address", this.address.host);
    r[$_set]("active", this[_activeConnections][$map](core.Map, dart.fn(c => c[_toJSON$](true), _HttpConnectionToMap()))[$toList]());
    r[$_set]("idle", this[_idleConnections][$map](core.Map, dart.fn(c => c[_toJSON$](true), _HttpConnectionToMap()))[$toList]());
    r[$_set]("closed", this.closed);
    return r;
  }
};
(_http._HttpServer.__ = function(_serverSocket, _closeServer) {
  this.serverHeader = null;
  this.defaultResponseHeaders = _http._HttpServer._initDefaultResponseHeaders();
  this.autoCompress = false;
  this[_idleTimeout] = null;
  this[_idleTimer] = null;
  this[_sessionManagerInstance] = null;
  this.closed = false;
  this[_activeConnections] = new (LinkedListOf_HttpConnection()).new();
  this[_idleConnections] = new (LinkedListOf_HttpConnection()).new();
  this[_controller$0] = null;
  this[_serverSocket$] = _serverSocket;
  this[_closeServer$] = _closeServer;
  _http._HttpServer.__proto__.new.call(this);
  this[_controller$0] = StreamControllerOfHttpRequest().new({sync: true, onCancel: dart.bind(this, 'close')});
  this.idleTimeout = C502 || CT.C502;
  _http._HttpServer._servers[$_set](this[_serviceId$], this);
}).prototype = _http._HttpServer.prototype;
(_http._HttpServer.listenOn = function(_serverSocket) {
  this.serverHeader = null;
  this.defaultResponseHeaders = _http._HttpServer._initDefaultResponseHeaders();
  this.autoCompress = false;
  this[_idleTimeout] = null;
  this[_idleTimer] = null;
  this[_sessionManagerInstance] = null;
  this.closed = false;
  this[_activeConnections] = new (LinkedListOf_HttpConnection()).new();
  this[_idleConnections] = new (LinkedListOf_HttpConnection()).new();
  this[_controller$0] = null;
  this[_serverSocket$] = _serverSocket;
  this[_closeServer$] = false;
  _http._HttpServer.__proto__.new.call(this);
  this[_controller$0] = StreamControllerOfHttpRequest().new({sync: true, onCancel: dart.bind(this, 'close')});
  this.idleTimeout = C502 || CT.C502;
  _http._HttpServer._servers[$_set](this[_serviceId$], this);
}).prototype = _http._HttpServer.prototype;
;
_http._HttpServer[dart.implements] = () => [_http.HttpServer];
;
dart.setGetterSignature(_http._HttpServer, () => ({
  __proto__: dart.getGetters(_http._HttpServer.__proto__),
  idleTimeout: core.Duration,
  port: core.int,
  address: io.InternetAddress,
  [_sessionManager$]: _http._HttpSessionManager,
  [_serviceTypePath$]: core.String,
  [_serviceTypeName$]: core.String
}));
dart.setSetterSignature(_http._HttpServer, () => ({
  __proto__: dart.getSetters(_http._HttpServer.__proto__),
  idleTimeout: core.Duration,
  sessionTimeout: core.int
}));
dart.setLibraryUri(_http._HttpServer, "dart:_http");
;
dart.defineLazy(_http._HttpServer, {
  /*_http._HttpServer._servers*/get _servers() {
    return new (LinkedMapOfint$_HttpServer()).new();
  },
  set _servers(_) {}
});
_http._ProxyConfiguration = class _ProxyConfiguration extends core.Object {
  get proxies() {
    return this[proxies];
  }
  set proxies(value) {
    super.proxies = value;
  }
};
(_http._ProxyConfiguration.new = function(configuration) {
  this[proxies] = JSArrayOf_Proxy().of([]);
  if (configuration == null) {
    dart.throw(new _http.HttpException.new("Invalid proxy configuration " + dart.str(configuration)));
  }
  let list = configuration[$split](";");
  list[$forEach](dart.fn(proxy => {
    proxy = proxy[$trim]();
    if (!proxy[$isEmpty]) {
      if (proxy[$startsWith]("PROXY ")) {
        let username = null;
        let password = null;
        proxy = proxy[$substring]("PROXY ".length)[$trim]();
        let at = proxy[$indexOf]("@");
        if (at !== -1) {
          let userinfo = proxy[$substring](0, at)[$trim]();
          proxy = proxy[$substring](at + 1)[$trim]();
          let colon = userinfo[$indexOf](":");
          if (colon === -1 || colon === 0 || colon === proxy.length - 1) {
            dart.throw(new _http.HttpException.new("Invalid proxy configuration " + dart.str(configuration)));
          }
          username = userinfo[$substring](0, colon)[$trim]();
          password = userinfo[$substring](colon + 1)[$trim]();
        }
        let colon = proxy[$lastIndexOf](":");
        if (colon === -1 || colon === 0 || colon === proxy.length - 1) {
          dart.throw(new _http.HttpException.new("Invalid proxy configuration " + dart.str(configuration)));
        }
        let host = proxy[$substring](0, colon)[$trim]();
        if (host[$startsWith]("[") && host[$endsWith]("]")) {
          host = host[$substring](1, host.length - 1);
        }
        let portString = proxy[$substring](colon + 1)[$trim]();
        let port = null;
        try {
          port = core.int.parse(portString);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.FormatException.is(e)) {
            dart.throw(new _http.HttpException.new("Invalid proxy configuration " + dart.str(configuration) + ", " + "invalid port '" + portString + "'"));
          } else
            throw e$;
        }
        this.proxies[$add](new _http._Proxy.new(host, port, username, password));
      } else if (proxy[$trim]() === "DIRECT") {
        this.proxies[$add](new _http._Proxy.direct());
      } else {
        dart.throw(new _http.HttpException.new("Invalid proxy configuration " + dart.str(configuration)));
      }
    }
  }, StringToNull()));
}).prototype = _http._ProxyConfiguration.prototype;
(_http._ProxyConfiguration.direct = function() {
  this[proxies] = C500 || CT.C500;
  ;
}).prototype = _http._ProxyConfiguration.prototype;
;
const proxies = _ProxyConfiguration_proxies;
dart.setLibraryUri(_http._ProxyConfiguration, "dart:_http");
;
dart.defineLazy(_http._ProxyConfiguration, {
  /*_http._ProxyConfiguration.PROXY_PREFIX*/get PROXY_PREFIX() {
    return "PROXY ";
  },
  /*_http._ProxyConfiguration.DIRECT_PREFIX*/get DIRECT_PREFIX() {
    return "DIRECT";
  }
});
_http._Proxy = class _Proxy extends core.Object {
  get host() {
    return this[host$];
  }
  set host(value) {
    super.host = value;
  }
  get port() {
    return this[port$1];
  }
  set port(value) {
    super.port = value;
  }
  get username() {
    return this[username$];
  }
  set username(value) {
    super.username = value;
  }
  get password() {
    return this[password$];
  }
  set password(value) {
    super.password = value;
  }
  get isDirect() {
    return this[isDirect];
  }
  set isDirect(value) {
    super.isDirect = value;
  }
  get isAuthenticated() {
    return this.username != null;
  }
};
(_http._Proxy.new = function(host, port, username, password) {
  this[host$] = host;
  this[port$1] = port;
  this[username$] = username;
  this[password$] = password;
  this[isDirect] = false;
  ;
}).prototype = _http._Proxy.prototype;
(_http._Proxy.direct = function() {
  this[host$] = null;
  this[port$1] = null;
  this[username$] = null;
  this[password$] = null;
  this[isDirect] = true;
  ;
}).prototype = _http._Proxy.prototype;
;
const host$ = _Proxy_host;
const port$1 = _Proxy_port;
const username$ = _Proxy_username;
const password$ = _Proxy_password;
const isDirect = _Proxy_isDirect;
dart.setGetterSignature(_http._Proxy, () => ({
  __proto__: dart.getGetters(_http._Proxy.__proto__),
  isAuthenticated: core.bool
}));
dart.setLibraryUri(_http._Proxy, "dart:_http");
;
_http._HttpConnectionInfo = class _HttpConnectionInfo extends core.Object {
  static create(socket) {
    let t110;
    if (socket == null) return null;
    try {
      let info = new _http._HttpConnectionInfo.new();
      t110 = info;
      t110.remoteAddress = socket.remoteAddress;
      t110.remotePort = socket.remotePort;
      t110.localPort = socket.port;
      return t110;
    } catch (e$) {
      let e = dart.getThrown(e$);
    }
    return null;
  }
};
(_http._HttpConnectionInfo.new = function() {
  this.remoteAddress = null;
  this.remotePort = null;
  this.localPort = null;
  ;
}).prototype = _http._HttpConnectionInfo.prototype;
;
_http._HttpConnectionInfo[dart.implements] = () => [_http.HttpConnectionInfo];
dart.setLibraryUri(_http._HttpConnectionInfo, "dart:_http");
;
_http._DetachedSocket = class _DetachedSocket extends async.Stream$(typed_data.Uint8List) {
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_incoming$].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  get encoding() {
    return this[_socket$0].encoding;
  }
  set encoding(value) {
    this[_socket$0].encoding = value;
  }
  write(obj) {
    this[_socket$0].write(obj);
  }
  writeln(obj) {
    if (obj === void 0) obj = "";
    this[_socket$0].writeln(obj);
  }
  writeCharCode(charCode) {
    this[_socket$0].writeCharCode(charCode);
  }
  writeAll(objects, separator) {
    if (separator === void 0) separator = "";
    this[_socket$0].writeAll(objects, separator);
  }
  add(bytes) {
    ListOfint()._check(bytes);
    this[_socket$0].add(bytes);
  }
  addError(error, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    return this[_socket$0].addError(error, stackTrace);
  }
  addStream(stream) {
    StreamOfListOfint()._check(stream);
    return this[_socket$0].addStream(stream);
  }
  destroy() {
    this[_socket$0].destroy();
  }
  flush() {
    return this[_socket$0].flush();
  }
  close() {
    return this[_socket$0].close();
  }
  get done() {
    return this[_socket$0].done;
  }
  get port() {
    return this[_socket$0].port;
  }
  get address() {
    return this[_socket$0].address;
  }
  get remoteAddress() {
    return this[_socket$0].remoteAddress;
  }
  get remotePort() {
    return this[_socket$0].remotePort;
  }
  setOption(option, enabled) {
    return this[_socket$0].setOption(option, enabled);
  }
  getRawOption(option) {
    return this[_socket$0].getRawOption(option);
  }
  setRawOption(option) {
    this[_socket$0].setRawOption(option);
  }
  [_toJSON$](ref) {
    return core.Map._check(dart.dsend(this[_socket$0], _toJSON$, [ref]));
  }
};
(_http._DetachedSocket.new = function(_socket, _incoming) {
  this[_socket$0] = _socket;
  this[_incoming$] = _incoming;
  _http._DetachedSocket.__proto__.new.call(this);
  ;
}).prototype = _http._DetachedSocket.prototype;
;
_http._DetachedSocket[dart.implements] = () => [io.Socket];
;
dart.setGetterSignature(_http._DetachedSocket, () => ({
  __proto__: dart.getGetters(_http._DetachedSocket.__proto__),
  encoding: convert.Encoding,
  done: async.Future,
  port: core.int,
  address: io.InternetAddress,
  remoteAddress: io.InternetAddress,
  remotePort: core.int
}));
dart.setSetterSignature(_http._DetachedSocket, () => ({
  __proto__: dart.getSetters(_http._DetachedSocket.__proto__),
  encoding: convert.Encoding
}));
dart.setLibraryUri(_http._DetachedSocket, "dart:_http");
;
const _scheme = dart.privateName(_http, "_scheme");
const _scheme$ = dart.privateName(_http, "_AuthenticationScheme._scheme");
let C503;
let C504;
let C505;
_http._AuthenticationScheme = class _AuthenticationScheme extends core.Object {
  get [_scheme]() {
    return this[_scheme$];
  }
  set [_scheme](value) {
    super[_scheme] = value;
  }
  static fromString(scheme) {
    if (scheme[$toLowerCase]() === "basic") return _http._AuthenticationScheme.BASIC;
    if (scheme[$toLowerCase]() === "digest") return _http._AuthenticationScheme.DIGEST;
    return _http._AuthenticationScheme.UNKNOWN;
  }
  toString() {
    if (this[$_equals](_http._AuthenticationScheme.BASIC)) return "Basic";
    if (this[$_equals](_http._AuthenticationScheme.DIGEST)) return "Digest";
    return "Unknown";
  }
};
(_http._AuthenticationScheme.new = function(_scheme) {
  this[_scheme$] = _scheme;
  ;
}).prototype = _http._AuthenticationScheme.prototype;
;
dart.setLibraryUri(_http._AuthenticationScheme, "dart:_http");
;
dart.defineExtensionMethods(_http._AuthenticationScheme, ['toString']);
dart.defineLazy(_http._AuthenticationScheme, {
  /*_http._AuthenticationScheme.UNKNOWN*/get UNKNOWN() {
    return C503 || CT.C503;
  },
  /*_http._AuthenticationScheme.BASIC*/get BASIC() {
    return C504 || CT.C504;
  },
  /*_http._AuthenticationScheme.DIGEST*/get DIGEST() {
    return C505 || CT.C505;
  }
});
_http._Credentials = class _Credentials extends core.Object {
  get scheme() {
    return this.credentials.scheme;
  }
};
(_http._Credentials.new = function(credentials, realm) {
  let t111;
  this.used = false;
  this.ha1 = null;
  this.nonce = null;
  this.algorithm = null;
  this.qop = null;
  this.nonceCount = null;
  this.credentials = credentials;
  this.realm = realm;
  if (dart.equals(this.credentials.scheme, _http._AuthenticationScheme.DIGEST)) {
    let creds = _http._HttpClientDigestCredentials._check(this.credentials);
    let hasher = (t111 = new _http._MD5.new(), t111.add(convert.utf8.encode(creds.username)), t111.add(JSArrayOfint().of([58])), t111.add(this.realm[$codeUnits]), t111.add(JSArrayOfint().of([58])), t111.add(convert.utf8.encode(creds.password)), t111);
    this.ha1 = _http._CryptoUtils.bytesToHex(hasher.close());
  }
}).prototype = _http._Credentials.prototype;
;
dart.setGetterSignature(_http._Credentials, () => ({
  __proto__: dart.getGetters(_http._Credentials.__proto__),
  scheme: _http._AuthenticationScheme
}));
dart.setLibraryUri(_http._Credentials, "dart:_http");
;
_http._SiteCredentials = class _SiteCredentials extends _http._Credentials {
  applies(uri, scheme) {
    if (scheme != null && !dart.equals(this.credentials.scheme, scheme)) return false;
    if (uri.host != this.uri.host) return false;
    let thisPort = this.uri.port === 0 ? 80 : this.uri.port;
    let otherPort = uri.port === 0 ? 80 : uri.port;
    if (otherPort != thisPort) return false;
    return uri.path[$startsWith](this.uri.path);
  }
  authorize(request) {
    if (dart.equals(this.credentials.scheme, _http._AuthenticationScheme.DIGEST) && this.nonce == null) {
      return;
    }
    this.credentials.authorize(this, request);
    this.used = true;
  }
};
(_http._SiteCredentials.new = function(uri, realm, creds) {
  this.uri = uri;
  _http._SiteCredentials.__proto__.new.call(this, creds, core.String._check(realm));
  ;
}).prototype = _http._SiteCredentials.prototype;
;
;
dart.setLibraryUri(_http._SiteCredentials, "dart:_http");
;
_http._ProxyCredentials = class _ProxyCredentials extends _http._Credentials {
  applies(proxy, scheme) {
    if (scheme != null && !dart.equals(this.credentials.scheme, scheme)) return false;
    return proxy.host == this.host && proxy.port == this.port;
  }
  authorize(request) {
    if (dart.equals(this.credentials.scheme, _http._AuthenticationScheme.DIGEST) && this.nonce == null) {
      return;
    }
    this.credentials.authorizeProxy(this, request);
  }
};
(_http._ProxyCredentials.new = function(host, port, realm, creds) {
  this.host = host;
  this.port = port;
  _http._ProxyCredentials.__proto__.new.call(this, creds, core.String._check(realm));
  ;
}).prototype = _http._ProxyCredentials.prototype;
;
;
dart.setLibraryUri(_http._ProxyCredentials, "dart:_http");
;
_http._HttpClientCredentials = class _HttpClientCredentials extends core.Object {};
(_http._HttpClientCredentials.new = function() {
  ;
}).prototype = _http._HttpClientCredentials.prototype;
;
_http._HttpClientCredentials[dart.implements] = () => [_http.HttpClientCredentials];
dart.setLibraryUri(_http._HttpClientCredentials, "dart:_http");
_http._HttpClientBasicCredentials = class _HttpClientBasicCredentials extends _http._HttpClientCredentials {
  get scheme() {
    return _http._AuthenticationScheme.BASIC;
  }
  authorization() {
    let auth = _http._CryptoUtils.bytesToBase64(convert.utf8.encode(dart.str(this.username) + ":" + dart.str(this.password)));
    return "Basic " + dart.str(auth);
  }
  authorize(_, request) {
    request.headers.set("authorization", this.authorization());
  }
  authorizeProxy(_, request) {
    request.headers.set("proxy-authorization", this.authorization());
  }
};
(_http._HttpClientBasicCredentials.new = function(username, password) {
  this.username = username;
  this.password = password;
  ;
}).prototype = _http._HttpClientBasicCredentials.prototype;
;
_http._HttpClientBasicCredentials[dart.implements] = () => [_http.HttpClientBasicCredentials];
;
dart.setGetterSignature(_http._HttpClientBasicCredentials, () => ({
  __proto__: dart.getGetters(_http._HttpClientBasicCredentials.__proto__),
  scheme: _http._AuthenticationScheme
}));
dart.setLibraryUri(_http._HttpClientBasicCredentials, "dart:_http");
;
_http._HttpClientDigestCredentials = class _HttpClientDigestCredentials extends _http._HttpClientCredentials {
  get scheme() {
    return _http._AuthenticationScheme.DIGEST;
  }
  authorization(credentials, request) {
    let t111, t111$, t111$0, t111$1, t111$2, t111$3, t111$4;
    let requestUri = request[_requestUri]();
    let hasher = (t111 = new _http._MD5.new(), t111.add(request.method[$codeUnits]), t111.add(JSArrayOfint().of([58])), t111.add(requestUri[$codeUnits]), t111);
    let ha2 = _http._CryptoUtils.bytesToHex(hasher.close());
    let qop = null;
    let cnonce = null;
    let nc = null;
    let x = null;
    hasher = (t111$ = new _http._MD5.new(), t111$.add(credentials.ha1[$codeUnits]), t111$.add(JSArrayOfint().of([58])), t111$);
    if (credentials.qop === "auth") {
      qop = credentials.qop;
      cnonce = _http._CryptoUtils.bytesToHex(_http._CryptoUtils.getRandomBytes(4));
      t111$0 = credentials;
      t111$0.nonceCount = dart.notNull(t111$0.nonceCount) + 1;
      nc = credentials.nonceCount[$toRadixString](16);
      nc = "00000000"[$substring](0, 8 - nc.length + 1) + dart.notNull(nc);
      t111$1 = hasher;
      t111$1.add(credentials.nonce[$codeUnits]);
      t111$1.add(JSArrayOfint().of([58]));
      t111$1.add(nc[$codeUnits]);
      t111$1.add(JSArrayOfint().of([58]));
      t111$1.add(cnonce[$codeUnits]);
      t111$1.add(JSArrayOfint().of([58]));
      t111$1.add(credentials.qop[$codeUnits]);
      t111$1.add(JSArrayOfint().of([58]));
      t111$1.add(ha2[$codeUnits]);
      t111$1;
    } else {
      t111$2 = hasher;
      t111$2.add(credentials.nonce[$codeUnits]);
      t111$2.add(JSArrayOfint().of([58]));
      t111$2.add(ha2[$codeUnits]);
      t111$2;
    }
    let response = _http._CryptoUtils.bytesToHex(hasher.close());
    let buffer = (t111$3 = new core.StringBuffer.new(), t111$3.write("Digest "), t111$3.write("username=\"" + dart.str(this.username) + "\""), t111$3.write(", realm=\"" + dart.str(credentials.realm) + "\""), t111$3.write(", nonce=\"" + dart.str(credentials.nonce) + "\""), t111$3.write(", uri=\"" + dart.str(requestUri) + "\""), t111$3.write(", algorithm=\"" + dart.str(credentials.algorithm) + "\""), t111$3);
    if (qop === "auth") {
      t111$4 = buffer;
      t111$4.write(", qop=\"" + dart.str(qop) + "\"");
      t111$4.write(", cnonce=\"" + dart.str(cnonce) + "\"");
      t111$4.write(", nc=\"" + dart.str(nc) + "\"");
      t111$4;
    }
    buffer.write(", response=\"" + dart.str(response) + "\"");
    return dart.toString(buffer);
  }
  authorize(credentials, request) {
    request.headers.set("authorization", this.authorization(credentials, _http._HttpClientRequest._check(request)));
  }
  authorizeProxy(credentials, request) {
    request.headers.set("proxy-authorization", this.authorization(credentials, _http._HttpClientRequest._check(request)));
  }
};
(_http._HttpClientDigestCredentials.new = function(username, password) {
  this.username = username;
  this.password = password;
  ;
}).prototype = _http._HttpClientDigestCredentials.prototype;
;
_http._HttpClientDigestCredentials[dart.implements] = () => [_http.HttpClientDigestCredentials];
;
dart.setGetterSignature(_http._HttpClientDigestCredentials, () => ({
  __proto__: dart.getGetters(_http._HttpClientDigestCredentials.__proto__),
  scheme: _http._AuthenticationScheme
}));
dart.setLibraryUri(_http._HttpClientDigestCredentials, "dart:_http");
;
const statusCode$ = dart.privateName(_http, "_RedirectInfo.statusCode");
const method$ = dart.privateName(_http, "_RedirectInfo.method");
const location$ = dart.privateName(_http, "_RedirectInfo.location");
_http._RedirectInfo = class _RedirectInfo extends core.Object {
  get statusCode() {
    return this[statusCode$];
  }
  set statusCode(value) {
    super.statusCode = value;
  }
  get method() {
    return this[method$];
  }
  set method(value) {
    super.method = value;
  }
  get location() {
    return this[location$];
  }
  set location(value) {
    super.location = value;
  }
};
(_http._RedirectInfo.new = function(statusCode, method, location) {
  this[statusCode$] = statusCode;
  this[method$] = method;
  this[location$] = location;
  ;
}).prototype = _http._RedirectInfo.prototype;
;
_http._RedirectInfo[dart.implements] = () => [_http.RedirectInfo];
dart.setLibraryUri(_http._RedirectInfo, "dart:_http");
;
let C506;
let C507;
let C508;
let C509;
let C510;
_http._Const = class _Const extends core.Object {};
(_http._Const.new = function() {
  ;
}).prototype = _http._Const.prototype;
;
dart.setLibraryUri(_http._Const, "dart:_http");
dart.defineLazy(_http._Const, {
  /*_http._Const.HTTP*/get HTTP() {
    return C506 || CT.C506;
  },
  /*_http._Const.HTTP1DOT*/get HTTP1DOT() {
    return C507 || CT.C507;
  },
  /*_http._Const.HTTP10*/get HTTP10() {
    return C508 || CT.C508;
  },
  /*_http._Const.HTTP11*/get HTTP11() {
    return C509 || CT.C509;
  },
  /*_http._Const.T*/get T() {
    return true;
  },
  /*_http._Const.F*/get F() {
    return false;
  },
  /*_http._Const.SEPARATOR_MAP*/get SEPARATOR_MAP() {
    return C510 || CT.C510;
  }
});
_http._CharCode = class _CharCode extends core.Object {};
(_http._CharCode.new = function() {
  ;
}).prototype = _http._CharCode.prototype;
;
dart.setLibraryUri(_http._CharCode, "dart:_http");
dart.defineLazy(_http._CharCode, {
  /*_http._CharCode.HT*/get HT() {
    return 9;
  },
  /*_http._CharCode.LF*/get LF() {
    return 10;
  },
  /*_http._CharCode.CR*/get CR() {
    return 13;
  },
  /*_http._CharCode.SP*/get SP() {
    return 32;
  },
  /*_http._CharCode.AMPERSAND*/get AMPERSAND() {
    return 38;
  },
  /*_http._CharCode.COMMA*/get COMMA() {
    return 44;
  },
  /*_http._CharCode.DASH*/get DASH() {
    return 45;
  },
  /*_http._CharCode.SLASH*/get SLASH() {
    return 47;
  },
  /*_http._CharCode.ZERO*/get ZERO() {
    return 48;
  },
  /*_http._CharCode.ONE*/get ONE() {
    return 49;
  },
  /*_http._CharCode.COLON*/get COLON() {
    return 58;
  },
  /*_http._CharCode.SEMI_COLON*/get SEMI_COLON() {
    return 59;
  },
  /*_http._CharCode.EQUAL*/get EQUAL() {
    return 61;
  }
});
_http._State = class _State extends core.Object {};
(_http._State.new = function() {
  ;
}).prototype = _http._State.prototype;
;
dart.setLibraryUri(_http._State, "dart:_http");
dart.defineLazy(_http._State, {
  /*_http._State.START*/get START() {
    return 0;
  },
  /*_http._State.METHOD_OR_RESPONSE_HTTP_VERSION*/get METHOD_OR_RESPONSE_HTTP_VERSION() {
    return 1;
  },
  /*_http._State.RESPONSE_HTTP_VERSION*/get RESPONSE_HTTP_VERSION() {
    return 2;
  },
  /*_http._State.REQUEST_LINE_METHOD*/get REQUEST_LINE_METHOD() {
    return 3;
  },
  /*_http._State.REQUEST_LINE_URI*/get REQUEST_LINE_URI() {
    return 4;
  },
  /*_http._State.REQUEST_LINE_HTTP_VERSION*/get REQUEST_LINE_HTTP_VERSION() {
    return 5;
  },
  /*_http._State.REQUEST_LINE_ENDING*/get REQUEST_LINE_ENDING() {
    return 6;
  },
  /*_http._State.RESPONSE_LINE_STATUS_CODE*/get RESPONSE_LINE_STATUS_CODE() {
    return 7;
  },
  /*_http._State.RESPONSE_LINE_REASON_PHRASE*/get RESPONSE_LINE_REASON_PHRASE() {
    return 8;
  },
  /*_http._State.RESPONSE_LINE_ENDING*/get RESPONSE_LINE_ENDING() {
    return 9;
  },
  /*_http._State.HEADER_START*/get HEADER_START() {
    return 10;
  },
  /*_http._State.HEADER_FIELD*/get HEADER_FIELD() {
    return 11;
  },
  /*_http._State.HEADER_VALUE_START*/get HEADER_VALUE_START() {
    return 12;
  },
  /*_http._State.HEADER_VALUE*/get HEADER_VALUE() {
    return 13;
  },
  /*_http._State.HEADER_VALUE_FOLDING_OR_ENDING*/get HEADER_VALUE_FOLDING_OR_ENDING() {
    return 14;
  },
  /*_http._State.HEADER_VALUE_FOLD_OR_END*/get HEADER_VALUE_FOLD_OR_END() {
    return 15;
  },
  /*_http._State.HEADER_ENDING*/get HEADER_ENDING() {
    return 16;
  },
  /*_http._State.CHUNK_SIZE_STARTING_CR*/get CHUNK_SIZE_STARTING_CR() {
    return 17;
  },
  /*_http._State.CHUNK_SIZE_STARTING_LF*/get CHUNK_SIZE_STARTING_LF() {
    return 18;
  },
  /*_http._State.CHUNK_SIZE*/get CHUNK_SIZE() {
    return 19;
  },
  /*_http._State.CHUNK_SIZE_EXTENSION*/get CHUNK_SIZE_EXTENSION() {
    return 20;
  },
  /*_http._State.CHUNK_SIZE_ENDING*/get CHUNK_SIZE_ENDING() {
    return 21;
  },
  /*_http._State.CHUNKED_BODY_DONE_CR*/get CHUNKED_BODY_DONE_CR() {
    return 22;
  },
  /*_http._State.CHUNKED_BODY_DONE_LF*/get CHUNKED_BODY_DONE_LF() {
    return 23;
  },
  /*_http._State.BODY*/get BODY() {
    return 24;
  },
  /*_http._State.CLOSED*/get CLOSED() {
    return 25;
  },
  /*_http._State.UPGRADED*/get UPGRADED() {
    return 26;
  },
  /*_http._State.FAILURE*/get FAILURE() {
    return 27;
  },
  /*_http._State.FIRST_BODY_STATE*/get FIRST_BODY_STATE() {
    return 17;
  }
});
_http._HttpVersion = class _HttpVersion extends core.Object {};
(_http._HttpVersion.new = function() {
  ;
}).prototype = _http._HttpVersion.prototype;
;
dart.setLibraryUri(_http._HttpVersion, "dart:_http");
dart.defineLazy(_http._HttpVersion, {
  /*_http._HttpVersion.UNDETERMINED*/get UNDETERMINED() {
    return 0;
  },
  /*_http._HttpVersion.HTTP10*/get HTTP10() {
    return 1;
  },
  /*_http._HttpVersion.HTTP11*/get HTTP11() {
    return 2;
  }
});
_http._MessageType = class _MessageType extends core.Object {};
(_http._MessageType.new = function() {
  ;
}).prototype = _http._MessageType.prototype;
;
dart.setLibraryUri(_http._MessageType, "dart:_http");
dart.defineLazy(_http._MessageType, {
  /*_http._MessageType.UNDETERMINED*/get UNDETERMINED() {
    return 0;
  },
  /*_http._MessageType.REQUEST*/get REQUEST() {
    return 1;
  },
  /*_http._MessageType.RESPONSE*/get RESPONSE() {
    return 0;
  }
});
const _isCanceled$ = dart.privateName(_http, "_isCanceled");
const _pauseCount$ = dart.privateName(_http, "_pauseCount");
const _scheduled = dart.privateName(_http, "_scheduled");
const _injectData$ = dart.privateName(_http, "_injectData");
const _userOnData$ = dart.privateName(_http, "_userOnData");
const _maybeScheduleData = dart.privateName(_http, "_maybeScheduleData");
_http._HttpDetachedStreamSubscription = class _HttpDetachedStreamSubscription extends core.Object {
  get isPaused() {
    return this[_subscription$0].isPaused;
  }
  asFuture(T, futureValue) {
    if (futureValue === void 0) futureValue = null;
    return this[_subscription$0].asFuture(T, futureValue);
  }
  cancel() {
    this[_isCanceled$] = true;
    this[_injectData$] = null;
    return this[_subscription$0].cancel();
  }
  onData(handleData) {
    this[_userOnData$] = handleData;
    this[_subscription$0].onData(handleData);
  }
  onDone(handleDone) {
    this[_subscription$0].onDone(handleDone);
  }
  onError(handleError) {
    this[_subscription$0].onError(handleError);
  }
  pause(resumeSignal) {
    if (resumeSignal === void 0) resumeSignal = null;
    if (this[_injectData$] == null) {
      this[_subscription$0].pause(resumeSignal);
    } else {
      this[_pauseCount$] = dart.notNull(this[_pauseCount$]) + 1;
      if (resumeSignal != null) {
        resumeSignal.whenComplete(dart.bind(this, 'resume'));
      }
    }
  }
  resume() {
    if (this[_injectData$] == null) {
      this[_subscription$0].resume();
    } else {
      this[_pauseCount$] = dart.notNull(this[_pauseCount$]) - 1;
      this[_maybeScheduleData]();
    }
  }
  [_maybeScheduleData]() {
    if (dart.test(this[_scheduled])) return;
    if (this[_pauseCount$] !== 0) return;
    this[_scheduled] = true;
    async.scheduleMicrotask(dart.fn(() => {
      this[_scheduled] = false;
      if (dart.notNull(this[_pauseCount$]) > 0 || dart.test(this[_isCanceled$])) return;
      let data = this[_injectData$];
      this[_injectData$] = null;
      this[_subscription$0].resume();
      if (this[_userOnData$] != null) {
        dart.dsend(this, _userOnData$, [data]);
      }
    }, VoidToNull()));
  }
};
(_http._HttpDetachedStreamSubscription.new = function(_subscription, _injectData, _userOnData) {
  this[_isCanceled$] = false;
  this[_pauseCount$] = 1;
  this[_scheduled] = false;
  this[_subscription$0] = _subscription;
  this[_injectData$] = _injectData;
  this[_userOnData$] = _userOnData;
  ;
}).prototype = _http._HttpDetachedStreamSubscription.prototype;
_http._HttpDetachedStreamSubscription.prototype[dart.isStreamSubscription] = true;
;
_http._HttpDetachedStreamSubscription[dart.implements] = () => [async.StreamSubscription$(typed_data.Uint8List)];
;
dart.setGetterSignature(_http._HttpDetachedStreamSubscription, () => ({
  __proto__: dart.getGetters(_http._HttpDetachedStreamSubscription.__proto__),
  isPaused: core.bool
}));
dart.setLibraryUri(_http._HttpDetachedStreamSubscription, "dart:_http");
;
_http._HttpDetachedIncoming = class _HttpDetachedIncoming extends async.Stream$(typed_data.Uint8List) {
  listen(onData, opts) {
    let t111, t111$, t111$0;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    if (this.subscription != null) {
      t111 = this.subscription;
      t111.onData(onData);
      t111.onError(onError);
      t111.onDone(onDone);
      t111;
      if (this.bufferedData == null) {
        t111$ = this.subscription;
        t111$.resume();
        return t111$;
      }
      t111$0 = new _http._HttpDetachedStreamSubscription.new(this.subscription, this.bufferedData, onData);
      t111$0.resume();
      return t111$0;
    } else {
      return StreamOfUint8List().fromIterable(JSArrayOfUint8List().of([this.bufferedData])).listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
  }
};
(_http._HttpDetachedIncoming.new = function(subscription, bufferedData) {
  this.subscription = subscription;
  this.bufferedData = bufferedData;
  _http._HttpDetachedIncoming.__proto__.new.call(this);
  ;
}).prototype = _http._HttpDetachedIncoming.prototype;
;
;
dart.setLibraryUri(_http._HttpDetachedIncoming, "dart:_http");
;
const _parserCalled = dart.privateName(_http, "_parserCalled");
const _index$1 = dart.privateName(_http, "_index");
const _httpVersionIndex = dart.privateName(_http, "_httpVersionIndex");
const _messageType = dart.privateName(_http, "_messageType");
const _statusCodeLength = dart.privateName(_http, "_statusCodeLength");
const _method$ = dart.privateName(_http, "_method");
const _uri_or_reason_phrase = dart.privateName(_http, "_uri_or_reason_phrase");
const _headerField = dart.privateName(_http, "_headerField");
const _headerValue = dart.privateName(_http, "_headerValue");
const _httpVersion = dart.privateName(_http, "_httpVersion");
const _connectionUpgrade = dart.privateName(_http, "_connectionUpgrade");
const _chunked = dart.privateName(_http, "_chunked");
const _noMessageBody = dart.privateName(_http, "_noMessageBody");
const _remainingContent = dart.privateName(_http, "_remainingContent");
const _socketSubscription = dart.privateName(_http, "_socketSubscription");
const _paused = dart.privateName(_http, "_paused");
const _bodyPaused = dart.privateName(_http, "_bodyPaused");
const _bodyController = dart.privateName(_http, "_bodyController");
const _requestParser$ = dart.privateName(_http, "_requestParser");
const _pauseStateChanged = dart.privateName(_http, "_pauseStateChanged");
const _reset = dart.privateName(_http, "_reset");
const _onData$1 = dart.privateName(_http, "_onData");
const _onDone = dart.privateName(_http, "_onDone");
const _doParse = dart.privateName(_http, "_doParse");
const _reportError$ = dart.privateName(_http, "_reportError");
const _createIncoming = dart.privateName(_http, "_createIncoming");
const _closeIncoming = dart.privateName(_http, "_closeIncoming");
const _headersEnd = dart.privateName(_http, "_headersEnd");
const _expect = dart.privateName(_http, "_expect");
const _caseInsensitiveCompare = dart.privateName(_http, "_caseInsensitiveCompare");
const _expectHexDigit = dart.privateName(_http, "_expectHexDigit");
const _releaseBuffer = dart.privateName(_http, "_releaseBuffer");
_http._HttpParser = class _HttpParser extends async.Stream$(_http._HttpIncoming) {
  static requestParser() {
    return new _http._HttpParser.__(true);
  }
  static responseParser() {
    return new _http._HttpParser.__(false);
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_controller$0].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  listenToStream(stream) {
    this[_socketSubscription] = stream.listen(dart.bind(this, _onData$1), {onError: dart.bind(this[_controller$0], 'addError'), onDone: dart.bind(this, _onDone)});
  }
  [_parse]() {
    try {
      this[_doParse]();
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      this[_state$1] = 27;
      this[_reportError$](e, s);
    }
  }
  [_headersEnd]() {
    this[_headers][_mutable] = false;
    this[_transferLength$] = this[_headers].contentLength;
    if (dart.test(this[_chunked])) this[_transferLength$] = -1;
    if (this[_messageType] === 1 && dart.notNull(this[_transferLength$]) < 0 && dart.equals(this[_chunked], false)) {
      this[_transferLength$] = 0;
    }
    if (dart.test(this[_connectionUpgrade])) {
      this[_state$1] = 26;
      this[_transferLength$] = 0;
    }
    this[_createIncoming](this[_transferLength$]);
    if (dart.test(this[_requestParser$])) {
      this[_incoming$].method = core.String.fromCharCodes(this[_method$]);
      this[_incoming$].uri = core.Uri.parse(core.String.fromCharCodes(this[_uri_or_reason_phrase]));
    } else {
      this[_incoming$].statusCode = this[_statusCode];
      this[_incoming$].reasonPhrase = core.String.fromCharCodes(this[_uri_or_reason_phrase]);
    }
    this[_method$][$clear]();
    this[_uri_or_reason_phrase][$clear]();
    if (dart.test(this[_connectionUpgrade])) {
      this[_incoming$].upgraded = true;
      this[_parserCalled] = false;
      let tmp = this[_incoming$];
      this[_closeIncoming]();
      this[_controller$0].add(tmp);
      return true;
    }
    if (this[_transferLength$] === 0 || this[_messageType] === 0 && dart.test(this[_noMessageBody])) {
      this[_reset]();
      let tmp = this[_incoming$];
      this[_closeIncoming]();
      this[_controller$0].add(tmp);
      return false;
    } else if (dart.test(this[_chunked])) {
      this[_state$1] = 19;
      this[_remainingContent] = 0;
    } else if (dart.notNull(this[_transferLength$]) > 0) {
      this[_remainingContent] = this[_transferLength$];
      this[_state$1] = 24;
    } else {
      this[_state$1] = 24;
    }
    this[_parserCalled] = false;
    this[_controller$0].add(this[_incoming$]);
    return true;
  }
  [_doParse]() {
    let t112;
    if (!!dart.test(this[_parserCalled])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 402, 12, "!_parserCalled");
    this[_parserCalled] = true;
    if (this[_state$1] === 25) {
      dart.throw(new _http.HttpException.new("Data on closed connection"));
    }
    if (this[_state$1] === 27) {
      dart.throw(new _http.HttpException.new("Data on failed connection"));
    }
    while (this[_buffer$1] != null && dart.notNull(this[_index$1]) < dart.notNull(this[_buffer$1][$length]) && this[_state$1] !== 27 && this[_state$1] !== 26) {
      if (this[_incoming$] != null && dart.test(this[_bodyPaused]) || this[_incoming$] == null && dart.test(this[_paused])) {
        this[_parserCalled] = false;
        return;
      }
      let byte = this[_buffer$1][$_get]((t112 = this[_index$1], this[_index$1] = dart.notNull(t112) + 1, t112));
      switch (this[_state$1]) {
        case 0:
        {
          if (byte == _http._Const.HTTP[$_get](0)) {
            this[_httpVersionIndex] = 1;
            this[_state$1] = 1;
          } else {
            if (!dart.test(_http._HttpParser._isTokenChar(byte))) {
              dart.throw(new _http.HttpException.new("Invalid request method"));
            }
            this[_method$][$add](byte);
            if (!dart.test(this[_requestParser$])) {
              dart.throw(new _http.HttpException.new("Invalid response line"));
            }
            this[_state$1] = 3;
          }
          break;
        }
        case 1:
        {
          if (dart.notNull(this[_httpVersionIndex]) < dart.notNull(_http._Const.HTTP[$length]) && byte == _http._Const.HTTP[$_get](this[_httpVersionIndex])) {
            this[_httpVersionIndex] = dart.notNull(this[_httpVersionIndex]) + 1;
          } else if (this[_httpVersionIndex] == _http._Const.HTTP[$length] && byte === 47) {
            this[_httpVersionIndex] = dart.notNull(this[_httpVersionIndex]) + 1;
            if (dart.test(this[_requestParser$])) {
              dart.throw(new _http.HttpException.new("Invalid request line"));
            }
            this[_state$1] = 2;
          } else {
            for (let i = 0; i < dart.notNull(this[_httpVersionIndex]); i = i + 1) {
              this[_method$][$add](_http._Const.HTTP[$_get](i));
            }
            if (byte === 32) {
              this[_state$1] = 4;
            } else {
              this[_method$][$add](byte);
              this[_httpVersion] = 0;
              if (!dart.test(this[_requestParser$])) {
                dart.throw(new _http.HttpException.new("Invalid response line"));
              }
              this[_state$1] = 3;
            }
          }
          break;
        }
        case 2:
        {
          if (dart.notNull(this[_httpVersionIndex]) < dart.notNull(_http._Const.HTTP1DOT[$length])) {
            this[_expect](byte, _http._Const.HTTP1DOT[$_get](this[_httpVersionIndex]));
            this[_httpVersionIndex] = dart.notNull(this[_httpVersionIndex]) + 1;
          } else if (this[_httpVersionIndex] == _http._Const.HTTP1DOT[$length] && byte === 49) {
            this[_httpVersion] = 2;
            this[_persistentConnection] = true;
            this[_httpVersionIndex] = dart.notNull(this[_httpVersionIndex]) + 1;
          } else if (this[_httpVersionIndex] == _http._Const.HTTP1DOT[$length] && byte === 48) {
            this[_httpVersion] = 1;
            this[_persistentConnection] = false;
            this[_httpVersionIndex] = dart.notNull(this[_httpVersionIndex]) + 1;
          } else if (this[_httpVersionIndex] === dart.notNull(_http._Const.HTTP1DOT[$length]) + 1) {
            this[_expect](byte, 32);
            this[_state$1] = 7;
          } else {
            dart.throw(new _http.HttpException.new("Invalid response line"));
          }
          break;
        }
        case 3:
        {
          if (byte === 32) {
            this[_state$1] = 4;
          } else {
            if (dart.test(_http._Const.SEPARATOR_MAP[$_get](byte)) || byte === 13 || byte === 10) {
              dart.throw(new _http.HttpException.new("Invalid request method"));
            }
            this[_method$][$add](byte);
          }
          break;
        }
        case 4:
        {
          if (byte === 32) {
            if (this[_uri_or_reason_phrase][$length] === 0) {
              dart.throw(new _http.HttpException.new("Invalid request URI"));
            }
            this[_state$1] = 5;
            this[_httpVersionIndex] = 0;
          } else {
            if (byte === 13 || byte === 10) {
              dart.throw(new _http.HttpException.new("Invalid request URI"));
            }
            this[_uri_or_reason_phrase][$add](byte);
          }
          break;
        }
        case 5:
        {
          if (dart.notNull(this[_httpVersionIndex]) < dart.notNull(_http._Const.HTTP1DOT[$length])) {
            this[_expect](byte, _http._Const.HTTP11[$_get](this[_httpVersionIndex]));
            this[_httpVersionIndex] = dart.notNull(this[_httpVersionIndex]) + 1;
          } else if (this[_httpVersionIndex] == _http._Const.HTTP1DOT[$length]) {
            if (byte === 49) {
              this[_httpVersion] = 2;
              this[_persistentConnection] = true;
              this[_httpVersionIndex] = dart.notNull(this[_httpVersionIndex]) + 1;
            } else if (byte === 48) {
              this[_httpVersion] = 1;
              this[_persistentConnection] = false;
              this[_httpVersionIndex] = dart.notNull(this[_httpVersionIndex]) + 1;
            } else {
              dart.throw(new _http.HttpException.new("Invalid response line"));
            }
          } else {
            if (byte === 13) {
              this[_state$1] = 6;
            } else {
              this[_expect](byte, 10);
              this[_messageType] = 1;
              this[_state$1] = 10;
            }
          }
          break;
        }
        case 6:
        {
          this[_expect](byte, 10);
          this[_messageType] = 1;
          this[_state$1] = 10;
          break;
        }
        case 7:
        {
          if (byte === 32) {
            this[_state$1] = 8;
          } else if (byte === 13) {
            this[_state$1] = 9;
          } else {
            this[_statusCodeLength] = dart.notNull(this[_statusCodeLength]) + 1;
            if (dart.notNull(byte) < 48 && 57 < dart.notNull(byte) || dart.notNull(this[_statusCodeLength]) > 3) {
              dart.throw(new _http.HttpException.new("Invalid response status code"));
            } else {
              this[_statusCode] = dart.notNull(this[_statusCode]) * 10 + dart.notNull(byte) - 48;
            }
          }
          break;
        }
        case 8:
        {
          if (byte === 13) {
            this[_state$1] = 9;
          } else {
            if (byte === 13 || byte === 10) {
              dart.throw(new _http.HttpException.new("Invalid response reason phrase"));
            }
            this[_uri_or_reason_phrase][$add](byte);
          }
          break;
        }
        case 9:
        {
          this[_expect](byte, 10);
          this[_messageType] === 0;
          if (dart.notNull(this[_statusCode]) < 100 || dart.notNull(this[_statusCode]) > 599) {
            dart.throw(new _http.HttpException.new("Invalid response status code"));
          } else {
            if (dart.notNull(this[_statusCode]) <= 199 || this[_statusCode] === 204 || this[_statusCode] === 304) {
              this[_noMessageBody] = true;
            }
          }
          this[_state$1] = 10;
          break;
        }
        case 10:
        {
          this[_headers] = new _http._HttpHeaders.new(this.version);
          if (byte === 13) {
            this[_state$1] = 16;
          } else if (byte === 10) {
            this[_state$1] = 16;
            this[_index$1] = dart.notNull(this[_index$1]) - 1;
          } else {
            this[_headerField][$add](_http._HttpParser._toLowerCaseByte(byte));
            this[_state$1] = 11;
          }
          break;
        }
        case 11:
        {
          if (byte === 58) {
            this[_state$1] = 12;
          } else {
            if (!dart.test(_http._HttpParser._isTokenChar(byte))) {
              dart.throw(new _http.HttpException.new("Invalid header field name"));
            }
            this[_headerField][$add](_http._HttpParser._toLowerCaseByte(byte));
          }
          break;
        }
        case 12:
        {
          if (byte === 13) {
            this[_state$1] = 14;
          } else if (byte === 10) {
            this[_state$1] = 15;
          } else if (byte !== 32 && byte !== 9) {
            this[_headerValue][$add](byte);
            this[_state$1] = 13;
          }
          break;
        }
        case 13:
        {
          if (byte === 13) {
            this[_state$1] = 14;
          } else if (byte === 10) {
            this[_state$1] = 15;
          } else {
            this[_headerValue][$add](byte);
          }
          break;
        }
        case 14:
        {
          this[_expect](byte, 10);
          this[_state$1] = 15;
          break;
        }
        case 15:
        {
          if (byte === 32 || byte === 9) {
            this[_state$1] = 12;
          } else {
            let headerField = core.String.fromCharCodes(this[_headerField]);
            let headerValue = core.String.fromCharCodes(this[_headerValue]);
            if (headerField === "transfer-encoding" && dart.test(this[_caseInsensitiveCompare]("chunked"[$codeUnits], this[_headerValue]))) {
              this[_chunked] = true;
            }
            if (headerField === "connection") {
              let tokens = _http._HttpParser._tokenizeFieldValue(headerValue);
              let isResponse = this[_messageType] === 0;
              let isUpgradeCode = this[_statusCode] === 426 || this[_statusCode] === 101;
              for (let i = 0; i < dart.notNull(tokens[$length]); i = i + 1) {
                let isUpgrade = this[_caseInsensitiveCompare]("upgrade"[$codeUnits], tokens[$_get](i)[$codeUnits]);
                if (dart.test(isUpgrade) && !isResponse || dart.test(isUpgrade) && isResponse && isUpgradeCode) {
                  this[_connectionUpgrade] = true;
                }
                this[_headers][_add$1](headerField, tokens[$_get](i));
              }
            } else {
              this[_headers][_add$1](headerField, headerValue);
            }
            this[_headerField][$clear]();
            this[_headerValue][$clear]();
            if (byte === 13) {
              this[_state$1] = 16;
            } else if (byte === 10) {
              this[_state$1] = 16;
              this[_index$1] = dart.notNull(this[_index$1]) - 1;
            } else {
              this[_headerField][$add](_http._HttpParser._toLowerCaseByte(byte));
              this[_state$1] = 11;
            }
          }
          break;
        }
        case 16:
        {
          this[_expect](byte, 10);
          if (dart.test(this[_headersEnd]())) {
            return;
          } else {
            break;
          }
          return;
        }
        case 17:
        {
          this[_expect](byte, 13);
          this[_state$1] = 18;
          break;
        }
        case 18:
        {
          this[_expect](byte, 10);
          this[_state$1] = 19;
          break;
        }
        case 19:
        {
          if (byte === 13) {
            this[_state$1] = 21;
          } else if (byte === 59) {
            this[_state$1] = 20;
          } else {
            let value = this[_expectHexDigit](byte);
            this[_remainingContent] = dart.notNull(this[_remainingContent]) * 16 + dart.notNull(value);
          }
          break;
        }
        case 20:
        {
          if (byte === 13) {
            this[_state$1] = 21;
          }
          break;
        }
        case 21:
        {
          this[_expect](byte, 10);
          if (dart.notNull(this[_remainingContent]) > 0) {
            this[_state$1] = 24;
          } else {
            this[_state$1] = 22;
          }
          break;
        }
        case 22:
        {
          this[_expect](byte, 13);
          this[_state$1] = 23;
          break;
        }
        case 23:
        {
          this[_expect](byte, 10);
          this[_reset]();
          this[_closeIncoming]();
          break;
        }
        case 24:
        {
          this[_index$1] = dart.notNull(this[_index$1]) - 1;
          let dataAvailable = dart.notNull(this[_buffer$1][$length]) - dart.notNull(this[_index$1]);
          if (dart.notNull(this[_remainingContent]) >= 0 && dart.notNull(dataAvailable) > dart.notNull(this[_remainingContent])) {
            dataAvailable = this[_remainingContent];
          }
          let data = typed_data.Uint8List.view(this[_buffer$1][$buffer], dart.notNull(this[_buffer$1][$offsetInBytes]) + dart.notNull(this[_index$1]), dataAvailable);
          this[_bodyController].add(data);
          if (this[_remainingContent] !== -1) {
            this[_remainingContent] = dart.notNull(this[_remainingContent]) - dart.notNull(data[$length]);
          }
          this[_index$1] = dart.notNull(this[_index$1]) + dart.notNull(data[$length]);
          if (this[_remainingContent] === 0) {
            if (!dart.test(this[_chunked])) {
              this[_reset]();
              this[_closeIncoming]();
            } else {
              this[_state$1] = 17;
            }
          }
          break;
        }
        case 27:
        {
          if (!false) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 786, 18, "false");
          break;
        }
        default:
        {
          if (!false) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 791, 18, "false");
          break;
        }
      }
    }
    this[_parserCalled] = false;
    if (this[_buffer$1] != null && this[_index$1] == this[_buffer$1][$length]) {
      this[_releaseBuffer]();
      if (this[_state$1] !== 26 && this[_state$1] !== 27) {
        this[_socketSubscription].resume();
      }
    }
  }
  [_onData$1](buffer) {
    this[_socketSubscription].pause();
    if (!(this[_buffer$1] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 809, 12, "_buffer == null");
    this[_buffer$1] = buffer;
    this[_index$1] = 0;
    this[_parse]();
  }
  [_onDone]() {
    this[_socketSubscription] = null;
    if (this[_state$1] === 25 || this[_state$1] === 27) return;
    if (this[_incoming$] != null) {
      if (this[_state$1] !== 26 && !(this[_state$1] === 0 && !dart.test(this[_requestParser$])) && !(this[_state$1] === 24 && !dart.test(this[_chunked]) && this[_transferLength$] === -1)) {
        this[_bodyController].addError(new _http.HttpException.new("Connection closed while receiving data"));
      }
      this[_closeIncoming](true);
      this[_controller$0].close();
      return;
    }
    if (this[_state$1] === 0) {
      if (!dart.test(this[_requestParser$])) {
        this[_reportError$](new _http.HttpException.new("Connection closed before full header was received"));
      }
      this[_controller$0].close();
      return;
    }
    if (this[_state$1] === 26) {
      this[_controller$0].close();
      return;
    }
    if (dart.notNull(this[_state$1]) < 17) {
      this[_state$1] = 27;
      this[_reportError$](new _http.HttpException.new("Connection closed before full header was received"));
      this[_controller$0].close();
      return;
    }
    if (!dart.test(this[_chunked]) && this[_transferLength$] === -1) {
      this[_state$1] = 25;
    } else {
      this[_state$1] = 27;
      this[_reportError$](new _http.HttpException.new("Connection closed before full body was received"));
    }
    this[_controller$0].close();
  }
  get version() {
    switch (this[_httpVersion]) {
      case 1:
      {
        return "1.0";
      }
      case 2:
      {
        return "1.1";
      }
    }
    return null;
  }
  get messageType() {
    return this[_messageType];
  }
  get transferLength() {
    return this[_transferLength$];
  }
  get upgrade() {
    return dart.test(this[_connectionUpgrade]) && this[_state$1] === 26;
  }
  get persistentConnection() {
    return this[_persistentConnection];
  }
  set isHead(value) {
    if (dart.test(value)) this[_noMessageBody] = true;
  }
  detachIncoming() {
    this[_state$1] = 26;
    return new _http._HttpDetachedIncoming.new(this[_socketSubscription], this.readUnparsedData());
  }
  readUnparsedData() {
    if (this[_buffer$1] == null) return null;
    if (this[_index$1] == this[_buffer$1][$length]) return null;
    let result = this[_buffer$1][$sublist](this[_index$1]);
    this[_releaseBuffer]();
    return result;
  }
  [_reset]() {
    if (this[_state$1] === 26) return;
    this[_state$1] = 0;
    this[_messageType] = 0;
    this[_headerField][$clear]();
    this[_headerValue][$clear]();
    this[_method$][$clear]();
    this[_uri_or_reason_phrase][$clear]();
    this[_statusCode] = 0;
    this[_statusCodeLength] = 0;
    this[_httpVersion] = 0;
    this[_transferLength$] = -1;
    this[_persistentConnection] = false;
    this[_connectionUpgrade] = false;
    this[_chunked] = false;
    this[_noMessageBody] = false;
    this[_remainingContent] = -1;
    this[_headers] = null;
  }
  [_releaseBuffer]() {
    this[_buffer$1] = null;
    this[_index$1] = null;
  }
  static _isTokenChar(byte) {
    return dart.notNull(byte) > 31 && dart.notNull(byte) < 128 && !dart.test(_http._Const.SEPARATOR_MAP[$_get](byte));
  }
  static _isValueChar(byte) {
    return dart.notNull(byte) > 31 && dart.notNull(byte) < 128 || byte === 32 || byte === 9;
  }
  static _tokenizeFieldValue(headerValue) {
    let tokens = JSArrayOfString().of([]);
    let start = 0;
    let index = 0;
    while (index < headerValue.length) {
      if (headerValue[$_get](index) === ",") {
        tokens[$add](headerValue[$substring](start, index));
        start = index + 1;
      } else if (headerValue[$_get](index) === " " || headerValue[$_get](index) === "\t") {
        start = start + 1;
      }
      index = index + 1;
    }
    tokens[$add](headerValue[$substring](start, index));
    return tokens;
  }
  static _toLowerCaseByte(x) {
    return (dart.notNull(x) - 65 & 127) < 26 ? (dart.notNull(x) | 32) >>> 0 : x;
  }
  [_caseInsensitiveCompare](expected, value) {
    if (expected[$length] != value[$length]) return false;
    for (let i = 0; i < dart.notNull(expected[$length]); i = i + 1) {
      if (expected[$_get](i) != _http._HttpParser._toLowerCaseByte(value[$_get](i))) return false;
    }
    return true;
  }
  [_expect](val1, val2) {
    if (val1 != val2) {
      dart.throw(new _http.HttpException.new("Failed to parse HTTP"));
    }
  }
  [_expectHexDigit](byte) {
    if (48 <= dart.notNull(byte) && dart.notNull(byte) <= 57) {
      return dart.notNull(byte) - 48;
    } else if (65 <= dart.notNull(byte) && dart.notNull(byte) <= 70) {
      return dart.notNull(byte) - 65 + 10;
    } else if (97 <= dart.notNull(byte) && dart.notNull(byte) <= 102) {
      return dart.notNull(byte) - 97 + 10;
    } else {
      dart.throw(new _http.HttpException.new("Failed to parse HTTP"));
    }
  }
  [_createIncoming](transferLength) {
    if (!(this[_incoming$] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 994, 12, "_incoming == null");
    if (!(this[_bodyController] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 995, 12, "_bodyController == null");
    if (!!dart.test(this[_bodyPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 996, 12, "!_bodyPaused");
    let incoming = null;
    this[_bodyController] = StreamControllerOfUint8List().new({sync: true, onListen: dart.fn(() => {
        if (!dart.equals(incoming, this[_incoming$])) return;
        if (!dart.test(this[_bodyPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 1002, 18, "_bodyPaused");
        this[_bodyPaused] = false;
        this[_pauseStateChanged]();
      }, VoidToNull()), onPause: dart.fn(() => {
        if (!dart.equals(incoming, this[_incoming$])) return;
        if (!!dart.test(this[_bodyPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 1008, 18, "!_bodyPaused");
        this[_bodyPaused] = true;
        this[_pauseStateChanged]();
      }, VoidToNull()), onResume: dart.fn(() => {
        if (!dart.equals(incoming, this[_incoming$])) return;
        if (!dart.test(this[_bodyPaused])) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart", 1014, 18, "_bodyPaused");
        this[_bodyPaused] = false;
        this[_pauseStateChanged]();
      }, VoidToNull()), onCancel: dart.fn(() => {
        if (!dart.equals(incoming, this[_incoming$])) return;
        if (this[_socketSubscription] != null) {
          this[_socketSubscription].cancel();
        }
        this[_closeIncoming](true);
        this[_controller$0].close();
      }, VoidToNull())});
    incoming = this[_incoming$] = new _http._HttpIncoming.new(this[_headers], transferLength, this[_bodyController].stream);
    this[_bodyPaused] = true;
    this[_pauseStateChanged]();
  }
  [_closeIncoming](closing) {
    if (closing === void 0) closing = false;
    if (this[_incoming$] == null) return;
    let tmp = this[_incoming$];
    tmp.close(closing);
    this[_incoming$] = null;
    if (this[_bodyController] != null) {
      this[_bodyController].close();
      this[_bodyController] = null;
    }
    this[_bodyPaused] = false;
    this[_pauseStateChanged]();
  }
  [_pauseStateChanged]() {
    if (this[_incoming$] != null) {
      if (!dart.test(this[_bodyPaused]) && !dart.test(this[_parserCalled])) {
        this[_parse]();
      }
    } else {
      if (!dart.test(this[_paused]) && !dart.test(this[_parserCalled])) {
        this[_parse]();
      }
    }
  }
  [_reportError$](error, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    if (this[_socketSubscription] != null) this[_socketSubscription].cancel();
    this[_state$1] = 27;
    this[_controller$0].addError(error, core.StackTrace._check(stackTrace));
    this[_controller$0].close();
  }
};
(_http._HttpParser.__ = function(_requestParser) {
  this[_parserCalled] = false;
  this[_buffer$1] = null;
  this[_index$1] = null;
  this[_state$1] = null;
  this[_httpVersionIndex] = null;
  this[_messageType] = null;
  this[_statusCode] = 0;
  this[_statusCodeLength] = 0;
  this[_method$] = JSArrayOfint().of([]);
  this[_uri_or_reason_phrase] = JSArrayOfint().of([]);
  this[_headerField] = JSArrayOfint().of([]);
  this[_headerValue] = JSArrayOfint().of([]);
  this[_httpVersion] = null;
  this[_transferLength$] = -1;
  this[_persistentConnection] = null;
  this[_connectionUpgrade] = null;
  this[_chunked] = null;
  this[_noMessageBody] = false;
  this[_remainingContent] = -1;
  this[_headers] = null;
  this[_incoming$] = null;
  this[_socketSubscription] = null;
  this[_paused] = true;
  this[_bodyPaused] = false;
  this[_controller$0] = null;
  this[_bodyController] = null;
  this[_requestParser$] = _requestParser;
  _http._HttpParser.__proto__.new.call(this);
  this[_controller$0] = StreamControllerOf_HttpIncoming().new({sync: true, onListen: dart.fn(() => {
      this[_paused] = false;
    }, VoidToNull()), onPause: dart.fn(() => {
      this[_paused] = true;
      this[_pauseStateChanged]();
    }, VoidToNull()), onResume: dart.fn(() => {
      this[_paused] = false;
      this[_pauseStateChanged]();
    }, VoidToNull()), onCancel: dart.fn(() => {
      if (this[_socketSubscription] != null) {
        this[_socketSubscription].cancel();
      }
    }, VoidToNull())});
  this[_reset]();
}).prototype = _http._HttpParser.prototype;
;
;
dart.setGetterSignature(_http._HttpParser, () => ({
  __proto__: dart.getGetters(_http._HttpParser.__proto__),
  version: core.String,
  messageType: core.int,
  transferLength: core.int,
  upgrade: core.bool,
  persistentConnection: core.bool
}));
dart.setSetterSignature(_http._HttpParser, () => ({
  __proto__: dart.getSetters(_http._HttpParser.__proto__),
  isHead: core.bool
}));
dart.setLibraryUri(_http._HttpParser, "dart:_http");
;
const _timeoutCallback = dart.privateName(_http, "_timeoutCallback");
const _prev = dart.privateName(_http, "_prev");
const _next$4 = dart.privateName(_http, "_next");
const _data$1 = dart.privateName(_http, "_data");
const _lastSeen = dart.privateName(_http, "_lastSeen");
const _removeFromTimeoutQueue = dart.privateName(_http, "_removeFromTimeoutQueue");
const _sessions = dart.privateName(_http, "_sessions");
const _bumpToEnd = dart.privateName(_http, "_bumpToEnd");
_http._HttpSession = class _HttpSession extends core.Object {
  destroy() {
    this[_destroyed] = true;
    this[_sessionManager$][_removeFromTimeoutQueue](this);
    this[_sessionManager$][_sessions][$remove](this.id);
  }
  [_markSeen]() {
    this[_lastSeen] = new core.DateTime.now();
    this[_sessionManager$][_bumpToEnd](this);
  }
  get lastSeen() {
    return this[_lastSeen];
  }
  get isNew() {
    return this[_isNew];
  }
  set onTimeout(callback) {
    this[_timeoutCallback] = callback;
  }
  containsValue(value) {
    return this[_data$1][$containsValue](value);
  }
  containsKey(key) {
    return this[_data$1][$containsKey](key);
  }
  _get(key) {
    return this[_data$1][$_get](key);
  }
  _set(key, value$) {
    let value = value$;
    this[_data$1][$_set](key, value);
    return value$;
  }
  putIfAbsent(key, ifAbsent) {
    VoidTodynamic()._check(ifAbsent);
    return this[_data$1][$putIfAbsent](key, ifAbsent);
  }
  addAll(other) {
    core.Map._check(other);
    return this[_data$1][$addAll](other);
  }
  remove(key) {
    return this[_data$1][$remove](key);
  }
  clear() {
    this[_data$1][$clear]();
  }
  forEach(f) {
    this[_data$1][$forEach](f);
  }
  get entries() {
    return this[_data$1][$entries];
  }
  addEntries(entries) {
    IterableOfMapEntry()._check(entries);
    this[_data$1][$addEntries](entries);
  }
  map(K, V, transform) {
    return this[_data$1][$map](K, V, transform);
  }
  removeWhere(test) {
    this[_data$1][$removeWhere](test);
  }
  cast(K, V) {
    return this[_data$1][$cast](K, V);
  }
  update(key, update, opts) {
    dynamicTodynamic()._check(update);
    let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
    VoidTodynamic()._check(ifAbsent);
    return this[_data$1][$update](key, update, {ifAbsent: ifAbsent});
  }
  updateAll(update) {
    dynamicAnddynamicTodynamic()._check(update);
    this[_data$1][$updateAll](update);
  }
  get keys() {
    return this[_data$1][$keys];
  }
  get values() {
    return this[_data$1][$values];
  }
  get length() {
    return this[_data$1][$length];
  }
  get isEmpty() {
    return this[_data$1][$isEmpty];
  }
  get isNotEmpty() {
    return this[_data$1][$isNotEmpty];
  }
  toString() {
    return "HttpSession id:" + dart.str(this.id) + " " + dart.str(this[_data$1]);
  }
};
(_http._HttpSession.new = function(_sessionManager, id) {
  this[_destroyed] = false;
  this[_isNew] = true;
  this[_timeoutCallback] = null;
  this[_prev] = null;
  this[_next$4] = null;
  this[_data$1] = new _js_helper.LinkedMap.new();
  this[_sessionManager$] = _sessionManager;
  this.id = id;
  this[_lastSeen] = new core.DateTime.now();
  ;
}).prototype = _http._HttpSession.prototype;
;
_http._HttpSession[dart.implements] = () => [_http.HttpSession];
;
dart.setGetterSignature(_http._HttpSession, () => ({
  __proto__: dart.getGetters(_http._HttpSession.__proto__),
  lastSeen: core.DateTime,
  isNew: core.bool,
  entries: core.Iterable$(core.MapEntry),
  [$entries]: core.Iterable$(core.MapEntry),
  keys: core.Iterable,
  [$keys]: core.Iterable,
  values: core.Iterable,
  [$values]: core.Iterable,
  length: core.int,
  [$length]: core.int,
  isEmpty: core.bool,
  [$isEmpty]: core.bool,
  isNotEmpty: core.bool,
  [$isNotEmpty]: core.bool
}));
dart.setSetterSignature(_http._HttpSession, () => ({
  __proto__: dart.getSetters(_http._HttpSession.__proto__),
  onTimeout: dart.fnType(dart.void, [])
}));
dart.setLibraryUri(_http._HttpSession, "dart:_http");
;
dart.defineExtensionMethods(_http._HttpSession, [
  'containsValue',
  'containsKey',
  '_get',
  '_set',
  'putIfAbsent',
  'addAll',
  'remove',
  'clear',
  'forEach',
  'addEntries',
  'map',
  'removeWhere',
  'cast',
  'update',
  'updateAll',
  'toString'
]);
dart.defineExtensionAccessors(_http._HttpSession, [
  'entries',
  'keys',
  'values',
  'length',
  'isEmpty',
  'isNotEmpty'
]);
const _sessionTimeout = dart.privateName(_http, "_sessionTimeout");
const _head$ = dart.privateName(_http, "_head");
const _tail$ = dart.privateName(_http, "_tail");
const _timer = dart.privateName(_http, "_timer");
const _addToTimeoutQueue = dart.privateName(_http, "_addToTimeoutQueue");
const _stopTimer = dart.privateName(_http, "_stopTimer");
const _startTimer = dart.privateName(_http, "_startTimer");
const _timerTimeout = dart.privateName(_http, "_timerTimeout");
_http._HttpSessionManager = class _HttpSessionManager extends core.Object {
  createSessionId() {
    let data = _http._CryptoUtils.getRandomBytes(16);
    return _http._CryptoUtils.bytesToHex(data);
  }
  getSession(id) {
    return this[_sessions][$_get](id);
  }
  createSession() {
    let t114, t113, t112;
    let id = this.createSessionId();
    while (dart.test(this[_sessions][$containsKey](id))) {
      id = this.createSessionId();
    }
    let session = (t112 = this[_sessions], t113 = id, t114 = new _http._HttpSession.new(this, id), t112[$_set](t113, t114), t114);
    this[_addToTimeoutQueue](session);
    return session;
  }
  set sessionTimeout(timeout) {
    this[_sessionTimeout] = timeout;
    this[_stopTimer]();
    this[_startTimer]();
  }
  close() {
    this[_stopTimer]();
  }
  [_bumpToEnd](session) {
    this[_removeFromTimeoutQueue](session);
    this[_addToTimeoutQueue](session);
  }
  [_addToTimeoutQueue](session) {
    if (this[_head$] == null) {
      if (!(this[_tail$] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_session.dart", 150, 14, "_tail == null");
      this[_tail$] = this[_head$] = session;
      this[_startTimer]();
    } else {
      if (!(this[_timer] != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_session.dart", 154, 14, "_timer != null");
      if (!(this[_tail$] != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_session.dart", 155, 14, "_tail != null");
      this[_tail$][_next$4] = session;
      session[_prev] = this[_tail$];
      this[_tail$] = session;
    }
  }
  [_removeFromTimeoutQueue](session) {
    if (session[_next$4] != null) {
      session[_next$4][_prev] = session[_prev];
    }
    if (session[_prev] != null) {
      session[_prev][_next$4] = session[_next$4];
    }
    if (dart.equals(this[_head$], session)) {
      this[_head$] = session[_next$4];
      this[_stopTimer]();
      this[_startTimer]();
    }
    if (dart.equals(this[_tail$], session)) {
      this[_tail$] = session[_prev];
    }
    session[_next$4] = session[_prev] = null;
  }
  [_timerTimeout]() {
    this[_stopTimer]();
    if (!(this[_head$] != null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_session.dart", 184, 12, "_head != null");
    let session = this[_head$];
    session.destroy();
    if (session[_timeoutCallback] != null) {
      dart.dsend(session, _timeoutCallback, []);
    }
  }
  [_startTimer]() {
    if (!(this[_timer] == null)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/http_session.dart", 193, 12, "_timer == null");
    if (this[_head$] != null) {
      let seconds = new core.DateTime.now().difference(this[_head$].lastSeen).inSeconds;
      this[_timer] = async.Timer.new(new core.Duration.new({seconds: dart.notNull(this[_sessionTimeout]) - dart.notNull(seconds)}), dart.bind(this, _timerTimeout));
    }
  }
  [_stopTimer]() {
    if (this[_timer] != null) {
      this[_timer].cancel();
      this[_timer] = null;
    }
  }
};
(_http._HttpSessionManager.new = function() {
  this[_sessionTimeout] = 20 * 60;
  this[_head$] = null;
  this[_tail$] = null;
  this[_timer] = null;
  this[_sessions] = new (IdentityMapOfString$_HttpSession()).new();
  ;
}).prototype = _http._HttpSessionManager.prototype;
;
;
dart.setSetterSignature(_http._HttpSessionManager, () => ({
  __proto__: dart.getSetters(_http._HttpSessionManager.__proto__),
  sessionTimeout: core.int
}));
dart.setLibraryUri(_http._HttpSessionManager, "dart:_http");
;
_http.HttpOverrides = class HttpOverrides extends core.Object {
  static get current() {
    let t112;
    return _http.HttpOverrides._check((t112 = async.Zone.current._get(_http._httpOverridesToken), t112 == null ? _http.HttpOverrides._global : t112));
  }
  static set global(overrides) {
    _http.HttpOverrides._global = overrides;
  }
  static runZoned(R, body, opts) {
    let createHttpClient = opts && 'createHttpClient' in opts ? opts.createHttpClient : null;
    let findProxyFromEnvironment = opts && 'findProxyFromEnvironment' in opts ? opts.findProxyFromEnvironment : null;
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let overrides = new _http._HttpOverridesScope.new(createHttpClient, findProxyFromEnvironment);
    return _http._asyncRunZoned(R, body, {zoneValues: new _js_helper.LinkedMap.from([_http._httpOverridesToken, overrides]), zoneSpecification: zoneSpecification, onError: onError});
  }
  static runWithHttpOverrides(R, body, overrides, opts) {
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return _http._asyncRunZoned(R, body, {zoneValues: new _js_helper.LinkedMap.from([_http._httpOverridesToken, overrides]), zoneSpecification: zoneSpecification, onError: onError});
  }
  createHttpClient(context) {
    return new _http._HttpClient.new(context);
  }
  findProxyFromEnvironment(url, environment) {
    return _http._HttpClient._findProxyFromEnvironment(url, environment);
  }
};
(_http.HttpOverrides.new = function() {
  ;
}).prototype = _http.HttpOverrides.prototype;
;
;
dart.setLibraryUri(_http.HttpOverrides, "dart:_http");
dart.defineLazy(_http.HttpOverrides, {
  /*_http.HttpOverrides._global*/get _global() {
    return null;
  },
  set _global(_) {}
});
const _previous$5 = dart.privateName(_http, "_previous");
const _createHttpClient$ = dart.privateName(_http, "_createHttpClient");
const _findProxyFromEnvironment$ = dart.privateName(_http, "_findProxyFromEnvironment");
_http._HttpOverridesScope = class _HttpOverridesScope extends _http.HttpOverrides {
  createHttpClient(context) {
    if (this[_createHttpClient$] != null) return this[_createHttpClient$](context);
    if (this[_previous$5] != null) return this[_previous$5].createHttpClient(context);
    return super.createHttpClient(context);
  }
  findProxyFromEnvironment(url, environment) {
    if (this[_findProxyFromEnvironment$] != null) {
      return this[_findProxyFromEnvironment$](url, environment);
    }
    if (this[_previous$5] != null) {
      return this[_previous$5].findProxyFromEnvironment(url, environment);
    }
    return super.findProxyFromEnvironment(url, environment);
  }
};
(_http._HttpOverridesScope.new = function(_createHttpClient, _findProxyFromEnvironment) {
  this[_previous$5] = _http.HttpOverrides.current;
  this[_createHttpClient$] = _createHttpClient;
  this[_findProxyFromEnvironment$] = _findProxyFromEnvironment;
  ;
}).prototype = _http._HttpOverridesScope.prototype;
;
dart.setLibraryUri(_http._HttpOverridesScope, "dart:_http");
;
_http.WebSocketStatus = class WebSocketStatus extends core.Object {};
(_http.WebSocketStatus.new = function() {
  ;
}).prototype = _http.WebSocketStatus.prototype;
;
dart.setLibraryUri(_http.WebSocketStatus, "dart:_http");
dart.defineLazy(_http.WebSocketStatus, {
  /*_http.WebSocketStatus.normalClosure*/get normalClosure() {
    return 1000;
  },
  /*_http.WebSocketStatus.goingAway*/get goingAway() {
    return 1001;
  },
  /*_http.WebSocketStatus.protocolError*/get protocolError() {
    return 1002;
  },
  /*_http.WebSocketStatus.unsupportedData*/get unsupportedData() {
    return 1003;
  },
  /*_http.WebSocketStatus.reserved1004*/get reserved1004() {
    return 1004;
  },
  /*_http.WebSocketStatus.noStatusReceived*/get noStatusReceived() {
    return 1005;
  },
  /*_http.WebSocketStatus.abnormalClosure*/get abnormalClosure() {
    return 1006;
  },
  /*_http.WebSocketStatus.invalidFramePayloadData*/get invalidFramePayloadData() {
    return 1007;
  },
  /*_http.WebSocketStatus.policyViolation*/get policyViolation() {
    return 1008;
  },
  /*_http.WebSocketStatus.messageTooBig*/get messageTooBig() {
    return 1009;
  },
  /*_http.WebSocketStatus.missingMandatoryExtension*/get missingMandatoryExtension() {
    return 1010;
  },
  /*_http.WebSocketStatus.internalServerError*/get internalServerError() {
    return 1011;
  },
  /*_http.WebSocketStatus.reserved1015*/get reserved1015() {
    return 1015;
  },
  /*_http.WebSocketStatus.NORMAL_CLOSURE*/get NORMAL_CLOSURE() {
    return 1000;
  },
  /*_http.WebSocketStatus.GOING_AWAY*/get GOING_AWAY() {
    return 1001;
  },
  /*_http.WebSocketStatus.PROTOCOL_ERROR*/get PROTOCOL_ERROR() {
    return 1002;
  },
  /*_http.WebSocketStatus.UNSUPPORTED_DATA*/get UNSUPPORTED_DATA() {
    return 1003;
  },
  /*_http.WebSocketStatus.RESERVED_1004*/get RESERVED_1004() {
    return 1004;
  },
  /*_http.WebSocketStatus.NO_STATUS_RECEIVED*/get NO_STATUS_RECEIVED() {
    return 1005;
  },
  /*_http.WebSocketStatus.ABNORMAL_CLOSURE*/get ABNORMAL_CLOSURE() {
    return 1006;
  },
  /*_http.WebSocketStatus.INVALID_FRAME_PAYLOAD_DATA*/get INVALID_FRAME_PAYLOAD_DATA() {
    return 1007;
  },
  /*_http.WebSocketStatus.POLICY_VIOLATION*/get POLICY_VIOLATION() {
    return 1008;
  },
  /*_http.WebSocketStatus.MESSAGE_TOO_BIG*/get MESSAGE_TOO_BIG() {
    return 1009;
  },
  /*_http.WebSocketStatus.MISSING_MANDATORY_EXTENSION*/get MISSING_MANDATORY_EXTENSION() {
    return 1010;
  },
  /*_http.WebSocketStatus.INTERNAL_SERVER_ERROR*/get INTERNAL_SERVER_ERROR() {
    return 1011;
  },
  /*_http.WebSocketStatus.RESERVED_1015*/get RESERVED_1015() {
    return 1015;
  }
});
const _createServerResponseHeader = dart.privateName(_http, "_createServerResponseHeader");
const _createClientRequestHeader = dart.privateName(_http, "_createClientRequestHeader");
const _createHeader = dart.privateName(_http, "_createHeader");
const clientNoContextTakeover$ = dart.privateName(_http, "CompressionOptions.clientNoContextTakeover");
const serverNoContextTakeover$ = dart.privateName(_http, "CompressionOptions.serverNoContextTakeover");
const clientMaxWindowBits$ = dart.privateName(_http, "CompressionOptions.clientMaxWindowBits");
const serverMaxWindowBits$ = dart.privateName(_http, "CompressionOptions.serverMaxWindowBits");
const enabled$ = dart.privateName(_http, "CompressionOptions.enabled");
let C511;
let C512;
_http.CompressionOptions = class CompressionOptions extends core.Object {
  get clientNoContextTakeover() {
    return this[clientNoContextTakeover$];
  }
  set clientNoContextTakeover(value) {
    super.clientNoContextTakeover = value;
  }
  get serverNoContextTakeover() {
    return this[serverNoContextTakeover$];
  }
  set serverNoContextTakeover(value) {
    super.serverNoContextTakeover = value;
  }
  get clientMaxWindowBits() {
    return this[clientMaxWindowBits$];
  }
  set clientMaxWindowBits(value) {
    super.clientMaxWindowBits = value;
  }
  get serverMaxWindowBits() {
    return this[serverMaxWindowBits$];
  }
  set serverMaxWindowBits(value) {
    super.serverMaxWindowBits = value;
  }
  get enabled() {
    return this[enabled$];
  }
  set enabled(value) {
    super.enabled = value;
  }
  [_createServerResponseHeader](requested) {
    let t112;
    let info = new _http._CompressionMaxWindowBits.new();
    let mwb = null;
    let part = null;
    if ((t112 = requested, t112 == null ? null : t112.parameters) != null) {
      part = requested.parameters[$_get]("server_max_window_bits");
    }
    if (part != null) {
      if (part.length >= 2 && part[$startsWith]("0")) {
        dart.throw(new core.ArgumentError.new("Illegal 0 padding on value."));
      } else {
        mwb = this.serverMaxWindowBits == null ? core.int.parse(part, {onError: dart.fn(source => 15, StringToint())}) : this.serverMaxWindowBits;
        info.headerValue = "; server_max_window_bits=" + dart.str(mwb);
        info.maxWindowBits = mwb;
      }
    } else {
      info.headerValue = "";
      info.maxWindowBits = 15;
    }
    return info;
  }
  [_createClientRequestHeader](requested, size) {
    let info = "";
    if (requested != null) {
      info = "; client_max_window_bits=" + dart.str(size);
    } else {
      if (this.clientMaxWindowBits == null) {
        info = "; client_max_window_bits";
      } else {
        info = "; client_max_window_bits=" + dart.str(this.clientMaxWindowBits);
      }
      if (this.serverMaxWindowBits != null) {
        info = info + ("; server_max_window_bits=" + dart.str(this.serverMaxWindowBits));
      }
    }
    return info;
  }
  [_createHeader](requested) {
    let t112, t112$, t112$0, t112$1;
    if (requested === void 0) requested = null;
    let info = new _http._CompressionMaxWindowBits.new("", 0);
    if (!dart.test(this.enabled)) {
      return info;
    }
    info.headerValue = "permessage-deflate";
    if (dart.test(this.clientNoContextTakeover) && (requested == null || requested != null && dart.test(requested.parameters[$containsKey]("client_no_context_takeover")))) {
      t112 = info;
      t112.headerValue = dart.notNull(t112.headerValue) + "; client_no_context_takeover";
    }
    if (dart.test(this.serverNoContextTakeover) && (requested == null || requested != null && dart.test(requested.parameters[$containsKey]("server_no_context_takeover")))) {
      t112$ = info;
      t112$.headerValue = dart.notNull(t112$.headerValue) + "; server_no_context_takeover";
    }
    let headerList = this[_createServerResponseHeader](requested);
    t112$0 = info;
    t112$0.headerValue = dart.notNull(t112$0.headerValue) + dart.notNull(headerList.headerValue);
    info.maxWindowBits = headerList.maxWindowBits;
    t112$1 = info;
    t112$1.headerValue = dart.notNull(t112$1.headerValue) + dart.notNull(this[_createClientRequestHeader](requested, info.maxWindowBits));
    return info;
  }
};
(_http.CompressionOptions.new = function(opts) {
  let clientNoContextTakeover = opts && 'clientNoContextTakeover' in opts ? opts.clientNoContextTakeover : false;
  let serverNoContextTakeover = opts && 'serverNoContextTakeover' in opts ? opts.serverNoContextTakeover : false;
  let clientMaxWindowBits = opts && 'clientMaxWindowBits' in opts ? opts.clientMaxWindowBits : null;
  let serverMaxWindowBits = opts && 'serverMaxWindowBits' in opts ? opts.serverMaxWindowBits : null;
  let enabled = opts && 'enabled' in opts ? opts.enabled : true;
  this[clientNoContextTakeover$] = clientNoContextTakeover;
  this[serverNoContextTakeover$] = serverNoContextTakeover;
  this[clientMaxWindowBits$] = clientMaxWindowBits;
  this[serverMaxWindowBits$] = serverMaxWindowBits;
  this[enabled$] = enabled;
  ;
}).prototype = _http.CompressionOptions.prototype;
;
;
dart.setLibraryUri(_http.CompressionOptions, "dart:_http");
;
dart.defineLazy(_http.CompressionOptions, {
  /*_http.CompressionOptions.compressionDefault*/get compressionDefault() {
    return C511 || CT.C511;
  },
  /*_http.CompressionOptions.DEFAULT*/get DEFAULT() {
    return C511 || CT.C511;
  },
  /*_http.CompressionOptions.compressionOff*/get compressionOff() {
    return C512 || CT.C512;
  },
  /*_http.CompressionOptions.OFF*/get OFF() {
    return C512 || CT.C512;
  }
});
_http.WebSocketTransformer = class WebSocketTransformer extends core.Object {
  static new(opts) {
    let protocolSelector = opts && 'protocolSelector' in opts ? opts.protocolSelector : null;
    let compression = opts && 'compression' in opts ? opts.compression : C511 || CT.C511;
    return new _http._WebSocketTransformerImpl.new(protocolSelector, compression);
  }
  static upgrade(request, opts) {
    let protocolSelector = opts && 'protocolSelector' in opts ? opts.protocolSelector : null;
    let compression = opts && 'compression' in opts ? opts.compression : C511 || CT.C511;
    return _http._WebSocketTransformerImpl._upgrade(request, protocolSelector, compression);
  }
  static isUpgradeRequest(request) {
    return _http._WebSocketTransformerImpl._isUpgradeRequest(request);
  }
};
(_http.WebSocketTransformer[dart.mixinNew] = function() {
}).prototype = _http.WebSocketTransformer.prototype;
;
_http.WebSocketTransformer[dart.implements] = () => [async.StreamTransformer$(_http.HttpRequest, _http.WebSocket)];
dart.setLibraryUri(_http.WebSocketTransformer, "dart:_http");
const pingInterval = dart.privateName(_http, "WebSocket.pingInterval");
_http.WebSocket = class WebSocket extends core.Object {
  get pingInterval() {
    return this[pingInterval];
  }
  set pingInterval(value) {
    this[pingInterval] = value;
  }
  static connect(url, opts) {
    let protocols = opts && 'protocols' in opts ? opts.protocols : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let compression = opts && 'compression' in opts ? opts.compression : C511 || CT.C511;
    return _http._WebSocketImpl.connect(url, protocols, headers, {compression: compression});
  }
  static fromUpgradedSocket(socket, opts) {
    let protocol = opts && 'protocol' in opts ? opts.protocol : null;
    let serverSide = opts && 'serverSide' in opts ? opts.serverSide : null;
    let compression = opts && 'compression' in opts ? opts.compression : C511 || CT.C511;
    if (serverSide == null) {
      dart.throw(new core.ArgumentError.new("The serverSide argument must be passed " + "explicitly to WebSocket.fromUpgradedSocket."));
    }
    return new _http._WebSocketImpl._fromSocket(socket, protocol, compression, serverSide);
  }
  static get userAgent() {
    return _http._WebSocketImpl.userAgent;
  }
  static set userAgent(userAgent) {
    _http._WebSocketImpl.userAgent = userAgent;
  }
};
(_http.WebSocket.new = function() {
  this[pingInterval] = null;
  ;
}).prototype = _http.WebSocket.prototype;
_http.WebSocket.prototype[dart.isStream] = true;
;
_http.WebSocket[dart.implements] = () => [async.Stream, async.StreamSink];
dart.setLibraryUri(_http.WebSocket, "dart:_http");
;
dart.defineLazy(_http.WebSocket, {
  /*_http.WebSocket.connecting*/get connecting() {
    return 0;
  },
  /*_http.WebSocket.open*/get open() {
    return 1;
  },
  /*_http.WebSocket.closing*/get closing() {
    return 2;
  },
  /*_http.WebSocket.closed*/get closed() {
    return 3;
  },
  /*_http.WebSocket.CONNECTING*/get CONNECTING() {
    return 0;
  },
  /*_http.WebSocket.OPEN*/get OPEN() {
    return 1;
  },
  /*_http.WebSocket.CLOSING*/get CLOSING() {
    return 2;
  },
  /*_http.WebSocket.CLOSED*/get CLOSED() {
    return 3;
  }
});
const message$21 = dart.privateName(_http, "WebSocketException.message");
_http.WebSocketException = class WebSocketException extends core.Object {
  get message() {
    return this[message$21];
  }
  set message(value) {
    super.message = value;
  }
  toString() {
    return "WebSocketException: " + dart.str(this.message);
  }
};
(_http.WebSocketException.new = function(message) {
  if (message === void 0) message = "";
  this[message$21] = message;
  ;
}).prototype = _http.WebSocketException.prototype;
;
_http.WebSocketException[dart.implements] = () => [io.IOException];
dart.setLibraryUri(_http.WebSocketException, "dart:_http");
;
dart.defineExtensionMethods(_http.WebSocketException, ['toString']);
_http._WebSocketMessageType = class _WebSocketMessageType extends core.Object {};
(_http._WebSocketMessageType.new = function() {
  ;
}).prototype = _http._WebSocketMessageType.prototype;
;
dart.setLibraryUri(_http._WebSocketMessageType, "dart:_http");
dart.defineLazy(_http._WebSocketMessageType, {
  /*_http._WebSocketMessageType.NONE*/get NONE() {
    return 0;
  },
  /*_http._WebSocketMessageType.TEXT*/get TEXT() {
    return 1;
  },
  /*_http._WebSocketMessageType.BINARY*/get BINARY() {
    return 2;
  }
});
_http._WebSocketOpcode = class _WebSocketOpcode extends core.Object {};
(_http._WebSocketOpcode.new = function() {
  ;
}).prototype = _http._WebSocketOpcode.prototype;
;
dart.setLibraryUri(_http._WebSocketOpcode, "dart:_http");
dart.defineLazy(_http._WebSocketOpcode, {
  /*_http._WebSocketOpcode.CONTINUATION*/get CONTINUATION() {
    return 0;
  },
  /*_http._WebSocketOpcode.TEXT*/get TEXT() {
    return 1;
  },
  /*_http._WebSocketOpcode.BINARY*/get BINARY() {
    return 2;
  },
  /*_http._WebSocketOpcode.RESERVED_3*/get RESERVED_3() {
    return 3;
  },
  /*_http._WebSocketOpcode.RESERVED_4*/get RESERVED_4() {
    return 4;
  },
  /*_http._WebSocketOpcode.RESERVED_5*/get RESERVED_5() {
    return 5;
  },
  /*_http._WebSocketOpcode.RESERVED_6*/get RESERVED_6() {
    return 6;
  },
  /*_http._WebSocketOpcode.RESERVED_7*/get RESERVED_7() {
    return 7;
  },
  /*_http._WebSocketOpcode.CLOSE*/get CLOSE() {
    return 8;
  },
  /*_http._WebSocketOpcode.PING*/get PING() {
    return 9;
  },
  /*_http._WebSocketOpcode.PONG*/get PONG() {
    return 10;
  },
  /*_http._WebSocketOpcode.RESERVED_B*/get RESERVED_B() {
    return 11;
  },
  /*_http._WebSocketOpcode.RESERVED_C*/get RESERVED_C() {
    return 12;
  },
  /*_http._WebSocketOpcode.RESERVED_D*/get RESERVED_D() {
    return 13;
  },
  /*_http._WebSocketOpcode.RESERVED_E*/get RESERVED_E() {
    return 14;
  },
  /*_http._WebSocketOpcode.RESERVED_F*/get RESERVED_F() {
    return 15;
  }
});
_http._EncodedString = class _EncodedString extends core.Object {};
(_http._EncodedString.new = function(bytes) {
  this.bytes = bytes;
  ;
}).prototype = _http._EncodedString.prototype;
;
dart.setLibraryUri(_http._EncodedString, "dart:_http");
;
_http._CompressionMaxWindowBits = class _CompressionMaxWindowBits extends core.Object {
  toString() {
    return this.headerValue;
  }
};
(_http._CompressionMaxWindowBits.new = function(headerValue, maxWindowBits) {
  if (headerValue === void 0) headerValue = null;
  if (maxWindowBits === void 0) maxWindowBits = null;
  this.headerValue = headerValue;
  this.maxWindowBits = maxWindowBits;
  ;
}).prototype = _http._CompressionMaxWindowBits.prototype;
;
dart.setLibraryUri(_http._CompressionMaxWindowBits, "dart:_http");
;
dart.defineExtensionMethods(_http._CompressionMaxWindowBits, ['toString']);
const _fin = dart.privateName(_http, "_fin");
const _compressed = dart.privateName(_http, "_compressed");
const _opcode = dart.privateName(_http, "_opcode");
const _len = dart.privateName(_http, "_len");
const _masked = dart.privateName(_http, "_masked");
const _remainingLenBytes = dart.privateName(_http, "_remainingLenBytes");
const _remainingMaskingKeyBytes = dart.privateName(_http, "_remainingMaskingKeyBytes");
const _remainingPayloadBytes = dart.privateName(_http, "_remainingPayloadBytes");
const _unmaskingIndex = dart.privateName(_http, "_unmaskingIndex");
const _currentMessageType = dart.privateName(_http, "_currentMessageType");
const _eventSink$ = dart.privateName(_http, "_eventSink");
const _maskingBytes = dart.privateName(_http, "_maskingBytes");
const _payload = dart.privateName(_http, "_payload");
const _serverSide$ = dart.privateName(_http, "_serverSide");
const _deflate$ = dart.privateName(_http, "_deflate");
const _isControlFrame = dart.privateName(_http, "_isControlFrame");
const _lengthDone = dart.privateName(_http, "_lengthDone");
const _maskDone = dart.privateName(_http, "_maskDone");
const _unmask = dart.privateName(_http, "_unmask");
const _controlFrameEnd = dart.privateName(_http, "_controlFrameEnd");
const _messageFrameEnd = dart.privateName(_http, "_messageFrameEnd");
const _startPayload = dart.privateName(_http, "_startPayload");
const _prepareForNextFrame = dart.privateName(_http, "_prepareForNextFrame");
_http._WebSocketProtocolTransformer = class _WebSocketProtocolTransformer extends async.StreamTransformerBase$(core.List$(core.int), dart.dynamic) {
  bind(stream) {
    StreamOfListOfint()._check(stream);
    return async.Stream.eventTransformed(stream, dart.fn(eventSink => {
      if (this[_eventSink$] != null) {
        dart.throw(new core.StateError.new("WebSocket transformer already used."));
      }
      this[_eventSink$] = eventSink;
      return this;
    }, EventSinkTo_WebSocketProtocolTransformer()));
  }
  addError(error, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    this[_eventSink$].addError(error, stackTrace);
  }
  close() {
    this[_eventSink$].close();
  }
  add(bytes) {
    let t112;
    ListOfint()._check(bytes);
    let buffer = typed_data.Uint8List.is(bytes) ? bytes : _native_typed_data.NativeUint8List.fromList(bytes);
    let index = 0;
    let lastIndex = buffer[$length];
    if (this[_state$1] === 5) {
      dart.throw(new _http.WebSocketException.new("Data on closed connection"));
    }
    if (this[_state$1] === 6) {
      dart.throw(new _http.WebSocketException.new("Data on failed connection"));
    }
    while (index < dart.notNull(lastIndex) && this[_state$1] !== 5 && this[_state$1] !== 6) {
      let byte = buffer[$_get](index);
      if (dart.notNull(this[_state$1]) <= 2) {
        if (this[_state$1] === 0) {
          this[_fin] = (dart.notNull(byte) & 128) !== 0;
          if ((dart.notNull(byte) & (32 | 16) >>> 0) !== 0) {
            dart.throw(new _http.WebSocketException.new("Protocol error"));
          }
          this[_opcode] = (dart.notNull(byte) & 15) >>> 0;
          if (this[_opcode] !== 0) {
            if ((dart.notNull(byte) & 64) !== 0) {
              this[_compressed] = true;
            } else {
              this[_compressed] = false;
            }
          }
          if (dart.notNull(this[_opcode]) <= 2) {
            if (this[_opcode] === 0) {
              if (this[_currentMessageType] === 0) {
                dart.throw(new _http.WebSocketException.new("Protocol error"));
              }
            } else {
              if (!(this[_opcode] === 1 || this[_opcode] === 2)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/websocket_impl.dart", 165, 22, "_opcode == _WebSocketOpcode.TEXT ||\n                  _opcode == _WebSocketOpcode.BINARY");
              if (this[_currentMessageType] !== 0) {
                dart.throw(new _http.WebSocketException.new("Protocol error"));
              }
              this[_currentMessageType] = this[_opcode];
            }
          } else if (dart.notNull(this[_opcode]) >= 8 && dart.notNull(this[_opcode]) <= 10) {
            if (!dart.test(this[_fin])) dart.throw(new _http.WebSocketException.new("Protocol error"));
          } else {
            dart.throw(new _http.WebSocketException.new("Protocol error"));
          }
          this[_state$1] = 1;
        } else if (this[_state$1] === 1) {
          this[_masked] = (dart.notNull(byte) & 128) !== 0;
          this[_len] = dart.notNull(byte) & 127;
          if (dart.test(this[_isControlFrame]()) && dart.notNull(this[_len]) > 125) {
            dart.throw(new _http.WebSocketException.new("Protocol error"));
          }
          if (this[_len] === 126) {
            this[_len] = 0;
            this[_remainingLenBytes] = 2;
            this[_state$1] = 2;
          } else if (this[_len] === 127) {
            this[_len] = 0;
            this[_remainingLenBytes] = 8;
            this[_state$1] = 2;
          } else {
            if (!(dart.notNull(this[_len]) < 126)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/websocket_impl.dart", 195, 20, "_len < 126");
            this[_lengthDone]();
          }
        } else {
          if (!(this[_state$1] === 2)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/websocket_impl.dart", 199, 18, "_state == LEN_REST");
          this[_len] = (dart.notNull(this[_len]) << 8 | dart.notNull(byte)) >>> 0;
          this[_remainingLenBytes] = dart.notNull(this[_remainingLenBytes]) - 1;
          if (this[_remainingLenBytes] === 0) {
            this[_lengthDone]();
          }
        }
      } else {
        if (this[_state$1] === 3) {
          this[_maskingBytes][$_set](4 - dart.notNull((t112 = this[_remainingMaskingKeyBytes], this[_remainingMaskingKeyBytes] = dart.notNull(t112) - 1, t112)), byte);
          if (this[_remainingMaskingKeyBytes] === 0) {
            this[_maskDone]();
          }
        } else {
          if (!(this[_state$1] === 4)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/websocket_impl.dart", 213, 18, "_state == PAYLOAD");
          let payloadLength = math.min(core.int, dart.notNull(lastIndex) - index, this[_remainingPayloadBytes]);
          this[_remainingPayloadBytes] = dart.notNull(this[_remainingPayloadBytes]) - payloadLength;
          if (dart.test(this[_masked])) {
            this[_unmask](index, payloadLength, buffer);
          }
          this[_payload].add(typed_data.Uint8List.view(buffer[$buffer], index, payloadLength));
          index = index + payloadLength;
          if (dart.test(this[_isControlFrame]())) {
            if (this[_remainingPayloadBytes] === 0) this[_controlFrameEnd]();
          } else {
            if (this[_currentMessageType] !== 1 && this[_currentMessageType] !== 2) {
              dart.throw(new _http.WebSocketException.new("Protocol error"));
            }
            if (this[_remainingPayloadBytes] === 0) this[_messageFrameEnd]();
          }
          index = index - 1;
        }
      }
      index = index + 1;
    }
  }
  [_unmask](index, length, buffer) {
    let t114, t113, t112, t113$, t112$, t114$, t113$0, t112$0;
    if (dart.notNull(length) >= 16) {
      let startOffset = 16 - (dart.notNull(index) & 15);
      let end = dart.notNull(index) + startOffset;
      for (let i = index; dart.notNull(i) < end; i = dart.notNull(i) + 1) {
        t112 = buffer;
        t113 = i;
        t112[$_set](t113, (dart.notNull(t112[$_get](t113)) ^ dart.notNull(core.int._check(this[_maskingBytes][$_get](dart.notNull((t114 = this[_unmaskingIndex], this[_unmaskingIndex] = dart.notNull(t114) + 1, t114)) & 3)))) >>> 0);
      }
      index = dart.notNull(index) + startOffset;
      length = dart.notNull(length) - startOffset;
      let blockCount = (dart.notNull(length) / 16)[$truncate]();
      if (blockCount > 0) {
        let mask = 0;
        for (let i = 3; i >= 0; i = i - 1) {
          mask = (mask << 8 | dart.notNull(core.int._check(this[_maskingBytes][$_get](dart.notNull(this[_unmaskingIndex]) + i & 3)))) >>> 0;
        }
        let blockMask = new _native_typed_data.NativeInt32x4.new(mask, mask, mask, mask);
        let blockBuffer = typed_data.Int32x4List.view(buffer[$buffer], index, blockCount);
        for (let i = 0; i < dart.notNull(blockBuffer[$length]); i = i + 1) {
          t112$ = blockBuffer;
          t113$ = i;
          t112$[$_set](t113$, t112$[$_get](t113$)['^'](blockMask));
        }
        let bytes = blockCount * 16;
        index = dart.notNull(index) + bytes;
        length = dart.notNull(length) - bytes;
      }
    }
    let end = dart.notNull(index) + dart.notNull(length);
    for (let i = index; dart.notNull(i) < end; i = dart.notNull(i) + 1) {
      t112$0 = buffer;
      t113$0 = i;
      t112$0[$_set](t113$0, (dart.notNull(t112$0[$_get](t113$0)) ^ dart.notNull(core.int._check(this[_maskingBytes][$_get](dart.notNull((t114$ = this[_unmaskingIndex], this[_unmaskingIndex] = dart.notNull(t114$) + 1, t114$)) & 3)))) >>> 0);
    }
  }
  [_lengthDone]() {
    if (dart.test(this[_masked])) {
      if (!dart.test(this[_serverSide$])) {
        dart.throw(new _http.WebSocketException.new("Received masked frame from server"));
      }
      this[_state$1] = 3;
    } else {
      if (dart.test(this[_serverSide$])) {
        dart.throw(new _http.WebSocketException.new("Received unmasked frame from client"));
      }
      this[_remainingPayloadBytes] = this[_len];
      this[_startPayload]();
    }
  }
  [_maskDone]() {
    this[_remainingPayloadBytes] = this[_len];
    this[_startPayload]();
  }
  [_startPayload]() {
    if (this[_remainingPayloadBytes] === 0) {
      if (dart.test(this[_isControlFrame]())) {
        switch (this[_opcode]) {
          case 8:
          {
            this[_state$1] = 5;
            this[_eventSink$].close();
            break;
          }
          case 9:
          {
            this[_eventSink$].add(new _http._WebSocketPing.new());
            break;
          }
          case 10:
          {
            this[_eventSink$].add(new _http._WebSocketPong.new());
            break;
          }
        }
        this[_prepareForNextFrame]();
      } else {
        this[_messageFrameEnd]();
      }
    } else {
      this[_state$1] = 4;
    }
  }
  [_messageFrameEnd]() {
    if (dart.test(this[_fin])) {
      let bytes = this[_payload].takeBytes();
      if (this[_deflate$] != null && dart.test(this[_compressed])) {
        bytes = this[_deflate$].processIncomingMessage(bytes);
      }
      switch (this[_currentMessageType]) {
        case 1:
        {
          this[_eventSink$].add(convert.utf8.decode(bytes));
          break;
        }
        case 2:
        {
          this[_eventSink$].add(bytes);
          break;
        }
      }
      this[_currentMessageType] = 0;
    }
    this[_prepareForNextFrame]();
  }
  [_controlFrameEnd]() {
    switch (this[_opcode]) {
      case 8:
      {
        this.closeCode = 1005;
        let payload = this[_payload].takeBytes();
        if (dart.notNull(payload[$length]) > 0) {
          if (payload[$length] === 1) {
            dart.throw(new _http.WebSocketException.new("Protocol error"));
          }
          this.closeCode = (dart.notNull(payload[$_get](0)) << 8 | dart.notNull(payload[$_get](1))) >>> 0;
          if (this.closeCode === 1005) {
            dart.throw(new _http.WebSocketException.new("Protocol error"));
          }
          if (dart.notNull(payload[$length]) > 2) {
            this.closeReason = convert.utf8.decode(payload[$sublist](2));
          }
        }
        this[_state$1] = 5;
        this[_eventSink$].close();
        break;
      }
      case 9:
      {
        this[_eventSink$].add(new _http._WebSocketPing.new(this[_payload].takeBytes()));
        break;
      }
      case 10:
      {
        this[_eventSink$].add(new _http._WebSocketPong.new(this[_payload].takeBytes()));
        break;
      }
    }
    this[_prepareForNextFrame]();
  }
  [_isControlFrame]() {
    return this[_opcode] === 8 || this[_opcode] === 9 || this[_opcode] === 10;
  }
  [_prepareForNextFrame]() {
    if (this[_state$1] !== 5 && this[_state$1] !== 6) this[_state$1] = 0;
    this[_fin] = false;
    this[_opcode] = -1;
    this[_len] = -1;
    this[_remainingLenBytes] = -1;
    this[_remainingMaskingKeyBytes] = 4;
    this[_remainingPayloadBytes] = -1;
    this[_unmaskingIndex] = 0;
  }
};
(_http._WebSocketProtocolTransformer.new = function(_serverSide, _deflate) {
  if (_serverSide === void 0) _serverSide = false;
  if (_deflate === void 0) _deflate = null;
  this[_state$1] = 0;
  this[_fin] = false;
  this[_compressed] = false;
  this[_opcode] = -1;
  this[_len] = -1;
  this[_masked] = false;
  this[_remainingLenBytes] = -1;
  this[_remainingMaskingKeyBytes] = 4;
  this[_remainingPayloadBytes] = -1;
  this[_unmaskingIndex] = 0;
  this[_currentMessageType] = 0;
  this.closeCode = 1005;
  this.closeReason = "";
  this[_eventSink$] = null;
  this[_maskingBytes] = core.List.new(4);
  this[_payload] = io.BytesBuilder.new({copy: false});
  this[_serverSide$] = _serverSide;
  this[_deflate$] = _deflate;
  _http._WebSocketProtocolTransformer.__proto__.new.call(this);
  ;
}).prototype = _http._WebSocketProtocolTransformer.prototype;
;
_http._WebSocketProtocolTransformer[dart.implements] = () => [async.EventSink$(core.List$(core.int))];
;
dart.setLibraryUri(_http._WebSocketProtocolTransformer, "dart:_http");
;
dart.defineLazy(_http._WebSocketProtocolTransformer, {
  /*_http._WebSocketProtocolTransformer.START*/get START() {
    return 0;
  },
  /*_http._WebSocketProtocolTransformer.LEN_FIRST*/get LEN_FIRST() {
    return 1;
  },
  /*_http._WebSocketProtocolTransformer.LEN_REST*/get LEN_REST() {
    return 2;
  },
  /*_http._WebSocketProtocolTransformer.MASK*/get MASK() {
    return 3;
  },
  /*_http._WebSocketProtocolTransformer.PAYLOAD*/get PAYLOAD() {
    return 4;
  },
  /*_http._WebSocketProtocolTransformer.CLOSED*/get CLOSED() {
    return 5;
  },
  /*_http._WebSocketProtocolTransformer.FAILURE*/get FAILURE() {
    return 6;
  },
  /*_http._WebSocketProtocolTransformer.FIN*/get FIN() {
    return 128;
  },
  /*_http._WebSocketProtocolTransformer.RSV1*/get RSV1() {
    return 64;
  },
  /*_http._WebSocketProtocolTransformer.RSV2*/get RSV2() {
    return 32;
  },
  /*_http._WebSocketProtocolTransformer.RSV3*/get RSV3() {
    return 16;
  },
  /*_http._WebSocketProtocolTransformer.OPCODE*/get OPCODE() {
    return 15;
  }
});
_http._WebSocketPing = class _WebSocketPing extends core.Object {};
(_http._WebSocketPing.new = function(payload) {
  if (payload === void 0) payload = null;
  this.payload = payload;
  ;
}).prototype = _http._WebSocketPing.prototype;
;
dart.setLibraryUri(_http._WebSocketPing, "dart:_http");
;
_http._WebSocketPong = class _WebSocketPong extends core.Object {};
(_http._WebSocketPong.new = function(payload) {
  if (payload === void 0) payload = null;
  this.payload = payload;
  ;
}).prototype = _http._WebSocketPong.prototype;
;
dart.setLibraryUri(_http._WebSocketPong, "dart:_http");
;
const _protocolSelector$ = dart.privateName(_http, "_protocolSelector");
const _compression$ = dart.privateName(_http, "_compression");
_http._WebSocketTransformerImpl = class _WebSocketTransformerImpl extends async.StreamTransformerBase$(_http.HttpRequest, _http.WebSocket) {
  bind(stream) {
    StreamOfHttpRequest()._check(stream);
    stream.listen(dart.fn(request => {
      _http._WebSocketTransformerImpl._upgrade(request, this[_protocolSelector$], this[_compression$]).then(dart.void, dart.fn(webSocket => this[_controller$0].add(webSocket), WebSocketTovoid())).catchError(dart.bind(this[_controller$0], 'addError'));
    }, HttpRequestToNull()), {onDone: dart.fn(() => {
        this[_controller$0].close();
      }, VoidToNull())});
    return this[_controller$0].stream;
  }
  static _tokenizeFieldValue(headerValue) {
    let tokens = JSArrayOfString().of([]);
    let start = 0;
    let index = 0;
    while (index < headerValue.length) {
      if (headerValue[$_get](index) === ",") {
        tokens[$add](headerValue[$substring](start, index));
        start = index + 1;
      } else if (headerValue[$_get](index) === " " || headerValue[$_get](index) === "\t") {
        start = start + 1;
      }
      index = index + 1;
    }
    tokens[$add](headerValue[$substring](start, index));
    return tokens;
  }
  static _upgrade(request, _protocolSelector, compression) {
    let t112;
    let response = request.response;
    if (!dart.test(_http._WebSocketTransformerImpl._isUpgradeRequest(request))) {
      t112 = response;
      t112.statusCode = 400;
      t112.close();
      t112;
      return FutureOfWebSocket().error(new _http.WebSocketException.new("Invalid WebSocket upgrade request"));
    }
    function upgrade(protocol) {
      let t112;
      t112 = response;
      t112.statusCode = 101;
      t112.headers.add("connection", "Upgrade");
      t112.headers.add("upgrade", "websocket");
      t112;
      let key = request.headers.value("Sec-WebSocket-Key");
      let sha1 = new _http._SHA1.new();
      sha1.add((dart.str(key) + dart.str(_http._webSocketGUID))[$codeUnits]);
      let accept = _http._CryptoUtils.bytesToBase64(sha1.close());
      response.headers.add("Sec-WebSocket-Accept", accept);
      if (protocol != null) {
        response.headers.add("Sec-WebSocket-Protocol", protocol);
      }
      let deflate = _http._WebSocketTransformerImpl._negotiateCompression(request, response, compression);
      response.headers.contentLength = 0;
      return response.detachSocket().then(_http.WebSocket, dart.fn(socket => new _http._WebSocketImpl._fromSocket(socket, protocol, compression, true, deflate), SocketTo_WebSocketImpl()));
    }
    dart.fn(upgrade, StringToFutureOfWebSocket());
    let protocols = request.headers._get("Sec-WebSocket-Protocol");
    if (protocols != null && _protocolSelector != null) {
      protocols = _http._WebSocketTransformerImpl._tokenizeFieldValue(protocols[$join](", "));
      return FutureOfString().new(dart.fn(() => FutureOrOfString()._check(_protocolSelector(protocols)), VoidToFutureOrOfString())).then(core.String, dart.fn(protocol => {
        if (dart.notNull(protocols[$indexOf](protocol)) < 0) {
          dart.throw(new _http.WebSocketException.new("Selected protocol is not in the list of available protocols"));
        }
        return protocol;
      }, StringToString())).catchError(dart.fn(error => {
        let t112;
        t112 = response;
        t112.statusCode = 500;
        t112.close();
        t112;
        dart.throw(error);
      }, dynamicToNull())).then(_http.WebSocket, upgrade);
    } else {
      return upgrade(null);
    }
  }
  static _negotiateCompression(request, response, compression) {
    let extensionHeader = request.headers.value("Sec-WebSocket-Extensions");
    extensionHeader == null ? extensionHeader = "" : null;
    let hv = _http.HeaderValue.parse(extensionHeader, {valueSeparator: ","});
    if (dart.test(compression.enabled) && hv.value === "permessage-deflate") {
      let info = compression[_createHeader](hv);
      response.headers.add("Sec-WebSocket-Extensions", info.headerValue);
      let serverNoContextTakeover = dart.test(hv.parameters[$containsKey]("server_no_context_takeover")) && dart.test(compression.serverNoContextTakeover);
      let clientNoContextTakeover = dart.test(hv.parameters[$containsKey]("client_no_context_takeover")) && dart.test(compression.clientNoContextTakeover);
      let deflate = new _http._WebSocketPerMessageDeflate.new({serverNoContextTakeover: serverNoContextTakeover, clientNoContextTakeover: clientNoContextTakeover, serverMaxWindowBits: info.maxWindowBits, clientMaxWindowBits: info.maxWindowBits, serverSide: true});
      return deflate;
    }
    return null;
  }
  static _isUpgradeRequest(request) {
    if (request.method !== "GET") {
      return false;
    }
    if (request.headers._get("connection") == null) {
      return false;
    }
    let isUpgrade = false;
    request.headers._get("connection")[$forEach](dart.fn(value => {
      if (value[$toLowerCase]() === "upgrade") isUpgrade = true;
    }, StringToNull()));
    if (!isUpgrade) return false;
    let upgrade = request.headers.value("upgrade");
    if (upgrade == null || upgrade[$toLowerCase]() !== "websocket") {
      return false;
    }
    let version = request.headers.value("Sec-WebSocket-Version");
    if (version == null || version !== "13") {
      return false;
    }
    let key = request.headers.value("Sec-WebSocket-Key");
    if (key == null) {
      return false;
    }
    return true;
  }
};
(_http._WebSocketTransformerImpl.new = function(_protocolSelector, _compression) {
  this[_controller$0] = StreamControllerOfWebSocket().new({sync: true});
  this[_protocolSelector$] = _protocolSelector;
  this[_compression$] = _compression;
  _http._WebSocketTransformerImpl.__proto__.new.call(this);
  ;
}).prototype = _http._WebSocketTransformerImpl.prototype;
;
_http._WebSocketTransformerImpl[dart.implements] = () => [_http.WebSocketTransformer];
;
dart.setLibraryUri(_http._WebSocketTransformerImpl, "dart:_http");
;
const _ensureDecoder = dart.privateName(_http, "_ensureDecoder");
const _ensureEncoder = dart.privateName(_http, "_ensureEncoder");
let C513;
_http._WebSocketPerMessageDeflate = class _WebSocketPerMessageDeflate extends core.Object {
  [_ensureDecoder]() {
    if (this.decoder == null) {
      this.decoder = io.RawZLibFilter.inflateFilter({windowBits: dart.test(this.serverSide) ? this.clientMaxWindowBits : this.serverMaxWindowBits, raw: true});
    }
  }
  [_ensureEncoder]() {
    if (this.encoder == null) {
      this.encoder = io.RawZLibFilter.deflateFilter({windowBits: dart.test(this.serverSide) ? this.serverMaxWindowBits : this.clientMaxWindowBits, raw: true});
    }
  }
  processIncomingMessage(msg) {
    this[_ensureDecoder]();
    let data = JSArrayOfint().of([]);
    data[$addAll](msg);
    data[$addAll](C513 || CT.C513);
    this.decoder.process(data, 0, data[$length]);
    let result = io.BytesBuilder.new();
    let out = null;
    while ((out = this.decoder.processed()) != null) {
      result.add(out);
    }
    if (dart.test(this.serverSide) && dart.test(this.clientNoContextTakeover) || !dart.test(this.serverSide) && dart.test(this.serverNoContextTakeover)) {
      this.decoder = null;
    }
    return result.takeBytes();
  }
  processOutgoingMessage(msg) {
    this[_ensureEncoder]();
    let result = JSArrayOfint().of([]);
    let buffer = null;
    if (!typed_data.Uint8List.is(msg)) {
      for (let i = 0; i < dart.notNull(msg[$length]); i = i + 1) {
        if (dart.notNull(msg[$_get](i)) < 0 || 255 < dart.notNull(msg[$_get](i))) {
          dart.throw(new core.ArgumentError.new("List element is not a byte value " + "(value " + dart.str(msg[$_get](i)) + " at index " + dart.str(i) + ")"));
        }
      }
      buffer = _native_typed_data.NativeUint8List.fromList(msg);
    } else {
      buffer = typed_data.Uint8List._check(msg);
    }
    this.encoder.process(buffer, 0, buffer[$length]);
    let out = null;
    while ((out = this.encoder.processed()) != null) {
      result[$addAll](out);
    }
    if (!dart.test(this.serverSide) && dart.test(this.clientNoContextTakeover) || dart.test(this.serverSide) && dart.test(this.serverNoContextTakeover)) {
      this.encoder = null;
    }
    if (dart.notNull(result[$length]) > 4) {
      result = result[$sublist](0, dart.notNull(result[$length]) - 4);
    }
    if (result[$length] === 0) {
      return JSArrayOfint().of([0]);
    }
    return result;
  }
};
(_http._WebSocketPerMessageDeflate.new = function(opts) {
  let clientMaxWindowBits = opts && 'clientMaxWindowBits' in opts ? opts.clientMaxWindowBits : 15;
  let serverMaxWindowBits = opts && 'serverMaxWindowBits' in opts ? opts.serverMaxWindowBits : 15;
  let serverNoContextTakeover = opts && 'serverNoContextTakeover' in opts ? opts.serverNoContextTakeover : false;
  let clientNoContextTakeover = opts && 'clientNoContextTakeover' in opts ? opts.clientNoContextTakeover : false;
  let serverSide = opts && 'serverSide' in opts ? opts.serverSide : false;
  this.decoder = null;
  this.encoder = null;
  this.clientMaxWindowBits = clientMaxWindowBits;
  this.serverMaxWindowBits = serverMaxWindowBits;
  this.serverNoContextTakeover = serverNoContextTakeover;
  this.clientNoContextTakeover = clientNoContextTakeover;
  this.serverSide = serverSide;
  ;
}).prototype = _http._WebSocketPerMessageDeflate.prototype;
;
;
dart.setLibraryUri(_http._WebSocketPerMessageDeflate, "dart:_http");
;
const _deflateHelper = dart.privateName(_http, "_deflateHelper");
const _outCloseCode = dart.privateName(_http, "_outCloseCode");
const _outCloseReason = dart.privateName(_http, "_outCloseReason");
_http._WebSocketOutgoingTransformer = class _WebSocketOutgoingTransformer extends async.StreamTransformerBase$(dart.dynamic, core.List$(core.int)) {
  bind(stream) {
    async.Stream._check(stream);
    return StreamOfListOfint().eventTransformed(stream, dart.fn(eventSink => {
      if (this[_eventSink$] != null) {
        dart.throw(new core.StateError.new("WebSocket transformer already used"));
      }
      this[_eventSink$] = eventSink;
      return this;
    }, EventSinkOfListOfintTo_WebSocketOutgoingTransformer()));
  }
  add(message) {
    if (_http._WebSocketPong.is(message)) {
      this.addFrame(10, message.payload);
      return;
    }
    if (_http._WebSocketPing.is(message)) {
      this.addFrame(9, message.payload);
      return;
    }
    let data = null;
    let opcode = null;
    if (message != null) {
      if (typeof message == 'string') {
        opcode = 1;
        data = convert.utf8.encode(message);
      } else if (ListOfint().is(message)) {
        opcode = 2;
        data = message;
      } else if (_http._EncodedString.is(message)) {
        opcode = 1;
        data = message.bytes;
      } else {
        dart.throw(new core.ArgumentError.new(message));
      }
      if (this[_deflateHelper] != null) {
        data = this[_deflateHelper].processOutgoingMessage(data);
      }
    } else {
      opcode = 1;
    }
    this.addFrame(opcode, data);
  }
  addError(error, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    this[_eventSink$].addError(error, stackTrace);
  }
  close() {
    let code = this.webSocket[_outCloseCode];
    let reason = this.webSocket[_outCloseReason];
    let data = null;
    if (code != null) {
      data = JSArrayOfint().of([]);
      data[$add](dart.notNull(code) >> 8 & 255);
      data[$add](dart.notNull(code) & 255);
      if (reason != null) {
        data[$addAll](convert.utf8.encode(reason));
      }
    }
    this.addFrame(8, data);
    this[_eventSink$].close();
  }
  addFrame(opcode, data) {
    _http._WebSocketOutgoingTransformer.createFrame(opcode, data, this.webSocket[_serverSide$], this[_deflateHelper] != null && (opcode === 1 || opcode === 2))[$forEach](dart.fn(e => {
      this[_eventSink$].add(e);
    }, ListOfintToNull()));
  }
  static createFrame(opcode, data, serverSide, compressed) {
    let t112, t112$, t112$0, t112$1, t113, t112$2, t113$, t112$3, t113$0, t112$4;
    let mask = !dart.test(serverSide);
    let dataLength = data == null ? 0 : data[$length];
    let headerSize = mask ? 6 : 2;
    if (dart.notNull(dataLength) > 65535) {
      headerSize = headerSize + 8;
    } else if (dart.notNull(dataLength) > 125) {
      headerSize = headerSize + 2;
    }
    let header = _native_typed_data.NativeUint8List.new(headerSize);
    let index = 0;
    let hoc = (128 | (dart.test(compressed) ? 64 : 0) | (dart.notNull(opcode) & 15) >>> 0) >>> 0;
    header[$_set]((t112 = index, index = t112 + 1, t112), hoc);
    let lengthBytes = 1;
    if (dart.notNull(dataLength) > 65535) {
      header[$_set]((t112$ = index, index = t112$ + 1, t112$), 127);
      lengthBytes = 8;
    } else if (dart.notNull(dataLength) > 125) {
      header[$_set]((t112$0 = index, index = t112$0 + 1, t112$0), 126);
      lengthBytes = 2;
    }
    for (let i = 0; i < lengthBytes; i = i + 1) {
      header[$_set]((t112$1 = index, index = t112$1 + 1, t112$1), dataLength[$rightShift]((lengthBytes - 1 - i) * 8) & 255);
    }
    if (mask) {
      t112$2 = header;
      t113 = 1;
      t112$2[$_set](t113, (dart.notNull(t112$2[$_get](t113)) | 1 << 7) >>> 0);
      let maskBytes = _http._CryptoUtils.getRandomBytes(4);
      header[$setRange](index, index + 4, maskBytes);
      index = index + 4;
      if (data != null) {
        let list = null;
        if (opcode === 1 && typed_data.Uint8List.is(data)) {
          list = data;
        } else {
          if (typed_data.Uint8List.is(data)) {
            list = _native_typed_data.NativeUint8List.fromList(data);
          } else {
            list = _native_typed_data.NativeUint8List.new(data[$length]);
            for (let i = 0; i < dart.notNull(data[$length]); i = i + 1) {
              if (dart.notNull(data[$_get](i)) < 0 || 255 < dart.notNull(data[$_get](i))) {
                dart.throw(new core.ArgumentError.new("List element is not a byte value " + "(value " + dart.str(data[$_get](i)) + " at index " + dart.str(i) + ")"));
              }
              list[$_set](i, data[$_get](i));
            }
          }
        }
        let blockCount = (dart.notNull(list[$length]) / 16)[$truncate]();
        if (blockCount > 0) {
          let mask = 0;
          for (let i = 3; i >= 0; i = i - 1) {
            mask = (mask << 8 | dart.notNull(maskBytes[$_get](i))) >>> 0;
          }
          let blockMask = new _native_typed_data.NativeInt32x4.new(mask, mask, mask, mask);
          let blockBuffer = typed_data.Int32x4List.view(list[$buffer], 0, blockCount);
          for (let i = 0; i < dart.notNull(blockBuffer[$length]); i = i + 1) {
            t112$3 = blockBuffer;
            t113$ = i;
            t112$3[$_set](t113$, t112$3[$_get](t113$)['^'](blockMask));
          }
        }
        for (let i = blockCount * 16; i < dart.notNull(list[$length]); i = i + 1) {
          t112$4 = list;
          t113$0 = i;
          t112$4[$_set](t113$0, (dart.notNull(t112$4[$_get](t113$0)) ^ dart.notNull(maskBytes[$_get](i & 3))) >>> 0);
        }
        data = list;
      }
    }
    if (!(index === headerSize)) dart.assertFailed(null, "org-dartlang-sdk:///dart-sdk/lib/_http/websocket_impl.dart", 837, 12, "index == headerSize");
    if (data == null) {
      return JSArrayOfListOfint().of([header]);
    } else {
      return JSArrayOfListOfint().of([header, data]);
    }
  }
};
(_http._WebSocketOutgoingTransformer.new = function(webSocket) {
  this[_eventSink$] = null;
  this[_deflateHelper] = null;
  this.webSocket = webSocket;
  _http._WebSocketOutgoingTransformer.__proto__.new.call(this);
  this[_deflateHelper] = this.webSocket[_deflate$];
}).prototype = _http._WebSocketOutgoingTransformer.prototype;
;
_http._WebSocketOutgoingTransformer[dart.implements] = () => [async.EventSink];
;
dart.setLibraryUri(_http._WebSocketOutgoingTransformer, "dart:_http");
;
const _issuedPause = dart.privateName(_http, "_issuedPause");
const _closed$ = dart.privateName(_http, "_closed");
const _closeCompleter$ = dart.privateName(_http, "_closeCompleter");
const _completer = dart.privateName(_http, "_completer");
const _onListen = dart.privateName(_http, "_onListen");
const _onPause$ = dart.privateName(_http, "_onPause");
const _onResume$ = dart.privateName(_http, "_onResume");
const _cancel$ = dart.privateName(_http, "_cancel");
const _done = dart.privateName(_http, "_done");
const _ensureController = dart.privateName(_http, "_ensureController");
_http._WebSocketConsumer = class _WebSocketConsumer extends core.Object {
  [_onListen]() {
    if (this[_subscription$0] != null) {
      this[_subscription$0].cancel();
    }
  }
  [_onPause$]() {
    if (this[_subscription$0] != null) {
      this[_subscription$0].pause();
    } else {
      this[_issuedPause] = true;
    }
  }
  [_onResume$]() {
    if (this[_subscription$0] != null) {
      this[_subscription$0].resume();
    } else {
      this[_issuedPause] = false;
    }
  }
  [_cancel$]() {
    if (this[_subscription$0] != null) {
      let subscription = this[_subscription$0];
      this[_subscription$0] = null;
      subscription.cancel();
    }
  }
  [_ensureController]() {
    if (this[_controller$0] != null) return;
    this[_controller$0] = async.StreamController.new({sync: true, onPause: dart.bind(this, _onPause$), onResume: dart.bind(this, _onResume$), onCancel: dart.bind(this, _onListen)});
    let stream = this[_controller$0].stream.transform(ListOfint(), new _http._WebSocketOutgoingTransformer.new(this.webSocket));
    this.socket.addStream(stream).then(core.Null, dart.fn(_ => {
      this[_done]();
      this[_closeCompleter$].complete(this.webSocket);
    }, dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
        this[_closed$] = true;
        this[_cancel$]();
        if (core.ArgumentError.is(error)) {
          if (!dart.test(this[_done](error, stackTrace))) {
            this[_closeCompleter$].completeError(error, stackTrace);
          }
        } else {
          this[_done]();
          this[_closeCompleter$].complete(this.webSocket);
        }
      }, dynamicAndStackTraceToNull())});
  }
  [_done](error, stackTrace) {
    if (error === void 0) error = null;
    if (stackTrace === void 0) stackTrace = null;
    if (this[_completer] == null) return false;
    if (error != null) {
      this[_completer].completeError(error, stackTrace);
    } else {
      this[_completer].complete(this.webSocket);
    }
    this[_completer] = null;
    return true;
  }
  addStream(stream) {
    async.Stream._check(stream);
    if (dart.test(this[_closed$])) {
      stream.listen(null).cancel();
      return async.Future.value(this.webSocket);
    }
    this[_ensureController]();
    this[_completer] = async.Completer.new();
    this[_subscription$0] = stream.listen(dart.fn(data => {
      this[_controller$0].add(data);
    }, dynamicToNull()), {onDone: dart.bind(this, _done), onError: dart.bind(this, _done), cancelOnError: true});
    if (dart.test(this[_issuedPause])) {
      this[_subscription$0].pause();
      this[_issuedPause] = false;
    }
    return this[_completer].future;
  }
  close() {
    this[_ensureController]();
    const closeSocket = () => {
      return this.socket.close().catchError(dart.fn(_ => {
      }, dynamicToNull())).then(dart.dynamic, dart.fn(_ => this.webSocket, dynamicTo_WebSocketImpl()));
    };
    dart.fn(closeSocket, VoidToFuture());
    this[_controller$0].close();
    return this[_closeCompleter$].future.then(dart.dynamic, dart.fn(_ => closeSocket(), dynamicToFuture()));
  }
  add(data) {
    if (dart.test(this[_closed$])) return;
    this[_ensureController]();
    if (dart.test(this[_controller$0].isClosed)) return;
    this[_controller$0].add(data);
  }
  closeSocket() {
    this[_closed$] = true;
    this[_cancel$]();
    this.close();
  }
};
(_http._WebSocketConsumer.new = function(webSocket, socket) {
  this[_controller$0] = null;
  this[_subscription$0] = null;
  this[_issuedPause] = false;
  this[_closed$] = false;
  this[_closeCompleter$] = CompleterOfWebSocket().new();
  this[_completer] = null;
  this.webSocket = webSocket;
  this.socket = socket;
  ;
}).prototype = _http._WebSocketConsumer.prototype;
;
_http._WebSocketConsumer[dart.implements] = () => [async.StreamConsumer];
;
dart.setLibraryUri(_http._WebSocketConsumer, "dart:_http");
;
const _sink = dart.privateName(_http, "_sink");
const _readyState = dart.privateName(_http, "_readyState");
const _writeClosed = dart.privateName(_http, "_writeClosed");
const _closeCode = dart.privateName(_http, "_closeCode");
const _closeReason = dart.privateName(_http, "_closeReason");
const _pingInterval = dart.privateName(_http, "_pingInterval");
const _pingTimer = dart.privateName(_http, "_pingTimer");
const _consumer = dart.privateName(_http, "_consumer");
const _closeTimer = dart.privateName(_http, "_closeTimer");
const _close$0 = dart.privateName(_http, "_close");
let C514;
const Stream__ServiceObject$36$ = class Stream__ServiceObject extends async.Stream {};
(Stream__ServiceObject$36$.new = function() {
  _http._ServiceObject.new.call(this);
  Stream__ServiceObject$36$.__proto__.new.call(this);
}).prototype = Stream__ServiceObject$36$.prototype;
(Stream__ServiceObject$36$._internal = function() {
  _http._ServiceObject.new.call(this);
  Stream__ServiceObject$36$.__proto__._internal.call(this);
}).prototype = Stream__ServiceObject$36$.prototype;
dart.applyMixin(Stream__ServiceObject$36$, _http._ServiceObject);
_http._WebSocketImpl = class _WebSocketImpl extends Stream__ServiceObject$36$ {
  static connect(url, protocols, headers, opts) {
    let compression = opts && 'compression' in opts ? opts.compression : C511 || CT.C511;
    let uri = core.Uri.parse(url);
    if (uri.scheme !== "ws" && uri.scheme !== "wss") {
      dart.throw(new _http.WebSocketException.new("Unsupported URL scheme '" + dart.str(uri.scheme) + "'"));
    }
    let random = math.Random.new();
    let nonceData = _native_typed_data.NativeUint8List.new(16);
    for (let i = 0; i < 16; i = i + 1) {
      nonceData[$_set](i, random.nextInt(256));
    }
    let nonce = _http._CryptoUtils.bytesToBase64(nonceData);
    uri = core._Uri.new({scheme: uri.scheme === "wss" ? "https" : "http", userInfo: uri.userInfo, host: uri.host, port: uri.port, path: uri.path, query: uri.query, fragment: uri.fragment});
    return _http._WebSocketImpl._httpClient.openUrl("GET", uri).then(_http.HttpClientResponse, dart.fn(request => {
      let t112;
      if (uri.userInfo != null && !uri.userInfo[$isEmpty]) {
        let auth = _http._CryptoUtils.bytesToBase64(convert.utf8.encode(uri.userInfo));
        request.headers.set("authorization", "Basic " + dart.str(auth));
      }
      if (headers != null) {
        headers[$forEach](dart.fn((field, value) => request.headers.add(field, value), StringAnddynamicTovoid$()));
      }
      t112 = request.headers;
      t112.set("connection", "Upgrade");
      t112.set("upgrade", "websocket");
      t112.set("Sec-WebSocket-Key", nonce);
      t112.set("Cache-Control", "no-cache");
      t112.set("Sec-WebSocket-Version", "13");
      t112;
      if (protocols != null) {
        request.headers.add("Sec-WebSocket-Protocol", protocols[$toList]());
      }
      if (dart.test(compression.enabled)) {
        request.headers.add("Sec-WebSocket-Extensions", compression[_createHeader]());
      }
      return request.close();
    }, HttpClientRequestToFutureOfHttpClientResponse())).then(_http.WebSocket, dart.fn(response => {
      function error(message) {
        response.detachSocket().then(core.Null, dart.fn(socket => {
          socket.destroy();
        }, SocketToNull()));
        dart.throw(new _http.WebSocketException.new(message));
      }
      dart.fn(error, StringTovoid());
      if (response.statusCode !== 101 || response.headers._get("connection") == null || !dart.test(response.headers._get("connection")[$any](dart.fn(value => value[$toLowerCase]() === "upgrade", StringTobool()))) || response.headers.value("upgrade")[$toLowerCase]() !== "websocket") {
        error("Connection to '" + dart.str(uri) + "' was not upgraded to websocket");
      }
      let accept = response.headers.value("Sec-WebSocket-Accept");
      if (accept == null) {
        error("Response did not contain a 'Sec-WebSocket-Accept' header");
      }
      let sha1 = new _http._SHA1.new();
      sha1.add((dart.str(nonce) + dart.str(_http._webSocketGUID))[$codeUnits]);
      let expectedAccept = sha1.close();
      let receivedAccept = _http._CryptoUtils.base64StringToBytes(accept);
      if (expectedAccept[$length] != receivedAccept[$length]) {
        error("Response header 'Sec-WebSocket-Accept' is the wrong length");
      }
      for (let i = 0; i < dart.notNull(expectedAccept[$length]); i = i + 1) {
        if (expectedAccept[$_get](i) != receivedAccept[$_get](i)) {
          error("Bad response 'Sec-WebSocket-Accept' header");
        }
      }
      let protocol = response.headers.value("Sec-WebSocket-Protocol");
      let deflate = _http._WebSocketImpl.negotiateClientCompression(response, compression);
      return response.detachSocket().then(_http.WebSocket, dart.fn(socket => new _http._WebSocketImpl._fromSocket(socket, protocol, compression, false, deflate), SocketTo_WebSocketImpl()));
    }, HttpClientResponseToFutureOfWebSocket()));
  }
  static negotiateClientCompression(response, compression) {
    let extensionHeader = response.headers.value("Sec-WebSocket-Extensions");
    if (extensionHeader == null) {
      extensionHeader = "";
    }
    let hv = _http.HeaderValue.parse(extensionHeader, {valueSeparator: ","});
    if (dart.test(compression.enabled) && hv.value === "permessage-deflate") {
      let serverNoContextTakeover = hv.parameters[$containsKey]("server_no_context_takeover");
      let clientNoContextTakeover = hv.parameters[$containsKey]("client_no_context_takeover");
      function getWindowBits(type) {
        let o = hv.parameters[$_get](type);
        if (o == null) {
          return 15;
        }
        return core.int.parse(o, {onError: dart.fn(s => 15, StringToint())});
      }
      dart.fn(getWindowBits, StringToint());
      return new _http._WebSocketPerMessageDeflate.new({clientMaxWindowBits: getWindowBits("client_max_window_bits"), serverMaxWindowBits: getWindowBits("server_max_window_bits"), clientNoContextTakeover: clientNoContextTakeover, serverNoContextTakeover: serverNoContextTakeover});
    }
    return null;
  }
  listen(onData, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    return this[_controller$0].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
  }
  get pingInterval() {
    return this[_pingInterval];
  }
  set pingInterval(interval) {
    if (dart.test(this[_writeClosed])) return;
    if (this[_pingTimer] != null) this[_pingTimer].cancel();
    this[_pingInterval] = interval;
    if (this[_pingInterval] == null) return;
    this[_pingTimer] = async.Timer.new(this[_pingInterval], dart.fn(() => {
      if (dart.test(this[_writeClosed])) return;
      this[_consumer].add(new _http._WebSocketPing.new());
      this[_pingTimer] = async.Timer.new(this[_pingInterval], dart.fn(() => {
        this[_close$0](1001);
      }, VoidToNull()));
    }, VoidToNull()));
  }
  get readyState() {
    return this[_readyState];
  }
  get extensions() {
    return null;
  }
  get closeCode() {
    return this[_closeCode];
  }
  get closeReason() {
    return this[_closeReason];
  }
  add(data) {
    this[_sink].add(data);
  }
  addUtf8Text(bytes) {
    core.ArgumentError.checkNotNull(bytes, "bytes");
    this[_sink].add(new _http._EncodedString.new(bytes));
  }
  addError(error, stackTrace) {
    if (stackTrace === void 0) stackTrace = null;
    this[_sink].addError(error, stackTrace);
  }
  addStream(stream) {
    async.Stream._check(stream);
    return this[_sink].addStream(stream);
  }
  get done() {
    return this[_sink].done;
  }
  close(code, reason) {
    if (code === void 0) code = null;
    if (reason === void 0) reason = null;
    if (dart.test(_http._WebSocketImpl._isReservedStatusCode(code))) {
      dart.throw(new _http.WebSocketException.new("Reserved status code " + dart.str(code)));
    }
    if (this[_outCloseCode] == null) {
      this[_outCloseCode] = code;
      this[_outCloseReason] = reason;
    }
    if (!dart.test(this[_controller$0].isClosed)) {
      if (!dart.test(this[_controller$0].hasListener) && this[_subscription$0] != null) {
        this[_controller$0].stream.drain(dart.dynamic).catchError(dart.fn(_ => new _js_helper.LinkedMap.new(), dynamicToMap()));
      }
      if (this[_closeTimer] == null) {
        this[_closeTimer] = async.Timer.new(C514 || CT.C514, dart.fn(() => {
          this[_closeCode] = this[_outCloseCode];
          this[_closeReason] = this[_outCloseReason];
          if (this[_subscription$0] != null) this[_subscription$0].cancel();
          this[_controller$0].close();
          _http._WebSocketImpl._webSockets[$remove](this[_serviceId$]);
        }, VoidToNull()));
      }
    }
    return this[_sink].close();
  }
  static get userAgent() {
    return _http._WebSocketImpl._httpClient.userAgent;
  }
  static set userAgent(userAgent) {
    _http._WebSocketImpl._httpClient.userAgent = userAgent;
  }
  [_close$0](code, reason) {
    if (code === void 0) code = null;
    if (reason === void 0) reason = null;
    if (dart.test(this[_writeClosed])) return;
    if (this[_outCloseCode] == null) {
      this[_outCloseCode] = code;
      this[_outCloseReason] = reason;
    }
    this[_writeClosed] = true;
    this[_consumer].closeSocket();
    _http._WebSocketImpl._webSockets[$remove](this[_serviceId$]);
  }
  get [_serviceTypePath$]() {
    return "io/websockets";
  }
  get [_serviceTypeName$]() {
    return "WebSocket";
  }
  [_toJSON$](ref) {
    let name = dart.str(dart.dload(dart.dload(this[_socket$0], 'address'), 'host')) + ":" + dart.str(dart.dload(this[_socket$0], 'port'));
    let r = new (IdentityMapOfString$dynamic()).from(["id", this[_servicePath$], "type", this[_serviceType$](ref), "name", name, "user_name", name]);
    if (dart.test(ref)) {
      return r;
    }
    try {
      r[$_set]("socket", dart.dsend(this[_socket$0], _toJSON$, [true]));
    } catch (e) {
      let _ = dart.getThrown(e);
      r[$_set]("socket", new (IdentityMapOfString$String()).from(["id", this[_servicePath$], "type", "@Socket", "name", "UserSocket", "user_name", "UserSocket"]));
    }
    return r;
  }
  static _isReservedStatusCode(code) {
    return code != null && (dart.notNull(code) < 1000 || code === 1004 || code === 1005 || code === 1006 || dart.notNull(code) > 1011 && dart.notNull(code) < 1015 || dart.notNull(code) >= 1015 && dart.notNull(code) < 3000);
  }
};
(_http._WebSocketImpl._fromSocket = function(_socket, protocol, compression, _serverSide, deflate) {
  if (_serverSide === void 0) _serverSide = false;
  if (deflate === void 0) deflate = null;
  this[_controller$0] = null;
  this[_subscription$0] = null;
  this[_sink] = null;
  this[_readyState] = 0;
  this[_writeClosed] = false;
  this[_closeCode] = null;
  this[_closeReason] = null;
  this[_pingInterval] = null;
  this[_pingTimer] = null;
  this[_consumer] = null;
  this[_outCloseCode] = null;
  this[_outCloseReason] = null;
  this[_closeTimer] = null;
  this[_deflate$] = null;
  this[_socket$0] = _socket;
  this.protocol = protocol;
  this[_serverSide$] = _serverSide;
  _http._WebSocketImpl.__proto__.new.call(this);
  this[_consumer] = new _http._WebSocketConsumer.new(this, io.Socket._check(this[_socket$0]));
  this[_sink] = new _http._StreamSinkImpl.new(this[_consumer]);
  this[_readyState] = 1;
  this[_deflate$] = deflate;
  let transformer = new _http._WebSocketProtocolTransformer.new(this[_serverSide$], this[_deflate$]);
  this[_subscription$0] = transformer.bind(StreamOfListOfint()._check(this[_socket$0])).listen(dart.fn(data => {
    if (_http._WebSocketPing.is(data)) {
      if (!dart.test(this[_writeClosed])) this[_consumer].add(new _http._WebSocketPong.new(data.payload));
    } else if (_http._WebSocketPong.is(data)) {
      this.pingInterval = this[_pingInterval];
    } else {
      this[_controller$0].add(data);
    }
  }, dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
      if (this[_closeTimer] != null) this[_closeTimer].cancel();
      if (core.FormatException.is(error)) {
        this[_close$0](1007);
      } else {
        this[_close$0](1002);
      }
      this[_closeCode] = this[_outCloseCode];
      this[_closeReason] = this[_outCloseReason];
      this[_controller$0].close();
    }, dynamicAnddynamicToNull()), onDone: dart.fn(() => {
      if (this[_closeTimer] != null) this[_closeTimer].cancel();
      if (this[_readyState] === 1) {
        this[_readyState] = 2;
        if (!dart.test(_http._WebSocketImpl._isReservedStatusCode(transformer.closeCode))) {
          this[_close$0](transformer.closeCode, transformer.closeReason);
        } else {
          this[_close$0]();
        }
        this[_readyState] = 3;
      }
      this[_closeCode] = transformer.closeCode;
      this[_closeReason] = transformer.closeReason;
      this[_controller$0].close();
    }, VoidToNull()), cancelOnError: true});
  this[_subscription$0].pause();
  this[_controller$0] = async.StreamController.new({sync: true, onListen: dart.bind(this[_subscription$0], 'resume'), onCancel: dart.fn(() => {
      this[_subscription$0].cancel();
      this[_subscription$0] = null;
    }, VoidToNull()), onPause: dart.bind(this[_subscription$0], 'pause'), onResume: dart.bind(this[_subscription$0], 'resume')});
  _http._WebSocketImpl._webSockets[$_set](this[_serviceId$], this);
}).prototype = _http._WebSocketImpl.prototype;
;
_http._WebSocketImpl[dart.implements] = () => [_http.WebSocket];
;
dart.setGetterSignature(_http._WebSocketImpl, () => ({
  __proto__: dart.getGetters(_http._WebSocketImpl.__proto__),
  pingInterval: core.Duration,
  readyState: core.int,
  extensions: core.String,
  closeCode: core.int,
  closeReason: core.String,
  done: async.Future,
  [_serviceTypePath$]: core.String,
  [_serviceTypeName$]: core.String
}));
dart.setSetterSignature(_http._WebSocketImpl, () => ({
  __proto__: dart.getSetters(_http._WebSocketImpl.__proto__),
  pingInterval: core.Duration
}));
dart.setLibraryUri(_http._WebSocketImpl, "dart:_http");
;
dart.defineLazy(_http._WebSocketImpl, {
  /*_http._WebSocketImpl._webSockets*/get _webSockets() {
    return new (LinkedMapOfint$_WebSocketImpl()).new();
  },
  set _webSockets(_) {},
  /*_http._WebSocketImpl.DEFAULT_WINDOW_BITS*/get DEFAULT_WINDOW_BITS() {
    return 15;
  },
  /*_http._WebSocketImpl.PER_MESSAGE_DEFLATE*/get PER_MESSAGE_DEFLATE() {
    return "permessage-deflate";
  },
  /*_http._WebSocketImpl._httpClient*/get _httpClient() {
    return _http.HttpClient.new();
  }
});
_http._getHttpVersion = function _getHttpVersion() {
  let version = io.Platform.version;
  let index = version[$indexOf](".", version[$indexOf](".") + 1);
  version = version[$substring](0, index);
  return "Dart/" + dart.str(version) + " (dart:io)";
};
dart.defineLazy(_http, {
  /*_http._MASK_8*/get _MASK_8() {
    return 255;
  },
  /*_http._MASK_32*/get _MASK_32() {
    return 4294967295.0;
  },
  /*_http._BITS_PER_BYTE*/get _BITS_PER_BYTE() {
    return 8;
  },
  /*_http._BYTES_PER_WORD*/get _BYTES_PER_WORD() {
    return 4;
  },
  /*_http._nextServiceId*/get _nextServiceId() {
    return 1;
  },
  set _nextServiceId(_) {},
  /*_http._OUTGOING_BUFFER_SIZE*/get _OUTGOING_BUFFER_SIZE() {
    return 8192;
  },
  /*_http._DART_SESSION_ID*/get _DART_SESSION_ID() {
    return "DARTSESSID";
  },
  /*_http._httpOverridesToken*/get _httpOverridesToken() {
    return new core.Object.new();
  },
  /*_http._asyncRunZoned*/get _asyncRunZoned() {
    return C261 || CT.C261;
  },
  /*_http._webSocketGUID*/get _webSocketGUID() {
    return "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
  },
  /*_http._clientNoContextTakeover*/get _clientNoContextTakeover() {
    return "client_no_context_takeover";
  },
  /*_http._serverNoContextTakeover*/get _serverNoContextTakeover() {
    return "server_no_context_takeover";
  },
  /*_http._clientMaxWindowBits*/get _clientMaxWindowBits() {
    return "client_max_window_bits";
  },
  /*_http._serverMaxWindowBits*/get _serverMaxWindowBits() {
    return "server_max_window_bits";
  }
});
dart.setBaseClass(_http._HttpConnection.__proto__, collection.LinkedListEntry$(_http._HttpConnection));
// Exports:
exports.dart = dart;
exports._debugger = _debugger;
exports._foreign_helper = _foreign_helper;
exports._interceptors = _interceptors;
exports._internal = _internal;
exports._isolate_helper = _isolate_helper;
exports._js_helper = _js_helper;
exports._js_mirrors = _js_mirrors;
exports._js_primitives = _js_primitives;
exports._metadata = _metadata;
exports._native_typed_data = _native_typed_data;
exports.async = async;
exports.collection = collection;
exports.convert = convert;
exports.developer = developer;
exports.io = io;
exports.isolate = isolate;
exports.js = js;
exports.js_util = js_util;
exports.math = math;
exports.mirrors = mirrors;
exports.typed_data = typed_data;
exports.indexed_db = indexed_db;
exports.html = html;
exports.html_common = html_common;
exports.svg = svg;
exports.web_audio = web_audio;
exports.web_gl = web_gl;
exports.web_sql = web_sql;
exports.core = core;
exports.ui = ui;
exports._http = _http;
exports.dartx = dartx;

//# sourceMappingURL=dart_sdk.js.map
